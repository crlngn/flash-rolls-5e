var V=Object.defineProperty;var K=(E,e,t)=>e in E?V(E,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):E[e]=t;var R=(E,e,t)=>K(E,typeof e!="symbol"?e+"":e,t);const w={INIT:"init",READY:"ready",RENDER_SIDEBAR_TAB:"renderSidebarTab",USER_CONNECTED:"userConnected"},U={READY:"socketlib.ready"},k={PRE_ROLL_ABILITY_CHECK:"dnd5e.preRollAbilityCheck",PRE_ROLL_SAVING_THROW:"dnd5e.preRollSavingThrow",PRE_ROLL_DEATH_SAVE_V2:"dnd5e.preRollDeathSaveV2",PRE_ROLL_SKILL_V2:"dnd5e.preRollSkillV2",PRE_ROLL_TOOL_V2:"dnd5e.preRollToolV2",PRE_ROLL_HIT_DIE_V2:"dnd5e.preRollHitDieV2",PRE_ROLL_INITIATIVE:"dnd5e.preRollInitiative",PRE_ROLL_ATTACK_V2:"dnd5e.preRollAttackV2",PRE_ROLL_DAMAGE_V2:"dnd5e.preRollDamageV2"},O="crlngn-roll-requests",D=["%cRoll That For Me","color:rgb(47, 151, 161); font-weight: bold;","|"],F={ABILITY_CHECK:{name:"abilityCheck",label:"Ability Check",subList:"abilities",actorPath:"system.abilities"},SAVING_THROW:{name:"savingThrow",label:"Saving Throw",subList:"abilities",actorPath:"system.abilities"},SKILL:{name:"skill",label:"Skill Check",subList:"skills",actorPath:"system.skills"},TOOL:{name:"tool",label:"Tool Check",subList:"tools",actorPath:"system.tools"},CONCENTRATION:{name:"concentration",label:"Concentration Check",subList:null,actorPath:""},INITIATIVE:{name:"initiativeDialog",label:"Initiative Roll",subList:null,actorPath:""},DEATH_SAVE:{name:"deathSave",label:"Death Save",subList:null,actorPath:""},CUSTOM:{name:"custom",label:"Custom Roll",subList:null,actorPath:""}},P={ID:O,ROLL_REQUEST_OPTIONS:F},v=class v{static log(e="",t=[],l=!1){try{const s=game.settings.get(O,"debug-mode")||v.debugOn;if(!(l||s))return;console.log(...D,e,...t)}catch{(l||v.debugOn)&&console.log(...D,e,...t)}}static warn(e="",t=[]){console.warn(...D,e,...t)}static error(e,t={ui:!1,console:!0,permanent:!1}){var l;t.ui&&((l=ui.notifications)==null||l.error(e,{localize:!0,permanent:t.permanent})),t.console&&console.error(...D,e)}};R(v,"debugOn",!1);let o=v;const N={checkbox:"checkbox"},q={client:"client",world:"world"},b=()=>({debugMode:{tag:"debug-mode",label:game.i18n.localize("CRLNGN_ROLLS.settings.debugMode.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.debugMode.hint"),propType:Boolean,inputType:N.checkbox,default:!0,scope:q.client,config:!0},rollRequestsEnabled:{tag:"roll-requests-enabled",label:game.i18n.localize("CRLNGN_ROLLS.settings.rollRequestsEnabled.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.rollRequestsEnabled.hint"),propType:Boolean,inputType:N.checkbox,default:!0,scope:q.world,config:!0},skipDialogs:{tag:"skip-dialogs",label:game.i18n.localize("CRLNGN_ROLLS.settings.skipDialogs.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.skipDialogs.hint"),propType:Boolean,inputType:N.checkbox,default:!1,scope:q.world,config:!0},useGMTargetTokens:{tag:"use-gm-target-tokens",label:game.i18n.localize("CRLNGN_ROLLS.settings.useGMTargetTokens.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.useGMTargetTokens.hint"),propType:Boolean,inputType:N.checkbox,default:!1,scope:q.world,config:!0},rollInterceptionEnabled:{tag:"roll-interception-enabled",label:game.i18n.localize("CRLNGN_ROLLS.settings.rollInterceptionEnabled.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint"),propType:Boolean,inputType:N.checkbox,default:!0,scope:q.world,config:!0}});class p{static registerSettings(){const e=b();Object.entries(e).forEach(async l=>{const s=l[1];o.log("Registering... ",[l]);const i={name:s.label,hint:s.hint,default:s.default,type:s.propType,scope:s.scope,config:s.config,requiresReload:s.requiresReload||!1,onChange:u=>p.apply(s.tag,u)};s.choices&&(i.choices=s.choices),await game.settings.register(O,s.tag,i),(p.get(s.tag)===void 0||p.get(s.tag)===null)&&p.set(s.tag,s.default),o.log("registerSettings",[s.tag,p.get(s.tag)])})}static get(e,t=O){if(!e)return null;let l=!1;if(t===O)l=game.settings.get(t,e);else{let i=game.settings.storage.get("client")[`${t}.${e}`];i===void 0&&(i=game.settings.storage.get("world").getSetting(`${t}.${e}`),l=i==null?void 0:i.value),o.log("GET Setting",[i,l])}return l}static set(e,t,l=O){if(!e)return!1;let s=game.settings.storage.get("client")[`${l}.${e}`];s||(s=game.settings.storage.get("world").getSetting(`${l}.${e}`)),o.log("Setting",[e,s]);try{game.settings.set(l,e,t)}catch{o.log("Unable to change setting",[e,s])}return!0}static apply(e,t){const l=b();switch(e){case l.rollRequestsEnabled.tag:p.applyRollRequestsEnabled(t);break}}static applyRollRequestsEnabled(e){const t=document.querySelector("#chat-controls .chat-control-icon.roll-requests-icon");t&&(e?t.classList.add("active"):t.classList.remove("active"))}}const c=class c{static serializeForTransport(e,t=!1){return e==null||(t&&e.rolls&&Array.isArray(e.rolls)&&(e.rolls=e.rolls.map(l=>l instanceof Roll?l.toJSON():l)),o.log("ROLLS DATA",[e,e.subject])),e}static deserializeFromTransport(e,t=!1){let l={...e};if(!e)return l;if(t&&e.rolls&&e.rolls.length>0){const s=l.rolls.map(i=>{let u=i;return typeof i=="string"?u=Roll.fromJSON(i):u=Roll.fromJSON(JSON.stringify(i)),u});return l.rolls=[...s],l}return l}};R(c,"socket"),R(c,"_activeExecutions",new Map),R(c,"initialize",e=>{Hooks.once(U.READY,()=>{if(o.log("Attempting to register module..."),typeof socketlib>"u"){o.error("SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled."),ui.notifications.error(game.i18n.localize("CRLNGN_ROLLS.notifications.socketlibMissing"),{permanent:!0});return}try{c.socket=socketlib.registerModule(O),e&&e(),o.log("SocketUtil | Module registered",[c.socket])}catch(t){o.log("Problem registering module",[t])}})}),R(c,"registerCall",(e,t)=>{c.socket?(c.socket.register(e,t),o.log("SocketUtil - Registered callback",[c.socket,e])):o.log("SocketUtil - Failed to register callback (socket not initialized)",[c.socket,e])}),R(c,"sendMessage",(e,t)=>{o.log("SocketUtil - sendMessage",[e]),t&&t()}),R(c,"execForGMs",async(e,...t)=>{if(!c.socket){o.log("SocketUtil - Socket not initialized. Cannot execute as GM.");return}return await c.socket.executeForAllGMs(e,...t)}),R(c,"execForAll",async(e,...t)=>{if(!c.socket){o.log("SocketUtil - Socket not initialized. Cannot execute for all clients.");return}return await c.socket.executeForEveryone(e,...t)}),R(c,"execForUser",async(e,t,...l)=>{if(!c.socket){o.log("SocketUtil - Socket not initialized. Cannot execute as user.");return}if(t===game.user.id)return o.log("SocketUtil - Preventing recursive call",[t]),null;const s=`${e}-${t}`;if(c._activeExecutions.has(s))return o.log("SocketUtil - Preventing recursive call",[s]),null;c._activeExecutions.set(s,!0);try{const i=await c.socket.executeAsUser(e,t,...l);return o.log("SocketUtil - Executed as user.",[i]),i}catch(i){return o.log("SocketUtil - Error executing as user",[i]),null}finally{c._activeExecutions.delete(s)}});let S=c;class H extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2){constructor(e={}){super(e),this.selectedActors=new Set,this.currentTab="pc",this.selectedRequestType=null}async _prepareContext(e){var x;const t=await super._prepareContext(e),l=game.actors.contents,s=[],i=[],u=game.scenes.active;for(const g of l){if(g.type!=="character"&&g.type!=="npc")continue;const m={id:g.id,uuid:g.uuid,name:g.name,img:g.img,selected:this.selectedActors.has(g.id),crlngnStats:this._getActorStats(g)};Object.entries(g.ownership).some(([_,d])=>{const h=game.users.get(_);return h&&!h.isGM&&d>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER})?s.push(m):u&&u.tokens.some(d=>d.actorId===g.id)&&i.push(m)}const a=b(),r=p.get(a.rollRequestsEnabled.tag),f=p.get(a.skipDialogs.tag),y=this.currentTab==="pc"?s:i,C=y.length>0&&y.every(g=>this.selectedActors.has(g.id)),A=[];if(this.selectedActors.size>0)for(const[g,m]of Object.entries(P.ROLL_REQUEST_OPTIONS))A.push({id:g,name:game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${m.name}`)||m.label,rollable:m.subList==null,hasSubList:!!m.subList});const I=[];if(this.selectedRequestType&&this.selectedActors.size>0){const g=P.ROLL_REQUEST_OPTIONS[this.selectedRequestType];if(g&&g.subList){const m=Array.from(this.selectedActors)[0],M=game.actors.get(m);if(g.subList==="tools"){const _=((x=CONFIG.DND5E.enrichmentLookup)==null?void 0:x.tools)||CONFIG.DND5E.tools||{};for(const[d,h]of Object.entries(_)){let L=d;if(h!=null&&h.id){const T=dnd5e.documents.Trait.getBaseItem(h.id,{indexOnly:!0});L=(T==null?void 0:T.name)||d}else L=d.replace(/([A-Z])/g," $1").replace(/^./,T=>T.toUpperCase()).trim();I.push({id:d,name:L,rollable:!0})}I.sort((d,h)=>d.name.localeCompare(h.name))}else if(M&&g.actorPath){const _=foundry.utils.getProperty(M,g.actorPath)||{},d=CONFIG.DND5E[g.subList];for(const[h,L]of Object.entries(_)){let T="";g.subList==="skills"&&(d!=null&&d[h])||g.subList==="abilities"&&(d!=null&&d[h])?T=d[h].label:T=L.label||game.i18n.localize(L.name||h)||h,I.push({id:h,name:T,rollable:!0})}g.subList==="skills"&&I.sort((h,L)=>h.name.localeCompare(L.name))}}}return{...t,actors:y,currentTab:this.currentTab,isPCTab:this.currentTab==="pc",isNPCTab:this.currentTab==="npc",selectedTab:this.currentTab,rollRequestsEnabled:r,skipDialogs:f,selectAllOn:C,hasSelectedActors:this.selectedActors.size>0,requestTypes:A,rollTypes:I,showNames:!0}}_getActorStats(e){var s,i,u,a,r;const t=e.system,l=[];return(s=t.attributes)!=null&&s.hp&&l.push({abbrev:"HP",value:t.attributes.hp.value}),(i=t.attributes)!=null&&i.ac&&l.push({abbrev:"AC",value:t.attributes.ac.value}),(u=t.attributes)!=null&&u.spelldc&&l.push({abbrev:"DC",value:t.attributes.spelldc}),(r=(a=t.skills)==null?void 0:a.prc)!=null&&r.passive&&l.push({abbrev:"PP",value:t.skills.prc.passive}),l}_onRender(e,t){super._onRender(e,t),this._attachListeners()}_attachListeners(){var i,u,a;o.log("Attaching listeners");const e=this.element;(i=e.querySelector("#crlngn-requests-toggle"))==null||i.addEventListener("change",this._onToggleRollRequests.bind(this)),(u=e.querySelector("#crlngn-skip-dialogs"))==null||u.addEventListener("change",this._onToggleSkipDialogs.bind(this)),(a=e.querySelector("#crlngn-actors-all"))==null||a.addEventListener("change",this._onToggleSelectAll.bind(this));const t=e.querySelectorAll(".actor-tab");o.log("Found tabs:",[t.length]),t.forEach(r=>{r.addEventListener("click",this._onTabClick.bind(this))}),e.querySelectorAll(".actor").forEach(r=>{r.addEventListener("click",this._onActorClick.bind(this))}),e.querySelectorAll(".actor-select").forEach(r=>{r.addEventListener("click",this._onActorSelectClick.bind(this))});const l=e.querySelector(".request-types");l&&l.addEventListener("click",r=>{r.target.closest("li")&&this._onRequestTypeClick(r)});const s=e.querySelector(".roll-types");s&&s.addEventListener("click",r=>{const f=r.target.closest("li");f&&(r.currentTarget=f,this._onRollTypeClick(r))})}async _onToggleRollRequests(e){const t=b(),l=e.target.checked;await p.set(t.rollRequestsEnabled.tag,l),G.updateRollRequestsIcon(l),o.log("Roll requests enabled:",[l])}async _onToggleSkipDialogs(e){const t=b(),l=e.target.checked;await p.set(t.skipDialogs.tag,l),o.log("Skip dialogs:",[l])}_onToggleSelectAll(e){const t=e.target.checked;(this.currentTab==="pc"?game.actors.contents.filter(s=>this._isPlayerOwned(s)):game.actors.contents.filter(s=>!this._isPlayerOwned(s)&&this._hasTokenInScene(s))).forEach(s=>{t?this.selectedActors.add(s.id):this.selectedActors.delete(s.id)}),this.render(),this._updateRequestTypesVisibility(),o.log("Select all:",[t,"for",this.currentTab])}_isPlayerOwned(e){return e.type!=="character"&&e.type!=="npc"?!1:Object.entries(e.ownership).some(([t,l])=>{const s=game.users.get(t);return s&&!s.isGM&&l>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER})}_hasTokenInScene(e){if(e.type!=="character"&&e.type!=="npc")return!1;const t=game.scenes.active;return t&&t.tokens.some(l=>l.actorId===e.id)}async _onTabClick(e){const t=e.currentTarget.dataset.tab;o.log("Tab clicked:",[t,this.currentTab]),t!==this.currentTab&&(this.currentTab=t,await this.render(),o.log("Switched to tab:",[t]))}_onActorClick(e){if(e.target.closest(".actor-select"))return;const l=e.currentTarget.dataset.id;this._toggleActorSelection(l)}_onActorSelectClick(e){e.stopPropagation();const t=e.currentTarget.dataset.id;this._toggleActorSelection(t)}_toggleActorSelection(e){this.selectedActors.has(e)?this.selectedActors.delete(e):this.selectedActors.add(e),this.render(),this._updateRequestTypesVisibility(),this._updateSelectAllState(),o.log("Actor selected:",[e,this.selectedActors.has(e)])}_updateRequestTypesVisibility(){this.render()}_updateSelectAllState(){const e=this.element.querySelector("#crlngn-actors-all"),t=this.currentTab==="pc"?"pc":"npc",l=this.element.querySelectorAll(`.${t}-actors .actor-item input[type="checkbox"]`),s=Array.from(l).filter(i=>i.checked).length;e.checked=s>0&&s===l.length,e.indeterminate=s>0&&s<l.length}async _onRequestTypeClick(e){const l=e.currentTarget.dataset.id,s=P.ROLL_REQUEST_OPTIONS[l];if(!s){o.error("Unknown request type:",l);return}this.selectedRequestType=l,s.subList?await this.render():this._triggerRoll(l,null),o.log("Request type selected:",l)}_onRollTypeClick(e){o.log("Roll type clicked!",e.currentTarget);const t=e.currentTarget.dataset.id;o.log("Roll type selected:",t),this._triggerRoll(this.selectedRequestType,t)}_triggerRoll(e,t){const l=b(),s=Array.from(this.selectedActors);o.log("Roll triggered!",{actors:s,requestType:e,rollKey:t,skipDialogs:p.get(l.skipDialogs.tag)}),this.close()}async _onClose(e){await super._onClose(e),this.selectedActors.clear(),this.selectedRequestType=null}setPosition(e={}){return this}}R(H,"DEFAULT_OPTIONS",{id:"crlngn-requests-menu",classes:["roll-requests-menu"],tag:"div",window:{frame:!1,resizable:!1,minimizable:!1},position:null}),R(H,"PARTS",{main:{template:`modules/${P.ID}/templates/requests-menus.hbs`}});class z{static initialize(){o.log("RollInterceptor.initialize",["Called, checking if user is GM",game.user.isGM]),game.user.isGM&&(o.log("RollInterceptor.initialize",["Initializing roll interceptor for GM"]),this.registerHooks())}static registerHooks(){this._registerHook(k.PRE_ROLL_ABILITY_CHECK,this._handlePreRoll.bind(this,"ability")),this._registerHook(k.PRE_ROLL_SAVING_THROW,this._handlePreRoll.bind(this,"save")),this._registerHook(k.PRE_ROLL_SKILL_V2,this._handlePreRoll.bind(this,"skill")),this._registerHook(k.PRE_ROLL_TOOL_V2,this._handlePreRoll.bind(this,"tool")),this._registerHook(k.PRE_ROLL_ATTACK_V2,this._handlePreRoll.bind(this,"attack")),this._registerHook(k.PRE_ROLL_DAMAGE_V2,this._handlePreRoll.bind(this,"damage")),this._registerHook(k.PRE_ROLL_INITIATIVE,this._handlePreRoll.bind(this,"initiative")),this._registerHook(k.PRE_ROLL_DEATH_SAVE_V2,this._handlePreRoll.bind(this,"death")),this._registerHook(k.PRE_ROLL_HIT_DIE_V2,this._handlePreRoll.bind(this,"hitDie")),o.log("RollInterceptor.registerHooks",["Registered roll interception hooks"])}static _registerHook(e,t){const l=Hooks.on(e,t);this.registeredHooks.add({hookName:e,hookId:l})}static unregisterHooks(){for(const{hookName:e,hookId:t}of this.registeredHooks)Hooks.off(e,t);this.registeredHooks.clear(),o.log("RollInterceptor.unregisterHooks",["Unregistered all hooks"])}static _handlePreRoll(e,t,l,s){var f;if(!game.user.isGM)return;const i=b();if(!p.get(i.rollInterceptionEnabled.tag))return;const a=((f=t.subject)==null?void 0:f.actor)||t.subject||t.actor;if(!a||a.constructor.name!=="Actor5e"){o.log("RollInterceptor._handlePreRoll",["No valid Actor5e found in roll config",t]);return}const r=this._getActorOwner(a);if(!(!r||r.id===game.user.id))return r.active?(o.log("RollInterceptor._handlePreRoll",["Intercepting GM roll for player character",{rollType:e,actorId:a.id,actorName:a.name,ownerId:r.id,ownerName:r.name}]),this._sendRollRequest(a,r,e,t),!1):(ui.notifications.warn(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.playerOffline",{player:r.name})),!1)}static async _showConfigurationDialog(e,t,l,s,i,u){try{o.log("RollInterceptor._showConfigurationDialog",["Showing dialog",{rollType:l,dialog:i.cls.name}]);const r={...s,_rollMethod:async A=>(o.log("RollInterceptor._showConfigurationDialog",["Dialog submitted with config",A]),this._sendRollRequest(e,t,l,A),new Roll("1d20").evaluate({async:!1})),configured:!1},f=i.cls,C=await new f(r,i.options).render(!0)}catch(a){o.log("RollInterceptor._showConfigurationDialog",["Error showing configuration dialog",a]),this._sendRollRequest(e,t,l,s)}}static _getActorOwner(e){const t=e.ownership||{};for(const[l,s]of Object.entries(t))if(s>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){const i=game.users.get(l);if(i&&!i.isGM)return i}return null}static _sendRollRequest(e,t,l,s){var y;const i=b(),u=p.get(i.skipDialogs.tag);let a=null;switch(l){case"ability":case"save":a=s.ability;break;case"skill":a=s.skill;break;case"tool":a=s.tool;break;case"attack":case"damage":(y=s.subject)!=null&&y.item&&(a=s.subject.item.id);break;case"hitDie":a=s.denomination;break}const r={advantage:s.advantage||!1,disadvantage:s.disadvantage||!1,situational:s.situational||0,parts:s.parts||[],rollMode:s.rollMode||game.settings.get("core","rollMode"),elvenAccuracy:s.elvenAccuracy||!1,halflingLucky:s.halflingLucky||!1,reliableTalent:s.reliableTalent||!1,minimum:s.minimum,maximize:s.maximize,critical:s.critical,fumble:s.fumble,targetValue:s.targetValue,fastForward:s.fastForward||!1,chatMessage:s.chatMessage!==!1,flavor:s.flavor,title:s.title,dialogOptions:s.dialogOptions,messageData:s.messageData};Object.keys(r).forEach(C=>{r[C]===void 0&&delete r[C]});const f={type:"rollRequest",requestId:foundry.utils.randomID(),actorId:e.id,rollType:l,rollKey:a,config:r,skipDialog:u,targetTokenIds:Array.from(game.user.targets).map(C=>C.id),preserveTargets:p.get(i.useGMTargetTokens.tag)};S.execForUser("handleRollRequest",t.id,f),ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent",{player:t.name,actor:e.name}))}}R(z,"registeredHooks",new Set);const n=class n{static init(){S.initialize(n.registerSocketCalls),Hooks.once(w.INIT,()=>{b(),o.log("Initiating module...",[],!0),p.registerSettings(),n.setDiceConfig(),Hooks.on(w.RENDER_SIDEBAR_TAB,n.addChatControl)}),Hooks.once(w.READY,()=>{var l,s;o.log("Core Ready!!",[ui==null?void 0:ui.sidebar,(l=ui==null?void 0:ui.sidebar)==null?void 0:l._collapsed],!0);const e=b();var t=p.get(e.debugMode.tag);t&&(CONFIG.debug.hooks=!0),z.initialize(),game.user.isGM?(Hooks.on(w.USER_CONNECTED,n.onUserConnected),game.users.forEach(i=>{n.onUserConnected(i)}),n.checkSideBar(!((s=ui==null?void 0:ui.sidebar)!=null&&s._collapsed))):n.getDiceConfig()})}static onUserConnected(e){e.active&&e.id!==game.user.id&&(o.log("onUserConnected",[e]),S.execForUser(n.SOCKET_CALLS.getDiceConfig,e.id))}static setDiceConfig(){if(!game.user)return;const e=game.settings.storage.get("client");return n.diceConfig=e["core.diceConfiguration"]||"",o.log("getDiceConfig",[n.diceConfig]),n.diceConfig}static getDiceConfig(){if(game.user&&(n.setDiceConfig(),game.user.isGM)){S.execForGMs(n.SOCKET_CALLS.receiveDiceConfig,game.user.id,n.diceConfig);return}}static receiveDiceConfig(e,t){var l;((l=game.user)!=null&&l.isGM||e===game.user.id)&&(n.playerDiceConfigs||(n.playerDiceConfigs={}),n.playerDiceConfigs[e]=t?JSON.parse(t):{},o.log(`Received dice configuration from user ${e}`,[n.playerDiceConfigs]))}static async handleRollRequest(e){var l;if(game.user.isGM)return;o.log("handleRollRequest",["Received roll request",e]);const t=game.actors.get(e.actorId);if(!t){o.log("handleRollRequest",["Actor not found",e.actorId]);return}if(!t.isOwner){o.log("handleRollRequest",["User does not own actor",e.actorId]);return}e.preserveTargets&&((l=e.targetTokenIds)==null?void 0:l.length)>0&&game.user.targets.size===0&&e.targetTokenIds.map(i=>canvas.tokens.get(i)).filter(i=>i).forEach(i=>i.setTarget(!0,{user:game.user})),ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived",{gm:e.config.requestedBy||"GM",rollType:game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${e.rollType}`)})),n._executeRequestedRoll(t,e)}static async _executeRequestedRoll(e,t){try{const l={...t.config,isRollRequest:!0};switch(t.skipDialog&&(l.dialog={configure:!1}),t.rollType){case"ability":await e.rollAbilityCheck(t.rollKey,l);break;case"save":await e.rollSavingThrow(t.rollKey,l);break;case"skill":await e.rollSkill(t.rollKey,l);break;case"tool":await e.rollTool(t.rollKey,l);break;case"attack":if(t.rollKey){const s=e.items.get(t.rollKey);s&&await s.rollAttack(l)}break;case"damage":if(t.rollKey){const s=e.items.get(t.rollKey);s&&await s.rollDamage(l)}break;case"initiative":await e.rollInitiative(l);break;case"death":await e.rollDeathSave(l);break;case"hitDie":await e.rollHitDie(t.rollKey,l);break}}catch(l){o.log("_executeRequestedRoll",["Error executing roll",l]),ui.notifications.error(game.i18n.localize("CRLNGN_ROLL_REQUESTS.notifications.rollError"))}}static registerSocketCalls(){S.registerCall(n.SOCKET_CALLS.getDiceConfig,n.getDiceConfig),S.registerCall(n.SOCKET_CALLS.receiveDiceConfig,n.receiveDiceConfig),S.registerCall(n.SOCKET_CALLS.handleRollRequest,n.handleRollRequest)}static addChatControl(e,t,l){if(!game.user.isGM||e.id!=="chat")return;o.log("Adding chat control for chat tab");const i=(t[0]||t).querySelector("#chat-controls");if(!i){o.log("Could not find #chat-controls");return}if(i.querySelector(".roll-requests-icon"))return;const u=b(),a=p.get(u.rollRequestsEnabled.tag),r=document.createElement("a");r.id="crlngn-requests-icon",r.setAttribute("data-tooltip-direction","RIGHT"),r.className=`chat-control-icon roll-requests-icon${a?" active":""}`,r.title=game.i18n.localize("CRLNGN_ROLLS.ui.menus.rollRequestsTitle"),r.innerHTML=`<i class="fas fa-bolt${a?"":"-slash"}"></i>`;const f=i.querySelector(".chat-control-icon");f?f.parentNode.insertBefore(r,f):i.appendChild(r),r.addEventListener("click",n.toggleRollRequestsMenu),o.log("Added roll requests icon to chat controls")}static toggleRollRequestsMenu(){n.rollRequestsMenu?n.rollRequestsMenu.rendered?(n.rollRequestsMenu.close(),o.log("Closed roll requests menu")):(n.rollRequestsMenu.render(!0),o.log("Opened roll requests menu")):(n.rollRequestsMenu=new H,n.rollRequestsMenu.render(!0))}static updateRollRequestsIcon(e){const t=document.querySelector("#crlngn-requests-icon i");t&&(t.className=`fas fa-bolt${e?"":"-slash"}`)}};R(n,"diceConfig",{}),R(n,"playerDiceConfigs",{}),R(n,"rollRequestsMenu",null),R(n,"SOCKET_CALLS",{receiveDiceConfig:"receiveDiceConfig",getDiceConfig:"getDiceConfig",handleRollRequest:"handleRollRequest"}),R(n,"checkSideBar",e=>{const t=document.querySelector("body");e?t.classList.add("sidebar-expanded"):t.classList.remove("sidebar-expanded")});let G=n;G.init();
//# sourceMappingURL=crlngn-roll-requests.js.map
