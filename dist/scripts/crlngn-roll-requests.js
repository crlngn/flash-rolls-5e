var V=Object.defineProperty;var F=(I,s,e)=>s in I?V(I,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):I[s]=e;var b=(I,s,e)=>F(I,typeof s!="symbol"?s+"":s,e);const P={INIT:"init",READY:"ready",RENDER_SIDEBAR_TAB:"renderSidebarTab",USER_CONNECTED:"userConnected"},B={READY:"socketlib.ready"},v={PRE_ROLL_ABILITY_CHECK:"dnd5e.preRollAbilityCheck",PRE_ROLL_SAVING_THROW:"dnd5e.preRollSavingThrow",PRE_ROLL_DEATH_SAVE_V2:"dnd5e.preRollDeathSaveV2",PRE_ROLL_SKILL_V2:"dnd5e.preRollSkillV2",PRE_ROLL_TOOL_V2:"dnd5e.preRollToolV2",PRE_ROLL_HIT_DIE_V2:"dnd5e.preRollHitDieV2",PRE_ROLL_INITIATIVE:"dnd5e.preRollInitiative",PRE_ROLL_ATTACK_V2:"dnd5e.preRollAttackV2",PRE_ROLL_DAMAGE_V2:"dnd5e.preRollDamageV2"},w="crlngn-roll-requests",z=["%cFlash Rolls 5e","color:rgb(47, 151, 161); font-weight: bold;","|"],$={ABILITY_CHECK:{name:"abilityCheck",label:"Ability Check",subList:"abilities",actorPath:"system.abilities"},SAVING_THROW:{name:"savingThrow",label:"Saving Throw",subList:"abilities",actorPath:"system.abilities"},SKILL:{name:"skill",label:"Skill Check",subList:"skills",actorPath:"system.skills"},TOOL:{name:"tool",label:"Tool Check",subList:"tools",actorPath:"system.tools"},CONCENTRATION:{name:"concentration",label:"Concentration Check",subList:null,actorPath:""},INITIATIVE:{name:"initiativeDialog",label:"Initiative Roll",subList:null,actorPath:""},DEATH_SAVE:{name:"deathSave",label:"Death Save",subList:null,actorPath:""},CUSTOM:{name:"custom",label:"Custom Roll",subList:null,actorPath:""}},q={ID:w,ROLL_REQUEST_OPTIONS:$},M=class M{static log(s="",e=[],t=!1){try{const o=game.settings.get(w,"debug-mode")||M.debugOn;if(!(t||o))return;console.log(...z,s,...e)}catch{(t||M.debugOn)&&console.log(...z,s,...e)}}static warn(s="",e=[]){console.warn(...z,s,...e)}static error(s,e={ui:!1,console:!0,permanent:!1}){var t;e.ui&&((t=ui.notifications)==null||t.error(s,{localize:!0,permanent:e.permanent})),e.console&&console.error(...z,s)}};b(M,"debugOn",!1);let l=M;const D={checkbox:"checkbox"},G={client:"client",world:"world"},y=()=>({debugMode:{tag:"debug-mode",label:game.i18n.localize("CRLNGN_ROLLS.settings.debugMode.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.debugMode.hint"),propType:Boolean,inputType:D.checkbox,default:!0,scope:G.client,config:!0},rollRequestsEnabled:{tag:"roll-requests-enabled",label:game.i18n.localize("CRLNGN_ROLLS.settings.rollRequestsEnabled.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.rollRequestsEnabled.hint"),propType:Boolean,inputType:D.checkbox,default:!0,scope:G.world,config:!0},skipDialogs:{tag:"skip-dialogs",label:game.i18n.localize("CRLNGN_ROLLS.settings.skipDialogs.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.skipDialogs.hint"),propType:Boolean,inputType:D.checkbox,default:!1,scope:G.world,config:!0},useGMTargetTokens:{tag:"use-gm-target-tokens",label:game.i18n.localize("CRLNGN_ROLLS.settings.useGMTargetTokens.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.useGMTargetTokens.hint"),propType:Boolean,inputType:D.checkbox,default:!1,scope:G.world,config:!0},rollInterceptionEnabled:{tag:"roll-interception-enabled",label:game.i18n.localize("CRLNGN_ROLLS.settings.rollInterceptionEnabled.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint"),propType:Boolean,inputType:D.checkbox,default:!0,scope:G.world,config:!0}});class T{static registerSettings(){const s=y();Object.entries(s).forEach(async t=>{const o=t[1];l.log("Registering... ",[t]);const i={name:o.label,hint:o.hint,default:o.default,type:o.propType,scope:o.scope,config:o.config,requiresReload:o.requiresReload||!1,onChange:a=>T.apply(o.tag,a)};o.choices&&(i.choices=o.choices),await game.settings.register(w,o.tag,i),(T.get(o.tag)===void 0||T.get(o.tag)===null)&&T.set(o.tag,o.default),l.log("registerSettings",[o.tag,T.get(o.tag)])})}static get(s,e=w){if(!s)return null;let t=!1;if(e===w)t=game.settings.get(e,s);else{let i=game.settings.storage.get("client")[`${e}.${s}`];i===void 0&&(i=game.settings.storage.get("world").getSetting(`${e}.${s}`),t=i==null?void 0:i.value),l.log("GET Setting",[i,t])}return t}static set(s,e,t=w){if(!s)return!1;let o=game.settings.storage.get("client")[`${t}.${s}`];o||(o=game.settings.storage.get("world").getSetting(`${t}.${s}`)),l.log("Setting",[s,o]);try{game.settings.set(t,s,e)}catch{l.log("Unable to change setting",[s,o])}return!0}static apply(s,e){const t=y();switch(s){case t.rollRequestsEnabled.tag:T.applyRollRequestsEnabled(e);break}}static applyRollRequestsEnabled(s){const e=document.querySelector("#chat-controls .chat-control-icon.roll-requests-icon");e&&(s?e.classList.add("active"):e.classList.remove("active"))}}const m=class m{static serializeForTransport(s,e=!1){return s==null||(e&&s.rolls&&Array.isArray(s.rolls)&&(s.rolls=s.rolls.map(t=>t instanceof Roll?t.toJSON():t)),l.log("ROLLS DATA",[s,s.subject])),s}static deserializeFromTransport(s,e=!1){let t={...s};if(!s)return t;if(e&&s.rolls&&s.rolls.length>0){const o=t.rolls.map(i=>{let a=i;return typeof i=="string"?a=Roll.fromJSON(i):a=Roll.fromJSON(JSON.stringify(i)),a});return t.rolls=[...o],t}return t}};b(m,"socket"),b(m,"_activeExecutions",new Map),b(m,"initialize",s=>{Hooks.once(B.READY,()=>{if(l.log("Attempting to register module...",[]),typeof socketlib>"u"){l.error("SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled."),ui.notifications.error(game.i18n.localize("CRLNGN_ROLLS.notifications.socketlibMissing"),{permanent:!0});return}try{m.socket=socketlib.registerModule(w),s&&s(),l.log("SocketUtil | Module registered",[m.socket])}catch(e){l.log("Problem registering module",[e])}})}),b(m,"registerCall",(s,e)=>{m.socket?(m.socket.register(s,e),l.log("SocketUtil - Registered callback",[m.socket,s])):l.log("SocketUtil - Failed to register callback (socket not initialized)",[m.socket,s])}),b(m,"sendMessage",(s,e)=>{l.log("SocketUtil - sendMessage",[s]),e&&e()}),b(m,"execForGMs",async(s,...e)=>{if(!m.socket){l.log("SocketUtil - Socket not initialized. Cannot execute as GM.",[]);return}return await m.socket.executeForAllGMs(s,...e)}),b(m,"execForAll",async(s,...e)=>{if(!m.socket){l.log("SocketUtil - Socket not initialized. Cannot execute for all clients.",[]);return}return await m.socket.executeForEveryone(s,...e)}),b(m,"execForUser",async(s,e,...t)=>{if(!m.socket){l.log("SocketUtil - Socket not initialized. Cannot execute as user.",[]);return}if(e===game.user.id)return l.log("SocketUtil - Preventing recursive call",[e]),null;const o=`${s}-${e}`;if(m._activeExecutions.has(o))return l.log("SocketUtil - Preventing recursive call",[o]),null;m._activeExecutions.set(o,!0);try{const i=await m.socket.executeAsUser(s,e,...t);return l.log("SocketUtil - Executed as user.",[i]),i}catch(i){return l.log("SocketUtil - Error executing as user",[i]),null}finally{m._activeExecutions.delete(o)}});let O=m;class x extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2){constructor(e={}){super(e);b(this,"_onClickOutside",e=>{if(this.isLocked)return;const t=this.element;t&&(e.target.closest(".roll-requests-menu")||t.contains(e.target)||e.target.closest("#crlngn-requests-icon")||e.target.closest(".dialog, .app, .notification")||this.close())});this.selectedActors=new Set,this.currentTab="pc",this.selectedRequestType=null,this.isLocked=!1,this._initializeFromSelectedTokens()}async _prepareContext(e){var L;const t=await super._prepareContext(e),o=game.actors.contents,i=[],a=[],c=game.scenes.active;for(const g of o){if(g.type!=="character"&&g.type!=="npc")continue;const p={id:g.id,uuid:g.uuid,name:g.name,img:g.img,selected:this.selectedActors.has(g.id),crlngnStats:this._getActorStats(g)};Object.entries(g.ownership).some(([_,R])=>{const k=game.users.get(_);return k&&!k.isGM&&R>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER})?i.push(p):c&&c.tokens.some(R=>R.actorId===g.id)&&a.push(p)}const n=y(),h=T.get(n.rollRequestsEnabled.tag),u=T.get(n.skipDialogs.tag),d=this.currentTab==="pc"?i:a,S=d.length>0&&d.every(g=>this.selectedActors.has(g.id)),N=[];if(this.selectedActors.size>0)for(const[g,p]of Object.entries(q.ROLL_REQUEST_OPTIONS))N.push({id:g,name:game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${p.name}`)||p.label,rollable:p.subList==null,hasSubList:!!p.subList,selected:this.selectedRequestType===g});const f=[];if(this.selectedRequestType&&this.selectedActors.size>0){const g=q.ROLL_REQUEST_OPTIONS[this.selectedRequestType];if(g&&g.subList){const p=Array.from(this.selectedActors)[0],C=game.actors.get(p);if(g.subList==="tools"){const _=((L=CONFIG.DND5E.enrichmentLookup)==null?void 0:L.tools)||CONFIG.DND5E.tools||{};for(const[R,k]of Object.entries(_)){let A=R;if(k!=null&&k.id){const E=dnd5e.documents.Trait.getBaseItem(k.id,{indexOnly:!0});A=(E==null?void 0:E.name)||R}else A=R.replace(/([A-Z])/g," $1").replace(/^./,E=>E.toUpperCase()).trim();f.push({id:R,name:A,rollable:!0})}f.sort((R,k)=>R.name.localeCompare(k.name))}else if(C&&g.actorPath){const _=foundry.utils.getProperty(C,g.actorPath)||{},R=CONFIG.DND5E[g.subList];for(const[k,A]of Object.entries(_)){let E="";g.subList==="skills"&&(R!=null&&R[k])||g.subList==="abilities"&&(R!=null&&R[k])?E=R[k].label:E=A.label||game.i18n.localize(A.name||k)||k,f.push({id:k,name:E,rollable:!0})}g.subList==="skills"&&f.sort((k,A)=>k.name.localeCompare(A.name))}}}return{...t,actors:d,currentTab:this.currentTab,isPCTab:this.currentTab==="pc",isNPCTab:this.currentTab==="npc",selectedTab:this.currentTab,rollRequestsEnabled:h,skipDialogs:u,selectAllOn:S,hasSelectedActors:this.selectedActors.size>0,requestTypes:N,rollTypes:f,showNames:!0,actorsLocked:this.isLocked}}_getActorStats(e){var i,a,c,n,h;const t=e.system,o=[];return(i=t.attributes)!=null&&i.hp&&o.push({abbrev:"HP",value:t.attributes.hp.value}),(a=t.attributes)!=null&&a.ac&&o.push({abbrev:"AC",value:t.attributes.ac.value}),(c=t.attributes)!=null&&c.spelldc&&o.push({abbrev:"DC",value:t.attributes.spelldc}),(h=(n=t.skills)==null?void 0:n.prc)!=null&&h.passive&&o.push({abbrev:"PP",value:t.skills.prc.passive}),o}_onRender(e,t){super._onRender(e,t),this._attachListeners(),setTimeout(()=>{document.addEventListener("click",this._onClickOutside,!0)},100),this._tokenControlHook=Hooks.on("controlToken",this._onTokenControlChange.bind(this))}_onTokenControlChange(e,t){this.rendered&&(this._ignoreTokenControl||(this._tokenUpdateTimeout&&clearTimeout(this._tokenUpdateTimeout),this._tokenUpdateTimeout=setTimeout(()=>{this._initializeFromSelectedTokens(),this.render(),this._tokenUpdateTimeout=null},100)))}_attachListeners(){var a,c,n,h;l.log("Attaching listeners",[]);const e=this.element;(a=e.querySelector("#crlngn-requests-toggle"))==null||a.addEventListener("change",this._onToggleRollRequests.bind(this)),(c=e.querySelector("#crlngn-skip-dialogs"))==null||c.addEventListener("change",this._onToggleSkipDialogs.bind(this)),(n=e.querySelector("#crlngn-actors-all"))==null||n.addEventListener("change",this._onToggleSelectAll.bind(this)),(h=e.querySelector("#crlngn-actors-lock"))==null||h.addEventListener("click",this._onToggleLock.bind(this));const t=e.querySelectorAll(".actor-tab");l.log("Found tabs:",[t.length]),t.forEach(u=>{u.addEventListener("click",this._onTabClick.bind(this))}),e.querySelectorAll(".actor").forEach(u=>{u.addEventListener("click",this._onActorClick.bind(this))}),e.querySelectorAll(".actor-select").forEach(u=>{u.addEventListener("click",this._onActorSelectClick.bind(this))});const o=e.querySelector(".request-types");o&&o.addEventListener("click",u=>{const d=u.target.closest("li");if(d&&d.dataset.id){const S={...u,currentTarget:d};this._onRequestTypeClick(S)}});const i=e.querySelector(".roll-types");i&&i.addEventListener("click",u=>{const d=u.target.closest("li");if(d&&d.dataset.id){const S={...u,currentTarget:d};this._onRollTypeClick(S)}})}async _onToggleRollRequests(e){const t=y(),o=e.target.checked;await T.set(t.rollRequestsEnabled.tag,o),H.updateRollRequestsIcon(o),l.log("Roll requests enabled:",[o])}async _onToggleSkipDialogs(e){const t=y(),o=e.target.checked;await T.set(t.skipDialogs.tag,o),l.log("Skip dialogs:",[o])}_onToggleSelectAll(e){const t=e.target.checked;this._ignoreTokenControl=!0,(this.currentTab==="pc"?game.actors.contents.filter(i=>this._isPlayerOwned(i)):game.actors.contents.filter(i=>!this._isPlayerOwned(i)&&this._hasTokenInScene(i))).forEach(i=>{t?(this.selectedActors.add(i.id),this._updateCanvasTokenSelection(i.id,!0)):(this.selectedActors.delete(i.id),this._updateCanvasTokenSelection(i.id,!1))}),setTimeout(()=>{this._ignoreTokenControl=!1},200),this.render(),this._updateRequestTypesVisibility(),l.log("Select all:",[t,"for",this.currentTab])}_onToggleLock(e){e.preventDefault(),this.isLocked=!this.isLocked;const t=e.currentTarget;t.classList.remove("fa-lock-keyhole","fa-lock-keyhole-open"),t.classList.add(this.isLocked?"fa-lock-keyhole":"fa-lock-keyhole-open"),l.log("Lock toggled:",[this.isLocked])}_initializeFromSelectedTokens(){var t;const e=((t=canvas.tokens)==null?void 0:t.controlled)||[];this.selectedActors.clear();for(const o of e)if(o.actor&&(this.selectedActors.add(o.actor.id),this.selectedActors.size===1)){const i=this._isPlayerOwned(o.actor);this.currentTab=i?"pc":"npc"}l.log("Initialized with selected tokens:",[Array.from(this.selectedActors)])}_isPlayerOwned(e){return e.type!=="character"&&e.type!=="npc"?!1:Object.entries(e.ownership).some(([t,o])=>{const i=game.users.get(t);return i&&!i.isGM&&o>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER})}_hasTokenInScene(e){if(e.type!=="character"&&e.type!=="npc")return!1;const t=game.scenes.active;return t&&t.tokens.some(o=>o.actorId===e.id)}async _onTabClick(e){const t=e.currentTarget.dataset.tab;l.log("Tab clicked:",[t,this.currentTab]),t!==this.currentTab&&(this.currentTab=t,await this.render(),l.log("Switched to tab:",[t]))}_onActorClick(e){if(e.target.closest(".actor-select"))return;const o=e.currentTarget.dataset.id;this._toggleActorSelection(o)}_onActorSelectClick(e){e.stopPropagation();const t=e.currentTarget.dataset.id;this._toggleActorSelection(t)}_toggleActorSelection(e){this._ignoreTokenControl=!0,this.selectedActors.has(e)?(this.selectedActors.delete(e),this._updateCanvasTokenSelection(e,!1)):(this.selectedActors.add(e),this._updateCanvasTokenSelection(e,!0)),setTimeout(()=>{this._ignoreTokenControl=!1},100),this.render(),this._updateRequestTypesVisibility(),this._updateSelectAllState(),l.log("Actor selected:",[e,this.selectedActors.has(e)])}_updateCanvasTokenSelection(e,t){if(!game.scenes.active)return;const i=canvas.tokens.placeables.filter(a=>{var c;return((c=a.actor)==null?void 0:c.id)===e});for(const a of i)t?a.control({releaseOthers:!1}):a.release()}_updateRequestTypesVisibility(){this.render()}_updateSelectAllState(){const e=this.element.querySelector("#crlngn-actors-all"),t=this.currentTab==="pc"?"pc":"npc",o=this.element.querySelectorAll(`.${t}-actors .actor-item input[type="checkbox"]`),i=Array.from(o).filter(a=>a.checked).length;e.checked=i>0&&i===o.length,e.indeterminate=i>0&&i<o.length}async _onRequestTypeClick(e){const o=e.currentTarget.dataset.id,i=q.ROLL_REQUEST_OPTIONS[o];if(!i){l.error("Unknown request type:",o);return}this.selectedRequestType===o?(this.selectedRequestType=null,l.log("Request type deselected:",[o])):(this.selectedRequestType=o,l.log("Request type selected:",[o])),i.subList?await this.render():this.selectedRequestType&&this._triggerRoll(o,null)}_onRollTypeClick(e){l.log("Roll type clicked!",[e.currentTarget]);const t=e.currentTarget.dataset.id;l.log("Roll type selected:",[t]),this._triggerRoll(this.selectedRequestType,t)}async _triggerRoll(e,t){var N;const o=y(),i=Array.from(this.selectedActors),a=T.get(o.skipDialogs.tag),c=q.ROLL_REQUEST_OPTIONS[e],n=(c==null?void 0:c.name)||e;if(n==="custom"){const f=await this._showCustomRollDialog();if(!f)return;t=f}if(n==="initiativeDialog"&&!game.combat)if(await Dialog.confirm({title:game.i18n.localize("COMBAT.Create"),content:"<p>"+game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.noCombatActive")+"</p>",yes:()=>!0,no:()=>!1,defaultYes:!0,options:{classes:["crlngn-rolls-dialog"]}}))await(await game.combats.documentClass.create({scene:game.scenes.active.id})).activate(),ui.notifications.info(game.i18n.localize("CRLNGN_ROLL_REQUESTS.notifications.combatCreated"));else return;let h=i;if(n==="initiativeDialog"&&game.combat){const f=i.map(p=>game.actors.get(p)).filter(p=>p),L=[],g=new Set;for(const p of f){const C=game.combat.getCombatantByActor(p.id);C&&C.initiative!==null&&(L.push(p.name),g.add(p.id))}if(L.length>0){if(await Dialog.confirm({title:game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.rerollInitiativeTitle"),content:"<p>"+game.i18n.format("CRLNGN_ROLLS.ui.dialogs.rerollInitiative",{actors:L.join(", ")})+"</p>",yes:()=>!0,no:()=>!1,defaultYes:!1,options:{classes:["crlngn-rolls-dialog"]}}))for(const C of g){const _=game.combat.getCombatantByActor(C);_&&await _.update({initiative:null})}else if(h=i.filter(C=>!g.has(C)),h.length===0){ui.notifications.info(game.i18n.localize("CRLNGN_ROLL_REQUESTS.notifications.allActorsHaveInitiative"));return}}}let u=h.map(f=>game.actors.get(f)).filter(f=>f);if(n==="deathSave"){const f=[],L=[];for(const g of u){const p=((N=g.system.attributes.hp)==null?void 0:N.value)||0,C=g.system.attributes.death||{},_=C.success||0,R=C.failure||0;p<=0&&_<3&&R<3?f.push(g):L.push(g.name)}L.length>0&&ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.actorsSkippingDeathSave",{actors:L.join(", ")})),u=f}if(!u.length){ui.notifications.warn("No valid actors selected");return}const d=[],S=[];for(const f of u){const L=this._getActorOwner(f);L?d.push({actor:f,owner:L}):S.push(f)}for(const{actor:f,owner:L}of d){if(!L.active){ui.notifications.warn(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.playerOffline",{player:L.name})),S.push(f);continue}this._sendRollRequestToPlayer(f,L,n,t,a),await new Promise(g=>setTimeout(g,100))}S.length>0&&await this._handleNPCRolls(S,n,t,a),setTimeout(()=>this.close(),500)}_getActorOwner(e){const t=e.ownership||{};for(const[o,i]of Object.entries(t))if(i>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){const a=game.users.get(o);if(a&&!a.isGM)return a}return null}_sendRollRequestToPlayer(e,t,o,i,a){const c=y(),h={abilityCheck:"ability",savingThrow:"save",skill:"skill",tool:"tool",concentration:"concentration",initiativeDialog:"initiative",deathSave:"deathsave",custom:"custom"}[o]||o,u={type:"rollRequest",requestId:foundry.utils.randomID(),actorId:e.id,rollType:h,rollKey:i,config:{rollMode:game.settings.get("core","rollMode"),advantage:!1,disadvantage:!1,situational:0,parts:[],chatMessage:!0},skipDialog:a,targetTokenIds:Array.from(game.user.targets).map(d=>d.id),preserveTargets:T.get(c.useGMTargetTokens.tag)};O.execForUser("handleRollRequest",t.id,u),ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent",{player:t.name,actor:e.name}))}async _handleNPCRolls(e,t,o,i){const a={advantage:!1,disadvantage:!1,situational:0,parts:[],rollMode:game.settings.get("core","rollMode"),fastForward:i,chatMessage:!0,isRollRequest:!0,targetValue:10};for(const c of e)await this._executeActorRoll(c,t,o,a),await new Promise(n=>setTimeout(n,200))}async _executeActorRoll(e,t,o,i){var a;try{switch(l.log("RollRequestsMenu._executeActorRoll",["Starting roll for actor",{actorName:e.name,actorType:e.type,actorId:e.id,requestType:t,normalizedType:t.toLowerCase(),config:i}]),t.toLowerCase()){case"abilitycheck":await e.rollAbilityCheck(o,i);break;case"savingthrow":await e.rollSavingThrow(o,i);break;case"skill":await e.rollSkill({...i,skill:o});break;case"tool":await e.rollToolCheck({...i,tool:o});break;case"concentration":await e.rollConcentration(i);break;case"initiativedialog":if(!game.combat){ui.notifications.warn(game.i18n.localize("COMBAT.NoneActive"));break}l.log("RollRequestsMenu._executeActorRoll",["About to roll initiative for",e.name,"with config",i]);const n=await e.rollInitiativeDialog(i);if(l.log("RollRequestsMenu._executeActorRoll",["Initiative roll result:",n]),!n){l.log("RollRequestsMenu._executeActorRoll",["No result from rollInitiativeDialog, trying direct combat update"]);let u=game.combat.getCombatantByActor(e.id);if(!u){const d=e.getActiveTokens();d.length&&(await game.combat.createEmbeddedDocuments("Combatant",[{tokenId:d[0].id,actorId:e.id}]),u=game.combat.getCombatantByActor(e.id))}if(u){const d=u.getInitiativeRoll();await d.evaluate({async:!0}),await u.update({initiative:d.total}),await d.toMessage({speaker:ChatMessage.getSpeaker({actor:e}),flavor:game.i18n.localize("DND5E.Initiative")})}}break;case"deathsave":l.log("RollRequestsMenu._executeActorRoll",["Actor death save state",{name:e.name,hp:(a=e.system.attributes.hp)==null?void 0:a.value,deathSaves:e.system.attributes.death,type:e.type}]);const h=await e.rollDeathSave();l.log("RollRequestsMenu._executeActorRoll",["Death save completed",h]);break;case"custom":try{const u=new Roll(o,e.getRollData());await u.evaluate({async:!0}),await u.toMessage({speaker:ChatMessage.getSpeaker({actor:e}),flavor:game.i18n.localize("CRLNGN_ROLLS.rollTypes.custom")})}catch(u){ui.notifications.error(game.i18n.format("CRLNGN_ROLLS.ui.notifications.invalidFormula",{formula:o})),l.log("RollRequestsMenu._executeActorRoll",["Invalid custom formula",o,u])}break;default:ui.notifications.warn(`Unknown roll type: ${t}`);break}}catch(c){l.log("RollRequestsMenu._executeActorRoll",["Error executing roll",c]),ui.notifications.error(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollError",{actor:e.name}))}}async _onClose(e){await super._onClose(e),this.selectedActors.clear(),this.selectedRequestType=null,document.removeEventListener("click",this._onClickOutside,!0),this._tokenControlHook&&(Hooks.off("controlToken",this._tokenControlHook),this._tokenControlHook=null),this._tokenUpdateTimeout&&(clearTimeout(this._tokenUpdateTimeout),this._tokenUpdateTimeout=null)}setPosition(e={}){return this}async _showCustomRollDialog(){return new Promise(async e=>{const t=await renderTemplate(`modules/${q.ID}/templates/custom-roll-dialog.hbs`,{formula:"",readonly:!1});new Dialog({title:game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.customRollTitle"),content:t,buttons:{roll:{icon:'<i class="fas fa-dice-d20"></i>',label:game.i18n.localize("Roll"),callback:i=>{const c=(i[0]||i).querySelector("#custom-roll-formula").value.trim();e(c||null)}},cancel:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("Cancel"),callback:()=>e(null)}},default:"roll",render:i=>{const a=i[0]||i,c=a.querySelector("#custom-roll-formula"),n={};a.querySelectorAll(".dice-button").forEach(h=>{h.addEventListener("click",u=>{const d=u.currentTarget.dataset.die;n[d]=(n[d]||0)+1;const S=[];for(const[N,f]of Object.entries(n))f>0&&S.push(`${f}${N}`);c.value=S.join(" + ")})})}},{classes:["crlngn-rolls-dialog","crlngn-custom-roll-dialog"]}).render(!0)})}}b(x,"DEFAULT_OPTIONS",{id:"crlngn-requests-menu",classes:["roll-requests-menu"],tag:"div",window:{frame:!1,resizable:!1,minimizable:!1},position:null}),b(x,"PARTS",{main:{template:`modules/${q.ID}/templates/requests-menus.hbs`}});class U{static initialize(){l.log("RollInterceptor.initialize",["Called, checking if user is GM",game.user.isGM]),game.user.isGM&&(l.log("RollInterceptor.initialize",["Initializing roll interceptor for GM"]),this.registerHooks())}static registerHooks(){this._registerHook(v.PRE_ROLL_ABILITY_CHECK,this._handlePreRoll.bind(this,"ability")),this._registerHook(v.PRE_ROLL_SAVING_THROW,this._handlePreRoll.bind(this,"save")),this._registerHook(v.PRE_ROLL_SKILL_V2,this._handlePreRoll.bind(this,"skill")),this._registerHook(v.PRE_ROLL_TOOL_V2,this._handlePreRoll.bind(this,"tool")),this._registerHook(v.PRE_ROLL_ATTACK_V2,this._handlePreRoll.bind(this,"attack")),this._registerHook(v.PRE_ROLL_DAMAGE_V2,this._handlePreRoll.bind(this,"damage")),this._registerHook(v.PRE_ROLL_INITIATIVE,this._handlePreRoll.bind(this,"initiative")),this._registerHook(v.PRE_ROLL_DEATH_SAVE_V2,this._handlePreRoll.bind(this,"deathsave")),this._registerHook(v.PRE_ROLL_HIT_DIE_V2,this._handlePreRoll.bind(this,"hitDie")),l.log("RollInterceptor.registerHooks",["Registered roll interception hooks"])}static _registerHook(s,e){const t=Hooks.on(s,e);this.registeredHooks.add({hookName:s,hookId:t})}static unregisterHooks(){for(const{hookName:s,hookId:e}of this.registeredHooks)Hooks.off(s,e);this.registeredHooks.clear(),l.log("RollInterceptor.unregisterHooks",["Unregistered all hooks"])}static _handlePreRoll(s,e,t,o){var h;if(!game.user.isGM)return;let i;if(s==="initiative"&&e instanceof Actor){if(i=e,t!=null&&t.isRollRequest||o!=null&&o.isRollRequest)return}else{if(e.isRollRequest)return;i=((h=e.subject)==null?void 0:h.actor)||e.subject||e.actor}const a=y();if(!T.get(a.rollInterceptionEnabled.tag))return;if(!i||!(i instanceof Actor)){l.log("RollInterceptor._handlePreRoll",["No valid Actor found in roll config",e,s]);return}const n=this._getActorOwner(i);if(!n||n.id===game.user.id){l.log("RollInterceptor._handlePreRoll",["Actor is GM-owned or has no owner, allowing roll",{rollType:s,actorName:i.name,actorType:i.type,hasOwner:!!n}]);return}if(!n.active){l.log("RollInterceptor._handlePreRoll",["Player is offline, allowing GM roll",{rollType:s,actorName:i.name,ownerName:n.name}]);return}return l.log("RollInterceptor._handlePreRoll",["Intercepting GM roll for player character",{rollType:s,actorId:i.id,actorName:i.name,ownerId:n.id,ownerName:n.name}]),this._sendRollRequest(i,n,s,e),l.log("RollInterceptor._handlePreRoll",["PREVENTING ROLL - returning false"]),!1}static async _showConfigurationDialog(s,e,t,o,i,a){try{l.log("RollInterceptor._showConfigurationDialog",["Showing dialog",{rollType:t,dialog:i.cls.name}]);const n={...o,_rollMethod:async S=>(l.log("RollInterceptor._showConfigurationDialog",["Dialog submitted with config",S]),this._sendRollRequest(s,e,t,S),new Roll("1d20").evaluate({async:!1})),configured:!1},h=i.cls,d=await new h(n,i.options).render(!0)}catch(c){l.log("RollInterceptor._showConfigurationDialog",["Error showing configuration dialog",c]),this._sendRollRequest(s,e,t,o)}}static _getActorOwner(s){const e=s.ownership||{};for(const[t,o]of Object.entries(e))if(o>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){const i=game.users.get(t);if(i&&!i.isGM)return i}return null}static _sendRollRequest(s,e,t,o){var u;const i=y(),a=T.get(i.skipDialogs.tag);let c=null;switch(t){case"ability":case"save":c=o.ability;break;case"skill":c=o.skill;break;case"tool":c=o.tool;break;case"attack":case"damage":(u=o.subject)!=null&&u.item&&(c=o.subject.item.id);break;case"hitDie":c=o.denomination;break}const n={advantage:o.advantage||!1,disadvantage:o.disadvantage||!1,situational:o.situational||0,parts:o.parts||[],rollMode:o.rollMode||game.settings.get("core","rollMode"),elvenAccuracy:o.elvenAccuracy||!1,halflingLucky:o.halflingLucky||!1,reliableTalent:o.reliableTalent||!1,minimum:o.minimum,maximize:o.maximize,critical:o.critical,fumble:o.fumble,targetValue:o.targetValue,fastForward:o.fastForward||!1,chatMessage:o.chatMessage!==!1,flavor:o.flavor,title:o.title,dialogOptions:o.dialogOptions,messageData:o.messageData};Object.keys(n).forEach(d=>{n[d]===void 0&&delete n[d]});const h={type:"rollRequest",requestId:foundry.utils.randomID(),actorId:s.id,rollType:t,rollKey:c,config:n,skipDialog:a,targetTokenIds:Array.from(game.user.targets).map(d=>d.id),preserveTargets:T.get(i.useGMTargetTokens.tag)};O.execForUser("handleRollRequest",e.id,h),ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent",{player:e.name,actor:s.name}))}}b(U,"registeredHooks",new Set);const r=class r{static init(){O.initialize(r.registerSocketCalls),Hooks.once(P.INIT,()=>{y(),l.log("Initiating module...",[],!0),T.registerSettings(),r.setDiceConfig(),Hooks.on(P.RENDER_SIDEBAR_TAB,r.addChatControl)}),Hooks.once(P.READY,()=>{var t,o;l.log("Core Ready!!",[ui==null?void 0:ui.sidebar,(t=ui==null?void 0:ui.sidebar)==null?void 0:t._collapsed],!0);const s=y();var e=T.get(s.debugMode.tag);e&&(CONFIG.debug.hooks=!0),U.initialize(),game.user.isGM?(Hooks.on(P.USER_CONNECTED,r.onUserConnected),game.users.forEach(i=>{r.onUserConnected(i)}),r.checkSideBar(!((o=ui==null?void 0:ui.sidebar)!=null&&o._collapsed))):r.getDiceConfig()})}static onUserConnected(s){s.active&&s.id!==game.user.id&&(l.log("onUserConnected",[s]),O.execForUser(r.SOCKET_CALLS.getDiceConfig,s.id))}static setDiceConfig(){if(!game.user)return;const s=game.settings.storage.get("client");return r.diceConfig=s["core.diceConfiguration"]||"",l.log("getDiceConfig",[r.diceConfig]),r.diceConfig}static getDiceConfig(){if(game.user&&(r.setDiceConfig(),game.user.isGM)){O.execForGMs(r.SOCKET_CALLS.receiveDiceConfig,game.user.id,r.diceConfig);return}}static receiveDiceConfig(s,e){var t;((t=game.user)!=null&&t.isGM||s===game.user.id)&&(r.playerDiceConfigs||(r.playerDiceConfigs={}),r.playerDiceConfigs[s]=e?JSON.parse(e):{},l.log(`Received dice configuration from user ${s}`,[r.playerDiceConfigs]))}static async handleRollRequest(s){var t;if(game.user.isGM)return;l.log("handleRollRequest",["Received roll request",s]);const e=game.actors.get(s.actorId);if(!e){l.log("handleRollRequest",["Actor not found",s.actorId]);return}if(!e.isOwner){l.log("handleRollRequest",["User does not own actor",s.actorId]);return}s.preserveTargets&&((t=s.targetTokenIds)==null?void 0:t.length)>0&&game.user.targets.size===0&&s.targetTokenIds.map(i=>canvas.tokens.get(i)).filter(i=>i).forEach(i=>i.setTarget(!0,{user:game.user})),ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived",{gm:s.config.requestedBy||"GM",rollType:game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${s.rollType}`)})),r._executeRequestedRoll(e,s)}static async _executeRequestedRoll(s,e){try{const t={...e.config,isRollRequest:!0};switch(e.skipDialog&&(t.dialog={configure:!1}),e.rollType){case"ability":await s.rollAbilityCheck(e.rollKey,t);break;case"save":await s.rollSavingThrow(e.rollKey,t);break;case"skill":await s.rollSkill(e.rollKey,t);break;case"tool":await s.rollToolCheck({...t,tool:e.rollKey});break;case"concentration":await s.rollConcentration(t);break;case"attack":if(e.rollKey){const o=s.items.get(e.rollKey);o&&await o.rollAttack(t)}break;case"damage":if(e.rollKey){const o=s.items.get(e.rollKey);o&&await o.rollDamage(t)}break;case"initiative":if(!game.combat){ui.notifications.warn(game.i18n.localize("COMBAT.NoneActive"));break}await s.rollInitiativeDialog(t);break;case"deathsave":await s.rollDeathSave(t);break;case"hitDie":await s.rollHitDie(e.rollKey,t);break;case"custom":await r._handleCustomRoll(s,e);break}}catch(t){l.log("_executeRequestedRoll",["Error executing roll",t]),ui.notifications.error(game.i18n.localize("CRLNGN_ROLL_REQUESTS.notifications.rollError"))}}static async _handleCustomRoll(s,e){const t=e.rollKey,o=await renderTemplate(`modules/${w}/templates/custom-roll-dialog.hbs`,{formula:t,readonly:!0});new Dialog({title:game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.customRollTitle"),content:o,buttons:{roll:{icon:'<i class="fas fa-dice-d20"></i>',label:game.i18n.localize("Roll"),callback:async()=>{try{const a=new Roll(t,s.getRollData());await a.evaluate({async:!0}),await a.toMessage({speaker:ChatMessage.getSpeaker({actor:s}),flavor:game.i18n.localize("CRLNGN_ROLLS.rollTypes.custom")})}catch(a){ui.notifications.error(game.i18n.format("CRLNGN_ROLLS.ui.notifications.invalidFormula",{formula:t})),l.log("_handleCustomRoll",["Invalid formula",t,a])}}},cancel:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("Cancel")}},default:"roll"},{classes:["crlngn-rolls-dialog","crlngn-custom-roll-dialog"]}).render(!0)}static registerSocketCalls(){O.registerCall(r.SOCKET_CALLS.getDiceConfig,r.getDiceConfig),O.registerCall(r.SOCKET_CALLS.receiveDiceConfig,r.receiveDiceConfig),O.registerCall(r.SOCKET_CALLS.handleRollRequest,r.handleRollRequest)}static addChatControl(s,e,t){if(!game.user.isGM||s.id!=="chat")return;l.log("Adding chat control for chat tab");const i=(e[0]||e).querySelector("#chat-controls");if(!i){l.log("Could not find #chat-controls",[]);return}if(i.querySelector(".roll-requests-icon"))return;const a=y(),c=T.get(a.rollRequestsEnabled.tag),n=document.createElement("a");n.id="crlngn-requests-icon",n.setAttribute("data-tooltip-direction","RIGHT"),n.className=`chat-control-icon roll-requests-icon${c?" active":""}`,n.title=game.i18n.localize("CRLNGN_ROLLS.ui.menus.rollRequestsTitle"),n.innerHTML=`<i class="fas fa-bolt${c?"":"-slash"}"></i>`;const h=i.querySelector(".chat-control-icon");h?h.parentNode.insertBefore(n,h):i.appendChild(n),n.addEventListener("click",r.toggleRollRequestsMenu),l.log("Added roll requests icon to chat controls",[])}static toggleRollRequestsMenu(){r.rollRequestsMenu?r.rollRequestsMenu.rendered?(r.rollRequestsMenu.close(),l.log("Closed roll requests menu",[])):(r.rollRequestsMenu._initializeFromSelectedTokens(),r.rollRequestsMenu.render(!0),l.log("Opened roll requests menu",[])):(r.rollRequestsMenu=new x,r.rollRequestsMenu.render(!0))}static updateRollRequestsIcon(s){const e=document.querySelector("#crlngn-requests-icon i");e&&(e.className=`fas fa-bolt${s?"":"-slash"}`)}};b(r,"diceConfig",{}),b(r,"playerDiceConfigs",{}),b(r,"rollRequestsMenu",null),b(r,"SOCKET_CALLS",{receiveDiceConfig:"receiveDiceConfig",getDiceConfig:"getDiceConfig",handleRollRequest:"handleRollRequest"}),b(r,"checkSideBar",s=>{const e=document.querySelector("body");s?e.classList.add("sidebar-expanded"):e.classList.remove("sidebar-expanded")});let H=r;H.init();
//# sourceMappingURL=crlngn-roll-requests.js.map
