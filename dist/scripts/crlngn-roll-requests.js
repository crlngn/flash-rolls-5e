var $=Object.defineProperty;var B=(D,s,e)=>s in D?$(D,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):D[s]=e;var L=(D,s,e)=>B(D,typeof s!="symbol"?s+"":s,e);const z={INIT:"init",READY:"ready",RENDER_SIDEBAR_TAB:"renderSidebarTab",USER_CONNECTED:"userConnected"},j={READY:"socketlib.ready"},A={PRE_ROLL_ABILITY_CHECK:"dnd5e.preRollAbilityCheckV2",PRE_ROLL_SAVING_THROW:"dnd5e.preRollSavingThrowV2",PRE_ROLL_DEATH_SAVE_V2:"dnd5e.preRollDeathSaveV2",PRE_ROLL_SKILL_V2:"dnd5e.preRollSkillV2",PRE_ROLL_TOOL_V2:"dnd5e.preRollToolV2",PRE_ROLL_HIT_DIE_V2:"dnd5e.preRollHitDieV2",PRE_ROLL_INITIATIVE:"dnd5e.preRollInitiative",PRE_ROLL_ATTACK_V2:"dnd5e.preRollAttackV2",PRE_ROLL_DAMAGE_V2:"dnd5e.preRollDamageV2"},N="crlngn-roll-requests",H=["%cFlash Rolls 5e","color:rgb(47, 151, 161); font-weight: bold;","|"],Q={ABILITY_CHECK:{name:"abilityCheck",label:"Ability Check",subList:"abilities",actorPath:"system.abilities"},SAVING_THROW:{name:"savingThrow",label:"Saving Throw",subList:"abilities",actorPath:"system.abilities"},SKILL:{name:"skill",label:"Skill Check",subList:"skills",actorPath:"system.skills"},TOOL:{name:"tool",label:"Tool Check",subList:"tools",actorPath:"system.tools"},CONCENTRATION:{name:"concentration",label:"Concentration Check",subList:null,actorPath:""},INITIATIVE:{name:"initiativeDialog",label:"Initiative Roll",subList:null,actorPath:""},DEATH_SAVE:{name:"deathSave",label:"Death Save",subList:null,actorPath:""},CUSTOM:{name:"custom",label:"Custom Roll",subList:null,actorPath:""}},I={ID:N,ROLL_REQUEST_OPTIONS:Q},P=class P{static log(s="",e=[],t=!1){try{const l=game.settings.get(N,"debug-mode")||P.debugOn;if(!(t||l))return;console.log(...H,s,...e)}catch{(t||P.debugOn)&&console.log(...H,s,...e)}}static warn(s="",e=[]){console.warn(...H,s,...e)}static error(s,e={ui:!1,console:!0,permanent:!1}){var t;e.ui&&((t=ui.notifications)==null||t.error(s,{localize:!0,permanent:e.permanent})),e.console&&console.error(...H,s)}};L(P,"debugOn",!1);let a=P;const q={checkbox:"checkbox"},G={client:"client",world:"world"},O=()=>({debugMode:{tag:"debug-mode",label:game.i18n.localize("CRLNGN_ROLLS.settings.debugMode.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.debugMode.hint"),propType:Boolean,inputType:q.checkbox,default:!0,scope:G.client,config:!0},rollRequestsEnabled:{tag:"roll-requests-enabled",label:game.i18n.localize("CRLNGN_ROLLS.settings.rollRequestsEnabled.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.rollRequestsEnabled.hint"),propType:Boolean,inputType:q.checkbox,default:!0,scope:G.world,config:!0},skipDialogs:{tag:"skip-dialogs",label:game.i18n.localize("CRLNGN_ROLLS.settings.skipDialogs.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.skipDialogs.hint"),propType:Boolean,inputType:q.checkbox,default:!1,scope:G.world,config:!0},useGMTargetTokens:{tag:"use-gm-target-tokens",label:game.i18n.localize("CRLNGN_ROLLS.settings.useGMTargetTokens.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.useGMTargetTokens.hint"),propType:Boolean,inputType:q.checkbox,default:!1,scope:G.world,config:!0},rollInterceptionEnabled:{tag:"roll-interception-enabled",label:game.i18n.localize("CRLNGN_ROLLS.settings.rollInterceptionEnabled.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint"),propType:Boolean,inputType:q.checkbox,default:!0,scope:G.world,config:!0},showOfflineNotifications:{tag:"show-offline-notifications",label:game.i18n.localize("CRLNGN_ROLLS.settings.showOfflineNotifications.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.showOfflineNotifications.hint"),propType:Boolean,inputType:q.checkbox,default:!0,scope:G.world,config:!0}});class _{static registerSettings(){const s=O();Object.entries(s).forEach(async t=>{const l=t[1];a.log("Registering... ",[t]);const i={name:l.label,hint:l.hint,default:l.default,type:l.propType,scope:l.scope,config:l.config,requiresReload:l.requiresReload||!1,onChange:o=>_.apply(l.tag,o)};l.choices&&(i.choices=l.choices),await game.settings.register(N,l.tag,i),(_.get(l.tag)===void 0||_.get(l.tag)===null)&&_.set(l.tag,l.default),a.log("registerSettings",[l.tag,_.get(l.tag)])})}static get(s,e=N){if(!s)return null;let t=!1;if(e===N)t=game.settings.get(e,s);else{let i=game.settings.storage.get("client")[`${e}.${s}`];i===void 0&&(i=game.settings.storage.get("world").getSetting(`${e}.${s}`),t=i==null?void 0:i.value),a.log("GET Setting",[i,t])}return t}static set(s,e,t=N){if(!s)return!1;let l=game.settings.storage.get("client")[`${t}.${s}`];l||(l=game.settings.storage.get("world").getSetting(`${t}.${s}`)),a.log("Setting",[s,l]);try{game.settings.set(t,s,e)}catch{a.log("Unable to change setting",[s,l])}return!0}static apply(s,e){const t=O();switch(s){case t.rollRequestsEnabled.tag:_.applyRollRequestsEnabled(e);break}}static applyRollRequestsEnabled(s){const e=document.querySelector("#chat-controls .chat-control-icon.roll-requests-icon");e&&(s?e.classList.add("active"):e.classList.remove("active"))}}const T=class T{static serializeForTransport(s,e=!1){return s==null||(e&&s.rolls&&Array.isArray(s.rolls)&&(s.rolls=s.rolls.map(t=>t instanceof Roll?t.toJSON():t)),a.log("ROLLS DATA",[s,s.subject])),s}static deserializeFromTransport(s,e=!1){let t={...s};if(!s)return t;if(e&&s.rolls&&s.rolls.length>0){const l=t.rolls.map(i=>{let o=i;return typeof i=="string"?o=Roll.fromJSON(i):o=Roll.fromJSON(JSON.stringify(i)),o});return t.rolls=[...l],t}return t}};L(T,"socket"),L(T,"_activeExecutions",new Map),L(T,"initialize",s=>{Hooks.once(j.READY,()=>{if(a.log("Attempting to register module...",[]),typeof socketlib>"u"){a.error("SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled."),ui.notifications.error(game.i18n.localize("CRLNGN_ROLLS.notifications.socketlibMissing"),{permanent:!0});return}try{T.socket=socketlib.registerModule(N),s&&s(),a.log("SocketUtil | Module registered",[T.socket])}catch(e){a.log("Problem registering module",[e])}})}),L(T,"registerCall",(s,e)=>{T.socket?(T.socket.register(s,e),a.log("SocketUtil - Registered callback",[T.socket,s])):a.log("SocketUtil - Failed to register callback (socket not initialized)",[T.socket,s])}),L(T,"sendMessage",(s,e)=>{a.log("SocketUtil - sendMessage",[s]),e&&e()}),L(T,"execForGMs",async(s,...e)=>{if(!T.socket){a.log("SocketUtil - Socket not initialized. Cannot execute as GM.",[]);return}return await T.socket.executeForAllGMs(s,...e)}),L(T,"execForAll",async(s,...e)=>{if(!T.socket){a.log("SocketUtil - Socket not initialized. Cannot execute for all clients.",[]);return}return await T.socket.executeForEveryone(s,...e)}),L(T,"execForUser",async(s,e,...t)=>{if(!T.socket){a.log("SocketUtil - Socket not initialized. Cannot execute as user.",[]);return}if(e===game.user.id)return a.log("SocketUtil - Preventing recursive call",[e]),null;const l=`${s}-${e}`;if(T._activeExecutions.has(l))return a.log("SocketUtil - Preventing recursive call",[l]),null;T._activeExecutions.set(l,!0);try{const i=await T.socket.executeAsUser(s,e,...t);return a.log("SocketUtil - Executed as user.",[i]),i}catch(i){return a.log("SocketUtil - Error executing as user",[i]),null}finally{T._activeExecutions.delete(l)}});let E=T;class M{static findActivityForRoll(s,e){var l;if(!((l=s==null?void 0:s.system)!=null&&l.activities))return null;const t=s.system.activities;switch(e){case"attack":const i=t.getByType("attack");return(i==null?void 0:i[0])||null;case"damage":const o=t.getByType("attack");if((o==null?void 0:o.length)>0)return o[0];const n=t.getByType("damage");if((n==null?void 0:n.length)>0)return n[0];const r=t.getByType("save");return(r==null?void 0:r.length)>0?r[0]:null;case"itemSave":const c=t.getByType("save");return(c==null?void 0:c[0])||null;default:return null}}static getActivitiesByType(s,e){var t;return(t=s==null?void 0:s.system)!=null&&t.activities?s.system.activities.getByType(e):[]}static hasActivityForRoll(s,e){return!!this.findActivityForRoll(s,e)}static async executeActivityRoll(s,e,t,l,i){var r,c,u,d;const o=s.items.get(t);if(!o)throw new Error(`Item ${t} not found on actor ${s.name}`);let n=null;if(l&&(n=(r=o.system.activities)==null?void 0:r.get(l),n||a.log("ActivityUtil.executeActivityRoll",["Activity not found by ID, falling back to search",{activityId:l,itemName:o.name,availableActivities:(c=o.system.activities)==null?void 0:c.map(g=>({id:g.id,type:g.type}))}])),n||(n=this.findActivityForRoll(o,e)),n)switch(a.log("ActivityUtil.executeActivityRoll",["Executing activity roll",{rollType:e,activityId:l,itemName:o.name,activityType:n.type}]),e){case"attack":a.log("ActivityUtil.executeActivityRoll",["Executing attack roll",{hasTargets:game.user.targets.size>0,targetCount:game.user.targets.size,skipDialog:i.fastForward,isRollRequest:i.isRollRequest,isGM:game.user.isGM}]);const g={configure:!0};if(MidiQOL){await M.syntheticItemRoll(o,{...i}),a.log("ActivityUtil.executeActivityRoll",["MidiQOL",MidiQOL,l,(u=MidiQOL==null?void 0:MidiQOL.Workflow)==null?void 0:u.getWorkflow(n.uuid)]);return}else return await n.use(usageConfig,g);case"damage":if(MidiQOL){const f=(d=MidiQOL==null?void 0:MidiQOL.Workflow)==null?void 0:d.getWorkflow(n.uuid),p=await f.activity.rollDamage({...i,workflow:f});a.log("ActivityUtil.executeActivityRoll",["MidiQOL / Damage",p]);return}else return await n.rollDamage(i);case"itemSave":return await o.use({activity:n.id},{skipDialog:i.fastForward});default:throw new Error(`Unknown roll type: ${e}`)}else{switch(a.log("ActivityUtil.executeActivityRoll",["No activity found, using legacy methods",{rollType:e,itemName:o.name,hasLegacyMethod:!!(o.rollAttack||o.rollDamage)}]),e){case"attack":if(o.rollAttack)return await o.rollAttack(i);break;case"damage":if(o.rollDamage)return await o.rollDamage(i);break;case"itemSave":return await o.use({},{skipDialog:i.fastForward})}throw new Error(`No suitable method found for ${e} on item ${o.name}`)}}static getActivityDisplayInfo(s){return s?{name:s.name||s.constructor.metadata.label,type:s.type,icon:s.constructor.metadata.icon,canAttack:s.type==="attack",canDamage:["attack","damage","save"].includes(s.type),canSave:s.type==="save"}:null}static getDamageFormula(s){var t,l;if(!((l=(t=s==null?void 0:s.damage)==null?void 0:t.parts)!=null&&l.length))return null;const e=s.damage.parts.map(i=>i.formula).filter(i=>i);return e.length>0?e.join(" + "):null}static async syntheticItemRoll(s,e={}){let t={consumeUsage:!1,consumeSpellSlot:!1},l={configureDialog:!0,workflowOptions:{autoRollAttack:!1,autoFastAttack:!1,autoRollDamage:"none",autoFastDamage:!1}};return e={...t,...e},a.log("ActivityUtil.syntheticItemRoll",["Executing synthetic item roll",s,e]),await MidiQOL.completeItemUse(s,e,l)}static async replaceDamage(s,e,{ignoreCrit:t=!1,damageType:l}={}){e=String(e),s.isCritical&&!t&&(e=await rollUtils.getCriticalFormula(e,s.item.getRollData()));let i=await new CONFIG.Dice.DamageRoll(e).evaluate();return await s.setDamageRolls([i]),a.log("ActivityUtil.replaceDamage",["Replaced damage",e,i,s.activity]),i}}class U extends dnd5e.applications.dice.D20RollConfigurationDialog{constructor(s={},e={},t={}){a.log("GMRollConfigDialog.constructor",["Creating dialog",{config:s,message:e,options:t}]),t.rollType=t.rollType||CONFIG.Dice.D20Roll,super(s,e,t),this.actors=t.actors||[],this.sendRequest=t.sendRequest!==!1,this.showDC=t.showDC||!1,this.dcValue=t.dcValue||null}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["dnd5e2","roll-configuration","gm-roll-config"]})}_prepareConfigurationData(s,e,t,l){const i=super._prepareConfigurationData(s,e,t,l);return i.showDC=this.showDC,i.dcValue=this.dcValue,i.sendRequest=this.sendRequest,i.actorCount=this.actors.length,i}async _preparePartContext(s,e,t){return e=await super._preparePartContext(s,e,t),s==="configuration"&&(e.showDC=this.showDC,e.dcValue=this.dcValue,e.sendRequest=this.sendRequest,e.actorCount=this.actors.length),e}async _onRender(s,e){if(super._onRender(s,e),a.log("GMRollConfigDialog._onRender",["Dialog rendered",{config:this.config,actors:this.actors,showDC:this.showDC,sendRequest:this.sendRequest,element:this.element}]),this.element.querySelector(".gm-roll-config-fields")){a.log("GMRollConfigDialog._onRender",["Fields already injected, skipping"]);return}let t=this.element.querySelector('[data-application-part="configuration"] fieldset');if(t||(t=this.element.querySelector(".configuration fieldset")),t||(t=this.element.querySelector("fieldset")),a.log("GMRollConfigDialog._onRender",["Looking for config section",{configSection:!!t,showDC:this.showDC,actorCount:this.actors.length,element:this.element,allFieldsets:this.element.querySelectorAll("fieldset").length}]),t&&(this.showDC||this.actors.length>0)){const l={showDC:this.showDC,dcValue:this.dcValue,showSendRequest:this.actors.length>0,sendRequest:this.sendRequest},i=await renderTemplate(`modules/${N}/templates/gm-roll-config-fields.hbs`,l),o=document.createElement("div");o.className="gm-roll-config-fields",o.innerHTML=i,t.appendChild(o)}this._attachButtonListeners()}_attachButtonListeners(){this.element.querySelectorAll('[data-action="advantage"], [data-action="normal"], [data-action="disadvantage"]').forEach(e=>{e.addEventListener("click",t=>{const l=t.currentTarget.dataset.action;a.log("GMRollConfigDialog button clicked",[l,{currentAdvantage:this.config.advantage,currentDisadvantage:this.config.disadvantage,config:this.config}])})})}async _processSubmitData(s,e,t){if(a.log("GMRollConfigDialog._processSubmitData",["Processing form data",{formData:Object.fromEntries(t),configBefore:this.config}]),await super._processSubmitData(s,e,t),t.has("dc")&&t.get("dc")!==""){const l=parseInt(t.get("dc"));if(!isNaN(l))for(const i of this.config.rolls)i.options.target=l}this.sendRequest=t.get("sendRequest")!=="false"}async _finalizeRolls(s){return this.config.sendRequest=this.sendRequest,s}static async getConfiguration(s,e,t,l={}){var p,v,b,m,y,C;a.log("GMRollConfigDialog.getConfiguration",["Starting configuration",{actors:s.map(R=>R.name),rollType:e,rollKey:t,options:l}]);const i=["skill","save","savingThrow","ability","abilityCheck","concentration"].includes(e),o=s[0];if(!o)return null;let n=CONFIG.Dice.D20Roll;["damage","healing"].includes(e)?n=CONFIG.Dice.DamageRoll||CONFIG.Dice.BasicRoll:["formula","custom"].includes(e)&&(n=CONFIG.Dice.BasicRoll),n||(a.log("GMRollConfigDialog.getConfiguration",["Roll class not found, using D20Roll",{rollType:e}]),n=CONFIG.Dice.D20Roll),a.log("GMRollConfigDialog.getConfiguration",["Determined roll class",{rollType:e,rollClass:n,rollClassName:n==null?void 0:n.name,availableRollClasses:Object.keys(CONFIG.Dice)}]);const r={data:o.getRollData(),subject:o,rolls:[{parts:[],data:o.getRollData(),options:{}}]};switch(e){case"skill":r.skill=t;break;case"save":case"savingThrow":r.ability=t;break;case"ability":case"abilityCheck":r.ability=t;break}const c={create:!1,data:{speaker:ChatMessage.getSpeaker({actor:o})}},u={options:{actors:s,sendRequest:s.some(R=>this._isPlayerOwned(R)),showDC:i,rollKey:t,rollType:n,window:{title:game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.gmRollConfigTitle"),subtitle:s.length===1?s[0].name:game.i18n.format("CRLNGN_ROLLS.ui.dialogs.gmRollConfigActors",{count:s.length})},...l}};a.log("GMRollConfigDialog.getConfiguration",["Creating dialog with config",{rollConfig:r,messageConfig:c,dialogConfig:u}]);const d=new this(r,c,u.options),g=await new Promise(R=>{d.addEventListener("close",()=>{R({rolls:d.rolls,config:d.config,message:d.message,sendRequest:d.sendRequest})},{once:!0}),d.render({force:!0})});if(a.log("GMRollConfigDialog.getConfiguration",["Dialog result",g]),!g.rolls||g.rolls.length===0)return null;const f={advantage:g.config.advantage||!1,disadvantage:g.config.disadvantage||!1,rollMode:g.message.rollMode,situational:((v=(p=g.rolls[0])==null?void 0:p.options)==null?void 0:v.situational)||"",parts:(m=(b=g.rolls[0])==null?void 0:b.options)!=null&&m.situational?[g.rolls[0].options.situational]:[],chatMessage:!0,isRollRequest:!0,skipDialog:l.skipDialogs||!1,sendRequest:g.sendRequest,target:(C=(y=g.rolls[0])==null?void 0:y.options)==null?void 0:C.target};return g.config.ability&&["skill","tool"].includes(e)&&(f.ability=g.config.ability),f}static _isPlayerOwned(s){return Object.entries(s.ownership).some(([e,t])=>{const l=game.users.get(e);return l&&!l.isGM&&t>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER})}}class W extends dnd5e.applications.dice.SkillToolRollConfigurationDialog{constructor(s={},e={},t={}){const l=foundry.utils.mergeObject(s,{chooseAbility:!0});t.rollType=t.rollType||CONFIG.Dice.D20Roll,super(l,e,t),this.actors=t.actors||[],this.sendRequest=t.sendRequest!==!1,this.showDC=t.showDC||!1,this.dcValue=t.dcValue||null}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["dnd5e2","roll-configuration","gm-roll-config"]})}_prepareConfigurationData(s,e,t,l){const i=super._prepareConfigurationData(s,e,t,l);return i.showDC=this.showDC,i.dcValue=this.dcValue,i.sendRequest=this.sendRequest,i.actorCount=this.actors.length,i}async _preparePartContext(s,e,t){return e=await super._preparePartContext(s,e,t),s==="configuration"&&(e.showDC=this.showDC,e.dcValue=this.dcValue,e.sendRequest=this.sendRequest,e.actorCount=this.actors.length),e}async _onRender(s,e){if(super._onRender(s,e),a.log("GMRollConfigDialog._onRender",["Dialog rendered",{config:this.config,actors:this.actors,showDC:this.showDC,sendRequest:this.sendRequest,element:this.element}]),this.element.querySelector(".gm-roll-config-fields")){a.log("GMRollConfigDialog._onRender",["Fields already injected, skipping"]);return}let t=this.element.querySelector('[data-application-part="configuration"] fieldset');if(t||(t=this.element.querySelector(".configuration fieldset")),t||(t=this.element.querySelector("fieldset")),a.log("GMRollConfigDialog._onRender",["Looking for config section",{configSection:!!t,showDC:this.showDC,actorCount:this.actors.length,element:this.element,allFieldsets:this.element.querySelectorAll("fieldset").length}]),t&&(this.showDC||this.actors.length>0)){const l={showDC:this.showDC,dcValue:this.dcValue,showSendRequest:this.actors.length>0,sendRequest:this.sendRequest},i=await renderTemplate(`modules/${N}/templates/gm-roll-config-fields.hbs`,l),o=document.createElement("div");o.className="gm-roll-config-fields",o.innerHTML=i,t.appendChild(o)}this._attachButtonListeners()}_attachButtonListeners(){this.element.querySelectorAll('[data-action="advantage"], [data-action="normal"], [data-action="disadvantage"]').forEach(e=>{e.addEventListener("click",t=>{const l=t.currentTarget.dataset.action;a.log("GMRollConfigDialog button clicked",[l,{currentAdvantage:this.config.advantage,currentDisadvantage:this.config.disadvantage,config:this.config}])})})}async _processSubmitData(s,e,t){if(a.log("GMRollConfigDialog._processSubmitData",["Processing form data",{formData:Object.fromEntries(t),configBefore:this.config}]),await super._processSubmitData(s,e,t),t.has("dc")&&t.get("dc")!==""){const l=parseInt(t.get("dc"));if(!isNaN(l))for(const i of this.config.rolls)i.options.target=l}this.sendRequest=t.get("sendRequest")!=="false"}async _finalizeRolls(s){return this.config.sendRequest=this.sendRequest,s}static async getConfiguration(s,e,t,l={}){var v,b,m,y,C,R,k;const i=["skill","tool"].includes(e),o=s[0];if(!o)return null;const n=CONFIG.Dice.D20Roll;let r=null;if(e==="skill"){const S=o.system.skills[t];r=(S==null?void 0:S.ability)||((v=CONFIG.DND5E.skills[t])==null?void 0:v.ability)||"int"}const c={data:o.getRollData(),subject:o,skill:t,ability:r,chooseAbility:!0,rolls:[{parts:[],data:o.getRollData(),options:{}}]},u={create:!1,data:{speaker:ChatMessage.getSpeaker({actor:o})}},d={options:{actors:s,sendRequest:s.some(S=>U._isPlayerOwned(S)),showDC:i,rollKey:t,rollType:n,window:{title:game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.gmRollConfigTitle"),subtitle:s.length===1?s[0].name:game.i18n.format("CRLNGN_ROLLS.ui.dialogs.gmRollConfigActors",{count:s.length})},...l}},g=new this(c,u,d.options),f=await new Promise(S=>{g.addEventListener("close",()=>{S({rolls:g.rolls,config:g.config,message:g.message,sendRequest:g.sendRequest})},{once:!0}),g.render({force:!0})});return a.log("GMRollConfigDialog.getConfiguration",["Dialog result",f]),!f.rolls||f.rolls.length===0?null:{advantage:f.config.advantage||!1,disadvantage:f.config.disadvantage||!1,rollMode:f.message.rollMode,situational:((m=(b=f.rolls[0])==null?void 0:b.options)==null?void 0:m.situational)||"",parts:(C=(y=f.rolls[0])==null?void 0:y.options)!=null&&C.situational?[f.rolls[0].options.situational]:[],chatMessage:!0,isRollRequest:!0,skipDialog:l.skipDialogs||!1,sendRequest:f.sendRequest,target:(k=(R=f.rolls[0])==null?void 0:R.options)==null?void 0:k.target,ability:f.config.ability}}}class F extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2){constructor(e={}){super(e);L(this,"_onClickOutside",e=>{if(this.isLocked)return;const t=this.element;t&&(e.target.closest(".roll-requests-menu")||t.contains(e.target)||e.target.closest("#crlngn-requests-icon")||e.target.closest(".dialog, .app, .notification")||this.close())});this.selectedActors=new Set,this.currentTab="pc",this.selectedRequestType=null,this.isLocked=!1,this._initializeFromSelectedTokens()}async _prepareContext(e){var v;const t=await super._prepareContext(e),l=game.actors.contents,i=[],o=[],n=game.scenes.active;for(const b of l){if(b.type!=="character"&&b.type!=="npc")continue;const m={id:b.id,uuid:b.uuid,name:b.name,img:b.img,selected:this.selectedActors.has(b.id),crlngnStats:this._getActorStats(b)};Object.entries(b.ownership).some(([C,R])=>{const k=game.users.get(C);return k&&!k.isGM&&R>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER})?i.push(m):n&&n.tokens.some(R=>R.actorId===b.id)&&o.push(m)}const r=O(),c=_.get(r.rollRequestsEnabled.tag),u=_.get(r.skipDialogs.tag),d=this.currentTab==="pc"?i:o,g=d.length>0&&d.every(b=>this.selectedActors.has(b.id)),f=[];if(this.selectedActors.size>0)for(const[b,m]of Object.entries(I.ROLL_REQUEST_OPTIONS))f.push({id:b,name:game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${m.name}`)||m.label,rollable:m.subList==null,hasSubList:!!m.subList,selected:this.selectedRequestType===b});const p=[];if(this.selectedRequestType&&this.selectedActors.size>0){const b=I.ROLL_REQUEST_OPTIONS[this.selectedRequestType];if(b&&b.subList){const m=Array.from(this.selectedActors)[0],y=game.actors.get(m);if(b.subList==="tools"){const C=((v=CONFIG.DND5E.enrichmentLookup)==null?void 0:v.tools)||CONFIG.DND5E.tools||{};for(const[R,k]of Object.entries(C)){let S=R;if(k!=null&&k.id){const w=dnd5e.documents.Trait.getBaseItem(k.id,{indexOnly:!0});S=(w==null?void 0:w.name)||R}else S=R.replace(/([A-Z])/g," $1").replace(/^./,w=>w.toUpperCase()).trim();p.push({id:R,name:S,rollable:!0})}p.sort((R,k)=>R.name.localeCompare(k.name))}else if(y&&b.actorPath){const C=foundry.utils.getProperty(y,b.actorPath)||{},R=CONFIG.DND5E[b.subList];for(const[k,S]of Object.entries(C)){let w="";b.subList==="skills"&&(R!=null&&R[k])||b.subList==="abilities"&&(R!=null&&R[k])?w=R[k].label:w=S.label||game.i18n.localize(S.name||k)||k,p.push({id:k,name:w,rollable:!0})}b.subList==="skills"&&p.sort((k,S)=>k.name.localeCompare(S.name))}}}return{...t,actors:d,currentTab:this.currentTab,isPCTab:this.currentTab==="pc",isNPCTab:this.currentTab==="npc",selectedTab:this.currentTab,rollRequestsEnabled:c,skipDialogs:u,selectAllOn:g,hasSelectedActors:this.selectedActors.size>0,requestTypes:f,rollTypes:p,showNames:!0,actorsLocked:this.isLocked}}_getActorStats(e){var i,o,n,r,c;const t=e.system,l=[];return(i=t.attributes)!=null&&i.hp&&l.push({abbrev:"HP",value:t.attributes.hp.value}),(o=t.attributes)!=null&&o.ac&&l.push({abbrev:"AC",value:t.attributes.ac.value}),(n=t.attributes)!=null&&n.spelldc&&l.push({abbrev:"DC",value:t.attributes.spelldc}),(c=(r=t.skills)==null?void 0:r.prc)!=null&&c.passive&&l.push({abbrev:"PP",value:t.skills.prc.passive}),l}_onRender(e,t){super._onRender(e,t),this._attachListeners(),setTimeout(()=>{document.addEventListener("click",this._onClickOutside,!0)},100),this._tokenControlHook=Hooks.on("controlToken",this._onTokenControlChange.bind(this))}_onTokenControlChange(e,t){this.rendered&&(this._ignoreTokenControl||(this._tokenUpdateTimeout&&clearTimeout(this._tokenUpdateTimeout),this._tokenUpdateTimeout=setTimeout(()=>{this._initializeFromSelectedTokens(),this.render(),this._tokenUpdateTimeout=null},100)))}_attachListeners(){var o,n,r,c;a.log("Attaching listeners",[]);const e=this.element;(o=e.querySelector("#crlngn-requests-toggle"))==null||o.addEventListener("change",this._onToggleRollRequests.bind(this)),(n=e.querySelector("#crlngn-skip-dialogs"))==null||n.addEventListener("change",this._onToggleSkipDialogs.bind(this)),(r=e.querySelector("#crlngn-actors-all"))==null||r.addEventListener("change",this._onToggleSelectAll.bind(this)),(c=e.querySelector("#crlngn-actors-lock"))==null||c.addEventListener("click",this._onToggleLock.bind(this));const t=e.querySelectorAll(".actor-tab");a.log("Found tabs:",[t.length]),t.forEach(u=>{u.addEventListener("click",this._onTabClick.bind(this))}),e.querySelectorAll(".actor").forEach(u=>{u.addEventListener("click",this._onActorClick.bind(this))}),e.querySelectorAll(".actor-select").forEach(u=>{u.addEventListener("click",this._onActorSelectClick.bind(this))});const l=e.querySelector(".request-types");l&&l.addEventListener("click",u=>{const d=u.target.closest("li");if(d&&d.dataset.id){const g={...u,currentTarget:d};this._onRequestTypeClick(g)}});const i=e.querySelector(".roll-types");i&&i.addEventListener("click",u=>{const d=u.target.closest("li");if(d&&d.dataset.id){const g={...u,currentTarget:d};this._onRollTypeClick(g)}})}async _onToggleRollRequests(e){const t=O(),l=e.target.checked;await _.set(t.rollRequestsEnabled.tag,l),x.updateRollRequestsIcon(l),a.log("Roll requests enabled:",[l])}async _onToggleSkipDialogs(e){const t=O(),l=e.target.checked;await _.set(t.skipDialogs.tag,l),a.log("Skip dialogs:",[l])}_onToggleSelectAll(e){const t=e.target.checked;this._ignoreTokenControl=!0,(this.currentTab==="pc"?game.actors.contents.filter(i=>this._isPlayerOwned(i)):game.actors.contents.filter(i=>!this._isPlayerOwned(i)&&this._hasTokenInScene(i))).forEach(i=>{t?(this.selectedActors.add(i.id),this._updateCanvasTokenSelection(i.id,!0)):(this.selectedActors.delete(i.id),this._updateCanvasTokenSelection(i.id,!1))}),setTimeout(()=>{this._ignoreTokenControl=!1},200),this.render(),this._updateRequestTypesVisibility(),a.log("Select all:",[t,"for",this.currentTab])}_onToggleLock(e){e.preventDefault(),this.isLocked=!this.isLocked;const t=e.currentTarget;t.classList.remove("fa-lock-keyhole","fa-lock-keyhole-open"),t.classList.add(this.isLocked?"fa-lock-keyhole":"fa-lock-keyhole-open"),a.log("Lock toggled:",[this.isLocked])}_initializeFromSelectedTokens(){var t;const e=((t=canvas.tokens)==null?void 0:t.controlled)||[];this.selectedActors.clear();for(const l of e)if(l.actor&&(this.selectedActors.add(l.actor.id),this.selectedActors.size===1)){const i=this._isPlayerOwned(l.actor);this.currentTab=i?"pc":"npc"}a.log("Initialized with selected tokens:",[Array.from(this.selectedActors)])}_isPlayerOwned(e){return e.type!=="character"&&e.type!=="npc"?!1:Object.entries(e.ownership).some(([t,l])=>{const i=game.users.get(t);return i&&!i.isGM&&l>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER})}_hasTokenInScene(e){if(e.type!=="character"&&e.type!=="npc")return!1;const t=game.scenes.active;return t&&t.tokens.some(l=>l.actorId===e.id)}async _onTabClick(e){var l;const t=e.currentTarget.dataset.tab;a.log("Tab clicked:",[t,this.currentTab]),t!==this.currentTab&&(this.selectedActors.clear(),(l=canvas.tokens)==null||l.releaseAll(),this.selectedRequestType=null,this.currentTab=t,await this.render(),a.log("Switched to tab:",[t]))}_onActorClick(e){if(e.target.closest(".actor-select"))return;const l=e.currentTarget.dataset.id;this._toggleActorSelection(l)}_onActorSelectClick(e){e.stopPropagation();const t=e.currentTarget.dataset.id;this._toggleActorSelection(t)}_toggleActorSelection(e){this._ignoreTokenControl=!0,this.selectedActors.has(e)?(this.selectedActors.delete(e),this._updateCanvasTokenSelection(e,!1)):(this.selectedActors.add(e),this._updateCanvasTokenSelection(e,!0)),setTimeout(()=>{this._ignoreTokenControl=!1},100),this.render(),this._updateRequestTypesVisibility(),this._updateSelectAllState(),a.log("Actor selected:",[e,this.selectedActors.has(e)])}_updateCanvasTokenSelection(e,t){if(!game.scenes.active)return;const i=canvas.tokens.placeables.filter(o=>{var n;return((n=o.actor)==null?void 0:n.id)===e});for(const o of i)t?o.control({releaseOthers:!1}):o.release()}_updateRequestTypesVisibility(){this.render()}_updateSelectAllState(){const e=this.element.querySelector("#crlngn-actors-all"),t=this.currentTab==="pc"?"pc":"npc",l=this.element.querySelectorAll(`.${t}-actors .actor-item input[type="checkbox"]`),i=Array.from(l).filter(o=>o.checked).length;e.checked=i>0&&i===l.length,e.indeterminate=i>0&&i<l.length}async _onRequestTypeClick(e){const l=e.currentTarget.dataset.id,i=I.ROLL_REQUEST_OPTIONS[l];if(!i){a.error("Unknown request type:",l);return}this.selectedRequestType===l?(this.selectedRequestType=null,a.log("Request type deselected:",[l])):(this.selectedRequestType=l,a.log("Request type selected:",[l])),i.subList?await this.render():this.selectedRequestType&&this._triggerRoll(l,null)}_onRollTypeClick(e){a.log("Roll type clicked!",[e.currentTarget]);const t=e.currentTarget.dataset.id;a.log("Roll type selected:",[t]),this._triggerRoll(this.selectedRequestType,t)}async _triggerRoll(e,t){var b;const l=O(),i=Array.from(this.selectedActors),o=_.get(l.skipDialogs.tag),n=i.filter(m=>{const y=game.actors.get(m);if(!y)return!1;const C=this._isPlayerOwned(y),R=!C&&this._hasTokenInScene(y);return this.currentTab==="pc"&&C||this.currentTab==="npc"&&R}),r=I.ROLL_REQUEST_OPTIONS[e],c=(r==null?void 0:r.name)||e;if(c==="custom"){const m=await this._showCustomRollDialog();if(!m)return;t=m}if(c==="initiativeDialog"&&!game.combat)if(await Dialog.confirm({title:game.i18n.localize("COMBAT.Create"),content:"<p>"+game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.noCombatActive")+"</p>",yes:()=>!0,no:()=>!1,defaultYes:!0,options:{classes:["crlngn-rolls-dialog"]}}))await(await game.combats.documentClass.create({scene:game.scenes.active.id})).activate(),ui.notifications.info(game.i18n.localize("CRLNGN_ROLL_REQUESTS.notifications.combatCreated"));else return;let u=n;if(c==="initiativeDialog"&&game.combat){const m=n.map(R=>game.actors.get(R)).filter(R=>R),y=[],C=new Set;for(const R of m){const k=game.combat.getCombatantByActor(R.id);k&&k.initiative!==null&&(y.push(R.name),C.add(R.id))}if(y.length>0){if(await Dialog.confirm({title:game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.rerollInitiativeTitle"),content:"<p>"+game.i18n.format("CRLNGN_ROLLS.ui.dialogs.rerollInitiative",{actors:y.join(", ")})+"</p>",yes:()=>!0,no:()=>!1,defaultYes:!1,options:{classes:["crlngn-rolls-dialog"]}}))for(const k of C){const S=game.combat.getCombatantByActor(k);S&&await S.update({initiative:null})}else if(u=n.filter(k=>!C.has(k)),u.length===0){ui.notifications.info(game.i18n.localize("CRLNGN_ROLL_REQUESTS.notifications.allActorsHaveInitiative"));return}}}let d=u.map(m=>game.actors.get(m)).filter(m=>m);if(c==="deathSave"){const m=[],y=[];for(const C of d){const R=((b=C.system.attributes.hp)==null?void 0:b.value)||0,k=C.system.attributes.death||{},S=k.success||0,w=k.failure||0;R<=0&&S<3&&w<3?m.push(C):y.push(C.name)}y.length>0&&ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.actorsSkippingDeathSave",{actors:y.join(", ")})),d=m}if(!d.length){ui.notifications.warn("No valid actors selected");return}const g=[],f=[];for(const m of d){const y=this._getActorOwner(m);y?g.push({actor:m,owner:y}):f.push(m)}let p=null;if(!o||g.length>0){if(p=await(["skill","tool"].includes(c)?W:U).getConfiguration(d,c,t,{skipDialogs:o}),!p)return}else p={advantage:!1,disadvantage:!1,situational:"",parts:[],rollMode:game.settings.get("core","rollMode"),chatMessage:!0,isRollRequest:!0,skipDialog:o,sendRequest:!0},c==="deathSave"&&(p.target=10);const v=[];if(p.sendRequest){for(const{actor:m,owner:y}of g){if(!y.active){_.get(l.showOfflineNotifications.tag)&&ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.playerOffline",{player:y.name})),f.push(m);continue}this._sendRollRequestToPlayer(m,y,c,t,p,!0),v.push({actor:m,owner:y}),await new Promise(C=>setTimeout(C,100))}v.length>0&&this._sendConsolidatedNotification(v,c,t)}else f.push(...g.map(({actor:m})=>m));f.length>0&&await this._handleNPCRolls(f,c,t,p),setTimeout(()=>this.close(),500)}_getActorOwner(e){const t=e.ownership||{};for(const[l,i]of Object.entries(t))if(i>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){const o=game.users.get(l);if(o&&!o.isGM)return o}return null}_sendRollRequestToPlayer(e,t,l,i,o,n=!1){const r=O(),u={abilityCheck:"ability",savingThrow:"save",skill:"skill",tool:"tool",concentration:"concentration",initiativeDialog:"initiative",deathSave:"deathsave",custom:"custom"}[l]||l,d={type:"rollRequest",requestId:foundry.utils.randomID(),actorId:e.id,rollType:u,rollKey:i,activityId:null,config:{rollMode:o.rollMode||game.settings.get("core","rollMode"),advantage:o.advantage||!1,disadvantage:o.disadvantage||!1,situational:o.situational||"",parts:o.parts||[],chatMessage:o.chatMessage!==!1,target:o.target,ability:o.ability,attackMode:o.attackMode},skipDialog:o.skipDialog||!1,targetTokenIds:Array.from(game.user.targets).map(g=>g.id),preserveTargets:_.get(r.useGMTargetTokens.tag)};E.execForUser("handleRollRequest",t.id,d),n||ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent",{player:t.name,actor:e.name}))}_sendConsolidatedNotification(e,t,l){var r,c,u,d,g;const i={};for(const{actor:f,owner:p}of e)i[p.id]||(i[p.id]={player:p,actors:[]}),i[p.id].actors.push(f);for(const[f,p]of Object.entries(I.ROLL_REQUEST_OPTIONS))if(p.name===t)break;const o=t;let n=game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${o}`)||o;if(l)if(o==="skill")n=`${n} (${((r=CONFIG.DND5E.skills[l])==null?void 0:r.label)||l})`;else if(o==="savingThrow")n=`${n} (${((c=CONFIG.DND5E.abilities[l])==null?void 0:c.label)||l})`;else if(o==="abilityCheck")n=`${n} (${((u=CONFIG.DND5E.abilities[l])==null?void 0:u.label)||l})`;else if(o==="tool"){const f=(g=(d=CONFIG.DND5E.enrichmentLookup)==null?void 0:d.tools)==null?void 0:g[l];if(f!=null&&f.id){const p=dnd5e.documents.Trait.getBaseItem(f.id,{indexOnly:!0});n=`${n} (${(p==null?void 0:p.name)||l})`}else n=`${n} (${l})`}else o==="custom"&&(n=`${n}: ${l}`);if(Object.keys(i).length===1){const f=Object.values(i)[0],p=f.actors.map(v=>v.name).join(", ");ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentSingle",{rollType:n,actors:p,player:f.player.name}))}else{const f=Object.values(i).map(p=>{const v=p.actors.map(b=>b.name).join(", ");return`${p.player.name} (${v})`});ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentMultiple",{rollType:n,count:e.length,players:f.join("; ")}))}}async _handleNPCRolls(e,t,l,i){const o={advantage:i.advantage||!1,disadvantage:i.disadvantage||!1,situational:i.situational||"",parts:i.parts||[],rollMode:i.rollMode||game.settings.get("core","rollMode"),fastForward:i.skipDialog||!1,chatMessage:i.chatMessage!==!1,isRollRequest:!0,target:i.target,ability:i.ability,attackMode:i.attackMode};for(const n of e)await this._executeActorRoll(n,t,l,o),await new Promise(r=>setTimeout(r,200))}async _executeActorRoll(e,t,l,i){var o;try{switch(a.log("RollRequestsMenu._executeActorRoll",["Starting roll for actor",{actorName:e.name,actorType:e.type,actorId:e.id,requestType:t,normalizedType:t.toLowerCase(),config:i}]),t.toLowerCase()){case"abilitycheck":await e.rollAbilityCheck(l,i);break;case"savingthrow":await e.rollSavingThrow(l,i);break;case"skill":await e.rollSkill({...i,skill:l});break;case"tool":await e.rollToolCheck({...i,tool:l});break;case"concentration":await e.rollConcentration(i);break;case"initiativedialog":if(!game.combat){ui.notifications.warn(game.i18n.localize("COMBAT.NoneActive"));break}a.log("RollRequestsMenu._executeActorRoll",["About to roll initiative for",e.name,"with config",i]);const r=await e.rollInitiativeDialog(i);if(a.log("RollRequestsMenu._executeActorRoll",["Initiative roll result:",r]),!r){a.log("RollRequestsMenu._executeActorRoll",["No result from rollInitiativeDialog, trying direct combat update"]);let u=game.combat.getCombatantByActor(e.id);if(!u){const d=e.getActiveTokens();d.length&&(await game.combat.createEmbeddedDocuments("Combatant",[{tokenId:d[0].id,actorId:e.id}]),u=game.combat.getCombatantByActor(e.id))}if(u){const d=u.getInitiativeRoll();await d.evaluate({async:!0}),await u.update({initiative:d.total}),await d.toMessage({speaker:ChatMessage.getSpeaker({actor:e}),flavor:game.i18n.localize("DND5E.Initiative")})}}break;case"deathsave":a.log("RollRequestsMenu._executeActorRoll",["Actor death save state",{name:e.name,hp:(o=e.system.attributes.hp)==null?void 0:o.value,deathSaves:e.system.attributes.death,type:e.type}]);const c=await e.rollDeathSave();a.log("RollRequestsMenu._executeActorRoll",["Death save completed",c]);break;case"custom":try{const u=new Roll(l,e.getRollData());await u.evaluate({async:!0}),await u.toMessage({speaker:ChatMessage.getSpeaker({actor:e}),flavor:game.i18n.localize("CRLNGN_ROLLS.rollTypes.custom")})}catch(u){ui.notifications.error(game.i18n.format("CRLNGN_ROLLS.ui.notifications.invalidFormula",{formula:l})),a.log("RollRequestsMenu._executeActorRoll",["Invalid custom formula",l,u])}break;default:ui.notifications.warn(`Unknown roll type: ${t}`);break}}catch(n){a.log("RollRequestsMenu._executeActorRoll",["Error executing roll",n]),ui.notifications.error(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollError",{actor:e.name}))}}async _onClose(e){await super._onClose(e),this.selectedActors.clear(),this.selectedRequestType=null,document.removeEventListener("click",this._onClickOutside,!0),this._tokenControlHook&&(Hooks.off("controlToken",this._tokenControlHook),this._tokenControlHook=null),this._tokenUpdateTimeout&&(clearTimeout(this._tokenUpdateTimeout),this._tokenUpdateTimeout=null)}setPosition(e={}){return this}async _showCustomRollDialog(){return new Promise(async e=>{const t=await renderTemplate(`modules/${I.ID}/templates/custom-roll-dialog.hbs`,{formula:"",readonly:!1});new Dialog({title:game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.customRollTitle"),content:t,buttons:{roll:{icon:'<i class="fas fa-dice-d20"></i>',label:game.i18n.localize("Roll"),callback:i=>{const n=(i[0]||i).querySelector("#custom-roll-formula").value.trim();e(n||null)}},cancel:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("Cancel"),callback:()=>e(null)}},default:"roll",render:i=>{const o=i[0]||i,n=o.querySelector("#custom-roll-formula"),r={};o.querySelectorAll(".dice-button").forEach(c=>{c.addEventListener("click",u=>{const d=u.currentTarget.dataset.die;r[d]=(r[d]||0)+1;const g=[];for(const[f,p]of Object.entries(r))p>0&&g.push(`${p}${f}`);n.value=g.join(" + ")})})}},{classes:["crlngn-rolls-dialog","crlngn-custom-roll-dialog"]}).render(!0)})}}L(F,"DEFAULT_OPTIONS",{id:"crlngn-requests-menu",classes:["roll-requests-menu"],tag:"div",window:{frame:!1,resizable:!1,minimizable:!1},position:null}),L(F,"PARTS",{main:{template:`modules/${I.ID}/templates/requests-menus.hbs`}});class V{static initialize(){a.log("RollInterceptor.initialize",["Called, checking if user is GM",game.user.isGM]),game.user.isGM&&(a.log("RollInterceptor.initialize",["Initializing roll interceptor for GM"]),this.registerHooks())}static registerHooks(){this._registerHook(A.PRE_ROLL_ABILITY_CHECK,this._handlePreRoll.bind(this,"ability")),this._registerHook(A.PRE_ROLL_SAVING_THROW,this._handlePreRoll.bind(this,"save")),this._registerHook(A.PRE_ROLL_SKILL_V2,this._handlePreRoll.bind(this,"skill")),this._registerHook(A.PRE_ROLL_TOOL_V2,this._handlePreRoll.bind(this,"tool")),this._registerHook(A.PRE_ROLL_ATTACK_V2,this._handlePreRoll.bind(this,"attack")),this._registerHook(A.PRE_ROLL_DAMAGE_V2,this._handlePreRoll.bind(this,"damage")),this._registerHook(A.PRE_ROLL_INITIATIVE,this._handlePreRoll.bind(this,"initiative")),this._registerHook(A.PRE_ROLL_DEATH_SAVE_V2,this._handlePreRoll.bind(this,"deathsave")),this._registerHook(A.PRE_ROLL_HIT_DIE_V2,this._handlePreRoll.bind(this,"hitDie")),a.log("RollInterceptor.registerHooks",["Registered roll interception hooks"])}static _registerHook(s,e){const t=Hooks.on(s,e);this.registeredHooks.add({hookName:s,hookId:t})}static unregisterHooks(){for(const{hookName:s,hookId:e}of this.registeredHooks)Hooks.off(s,e);this.registeredHooks.clear(),a.log("RollInterceptor.unregisterHooks",["Unregistered all hooks"])}static _handleGenericPreRoll(s,e){var c,u,d;if(!game.user.isGM||(a.log("RollInterceptor._handleGenericPreRoll",["Generic preRollV2 triggered",{configType:(c=s==null?void 0:s.constructor)==null?void 0:c.name,hasSubject:!!(s!=null&&s.subject),subjectName:(u=s==null?void 0:s.subject)==null?void 0:u.name,hasIsRollRequest:s==null?void 0:s.isRollRequest,optionsType:(d=e==null?void 0:e.constructor)==null?void 0:d.name}]),s!=null&&s.isRollRequest))return;const t=s==null?void 0:s.subject,l=O();if(!_.get(l.rollInterceptionEnabled.tag))return;if(a.log("RollInterceptor._handleGenericPreRoll",[t,t==null?void 0:t.documentName]),!t||t.documentName!=="Actor"){a.log("RollInterceptor._handleGenericPreRoll",["No valid Actor found in roll",s]);return}const o=this._getActorOwner(t);if(!o||o.id===game.user.id||!o.active)return;let n="unknown",r=null;return s!=null&&s.ability?(n=s.save?"save":"ability",r=s.ability):s!=null&&s.skill?(n="skill",r=s.skill):s!=null&&s.tool&&(n="tool",r=s.tool),a.log("RollInterceptor._handleGenericPreRoll",["Determined roll type",{rollType:n,rollKey:r,configKeys:Object.keys(s||{})}]),a.log("RollInterceptor._handleGenericPreRoll",["Intercepting generic roll",{rollType:n,actorName:t.name,ownerName:o.name}]),r&&s&&(s={...s,ability:r}),this._sendRollRequest(t,o,n,s),!1}static _handlePreRoll(s,e,t,l){var c,u;if(!game.user.isGM)return;a.log("RollInterceptor._handlePreRoll",["Hook triggered",{rollType:s,configType:(c=e==null?void 0:e.constructor)==null?void 0:c.name,hasIsRollRequest:e==null?void 0:e.isRollRequest,dialogIsRollRequest:t==null?void 0:t.isRollRequest,messageIsRollRequest:l==null?void 0:l.isRollRequest}]);let i;if(s==="initiative"&&e instanceof Actor){if(i=e,t!=null&&t.isRollRequest||l!=null&&l.isRollRequest)return}else{if(e.isRollRequest)return;i=((u=e.subject)==null?void 0:u.actor)||e.subject||e.actor}const o=O(),n=_.get(o.rollInterceptionEnabled.tag);if(a.log("RollInterceptor._handlePreRoll",["Roll interception enabled:",n]),!n)return;if(!i||i.documentName!=="Actor"){a.log("RollInterceptor._handlePreRoll",["No valid Actor found in roll config",e,s]);return}const r=this._getActorOwner(i);if(!r||r.id===game.user.id){a.log("RollInterceptor._handlePreRoll",["Actor is GM-owned or has no owner, allowing roll",{rollType:s,actorName:i.name,actorType:i.type,hasOwner:!!r}]);return}if(!r.active){a.log("RollInterceptor._handlePreRoll",["Player is offline, allowing GM roll",{rollType:s,actorName:i.name,ownerName:r.name}]);return}return a.log("RollInterceptor._handlePreRoll",["Intercepting GM roll for player character",{rollType:s,actorId:i.id,actorName:i.name,ownerId:r.id,ownerName:r.name}]),this._sendRollRequest(i,r,s,e),a.log("RollInterceptor._handlePreRoll",["PREVENTING ROLL - returning false"]),!1}static async _showConfigurationDialog(s,e,t,l,i,o){try{a.log("RollInterceptor._showConfigurationDialog",["Showing dialog",{rollType:t,dialog:i.cls.name}]);const r={...l,_rollMethod:async g=>(a.log("RollInterceptor._showConfigurationDialog",["Dialog submitted with config",g]),this._sendRollRequest(s,e,t,g),new Roll("1d20").evaluate({async:!1})),configured:!1},c=i.cls,d=await new c(r,i.options).render(!0)}catch(n){a.log("RollInterceptor._showConfigurationDialog",["Error showing configuration dialog",n]),this._sendRollRequest(s,e,t,l)}}static _getActorOwner(s){const e=s.ownership||{};for(const[t,l]of Object.entries(e))if(l>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){const i=game.users.get(t);if(i&&!i.isGM)return i}return null}static _sendRollRequest(s,e,t,l){var d;const i=O(),o=_.get(i.skipDialogs.tag);let n=null,r=null;switch(t){case"ability":case"save":n=l.ability;break;case"skill":n=l.skill;break;case"tool":n=l.tool;break;case"attack":case"damage":if((d=l.subject)!=null&&d.item){n=l.subject.item.id;const g=M.findActivityForRoll(l.subject.item,t);g&&(r=g.id)}break;case"hitDie":n=l.denomination;break}const c={advantage:l.advantage||!1,disadvantage:l.disadvantage||!1,situational:l.situational||0,parts:l.parts||[],rollMode:l.rollMode||game.settings.get("core","rollMode"),elvenAccuracy:l.elvenAccuracy||!1,halflingLucky:l.halflingLucky||!1,reliableTalent:l.reliableTalent||!1,minimum:l.minimum,maximize:l.maximize,critical:l.critical,fumble:l.fumble,targetValue:l.targetValue,fastForward:l.fastForward||!1,chatMessage:l.chatMessage!==!1,flavor:l.flavor,title:l.title,dialogOptions:l.dialogOptions,messageData:l.messageData};Object.keys(c).forEach(g=>{c[g]===void 0&&delete c[g]});const u={type:"rollRequest",requestId:foundry.utils.randomID(),actorId:s.id,rollType:t,rollKey:n,activityId:r,config:c,skipDialog:o,targetTokenIds:Array.from(game.user.targets).map(g=>g.id),preserveTargets:_.get(i.useGMTargetTokens.tag)};E.execForUser("handleRollRequest",e.id,u),ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent",{player:e.name,actor:s.name}))}}L(V,"registeredHooks",new Set);const h=class h{static init(){E.initialize(h.registerSocketCalls),Hooks.once(z.INIT,()=>{O(),a.log("Initiating module...",[],!0),_.registerSettings(),document.body.classList.add("crlngn-rolls"),h.setDiceConfig(),Hooks.on(z.RENDER_SIDEBAR_TAB,h.addChatControl)}),Hooks.once(z.READY,()=>{var t,l;a.log("Core Ready!!",[ui==null?void 0:ui.sidebar,(t=ui==null?void 0:ui.sidebar)==null?void 0:t._collapsed],!0);const s=O();var e=_.get(s.debugMode.tag);e&&(CONFIG.debug.hooks=!0),V.initialize(),Hooks.on("dnd5e.buildRollConfig",(i,o,n,r)=>{var c,u,d;a.log("Hook: dnd5e.buildRollConfig",["BuildRollConfig hook fired",{app:(c=i==null?void 0:i.constructor)==null?void 0:c.name,config:o,formData:n,index:r,rollType:o==null?void 0:o.rollType,rollTypeConstructor:(d=(u=o==null?void 0:o.rollType)==null?void 0:u.constructor)==null?void 0:d.name,rolls:o==null?void 0:o.rolls}])}),Hooks.on("dnd5e.postBuildRollConfig",(i,o,n,r)=>{var c,u,d,g;a.log("Hook: dnd5e.postBuildRollConfig",["PostBuildRollConfig hook fired",{processConfig:i,rollConfig:o,index:n,app:(u=(c=r==null?void 0:r.app)==null?void 0:c.constructor)==null?void 0:u.name,formData:r==null?void 0:r.formData,rollType:i==null?void 0:i.rollType,rollTypeConstructor:(g=(d=i==null?void 0:i.rollType)==null?void 0:d.constructor)==null?void 0:g.name,rolls:i==null?void 0:i.rolls}])}),game.user.isGM?(Hooks.on(z.USER_CONNECTED,h.onUserConnected),game.users.forEach(i=>{h.onUserConnected(i)}),h.checkSideBar(!((l=ui==null?void 0:ui.sidebar)!=null&&l._collapsed))):h.getDiceConfig()})}static onUserConnected(s){s.active&&s.id!==game.user.id&&(a.log("onUserConnected",[s]),E.execForUser(h.SOCKET_CALLS.getDiceConfig,s.id))}static setDiceConfig(){if(!game.user)return;const s=game.settings.storage.get("client");return h.diceConfig=s["core.diceConfiguration"]||"",a.log("getDiceConfig",[h.diceConfig]),h.diceConfig}static getDiceConfig(){if(game.user&&(h.setDiceConfig(),game.user.isGM)){E.execForGMs(h.SOCKET_CALLS.receiveDiceConfig,game.user.id,h.diceConfig);return}}static receiveDiceConfig(s,e){var t;((t=game.user)!=null&&t.isGM||s===game.user.id)&&(h.playerDiceConfigs||(h.playerDiceConfigs={}),h.playerDiceConfigs[s]=e?JSON.parse(e):{},a.log(`Received dice configuration from user ${s}`,[h.playerDiceConfigs]))}static async handleRollRequest(s){var t,l,i,o,n,r,c;if(game.user.isGM)return;a.log("handleRollRequest",["Received roll request",s]),a.log("handleRollRequest",["Config details",{advantage:(t=s.config)==null?void 0:t.advantage,disadvantage:(l=s.config)==null?void 0:l.disadvantage,ability:(i=s.config)==null?void 0:i.ability,target:(o=s.config)==null?void 0:o.target,rollMode:(n=s.config)==null?void 0:n.rollMode,situational:(r=s.config)==null?void 0:r.situational}]);const e=game.actors.get(s.actorId);if(!e){a.log("handleRollRequest",["Actor not found",s.actorId]);return}if(!e.isOwner){a.log("handleRollRequest",["User does not own actor",s.actorId]);return}s.preserveTargets&&((c=s.targetTokenIds)==null?void 0:c.length)>0&&game.user.targets.size===0&&s.targetTokenIds.map(d=>canvas.tokens.get(d)).filter(d=>d).forEach(d=>d.setTarget(!0,{user:game.user})),h.pendingNotifications.push({actor:e.name,rollType:s.rollType,rollKey:s.rollKey,gm:s.config.requestedBy||"GM"}),h.notificationTimer&&clearTimeout(h.notificationTimer),h.notificationTimer=setTimeout(()=>{h._showBatchedNotifications()},h.NOTIFICATION_BATCH_DELAY),a.log("handleRequestedRoll",["sending roll request"]),h._executeRequestedRoll(e,s)}static _showBatchedNotifications(){if(h.pendingNotifications.length===0)return;const s={};for(const t of h.pendingNotifications){const l=`${t.rollType}_${t.rollKey||""}`;s[l]||(s[l]={rollType:t.rollType,rollKey:t.rollKey,actors:[],gm:t.gm}),s[l].actors.push(t.actor)}const e=Object.values(s);if(e.length===1&&e[0].actors.length===1){const t=e[0];ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived",{gm:t.gm,rollType:h._getRollTypeDisplay(t.rollType,t.rollKey)}))}else{const t=[];for(const l of e){const i=h._getRollTypeDisplay(l.rollType,l.rollKey),o=l.actors.join(", ");t.push(`${i} (${o})`)}ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestsReceivedMultiple",{gm:e[0].gm,requests:t.join("; ")}))}h.pendingNotifications=[],h.notificationTimer=null}static _getRollTypeDisplay(s,e){var l,i,o,n,r;let t=game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${s}`)||s;if(e)switch(s){case"skill":t+=` (${((l=CONFIG.DND5E.skills[e])==null?void 0:l.label)||e})`;break;case"save":t+=` (${((i=CONFIG.DND5E.abilities[e])==null?void 0:i.label)||e})`;break;case"ability":t+=` (${((o=CONFIG.DND5E.abilities[e])==null?void 0:o.label)||e})`;break;case"tool":const c=(r=(n=CONFIG.DND5E.enrichmentLookup)==null?void 0:n.tools)==null?void 0:r[e];if(c!=null&&c.id){const u=dnd5e.documents.Trait.getBaseItem(c.id,{indexOnly:!0});t+=` (${(u==null?void 0:u.name)||e})`}else t+=` (${e})`;break;case"custom":t=`${t}: ${e}`;break}return t}static async _executeRequestedRoll(s,e){try{const t={advantage:e.config.advantage||!1,disadvantage:e.config.disadvantage||!1,isRollRequest:!0,target:e.config.target,event:{_fromGM:!0}};e.config.situational&&(t.bonus=e.config.situational);const l={configure:!e.skipDialog,options:{defaultButton:e.config.advantage?"advantage":e.config.disadvantage?"disadvantage":"normal"}},i={rollMode:e.config.rollMode||game.settings.get("core","rollMode"),create:e.config.chatMessage!==!1};switch(a.log("_executeRequestedRoll",[s,e,t,l,i]),e.rollType){case"ability":await s.rollAbilityCheck(e.rollKey,{...t,event:{_fromGM:!0}},l,i);break;case"save":await s.rollSavingThrow(e.rollKey,{...t,event:{_fromGM:!0}},l,i);break;case"skill":await s.rollSkill({skill:e.rollKey,ability:e.config.ability,...t},l,i);break;case"tool":await s.rollToolCheck({tool:e.rollKey,ability:e.config.ability,...t},l,i);break;case"concentration":await s.rollConcentration(t,l,i);break;case"attack":e.rollKey&&await M.executeActivityRoll(s,"attack",e.rollKey,e.activityId,{...t,dialog:l,message:i});break;case"damage":e.rollKey&&await M.executeActivityRoll(s,"damage",e.rollKey,e.activityId,{...t,dialog:l,message:i});break;case"itemSave":e.rollKey&&await M.executeActivityRoll(s,"itemSave",e.rollKey,e.activityId,{...t,dialog:l,message:i});break;case"initiative":if(!game.combat){ui.notifications.warn(game.i18n.localize("COMBAT.NoneActive"));break}await s.rollInitiativeDialog(t,l,i);break;case"deathsave":await s.rollDeathSave(t,l,i);break;case"hitDie":t.denomination=e.rollKey,await s.rollHitDie(t,l,i);break;case"custom":await h._handleCustomRoll(s,e);break}}catch(t){a.log("_executeRequestedRoll",["Error executing roll",t]),ui.notifications.error(game.i18n.localize("CRLNGN_ROLL_REQUESTS.notifications.rollError"))}}static async _handleCustomRoll(s,e){const t=e.rollKey,l=await renderTemplate(`modules/${N}/templates/custom-roll-dialog.hbs`,{formula:t,readonly:!0});new Dialog({title:game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.customRollTitle"),content:l,buttons:{roll:{icon:'<i class="fas fa-dice-d20"></i>',label:game.i18n.localize("Roll"),callback:async()=>{try{const o=new Roll(t,s.getRollData());await o.evaluate({async:!0}),await o.toMessage({speaker:ChatMessage.getSpeaker({actor:s}),flavor:game.i18n.localize("CRLNGN_ROLLS.rollTypes.custom")})}catch(o){ui.notifications.error(game.i18n.format("CRLNGN_ROLLS.ui.notifications.invalidFormula",{formula:t})),a.log("_handleCustomRoll",["Invalid formula",t,o])}}},cancel:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("Cancel")}},default:"roll"},{classes:["crlngn-rolls-dialog","crlngn-custom-roll-dialog"]}).render(!0)}static registerSocketCalls(){E.registerCall(h.SOCKET_CALLS.getDiceConfig,h.getDiceConfig),E.registerCall(h.SOCKET_CALLS.receiveDiceConfig,h.receiveDiceConfig),E.registerCall(h.SOCKET_CALLS.handleRollRequest,h.handleRollRequest)}static addChatControl(s,e,t){if(!game.user.isGM||s.id!=="chat")return;a.log("Adding chat control for chat tab");const i=(e[0]||e).querySelector("#chat-controls");if(!i){a.log("Could not find #chat-controls",[]);return}if(i.querySelector(".roll-requests-icon"))return;const o=O(),n=_.get(o.rollRequestsEnabled.tag),r=document.createElement("a");r.id="crlngn-requests-icon",r.setAttribute("data-tooltip-direction","RIGHT"),r.className=`chat-control-icon roll-requests-icon${n?" active":""}`,r.title=game.i18n.localize("CRLNGN_ROLLS.ui.menus.rollRequestsTitle"),r.innerHTML=`<i class="fas fa-bolt${n?"":"-slash"}"></i>`;const c=i.querySelector(".chat-control-icon");c?c.parentNode.insertBefore(r,c):i.appendChild(r),r.addEventListener("click",h.toggleRollRequestsMenu),a.log("Added roll requests icon to chat controls",[])}static toggleRollRequestsMenu(){h.rollRequestsMenu?h.rollRequestsMenu.rendered?(h.rollRequestsMenu.close(),a.log("Closed roll requests menu",[])):(h.rollRequestsMenu._initializeFromSelectedTokens(),h.rollRequestsMenu.render(!0),a.log("Opened roll requests menu",[])):(h.rollRequestsMenu=new F,h.rollRequestsMenu.render(!0))}static updateRollRequestsIcon(s){const e=document.querySelector("#crlngn-requests-icon i");e&&(e.className=`fas fa-bolt${s?"":"-slash"}`)}};L(h,"diceConfig",{}),L(h,"playerDiceConfigs",{}),L(h,"rollRequestsMenu",null),L(h,"SOCKET_CALLS",{receiveDiceConfig:"receiveDiceConfig",getDiceConfig:"getDiceConfig",handleRollRequest:"handleRollRequest"}),L(h,"pendingNotifications",[]),L(h,"notificationTimer",null),L(h,"NOTIFICATION_BATCH_DELAY",500),L(h,"checkSideBar",s=>{const e=document.querySelector("body");s?e.classList.add("sidebar-expanded"):e.classList.remove("sidebar-expanded")});let x=h;x.init();
//# sourceMappingURL=crlngn-roll-requests.js.map
