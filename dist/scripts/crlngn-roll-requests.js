var ee=Object.defineProperty;var te=(G,i,e)=>i in G?ee(G,i,{enumerable:!0,configurable:!0,writable:!0,value:e}):G[i]=e;var L=(G,i,e)=>te(G,typeof i!="symbol"?i+"":i,e);const F={INIT:"init",READY:"ready",RENDER_SIDEBAR_TAB:"renderSidebarTab",USER_CONNECTED:"userConnected",PRE_CREATE_CHAT_MESSAGE:"preCreateChatMessage"},ie={READY:"socketlib.ready"},q={PRE_ROLL_ABILITY_CHECK:"dnd5e.preRollAbilityCheckV2",PRE_ROLL_SAVING_THROW:"dnd5e.preRollSavingThrowV2",PRE_ROLL_DEATH_SAVE_V2:"dnd5e.preRollDeathSaveV2",PRE_ROLL_SKILL_V2:"dnd5e.preRollSkillV2",PRE_ROLL_TOOL_V2:"dnd5e.preRollToolV2",PRE_ROLL_HIT_DIE_V2:"dnd5e.preRollHitDieV2",PRE_ROLL_INITIATIVE:"dnd5e.preRollInitiative",PRE_ROLL_ATTACK_V2:"dnd5e.preRollAttackV2",PRE_ROLL_DAMAGE_V2:"dnd5e.preRollDamageV2"},M="crlngn-roll-requests",W=["%cFlash Rolls 5e","color:rgb(47, 151, 161); font-weight: bold;","|"],le={ABILITY_CHECK:{name:"abilityCheck",label:"Ability Check",subList:"abilities",actorPath:"system.abilities"},SAVING_THROW:{name:"savingThrow",label:"Saving Throw",subList:"abilities",actorPath:"system.abilities"},SKILL:{name:"skill",label:"Skill Check",subList:"skills",actorPath:"system.skills"},TOOL:{name:"tool",label:"Tool Check",subList:"tools",actorPath:"system.tools"},CONCENTRATION:{name:"concentration",label:"Concentration Check",subList:null,actorPath:""},INITIATIVE:{name:"initiativeDialog",label:"Initiative Roll",subList:null,actorPath:""},DEATH_SAVE:{name:"deathSave",label:"Death Save",subList:null,actorPath:""},CUSTOM:{name:"custom",label:"Custom Roll",subList:null,actorPath:""}},z={ID:M,ROLL_REQUEST_OPTIONS:le},$=class ${static log(i="",e=[],t=!1){try{const s=game.settings.get(M,"debug-mode")||$.debugOn;if(!(t||s))return;console.log(...W,i,...e)}catch{(t||$.debugOn)&&console.log(...W,i,...e)}}static warn(i="",e=[]){console.warn(...W,i,...e)}static error(i,e={ui:!1,console:!0,permanent:!1}){var t;e.ui&&((t=ui.notifications)==null||t.error(i,{localize:!0,permanent:e.permanent})),e.console&&console.error(...W,i)}};L($,"debugOn",!1);let n=$;const B={checkbox:"checkbox"},x={client:"client",world:"world"},w=()=>({debugMode:{tag:"debug-mode",label:game.i18n.localize("CRLNGN_ROLLS.settings.debugMode.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.debugMode.hint"),propType:Boolean,inputType:B.checkbox,default:!0,scope:x.client,config:!0},rollRequestsEnabled:{tag:"roll-requests-enabled",label:game.i18n.localize("CRLNGN_ROLLS.settings.rollRequestsEnabled.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.rollRequestsEnabled.hint"),propType:Boolean,inputType:B.checkbox,default:!0,scope:x.world,config:!0},skipDialogs:{tag:"skip-dialogs",label:game.i18n.localize("CRLNGN_ROLLS.settings.skipDialogs.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.skipDialogs.hint"),propType:Boolean,inputType:B.checkbox,default:!1,scope:x.world,config:!0},useGMTargetTokens:{tag:"use-gm-target-tokens",label:game.i18n.localize("CRLNGN_ROLLS.settings.useGMTargetTokens.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.useGMTargetTokens.hint"),propType:Boolean,inputType:B.checkbox,default:!1,scope:x.world,config:!0},rollInterceptionEnabled:{tag:"roll-interception-enabled",label:game.i18n.localize("CRLNGN_ROLLS.settings.rollInterceptionEnabled.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint"),propType:Boolean,inputType:B.checkbox,default:!0,scope:x.world,config:!0},showOfflineNotifications:{tag:"show-offline-notifications",label:game.i18n.localize("CRLNGN_ROLLS.settings.showOfflineNotifications.label"),hint:game.i18n.localize("CRLNGN_ROLLS.settings.showOfflineNotifications.hint"),propType:Boolean,inputType:B.checkbox,default:!0,scope:x.world,config:!0}});class N{static registerSettings(){const i=w();Object.entries(i).forEach(async t=>{const s=t[1];n.log("Registering... ",[t]);const l={name:s.label,hint:s.hint,default:s.default,type:s.propType,scope:s.scope,config:s.config,requiresReload:s.requiresReload||!1,onChange:o=>N.apply(s.tag,o)};s.choices&&(l.choices=s.choices),await game.settings.register(M,s.tag,l),(N.get(s.tag)===void 0||N.get(s.tag)===null)&&N.set(s.tag,s.default),n.log("registerSettings",[s.tag,N.get(s.tag)])})}static get(i,e=M){if(!i)return null;let t=!1;if(e===M)t=game.settings.get(e,i);else{let l=game.settings.storage.get("client")[`${e}.${i}`];l===void 0&&(l=game.settings.storage.get("world").getSetting(`${e}.${i}`),t=l==null?void 0:l.value),n.log("GET Setting",[l,t])}return t}static set(i,e,t=M){if(!i)return!1;let s=game.settings.storage.get("client")[`${t}.${i}`];s||(s=game.settings.storage.get("world").getSetting(`${t}.${i}`)),n.log("Setting",[i,s]);try{game.settings.set(t,i,e)}catch{n.log("Unable to change setting",[i,s])}return!0}static apply(i,e){const t=w();switch(i){case t.rollRequestsEnabled.tag:N.applyRollRequestsEnabled(e);break}}static applyRollRequestsEnabled(i){const e=document.querySelector("#chat-controls .chat-control-icon.roll-requests-icon");e&&(i?e.classList.add("active"):e.classList.remove("active"))}}const S=class S{static serializeForTransport(i,e=!1){return i==null||(e&&i.rolls&&Array.isArray(i.rolls)&&(i.rolls=i.rolls.map(t=>t instanceof Roll?t.toJSON():t)),n.log("ROLLS DATA",[i,i.subject])),i}static deserializeFromTransport(i,e=!1){let t={...i};if(!i)return t;if(e&&i.rolls&&i.rolls.length>0){const s=t.rolls.map(l=>{let o=l;return typeof l=="string"?o=Roll.fromJSON(l):o=Roll.fromJSON(JSON.stringify(l)),o});return t.rolls=[...s],t}return t}};L(S,"socket"),L(S,"_activeExecutions",new Map),L(S,"initialize",i=>{Hooks.once(ie.READY,()=>{if(n.log("Attempting to register module...",[]),typeof socketlib>"u"){n.error("SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled."),ui.notifications.error(game.i18n.localize("CRLNGN_ROLLS.notifications.socketlibMissing"),{permanent:!0});return}try{S.socket=socketlib.registerModule(M),i&&i(),n.log("SocketUtil | Module registered",[S.socket])}catch(e){n.log("Problem registering module",[e])}})}),L(S,"registerCall",(i,e)=>{S.socket?(S.socket.register(i,e),n.log("SocketUtil - Registered callback",[S.socket,i])):n.log("SocketUtil - Failed to register callback (socket not initialized)",[S.socket,i])}),L(S,"sendMessage",(i,e)=>{n.log("SocketUtil - sendMessage",[i]),e&&e()}),L(S,"execForGMs",async(i,...e)=>{if(!S.socket){n.log("SocketUtil - Socket not initialized. Cannot execute as GM.",[]);return}return await S.socket.executeForAllGMs(i,...e)}),L(S,"execForAll",async(i,...e)=>{if(!S.socket){n.log("SocketUtil - Socket not initialized. Cannot execute for all clients.",[]);return}return await S.socket.executeForEveryone(i,...e)}),L(S,"execForUser",async(i,e,...t)=>{if(!S.socket){n.log("SocketUtil - Socket not initialized. Cannot execute as user.",[]);return}if(e===game.user.id)return n.log("SocketUtil - Preventing recursive call",[e]),null;const s=`${i}-${e}`;if(S._activeExecutions.has(s))return n.log("SocketUtil - Preventing recursive call",[s]),null;S._activeExecutions.set(s,!0);try{const l=await S.socket.executeAsUser(i,e,...t);return n.log("SocketUtil - Executed as user.",[l]),l}catch(l){return n.log("SocketUtil - Error executing as user",[l]),null}finally{S._activeExecutions.delete(s)}});let I=S;class U{static findActivityForRoll(i,e){var s;if(!((s=i==null?void 0:i.system)!=null&&s.activities))return null;const t=i.system.activities;switch(e){case"attack":const l=t.getByType("attack");return(l==null?void 0:l[0])||null;case"damage":const o=t.getByType("attack");if((o==null?void 0:o.length)>0)return o[0];const a=t.getByType("damage");if((a==null?void 0:a.length)>0)return a[0];const r=t.getByType("save");return(r==null?void 0:r.length)>0?r[0]:null;case"itemSave":const c=t.getByType("save");return(c==null?void 0:c[0])||null;default:return null}}static getActivitiesByType(i,e){var t;return(t=i==null?void 0:i.system)!=null&&t.activities?i.system.activities.getByType(e):[]}static hasActivityForRoll(i,e){return!!this.findActivityForRoll(i,e)}static async executeActivityRoll(i,e,t,s,l){var r,c,u,d;const o=i.items.get(t);if(!o)throw new Error(`Item ${t} not found on actor ${i.name}`);let a=null;if(s&&(a=(r=o.system.activities)==null?void 0:r.get(s),a||n.log("ActivityUtil.executeActivityRoll",["Activity not found by ID, falling back to search",{activityId:s,itemName:o.name,availableActivities:(c=o.system.activities)==null?void 0:c.map(h=>({id:h.id,type:h.type}))}])),a||(a=this.findActivityForRoll(o,e)),a)switch(n.log("ActivityUtil.executeActivityRoll",["Executing activity roll",{rollType:e,activityId:s,itemName:o.name,activityType:a.type}]),e){case"attack":n.log("ActivityUtil.executeActivityRoll",["Executing attack roll",{hasTargets:game.user.targets.size>0,targetCount:game.user.targets.size,skipDialog:l.fastForward,isRollRequest:l.isRollRequest,isGM:game.user.isGM}]);const h={configure:!0};if(MidiQOL){await U.syntheticItemRoll(o,{...l}),n.log("ActivityUtil.executeActivityRoll",["MidiQOL",MidiQOL,s,(u=MidiQOL==null?void 0:MidiQOL.Workflow)==null?void 0:u.getWorkflow(a.uuid)]);return}else return await a.use(usageConfig,h);case"damage":if(MidiQOL){const f=(d=MidiQOL==null?void 0:MidiQOL.Workflow)==null?void 0:d.getWorkflow(a.uuid),g=await f.activity.rollDamage({...l,workflow:f});n.log("ActivityUtil.executeActivityRoll",["MidiQOL / Damage",g]);return}else return await a.rollDamage(l);case"itemSave":return await o.use({activity:a.id},{skipDialog:l.fastForward});default:throw new Error(`Unknown roll type: ${e}`)}else{switch(n.log("ActivityUtil.executeActivityRoll",["No activity found, using legacy methods",{rollType:e,itemName:o.name,hasLegacyMethod:!!(o.rollAttack||o.rollDamage)}]),e){case"attack":if(o.rollAttack)return await o.rollAttack(l);break;case"damage":if(o.rollDamage)return await o.rollDamage(l);break;case"itemSave":return await o.use({},{skipDialog:l.fastForward})}throw new Error(`No suitable method found for ${e} on item ${o.name}`)}}static getActivityDisplayInfo(i){return i?{name:i.name||i.constructor.metadata.label,type:i.type,icon:i.constructor.metadata.icon,canAttack:i.type==="attack",canDamage:["attack","damage","save"].includes(i.type),canSave:i.type==="save"}:null}static getDamageFormula(i){var t,s;if(!((s=(t=i==null?void 0:i.damage)==null?void 0:t.parts)!=null&&s.length))return null;const e=i.damage.parts.map(l=>l.formula).filter(l=>l);return e.length>0?e.join(" + "):null}static async syntheticItemRoll(i,e={}){let t={consumeUsage:!1,consumeSpellSlot:!1},s={configureDialog:!0,workflowOptions:{autoRollAttack:!1,autoFastAttack:!1,autoRollDamage:"none",autoFastDamage:!1}};return e={...t,...e},n.log("ActivityUtil.syntheticItemRoll",["Executing synthetic item roll",i,e]),await MidiQOL.completeItemUse(i,e,s)}static async replaceDamage(i,e,{ignoreCrit:t=!1,damageType:s}={}){e=String(e),i.isCritical&&!t&&(e=await rollUtils.getCriticalFormula(e,i.item.getRollData()));let l=await new CONFIG.Dice.DamageRoll(e).evaluate();return await i.setDamageRolls([l]),n.log("ActivityUtil.replaceDamage",["Replaced damage",e,l,i.activity]),l}}class j extends dnd5e.applications.dice.D20RollConfigurationDialog{constructor(i={},e={},t={}){n.log("GMRollConfigDialog.constructor",["Creating dialog",{config:i,message:e,options:t}]),t.rollType=t.rollType||CONFIG.Dice.D20Roll,super(i,e,t),this.actors=t.actors||[],this.sendRequest=t.sendRequest!==!1,this.showDC=t.showDC||!1,this.dcValue=t.dcValue||null}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["dnd5e2","roll-configuration","gm-roll-config"]})}_prepareConfigurationData(i,e,t,s){const l=super._prepareConfigurationData(i,e,t,s);return l.showDC=this.showDC,l.dcValue=this.dcValue,l.sendRequest=this.sendRequest,l.actorCount=this.actors.length,l}async _preparePartContext(i,e,t){return e=await super._preparePartContext(i,e,t),i==="configuration"&&(e.showDC=this.showDC,e.dcValue=this.dcValue,e.sendRequest=this.sendRequest,e.actorCount=this.actors.length),e}async _onRender(i,e){if(super._onRender(i,e),n.log("GMRollConfigDialog._onRender",["Dialog rendered",{config:this.config,actors:this.actors,showDC:this.showDC,sendRequest:this.sendRequest,element:this.element}]),this.element.querySelector(".gm-roll-config-fields")){n.log("GMRollConfigDialog._onRender",["Fields already injected, skipping"]);return}let t=this.element.querySelector(".rolls .formulas");if(t&&(this.showDC||this.actors.length>0)){const s={showDC:this.showDC,dcValue:this.dcValue,showSendRequest:this.actors.length>0,sendRequest:this.sendRequest},l=await renderTemplate(`modules/${M}/templates/gm-roll-config-fields.hbs`,s),o=document.createElement("div");o.className="gm-roll-config-fields",o.innerHTML=l,t.parentNode.insertBefore(o,t)}this._attachButtonListeners()}_attachButtonListeners(){this.element.querySelectorAll('[data-action="advantage"], [data-action="normal"], [data-action="disadvantage"]').forEach(e=>{e.addEventListener("click",t=>{const s=t.currentTarget.dataset.action;n.log("GMRollConfigDialog button clicked",[s,{currentAdvantage:this.config.advantage,currentDisadvantage:this.config.disadvantage,config:this.config}])})})}_onChangeForm(i,e){var l,o,a,r,c,u,d;super._onChangeForm(i,e);const t=this.element.querySelector('input[name="crlngn-send-request"]');t&&(this.sendRequest=t.checked);const s=this.element.querySelector('input[name="dc"]');s&&s.value&&(this.dcValue=parseInt(s.value)||null),n.log("GMRollConfigDialog._onChangeForm",["Form changed",{targetName:(l=e.target)==null?void 0:l.name,targetValue:(o=e.target)==null?void 0:o.value,sendRequest:this.sendRequest,dcValue:this.dcValue,config:this.config,message:this.message,rolls:this.rolls,firstRoll:(a=this.rolls)==null?void 0:a[0],firstRollData:(c=(r=this.rolls)==null?void 0:r[0])==null?void 0:c.data,firstRollOptions:(d=(u=this.rolls)==null?void 0:u[0])==null?void 0:d.options}])}_buildConfig(i,e,t){const s=e==null?void 0:e.get("ability"),l=e==null?void 0:e.get("dc");n.log("GMRollConfigDialog._buildConfig",["Building config",{configBefore:i,formData:e?Object.fromEntries(e):null,index:t,situationalValue:e==null?void 0:e.get(`roll.${t}.situational`),abilityFromForm:s}]),s&&(i.ability=s,this.config.ability=s);const o=super._buildConfig(i,e,t);if(l){const a=parseInt(l);isNaN(a)||(o.options=o.options||{},o.options.target=a)}else this.dcValue!==void 0&&this.dcValue!==null&&(o.options=o.options||{},o.options.target=this.dcValue);return n.log("GMRollConfigDialog._buildConfig",["Config built",{configAfter:o,parts:o.parts,data:o.data,options:o.options,finalAbility:i.ability}]),o}async _processSubmitData(i,e,t){if(n.log("GMRollConfigDialog._processSubmitData",["Processing form data",{formData:Object.fromEntries(t),configBefore:this.config}]),await super._processSubmitData(i,e,t),t.has("dc")&&t.get("dc")!==""){const s=parseInt(t.get("dc"));if(!isNaN(s)&&(this.dcValue=s,this.config.rolls&&this.config.rolls.length>0))for(const l of this.config.rolls)l.options.target=s}this.sendRequest=t.get("crlngn-send-request")!=="false"}_finalizeRolls(i){n.log("GMRollConfigDialog._finalizeRolls",["Finalizing rolls",{action:i,rolls:this.rolls,config:this.config}]);const e=super._finalizeRolls(i);if(this.dcValue!==void 0&&this.dcValue!==null)for(const t of e)t.options.target=this.dcValue;return this.config.sendRequest=this.sendRequest,e}static async getConfiguration(i,e,t,s={}){var y,b,p,_,v,A,P,V;n.log("GMRollConfigDialog.getConfiguration",["Starting configuration",{actors:i.map(C=>C.name),rollType:e,rollKey:t,options:s}]);const l=["skill","save","savingThrow","ability","abilityCheck","concentration"].includes(e),o=i[0];if(!o)return null;let a=CONFIG.Dice.D20Roll;["damage","healing"].includes(e)?a=CONFIG.Dice.DamageRoll||CONFIG.Dice.BasicRoll:["formula","custom"].includes(e)&&(a=CONFIG.Dice.BasicRoll),a||(n.log("GMRollConfigDialog.getConfiguration",["Roll class not found, using D20Roll",{rollType:e}]),a=CONFIG.Dice.D20Roll),n.log("GMRollConfigDialog.getConfiguration",["Determined roll class",{rollType:e,rollClass:a,rollClassName:a==null?void 0:a.name,availableRollClasses:Object.keys(CONFIG.Dice)}]);const r={data:o.getRollData(),subject:o,rolls:[{parts:[],data:o.getRollData(),options:{}}]};switch(e){case"skill":r.skill=t;break;case"save":case"savingThrow":r.ability=t;break;case"ability":case"abilityCheck":r.ability=t;break}const c={create:!1,data:{speaker:ChatMessage.getSpeaker({actor:o})}},u={options:{actors:i,sendRequest:i.some(C=>this._isPlayerOwned(C)),showDC:l,rollKey:t,rollType:a,window:{title:j._getRollTitle(e,t,o),subtitle:i.map(C=>C.name).join(", ")},...s}};n.log("GMRollConfigDialog.getConfiguration",["Creating dialog with config",{rollConfig:r,messageConfig:c,dialogConfig:u,rollType:e,rollKey:t,actors:i.map(C=>C.name)}]);const d=new this(r,c,u.options),h=await new Promise(C=>{d.addEventListener("close",()=>{C({rolls:d.rolls,config:d.config,message:d.message,sendRequest:d.sendRequest})},{once:!0}),d.render({force:!0})});if(n.log("GMRollConfigDialog.getConfiguration",["Dialog result",h]),!h.rolls||h.rolls.length===0)return null;const f=h.rolls[0];let g=!1,E=!1;((y=f==null?void 0:f.options)==null?void 0:y.advantageMode)!==void 0&&(g=f.options.advantageMode===CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE,E=f.options.advantageMode===CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE);const R={chatMessage:!0,isRollRequest:!0,skipDialog:s.skipDialogs||!1,sendRequest:h.sendRequest};g&&(R.advantage=!0),E&&(R.disadvantage=!0);const T=game.settings.get("core","rollMode");h.message.rollMode&&h.message.rollMode!==T&&(R.rollMode=h.message.rollMode);const k=((b=f==null?void 0:f.options)==null?void 0:b.situational)||((p=f==null?void 0:f.data)==null?void 0:p.situational)||"";if(k&&(R.situational=k,R.parts=[k]),(_=f==null?void 0:f.options)!=null&&_.target&&(R.target=f.options.target),h.config.ability&&["skill","tool"].includes(e)){const C=((A=(v=o.system.skills)==null?void 0:v[t])==null?void 0:A.ability)||((V=(P=CONFIG.DND5E.skills)==null?void 0:P[t])==null?void 0:V.ability);h.config.ability!==C&&(R.ability=h.config.ability)}return R.rollTitle=u.options.window.title,n.log("GMRollConfigDialog.getConfiguration",["Final configuration",{rollType:e,rollKey:t,finalConfig:R}]),R}static _isPlayerOwned(i){return Object.entries(i.ownership).some(([e,t])=>{const s=game.users.get(e);return s&&!s.isGM&&t>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER})}static _getRollTitle(i,e,t){var l,o,a,r,c,u,d,h;let s="";switch(i){case"skill":const f=((l=CONFIG.DND5E.skills[e])==null?void 0:l.label)||e,g=(o=t==null?void 0:t.system.skills)==null?void 0:o[e],E=(g==null?void 0:g.ability)||((a=CONFIG.DND5E.skills[e])==null?void 0:a.ability)||"int",R=((r=CONFIG.DND5E.abilities[E])==null?void 0:r.label)||E;s=game.i18n.format("DND5E.SkillPromptTitle",{skill:f,ability:R});break;case"save":case"savingThrow":const T=((c=CONFIG.DND5E.abilities[e])==null?void 0:c.label)||e;s=game.i18n.format("DND5E.SavePromptTitle",{ability:T});break;case"ability":case"abilityCheck":const k=((u=CONFIG.DND5E.abilities[e])==null?void 0:u.label)||e;s=game.i18n.format("DND5E.AbilityPromptTitle",{ability:k});break;case"concentration":s=game.i18n.localize("DND5E.Concentration");break;case"tool":const y=(h=(d=CONFIG.DND5E.enrichmentLookup)==null?void 0:d.tools)==null?void 0:h[e];let b=e;if(y!=null&&y.id){const p=dnd5e.documents.Trait.getBaseItem(y.id,{indexOnly:!0});b=(p==null?void 0:p.name)||e}s=game.i18n.format("DND5E.ToolPromptTitle",{tool:b});break;case"deathsave":case"deathSave":s=game.i18n.localize("DND5E.DeathSave");break;case"initiative":case"initiativeDialog":s=game.i18n.localize("DND5E.Initiative");break;default:s=game.i18n.localize("DND5E.Roll")}return s}}class se extends dnd5e.applications.dice.SkillToolRollConfigurationDialog{constructor(i={},e={},t={}){const s=foundry.utils.mergeObject(i,{chooseAbility:!0});t.rollType=t.rollType||CONFIG.Dice.D20Roll,super(s,e,t),this.actors=t.actors||[],this.sendRequest=t.sendRequest!==!1,this.showDC=t.showDC||!1,this.dcValue=t.dcValue||null}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["dnd5e2","roll-configuration","gm-roll-config"]})}_prepareConfigurationData(i,e,t,s){const l=super._prepareConfigurationData(i,e,t,s);return l.showDC=this.showDC,l.dcValue=this.dcValue,l.sendRequest=this.sendRequest,l.actorCount=this.actors.length,l}async _preparePartContext(i,e,t){return e=await super._preparePartContext(i,e,t),i==="configuration"&&(e.showDC=this.showDC,e.dcValue=this.dcValue,e.sendRequest=this.sendRequest,e.actorCount=this.actors.length),e}async _onRender(i,e){if(super._onRender(i,e),n.log("GMRollConfigDialog._onRender",["Dialog rendered",{config:this.config,actors:this.actors,showDC:this.showDC,sendRequest:this.sendRequest,element:this.element}]),this.element.querySelector(".gm-roll-config-fields")){n.log("GMRollConfigDialog._onRender",["Fields already injected, skipping"]);return}let t=this.element.querySelector(".rolls .formulas");if(n.log("GMRollConfigDialog._onRender",["Looking for config section",{configSection:t,showDC:this.showDC,element:this.element,allFieldsets:this.element.querySelectorAll("fieldset").length}]),t&&(this.showDC||this.actors.length>0)){const s={showDC:this.showDC,dcValue:this.dcValue,showSendRequest:this.actors.length>0,sendRequest:this.sendRequest},l=await renderTemplate(`modules/${M}/templates/gm-roll-config-fields.hbs`,s),o=document.createElement("div");o.className="gm-roll-config-fields",o.innerHTML=l,t.parentNode.insertBefore(o,t)}this._attachButtonListeners()}_attachButtonListeners(){this.element.querySelectorAll('[data-action="advantage"], [data-action="normal"], [data-action="disadvantage"]').forEach(e=>{e.addEventListener("click",t=>{const s=t.currentTarget.dataset.action;n.log("GMRollConfigDialog button clicked",[s,{currentAdvantage:this.config.advantage,currentDisadvantage:this.config.disadvantage,config:this.config}])})})}_onChangeForm(i,e){var l,o,a,r,c,u,d,h,f;super._onChangeForm(i,e);const t=this.element.querySelector('input[name="crlngn-send-request"]');t&&(this.sendRequest=t.checked);const s=this.element.querySelector('input[name="dc"]');s&&s.value&&(this.dcValue=parseInt(s.value)||null),((l=e.target)==null?void 0:l.name)==="ability"&&((o=e.target)!=null&&o.value)&&(this.config.ability=e.target.value,n.log("GMSkillToolConfigDialog._onChangeForm",["Ability selection changed",{newAbility:e.target.value,previousAbility:this.config.ability}])),n.log("GMSkillToolConfigDialog._onChangeForm",["Form changed",{targetName:(a=e.target)==null?void 0:a.name,targetValue:(r=e.target)==null?void 0:r.value,sendRequest:this.sendRequest,dcValue:this.dcValue,config:this.config,ability:this.config.ability,message:this.message,rolls:this.rolls,firstRoll:(c=this.rolls)==null?void 0:c[0],firstRollData:(d=(u=this.rolls)==null?void 0:u[0])==null?void 0:d.data,firstRollOptions:(f=(h=this.rolls)==null?void 0:h[0])==null?void 0:f.options}])}_buildConfig(i,e,t){const s=e==null?void 0:e.get("ability"),l=e==null?void 0:e.get("dc");n.log("GMSkillToolConfigDialog._buildConfig",["Building config",{configBefore:i,formData:e?Object.fromEntries(e):null,index:t,situationalValue:e==null?void 0:e.get(`roll.${t}.situational`),abilityFromForm:s,dcFromForm:l,configAbility:i.ability,thisConfigAbility:this.config.ability,thisDcValue:this.dcValue}]),s&&(i.ability=s,this.config.ability=s);const o=super._buildConfig(i,e,t);if(l){const a=parseInt(l);isNaN(a)||(o.options=o.options||{},o.options.target=a,n.log("GMSkillToolConfigDialog._buildConfig",["Applied DC to config",{dcValue:a,resultOptions:o.options}]))}else this.dcValue!==void 0&&this.dcValue!==null&&(o.options=o.options||{},o.options.target=this.dcValue,n.log("GMSkillToolConfigDialog._buildConfig",["Applied stored DC to config",{dcValue:this.dcValue,resultOptions:o.options}]));return n.log("GMSkillToolConfigDialog._buildConfig",["Config built",{configAfter:o,parts:o.parts,data:o.data,options:o.options,finalAbility:i.ability}]),o}async _processSubmitData(i,e,t){if(n.log("GMRollConfigDialog._processSubmitData",["Processing form data",{formData:Object.fromEntries(t),configBefore:this.config}]),await super._processSubmitData(i,e,t),t.has("dc")&&t.get("dc")!==""){const s=parseInt(t.get("dc"));if(!isNaN(s)&&(this.dcValue=s,this.config.rolls&&this.config.rolls.length>0))for(const l of this.config.rolls)l.options.target=s}this.sendRequest=t.get("crlngn-send-request")!=="false"}_finalizeRolls(i){n.log("GMSkillToolConfigDialog._finalizeRolls",["Finalizing rolls",{action:i,rolls:this.rolls,config:this.config}]);const e=super._finalizeRolls(i);if(this.dcValue!==void 0&&this.dcValue!==null)for(const t of e)t.options.target=this.dcValue;return this.config.sendRequest=this.sendRequest,e}static async getConfiguration(i,e,t,s={}){var b,p,_,v,A,P,V,C,O,Q,H,Z,X;const l=["skill","tool"].includes(e),o=i[0];if(!o)return null;const a=CONFIG.Dice.D20Roll;let r=null;if(e==="skill"){const D=o.system.skills[t];r=(D==null?void 0:D.ability)||((b=CONFIG.DND5E.skills[t])==null?void 0:b.ability)||"int"}else if(e==="tool"){const D=(p=o.system.tools)==null?void 0:p[t];r=(D==null?void 0:D.ability)||((A=(v=(_=CONFIG.DND5E.enrichmentLookup)==null?void 0:_.tools)==null?void 0:v[t])==null?void 0:A.ability)||"int"}const c={data:o.getRollData(),subject:o,ability:r,chooseAbility:!0,rolls:[{parts:[],data:o.getRollData(),options:{}}]};e==="skill"?c.skill=t:e==="tool"&&(c.tool=t);const u={create:!1,data:{speaker:ChatMessage.getSpeaker({actor:o})}},d={options:{actors:i,sendRequest:i.some(D=>j._isPlayerOwned(D)),showDC:l,rollKey:t,rollType:a,window:{title:j._getRollTitle(e,t,o),subtitle:i.map(D=>D.name).join(", ")},...s}},h=new this(c,u,d.options),f=await new Promise(D=>{h.addEventListener("close",()=>{D({rolls:h.rolls,config:h.config,message:h.message,sendRequest:h.sendRequest})},{once:!0}),h.render({force:!0})});if(n.log("GMRollConfigDialog.getConfiguration",["Dialog result",f]),!f.rolls||f.rolls.length===0)return null;const g=f.rolls[0];let E=!1,R=!1;((P=g==null?void 0:g.options)==null?void 0:P.advantageMode)!==void 0&&(E=g.options.advantageMode===CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE,R=g.options.advantageMode===CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE);const T={chatMessage:!0,isRollRequest:!0,skipDialog:s.skipDialogs||!1,sendRequest:f.sendRequest};E&&(T.advantage=!0),R&&(T.disadvantage=!0);const k=game.settings.get("core","rollMode");f.message.rollMode&&f.message.rollMode!==k&&(T.rollMode=f.message.rollMode);const y=((V=g==null?void 0:g.options)==null?void 0:V.situational)||((C=g==null?void 0:g.data)==null?void 0:C.situational)||"";return y&&(T.situational=y,T.parts=[y]),(O=g==null?void 0:g.options)!=null&&O.target&&(T.target=g.options.target),f.config.ability&&["skill","tool"].includes(e)&&(T.ability=f.config.ability,n.log("GMSkillToolConfigDialog.getConfiguration",["Including ability in config",{ability:f.config.ability,rollKey:t,defaultAbility:((H=(Q=o.system.skills)==null?void 0:Q[t])==null?void 0:H.ability)||((X=(Z=CONFIG.DND5E.skills)==null?void 0:Z[t])==null?void 0:X.ability)}])),T.rollTitle=d.options.window.title,n.log("GMSkillToolConfigDialog.getConfiguration",["Final configuration",{rollType:e,rollKey:t,finalConfig:T}]),T}}class J extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2){constructor(e={}){super(e);L(this,"_onClickOutside",e=>{if(this.isLocked)return;const t=this.element;t&&(e.target.closest(".roll-requests-menu")||t.contains(e.target)||e.target.closest("#crlngn-requests-icon")||e.target.closest(".dialog, .app, .notification")||this.close())});this.selectedActors=new Set,this.currentTab="pc",this.selectedRequestType=null,this.isLocked=!1,this._initializeFromSelectedTokens()}async _prepareContext(e){var E;const t=await super._prepareContext(e),s=game.actors.contents,l=[],o=[],a=game.scenes.active;for(const R of s){if(R.type!=="character"&&R.type!=="npc")continue;const T={id:R.id,uuid:R.uuid,name:R.name,img:R.img,selected:this.selectedActors.has(R.id),crlngnStats:this._getActorStats(R)};Object.entries(R.ownership).some(([y,b])=>{const p=game.users.get(y);return p&&!p.isGM&&b>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER})?l.push(T):a&&a.tokens.some(b=>b.actorId===R.id)&&o.push(T)}const r=w(),c=N.get(r.rollRequestsEnabled.tag),u=N.get(r.skipDialogs.tag),d=this.currentTab==="pc"?l:o,h=d.length>0&&d.every(R=>this.selectedActors.has(R.id)),f=[];if(this.selectedActors.size>0)for(const[R,T]of Object.entries(z.ROLL_REQUEST_OPTIONS))f.push({id:R,name:game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${T.name}`)||T.label,rollable:T.subList==null,hasSubList:!!T.subList,selected:this.selectedRequestType===R});const g=[];if(this.selectedRequestType&&this.selectedActors.size>0){const R=z.ROLL_REQUEST_OPTIONS[this.selectedRequestType];if(R&&R.subList){const T=Array.from(this.selectedActors)[0],k=game.actors.get(T);if(R.subList==="tools"){const y=((E=CONFIG.DND5E.enrichmentLookup)==null?void 0:E.tools)||CONFIG.DND5E.tools||{};for(const[b,p]of Object.entries(y)){let _=b;if(p!=null&&p.id){const v=dnd5e.documents.Trait.getBaseItem(p.id,{indexOnly:!0});_=(v==null?void 0:v.name)||b}else _=b.replace(/([A-Z])/g," $1").replace(/^./,v=>v.toUpperCase()).trim();g.push({id:b,name:_,rollable:!0})}g.sort((b,p)=>b.name.localeCompare(p.name))}else if(k&&R.actorPath){const y=foundry.utils.getProperty(k,R.actorPath)||{},b=CONFIG.DND5E[R.subList];for(const[p,_]of Object.entries(y)){let v="";R.subList==="skills"&&(b!=null&&b[p])||R.subList==="abilities"&&(b!=null&&b[p])?v=b[p].label:v=_.label||game.i18n.localize(_.name||p)||p,g.push({id:p,name:v,rollable:!0})}R.subList==="skills"&&g.sort((p,_)=>p.name.localeCompare(_.name))}}}return{...t,actors:d,currentTab:this.currentTab,isPCTab:this.currentTab==="pc",isNPCTab:this.currentTab==="npc",selectedTab:this.currentTab,rollRequestsEnabled:c,skipDialogs:u,selectAllOn:h,hasSelectedActors:this.selectedActors.size>0,requestTypes:f,rollTypes:g,showNames:!0,actorsLocked:this.isLocked}}_getActorStats(e){var l,o,a,r,c;const t=e.system,s=[];return(l=t.attributes)!=null&&l.hp&&s.push({abbrev:"HP",value:t.attributes.hp.value}),(o=t.attributes)!=null&&o.ac&&s.push({abbrev:"AC",value:t.attributes.ac.value}),(a=t.attributes)!=null&&a.spelldc&&s.push({abbrev:"DC",value:t.attributes.spelldc}),(c=(r=t.skills)==null?void 0:r.prc)!=null&&c.passive&&s.push({abbrev:"PP",value:t.skills.prc.passive}),s}_onRender(e,t){super._onRender(e,t),this._attachListeners(),setTimeout(()=>{document.addEventListener("click",this._onClickOutside,!0)},100),this._tokenControlHook=Hooks.on("controlToken",this._onTokenControlChange.bind(this))}_onTokenControlChange(e,t){this.rendered&&(this._ignoreTokenControl||(this._tokenUpdateTimeout&&clearTimeout(this._tokenUpdateTimeout),this._tokenUpdateTimeout=setTimeout(()=>{this._initializeFromSelectedTokens(),this.render(),this._tokenUpdateTimeout=null},100)))}_attachListeners(){var o,a,r,c;n.log("Attaching listeners",[]);const e=this.element;(o=e.querySelector("#crlngn-requests-toggle"))==null||o.addEventListener("change",this._onToggleRollRequests.bind(this)),(a=e.querySelector("#crlngn-skip-dialogs"))==null||a.addEventListener("change",this._onToggleSkipDialogs.bind(this)),(r=e.querySelector("#crlngn-actors-all"))==null||r.addEventListener("change",this._onToggleSelectAll.bind(this)),(c=e.querySelector("#crlngn-actors-lock"))==null||c.addEventListener("click",this._onToggleLock.bind(this));const t=e.querySelectorAll(".actor-tab");n.log("Found tabs:",[t.length]),t.forEach(u=>{u.addEventListener("click",this._onTabClick.bind(this))}),e.querySelectorAll(".actor").forEach(u=>{u.addEventListener("click",this._onActorClick.bind(this))}),e.querySelectorAll(".actor-select").forEach(u=>{u.addEventListener("click",this._onActorSelectClick.bind(this))});const s=e.querySelector(".request-types");s&&s.addEventListener("click",u=>{const d=u.target.closest("li");if(d&&d.dataset.id){const h={...u,currentTarget:d};this._onRequestTypeClick(h)}});const l=e.querySelector(".roll-types");l&&l.addEventListener("click",u=>{const d=u.target.closest("li");if(d&&d.dataset.id){const h={...u,currentTarget:d};this._onRollTypeClick(h)}})}async _onToggleRollRequests(e){const t=w(),s=e.target.checked;await N.set(t.rollRequestsEnabled.tag,s),Y.updateRollRequestsIcon(s),n.log("Roll requests enabled:",[s])}async _onToggleSkipDialogs(e){const t=w(),s=e.target.checked;await N.set(t.skipDialogs.tag,s),n.log("Skip dialogs:",[s])}_onToggleSelectAll(e){const t=e.target.checked;this._ignoreTokenControl=!0,(this.currentTab==="pc"?game.actors.contents.filter(l=>this._isPlayerOwned(l)):game.actors.contents.filter(l=>!this._isPlayerOwned(l)&&this._hasTokenInScene(l))).forEach(l=>{t?(this.selectedActors.add(l.id),this._updateCanvasTokenSelection(l.id,!0)):(this.selectedActors.delete(l.id),this._updateCanvasTokenSelection(l.id,!1))}),setTimeout(()=>{this._ignoreTokenControl=!1},200),this.render(),this._updateRequestTypesVisibility(),n.log("Select all:",[t,"for",this.currentTab])}_onToggleLock(e){e.preventDefault(),this.isLocked=!this.isLocked;const t=e.currentTarget;t.classList.remove("fa-lock-keyhole","fa-lock-keyhole-open"),t.classList.add(this.isLocked?"fa-lock-keyhole":"fa-lock-keyhole-open"),n.log("Lock toggled:",[this.isLocked])}_initializeFromSelectedTokens(){var t;const e=((t=canvas.tokens)==null?void 0:t.controlled)||[];this.selectedActors.clear();for(const s of e)if(s.actor&&(this.selectedActors.add(s.actor.id),this.selectedActors.size===1)){const l=this._isPlayerOwned(s.actor);this.currentTab=l?"pc":"npc"}n.log("Initialized with selected tokens:",[Array.from(this.selectedActors)])}_isPlayerOwned(e){return e.type!=="character"&&e.type!=="npc"?!1:Object.entries(e.ownership).some(([t,s])=>{const l=game.users.get(t);return l&&!l.isGM&&s>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER})}_hasTokenInScene(e){if(e.type!=="character"&&e.type!=="npc")return!1;const t=game.scenes.active;return t&&t.tokens.some(s=>s.actorId===e.id)}async _onTabClick(e){var s;const t=e.currentTarget.dataset.tab;n.log("Tab clicked:",[t,this.currentTab]),t!==this.currentTab&&(this.selectedActors.clear(),(s=canvas.tokens)==null||s.releaseAll(),this.selectedRequestType=null,this.currentTab=t,await this.render(),n.log("Switched to tab:",[t]))}_onActorClick(e){if(e.target.closest(".actor-select"))return;const s=e.currentTarget.dataset.id;this._toggleActorSelection(s)}_onActorSelectClick(e){e.stopPropagation();const t=e.currentTarget.dataset.id;this._toggleActorSelection(t)}_toggleActorSelection(e){this._ignoreTokenControl=!0,this.selectedActors.has(e)?(this.selectedActors.delete(e),this._updateCanvasTokenSelection(e,!1)):(this.selectedActors.add(e),this._updateCanvasTokenSelection(e,!0)),setTimeout(()=>{this._ignoreTokenControl=!1},100),this.render(),this._updateRequestTypesVisibility(),this._updateSelectAllState(),n.log("Actor selected:",[e,this.selectedActors.has(e)])}_updateCanvasTokenSelection(e,t){if(!game.scenes.active)return;const l=canvas.tokens.placeables.filter(o=>{var a;return((a=o.actor)==null?void 0:a.id)===e});for(const o of l)t?o.control({releaseOthers:!1}):o.release()}_updateRequestTypesVisibility(){this.render()}_updateSelectAllState(){const e=this.element.querySelector("#crlngn-actors-all"),t=this.currentTab==="pc"?"pc":"npc",s=this.element.querySelectorAll(`.${t}-actors .actor-item input[type="checkbox"]`),l=Array.from(s).filter(o=>o.checked).length;e.checked=l>0&&l===s.length,e.indeterminate=l>0&&l<s.length}async _onRequestTypeClick(e){const s=e.currentTarget.dataset.id,l=z.ROLL_REQUEST_OPTIONS[s];if(!l){n.error("Unknown request type:",s);return}this.selectedRequestType===s?(this.selectedRequestType=null,n.log("Request type deselected:",[s])):(this.selectedRequestType=s,n.log("Request type selected:",[s])),l.subList?await this.render():this.selectedRequestType&&this._triggerRoll(s,null)}_onRollTypeClick(e){n.log("Roll type clicked!",[e.currentTarget]);const t=e.currentTarget.dataset.id;n.log("Roll type selected:",[t]),this._triggerRoll(this.selectedRequestType,t)}async _triggerRoll(e,t){var T;const s=w(),l=Array.from(this.selectedActors),o=N.get(s.skipDialogs.tag),a=l.filter(k=>{const y=game.actors.get(k);if(!y)return!1;const b=this._isPlayerOwned(y),p=!b&&this._hasTokenInScene(y);return this.currentTab==="pc"&&b||this.currentTab==="npc"&&p}),r=z.ROLL_REQUEST_OPTIONS[e],c=(r==null?void 0:r.name)||e;if(c==="custom"){const k=await this._showCustomRollDialog();if(!k)return;t=k}if(c==="initiativeDialog"&&!game.combat)if(await Dialog.confirm({title:game.i18n.localize("COMBAT.Create"),content:"<p>"+game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.noCombatActive")+"</p>",yes:()=>!0,no:()=>!1,defaultYes:!0,options:{classes:["crlngn-rolls-dialog"]}}))await(await game.combats.documentClass.create({scene:game.scenes.active.id})).activate(),ui.notifications.info(game.i18n.localize("CRLNGN_ROLL_REQUESTS.notifications.combatCreated"));else return;let u=a;if(c==="initiativeDialog"&&game.combat){const k=a.map(p=>game.actors.get(p)).filter(p=>p),y=[],b=new Set;for(const p of k){const _=game.combat.getCombatantByActor(p.id);_&&_.initiative!==null&&(y.push(p.name),b.add(p.id))}if(y.length>0){if(await Dialog.confirm({title:game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.rerollInitiativeTitle"),content:"<p>"+game.i18n.format("CRLNGN_ROLLS.ui.dialogs.rerollInitiative",{actors:y.join(", ")})+"</p>",yes:()=>!0,no:()=>!1,defaultYes:!1,options:{classes:["crlngn-rolls-dialog"]}}))for(const _ of b){const v=game.combat.getCombatantByActor(_);v&&await v.update({initiative:null})}else if(u=a.filter(_=>!b.has(_)),u.length===0){ui.notifications.info(game.i18n.localize("CRLNGN_ROLL_REQUESTS.notifications.allActorsHaveInitiative"));return}}}let d=u.map(k=>game.actors.get(k)).filter(k=>k);if(c==="deathSave"){const k=[],y=[];for(const b of d){const p=((T=b.system.attributes.hp)==null?void 0:T.value)||0,_=b.system.attributes.death||{},v=_.success||0,A=_.failure||0;p<=0&&v<3&&A<3?k.push(b):y.push(b.name)}y.length>0&&ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.actorsSkippingDeathSave",{actors:y.join(", ")})),d=k}if(!d.length){ui.notifications.warn("No valid actors selected");return}const h=[],f=[];for(const k of d){const y=this._getActorOwner(k);y?h.push({actor:k,owner:y}):f.push(k)}let g=null;if(!o||h.length>0){if(g=await(["skill","tool"].includes(c)?se:j).getConfiguration(d,c,t,{skipDialogs:o}),n.log("_triggerRoll",["GM dialog returned config",{config:g,rollMethodName:c,rollKey:t,hasAbility:!!(g!=null&&g.ability),ability:g==null?void 0:g.ability}]),!g)return}else g={advantage:!1,disadvantage:!1,situational:"",parts:[],rollMode:game.settings.get("core","rollMode"),chatMessage:!0,isRollRequest:!0,skipDialog:o,sendRequest:!0},c==="deathSave"&&(g.target=10);const E=[],R=[];if(g.sendRequest){for(const{actor:k,owner:y}of h){if(!y.active){N.get(s.showOfflineNotifications.tag)&&ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.playerOffline",{player:y.name})),R.push(k);continue}this._sendRollRequestToPlayer(k,y,c,t,g,!0),E.push({actor:k,owner:y}),await new Promise(b=>setTimeout(b,100))}E.length>0&&this._sendConsolidatedNotification(E,c,t)}else f.push(...h.map(({actor:k})=>k));if(R.length>0){const k={...g,skipDialog:!0};await this._handleNPCRolls(R,c,t,k)}f.length>0&&await this._handleNPCRolls(f,c,t,g),setTimeout(()=>this.close(),500)}_getActorOwner(e){const t=e.ownership||{};for(const[s,l]of Object.entries(t))if(l>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){const o=game.users.get(s);if(o&&!o.isGM)return o}return null}_sendRollRequestToPlayer(e,t,s,l,o,a=!1){const r=w(),u={abilityCheck:"ability",savingThrow:"save",skill:"skill",tool:"tool",concentration:"concentration",initiativeDialog:"initiative",deathSave:"deathsave",custom:"custom"}[s]||s,d={type:"rollRequest",requestId:foundry.utils.randomID(),actorId:e.id,rollType:u,rollKey:l,activityId:null,config:{rollMode:o.rollMode||game.settings.get("core","rollMode"),advantage:o.advantage||!1,disadvantage:o.disadvantage||!1,situational:o.situational||"",parts:o.parts||[],chatMessage:o.chatMessage!==!1,target:o.target,ability:o.ability,attackMode:o.attackMode,rollTitle:o.rollTitle},skipDialog:o.skipDialog||!1,targetTokenIds:Array.from(game.user.targets).map(h=>h.id),preserveTargets:N.get(r.useGMTargetTokens.tag)};n.log("_sendRollRequestToPlayer",["Sending request with data",{requestData:d,hasAbility:!!d.config.ability,ability:d.config.ability,rollType:u,rollKey:l}]),I.execForUser("handleRollRequest",t.id,d),a||ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent",{player:t.name,actor:e.name}))}_sendConsolidatedNotification(e,t,s){var r,c,u,d,h;const l={};for(const{actor:f,owner:g}of e)l[g.id]||(l[g.id]={player:g,actors:[]}),l[g.id].actors.push(f);for(const[f,g]of Object.entries(z.ROLL_REQUEST_OPTIONS))if(g.name===t)break;const o=t;let a=game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${o}`)||o;if(s)if(o==="skill")a=`${a} (${((r=CONFIG.DND5E.skills[s])==null?void 0:r.label)||s})`;else if(o==="savingThrow")a=`${a} (${((c=CONFIG.DND5E.abilities[s])==null?void 0:c.label)||s})`;else if(o==="abilityCheck")a=`${a} (${((u=CONFIG.DND5E.abilities[s])==null?void 0:u.label)||s})`;else if(o==="tool"){const f=(h=(d=CONFIG.DND5E.enrichmentLookup)==null?void 0:d.tools)==null?void 0:h[s];if(f!=null&&f.id){const g=dnd5e.documents.Trait.getBaseItem(f.id,{indexOnly:!0});a=`${a} (${(g==null?void 0:g.name)||s})`}else a=`${a} (${s})`}else o==="custom"&&(a=`${a}: ${s}`);if(Object.keys(l).length===1){const f=Object.values(l)[0],g=f.actors.map(E=>E.name).join(", ");ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentSingle",{rollType:a,actors:g,player:f.player.name}))}else{const f=Object.values(l).map(g=>{const E=g.actors.map(R=>R.name).join(", ");return`${g.player.name} (${E})`});ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentMultiple",{rollType:a,count:e.length,players:f.join("; ")}))}}async _handleNPCRolls(e,t,s,l){const o={advantage:l.advantage||!1,disadvantage:l.disadvantage||!1,situational:l.situational||"",parts:l.parts||[],rollMode:l.rollMode||game.settings.get("core","rollMode"),fastForward:l.skipDialog||!1,chatMessage:l.chatMessage!==!1,isRollRequest:!0,target:l.target,ability:l.ability,attackMode:l.attackMode};for(const a of e)await this._executeActorRoll(a,t,s,o),await new Promise(r=>setTimeout(r,200))}async _executeActorRoll(e,t,s,l){var o,a,r,c,u,d;try{switch(n.log("RollRequestsMenu._executeActorRoll",["Starting roll for actor",{actorName:e.name,actorType:e.type,actorId:e.id,requestType:t,normalizedType:t.toLowerCase(),config:l}]),t.toLowerCase()){case"abilitycheck":const f={ability:s,advantage:l.advantage,disadvantage:l.disadvantage,target:l.target,isRollRequest:l.isRollRequest},g={configure:!l.fastForward},E={rollMode:l.rollMode,create:l.chatMessage!==!1};l.situational&&(f.bonus=l.situational),await e.rollAbilityCheck(f,g,E);break;case"savingthrow":const R={ability:s,advantage:l.advantage,disadvantage:l.disadvantage,target:l.target,isRollRequest:l.isRollRequest},T={configure:!l.fastForward},k={rollMode:l.rollMode,create:l.chatMessage!==!1};l.situational&&(R.bonus=l.situational),await e.rollSavingThrow(R,T,k);break;case"skill":const y={skill:s,advantage:l.advantage,disadvantage:l.disadvantage,ability:l.ability,chooseAbility:!l.ability},b={configure:!l.fastForward},p={rollMode:l.rollMode,create:l.chatMessage!==!1,data:{}};if(l.rollTitle)p.data.flavor=l.rollTitle;else if(l.ability){const C=((o=CONFIG.DND5E.skills[s])==null?void 0:o.label)||s,O=((a=CONFIG.DND5E.abilities[l.ability])==null?void 0:a.label)||l.ability;p.data.flavor=game.i18n.format("DND5E.SkillPromptTitle",{skill:C,ability:O})}l.situational&&(y.bonus=l.situational),l.target&&(y.target=l.target),await e.rollSkill(y,b,p);break;case"tool":const _={tool:s,advantage:l.advantage,disadvantage:l.disadvantage,ability:l.ability,chooseAbility:!l.ability},v={configure:!l.fastForward},A={rollMode:l.rollMode,create:l.chatMessage!==!1,data:{}};if(l.rollTitle)A.data.flavor=l.rollTitle;else if(l.ability){let C=s;const O=(c=(r=CONFIG.DND5E.enrichmentLookup)==null?void 0:r.tools)==null?void 0:c[s];if(O!=null&&O.id){const H=dnd5e.documents.Trait.getBaseItem(O.id,{indexOnly:!0});C=(H==null?void 0:H.name)||s}const Q=((u=CONFIG.DND5E.abilities[l.ability])==null?void 0:u.label)||l.ability;A.data.flavor=`${Q} (${C}) ${game.i18n.localize("DND5E.Check")}`}l.situational&&(_.bonus=l.situational),l.target&&(_.target=l.target),await e.rollToolCheck(_,v,A);break;case"concentration":await e.rollConcentration(l);break;case"initiativedialog":if(!game.combat){ui.notifications.warn(game.i18n.localize("COMBAT.NoneActive"));break}n.log("RollRequestsMenu._executeActorRoll",["About to roll initiative for",e.name,"with config",l]);const P=await e.rollInitiativeDialog(l);if(n.log("RollRequestsMenu._executeActorRoll",["Initiative roll result:",P]),!P){n.log("RollRequestsMenu._executeActorRoll",["No result from rollInitiativeDialog, trying direct combat update"]);let C=game.combat.getCombatantByActor(e.id);if(!C){const O=e.getActiveTokens();O.length&&(await game.combat.createEmbeddedDocuments("Combatant",[{tokenId:O[0].id,actorId:e.id}]),C=game.combat.getCombatantByActor(e.id))}if(C){const O=C.getInitiativeRoll();await O.evaluate({async:!0}),await C.update({initiative:O.total}),await O.toMessage({speaker:ChatMessage.getSpeaker({actor:e}),flavor:game.i18n.localize("DND5E.Initiative")})}}break;case"deathsave":n.log("RollRequestsMenu._executeActorRoll",["Actor death save state",{name:e.name,hp:(d=e.system.attributes.hp)==null?void 0:d.value,deathSaves:e.system.attributes.death,type:e.type}]);const V=await e.rollDeathSave();n.log("RollRequestsMenu._executeActorRoll",["Death save completed",V]);break;case"custom":try{const C=new Roll(s,e.getRollData());await C.evaluate({async:!0}),await C.toMessage({speaker:ChatMessage.getSpeaker({actor:e}),flavor:game.i18n.localize("CRLNGN_ROLLS.rollTypes.custom")})}catch(C){ui.notifications.error(game.i18n.format("CRLNGN_ROLLS.ui.notifications.invalidFormula",{formula:s})),n.log("RollRequestsMenu._executeActorRoll",["Invalid custom formula",s,C])}break;default:ui.notifications.warn(`Unknown roll type: ${t}`);break}}catch(h){n.log("RollRequestsMenu._executeActorRoll",["Error executing roll",h]),ui.notifications.error(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollError",{actor:e.name}))}}async _onClose(e){await super._onClose(e),this.selectedActors.clear(),this.selectedRequestType=null,document.removeEventListener("click",this._onClickOutside,!0),this._tokenControlHook&&(Hooks.off("controlToken",this._tokenControlHook),this._tokenControlHook=null),this._tokenUpdateTimeout&&(clearTimeout(this._tokenUpdateTimeout),this._tokenUpdateTimeout=null)}setPosition(e={}){return this}async _showCustomRollDialog(){return new Promise(async e=>{const t=await renderTemplate(`modules/${z.ID}/templates/custom-roll-dialog.hbs`,{formula:"",readonly:!1});new Dialog({title:game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.customRollTitle"),content:t,buttons:{roll:{icon:'<i class="fas fa-dice-d20"></i>',label:game.i18n.localize("Roll"),callback:l=>{const a=(l[0]||l).querySelector("#custom-roll-formula").value.trim();e(a||null)}},cancel:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("Cancel"),callback:()=>e(null)}},default:"roll",render:l=>{const o=l[0]||l,a=o.querySelector("#custom-roll-formula"),r={};o.querySelectorAll(".dice-button").forEach(c=>{c.addEventListener("click",u=>{const d=u.currentTarget.dataset.die;r[d]=(r[d]||0)+1;const h=[];for(const[f,g]of Object.entries(r))g>0&&h.push(`${g}${f}`);a.value=h.join(" + ")})})}},{classes:["crlngn-rolls-dialog","crlngn-custom-roll-dialog"]}).render(!0)})}}L(J,"DEFAULT_OPTIONS",{id:"crlngn-requests-menu",classes:["roll-requests-menu"],tag:"div",window:{frame:!1,resizable:!1,minimizable:!1},position:null}),L(J,"PARTS",{main:{template:`modules/${z.ID}/templates/requests-menus.hbs`}});class K{static initialize(){n.log("RollInterceptor.initialize",["Called, checking if user is GM",game.user.isGM]),game.user.isGM&&(n.log("RollInterceptor.initialize",["Initializing roll interceptor for GM"]),this.registerHooks())}static registerHooks(){this._registerHook(q.PRE_ROLL_ABILITY_CHECK,this._handlePreRoll.bind(this,"ability")),this._registerHook(q.PRE_ROLL_SAVING_THROW,this._handlePreRoll.bind(this,"save")),this._registerHook(q.PRE_ROLL_SKILL_V2,this._handlePreRoll.bind(this,"skill")),this._registerHook(q.PRE_ROLL_TOOL_V2,this._handlePreRoll.bind(this,"tool")),this._registerHook(q.PRE_ROLL_ATTACK_V2,this._handlePreRoll.bind(this,"attack")),this._registerHook(q.PRE_ROLL_DAMAGE_V2,this._handlePreRoll.bind(this,"damage")),this._registerHook(q.PRE_ROLL_INITIATIVE,this._handlePreRoll.bind(this,"initiative")),this._registerHook(q.PRE_ROLL_DEATH_SAVE_V2,this._handlePreRoll.bind(this,"deathsave")),this._registerHook(q.PRE_ROLL_HIT_DIE_V2,this._handlePreRoll.bind(this,"hitDie")),n.log("RollInterceptor.registerHooks",["Registered roll interception hooks"])}static _registerHook(i,e){const t=Hooks.on(i,e);this.registeredHooks.add({hookName:i,hookId:t})}static unregisterHooks(){for(const{hookName:i,hookId:e}of this.registeredHooks)Hooks.off(i,e);this.registeredHooks.clear(),n.log("RollInterceptor.unregisterHooks",["Unregistered all hooks"])}static _handleGenericPreRoll(i,e){var c,u,d;if(!game.user.isGM||(n.log("RollInterceptor._handleGenericPreRoll",["Generic preRollV2 triggered",{configType:(c=i==null?void 0:i.constructor)==null?void 0:c.name,hasSubject:!!(i!=null&&i.subject),subjectName:(u=i==null?void 0:i.subject)==null?void 0:u.name,hasIsRollRequest:i==null?void 0:i.isRollRequest,optionsType:(d=e==null?void 0:e.constructor)==null?void 0:d.name}]),i!=null&&i.isRollRequest))return;const t=i==null?void 0:i.subject,s=w();if(!N.get(s.rollInterceptionEnabled.tag))return;if(n.log("RollInterceptor._handleGenericPreRoll",[t,t==null?void 0:t.documentName]),!t||t.documentName!=="Actor"){n.log("RollInterceptor._handleGenericPreRoll",["No valid Actor found in roll",i]);return}const o=this._getActorOwner(t);if(!o||o.id===game.user.id||!o.active)return;let a="unknown",r=null;return i!=null&&i.ability?(a=i.save?"save":"ability",r=i.ability):i!=null&&i.skill?(a="skill",r=i.skill):i!=null&&i.tool&&(a="tool",r=i.tool),n.log("RollInterceptor._handleGenericPreRoll",["Determined roll type",{rollType:a,rollKey:r,configKeys:Object.keys(i||{})}]),n.log("RollInterceptor._handleGenericPreRoll",["Intercepting generic roll",{rollType:a,actorName:t.name,ownerName:o.name}]),r&&i&&(i={...i,ability:r}),this._sendRollRequest(t,o,a,i),!1}static _handlePreRoll(i,e,t,s){var c,u;if(!game.user.isGM)return;n.log("RollInterceptor._handlePreRoll",["Hook triggered",{rollType:i,configType:(c=e==null?void 0:e.constructor)==null?void 0:c.name,hasIsRollRequest:e==null?void 0:e.isRollRequest,dialogIsRollRequest:t==null?void 0:t.isRollRequest,messageIsRollRequest:s==null?void 0:s.isRollRequest}]);let l;if(i==="initiative"&&e instanceof Actor){if(l=e,t!=null&&t.isRollRequest||s!=null&&s.isRollRequest)return}else{if(e.isRollRequest)return;l=((u=e.subject)==null?void 0:u.actor)||e.subject||e.actor}const o=w(),a=N.get(o.rollInterceptionEnabled.tag);if(n.log("RollInterceptor._handlePreRoll",["Roll interception enabled:",a]),!a)return;if(!l||l.documentName!=="Actor"){n.log("RollInterceptor._handlePreRoll",["No valid Actor found in roll config",e,i]);return}const r=this._getActorOwner(l);if(!r||r.id===game.user.id){n.log("RollInterceptor._handlePreRoll",["Actor is GM-owned or has no owner, allowing roll",{rollType:i,actorName:l.name,actorType:l.type,hasOwner:!!r}]);return}if(!r.active){n.log("RollInterceptor._handlePreRoll",["Player is offline, allowing GM roll",{rollType:i,actorName:l.name,ownerName:r.name}]);return}return n.log("RollInterceptor._handlePreRoll",["Intercepting GM roll for player character",{rollType:i,actorId:l.id,actorName:l.name,ownerId:r.id,ownerName:r.name}]),this._sendRollRequest(l,r,i,e),n.log("RollInterceptor._handlePreRoll",["PREVENTING ROLL - returning false"]),!1}static async _showConfigurationDialog(i,e,t,s,l,o){try{n.log("RollInterceptor._showConfigurationDialog",["Showing dialog",{rollType:t,dialog:l.cls.name}]);const r={...s,_rollMethod:async h=>(n.log("RollInterceptor._showConfigurationDialog",["Dialog submitted with config",h]),this._sendRollRequest(i,e,t,h),new Roll("1d20").evaluate({async:!1})),configured:!1},c=l.cls,d=await new c(r,l.options).render(!0)}catch(a){n.log("RollInterceptor._showConfigurationDialog",["Error showing configuration dialog",a]),this._sendRollRequest(i,e,t,s)}}static _getActorOwner(i){const e=i.ownership||{};for(const[t,s]of Object.entries(e))if(s>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){const l=game.users.get(t);if(l&&!l.isGM)return l}return null}static _sendRollRequest(i,e,t,s){var d;const l=w(),o=N.get(l.skipDialogs.tag);let a=null,r=null;switch(t){case"ability":case"save":a=s.ability;break;case"skill":a=s.skill;break;case"tool":a=s.tool;break;case"attack":case"damage":if((d=s.subject)!=null&&d.item){a=s.subject.item.id;const h=U.findActivityForRoll(s.subject.item,t);h&&(r=h.id)}break;case"hitDie":a=s.denomination;break}const c={advantage:s.advantage||!1,disadvantage:s.disadvantage||!1,situational:s.situational||0,parts:s.parts||[],rollMode:s.rollMode||game.settings.get("core","rollMode"),elvenAccuracy:s.elvenAccuracy||!1,halflingLucky:s.halflingLucky||!1,reliableTalent:s.reliableTalent||!1,minimum:s.minimum,maximize:s.maximize,critical:s.critical,fumble:s.fumble,targetValue:s.targetValue,fastForward:s.fastForward||!1,chatMessage:s.chatMessage!==!1,flavor:s.flavor,title:s.title,dialogOptions:s.dialogOptions,messageData:s.messageData};Object.keys(c).forEach(h=>{c[h]===void 0&&delete c[h]});const u={type:"rollRequest",requestId:foundry.utils.randomID(),actorId:i.id,rollType:t,rollKey:a,activityId:r,config:c,skipDialog:o,targetTokenIds:Array.from(game.user.targets).map(h=>h.id),preserveTargets:N.get(l.useGMTargetTokens.tag)};I.execForUser("handleRollRequest",e.id,u),ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent",{player:e.name,actor:i.name}))}}L(K,"registeredHooks",new Set);const m=class m{static init(){I.initialize(m.registerSocketCalls),Hooks.once(F.INIT,()=>{w(),n.log("Initiating module...",[],!0),N.registerSettings(),document.body.classList.add("crlngn-rolls"),m.setDiceConfig(),Hooks.on(F.RENDER_SIDEBAR_TAB,m.addChatControl)}),Hooks.once(F.READY,()=>{var e,t;n.log("Core Ready!!",[ui==null?void 0:ui.sidebar,(e=ui==null?void 0:ui.sidebar)==null?void 0:e._collapsed],!0);const i=w();N.get(i.debugMode.tag),K.initialize(),Hooks.on("dnd5e.postRollConfiguration",(s,l,o,a)=>{l._isRequestedRoll&&s.length>0&&(n.log("postRollConfiguration for requested roll",["Adding custom flavor",l._requestedBy]),a.data=a.data||{},a.data._isRequestedRoll=!0,a.data._requestedBy=l._requestedBy)}),Hooks.on(F.PRE_CREATE_CHAT_MESSAGE,(s,l,o,a)=>{var r;if(l._isRequestedRoll&&((r=l.rolls)==null?void 0:r.length)>0){const c=l._requestedBy||"GM",u=game.i18n.format("CRLNGN_ROLL_REQUESTS.chat.requestedBy",{gm:c}),d=l.flavor||"";l.flavor=d?`${d} ${u}`:u,n.log("preCreateChatMessage",["Modified flavor for requested roll",l.flavor])}}),Hooks.on(F.BUILD_ROLL_CONFIG,(s,l,o,a)=>{var r,c,u;n.log("Hook: dnd5e.buildRollConfig",["BuildRollConfig hook fired",{app:(r=s==null?void 0:s.constructor)==null?void 0:r.name,config:l,formData:o,index:a,rollType:l==null?void 0:l.rollType,rollTypeConstructor:(u=(c=l==null?void 0:l.rollType)==null?void 0:c.constructor)==null?void 0:u.name,rolls:l==null?void 0:l.rolls}])}),Hooks.on(F.POST_BUILD_ROLL_CONFIG,(s,l,o,a)=>{var r,c,u,d;n.log("Hook: dnd5e.postBuildRollConfig",["PostBuildRollConfig hook fired",{processConfig:s,rollConfig:l,index:o,app:(c=(r=a==null?void 0:a.app)==null?void 0:r.constructor)==null?void 0:c.name,formData:a==null?void 0:a.formData,rollType:s==null?void 0:s.rollType,rollTypeConstructor:(d=(u=s==null?void 0:s.rollType)==null?void 0:u.constructor)==null?void 0:d.name,rolls:s==null?void 0:s.rolls}])}),Hooks.on(F.PRE_CREATE_CHAT_MESSAGE,(s,l,o,a)=>{var r,c;if(((r=l.rolls)==null?void 0:r.length)>0&&l.rolls[0])try{const u=l.rolls[0];(c=u.options)!=null&&c._customFlavor&&(l.flavor=u.options._customFlavor,n.log("Applying custom flavor to chat message",[u.options._customFlavor]))}catch(u){n.log("Error processing custom flavor",[u])}}),game.user.isGM?(Hooks.on(F.USER_CONNECTED,m.onUserConnected),game.users.forEach(s=>{m.onUserConnected(s)}),m.checkSideBar(!((t=ui==null?void 0:ui.sidebar)!=null&&t._collapsed))):m.getDiceConfig()})}static onUserConnected(i){i.active&&i.id!==game.user.id&&(n.log("onUserConnected",[i]),I.execForUser(m.SOCKET_CALLS.getDiceConfig,i.id))}static setDiceConfig(){if(!game.user)return;const i=game.settings.storage.get("client");return m.diceConfig=i["core.diceConfiguration"]||"",n.log("getDiceConfig",[m.diceConfig]),m.diceConfig}static getDiceConfig(){if(game.user&&(m.setDiceConfig(),game.user.isGM)){I.execForGMs(m.SOCKET_CALLS.receiveDiceConfig,game.user.id,m.diceConfig);return}}static receiveDiceConfig(i,e){var t;((t=game.user)!=null&&t.isGM||i===game.user.id)&&(m.playerDiceConfigs||(m.playerDiceConfigs={}),m.playerDiceConfigs[i]=e?JSON.parse(e):{},n.log(`Received dice configuration from user ${i}`,[m.playerDiceConfigs]))}static async handleRollRequest(i){var t,s,l,o,a,r,c;if(game.user.isGM)return;n.log("handleRollRequest",["Received roll request",i]),n.log("handleRollRequest",["Config details",{advantage:(t=i.config)==null?void 0:t.advantage,disadvantage:(s=i.config)==null?void 0:s.disadvantage,ability:(l=i.config)==null?void 0:l.ability,target:(o=i.config)==null?void 0:o.target,rollMode:(a=i.config)==null?void 0:a.rollMode,situational:(r=i.config)==null?void 0:r.situational}]);const e=game.actors.get(i.actorId);if(!e){n.log("handleRollRequest",["Actor not found",i.actorId]);return}if(!e.isOwner){n.log("handleRollRequest",["User does not own actor",i.actorId]);return}i.preserveTargets&&((c=i.targetTokenIds)==null?void 0:c.length)>0&&game.user.targets.size===0&&i.targetTokenIds.map(d=>canvas.tokens.get(d)).filter(d=>d).forEach(d=>d.setTarget(!0,{user:game.user})),m.pendingNotifications.push({actor:e.name,rollType:i.rollType,rollKey:i.rollKey,gm:i.config.requestedBy||"GM"}),m.notificationTimer&&clearTimeout(m.notificationTimer),m.notificationTimer=setTimeout(()=>{m._showBatchedNotifications()},m.NOTIFICATION_BATCH_DELAY),n.log("handleRequestedRoll",["sending roll request"]),m._executeRequestedRoll(e,i)}static _showBatchedNotifications(){if(m.pendingNotifications.length===0)return;const i={};for(const t of m.pendingNotifications){const s=`${t.rollType}_${t.rollKey||""}`;i[s]||(i[s]={rollType:t.rollType,rollKey:t.rollKey,actors:[],gm:t.gm}),i[s].actors.push(t.actor)}const e=Object.values(i);if(e.length===1&&e[0].actors.length===1){const t=e[0];ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived",{gm:t.gm,rollType:m._getRollTypeDisplay(t.rollType,t.rollKey)}))}else{const t=[];for(const s of e){const l=m._getRollTypeDisplay(s.rollType,s.rollKey),o=s.actors.join(", ");t.push(`${l} (${o})`)}ui.notifications.info(game.i18n.format("CRLNGN_ROLL_REQUESTS.notifications.rollRequestsReceivedMultiple",{gm:e[0].gm,requests:t.join("; ")}))}m.pendingNotifications=[],m.notificationTimer=null}static _getRollTypeDisplay(i,e){var s,l,o,a,r;let t=game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${i}`)||i;if(e)switch(i){case"skill":t+=` (${((s=CONFIG.DND5E.skills[e])==null?void 0:s.label)||e})`;break;case"save":t+=` (${((l=CONFIG.DND5E.abilities[e])==null?void 0:l.label)||e})`;break;case"ability":t+=` (${((o=CONFIG.DND5E.abilities[e])==null?void 0:o.label)||e})`;break;case"tool":const c=(r=(a=CONFIG.DND5E.enrichmentLookup)==null?void 0:a.tools)==null?void 0:r[e];if(c!=null&&c.id){const u=dnd5e.documents.Trait.getBaseItem(c.id,{indexOnly:!0});t+=` (${(u==null?void 0:u.name)||e})`}else t+=` (${e})`;break;case"custom":t=`${t}: ${e}`;break}return t}static async _executeRequestedRoll(i,e){try{const t={advantage:e.config.advantage||!1,disadvantage:e.config.disadvantage||!1,isRollRequest:!0,target:e.config.target,_isRequestedRoll:!0,_requestedBy:e.config.requestedBy||"GM"};e.config.situational&&(t.bonus=e.config.situational),e.config.ability&&["skill","tool"].includes(e.rollType)&&(t.ability=e.config.ability);const s={configure:!e.skipDialog,options:{defaultButton:e.config.advantage?"advantage":e.config.disadvantage?"disadvantage":"normal",window:{title:e.config.rollTitle||this._getRollTypeDisplay(e.rollType,e.rollKey),subtitle:i.name}}},l={rollMode:e.config.rollMode||game.settings.get("core","rollMode"),create:e.config.chatMessage!==!1};switch(n.log("_executeRequestedRoll",[i,e,t,s,l]),e.rollType){case"ability":await i.rollAbilityCheck({...t,ability:e.rollKey},s,l);break;case"save":await i.rollSavingThrow({...t,ability:e.rollKey},s,l);break;case"skill":const o={...t,skill:e.rollKey,chooseAbility:!0};e.config.ability&&(o.ability=e.config.ability),n.log("_executeRequestedRoll skill",["Skill config before roll",{skillConfig:o,requestedAbility:e.config.ability,rollKey:e.rollKey,actor:i.name}]),await i.rollSkill(o,s,l);break;case"tool":const a={...t,tool:e.rollKey,chooseAbility:!0};e.config.ability&&(a.ability=e.config.ability),await i.rollToolCheck(a,s,l);break;case"concentration":await i.rollConcentration(t,s,l);break;case"attack":e.rollKey&&await U.executeActivityRoll(i,"attack",e.rollKey,e.activityId,{...t,dialog:s,message:l});break;case"damage":e.rollKey&&await U.executeActivityRoll(i,"damage",e.rollKey,e.activityId,{...t,dialog:s,message:l});break;case"itemSave":e.rollKey&&await U.executeActivityRoll(i,"itemSave",e.rollKey,e.activityId,{...t,dialog:s,message:l});break;case"initiative":if(!game.combat){ui.notifications.warn(game.i18n.localize("COMBAT.NoneActive"));break}await i.rollInitiativeDialog(t,s,l);break;case"deathsave":await i.rollDeathSave(t,s,l);break;case"hitDie":t.denomination=e.rollKey,await i.rollHitDie(t,s,l);break;case"custom":await m._handleCustomRoll(i,e);break}}catch(t){n.log("_executeRequestedRoll",["Error executing roll",t]),ui.notifications.error(game.i18n.localize("CRLNGN_ROLL_REQUESTS.notifications.rollError"))}}static async _handleCustomRoll(i,e){const t=e.rollKey,s=await renderTemplate(`modules/${M}/templates/custom-roll-dialog.hbs`,{formula:t,readonly:!0});new Dialog({title:game.i18n.localize("CRLNGN_ROLLS.ui.dialogs.customRollTitle"),content:s,buttons:{roll:{icon:'<i class="fas fa-dice-d20"></i>',label:game.i18n.localize("Roll"),callback:async()=>{try{const o=new Roll(t,i.getRollData());await o.evaluate({async:!0}),await o.toMessage({speaker:ChatMessage.getSpeaker({actor:i}),flavor:game.i18n.localize("CRLNGN_ROLLS.rollTypes.custom")})}catch(o){ui.notifications.error(game.i18n.format("CRLNGN_ROLLS.ui.notifications.invalidFormula",{formula:t})),n.log("_handleCustomRoll",["Invalid formula",t,o])}}},cancel:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("Cancel")}},default:"roll"},{classes:["crlngn-rolls-dialog","crlngn-custom-roll-dialog"]}).render(!0)}static registerSocketCalls(){I.registerCall(m.SOCKET_CALLS.getDiceConfig,m.getDiceConfig),I.registerCall(m.SOCKET_CALLS.receiveDiceConfig,m.receiveDiceConfig),I.registerCall(m.SOCKET_CALLS.handleRollRequest,m.handleRollRequest)}static addChatControl(i,e,t){if(!game.user.isGM||i.id!=="chat")return;n.log("Adding chat control for chat tab");const l=(e[0]||e).querySelector("#chat-controls");if(!l){n.log("Could not find #chat-controls",[]);return}if(l.querySelector(".roll-requests-icon"))return;const o=w(),a=N.get(o.rollRequestsEnabled.tag),r=document.createElement("a");r.id="crlngn-requests-icon",r.setAttribute("data-tooltip-direction","RIGHT"),r.className=`chat-control-icon roll-requests-icon${a?" active":""}`,r.title=game.i18n.localize("CRLNGN_ROLLS.ui.menus.rollRequestsTitle"),r.innerHTML=`<i class="fas fa-bolt${a?"":"-slash"}"></i>`;const c=l.querySelector(".chat-control-icon");c?c.parentNode.insertBefore(r,c):l.appendChild(r),r.addEventListener("click",m.toggleRollRequestsMenu),n.log("Added roll requests icon to chat controls",[])}static toggleRollRequestsMenu(){m.rollRequestsMenu?m.rollRequestsMenu.rendered?(m.rollRequestsMenu.close(),n.log("Closed roll requests menu",[])):(m.rollRequestsMenu._initializeFromSelectedTokens(),m.rollRequestsMenu.render(!0),n.log("Opened roll requests menu",[])):(m.rollRequestsMenu=new J,m.rollRequestsMenu.render(!0))}static updateRollRequestsIcon(i){const e=document.querySelector("#crlngn-requests-icon i");e&&(e.className=`fas fa-bolt${i?"":"-slash"}`)}};L(m,"diceConfig",{}),L(m,"playerDiceConfigs",{}),L(m,"rollRequestsMenu",null),L(m,"SOCKET_CALLS",{receiveDiceConfig:"receiveDiceConfig",getDiceConfig:"getDiceConfig",handleRollRequest:"handleRollRequest"}),L(m,"pendingNotifications",[]),L(m,"notificationTimer",null),L(m,"NOTIFICATION_BATCH_DELAY",500),L(m,"checkSideBar",i=>{const e=document.querySelector("body");i?e.classList.add("sidebar-expanded"):e.classList.remove("sidebar-expanded")});let Y=m;Y.init();
//# sourceMappingURL=crlngn-roll-requests.js.map
