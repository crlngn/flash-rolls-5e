{"version":3,"file":"flash-rolls-5e.js","sources":["../../src/constants/Settings.mjs","../../src/constants/General.mjs","../../src/constants/Hooks.mjs","../../src/components/LogUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/DiceConfigUtil.mjs","../../src/components/helpers/GeneralUtil.mjs","../../src/components/dialogs/ModuleSettingsMenu.mjs","../../src/constants/SettingMenus.mjs","../../src/components/helpers/ModuleHelpers.mjs","../../src/components/ActivityUtil.mjs","../../src/components/SidebarUtil.mjs","../../src/components/helpers/Helpers.mjs","../../src/components/helpers/RollHelpers.mjs","../../src/components/dialogs/CustomRollDialog.mjs","../../src/components/ChatMessageUtils.mjs","../../src/components/RollHandlers.mjs","../../src/components/helpers/RollValidationHelpers.mjs","../../src/components/utils/RollMenuActorUtil.mjs","../../src/components/dialogs/gm-dialogs/GMRollConfigMixin.mjs","../../src/components/dialogs/gm-dialogs/GMRollConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMHitDieConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMSkillToolConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMDamageConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMAttackConfigDialog.mjs","../../src/components/utils/RollMenuConfigUtil.mjs","../../src/components/utils/RollMenuDragUtil.mjs","../../src/components/ActorStatusUtil.mjs","../../src/components/utils/ActorDragUtil.mjs","../../src/components/utils/ActorDropUtil.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/SettingsUtil.mjs","../../src/components/RollInterceptor.mjs","../../src/components/utils/ActorDirectoryIconUtil.mjs","../../src/components/HooksUtil.mjs","../../src/components/RollRequestUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    generalSettings: {\n      tag: \"flash5e-general-settings\", \n      label: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.label\"),\n      title: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.title\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.hint\"),\n      propType: Object,\n      fields: [\n        'showMenuOnLoad',\n        'rollInterceptionEnabled',\n        'useGMTargetTokens',\n        'templateAutoTarget',\n        'removeTemplate',\n        'consumptionConfigMode',\n        'showOfflineNotifications',\n        'initiateCombatOnRequest',\n        'showOnlyPCsWithToken',\n        'compactMode',\n        'publicPlayerRolls'\n      ],\n      default: {\n        showMenuOnLoad: false,\n        rollInterceptionEnabled: true,\n        useGMTargetTokens: true,\n        templateAutoTarget: 1,\n        removeTemplate: true,\n        consumptionConfigMode: 4,\n        showOfflineNotifications: true,\n        initiateCombatOnRequest: true,\n        showOnlyPCsWithToken: true,\n        compactMode: true,\n        publicPlayerRolls: true\n      },\n      scope: SETTING_SCOPE.world,\n      config: false, \n      requiresReload: false \n    },\n\n    groupRollsSettings: {\n      tag: \"flash5e-group-rolls-settings\", \n      label: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.label\"),\n      title: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.title\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.hint\"),\n      propType: Object,\n      fields: [\n        'groupRollsMsgEnabled',\n        'groupRollResultMode',\n        'showGroupDCToPlayers'\n      ],\n      default: {\n        groupRollsMsgEnabled: true,\n        groupRollResultMode: 1,\n        showGroupDCToPlayers: false\n      },\n      scope: SETTING_SCOPE.world,\n      config: false, \n      requiresReload: false \n    },\n\n    showGroupDCToPlayers: {\n      tag: \"show-group-dc-to-players\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.showGroupDCToPlayers.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.showGroupDCToPlayers.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n    \n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    \n    groupRollsMsgEnabled: {\n      tag: \"group-roll-enabled\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollsMsgEnabled.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollsMsgEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    groupRollResultMode: {\n      tag: \"group-roll-result-mode\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.hint\"),\n      propType: Number, \n      inputType: SETTING_INPUT.select,\n      choices: {\n        1: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.choices.1\"),\n        2: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.choices.2\"),\n        3: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.choices.3\"),\n        4: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.choices.4\")\n      },\n      default: 1,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    consumptionConfigMode: {\n      tag: \"consumption-config-mode\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.hint\"),\n      propType: Number, \n      inputType: SETTING_INPUT.select,\n      choices: {\n        1: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.choices.1\"),\n        2: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.choices.2\"),\n        3: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.choices.3\"),\n        4: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.choices.4\")\n      },\n      default: 4,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    skipRollDialog: {\n      tag: \"skip-roll-dialog\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.skipRollDialog.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.skipRollDialog.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n    rollInterceptionEnabled: {\n      tag: \"roll-interception-on\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.rollInterceptionEnabled.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.rollInterceptionEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n    publicPlayerRolls: {\n      tag: \"public-player-rolls\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.publicPlayerRolls.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.publicPlayerRolls.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    showOfflineNotifications: {\n      tag: \"show-offline-notifications\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.showOfflineNotifications.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.showOfflineNotifications.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    showRequestNotifications: {\n      tag: \"show-request-notifications\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.showRequestNotifications.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.showRequestNotifications.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    initiateCombatOnRequest: {\n      tag: \"initiate-combat-on-request\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.initiateCombatOnRequest.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.initiateCombatOnRequest.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    showOnlyPCsWithToken: {\n      tag: \"show-only-pcs-with-token\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.showOnlyPCsWithToken.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.showOnlyPCsWithToken.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    compactMode: {\n      tag: \"prevent-fade-out\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.compactMode.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.compactMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    templateAutoTarget: { \n      tag: \"template-auto-target\", \n      label: game.i18n.localize(\"FLASH_ROLLS.settings.templateAutoTarget.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.templateAutoTarget.hint\"),\n      propType: Number,\n      choices: {\n        1: game.i18n.localize(\"FLASH_ROLLS.settings.templateAutoTarget.choices.all.label\"),\n        2: game.i18n.localize(\"FLASH_ROLLS.settings.templateAutoTarget.choices.notFriendly.label\"),\n        3: game.i18n.localize(\"FLASH_ROLLS.settings.templateAutoTarget.choices.none.label\"),\n      },\n      inputType: SETTING_INPUT.select,\n      default: 1,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    removeTemplate: {\n      tag: \"remove-template\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.removeTemplate.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.removeTemplate.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    debugMode: {\n      tag: \"debug-mode-on\", \n      label: game.i18n.localize(\"FLASH_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n\n    showMenuOnLoad: {\n      tag: \"show-menu-on-world-load\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.showMenuOnLoad.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.showMenuOnLoad.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: false\n    }\n  };\n};\n","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"flash-rolls-5e\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cFlash Rolls 5e`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const SOCKET_CALLS = {\n  receiveDiceConfig: \"receiveDiceConfig\",\n  getDiceConfig: \"getDiceConfig\",\n  handleRollRequest: \"handleRollRequest\"\n};\n\nexport const HOOK_NAMES = {\n  ATTACK: { name: \"attack\", requestType: \"attack\" },\n  DAMAGE: { name: \"damage\", requestType: \"damage\" },\n  SAVE: { name: \"save\", requestType: \"damage\" },\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" },\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" },\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" },\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, \n  SKILL: { name: \"skill\", requestType: \"check\" },\n  TOOL: { name: \"tool\", requestType: \"check\" },\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" },\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" },\n  FORMULA: { name: \"formula\", requestType: \"formula\" },\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" },\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" },\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" },\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" },\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\n/**\n * Roll types used throughout the module\n * @constant\n * @type {Object}\n */\nexport const ROLL_TYPES = {\n  ABILITY: \"ability\",\n  ABILITY_CHECK: \"abilitycheck\",\n  ATTACK: \"attack\",\n  CONCENTRATION: \"concentration\",\n  CUSTOM: \"custom\",\n  DEATH_SAVE: \"deathsave\",\n  FORMULA: \"formula\",\n  DAMAGE: \"damage\",\n  HEALING: \"healing\",\n  HIT_DIE: \"hitdie\",\n  INITIATIVE: \"initiative\",\n  INITIATIVE_DIALOG: \"initiativedialog\",\n  ITEM_SAVE: \"itemsave\",\n  SAVE: \"save\",\n  SAVING_THROW: \"savingthrow\",\n  SKILL: \"skill\",\n  TOOL: \"tool\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: ROLL_TYPES.ABILITY_CHECK, label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: ROLL_TYPES.SAVING_THROW, label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SKILL: { name: ROLL_TYPES.SKILL, label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: ROLL_TYPES.TOOL, label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: ROLL_TYPES.CONCENTRATION, label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: ROLL_TYPES.INITIATIVE, label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: ROLL_TYPES.DEATH_SAVE, label: \"Death Save\", subList: null, actorPath: '' },\n  // ITEM_SAVE: { name: ROLL_TYPES.ITEM_SAVE, label: \"Item Save\", subList: null, actorPath: '' },\n  HIT_DIE: { name: ROLL_TYPES.HIT_DIE, label: \"Hit Die\", subList: null, actorPath: '' },\n  CUSTOM: { name: ROLL_TYPES.CUSTOM, label: \"Custom Roll\", subList: null, actorPath: '' },\n}\n\n/**\n * Module configuration object\n * @constant\n * @type {Object}\n */\nexport const MODULE = {\n  ID: MODULE_ID,\n  ROLL_REQUEST_OPTIONS: ROLL_REQUEST_OPTIONS\n}\n","/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessageHTML\",\n  RENDER_CHAT_LOG: \"renderChatLog\",\n  RENDER_CHAT_INPUT: \"renderChatInput\",\n  // RENDER_SIDEBAR_TAB: \"renderSidebarTab\",\n  CHANGE_SIDEBAR_TAB: \"changeSidebarTab\", \n  RENDER_SIDEBAR: \"renderSidebar\",\n  RENDER_APPLICATION_V2: \"renderApplicationV2\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\",\n  REFRESH_MEASURED_TEMPLATE: \"refreshMeasuredTemplate\",\n  CONTROL_TOKEN: \"controlToken\",\n  UPDATE_TOKEN: \"updateToken\",\n  DELETE_TOKEN: \"deleteToken\",\n  CREATE_TOKEN: \"createToken\",\n  UPDATE_ACTOR: \"updateActor\",\n  UPDATE_ITEM: \"updateItem\",\n  CREATE_ITEM: \"createItem\",\n  DELETE_ITEM: \"deleteItem\",\n  UPDATE_SETTING: \"updateSetting\",\n  GET_ACTOR_CONTEXT_OPTIONS: \"getActorContextOptions\",\n  RENDER_ACTOR_DIRECTORY: \"renderActorDirectory\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * Midi-QOL hooks\n */\nexport const HOOKS_MIDI_QOL = {\n  READY: \"midi-qol.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheckV2\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrowV2\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheckV2\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrowV2\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_CONFIGURE_INITIATIVE: \"dnd5e.preConfigureInitiative\",\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  // PRE_ROLL_INITIATIVE_DIALOG_V2: \"dnd5e.preRollInitiativeDialogV2\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_BUILD_ROLL_CONFIG: \"dnd5e.postBuildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {Array|*} data - array of items to log on console, or a single item that will be wrapped in an array\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debug-mode-on\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      \n      // Ensure data is an array\n      const dataArray = Array.isArray(data) ? data : [data];\n      console.log(...DEBUG_TAG, ref, ...dataArray);\n    } catch(e) {\n      // If settings aren't available yet, check bypassSettings\n      if (bypassSettings || LogUtil.debugOn) {\n        // Ensure data is an array\n        const dataArray = Array.isArray(data) ? data : [data];\n        console.log(...DEBUG_TAG, ref, ...dataArray);\n      }\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {Array|*} data - array of items to log on console, or a single item that will be wrapped in an array\n   */\n  static warn(ref=\"\", data=[]) {\n    // Ensure data is an array\n    const dataArray = Array.isArray(data) ? data : [data];\n    console.warn(...DEBUG_TAG, ref, ...dataArray);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {Array|*} data - array of items to log on console, or a single item that will be wrapped in an array\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, data=[], options = { ui: false, console: true, permanent: false }) {\n    // Ensure data is an array\n    const dataArray = Array.isArray(data) ? data : [data];\n    \n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef, ...dataArray);\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    LogUtil.log('initialize', [callbackFunc]);\n\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"FLASH_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n      } catch (e) {\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    LogUtil.log('registerCall', [name]);\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n    } else {\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log('sendMessage', [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    LogUtil.log('execForGMs', [handler, ...parameters]);\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function|string} handler - The function to execute or the name of a registered function.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    LogUtil.log('execForUser #0', [handler, userId, ...parameters]);\n    if (!SocketUtil.socket) {\n        return;\n    }\n\n    LogUtil.log('execForUser #1', [userId === game.user.id]);\n    if(userId === game.user.id){\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    LogUtil.log('execForUser #2', [SocketUtil._activeExecutions.has(executionKey)]);\n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n      const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n      LogUtil.log('execForUser #3 - response', [resp]);\n      return resp;\n    } catch (error) {\n      LogUtil.error('execForUser #4 - error', [error]);\n      return null;\n    } finally {\n      LogUtil.log('execForUser #5 - success', []);\n      // Always clean up, even if there was an error\n      SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    LogUtil.log('serializeForTransport', [data, hasRolls]);\n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    LogUtil.log('deserializeFromTransport', [data, hasRolls]);\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { SocketUtil } from './SocketUtil.mjs';\n\n/**\n * Utility class for managing dice configurations across users\n */\nexport class DiceConfigUtil {\n  /**\n   * @type {Object} Current user's dice configuration\n   */\n  static diceConfig = {};\n  \n  /**\n   * @type {Object} All player dice configurations (GM only)\n   */\n  static playerDiceConfigs = {};\n  \n  /**\n   * Initialize the dice configuration for current user\n   */\n  static initialize() {\n    this.setDiceConfig();\n  }\n  \n  /**\n   * Set dice configuration from client settings\n   * @returns {Object} The dice configuration\n   */\n  static setDiceConfig() {\n    if (!game.user) return {};\n    \n    const clientSettings = game.settings.storage.get(\"client\");\n    this.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Get the current user's dice configuration\n   * @returns {Object} The dice configuration\n   */\n  static getDiceConfig() {\n    if (!game.user) return {};\n    \n    // Ensure we have the latest configuration\n    this.setDiceConfig();\n    \n    // If GM, send config to GMs via socket\n    if (game.user.isGM) {\n      this._sendDiceConfigToGMs();\n    }\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Send dice configuration to all GMs\n   * @private\n   */\n  static _sendDiceConfigToGMs() {\n    SocketUtil.execForGMs('receiveDiceConfig', game.user.id, this.diceConfig);\n  }\n  \n  /**\n   * Receive and store dice configuration from a player\n   * @param {string} userId - The user ID\n   * @param {string} diceConfig - The serialized dice configuration\n   */\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId === game.user?.id) {\n      this.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n    }\n  }\n  \n  /**\n   * Get dice configuration for a specific user\n   * @param {string} userId - The user ID\n   * @returns {Object} The user's dice configuration\n   */\n  static getUserDiceConfig(userId) {\n    if (userId === game.user?.id) {\n      return this.diceConfig;\n    }\n    \n    return this.playerDiceConfigs[userId] || {};\n  }\n  \n  /**\n   * Request dice configuration from a specific user\n   * @param {string} userId - The user ID to request from\n   */\n  static requestDiceConfigFromUser(userId) {\n    SocketUtil.execForUser('getDiceConfig', userId);\n  }\n  \n  /**\n   * Request dice configuration from all active non-GM users\n   */\n  static requestDiceConfigFromAllPlayers() {\n    if (!game.user?.isGM) return;\n    \n    game.users.forEach(user => {\n      if (user.active && !user.isGM && user.id !== game.user.id) {\n        this.requestDiceConfigFromUser(user.id);\n      }\n    });\n  }\n  \n  /**\n   * Clear all stored player dice configurations\n   */\n  static clearPlayerConfigs() {\n    this.playerDiceConfigs = {};\n  }\n  \n  /**\n   * Check if a user has dice configuration stored\n   * @param {string} userId - The user ID\n   * @returns {boolean} True if configuration exists\n   */\n  static hasUserConfig(userId) {\n    if (userId === game.user?.id) {\n      return !!this.diceConfig;\n    }\n    \n    return !!this.playerDiceConfigs[userId];\n  }\n}","import { getSettings } from \"../../constants/Settings.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\nimport { SettingsUtil } from \"../SettingsUtil.mjs\";\n\n/**\n * Utility class providing general-purpose functionality for the module */\nexport class GeneralUtil {\n  /**\n   * Checks if module is currently installed and active\n   * @param {string} moduleName \n   * @returns {boolean}\n   */\n  static isModuleOn(moduleName){\n    const module = game.modules?.get(moduleName);\n    return Boolean(module?.active);\n  }\n\n  /**\n   * Finds and returns the first element matching the selector within the parent element\n   * @param {HTMLElement} parent - The parent element to search within\n   * @param {string} selector - CSS selector string\n   * @returns {HTMLElement|null} The first matching element or null if not found\n   */\n  static html(parent, selector) {\n    return parent.querySelector(selector);\n  }\n\n  /**\n   * Gets the full width of an element including margins and borders\n   * @param {HTMLElement} element - The element to measure\n   * @returns {number} The full width in pixels\n   */\n  static getFullWidth(element) {\n    const style = window.getComputedStyle(element);\n    if (style.width === '0px') {\n      return 0;\n    }\n    return element.offsetWidth;\n  }\n\n  /**\n   * Prevents dialog flicker by applying opacity transition\n   * @param {HTMLElement} element - The dialog element to apply the transition to\n   * @param {number} delay - Delay in milliseconds before fading in (default: 100)\n   */\n  static preventDialogFlicker(element, delay = 100) {\n    if (!element) return;\n    \n    element.style.opacity = '0';\n    element.style.transition = 'opacity 0.15s ease-in';\n    \n    setTimeout(() => {\n      if (element) {\n        element.style.opacity = '1';\n      }\n    }, delay);\n  }\n\n  /**\n   * Adds CSS variables to a style element\n   * @param {string} varName \n   * @param {string} varValue \n   */\n  static addCSSVars(varName, varValue) {\n    let bodyStyle = document.querySelector('style#flash5e-vars');\n    \n    if (!bodyStyle) {\n      const body = document.querySelector('body.flash5e');\n      if(!body){return}\n      \n      const existingStyle = body.querySelector('style#flash5e-vars');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n      \n      bodyStyle = document.createElement('style');\n      bodyStyle.id = 'flash5e-vars';\n      bodyStyle.textContent = 'body.flash5e {\\n}\\n';\n      body.prepend(bodyStyle);\n    }\n    \n    let cssText = bodyStyle.textContent;\n    \n    let ruleStart = cssText.indexOf('body.flash5e {');\n    let ruleEnd = cssText.indexOf('}', ruleStart);\n    \n    if (ruleStart === -1) {\n      cssText = 'body.flash5e {\\n}\\n';\n      ruleStart = 0;\n      ruleEnd = cssText.indexOf('}');\n    }\n    \n    const rulePart = cssText.substring(ruleStart + 'body.flash5e {'.length, ruleEnd);\n    \n    const declarations = rulePart.split(';')\n      .map(decl => decl.trim())\n      .filter(decl => decl !== '');\n    \n    const varsMap = {};\n    declarations.forEach(decl => {\n      const parts = decl.split(':');\n      if (parts.length >= 2) {\n        const name = parts[0].trim();\n        const value = parts.slice(1).join(':').trim(); // Handle values that might contain colons\n        if (name) varsMap[name] = value;\n      }\n    });\n    \n    if (varName.includes('i18n') && \n        typeof varValue === 'string' && \n        !varValue.startsWith('\"') && \n        !varValue.startsWith(\"'\") && \n        !varValue.match(/^url\\(|^rgba?\\(|^hsla?\\(/)) {\n      varValue = `\"${varValue}\"`;\n    }\n    \n    varsMap[varName] = varValue;\n    \n    const newRuleContent = Object.entries(varsMap)\n      .map(([name, value]) => `  ${name}: ${value};`)\n      .join('\\n');\n    \n    const newCss = \n      cssText.substring(0, ruleStart) + \n      'body.flash5e {\\n' + \n      newRuleContent + \n      '\\n}' + \n      cssText.substring(ruleEnd + 1);\n    \n    bodyStyle.textContent = newCss;\n  }\n  \n  /**\n   * Gets the offset bottom of an element\n   * @param {HTMLElement} element \n   * @returns {number}\n   */\n  static getOffsetBottom(element) {\n    const offsetTop = element.offsetTop;\n    const elementHeight = element.offsetHeight;\n    return window.innerHeight - (offsetTop + elementHeight);\n  }\n\n  /**\n   * Retrieves a list of all available fonts\n   * @returns {Promise<string[]>}\n   */\n  static async getAllFonts() {\n    const foundryFonts = new Set(Object.keys(CONFIG.fontDefinitions));\n    const customFontsObj = game.settings.get(\"core\", \"fonts\") || {};\n    const customFonts = Object.entries(customFontsObj).map(([fontFamily]) => fontFamily);\n  \n    const cssImportedFonts = await this.processStyleSheets();\n  \n    const allFonts = Array.from(new Set([\n      ...foundryFonts,\n      ...customFonts,\n      ...cssImportedFonts\n    ]))\n    .filter(f => !/FontAwesome|Font Awesome|FoundryVTT/.test(f))\n    .map(f => f.replace(/['\"]/g, '').trim())\n    .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n\n    return allFonts || [];\n  }\n\n  // Helper function to format font names\n  /**\n   * Formats a font name by cleaning it and wrapping it in quotes if it contains spaces\n   * @param {string} fontName - The font name to format\n   * @returns {string} The formatted font name\n   */\n  static wrapFontName = (fontName) => {\n    const cleanName = fontName.replace(/['\"`]/g, '');\n    return cleanName.includes(' ') ? `\"${cleanName}\"` : cleanName;\n  }\n\n  /**\n   * Adds custom CSS to a style element\n   * @param {string} content - CSS content to add\n   * @param {string} [id='flash5e-custom-css'] - ID for the style element\n   * @param {boolean} [checkForDuplicates=true] - Whether to check for duplicate rules\n   */\n  static addCustomCSS(content, id = 'flash5e-custom-css', checkForDuplicates = true) {\n    if (!content) {\n      return;\n    }\n    \n    let customStyle = document.querySelector('#' + id);\n    \n    if (!customStyle) {\n      customStyle = document.createElement('style');\n      customStyle.id = id;\n      customStyle.textContent = '';\n      document.head.appendChild(customStyle);\n    }\n\n    const importRegex = /@import\\s+(?:url\\()?\\s*['\"]?[^'\")]+['\"]?\\s*\\)?\\s*;/g;\n    const imports = [];\n    let contentWithoutImports = content;\n    let match;\n    while ((match = importRegex.exec(content)) !== null) {\n      imports.push(match[0]);\n    }\n    \n    contentWithoutImports = content.replace(importRegex, '').trim();\n    \n    if (!checkForDuplicates) {\n      customStyle.textContent = imports.join('\\n') + (imports.length ? '\\n\\n' : '') + contentWithoutImports;\n      return;\n    }\n    \n    if (!customStyle.textContent.includes(contentWithoutImports)) {\n      const currentContent = customStyle.textContent;\n      const existingImports = [];\n      let currentMatch;\n      while ((currentMatch = importRegex.exec(currentContent)) !== null) {\n        existingImports.push(currentMatch[0]);\n      }\n      \n      const currentContentWithoutImports = currentContent.replace(importRegex, '').trim();\n      const newImports = imports.filter(imp => !existingImports.includes(imp));\n      const allImports = [...existingImports, ...newImports];\n      customStyle.textContent = allImports.join('\\n') + \n                               (allImports.length ? '\\n\\n' : '') + \n                               currentContentWithoutImports +\n                               (currentContentWithoutImports && contentWithoutImports ? '\\n\\n' : '') +\n                               contentWithoutImports;\n    }\n  }\n  \n  /**\n   * Performs a smooth scroll with custom duration\n   * @param {HTMLElement} element - The element to scroll\n   * @param {number} to - The target scroll position\n   * @param {string} [direction=\"horizontal\"] - The scroll direction (\"horizontal\" or \"vertical\")\n   * @param {number} [duration=300] - Duration of the animation in milliseconds\n   * @param {Function} [onComplete] - Optional callback to run when animation completes\n   * @returns {number} Animation ID that can be used to cancel the animation\n   */\n  static smoothScrollTo(element, to, direction = \"horizontal\", duration = 300, onComplete = null) {\n    // Cancel any existing animation if it has the same ID as the element\n    const animationId = element.dataset.scrollAnimationId;\n    if (animationId) {\n      cancelAnimationFrame(Number(animationId));\n    }\n    \n    // Determine if we're scrolling horizontally or vertically\n    const isHorizontal = direction === \"horizontal\";\n    const start = isHorizontal ? element.scrollLeft : element.scrollTop;\n    const change = to - start;\n    \n    // If there's no change or the element isn't scrollable, exit early\n    if (change === 0) {\n      if (onComplete) onComplete();\n      return null;\n    }\n    \n    const startTime = performance.now();\n    \n    const animateScroll = (currentTime) => {\n      const elapsedTime = currentTime - startTime;\n      \n      if (elapsedTime >= duration) {\n        if (isHorizontal) {\n          element.scrollLeft = to;\n        } else {\n          element.scrollTop = to;\n        }\n        \n        delete element.dataset.scrollAnimationId;\n        if (onComplete) onComplete();\n        return;\n      }\n      \n      const progress = elapsedTime / duration;\n      const easeProgress = progress < 0.5 \n        ? 2 * progress * progress \n        : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n      \n      if (isHorizontal) {\n        element.scrollLeft = start + change * easeProgress;\n      } else {\n        element.scrollTop = start + change * easeProgress;\n      }\n      \n      const newAnimationId = requestAnimationFrame(animateScroll);\n      element.dataset.scrollAnimationId = newAnimationId;\n      return newAnimationId;\n    };\n    \n    const newAnimationId = requestAnimationFrame(animateScroll);\n    element.dataset.scrollAnimationId = newAnimationId;\n    return newAnimationId;\n  }\n\n  /**\n   * Opens a confirmation dialog to reload the page using DialogV2\n   * @param {string} [title=\"\"] - The title of the confirmation dialog\n   * @param {string} [content=\"\"] - The content message\n   * @param {Object} [options={}] - Additional dialog options\n   * @returns {Promise<boolean>} Resolves to true if confirmed, false otherwise\n   */\n  static confirmReload(\n    title = game.i18n.localize(\"FLASH_ROLLS.ui.reloadRequiredTitle\"), \n    content = game.i18n.localize(\"FLASH_ROLLS.ui.reloadRequiredLabel\"),\n    options = {}) {\n    \n    const dialogConfig = {\n      window: {\n        title\n      },\n      position: {\n        width: 420,\n        height: \"auto\"\n      },\n      content,\n      yes: {\n        label: game.i18n.localize(\"FLASH_ROLLS.ui.reloadButton\"),\n        callback: () => {\n          LogUtil.log(\"Reloading page after confirmation\");\n          window.location.reload();\n          return true;\n        }\n      },\n      no: {\n        label: game.i18n.localize(\"FLASH_ROLLS.ui.cancelButton\"),\n        callback: () => false\n      },\n      defaultYes: false,\n      rejectClose: false\n    };\n    \n    mergeObject(dialogConfig, options);\n    return foundry.applications.api.DialogV2.confirm(dialogConfig);\n  }\n\n  /**\n   * Alias for Foundry's method to render Handlebars template\n   * @param {string} templatePath \n   * @param {Object} data \n   * @returns {Promise<string>} Rendered template HTML\n   */\n  static renderTemplate(templatePath, data){\n    return foundry.applications.handlebars.renderTemplate(templatePath, data);\n  }\n\n  /**\n   * Alias for Foundry's method to load Handlebars template\n   * @param {string} templatePath \n   * @returns {Promise<HandlebarsTemplate>} Loaded template object\n   */\n  static loadTemplate(templatePath){\n    return foundry.applications.handlebars.loadTemplate(templatePath);\n  }\n\n  /**\n   * Alias for Foundry's method to load Handlebars template\n   * @param {string[]} templatePaths \n   * @returns {Promise<HandlebarsTemplate>} Loaded template object\n   */\n  static loadTemplates(templatePaths){\n    if(!Array.isArray(templatePaths)) templatePaths = [templatePaths];\n    return foundry.applications.handlebars.loadTemplates(templatePaths);\n  }\n\n  /**\n   * Validates if a string is a valid CSS rule or selector\n   * @param {string} cssString - CSS rule or selector to validate\n   * @return {boolean} Whether the CSS is valid\n   */\n  static isValidCSSRule(cssString) {\n    if (!cssString || typeof cssString !== \"string\") return false;\n    const trimmedCSS = cssString.trim();\n    if (!trimmedCSS) return false;\n    try {\n      const style = document.createElement(\"style\");\n      const testCSS = `${trimmedCSS} { color: inherit; }`;\n      style.textContent = testCSS;\n      document.head.appendChild(style);\n      const isValid = Boolean(style.sheet && style.sheet.cssRules && style.sheet.cssRules.length > 0);\n      document.head.removeChild(style);\n      return isValid;\n    } catch (error) {\n      LogUtil.log(\"CSS validation error:\", [error, cssString]);\n      return false;\n    }\n  }\n\n  /**\n   * Processes CSS rules with nested selectors to create valid CSS for multiple target selectors\n   * @param {string} cssRules - CSS rules that may contain nested selectors\n   * @param {string} targetSelectors - Comma-separated list of selectors to apply the rules to\n   * @return {string} Valid CSS with properly combined selectors\n   */\n  static processCSSRules(cssRules, targetSelectors) {\n    if (!cssRules || !targetSelectors) return \"\";\n    const parsedCSS = this.#parseCSS(cssRules);\n    const mainStyle = targetSelectors + \" {\\n\" + parsedCSS.baseProperties.join(\"\\n\") + \"\\n}\";\n    const processedRules = [];\n    const rulesByContent = new Map();\n    \n    parsedCSS.nestedRules.forEach(rule => {\n      const { selector, content } = rule;\n      \n      if (selector.startsWith(\"&\")) {\n        const pseudoSelector = selector.substring(1);\n        const combinedSelectors = targetSelectors.split(\",\")\n          .map(s => s.trim())\n          .filter(Boolean)\n          .map(s => s + pseudoSelector)\n          .join(\", \");\n        \n        processedRules.push(`${combinedSelectors} {\\n${content}\\n}`);\n        return;\n      }\n      \n      if (!rulesByContent.has(content)) {\n        rulesByContent.set(content, []);\n      }\n      \n      const selectors = selector.split(\",\").map(s => s.trim());\n      const targetList = targetSelectors.split(\",\").map(s => s.trim()).filter(Boolean);\n      \n      selectors.forEach(nestedSelector => {\n        targetList.forEach(targetSelector => {\n          rulesByContent.get(content).push(`${targetSelector} ${nestedSelector}`);\n        });\n      });\n    });\n    \n    rulesByContent.forEach((selectors, content) => {\n      processedRules.push(`${selectors.join(\", \")} {\\n${content}\\n}`);\n    });\n    \n    return mainStyle + \"\\n\\n\" + processedRules.join(\"\\n\\n\");\n  }\n  \n  /**\n   * Parses CSS string into a structured format with base properties and nested rules\n   * @param {string} css - CSS string to parse\n   * @return {Object} Object with baseProperties array and nestedRules array\n   * @private\n   */\n  static #parseCSS(css) {\n    const baseProperties = [];\n    const nestedRules = [];\n    const lines = css.split(\"\\n\");\n    \n    let currentNested = null;\n    let braceCount = 0;\n    \n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (!line) continue;\n      \n      const openBraces = (line.match(/{/g) || []).length;\n      const closeBraces = (line.match(/}/g) || []).length;\n      \n      if (line.includes(\"{\") && !currentNested) {\n        const selector = line.substring(0, line.indexOf(\"{\")).trim();\n        currentNested = { selector, content: \"\", startLine: i };\n        braceCount = 1;\n        \n        const contentAfterBrace = line.substring(line.indexOf(\"{\") + 1).trim();\n        if (contentAfterBrace && !contentAfterBrace.includes(\"}\")) {\n          currentNested.content += contentAfterBrace + \"\\n\";\n        }\n      } else if (currentNested) {\n        braceCount += openBraces - closeBraces;\n        \n        if (braceCount > 0) {\n          currentNested.content += line + \"\\n\";\n        } \n        else {\n          currentNested.content = currentNested.content.replace(/}\\s*$/, \"\").trim();\n          nestedRules.push(currentNested);\n          currentNested = null;\n        }\n      } else if (!line.includes(\"{\") && !line.includes(\"}\")) {\n        baseProperties.push(line);\n      }\n    }\n    \n    return { baseProperties, nestedRules };\n  }\n\n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  static getActorOwner(actor) {\n    const ownership = actor.ownership || {};\n\n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n\n    if(ownership?.default >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){\n      const user = game.users.filter(user => !user.isGM)[0];\n      if (user) {\n        return user;\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Opens a confirmation dialog to reload the page using DialogV2\n   * @param {string} [title=\"\"] - The title of the confirmation dialog\n   * @param {string} [content=\"\"] - The content message\n   * @param {Object} [options={}] - Additional dialog options\n   * @returns {Promise<boolean>} Resolves to true if confirmed, false otherwise\n   */\n  static confirmReload(\n    title = game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.reloadRequiredTitle\"), \n    content = game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.reloadRequiredLabel\"),\n    options = {}) {\n    \n    const dialogConfig = {\n      window: {\n        title\n      },\n      position: {\n        width: 420,\n        height: \"auto\"\n      },\n      content,\n      yes: {\n        label: game.i18n.localize(\"FLASH_ROLLS.ui.buttons.reloadButton\"),\n        callback: () => {\n          LogUtil.log(\"Reloading page after confirmation\");\n          window.location.reload();\n          return true;\n        }\n      },\n      no: {\n        label: game.i18n.localize(\"FLASH_ROLLS.ui.buttons.cancelButton\"),\n        callback: () => false\n      },\n      defaultYes: false,\n      rejectClose: false\n    };\n    \n    mergeObject(dialogConfig, options);\n    return foundry.applications.api.DialogV2.confirm(dialogConfig);\n  }\n\n  /**\n   * Removes the MeasuredTemplate \n   * @param {Item5e} item \n   */\n  static removeTemplateForItem (item) {\n    LogUtil.log(\"removeTemplateForItem - A\", [item]);\n    const SETTINGS = getSettings();\n    const removeTemplateSettingOn = SettingsUtil.get(SETTINGS.removeTemplate.tag);\n    LogUtil.log(\"removeTemplateForItem - B\", [removeTemplateSettingOn]);\n    if(!removeTemplateSettingOn){ return; }\n    const templates = canvas.templates.objects.children.filter(mt => {\n      return mt.document.flags.dnd5e.item === item?.uuid;\n    });\n\n    canvas.scene.deleteEmbeddedDocuments('MeasuredTemplate', templates.map(i=>i.id));\n  }\n}\n","import { getSettings } from \"../../constants/Settings.mjs\";\nimport { getSettingMenus } from \"../../constants/SettingMenus.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\nimport { SettingsUtil } from \"../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../helpers/GeneralUtil.mjs\";\n\nconst { FormDataExtended } = foundry.utils;\n\nconst { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api;\n\n/**\n * Tabbed Settings Menu application for managing all module settings in a unified interface.\n * Provides a tabbed form interface for accessing all settings categories in one place.\n * @extends {HandlebarsApplicationMixin(ApplicationV2)}\n */ \nexport class ModuleSettingsMenu extends HandlebarsApplicationMixin(ApplicationV2) {\n  static #element;\n  static #activeTab;\n  static #requireReload;\n  static selectedTheme;\n\n  /**\n   * Default application options\n   * @static\n   */\n  static DEFAULT_OPTIONS = {\n    id: \"flash-rolls-settings\",\n    tag: \"form\",\n    window: {\n      icon: \"fas fa-cog\",\n      title: \"FLASH_ROLLS.settings.moduleSettingsMenu.title\",\n      contentClasses: [\"standard-form\", \"crlngn\", \"flash5e\", \"tabbed-settings\"],\n      resizable: true\n    },\n    position: {\n      width: 700,\n      height: \"auto\"\n    },\n    actions: {\n      redefine: ModuleSettingsMenu.#onReset\n    },\n    form: {\n      handler: ModuleSettingsMenu.#onSubmit,\n      closeOnSubmit: true\n    }\n  }\n\n  /**\n   * Template parts used for rendering the application\n   * @static\n   */\n  static PARTS = {\n    tabs: {\n      template: \"templates/generic/tab-navigation.hbs\",\n      isGMOnly: false\n    },\n    generalSettings: {\n      menuKey: \"generalSettings\",\n      template: \"modules/flash-rolls-5e/templates/settings-general.hbs\",\n      isGMOnly: true\n    },\n    groupRolls: {\n      menuKey: \"groupRollsSettings\",\n      template: \"modules/flash-rolls-5e/templates/settings-group-rolls.hbs\",\n      isGMOnly: true\n    },\n    footer: {\n      template: \"templates/generic/form-footer.hbs\",\n      isGMOnly: false\n    }\n  };\n\n  /**\n   * Tab configuration for the application\n   * @static\n   */\n  static TABS = {\n    primary: {\n      initial: \"generalSettings\",\n      tabs: ModuleSettingsMenu.#getTabs(),\n      labelPrefix: \"\"\n    }\n  };\n\n  /** @inheritDoc */\n  _configureRenderParts(options) {\n    const parts = super._configureRenderParts(options);\n    const restrictedTabs = ModuleSettingsMenu.getRestrictedTabs();\n\n    if(!game.user.isGM){\n      restrictedTabs.forEach(tab => {\n        delete parts[tab];\n      })\n    }\n\n    return parts;\n  }\n\n  /** @inheritDoc */\n  async _prepareContext(options) {\n    const context = await super._prepareContext(options);\n    context.activeTab = options.activeTab || Object.keys(context.tabs)[0];\n    context.isGM = game.user.isGM;\n    \n    return context;\n  }\n\n   /** @inheritDoc */\n   async _preparePartContext(partId, context, options) {\n    const partContext = await super._preparePartContext(partId, context, options);\n    if ( partId in context.tabs ) partContext.tab = partContext.tabs[partId];\n    const SETTINGS = getSettings();\n    const SETTINGS_MENUS = getSettingMenus();\n    const restrictedTabs = ModuleSettingsMenu.getRestrictedTabs();\n\n    if(!game.user.isGM){\n      restrictedTabs.forEach(tab => {\n        delete partContext.tabs[tab];\n      })\n    }\n    switch ( partId ) {\n      case \"tabs\": {\n        break;\n      }\n      case \"footer\": {\n        partContext.buttons = [\n          { type: \"button\", icon: \"\", label: \"FLASH_ROLLS.ui.buttons.reset\", action: 'redefine' },\n          { type: \"submit\", icon: \"\", label: \"FLASH_ROLLS.ui.buttons.save\" }\n        ];\n        break;\n      }\n      default: {\n        partContext.tab = partContext.tabs[partId];\n        const partKey = ModuleSettingsMenu.PARTS[partId]?.menuKey || null;\n        if(partKey){\n          const menuContext = ModuleSettingsMenu.getMenuContext(partKey);\n          \n          if (menuContext.fields) {\n            partContext.fields = {\n              ...partContext.fields,\n              ...menuContext.fields\n            }\n          }\n\n          if (menuContext.fieldDefaults) {\n            partContext.fieldDefaults = {\n              ...partContext.fieldDefaults,\n              ...menuContext.fieldDefaults\n            }\n          }\n\n          if (menuContext.fieldValues) {\n            Object.assign(partContext, menuContext.fieldValues);\n          }\n\n          partContext.sidebarTabs = Object.values(foundry.applications?.sidebar?.tabs || {}).map(tab => ({\n            tabName: tab.tabName,\n            name: tab.name,\n            hideForGM: false,\n            hideForPlayer: false,\n            localizedName: `FLASH_ROLLS.settings.sidebarTabs.${tab.name}`\n          }));\n        }\n        break;\n      }\n    }\n    LogUtil.log(\"_preparePartContext\", [partContext, partId]);\n    return partContext;\n  }\n\n  /**\n   * Retrieves the context object containing fields, field values, and field defaults for a specific menu\n   * @param {string} menuKey - The key of the setting menu\n   * @returns {object} The context object containing fields, field values, and field defaults\n   */\n  static getMenuContext(menuKey){\n    const SETTINGS = getSettings();\n    const fieldNames = SETTINGS[menuKey]?.fields || null;\n    if(!fieldNames) return {};\n    const fields = {};\n    const fieldValues = {};\n    const fieldDefaults = {};\n\n    fieldNames.forEach((fieldName) => {\n      if(SETTINGS[fieldName]) {\n        const value = SettingsUtil.get(SETTINGS[fieldName].tag);\n        fields[fieldName] = SETTINGS[fieldName];\n        fieldValues[fieldName] = value!== undefined ? value : SETTINGS[fieldName].default;\n        fieldDefaults[fieldName] = SETTINGS[fieldName].default;\n      }\n    });\n\n    return {fields: fields, fieldValues: fieldValues, fieldDefaults: fieldDefaults};\n  }\n\n  /**\n   * Retrieves the keys of setting menus that are restricted to GMs\n   * @returns {string[]} Array of setting menu keys\n   */\n  static getRestrictedTabs(){\n    const restrictedTabs = [];\n    Object.entries(ModuleSettingsMenu.PARTS).forEach((entry, index) => {\n      if(entry[0]!==\"tabs\" && entry[0]!==\"footer\" && entry[1].isGMOnly){\n        restrictedTabs.push(entry[0]);\n      }\n    });\n    return restrictedTabs;\n  }\n\n  /**\n   * Handles post-render operations\n   * @protected\n   * @param {object} context - The render context\n   * @param {object} options - The render options\n   */\n  _onRender = (context, options) => {\n    const SETTINGS = getSettings();\n    ModuleSettingsMenu.#element = this.element;\n\n    const hintToggles = ModuleSettingsMenu.#element.querySelectorAll('.toggle-hint');\n    hintToggles.forEach(toggle => {\n      toggle.addEventListener('click', () => {\n        ModuleSettingsMenu.#element.querySelectorAll('p.hint').forEach(p => p.classList.toggle('shown'));\n      });\n    });\n    \n    const selects = ModuleSettingsMenu.#element.querySelectorAll('select[data-current-value]');\n    selects.forEach(select => {\n      const currentValue = String(select.dataset.currentValue);\n      const option = select.querySelector(`option[value=\"${currentValue}\"]`);\n      if (option) {\n        option.selected = true;\n      }\n    });\n  }\n\n  /**\n   * Handles form submission and updates left controls settings\n   * @private\n   * @static\n   * @param {Event} event - The form submission event\n   * @param {HTMLFormElement} form - The form element\n   * @param {FormData} formData - The form data object\n   * @returns {Promise<void>}\n   */\n  static async #onSubmit(event, form, formData) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    let confirmReload = ModuleSettingsMenu.updateSettings(formData);\n\n    if(confirmReload){\n      GeneralUtil.confirmReload();\n    }\n  }\n\n  static updateSettings(formData){\n    let confirmReload = false;\n    const SETTINGS = getSettings();\n    const html = ModuleSettingsMenu.#element;\n    const activeContent = html.querySelector(\".form-content.active\");\n    const activeTab = activeContent.dataset.tab;\n    ModuleSettingsMenu.#activeTab = activeTab;\n\n    if(!formData){\n      return;\n    }\n\n    // Convert FormData into an object with proper keys\n    let settings;\n    if (formData.object) {\n      settings = foundry.utils.expandObject(formData.object);\n    } \n\n    let fieldNames = [];\n\n    Object.entries(settings).forEach(([fieldName, value]) => {\n      // Skip auxiliary form fields like range value inputs\n      if(fieldName.endsWith('_value')) return;\n      \n      LogUtil.log(\"updateSettings #1\", [SETTINGS, SETTINGS[fieldName]]);\n      if(settings[fieldName] !== undefined && SETTINGS[fieldName]) {\n        const currSetting = SettingsUtil.get(SETTINGS[fieldName].tag);\n        SettingsUtil.set(SETTINGS[fieldName].tag, settings[fieldName]);\n        \n        if(SETTINGS[fieldName]?.requiresReload && currSetting !== settings[fieldName]){\n          confirmReload = true;\n        }\n      }\n    });\n\n    ui.notifications.info(game.i18n.localize('FLASH_ROLLS.notifications.settingsUpdated'));\n    return confirmReload;\n  }\n\n  /** @inheritDoc */\n  changeTab(tab, group, options) {\n    super.changeTab(tab, group, options);\n    ModuleSettingsMenu.#activeTab = tab;\n  }\n\n  /**\n   * Resets form fields to their default values\n   * @private\n   * @static\n   * @param {Event} a - The reset event\n   * @param {HTMLElement} b - The form element\n   * @returns {Promise<void>}\n   */\n  static async #onReset(a, b){\n    const SETTINGS = getSettings();\n    const html = ModuleSettingsMenu.#element;\n    const activeContent = html.querySelector(\".form-content.active\");\n    const activeTab = activeContent.dataset.tab;\n    const menuKey = ModuleSettingsMenu.PARTS[activeTab].menuKey;\n    const defaults = SETTINGS[menuKey].default;\n\n    const inputs = activeContent.querySelectorAll(\"input, select\");\n    inputs.forEach(inputField => {\n      inputField.value = defaults[inputField.name];\n      if(inputField.type==='checkbox'){\n        inputField.checked = defaults[inputField.name];\n      }\n    });\n\n    LogUtil.log(\"#onReset\", [ModuleSettingsMenu.#activeTab, activeTab, a, b]);\n  }\n\n  static #getTabs() {\n    const tabList = [];\n    Object.entries(ModuleSettingsMenu.PARTS).forEach(([key, value]) => {\n      if(value.menuKey) {\n        tabList.push({\n          id: key,\n          icon: '',\n          group: 'primary-tabs',\n          label: `FLASH_ROLLS.settings.moduleSettingsMenu.tabs.${key}`\n        })\n      }\n    })\n    return tabList;\n  }\n\n}\n","import { ModuleSettingsMenu } from '../components/dialogs/ModuleSettingsMenu.mjs';\n\n// Opens Patreon URL when instantiated\nclass PatreonSupport extends FormApplication {\n  constructor(...args) {\n    super(...args);\n    window.open('https://www.patreon.com/c/carolingiandev/membership', '_blank');\n    this.close();\n  }\n  \n  render() {\n    this.close();\n    return this;\n  }\n}\n\nexport function getSettingMenus() {\n  return {\n    moduleSettingsMenu: {\n      tab: '',\n      tag: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.title\"),\n      name: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.title\"),\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.label\"), \n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.hint\"),\n      icon: \"fas fa-cog\",  \n      propType: ModuleSettingsMenu,\n      restricted: true\n    },\n    supportPatreon: {\n      tab: '',\n      tag: game.i18n.localize(\"FLASH_ROLLS.settings.supportPatreon.label\"),\n      name: game.i18n.localize(\"FLASH_ROLLS.settings.supportPatreon.label\"),\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.supportPatreon.buttonLabel\"), \n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.supportPatreon.hint\"),\n      icon: \"fas fa-heart\",  \n      propType: PatreonSupport,\n      restricted: false\n    }\n  };\n}","import { MODULE_ID } from \"../../constants/General.mjs\";\nimport { HooksUtil } from \"../HooksUtil.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\nimport { SettingsUtil } from \"../SettingsUtil.mjs\";\n\n/**\n * Helper functions for module management\n */\nexport class ModuleHelpers {\n  static midiTimeout = null;\n\n  /**\n   * Check if a module is installed and active\n   * @param {string} moduleId - The module ID to check\n   * @returns {boolean} - True if the module is installed and active\n   */\n  static isModuleActive(moduleId) {\n    const module = game.modules.get(moduleId);\n    return module && module.active;\n  }\n\n  /**\n   * Get the MidiQOL API if available\n   * @returns {Object|null} - The MidiQOL API or null if not available\n   */\n  static getMidiQOL() {\n    if (this.isModuleActive('midi-qol') && typeof MidiQOL !== 'undefined') {\n      return MidiQOL;\n    }\n    return null;\n  }\n\n}","import { LogUtil } from './LogUtil.mjs';\nimport { ROLL_TYPES, MODULE_ID, ACTIVITY_TYPES } from '../constants/General.mjs';\nimport { ModuleHelpers } from './helpers/ModuleHelpers.mjs';\n\n/**\n * @typedef {Object} ActivityUseConfiguration\n * @property {object|false} create\n * @property {boolean} create.measuredTemplate - Should this item create a template?\n * @property {object} concentration\n * @property {boolean} concentration.begin - Should this usage initiate concentration?\n * @property {string|null} concentration.end - ID of an active effect to end concentration on.\n * @property {object|false} consume\n * @property {boolean} consume.action - Should action economy be tracked? Currently only handles legendary actions.\n * @property {boolean|number[]} consume.resources - Set to `true` or `false` to enable or disable all resource\n *                                                   consumption or provide a list of consumption target indexes\n *                                                   to only enable those targets.\n * @property {boolean} consume.spellSlot - Should this spell consume a spell slot?\n * @property {Event} event - The browser event which triggered the item usage, if any.\n * @property {boolean|number} scaling - Number of steps above baseline to scale this usage, or `false` if\n *                                      scaling is not allowed.\n * @property {object} spell\n * @property {number} spell.slot - The spell slot to consume.\n * @property {boolean} [subsequentActions=true] - Trigger subsequent actions defined by this activity.\n * @property {object} [cause]\n * @property {string} [cause.activity] - Relative UUID to the activity that caused this one to be used.\n *                                       Activity must be on the same actor as this one.\n * @property {boolean|number[]} [cause.resources] - Control resource consumption on linked item.\n * @property {BasicRollConfiguration[]} [rolls] - Roll configurations for this activity\n */\n\n/**\n * Utility class for handling D&D5e 4.x activities\n */\nexport class ActivityUtil {\n  \n  /**\n   * Find the appropriate activity for a given roll type on an item\n   * @param {Item5e} item - The item to search for activities\n   * @param {string} rollType - The type of roll (attack, damage, itemSave)\n   * @returns {Activity5e|null} - The found activity or null\n   */\n  static findActivityForRoll(item, rollType) {\n    if (!item?.system?.activities) return null;\n    \n    const activities = item.system.activities;\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.ATTACK:\n        const attackActivities = activities.getByType(\"attack\");\n        return attackActivities?.[0] || null;\n        \n      case ROLL_TYPES.DAMAGE:\n        const damageAttackActivities = activities.getByType(\"attack\");\n        if (damageAttackActivities?.length > 0) return damageAttackActivities[0];\n        \n        const damageActivities = activities.getByType(\"damage\");\n        if (damageActivities?.length > 0) return damageActivities[0];\n        \n        const saveActivities = activities.getByType(\"save\");\n        if (saveActivities?.length > 0) return saveActivities[0];\n        \n        return null;\n        \n      case ROLL_TYPES.ITEM_SAVE:\n        const itemSaveActivities = activities.getByType(\"save\");\n        return itemSaveActivities?.[0] || null;\n        \n      default:\n        return null;\n    }\n  }\n  \n  /**\n   * Get all activities of a specific type from an item\n   * @param {Item5e} item - The item to search\n   * @param {string} activityType - The activity type (attack, damage, save, etc.)\n   * @returns {Activity5e[]} - Array of activities\n   */\n  static getActivitiesByType(item, activityType) {\n    if (!item?.system?.activities) return [];\n    return item.system.activities.getByType(activityType);\n  }\n  \n  /**\n   * Check if an item has activities suitable for a given roll type\n   * @param {Item5e} item - The item to check\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} - Whether the item has suitable activities\n   */\n  static hasActivityForRoll(item, rollType) {\n    LogUtil.log('hasActivityForRoll', [item, rollType]);\n    return !!this.findActivityForRoll(item, rollType);\n  }\n  \n  /**\n   * Execute a roll using the appropriate activity method\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {string} itemId - The item ID\n   * @param {string} activityId - The activity ID (optional)\n   * @param {Object} config - Roll configuration\n   * @param {ActivityUseConfiguration} config.usage - Activity usage configuration\n   * @param {BasicRollDialogConfiguration} config.dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} config.message - Message configuration\n   */\n  static async executeActivityRoll(actor, rollType, itemId, activityId, config) {\n    LogUtil.log('executeActivityRoll', [actor, rollType, itemId, activityId, config]);\n    const isMidiActive = ModuleHelpers.isModuleActive('midi-qol');\n    const item = actor.items.get(itemId);\n    if (!item) {\n      throw new Error(`Item ${itemId} not found on actor ${actor.name}`);\n    }\n    \n    let activity = null;\n    let damageConfig = null;\n    \n    // If activity ID provided, use it directly\n    if (activityId) {\n      activity = item.system.activities?.get(activityId);\n    }\n    activity = activity || this.findActivityForRoll(item, rollType);\n\n    if (!activity) {\n      throw new Error(`Activity not found on item ${item.name}`);\n    }\n    LogUtil.log('executeActivityRoll - activity', [activity, rollType]);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Execute the roll based on type\n    if (activity) {\n      switch (normalizedRollType) {\n        case ROLL_TYPES.ATTACK:\n          LogUtil.log('executeActivityRoll - is attack activity', [config]);\n          \n          // Workaround for _triggerSubsequentActions stripping off usage config\n          // Store request configuration in flags and retrieve in the preRollAttackV2 hook\n          const rollRequestConfig = {\n            attackMode: config.usage.attackMode,\n            ammunition: config.usage.ammunition,\n            mastery: config.usage.mastery,\n            situational: config.usage.rolls?.[0]?.data?.situational,\n            advantage: config.usage.advantage,\n            disadvantage: config.usage.disadvantage,\n            rollMode: config.message?.rollMode\n          };\n          await activity.item.setFlag(MODULE_ID, 'tempAttackConfig', rollRequestConfig);\n          \n          LogUtil.log('executeActivityRoll - stored temp config as flag', [rollRequestConfig]);\n          \n          try {\n            config.message.create = true;\n\n            if(isMidiActive){\n              config.usage.consume = {\n                spellSlot: false,\n                action: false,\n                resources: []\n              }\n            }\n            \n            await activity.use(config.usage, config.dialog, config.message);\n            // if(isMidiActive) {\n            //   const MidiQOL = ModuleHelpers.getMidiQOL();\n            //   if (MidiQOL) {\n            //     // const workflow = await ActivityUtil.syntheticItemRoll(item, {\n            //     //   ...config,\n            //     //   midiOptions: {\n            //     //     autoFastAttack: false,\n            //     //     autoFastDamage: false,\n            //     //     autoRollAttack: false,\n            //     //     autoRollDamage: false\n            //     //   }\n            //     // });\n            //     return\n            //   }\n            // }\n          } catch (error) {\n            LogUtil.error('executeActivityRoll - attack roll error', [error]);\n          } finally {\n            // Only clean up the flag if we set it\n            await activity.item.unsetFlag(MODULE_ID, 'tempAttackConfig');\n          }\n          return;\n        case ROLL_TYPES.DAMAGE:\n          LogUtil.log('executeActivityRoll - damage roll #0', [activity, config]);\n          if(!isMidiActive) {\n            config.message.create = true;\n          }else{\n            config.usage = {\n              ...config.usage,\n              consume: {\n                ...config.usage.consume,\n                spellSlot:false,\n                action: false,\n                resources: []\n              }\n            }\n            config.dialog.configure = true;\n          }\n          // Extract the roll configuration from the usage config\n          damageConfig = {\n            critical: config.usage.critical || {},\n            situational: config.usage.rolls[0].data.situational || \"\",\n            rollMode: config.message?.rollMode,\n            // rolls: config.usage.rolls[0],\n            create: config.message?.create !== false,\n            scaling: config.usage.scaling\n          };\n          config.usage = {\n            ...config.usage,\n            consume: {\n              ...config.usage.consume,\n              spellSlot:false,\n              action: false,\n              resources: []\n            }\n          }\n\n          // For damage-only and save activities on player side, use() internally triggers rollDamage\n          // So we call use() and skip the explicit rollDamage call later\n          let damageHandledByUse = activity.type === ACTIVITY_TYPES.DAMAGE || activity.type === ACTIVITY_TYPES.SAVE || !activity?.attack;\n          if(isMidiActive && damageHandledByUse){\n            await this.midiActivityRoll(activity, config.usage);\n          } else if(!game.user.isGM && (activity.type === ACTIVITY_TYPES.SAVE || activity.type === ACTIVITY_TYPES.DAMAGE || !activity?.attack)){\n            await activity.use(config.usage, {\n              ...config.dialog,\n              configure: true\n            }, config.message);\n          }\n          await activity.item.setFlag(MODULE_ID, 'tempDamageConfig', damageConfig);\n          LogUtil.log('executeActivityRoll - damage config with situational', [damageConfig]);\n          \n          try {\n            if(isMidiActive) {\n              const MidiQOL = ModuleHelpers.getMidiQOL();\n              if (MidiQOL) {\n                const workflow = MidiQOL.Workflow?.getWorkflow(activity.uuid);\n                workflow.midiOptions = {\n                  fastForward: false,\n                  // autoFastAttack: false,\n                  autoFastDamage: false,\n                  // autoRollAttack: false,\n                  autoRollDamage: false\n                }\n                LogUtil.log('executeActivityRoll - workflow', [damageHandledByUse]);\n                if(workflow && !damageHandledByUse){ \n                  const damageRoll = await workflow.activity.rollDamage({\n                    ...damageConfig,\n                    workflow: workflow\n                  }, {\n                    ...config.dialog,\n                    configure: true\n                  }, {});\n                }\n                \n                // await activity.rollDamage(damageConfig, config.dialog, config.message);\n                return;\n              }\n            }else{\n              LogUtil.log('executeActivityRoll - damage roll', [activity, damageConfig, config]);\n              // Only call rollDamage if it wasn't already handled by use() on player side\n              if(!damageHandledByUse){\n                config.dialog.consume = {\n                  spellSlot:false,\n                  action: false,\n                  resources: []\n                }\n                await activity.rollDamage(damageConfig, config.dialog, config.message);\n              }\n            }\n          } catch (error) {\n            LogUtil.error(['executeActivityRoll - damage roll error', error]);\n          } finally {\n            await activity.item.unsetFlag(MODULE_ID, 'tempDamageConfig');\n          }\n          return;\n        default:\n          LogUtil.log('executeActivityRoll - unknown roll type', [normalizedRollType]);\n          await activity.use(config.usage, config.dialog, config.message);\n          return;\n      }\n    }\n      \n    throw new Error(`No suitable method found for ${normalizedRollType} on item ${item.name}`);\n  }\n  \n  /**\n   * Get display information for an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {Object} - Display information\n   */\n  static getActivityDisplayInfo(activity) {\n    LogUtil.log('getActivityDisplayInfo', [activity]);\n    if (!activity) return null;\n    \n    return {\n      name: activity.name || activity.constructor.metadata.label,\n      type: activity.type,\n      icon: activity.constructor.metadata.icon,\n      canAttack: activity.type === 'attack',\n      canDamage: ['attack', 'damage', 'save'].includes(activity.type),\n      canSave: activity.type === 'save'\n    };\n  }\n  \n  /**\n   * Get damage formula string from an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {string|null} - Combined damage formula or null\n   */\n  static getDamageFormula(activity) {\n    LogUtil.log('getDamageFormula', [activity]);\n    if (!activity?.damage?.parts?.length) return null;\n    \n    // Extract all damage formulas and combine them\n    const formulas = activity.damage.parts.map(part => part.formula).filter(f => f);\n    return formulas.length > 0 ? formulas.join(' + ') : null;\n  }\n\n  static async midiActivityRoll(activity, config = {}) {\n    LogUtil.log('midiActivityRoll', [activity, config]);\n    \n    const MidiQOL = ModuleHelpers.getMidiQOL();\n    if (!MidiQOL) {\n      LogUtil.warn('MidiQOL is not active');\n      return;\n    }\n    \n    let defaultConfig = {\n      consume: {\n        action: false,\n        resources: [],\n        spellSlot: false\n      }\n    };\n    let defaultOptions = {\n      consume: {\n        action: false,\n        resources: [],\n        spellSlot: false\n      },\n      fastForward: false,\n      fastForwardAttack: false,\n      dialogOptions: {\n        fastForward: false,\n        fastForwardAttack: false,\n        fastForwardDamage: false\n      },\n      // targetUuids: targets.map(i => i.document.uuid),\n      configureDialog: true,\n      // ignoreUserTargets: true,\n      midiOptions: {\n        autoRollAttack: false,\n        autoFastAttack: false,\n        autoRollDamage: 'none',\n        autoFastDamage: false,\n        fastForward: false,\n        fastForwardAttack: false,\n        fastForwardDamage: false,\n        autoConsumeResource: \"none\"\n      }\n    };\n    activity.midiProperties = {\n      ...activity.midiProperties,\n      forceDamageDialog: \"always\"\n    }\n\n    // options = genericUtils.mergeObject(defaultOptions, options);\n    config = {...defaultOptions, ...config};\n\n    LogUtil.log('midiActivityRoll - config', [config]);\n\n    //defaultOptions\n    return await MidiQOL.completeActivityUse(activity, config, {});\n    // return await MidiQOL.completeItemUse(item, config, defaultOptions);\n  }\n\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing sidebar controls\n */\nexport class SidebarUtil {\n  /**\n   * Add the roll request bolt icon to sidebar\n   * @param {SidebarTab} app - The sidebar tab application\n   * @param {jQuery} html - The rendered HTML\n   */\n  static addSidebarControls(app, html) {\n    LogUtil.log(\"addSidebarControls\",[app, html]);\n    if (!game.user.isGM || !app || app.id !== \"sidebar\") return;\n    \n    // Find the chat controls container\n    const chatControls = document.querySelector(\"#roll-privacy\");\n    LogUtil.log(\"addSidebarControls\",[chatControls]);\n\n    if (!chatControls || chatControls.querySelector('.flash-rolls-icon')) {\n      return;\n    }\n    \n    // Get current settings to determine initial state\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Create the roll request icon\n    const rollRequestIcon = document.createElement('button');\n    rollRequestIcon.id = \"flash-rolls-icon\"; \n    rollRequestIcon.setAttribute(\"data-tooltip-direction\", \"RIGHT\");\n    rollRequestIcon.className = `ui-control icon chat-control-icon flash-rolls-icon${rollRequestsEnabled ? ' active' : ''}`;\n    rollRequestIcon.title = game.i18n.localize('FLASH_ROLLS.ui.menus.rollRequestsTitle');\n    rollRequestIcon.innerHTML = `<i class=\"fas fa-bolt${rollRequestsEnabled ? '' : '-slash'}\"></i>`;\n    \n    // Insert before the d20 dice icon\n    const firstChatControlIcon = chatControls.firstChild;\n    if (firstChatControlIcon) {\n      firstChatControlIcon.parentNode.insertBefore(rollRequestIcon, firstChatControlIcon);\n    } else {\n      chatControls.insertBefore(rollRequestIcon, chatControls.firstChild);\n    }\n\n    LogUtil.log(\"addSidebarControls\",[firstChatControlIcon, rollRequestIcon]);\n    \n    rollRequestIcon.addEventListener(\"click\", (event) => {\n      event.stopPropagation();\n      event.preventDefault();\n      RollRequestsMenu.toggle();\n    });\n  }\n  \n  /**\n   * Update the roll requests icon based on enabled state\n   * @param {boolean} enabled - Whether roll requests are enabled\n   */\n  static updateRollRequestsIcon(enabled) {\n    const icon = document.querySelector('#flash-rolls-icon i');\n    if (icon) {\n      icon.className = `fas fa-bolt${enabled ? '' : '-slash'}`;\n    }\n  }\n}","/**\n * Helper functions for the Flash Rolls 5e module\n */\nimport { MODULE, ROLL_TYPES } from '../../constants/General.mjs';\nimport { LogUtil } from '../LogUtil.mjs';\nimport { GeneralUtil } from './GeneralUtil.mjs';\n\n/**\n * Get display name for roll type with optional details\n * @param {string} rollType - The type of roll\n * @param {string} rollKey - Optional key for the specific roll (ability, skill, etc.)\n * @returns {string} Formatted display string\n */\nexport function getRollTypeDisplay(rollType, rollKey) {\n  let display = game.i18n.localize(`FLASH_ROLLS.rollTypes.${rollType}`) || rollType;\n  \n  // Normalize rollType to lowercase for consistent comparisons\n  const normalizedRollType = rollType?.toLowerCase();\n  \n  if (rollKey) {\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        display += ` (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.SAVE:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.ABILITY:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          display += ` (${toolItem?.name || rollKey})`;\n        } else {\n          display += ` (${rollKey})`;\n        }\n        break;\n      case ROLL_TYPES.CUSTOM:\n        display = `${display}: ${rollKey}`;\n        break;\n    }\n  }\n  \n  return display;\n}\n\n/**\n * Show batched notifications to player\n * @param {Array} pendingNotifications - Array of notification objects\n * @param {Function} getRollTypeDisplayFn - Function to get roll type display (default: getRollTypeDisplay)\n */\nexport function showBatchedNotifications(pendingNotifications, getRollTypeDisplayFn = getRollTypeDisplay) {\n  if (pendingNotifications.length === 0) return;\n  \n  // Group by roll type\n  const notificationsByType = {};\n  for (const notif of pendingNotifications) {\n    const key = `${notif.rollType}_${notif.rollKey || ''}`;\n    if (!notificationsByType[key]) {\n      notificationsByType[key] = {\n        rollType: notif.rollType,\n        rollKey: notif.rollKey,\n        actors: [],\n        gm: notif.gm\n      };\n    }\n    notificationsByType[key].actors.push(notif.actor);\n  }\n  \n  const entries = Object.values(notificationsByType);\n  if (entries.length === 1 && entries[0].actors.length === 1) {\n    // Single roll request - use original format\n    const entry = entries[0];\n    ui.notifications.info(game.i18n.format('FLASH_ROLLS.notifications.rollRequestReceived', {\n      gm: entry.gm,\n      rollType: getRollTypeDisplayFn(entry.rollType, entry.rollKey)\n    }));\n  } else {\n    // Multiple requests - create consolidated message\n    const messages = [];\n    for (const entry of entries) {\n      const rollTypeDisplay = getRollTypeDisplayFn(entry.rollType, entry.rollKey);\n      const actorNames = entry.actors.join(\", \");\n      messages.push(`${rollTypeDisplay} (${actorNames})`);\n    }\n    \n    ui.notifications.info(game.i18n.format('FLASH_ROLLS.notifications.rollRequestsReceivedMultiple', {\n      gm: entries[0].gm,\n      requests: messages.join(\"; \")\n    }));\n  }\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {User|null} The player owner, or null if not player-owned\n */\nexport function getPlayerOwner(actor) {\n  const ownership = actor.ownership || {};\n  \n  for (const [userId, level] of Object.entries(ownership)) {\n    if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n      const user = game.users.get(userId);\n      if (user && !user.isGM) {\n        return user;\n      }\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Get actor stats for display (ability scores and modifiers)\n * @param {Actor} actor - The actor to get stats for\n * @returns {Array} Array of stat objects with name, value, and modifier\n */\nexport function getActorStats(actor) {\n  if (!actor?.system?.abilities) return [];\n  \n  return Object.entries(actor.system.abilities).map(([key, ability]) => ({\n    name: key.toUpperCase(),\n    value: ability.value || 10,\n    modifier: ability.mod >= 0 ? `+${ability.mod}` : `${ability.mod}`\n  }));\n}\n\n/**\n * Apply target tokens to user\n * @param {Array<string>} tokenIds - Array of token IDs to target\n * @param {User} user - User to apply targets for (default: game.user)\n */\nexport function applyTargetTokens(tokenIds, user = game.user) {\n  if (!tokenIds?.length) return;\n\n  tokenIds.forEach((id, index) => {\n    LogUtil.log('applyTargetTokens', [id, canvas.tokens.placeables.map(t => t.id)]);\n    const token = canvas.tokens.placeables.find(t => t.id === id); //canvas.tokens.get(id);\n    if (token) {\n      token.setTarget(true, { releaseOthers: index === 0 });\n    }else{\n      LogUtil.warn('applyTargetTokens - Token not found:', [id]);\n    }\n  });\n  \n  // const tokens = tokenIds\n  //   .map(id => canvas.tokens.get(id))\n  //   .filter(t => t);\n  // LogUtil.log('applyTargetTokens', [tokenIds, canvas.tokens.placeables.map(t => t.id)]);\n    \n  // tokens.forEach(t => t.setTarget(true, { user }));\n}\n\n/**\n * Clear all target tokens for user\n * @param {User} user - User to clear targets for (default: game.user)\n */\nexport function clearTargetTokens(user = game.user) {\n  user.targets.forEach(t => t.setTarget(false, { user }));\n}\n\n/**\n * Format a notification message for multiple actors\n * @param {Array<string>} actorNames - Array of actor names\n * @param {string} action - The action being performed\n * @returns {string} Formatted message\n */\nexport function formatMultiActorNotification(actorNames, action) {\n  if (actorNames.length === 0) return \"\";\n  if (actorNames.length === 1) return `${actorNames[0]} ${action}`;\n  \n  const and = game.i18n.localize(\"FLASH_ROLLS.common.and\");\n  \n  if (actorNames.length === 2) return `${actorNames[0]} ${and} ${actorNames[1]} ${action}`;\n  \n  const lastActor = actorNames[actorNames.length - 1];\n  const otherActors = actorNames.slice(0, -1).join(\", \");\n  return `${otherActors}, ${and} ${lastActor} ${action}`;\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if owned by a player\n */\nexport function isPlayerOwned(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  return Object.entries(actor.ownership)\n    .some(([userId, level]) => {\n      const user = game.users.get(userId);\n      return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n    });\n}\n\n/**\n * Check if actor has token in current scene\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if actor has token in current scene\n */\nexport function hasTokenInScene(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  const currentScene = game.scenes.active;\n  return currentScene && currentScene.tokens.some(token => token.actorId === actor.id);\n}\n\n/**\n * Update token selection on canvas based on actor selection\n * @param {string} actorId - The actor ID\n * @param {boolean} selected - Whether to select or deselect\n */\nexport function updateCanvasTokenSelection(actorId, selected, tokenId = null) {\n  const scene = game.scenes.active;\n  if (!scene) return;\n  \n  let tokens;\n  if (tokenId) {\n    const specificToken = canvas.tokens.placeables.find(t => t.id === tokenId);\n    tokens = specificToken ? [specificToken] : [];\n  } else {\n    tokens = canvas.tokens.placeables.filter(t => t.actor?.id === actorId);\n  }\n  \n  for (const token of tokens) {\n    if (selected) {\n      token.control({ releaseOthers: false });\n    } else {\n      token.release();\n    }\n  }\n}\n\n/**\n * Delay execution for a specified time\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise} Promise that resolves after the delay\n */\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Check if the sidebar is expanded\n * @returns {boolean} True if sidebar is expanded\n */\nexport function isSidebarExpanded() {\n  return ui?.sidebar?.expanded || false;\n}\n\n/**\n * Update body class based on sidebar state\n * @param {boolean} isExpanded - Whether sidebar is expanded\n */\nexport function updateSidebarClass(isExpanded) {\n  const body = document.querySelector(\"body\"); \n  if (isExpanded) {\n    body.classList.add(\"flash5e-sidebar-expanded\"); \n  } else {\n    body.classList.remove(\"flash5e-sidebar-expanded\"); \n  }\n  adjustMenuOffset();\n}\n\n/**\n * Build roll types array for a selected request type\n * @param {string} selectedRequestType - The type of roll request\n * @param {Set} selectedActors - Set of selected actor IDs\n * @returns {Array} Array of roll type objects with id, name, and rollable properties\n */\nexport function buildRollTypes(selectedRequestType, selectedActors) {\n  const rollTypes = [];\n  \n  if (!selectedRequestType) {\n    return rollTypes;\n  }\n  \n  const selectedOption = MODULE.ROLL_REQUEST_OPTIONS[selectedRequestType];\n  if (!selectedOption || !selectedOption.subList) {\n    return rollTypes;\n  }\n  \n  const configData = CONFIG.DND5E[selectedOption.subList];\n  \n  if (configData) {\n    for (const [key, data] of Object.entries(configData)) {\n      let label = data.label || data.name || key;\n      \n      if (selectedOption.subList === 'tools' && CONFIG.DND5E.enrichmentLookup?.tools?.[key]) {\n        const toolData = CONFIG.DND5E.enrichmentLookup.tools[key];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          label = toolItem?.name || label;\n        }\n      }\n      \n      rollTypes.push({\n        id: key,\n        name: label,\n        rollable: true\n      });\n    }\n    \n    rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n  }\n  \n  return rollTypes;\n}\n\n/**\n * Unified notification system with batching support\n */\nexport class NotificationManager {\n  static pendingNotifications = [];\n  static notificationTimer = null;\n  static NOTIFICATION_BATCH_DELAY = 500; // ms to wait for additional notifications\n  \n  /**\n   * Show a notification with optional batching for roll requests\n   * @param {string} type - Notification type (info, warn, error)\n   * @param {string} message - Message to display\n   * @param {Object} options - Options for the notification\n   * @param {boolean} options.batch - Whether to batch this notification\n   * @param {Object} options.batchData - Data for batched notifications\n   */\n  static notify(type, message, options = {}) {\n    if (!options.batch) {\n      ui.notifications[type](message);\n      return;\n    }\n    \n    if (options.batchData) {\n      NotificationManager.pendingNotifications.push(options.batchData);\n      \n      if (NotificationManager.notificationTimer) {\n        clearTimeout(NotificationManager.notificationTimer);\n      }\n      \n      NotificationManager.notificationTimer = setTimeout(() => {\n        showBatchedNotifications(NotificationManager.pendingNotifications);\n        NotificationManager.pendingNotifications = [];\n        NotificationManager.notificationTimer = null;\n      }, NotificationManager.NOTIFICATION_BATCH_DELAY);\n    }\n  }\n  \n  /**\n   * Show roll request sent notifications (GM side)\n   * @param {Object} requestsByPlayer - Grouped requests by player\n   * @param {string} rollTypeName - Display name of the roll type\n   */\n  static notifyRollRequestsSent(requestsByPlayer, rollTypeName) {\n    const successfulRequests = Object.entries(requestsByPlayer);\n    \n    if (successfulRequests.length === 0) return;\n    \n    // Single player, single actor\n    if (successfulRequests.length === 1) {\n      const playerData = Object.values(requestsByPlayer)[0];\n      const actorNames = playerData.actors.map(a => a.name).join(\", \");\n      ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.rollRequestsSentSingle\", { \n        rollType: rollTypeName,\n        actors: actorNames,\n        player: playerData.player.name\n      }));\n    } else {\n      // Multiple players\n      const playerSummaries = successfulRequests.map(([playerId, data]) => {\n        const actorNames = data.actors.map(a => a.name).join(\", \");\n        return `${data.player.name} (${actorNames})`;\n      });\n      ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.rollRequestsSentMultiple\", { \n        rollType: rollTypeName,\n        count: successfulRequests.length,\n        players: playerSummaries.join(\"; \")\n      }));\n    }\n  }\n  \n  /**\n   * Clear any pending notifications\n   */\n  static clearPending() {\n    if (NotificationManager.notificationTimer) {\n      clearTimeout(NotificationManager.notificationTimer);\n      NotificationManager.notificationTimer = null;\n    }\n    NotificationManager.pendingNotifications = [];\n  }\n}\n\n/**\n * Filter actors based on death save requirements\n * @param {Actor[]} actors - Array of actors to filter\n * @returns {Actor[]} Array of actors that need death saves\n */\nexport function filterActorsForDeathSaves(actors) {\n  const actorsNeedingDeathSaves = [];\n  const actorsSkippingDeathSaves = [];\n  \n  for (const actor of actors) {\n    const hp = actor.system.attributes.hp?.value || 0;\n    const deathSaves = actor.system.attributes.death || {};\n    const successes = deathSaves.success || 0;\n    const failures = deathSaves.failure || 0;\n    \n    // Check if actor needs a death save\n    if (hp <= 0 && successes < 3 && failures < 3) {\n      actorsNeedingDeathSaves.push(actor);\n    } else {\n      actorsSkippingDeathSaves.push(actor.name);\n    }\n  }\n  \n  // Notify about actors that don't need death saves\n  if (actorsSkippingDeathSaves.length > 0) {\n    NotificationManager.notify('info', game.i18n.format(\"FLASH_ROLLS.notifications.actorsSkippingDeathSave\", {\n      actors: actorsSkippingDeathSaves.join(\", \")\n    }));\n  }\n  \n  return actorsNeedingDeathSaves;\n}\n\n/**\n * Categorize actors by ownership (PC vs NPC)\n * @param {Actor[]} actors - Array of actors to categorize\n * @returns {{pcActors: Array, npcActors: Actor[]}} Object with categorized actors\n */\nexport function categorizeActorsByOwnership(actors) {\n  const pcActors = [];\n  const npcActors = [];\n  \n  for (const actor of actors) {\n    const owner = getPlayerOwner(actor);\n    if (owner) {\n      pcActors.push({ actor, owner });\n    } else {\n      npcActors.push(actor);\n    }\n  }\n  \n  return { pcActors, npcActors };\n}\n\nexport function addHDUpdate(updates, newUpdate){\n  const existingIndex = updates.findIndex(update => update._id === newUpdate._id);\n  if(existingIndex > -1){\n    updates[existingIndex] = foundry.utils.mergeObject(\n      updates[existingIndex],\n      newUpdate\n    )\n  }else{\n    updates.push(newUpdate);\n  }\n}\n\n/**\n * Adjust the offset vars for the roll menu based on the state of the roll privacy controls\n */\nexport function adjustMenuOffset(isExpanded=true){\n  const rollPrivacyVertical = document.querySelector('#chat-notifications #roll-privacy');\n  const controlsWidth = rollPrivacyVertical ? GeneralUtil.getFullWidth(rollPrivacyVertical) : 36;\n  const isCrlngnUIOn = document.querySelector('body.crlngn-tabs') ? true : false;\n  \n  GeneralUtil.addCSSVars('--flash-rolls-menu-offset', (isCrlngnUIOn ? controlsWidth : controlsWidth + 16) + 'px');\n}\n\n/**\n * Find the actor data from actor ID, token ID, or token document ID\n * @param {string} uniqueId - The ID of the actor, token, or token document\n * @returns {Actor|null} The actor document, or null if not found\n */\nexport function getActorData(uniqueId){\n  const actor = game.actors.get(uniqueId);\n  if (actor) return actor;\n  const token = canvas.tokens?.get(uniqueId);\n  const tokenDoc = game.scenes.active?.tokens.get(uniqueId);\n   \n  return actor || token?.actor || tokenDoc?.actor || null;\n}","import { LogUtil } from \"../LogUtil.mjs\";\nimport { ROLL_TYPES } from \"../../constants/General.mjs\";\nimport { getSettings } from \"../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../SettingsUtil.mjs\";\nimport { getPlayerOwner } from \"./Helpers.mjs\";\n\n/**\n * Helper functions for roll handling\n */\nexport const RollHelpers = {\n  /**\n   * Add situational bonus to a roll configuration\n   * @param {BasicRollProcessConfiguration} config - The process configuration with rolls array\n   * @param {string} situational - The situational bonus formula\n   * @returns {BasicRollProcessConfiguration} The modified config\n   */\n  addSituationalBonus(config, situational) {\n    LogUtil.log(\"Config before adding bonus:\", [situational, config]);\n    if (situational && config.rolls?.[0]) {\n      // Ensure the roll has proper structure\n      if (!config.rolls[0].parts) config.rolls[0].parts = [];\n      if (!config.rolls[0].data) config.rolls[0].data = {};\n      \n      config.rolls[0].data.situational = situational;\n      \n      // Only add @situational if it's not already in parts\n      if (!config.rolls[0].parts.includes(\"@situational\")) {\n        config.rolls[0].parts.push(\"@situational\");\n      }\n      LogUtil.log(\"Config after adding bonus:\", [config]);\n    }\n    // config.situational = situational;\n    return config;\n  },\n\n  /**\n   * Build base configuration for all roll types\n   * @param {Object} requestData - The roll request data\n   * @param {Object} requestData.config - Configuration from the request\n   * @param {boolean} [requestData.config.advantage] - Roll with advantage\n   * @param {boolean} [requestData.config.disadvantage] - Roll with disadvantage\n   * @param {string} [requestData.config.situational] - Situational bonus formula\n   * @param {number} [requestData.config.target] - DC value\n   * @param {string} [requestData.config.requestedBy] - Name of requester\n   * @param {BasicRollConfiguration} rollConfig - Individual roll configuration with parts[], data{}, options{}\n   * @param {string[]} [rollConfig.parts=[]] - Roll formula parts\n   * @param {Object} [rollConfig.data={}] - Roll data for formula resolution\n   * @param {Object} [rollConfig.options={}] - Roll options\n   * @param {Object} [additionalConfig={}] - Additional configuration specific to the roll type\n   * @returns {BasicRollProcessConfiguration} The process configuration for D&D5e actor roll methods\n   */\n  buildRollConfig(requestData, rollConfig, additionalConfig = {}) {\n    // Build BasicRollProcessConfiguration\n    const config = {\n      rolls: [{\n        parts: rollConfig.parts || [],\n        data: rollConfig.data || {},\n        options: {\n          ...rollConfig.options || {},\n          // Preserve the _fromFlashRolls flag if it exists\n          ...(rollConfig.options?._fromFlashRolls && { _fromFlashRolls: true })\n        }\n      }],\n      advantage: requestData.config.advantage || false,\n      disadvantage: requestData.config.disadvantage || false,\n      target: requestData.config.target,\n      subject: null,\n      chatMessage: true,\n      legacy: false,\n      // Include rollMode if it's in the config\n      ...(requestData.config.rollMode && { rollMode: requestData.config.rollMode }),\n      ...additionalConfig\n    };\n    \n    const situational = requestData.config.situational;\n    if (situational) {\n      this.addSituationalBonus(config, situational);\n    }\n    \n    return this.ensureRollFlags(config, requestData);\n  },\n\n  /**\n   * Ensure roll config has the required flags to prevent re-interception\n   * @param {BasicRollProcessConfiguration} config - The process configuration\n   * @param {Object} requestData - The roll request data\n   * @param {Object} requestData.config - Configuration object\n   * @param {string} [requestData.config.requestedBy] - Name of requester\n   * @returns {BasicRollProcessConfiguration} The updated config with required flags\n   */\n  ensureRollFlags(config, requestData) {\n    config.isRollRequest = game.user.isGM ? false : true;\n    config._showRequestedBy = true;\n    config._requestedBy = requestData.config.requestedBy || 'GM';\n\n    return config;\n  },\n\n  /**\n   * Validate and normalize actors array\n   * @param {Actor[]|string[]} actors - Array of Actor documents or actor IDs\n   * @returns {Actor[]|null} Array of valid actors or null if no valid actors\n   */\n  validateActors(actors) {\n    if (!actors || actors.length === 0) return null;\n    \n    // Convert actor IDs to Actor documents if needed\n    if (typeof actors[0] === 'string') {\n      actors = actors.map(actorId => game.actors.get(actorId)).filter(a => a);\n    }\n    \n    return actors.length > 0 ? actors : null;\n  },\n\n  /**\n   * Determine the appropriate roll class based on roll type\n   * @param {string} rollType - The type of roll\n   * @returns {typeof BasicRoll} The appropriate roll class\n   */\n  getRollClass(rollType) {\n    const normalizedType = rollType?.toLowerCase();\n    \n    if ([ROLL_TYPES.DAMAGE, ROLL_TYPES.HEALING].includes(normalizedType)) {\n      return CONFIG.Dice.DamageRoll || CONFIG.Dice.BasicRoll;\n    } else if ([ROLL_TYPES.FORMULA, ROLL_TYPES.CUSTOM, ROLL_TYPES.HIT_DIE].includes(normalizedType)) {\n      return CONFIG.Dice.BasicRoll;\n    }\n    \n    return CONFIG.Dice.D20Roll;\n  },\n\n  /**\n   * Check if DC field should be shown for a roll type\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} Whether to show DC field\n   */\n  shouldShowDC(rollType) {\n    const normalizedType = rollType?.toLowerCase();\n    return [\n      ROLL_TYPES.SAVE,\n      ROLL_TYPES.SAVING_THROW,\n      ROLL_TYPES.ABILITY,\n      ROLL_TYPES.ABILITY_CHECK,\n      ROLL_TYPES.CONCENTRATION,\n      ROLL_TYPES.SKILL,\n      ROLL_TYPES.TOOL\n    ].includes(normalizedType);\n  },\n\n  /**\n   * Create base roll configuration for dialog\n   * @param {Actor} actor - The actor to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @returns {Object} Base roll configuration\n   */\n  createBaseRollConfig(actor, rollType, rollKey) {\n    const normalizedType = rollType?.toLowerCase();\n    \n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    switch (normalizedType) {\n      case ROLL_TYPES.SKILL:\n        rollConfig.skill = rollKey;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollConfig.tool = rollKey;\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        rollConfig.ability = rollKey;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        rollConfig.rolls[0].options.flavor = \"Hit Die\";\n        break;\n    }\n    \n    return rollConfig;\n  },\n\n  /**\n   * Create standard message configuration\n   * @param {Actor} actor - The actor creating the message\n   * @param {string} [rollMode] - Optional roll mode to set\n   * @returns {Object} Message configuration\n   */\n  createMessageConfig(actor, rollMode = null) {\n    const config = {\n      create: false,\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    if (rollMode) {\n      config.rollMode = rollMode;\n    }\n    \n    return config;\n  },\n\n  /**\n   * Execute a roll dialog and return the result\n   * @param {Class} DialogClass - The dialog class to instantiate\n   * @param {Object} rollConfig - Roll configuration\n   * @param {Object} messageConfig - Message configuration\n   * @param {Object} dialogOptions - Dialog options\n   * @returns {Promise<Object|null>} Dialog result or null if cancelled\n   */\n  async triggerRollDialog(DialogClass, rollConfig, messageConfig, dialogOptions) {\n    const app = new DialogClass(rollConfig, messageConfig, dialogOptions);\n    \n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest,\n          critical: app.config.critical,\n          isCritical: app.config.isCritical\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    return result;\n  },\n\n  /**\n   * Process dialog result into final roll configuration\n   * @param {Object} result - Result from dialog\n   * @param {Actor[]} actors - Array of actors\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {Object} options - Additional options\n   * @returns {Object|null} Final roll process configuration or null if cancelled\n   */\n  processDialogResult(result, actors, rollType, rollKey, options = {}) {\n    // If no rolls or user cancelled\n    if (!result?.rolls || result.rolls.length === 0) return null;\n    \n    const normalizedType = rollType?.toLowerCase();\n    const firstRoll = result.rolls[0];\n    \n    // Extract advantage mode\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Extract roll data\n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    // Build roll process configuration\n    const rollProcessConfig = {\n      rolls: [{\n        parts: firstRoll?.parts?.slice() || [],\n        data: situational ? { situational } : {},\n        options: target ? { target } : {}\n      }],\n      subject: actors[0],\n      advantage,\n      disadvantage,\n      target,\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipRollDialog: options.skipRollDialog || false,\n      chatMessage: true\n    };\n    \n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = this.determineRollMode(isPublicRollsOn, result.message?.rollMode);\n    rollProcessConfig.rollMode = rollMode;\n    \n    if (result.config?.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedType)) {\n      rollProcessConfig.ability = result.config.ability;\n    }\n    \n    return rollProcessConfig;\n  },\n\n  /**\n   * Determine the final roll mode\n   * @param {boolean} isPublicRollsOn - Whether public rolls setting is enabled\n   * @param {string} messageRollMode - Roll mode from message (user's selection in dialog)\n   * @returns {string} Final roll mode\n   */\n  determineRollMode(isPublicRollsOn, messageRollMode) {\n    // If user explicitly selected a roll mode in the dialog, use it\n    if (messageRollMode) {\n      return messageRollMode;\n    }\n    \n    // Otherwise, use the default based on settings\n    return isPublicRollsOn ? \n      CONST.DICE_ROLL_MODES.PUBLIC : \n      game.settings.get(\"core\", \"rollMode\");\n  },\n\n  /**\n   * Check if actor is player owned\n   * @param {Actor} actor - The actor to check\n   * @returns {boolean} Whether the actor is player owned\n   */\n  isPlayerOwned(actor) {\n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  },\n\n  /**\n   * Check if actor is player owned\n   * @param {Actor} actor - The actor to check\n   * @returns {boolean} Whether the actor is player owned\n   */\n  isPlayerOwnerActive(actor) {\n    const playerOwner = getPlayerOwner(actor);\n    return playerOwner && playerOwner.active;\n  },\n\n  /* -------------------------------------------- */\n  /*  Group Roll Calculation Methods              */\n  /* -------------------------------------------- */\n\n  /**\n   * Calculate group roll result using Standard Rule - At least half the group must succeed\n   * @param {Object[]} rollResults - Array of roll results with { actorId, total, success, failure }\n   * @param {number} dc - The DC to check against\n   * @returns {Object} Result object with { finalResult, successes, failures, summary }\n   */\n  calculateStandardRule(rollResults, dc) {\n    const successes = rollResults.filter(r => r.total >= dc).length;\n    const failures = rollResults.length - successes;\n    const halfThreshold = Math.ceil(rollResults.length / 2);\n    \n    return {\n      finalResult: successes >= halfThreshold,\n      successes,\n      failures,\n      summary: game.i18n.format(\"FLASH_ROLLS.groupRoll.standardRule.summary\", {\n        successes,\n        total: rollResults.length,\n        threshold: halfThreshold\n      }),\n      method: 'Standard Rule'\n    };\n  },\n\n  /**\n   * Calculate group roll result using Group Average - Simple average of all rolls, rounded down\n   * @param {Object[]} rollResults - Array of roll results with { actorId, total }\n   * @param {number} dc - The DC to check against\n   * @returns {Object} Result object with { finalResult, average, success, summary }\n   */\n  calculateGroupAverage(rollResults, dc) {\n    const sum = rollResults.reduce((acc, r) => acc + r.total, 0);\n    const average = Math.floor(sum / rollResults.length);\n    \n    return {\n      finalResult: average,\n      average,\n      success: average >= dc,\n      summary: game.i18n.format(\"FLASH_ROLLS.groupRoll.groupAverage.summary\", {\n        average,\n        dc\n      }),\n      method: 'Group Average'\n    };\n  },\n\n  /**\n   * Calculate group roll result using Leader with Help - Result from actor with highest bonus, plus successes minus failures\n   * @param {Object[]} rollResults - Array of roll results with { actorId, total, modifier }\n   * @param {number} dc - The DC to check against\n   * @param {Actor[]} actors - Array of actors to get modifiers from\n   * @param {string} rollType - Type of roll (skill, save, ability)\n   * @param {string} rollKey - The specific roll key (e.g., 'ath', 'dex')\n   * @returns {Object} Result object with { finalResult, leaderRoll, bonus, penalty, success, summary }\n   */\n  calculateLeaderWithHelp(rollResults, dc, actors, rollType, rollKey) {\n    let highestModifier = -999;\n    let leaderActorId = null;\n    let leaderModifier = 0;\n    \n    for (const actor of actors) {\n      const modifier = this._getActorModifier(actor, rollType, rollKey);\n      if (modifier > highestModifier) {\n        highestModifier = modifier;\n        leaderActorId = actor.id;\n        leaderModifier = modifier;\n      }\n    }\n    \n    const leaderResult = rollResults.find(r => r.actorId === leaderActorId);\n    if (!leaderResult) {\n      return {\n        finalResult: 0,\n        error: 'Leader actor did not roll',\n        method: 'Leader with Help'\n      };\n    }\n    \n    // Count successes and failures (excluding the leader)\n    const otherResults = rollResults.filter(r => r.actorId !== leaderActorId);\n    const successes = otherResults.filter(r => r.total >= dc).length;\n    const failures = otherResults.filter(r => r.total < dc).length;\n    const adjustedResult = leaderResult.total + successes - failures;\n    \n    return {\n      finalResult: adjustedResult,\n      leaderRoll: leaderResult.total,\n      leaderName: actors.find(a => a.id === leaderActorId)?.name,\n      leaderModifier,\n      bonus: successes,\n      penalty: failures,\n      success: adjustedResult >= dc,\n      summary: game.i18n.format(\"FLASH_ROLLS.groupRoll.leaderWithHelp.summary\", {\n        leaderRoll: leaderResult.total,\n        bonus: successes,\n        penalty: failures,\n        adjustedResult,\n        dc\n      }),\n      method: 'Leader with Help'\n    };\n  },\n\n  /**\n   * Calculate group roll result using Weakest Link - Result from actor with lowest modifier, plus number of group successes\n   * @param {Object[]} rollResults - Array of roll results with { actorId, total }\n   * @param {number} dc - The DC to check against\n   * @param {Actor[]} actors - Array of actors to get modifiers from\n   * @param {string} rollType - Type of roll (skill, save, ability)\n   * @param {string} rollKey - The specific roll key (e.g., 'ath', 'dex')\n   * @returns {Object} Result object with { finalResult, weakestRoll, bonus, success, summary }\n   */\n  calculateWeakestLink(rollResults, dc, actors, rollType, rollKey) {\n    let lowestModifier = 999;\n    let weakestActorId = null;\n    let weakestModifierValue = 0;\n    \n    for (const actor of actors) {\n      const modifier = this._getActorModifier(actor, rollType, rollKey);\n      if (modifier < lowestModifier) {\n        lowestModifier = modifier;\n        weakestActorId = actor.id;\n        weakestModifierValue = modifier;\n      }\n    }\n    \n    const weakestResult = rollResults.find(r => r.actorId === weakestActorId);\n    if (!weakestResult) {\n      return {\n        finalResult: 0,\n        error: 'Weakest link actor did not roll',\n        method: 'Weakest Link'\n      };\n    }\n    \n    // Count successes excluding the weakest actor\n    const successes = rollResults.filter(r => r.actorId !== weakestActorId && r.total >= dc).length;\n    const adjustedResult = weakestResult.total + successes;\n    \n    const successWord = successes === 1 ? \n      game.i18n.localize(\"FLASH_ROLLS.groupRoll.weakestLink.successSingular\") : \n      game.i18n.localize(\"FLASH_ROLLS.groupRoll.weakestLink.successPlural\");\n    \n    return {\n      finalResult: adjustedResult,\n      weakestRoll: weakestResult.total,\n      weakestName: actors.find(a => a.id === weakestActorId)?.name,\n      weakestModifier: weakestModifierValue,\n      bonus: successes,\n      success: adjustedResult >= dc,\n      summary: game.i18n.format(\"FLASH_ROLLS.groupRoll.weakestLink.summary\", {\n        weakestRoll: weakestResult.total,\n        bonus: successes,\n        successWord,\n        adjustedResult,\n        dc\n      }),\n      method: 'Weakest Link'\n    };\n  },\n\n  /**\n   * Get the modifier for a specific roll type and key from an actor\n   * @private\n   * @param {Actor} actor - The actor to get the modifier from\n   * @param {string} rollType - Type of roll (skill, save, ability)\n   * @param {string} rollKey - The specific roll key\n   * @returns {number} The modifier value\n   */\n  _getActorModifier(actor, rollType, rollKey) {\n    const normalizedType = rollType?.toLowerCase();\n    \n    switch (normalizedType) {\n      case ROLL_TYPES.SKILL:\n        return actor.system.skills[rollKey]?.total || \n               actor.system.skills[rollKey]?.mod || 0;\n      \n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        // Support both old and new D&D 5e data structure\n        return actor.system.abilities[rollKey]?.save?.value || \n               actor.system.abilities[rollKey]?.save || 0;\n      \n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        return actor.system.abilities[rollKey]?.mod || 0;\n      \n      case ROLL_TYPES.TOOL:\n        if (actor.system.tools?.[rollKey]) {\n          return actor.system.tools[rollKey].total || \n                 actor.system.tools[rollKey].mod || 0;\n        }\n        const tool = actor.items.find(i => \n          i.type === 'tool' && \n          i.system.toolType === rollKey\n        );\n        return tool?.system.bonus || 0;\n      \n      default:\n        return 0;\n    }\n  },\n\n  /**\n   * Get the group roll result based on the selected calculation method\n   * @param {Object[]} rollResults - Array of roll results with { actorId, total }\n   * @param {number} dc - The DC to check against\n   * @param {Actor[]} actors - Array of actors (needed for some methods)\n   * @param {string} rollType - Type of roll (needed for modifier calculation)\n   * @param {string} rollKey - The specific roll key (needed for modifier calculation)\n   * @returns {Object} Result object with { complete, success, result }\n   */\n  getGroupResult(rollResults, dc, actors, rollType, rollKey) {\n    const complete = rollResults.every(r => r.total !== null && r.total !== undefined);\n    \n    if (!complete) {\n      return {\n        complete: false,\n        success: false,\n        result: 0\n      };\n    }\n\n    const SETTINGS = getSettings();\n    const resultMode = SettingsUtil.get(SETTINGS.groupRollResultMode.tag) || 1;\n    \n    let calculationResult;\n    \n    switch (resultMode) {\n      case 1: // Standard Rule\n        calculationResult = this.calculateStandardRule(rollResults, dc);\n        return {\n          complete: true,\n          success: calculationResult.finalResult,\n          result: calculationResult.finalResult ? 1 : 0,\n          details: calculationResult\n        };\n        \n      case 2: // Group Average\n        calculationResult = this.calculateGroupAverage(rollResults, dc);\n        return {\n          complete: true,\n          success: calculationResult.success,\n          result: calculationResult.finalResult,\n          details: calculationResult\n        };\n        \n      case 3: // Leader with Help\n        calculationResult = this.calculateLeaderWithHelp(rollResults, dc, actors, rollType, rollKey);\n        return {\n          complete: true,\n          success: calculationResult.success,\n          result: calculationResult.finalResult,\n          details: calculationResult\n        };\n        \n      case 4: // Weakest Link\n        calculationResult = this.calculateWeakestLink(rollResults, dc, actors, rollType, rollKey);\n        return {\n          complete: true,\n          success: calculationResult.success,\n          result: calculationResult.finalResult,\n          details: calculationResult\n        };\n        \n      default:\n        calculationResult = this.calculateStandardRule(rollResults, dc);\n        return {\n          complete: true,\n          success: calculationResult.finalResult,\n          result: calculationResult.finalResult ? 1 : 0,\n          details: calculationResult\n        };\n    }\n  }\n};\n\n","import { MODULE } from \"../../constants/General.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\n\n/**\n * Custom Roll Dialog - ApplicationV2 component for custom roll formulas\n */\nconst { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api;\nexport class CustomRollDialog extends HandlebarsApplicationMixin(ApplicationV2) {\n  constructor(options = {}) {\n    super(options);\n    this.formula = options.formula || \"\";\n    this.readonly = options.readonly || false;\n    this.actor = options.actor;\n    this.callback = options.callback;\n    this.diceCounts = {};\n  }\n\n  /**\n   * Default application configuration\n   */\n  static get DEFAULT_OPTIONS() {\n    return foundry.utils.mergeObject(super.DEFAULT_OPTIONS, {\n      id: \"flash5e-custom-roll-dialog\",\n      classes: [\"flash5e-dialog\", \"flash5e-custom-roll-dialog\"],\n      tag: \"div\",\n      window: {\n        title: \"FLASH_ROLLS.ui.dialogs.customRollTitle\",\n        icon: \"fas fa-dice-d20\",\n        resizable: false,\n        positioned: true,\n        frame: true\n      },\n      position: {\n        width: 420,\n        height: \"auto\"\n      }\n    });\n  }\n  \n  /**\n   * Override to handle action clicks\n   */\n  _onClickAction(event, target) {\n    const action = target.dataset.action;\n    switch (action) {\n      case \"rollDice\":\n        return this.rollDice(event, target);\n      case \"addDie\":\n        return this.addDie(event, target);\n      case \"cancel\":\n        return this.cancel(event, target);\n    }\n  }\n\n  /**\n   * Prepare application rendering context\n   */\n  async _prepareContext(options = {}) {\n    const context = await super._prepareContext(options);\n    return {\n      ...context,\n      formula: this.formula,\n      readonly: this.readonly\n    };\n  }\n\n  /**\n   * Define template parts\n   */\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/custom-roll-dialog.hbs`\n    },\n    footer: {\n      template: `modules/${MODULE.ID}/templates/custom-roll-dialog-footer.hbs`\n    }\n  };\n\n  /**\n   * Add event listeners\n   */\n  _attachPartListeners(partId, htmlElement, options) {\n    super._attachPartListeners(partId, htmlElement, options);\n    \n    const formulaInput = htmlElement.querySelector('#custom-roll-formula');\n    const validationMessage = htmlElement.querySelector('#formula-validation-message');\n    \n    if (formulaInput && !this.readonly) {\n      formulaInput.addEventListener('input', (event) => {\n        this.formula = event.target.value.trim();\n        this.updateValidationMessage(validationMessage);\n      });\n      \n      if (this.formula) {\n        this.updateValidationMessage(validationMessage);\n      }\n    }\n  }\n  \n  /**\n   * Update the validation message based on formula validity\n   * @param {HTMLElement} messageElement - The validation message element\n   */\n  updateValidationMessage(messageElement) {\n    if (!messageElement) return;\n    \n    if (!this.formula) {\n      messageElement.textContent = '&nbsp;';\n      messageElement.classList.remove('error', 'success');\n      return;\n    }\n    \n    const isValid = this.validateFormula(this.formula);\n    \n    if (isValid) {\n      messageElement.textContent = game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.formulaValid\");\n      messageElement.classList.remove('error');\n      messageElement.classList.add('success');\n    } else {\n      messageElement.textContent = game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.formulaInvalid\");\n      messageElement.classList.remove('success');\n      messageElement.classList.add('error');\n    }\n  }\n\n  /**\n   * Handle dice button click\n   * @param {Event} event\n   * @param {HTMLElement} target\n   */\n  addDie(event, target) {\n    const die = target.dataset.die;\n    \n    const formulaInput = this.element.querySelector('#custom-roll-formula');\n    if (!formulaInput) return;\n    \n    const currentFormula = formulaInput.value.trim();\n    \n    if (currentFormula) {\n      const diceRegex = /(\\d*)d(\\d+)/g;\n      const diceMap = new Map();\n      \n      let remainingFormula = currentFormula;\n      let match;\n      \n      while ((match = diceRegex.exec(currentFormula)) !== null) {\n        const count = parseInt(match[1] || '1');\n        const dieType = match[2];\n        diceMap.set(dieType, (diceMap.get(dieType) || 0) + count);\n        remainingFormula = remainingFormula.replace(match[0], '').trim();\n      }\n      \n      const newDieType = die.substring(1); // Remove 'd' prefix\n      diceMap.set(newDieType, (diceMap.get(newDieType) || 0) + 1);\n      \n      const diceParts = [];\n      for (const [dieType, count] of diceMap) {\n        diceParts.push(`${count}d${dieType}`);\n      }\n      \n      remainingFormula = remainingFormula.replace(/^\\+\\s*|\\s*\\+\\s*$|\\s*\\+\\s*\\+/g, '').trim();\n      \n      if (remainingFormula && remainingFormula !== '+') {\n        this.formula = `${diceParts.join(' + ')} + ${remainingFormula}`;\n      } else {\n        this.formula = diceParts.join(' + ');\n      }\n    } else {\n      this.formula = `1${die}`;\n    }\n    formulaInput.value = this.formula;\n    \n    formulaInput.dispatchEvent(new Event('input'));\n  }\n\n  /**\n   * Validate the formula using Roll.validate\n   * @param {string} formula\n   * @returns {boolean}\n   */\n  validateFormula(formula) {\n    if (!formula || formula.trim() === \"\") return false;\n    \n    try {\n      return Roll.validate(formula);\n    } catch (error) {\n      try {\n        new Roll(formula, this.actor?.getRollData() || {});\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Handle roll button click\n   */\n  async rollDice() {\n    LogUtil.log('rollDice');\n    if (!this.validateFormula(this.formula)) {\n      ui.notifications.error(game.i18n.format(\"FLASH_ROLLS.notifications.invalidFormula\", {\n        formula: this.formula || \"empty\"\n      }));\n      return;\n    }\n    \n    if (this.callback) {\n      await this.callback(this.formula);\n    }\n    \n    this.close();\n  }\n\n  /**\n   * Handle cancel button click\n   */\n  cancel() {\n    this.close();\n  }\n\n  /**\n   * Show the dialog and return a promise for the formula\n   * @param {Object} options\n   * @returns {Promise<string|null>}\n   */\n  static async prompt(options = {}) {\n    return new Promise((resolve) => {\n      const dialog = new this({\n        ...options,\n        callback: (formula) => resolve(formula)\n      });\n      \n      dialog.addEventListener(\"close\", () => {\n        if (!dialog._resolved) {\n          resolve(null);\n        }\n      });\n      \n      dialog.render(true);\n    });\n  }\n\n  /**\n   * Override close to track resolution\n   */\n  async close(options = {}) {\n    this._resolved = true;\n    return super.close(options);\n  }\n}","import { HOOKS_CORE } from \"../constants/Hooks.mjs\";\nimport { MODULE_ID, ROLL_TYPES } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { GeneralUtil } from \"./helpers/GeneralUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { RollHelpers } from \"./helpers/RollHelpers.mjs\";\nimport { RollHandlers } from \"./RollHandlers.mjs\";\n\n/**\n * Utility class for managing group roll chat messages\n */\nexport class ChatMessageUtils {\n  /**\n   * Map of requestId to chat message document\n   * @type {Map<string, ChatMessage>}\n   */\n  static groupRollMessages = new Map();\n  \n  /**\n   * Map of requestId to pending roll data\n   * @type {Map<string, Object>}\n   */\n  static pendingRolls = new Map();\n  \n  /**\n   * Set of message IDs that are scheduled for deletion\n   * @type {Set<string>}\n   */\n  static messagesScheduledForDeletion = new Set();\n  \n  /**\n   * Queue for serializing group message updates\n   * @type {Map<string, Promise>}\n   */\n  static updateQueue = new Map();\n  \n  /**\n   * Path to the group roll template\n   * @type {string}\n   */\n  static templatePath = 'modules/flash-rolls-5e/templates/chat-msg-group-roll.hbs';\n  \n  /**\n   * Initialize the ChatMessageUtils\n   */\n  static async initialize() {\n    LogUtil.log('ChatMessageUtils.initialize');\n    await this.preloadTemplate();\n    this.registerEventListeners();\n  }\n  \n  /**\n   * Register event listeners for group roll messages\n   */\n  static registerEventListeners() {\n    const attachGroupRollListeners = (html, message) => {\n      html.querySelectorAll('.actor-result').forEach(element => {\n        element.addEventListener('click', (event) => {\n          if (event.target.closest('.dice-btn.rollable')) {\n            return;\n          }\n          \n          event.preventDefault();\n          event.stopPropagation();\n          \n          const actorResult = element;\n          \n          LogUtil.log('actor-result click', [element]);\n\n          if (actorResult.classList.contains('expanded')) {\n            actorResult.classList.remove('expanded');\n          } else {\n            actorResult.classList.add('expanded');\n          }\n        });\n      });\n      \n      html.querySelectorAll('.dice-btn.rollable').forEach(diceBtn => {\n        diceBtn.addEventListener('click', async (event) => {\n          event.preventDefault();\n          event.stopPropagation();\n          event.stopImmediatePropagation();\n          \n          const dataset = diceBtn.dataset;\n          const actorId = dataset.actorId;\n          const actor = game.actors.get(actorId);\n          \n          if (!actor) {\n            ui.notifications.warn(`Actor not found`);\n            return;\n          }\n          \n          const canRoll = game.user.isGM || actor.isOwner;\n          if (!canRoll) {\n            ui.notifications.warn(`You don't have permission to roll for ${actor.name}`);\n            return;\n          }\n          \n          const rollType = dataset.type?.toLowerCase();\n          const rollKey = dataset.rollKey;\n          const groupRollId = dataset.groupRollId;\n          const dc = dataset.dc ? parseInt(dataset.dc) : null;\n          \n          LogUtil.log('Rollable dice clicked', [rollType, rollKey, actorId, groupRollId]);\n          \n          const requestData = {\n            rollKey: rollKey,\n            groupRollId: groupRollId,\n            config: {\n              advantage: false,\n              disadvantage: false,\n              target: dc,\n              rollMode: game.settings.get(\"core\", \"rollMode\")\n            }\n          };\n          \n          // Dialog configuration - show dialog for rolls\n          const dialogConfig = {\n            configure: true,\n            isRollRequest: true\n          };\n          \n          const messageConfig = {\n            rollMode: game.settings.get(\"core\", \"rollMode\"),\n            create: true,\n            isRollRequest: true\n          };\n          \n          const rollConfig = {\n            parts: [],\n            data: {},\n            options: {}\n          };\n          \n          try {\n            const handler = RollHandlers[rollType];\n            if (handler) {\n              await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n            } else {\n              let rollMethod;\n              switch(rollType) {\n                case ROLL_TYPES.SKILL:\n                  rollMethod = 'rollSkill';\n                  break;\n                case ROLL_TYPES.ABILITY:\n                case ROLL_TYPES.ABILITY_CHECK:\n                  rollMethod = 'rollAbilityTest';\n                  break;\n                case ROLL_TYPES.SAVE:\n                case ROLL_TYPES.SAVING_THROW:\n                  rollMethod = 'rollAbilitySave';\n                  break;\n                case ROLL_TYPES.TOOL:\n                  rollMethod = 'rollToolCheck';\n                  break;\n                default:\n                  ui.notifications.warn(`Unknown roll type: ${rollType}`);\n                  return;\n              }\n              \n              if (rollMethod && actor[rollMethod]) {\n                await actor[rollMethod](rollKey, {\n                  ...requestData.config,\n                  messageOptions: { \"flags.flash-rolls-5e.groupRollId\": groupRollId }\n                });\n              }\n            }\n          } catch (error) {\n            LogUtil.error('Error executing roll from chat', error);\n            ui.notifications.error(`Failed to execute roll: ${error.message}`);\n          }\n        });\n      });\n      \n      // Handle DC control visibility and input\n      const dcControl = html.querySelector('.group-roll-dc-control');\n      const dcInput = html.querySelector('.dc-input');\n      \n      if (dcControl) {\n        const showToPlayers = dcControl.dataset.showToPlayers === 'true';\n        if (!game.user.isGM) {\n          dcControl.style.display = 'none';\n        }\n        if (!game.user.isGM && !showToPlayers) {\n          const groupFooterDetails = html.querySelector('.group-roll-footer .group-result-details');\n          if (groupFooterDetails) {\n            groupFooterDetails.style.display = 'none';\n          }\n        }\n      }\n      \n      if (dcInput) {\n        if (!game.user.isGM) {\n          dcInput.readOnly = true;\n          dcInput.style.cursor = 'not-allowed';\n        } else {\n          let debounceTimer = null;\n          \n          const handleDCChange = async () => {\n            const newDC = parseInt(dcInput.value);\n            \n            if (!dcInput.value) return;\n            \n            if (isNaN(newDC) || newDC < 1 || newDC > 99) {\n              dcInput.value = '';\n              return;\n            }\n            \n            const messageId = dcInput.dataset.messageId;\n            const targetMessage = game.messages.get(messageId);\n            \n            if (targetMessage) {\n              await this.updateGroupRollDC(targetMessage, newDC);\n            }\n          };\n          \n          dcInput.addEventListener('input', (e) => {\n            if (debounceTimer) {\n              clearTimeout(debounceTimer);\n            }\n            \n            debounceTimer = setTimeout(() => {\n              handleDCChange();\n            }, 750);\n          });\n          \n          dcInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n              if (debounceTimer) {\n                clearTimeout(debounceTimer);\n              }\n              handleDCChange();\n            }\n          });\n        }\n      }\n    };\n    \n    Hooks.on(HOOKS_CORE.RENDER_CHAT_MESSAGE, (message, html) => {\n      if (!message.getFlag(MODULE_ID, 'isGroupRoll')) return;\n      attachGroupRollListeners(html, message);\n    });\n    \n    Hooks.on(HOOKS_CORE.RENDER_CHAT_LOG, (app, html) => {\n      const groupRollElements = html.querySelectorAll('.flash5e-group-roll');\n      groupRollElements.forEach(element => {\n        const messageElement = element.closest('.chat-message');\n        if (messageElement) {\n          const messageId = messageElement.dataset.messageId;\n          const message = game.messages.get(messageId);\n          if (message && message.getFlag(MODULE_ID, 'isGroupRoll')) {\n            attachGroupRollListeners(element, message);\n          }\n        }\n      });\n    });\n  }\n  \n  /**\n   * Preload the Handlebars template\n   */\n  static async preloadTemplate() {\n    LogUtil.log('ChatMessageUtils.preloadTemplate');\n    try {\n      await GeneralUtil.loadTemplates([this.templatePath]);\n    } catch (error) {\n      LogUtil.error('Failed to preload template', error);\n    }\n  }\n  \n  /**\n   * Create a group roll message for multiple actors\n   * @param {Array<{actor: Actor, uniqueId: string, tokenId: string|null}>} actorEntries - Array of actor entries with unique identifiers\n   * @param {string} rollType - Type of roll\n   * @param {string} rollKey - Specific roll key\n   * @param {Object} config - Roll configuration\n   * @param {string} groupRollId - Unique group roll identifier\n   * @returns {Promise<ChatMessage>} The created chat message\n   */\n  static async createGroupRollMessage(actorEntries, rollType, rollKey, config, groupRollId) {\n    LogUtil.log('ChatMessageUtils.createGroupRollMessage', [actorEntries.length, rollType, rollKey, groupRollId]);\n    \n    const data = this.buildGroupRollData(actorEntries, rollType, rollKey, config);\n    if (!data) {\n      LogUtil.error('createGroupRollMessage - Failed to build group roll data');\n      return null;\n    }\n    data.groupRollId = groupRollId;\n    const validEntries = actorEntries.filter(entry => entry && entry.actor);\n    const hasPlayerOwnedActor = validEntries.some(entry => RollHelpers.isPlayerOwnerActive(entry.actor));\n    const rollMode = hasPlayerOwnedActor ? \n      CONST.DICE_ROLL_MODES.PUBLIC : \n      game.settings.get(\"core\", \"rollMode\");\n    \n    this.pendingRolls.set(groupRollId, {\n      actorEntries: validEntries.map(entry => ({ actorId: entry.actor.id, uniqueId: entry.uniqueId, tokenId: entry.tokenId })),\n      rollType,\n      rollKey,\n      config,\n      results: new Map()\n    });\n    \n    const message = await this.postGroupMessage(data, rollMode);    \n    return message;\n  }\n  \n  /**\n   * Build the data object for the group roll template\n   * @param {Array<{actor: Actor, uniqueId: string, tokenId: string|null}>} actorEntries - Array of actor entries with unique identifiers\n   * @param {string} rollType - Type of roll\n   * @param {string} rollKey - Specific roll key\n   * @param {Object} config - Roll configuration\n   * @returns {Object} Template data\n   */\n  static buildGroupRollData(actorEntries, rollType, rollKey, config) {\n    LogUtil.log('ChatMessageUtils.buildGroupRollData', [actorEntries.length, rollType, rollKey, config]);\n    LogUtil.log('ChatMessageUtils.buildGroupRollData - actorEntries structure', actorEntries.map(entry => ({\n      hasEntry: !!entry,\n      hasActor: !!(entry && entry.actor),\n      entryKeys: entry ? Object.keys(entry) : 'null',\n      actorType: entry?.actor?.constructor?.name || 'undefined'\n    })));\n    \n    const validEntries = actorEntries.filter(entry => entry && entry.actor);\n    if (validEntries.length === 0) {\n      LogUtil.error('buildGroupRollData - No valid actor entries found', [actorEntries]);\n      return null;\n    }\n    \n    let flavor = this._buildFlavorText(rollType, rollKey, config);\n    const dc = config?.dc || config?.target;\n    const results = validEntries.map(entry => ({\n      actorId: entry.actor.id,\n      uniqueId: entry.uniqueId,\n      tokenId: entry.tokenId,\n      actorImg: entry.actor.img || entry.actor.prototypeToken?.texture?.src || 'icons/svg/mystery-man.svg',\n      actorName: entry.tokenId ? \n        (canvas.tokens?.get(entry.tokenId)?.name || entry.actor.name) : \n        entry.actor.name,\n      rolled: false,\n      showDice: true,\n      total: null,\n      success: false,\n      failure: false\n    }));\n    \n    const supportsDC = RollHelpers.shouldShowDC(rollType);\n    const SETTINGS = getSettings();\n    const showDCToPlayers = SettingsUtil.get(SETTINGS.showGroupDCToPlayers.tag);\n    \n    return {\n      flavor,\n      results,\n      showDC: dc !== undefined && dc !== null,\n      dc,\n      rollType,\n      rollKey,\n      supportsDC,\n      showDCToPlayers,\n      actorEntries: validEntries.map(entry => ({ actorId: entry.actor.id, uniqueId: entry.uniqueId, tokenId: entry.tokenId })),\n      moduleId: MODULE_ID\n    };\n  }\n  \n  /**\n   * Build flavor text for the roll\n   * @private\n   */\n  static _buildFlavorText(rollType, rollKey, config) {\n    let flavor = '';\n    \n    switch(rollType?.toLowerCase()) {\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        const abilityLabel = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        flavor = game.i18n.format(\"DND5E.AbilityPromptTitle\", { ability: abilityLabel });\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        const saveLabel = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        flavor = game.i18n.format(\"DND5E.SavePromptTitle\", { ability: saveLabel });\n        break;\n      case ROLL_TYPES.SKILL:\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        const skillAbility = config?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n        const skillAbilityLabel = CONFIG.DND5E.abilities[skillAbility]?.label || skillAbility;\n        flavor = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: skillAbilityLabel\n        });\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        const toolAbility = config?.ability || toolData?.ability || 'int';\n        const toolAbilityLabel = CONFIG.DND5E.abilities[toolAbility]?.label || toolAbility;\n        flavor = game.i18n.format(\"DND5E.ToolPromptTitle\", { \n          tool: toolLabel, \n          ability: toolAbilityLabel \n        });\n        break;\n      case ROLL_TYPES.CONCENTRATION:\n        flavor = game.i18n.localize(\"DND5E.ConcentrationBreaking\") || \"Concentration\";\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        flavor = game.i18n.localize(\"DND5E.DeathSave\") || \"Death Saving Throw\";\n        break;\n      case ROLL_TYPES.HIT_DIE:\n      case 'hitdice':\n        flavor = game.i18n.localize(\"DND5E.HitDice\") || \"Hit Dice\";\n        break;\n      case ROLL_TYPES.HEALING:\n        flavor = config?.flavor || game.i18n.localize(\"DND5E.Healing\") || \"Healing\";\n        break;\n      case ROLL_TYPES.CUSTOM:\n        flavor = config?.flavor || rollKey || game.i18n.localize(\"DND5E.Roll\") || \"Custom Roll\";\n        break;\n      case ROLL_TYPES.FORMULA:\n        flavor = config?.flavor || rollKey || game.i18n.localize(\"DND5E.Roll\") || \"Custom Formula\";\n        break;\n      case ROLL_TYPES.ITEM_SAVE:\n        flavor = config?.flavor || game.i18n.localize(\"DND5E.SavingThrow\") || \"Saving Throw\";\n        break;\n      case ROLL_TYPES.INITIATIVE:\n        flavor = game.i18n.localize(\"DND5E.Initiative\");\n        break;\n      case ROLL_TYPES.ATTACK:\n        flavor = config?.flavor || game.i18n.localize(\"DND5E.Attack\") || \"Attack Roll\";\n        break;\n      case ROLL_TYPES.DAMAGE:\n        flavor = config?.flavor || game.i18n.localize(\"DND5E.Damage\") || \"Damage Roll\";\n        break;\n      default:\n        flavor = config?.flavor || \"Roll\";\n    }\n    \n    return flavor;\n  }\n  \n  /**\n   * Post a group message to chat\n   * @param {Object} data - Message data\n   * @param {string} [rollMode] - The roll mode for the message\n   * @returns {Promise<ChatMessage>} The created message\n   */\n  static async postGroupMessage(data, rollMode = null) {\n    LogUtil.log('postGroupMessage - groupRollId', [data.groupRollId, rollMode]);\n    \n    try {\n      const content = await GeneralUtil.renderTemplate(this.templatePath, data);\n      const messageData = {\n        content,\n        speaker: {\n          alias: \"Group Roll\"\n        },\n        flags: {\n          [MODULE_ID]: {\n            isGroupRoll: true,\n            groupRollId: data.groupRollId,\n            rollData: data\n          }\n        }\n      };\n      if (rollMode) {\n        ChatMessage.applyRollMode(messageData, rollMode);\n      }\n      \n      const msg = await ChatMessage.create(messageData);\n      this.groupRollMessages.set(data.groupRollId, msg);\n      return msg;\n    } catch (error) {\n      LogUtil.error('Failed to post group message', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Update a group roll message with a completed roll result\n   * @param {string} groupRollId - The group roll identifier\n   * @param {string} uniqueId - The unique identifier (token ID or actor ID) who rolled\n   * @param {Roll} roll - The completed roll\n   */\n  static async updateGroupRollMessage(groupRollId, uniqueId, roll) {\n    LogUtil.log('ChatMessageUtils.updateGroupRollMessage', [groupRollId, uniqueId, roll ]);\n    \n    if (!game.user.isGM) {\n      return;\n    }\n    \n    const currentUpdate = this.updateQueue.get(groupRollId) || Promise.resolve();\n    const nextUpdate = currentUpdate.then(() => this._performGroupRollUpdate(groupRollId, uniqueId, roll));\n    this.updateQueue.set(groupRollId, nextUpdate);\n    \n    return nextUpdate;\n  }\n  \n  /**\n   * Internal method to perform the actual group roll update\n   * @param {string} groupRollId - The group roll identifier\n   * @param {string} uniqueId - The unique identifier (token ID or actor ID) who rolled\n   * @param {Roll} roll - The completed roll\n   * @private\n   */\n  static async _performGroupRollUpdate(groupRollId, uniqueId, roll) {\n    \n    let message = this.groupRollMessages.get(groupRollId);\n    let pendingData = this.pendingRolls.get(groupRollId);\n    \n    if (!message) {\n      const messages = game.messages.contents;\n      message = messages.find(m => \n        m.getFlag(MODULE_ID, 'groupRollId') === groupRollId &&\n        m.getFlag(MODULE_ID, 'isGroupRoll')\n      );\n      \n      if (message) {\n        this.groupRollMessages.set(groupRollId, message);\n        LogUtil.log('updateGroupRollMessage - Found and registered group message', [groupRollId]);\n        \n        if (!pendingData) {\n          const flagData = message.getFlag(MODULE_ID, 'rollData');\n          pendingData = {\n            actorEntries: flagData.actorEntries || flagData.results.map(r => ({ actorId: r.actorId, uniqueId: r.uniqueId, tokenId: r.tokenId })),\n            results: new Map()\n          };\n          this.pendingRolls.set(groupRollId, pendingData);\n        }\n      }\n    }\n    \n    if (!message) {\n      LogUtil.log('No group message found for groupRollId', groupRollId);\n      return;\n    }\n    \n    // Store the result if pendingData exists\n    if (pendingData && pendingData.results) {\n      pendingData.results.set(uniqueId, {\n        total: roll.total,\n        roll: roll\n      });\n    }\n    \n    const flagData = message.getFlag(MODULE_ID, 'rollData');\n    \n    let resultIndex = flagData.results.findIndex(r => r.uniqueId === uniqueId);\n    \n    // If no match found by uniqueId, try multiple fallback strategies\n    if (resultIndex === -1) {\n      // Strategy 1: Try matching by actorId directly\n      resultIndex = flagData.results.findIndex(r => r.actorId === uniqueId);\n      \n      // Strategy 2: If uniqueId is a tokenId, try finding by tokenId property\n      if (resultIndex === -1) {\n        resultIndex = flagData.results.findIndex(r => r.tokenId === uniqueId);\n      }\n      \n      // Strategy 3: Try extracting actorId from speaker and match that\n      if (resultIndex === -1 && message.speaker?.actor) {\n        const speakerActorId = message.speaker.actor;\n        resultIndex = flagData.results.findIndex(r => r.actorId === speakerActorId);\n      }\n    }\n    \n    if (resultIndex !== -1) {\n      flagData.results[resultIndex].rolled = true;\n      flagData.results[resultIndex].showDice = false;\n      flagData.results[resultIndex].total = roll.total;\n      \n      try {\n        let rollBreakdown = await roll.render();\n        // Remove the dice total element to avoid redundancy in group roll messages\n        // const tempDiv = document.createElement('div');\n        // tempDiv.innerHTML = rollBreakdown;\n        // const diceTotal = tempDiv.querySelector('.dice-tooltip .total');\n        // if (diceTotal) {\n        //   diceTotal.remove();\n        // }\n        flagData.results[resultIndex].rollBreakdown = rollBreakdown;\n      } catch (error) {\n        LogUtil.error('Error rendering roll breakdown', error);\n        flagData.results[resultIndex].rollBreakdown = null;\n      }\n      \n      if (flagData.showDC && flagData.dc) {\n        flagData.results[resultIndex].success = roll.total >= flagData.dc;\n        flagData.results[resultIndex].failure = roll.total < flagData.dc;\n      }\n    }\n    \n    flagData.allRolled = flagData.results.every(r => r.rolled);\n    flagData.messageId = message.id;\n    \n    flagData.supportsDC = RollHelpers.shouldShowDC(flagData.rollType);\n    \n    const SETTINGS = getSettings();\n    flagData.showDCToPlayers = SettingsUtil.get(SETTINGS.showGroupDCToPlayers.tag);\n    \n    // Calculate group result if DC is set and roll type supports it\n    if (flagData.supportsDC && flagData.showDC && flagData.dc) {\n      const actors = flagData.actorEntries?.map(entry => game.actors.get(entry.actorId)).filter(a => a) || \n                     flagData.actors?.map(id => game.actors.get(id)).filter(a => a) || [];\n      \n      const groupResult = RollHelpers.getGroupResult(\n        flagData.results,\n        flagData.dc,\n        actors,\n        flagData.rollType,\n        flagData.rollKey\n      );\n      \n      flagData.groupResult = groupResult;\n      LogUtil.log('updateGroupRollMessage - COMPLETE?', [groupResult.complete]);\n      \n      if (groupResult.complete && groupResult.details) {\n        flagData.groupSummary = groupResult.details.summary;\n      }\n    }\n    \n    const newContent = await GeneralUtil.renderTemplate(this.templatePath, flagData);\n    await message.update({\n      content: newContent,\n      flags: {\n        [MODULE_ID]: {\n          rollData: flagData\n        }\n      }\n    });\n    \n    if (pendingData?.results && pendingData?.actorEntries) {\n      if (pendingData.results.size === pendingData.actorEntries.length) {\n        this.pendingRolls.delete(groupRollId);\n        setTimeout(() => {\n          this.groupRollMessages.delete(groupRollId);\n          this.updateQueue.delete(groupRollId);\n        }, 60000);\n      }\n    }\n  }\n  \n  /**\n   * Update group roll message with new DC value\n   * @param {ChatMessage} message - The chat message to update\n   * @param {number} newDC - The new DC value\n   */\n  static async updateGroupRollDC(message, newDC) {\n    const flagData = message.getFlag(MODULE_ID, 'rollData');\n    if (!flagData) return;\n    \n    flagData.supportsDC = RollHelpers.shouldShowDC(flagData.rollType);\n    if (!flagData.supportsDC) return;\n    \n    flagData.dc = newDC;\n    flagData.showDC = true;\n    flagData.results.forEach(result => {\n      if (result.rolled && result.total !== null) {\n        result.success = result.total >= newDC;\n        result.failure = result.total < newDC;\n      }\n    });\n    \n    const actors = flagData.actorEntries?.map(entry => game.actors.get(entry.actorId)).filter(a => a) || \n                   flagData.actors?.map(id => game.actors.get(id)).filter(a => a) || [];\n    \n    const groupResult = RollHelpers.getGroupResult(\n      flagData.results,\n      newDC,\n      actors,\n      flagData.rollType,\n      flagData.rollKey\n    );\n    \n    flagData.groupResult = groupResult;\n    \n    if (groupResult.complete && groupResult.details) {\n      flagData.groupSummary = groupResult.details.summary;\n    }\n    \n    flagData.allRolled = flagData.results.every(r => r.rolled);\n    flagData.messageId = message.id;\n    \n    const SETTINGS = getSettings();\n    flagData.showDCToPlayers = SettingsUtil.get(SETTINGS.showGroupDCToPlayers.tag);\n    \n    const newContent = await GeneralUtil.renderTemplate(this.templatePath, flagData);\n    await message.update({\n      content: newContent,\n      flags: {\n        [MODULE_ID]: {\n          rollData: flagData\n        }\n      }\n    });\n  }\n  \n  /**\n   * Intercept individual roll messages and update group message instead\n   * @param {ChatMessage} message - The chat message document\n   * @param {HTMLElement} html - The rendered HTML element\n   * @param {Object} context - Rendering context\n   * @returns {boolean} Return false to prevent rendering\n   */\n  static interceptRollMessage(message, html, context) {\n    const SETTINGS = getSettings();\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    if (!groupRollsMsgEnabled) return;\n    \n    const actorId = message.speaker?.actor;\n    const tokenId = message.speaker?.token;\n    \n    // For unlinked tokens, we need to get the synthetic actor from the token\n    // because flags are set on the synthetic actor, not the base actor\n    let actor;\n    if (tokenId) {\n      const token = canvas.tokens?.get(tokenId) || game.scenes.active?.tokens?.get(tokenId);\n      actor = token?.actor;  // This gets the synthetic actor for unlinked tokens\n    }\n    if (!actor) {\n      actor = game.actors.get(actorId);\n    }\n\n    if (!actor) return;\n    \n    const uniqueId = tokenId || actorId;\n    const groupRollId = message.getFlag(MODULE_ID, 'groupRollId') || actor.getFlag(MODULE_ID, 'tempInitiativeConfig')?.groupRollId;\n\n    if (!groupRollId) {\n      LogUtil.log('interceptRollMessage #2 - no groupRollId in flag', [actor.name]);\n      return;\n    }\n    \n    if (!game.user.isGM && !this.groupRollMessages.has(groupRollId)) {\n      const messages = game.messages.contents;\n      const groupMessage = messages.find(m => \n        m.getFlag(MODULE_ID, 'groupRollId') === groupRollId &&\n        m.getFlag(MODULE_ID, 'isGroupRoll')\n      );\n      \n      if (groupMessage) {\n        this.groupRollMessages.set(groupRollId, groupMessage);\n        LogUtil.log('interceptRollMessage - Registered group roll message', [actor.name,groupRollId]);\n      }\n    }\n    \n    if (!this.groupRollMessages.has(groupRollId)) {\n      LogUtil.log('interceptRollMessage - groupRollId not in map', [actor.name, groupRollId, Array.from(this.groupRollMessages.keys())]);\n      LogUtil.log('interceptRollMessage - All group messages in chat:', [\n        game.messages.contents,\n        game.messages.contents\n          .filter(m => m.getFlag(MODULE_ID, 'isGroupRoll'))\n          .map(m => ({ id: m.id, groupRollId: m.getFlag(MODULE_ID, 'groupRollId') }))\n      ]);\n      \n      const messages = game.messages.contents;\n      const groupMessage = messages.find(m => \n        m.getFlag(MODULE_ID, 'groupRollId') === groupRollId &&\n        m.getFlag(MODULE_ID, 'isGroupRoll')\n      );\n      \n      if (groupMessage) {\n        LogUtil.log('interceptRollMessage - Found group message in chat log, registering', [groupRollId]);\n        this.groupRollMessages.set(groupRollId, groupMessage);\n      } else {\n        LogUtil.log('interceptRollMessage - No group message found in chat log either', [groupRollId]);\n        return;\n      }\n    }\n    \n    const roll = message.rolls?.[0];\n    if (!roll) return;\n    \n    if (html && html instanceof HTMLElement && html.style) {\n      html.style.display = 'none';\n    }\n    \n    if (game.user.isGM) {\n      this.updateGroupRollMessage(groupRollId, uniqueId, roll);\n      \n      const msgId = message.id;\n      if (this.messagesScheduledForDeletion.has(msgId)) {\n        return;\n      }\n      this.messagesScheduledForDeletion.add(msgId);\n      \n      if (msgId) {\n        setTimeout(async () => {\n          LogUtil.log('interceptRollMessage - deletion', [msgId]);\n          try {\n            const msgExists = game.messages.get(msgId);\n            if (msgExists) {\n              await message.delete();\n              LogUtil.log('interceptRollMessage - Deleted individual message', [msgId]);\n            } else {\n              LogUtil.log('interceptRollMessage - Message already deleted', [msgId]);\n            }\n          } catch (error) {\n            LogUtil.log('interceptRollMessage - Error deleting message', [msgId, error.message]);\n          } finally {\n            this.messagesScheduledForDeletion.delete(msgId);\n          }\n        }, 500);\n      }\n    } else {\n      // Player side - don't try to update the message (no permission)\n      LogUtil.log('interceptRollMessage - Player roll intercepted, GM will handle update', [groupRollId]);\n    }\n    \n    return;\n  }\n  \n  /**\n   * Check if a request should use group messaging\n   * @param {string} requestId - Request identifier\n   * @returns {boolean} True if this is a group roll\n   */\n  static isGroupRoll(requestId) {\n    return this.pendingRolls.has(requestId) || this.groupRollMessages.has(requestId);\n  }\n  \n  /**\n   * Add groupRollId to message flags if it's a group roll\n   * @param {Object} messageConfig - The message configuration object\n   * @param {Object} requestData - The request data containing the groupRollId\n   * @param {Actor} actor - The actor performing the roll (optional, for player flag storage)\n   */\n  static async addGroupRollFlag(messageConfig, requestData, actor = null) {\n    const SETTINGS = getSettings();\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    \n    LogUtil.log('addGroupRollFlag called', [messageConfig, requestData.groupRollId, this.isGroupRoll(requestData.groupRollId)]);\n    LogUtil.log('addGroupRollFlag - detailed check', [\n      'groupRollId:', requestData.groupRollId, \n      'type:', typeof requestData.groupRollId,\n      'isGM:', game.user.isGM,\n      'actor:', actor?.name,\n      'requestData keys:', Object.keys(requestData)\n    ]);\n    \n    if (!game.user.isGM && requestData.groupRollId && actor) {\n      await actor.setFlag(MODULE_ID, 'tempGroupRollId', requestData.groupRollId);\n      LogUtil.log('addGroupRollFlag - Stored tempGroupRollId on actor for player', [requestData.groupRollId, actor.id]);\n      \n      // Also set the flag on the base actor if this is a token actor\n      // This ensures the flag is found when dialogs are shown and roll context changes\n      if (actor.isToken && actor.actor) {\n        await actor.actor.setFlag(MODULE_ID, 'tempGroupRollId', requestData.groupRollId);\n        LogUtil.log('addGroupRollFlag - Also stored tempGroupRollId on base actor for player', [requestData.groupRollId, actor.actor.id]);\n      }\n      \n      if (!this.groupRollMessages.has(requestData.groupRollId)) {\n        const messages = game.messages.contents;\n        const groupMessage = messages.find(m => \n          m.getFlag(MODULE_ID, 'groupRollId') === requestData.groupRollId &&\n          m.getFlag(MODULE_ID, 'isGroupRoll')\n        );\n        \n        if (groupMessage) {\n          this.groupRollMessages.set(requestData.groupRollId, groupMessage);\n          LogUtil.log('addGroupRollFlag - Registered group roll message on player side', [requestData.groupRollId]);\n        }\n      }\n    }\n    \n    // Add groupRollId for any multi-actor roll when setting is enabled\n    if (groupRollsMsgEnabled && requestData.groupRollId) {\n      const shouldAddFlag = game.user.isGM ? this.isGroupRoll(requestData.groupRollId) : true;\n      \n      if (shouldAddFlag) {\n        messageConfig.data = messageConfig.data || {};\n        messageConfig.data.flags = messageConfig.data.flags || {};\n        messageConfig.data.flags[MODULE_ID] = messageConfig.data.flags[MODULE_ID] || {};\n        messageConfig.data.flags[MODULE_ID].groupRollId = requestData.groupRollId;\n        \n        LogUtil.log('addGroupRollFlag - Added flag to messageConfig', [messageConfig]);\n      }\n    }\n  }\n  \n  /**\n   * Clean up old messages and data\n   */\n  static cleanup() {\n    const fiveMinutesAgo = Date.now() - (5 * 60 * 1000);\n    \n    for (const [requestId, message] of this.groupRollMessages.entries()) {\n      if (message.timestamp < fiveMinutesAgo) {\n        this.groupRollMessages.delete(requestId);\n        this.pendingRolls.delete(requestId);\n      }\n    }\n  }\n}","import { ROLL_TYPES, MODULE_ID } from \"../constants/General.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\nimport { RollHelpers } from \"./helpers/RollHelpers.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { CustomRollDialog } from \"./dialogs/CustomRollDialog.mjs\";\nimport { NotificationManager } from \"./helpers/Helpers.mjs\";\nimport { ChatMessageUtils } from \"./ChatMessageUtils.mjs\";\n\n/**\n * Methods for handling different types of rolls\n * Called from GM side or player side to fulfill the roll request\n */\nexport const RollHandlers = {\n  ability: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      ability: requestData.rollKey\n    });\n    \n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollAbilityCheck(config, dialogConfig, messageConfig);\n  },\n  \n  abilitycheck: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.ability(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  save: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      ability: requestData.config?.ability || requestData.rollKey\n    });\n    \n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    \n    await actor.rollSavingThrow(config, dialogConfig, messageConfig);\n  },\n  \n  savingthrow: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.save(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  skill: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const defaultAbility = actor.system.skills?.[requestData.rollKey]?.ability || \n                          CONFIG.DND5E.skills?.[requestData.rollKey]?.ability || \n                          undefined;\n\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      skill: requestData.rollKey, \n      chooseAbility: dialogConfig.configure !== false, \n      ability: requestData.config.ability || defaultAbility \n    });\n    \n    if (requestData.config.ability && dialogConfig.configure === false) {\n      const skillLabel = CONFIG.DND5E.skills[requestData.rollKey]?.label || requestData.rollKey;\n      const abilityLabel = CONFIG.DND5E.abilities[requestData.config.ability]?.label || requestData.config.ability;\n      const flavor = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n        skill: skillLabel, \n        ability: abilityLabel \n      });\n      messageConfig.data = messageConfig.data || {};\n      messageConfig.data.flavor = flavor;\n    }\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollSkill(config, dialogConfig, messageConfig);\n  },\n\n  tool: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const toolConfig = actor.system.tools?.[requestData.rollKey];\n    const defaultAbility = toolConfig?.ability || \n                          CONFIG.DND5E.enrichmentLookup?.tools?.[requestData.rollKey]?.ability ||\n                          'int';\n\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      tool: requestData.rollKey,\n      chooseAbility: dialogConfig.configure !== false, \n      ability: requestData.config.ability || defaultAbility\n    });\n    \n    if (requestData.config.ability && dialogConfig.configure === false) {\n      const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[requestData.rollKey];\n      let toolLabel = requestData.rollKey;\n      if (toolData?.id) {\n        const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n        toolLabel = toolItem?.name || requestData.rollKey;\n      }\n      const abilityLabel = CONFIG.DND5E.abilities[requestData.config.ability]?.label || requestData.config.ability;\n      const flavor = game.i18n.format(\"DND5E.ToolPromptTitle\", { \n        tool: toolLabel, \n        ability: abilityLabel \n      });\n      messageConfig.data = messageConfig.data || {};\n      messageConfig.data.flavor = flavor;\n    }\n    LogUtil.log('RollHandlers.tool #2', [config, dialogConfig, messageConfig]);\n    \n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollToolCheck(config, dialogConfig, messageConfig);\n  },\n\n  concentration: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig);\n    \n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollConcentration(config, dialogConfig, messageConfig);\n  },\n\n  attack: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.ATTACK, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  damage: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.DAMAGE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  itemsave: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.ITEM_SAVE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  initiative: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    if (!game.combat) {\n      ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n      return;\n    }\n    const situational = requestData.config.situational || rollConfig.data?.situational || '';\n    const groupRollId = requestData.groupRollId;\n\n    let tokenActor = actor;\n    if (!actor.isToken) {\n      const token = canvas.tokens.placeables.find(t => t.actor?.id === actor.id);\n      if (token) {\n        tokenActor = token.actor;\n      } else {\n        ui.notifications.error(game.i18n.localize(\"FLASH_ROLLS.notifications.noTokensForInitiative\"));\n        return;\n      }\n    }\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    \n    try {\n      if (dialogConfig.configure) {\n        LogUtil.log('RollHandlers.initiative - Dialog', []);\n        \n        if (requestData.config) {\n          const initiativeConfig = RollHelpers.buildRollConfig(requestData, rollConfig, {\n            ability: actor.system.attributes?.init?.ability || 'dex'\n          });\n          \n          const tempConfig = {\n            advantage: requestData.config.advantage || false,\n            disadvantage: requestData.config.disadvantage || false,\n            rollMode: requestData.config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n            rolls: initiativeConfig.rolls,\n            groupRollId: requestData.groupRollId\n          };\n          await actor.setFlag(MODULE_ID, 'tempInitiativeConfig', tempConfig);\n          await tokenActor.setFlag(MODULE_ID, 'tempInitiativeConfig', tempConfig);\n        }\n        await tokenActor.rollInitiativeDialog();\n        await tokenActor.unsetFlag(MODULE_ID, 'tempInitiativeConfig');\n        await actor.unsetFlag(MODULE_ID, 'tempInitiativeConfig');\n\n      } else {\n        const tempConfig = {\n          rollMode: requestData.config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n          groupRollId: requestData.groupRollId\n        };\n\n        await actor.setFlag(MODULE_ID, 'tempInitiativeConfig', tempConfig);\n        await tokenActor.setFlag(MODULE_ID, 'tempInitiativeConfig', tempConfig);\n\n        const rollOptions = {\n          createCombatants: true,\n          rerollInitiative: true\n        };\n        await tokenActor.rollInitiative(rollOptions);\n        await tokenActor.unsetFlag(MODULE_ID, 'tempInitiativeConfig');\n        await actor.unsetFlag(MODULE_ID, 'tempInitiativeConfig');\n      }\n    } catch (error) {\n      LogUtil.error('RollHandlers.initiative - Error', [error]);\n      NotificationManager.notify('error', `Initiative roll failed: ${error.message}`);\n    }\n  },\n  \n  // Alias for INITIATIVE_DIALOG\n  initiativedialog: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.initiative(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  deathsave: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig);\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollDeathSave(config, dialogConfig, messageConfig);\n  },\n\n  hitdie: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    dialogConfig.configure = game.user.isGM ? dialogConfig.configure : true;\n    \n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      denomination: requestData.rollKey // The hit die denomination (d6, d8, etc.)\n    });\n    LogUtil.log('RollHandlers.hitdie', [config, dialogConfig, messageConfig]);\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollHitDie(config, dialogConfig, messageConfig);\n  },\n\n  custom: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleCustomRoll(actor, requestData, dialogConfig, messageConfig);\n  },\n\n\n  /**\n   * Handle activity-based rolls (attack, damage, item save)\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll from ROLL_TYPES\n   * @param {Object} requestData - The roll request data\n   * @param {string} requestData.rollKey - The item ID\n   * @param {string} requestData.activityId - The activity ID\n   * @param {Object} requestData.config - Configuration\n   * @param {string} [requestData.config.situational] - Situational bonus formula\n   * @param {BasicRollConfiguration} rollConfig - Individual roll configuration\n   * @param {BasicRollDialogConfiguration} dialogConfig - Dialog configuration\n   * @param {BasicRollMessageConfiguration} messageConfig - Message configuration\n   * @returns {Promise<void>}\n   */\n  async handleActivityRoll(actor, rollType, requestData, rollConfig, dialogConfig, messageConfig) {\n    LogUtil.log('RollHandlers.handleActivityRoll', [rollType, requestData, rollConfig]);\n    if (requestData.rollKey) {\n      const processConfig = RollHelpers.buildRollConfig(requestData, rollConfig);\n      \n      const rollOptions = processConfig.rolls?.[0]?.options || {};\n      const activityConfig = {\n        usage: {\n          ...requestData.config,\n          rolls: processConfig.rolls,\n          ...(rollOptions.attackMode && { attackMode: rollOptions.attackMode }),\n          ...(rollOptions.ammunition && { ammunition: rollOptions.ammunition }),\n          ...(rollOptions.mastery !== undefined && { mastery: rollOptions.mastery })\n        },\n        dialog: dialogConfig,\n        message: messageConfig\n      };\n      \n      LogUtil.log('handleActivityRoll - final activity config', [activityConfig]);\n      \n      await ActivityUtil.executeActivityRoll(\n        actor, \n        rollType, \n        requestData.rollKey, \n        requestData.activityId, \n        activityConfig\n      );\n    }\n  },\n\n  /**\n   * Handle a custom roll, creating a custom dialog\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {Object} requestData - The roll request data\n   * @param {string} requestData.rollKey - The roll formula\n   * @param {Object} requestData.config - Configuration object\n   * @param {string} [requestData.config.rollMode] - Roll visibility mode\n   * @param {string} [requestData.config.requestedBy] - Name of the requester\n   * @param {BasicRollDialogConfiguration} dialogConfig - Dialog configuration\n   * @param {BasicRollMessageConfiguration} messageConfig - Message configuration\n   * @returns {Promise<void>}\n   */\n  async handleCustomRoll(actor, requestData, dialogConfig, messageConfig) {\n    const formula = requestData.rollKey;\n    \n    if (dialogConfig?.configure === false) {\n      try {\n        const roll = new Roll(formula, actor.getRollData());\n        \n        roll.options = roll.options || {};\n        roll.options.isRollRequest = requestData.config?.isRollRequest !== false;\n        \n        await roll.evaluate();\n        await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n        \n        await roll.toMessage({\n          speaker: ChatMessage.getSpeaker({actor}),\n          flavor: game.i18n.localize(`FLASH_ROLLS.rollTypes.${ROLL_TYPES.CUSTOM}`),\n          rollMode: messageConfig?.rollMode || requestData.config?.rollMode || game.settings.get(\"core\", \"rollMode\"),\n          isRollRequest: requestData.config?.isRollRequest !== false,\n          create: messageConfig?.create !== false,\n          flags: messageConfig?.data?.flags\n        });\n      } catch (error) {\n        ui.notifications.error(game.i18n.format(\"FLASH_ROLLS.ui.notifications.invalidFormula\", {formula: formula}));\n      }\n      return;\n    }\n    \n    const dialog = new CustomRollDialog({\n      formula: formula,\n      readonly: true,\n      actor: actor,\n      callback: async (confirmedFormula) => {\n        try {\n          const roll = new Roll(confirmedFormula, actor.getRollData());\n          \n          roll.options = roll.options || {};\n          roll.options.isRollRequest = true;\n          \n          await roll.evaluate();\n          await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n          \n          await roll.toMessage({\n            speaker: ChatMessage.getSpeaker({actor}),\n            flavor: game.i18n.localize(`FLASH_ROLLS.rollTypes.${ROLL_TYPES.CUSTOM}`),\n            rollMode: requestData.config.rollMode,\n            isRollRequest: true,\n            _showRequestedBy: true,\n            _requestedBy: requestData.config.requestedBy || 'GM',\n            flags: messageConfig?.data?.flags\n          });\n        } catch (error) {\n          ui.notifications.error(game.i18n.format(\"FLASH_ROLLS.ui.notifications.invalidFormula\", {formula: confirmedFormula}));\n        }\n      }\n    });\n    \n    dialog.render(true);\n  },\n\n  /**\n   * Handle hit die recovery (used for refilling hit dice)\n   * @param {Actor5e} actor - The actor to recover hit dice for\n   * @returns {Promise<Object>} Result object with recovery details\n   */\n  async handleHitDieRecovery(actor) {\n    const result = foundry.utils.mergeObject({\n      type: \"long\",\n      deltas: {\n        hitDice: 0\n      },\n      newDay: false,\n      rolls: [],\n      updateData: {},\n      updateItems: []\n    }, {});\n    \n    if ( \"dhd\" in result ) result.deltas.hitDice = result.dhd;\n\n    actor._getRestHitDiceRecovery({ maxHitDice: actor.system.attributes.hd.max, type: \"long\" }, result);\n\n    result.dhd = result.deltas.hitDice;\n    result.longRest = true;\n\n    try {\n      if (result.updateData && Object.keys(result.updateData).length > 0) {\n        const updateResult = await actor.update(result.updateData, { isRest: false });\n      } else {\n        LogUtil.log('No actor updates to perform', []);\n      }\n      \n      if (result.updateItems && result.updateItems.length > 0) {\n        const itemUpdateResult = await actor.updateEmbeddedDocuments(\"Item\", result.updateItems, { isRest: false });\n      } else {\n        LogUtil.log('No item updates to perform', []);\n      }\n    } catch (error) {\n      LogUtil.error('Error during updates in handleHitDieRecovery:', [error]);\n      throw error;\n    }\n\n    LogUtil.log('handleHitDieRecovery #3', [result]);\n    // Return data summarizing the rest effects\n    return result;\n  }\n};","import { LogUtil } from '../LogUtil.mjs';\nimport { NotificationManager } from './Helpers.mjs';\n\n/**\n * Ensure combat exists for initiative rolls\n * @returns {Promise<boolean>} True if combat is ready, false if cancelled\n */\nexport async function ensureCombatForInitiative() {\n  if (!game.combat) {\n    const combat = await Combat.create({scene: game.scenes.active.id});\n    await combat.activate();\n    NotificationManager.notify('info', game.i18n.localize(\"FLASH_ROLLS.notifications.combatCreated\"));\n  }\n  return game.combat;\n}\n\n/**\n * Filter actors for initiative rolls, handling re-rolls\n * @param {string[]} actorIds - Array of actor IDs to filter\n * @param {Game} game - The game instance\n * @returns {Promise<string[]>} Filtered array of actor IDs\n */\nexport async function filterActorsForInitiative(actorIds, game) {\n  if (!game.combat) return actorIds;\n  \n  const actors = actorIds\n    .map(id => game.actors.get(id))\n    .filter(actor => actor);\n  \n  const actorsNamesWithInitiative = [];\n  const actorIdsWithInitiative = new Set();\n  \n  for (const actor of actors) {\n    const combatants = game.combat.getCombatantsByActor(actor.id);\n    const hasInitiative = combatants.some(c => c.initiative !== null);\n    if (hasInitiative) {\n      actorsNamesWithInitiative.push(actor.name);\n      actorIdsWithInitiative.add(actor.id);\n    }\n  };\n  LogUtil.log('filterActorsForInitiative', [actorsNamesWithInitiative]);\n  \n  // If any actors already have initiative, confirm re-roll\n  if (actorsNamesWithInitiative.length > 0) {\n    const reroll = await foundry.applications.api.DialogV2.confirm({\n      window: {\n        title: game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.rerollInitiativeTitle\"),\n        classes: [\"flash5e-dialog\"]\n      },\n      position: {\n        width: 420,\n        height: \"auto\"\n      },\n      content: \"<p>\" + game.i18n.format(\"FLASH_ROLLS.ui.dialogs.rerollInitiative\", {\n        actors: actorsNamesWithInitiative.join(\", \")\n      }) + \"</p>\",\n      rejectClose: false,\n      modal: true\n    });\n    \n    if (!reroll) { \n      const filteredIds = actorIds.filter(id => !actorIdsWithInitiative.has(id));\n      if (filteredIds.length === 0) {\n        NotificationManager.notify('info', game.i18n.localize(\"FLASH_ROLLS.notifications.allActorsHaveInitiative\"));\n      }\n      \n      return filteredIds;\n    } else {\n      if (game.user.isGM) {\n        for (const actorId of actorIdsWithInitiative) {\n          const combatants = game.combat.getCombatantsByActor(actorId);\n          LogUtil.log('filterActorsForInitiative - resetting initiative for combatants', [combatants]);\n          for (const c of combatants) {\n            await c.update({ initiative: null });\n          }\n        }\n      } else {\n        LogUtil.log('filterActorsForInitiative - Player cannot reset initiative, will let system handle re-roll');\n      }\n      \n      return actorIds;\n    }\n  }\n  \n  return actorIds;\n}","import { isPlayerOwned, hasTokenInScene } from '../helpers/Helpers.mjs';\n\n/**\n * Utility class for actor-related operations in the Roll Requests Menu\n */\nexport class RollMenuActorUtil {\n  /**\n   * Get formatted stats for an actor\n   * @param {Actor} actor - The actor to get stats for\n   * @returns {Array<{abbrev: string, value: number}>} Array of stat objects\n   */\n  static getActorStats(actor) {\n    const system = actor.system;\n    const stats = [];\n    \n    // HP\n    if (system.attributes?.hp) {\n      stats.push({\n        abbrev: 'HP',\n        value: system.attributes.hp.value\n      });\n    }\n    \n    // AC\n    if (system.attributes?.ac) {\n      stats.push({\n        abbrev: 'AC',\n        value: system.attributes.ac.value\n      });\n    }\n    \n    const spellDC = system.attributes?.spell?.dc;\n    if (spellDC) {\n      stats.push({\n        abbrev: 'DC',\n        value: spellDC\n      });\n    }\n    \n    if (system.skills?.prc?.passive) {\n      stats.push({\n        abbrev: 'PRC',\n        value: system.skills.prc.passive\n      });\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Get HP percentage and color for an actor\n   * @param {Actor} actor - The actor to get HP data for\n   * @returns {{hpPercent: number, hpColor: string}} HP percentage and color\n   */\n  static getActorHPData(actor) {\n    const hp = actor.system.attributes?.hp;\n    if (!hp || !hp.max) {\n      return { hpPercent: 100, hpColor: 'var(--fr5e-color-hp-high)' };\n    }\n    \n    const hpPercent = Math.round((hp.value / hp.max) * 100);\n    const hpColor = hpPercent > 50 ? 'var(--fr5e-color-hp-high)' : 'var(--fr5e-color-hp-low)';\n    \n    return { hpPercent, hpColor };\n  }\n\n  /**\n   * Get valid actor IDs based on current tab\n   * @param {Array<string>} selectedActorIds - Array of selected actor IDs\n   * @param {string} currentTab - Current tab ('pc' or 'npc')\n   * @returns {Array<string>} Filtered array of valid actor IDs\n   */\n  static getValidActorIds(selectedActorIds, currentTab) {\n    return selectedActorIds.filter(actorId => {\n      const actor = game.actors.get(actorId);\n      if (!actor) return false;\n      const isPC = isPlayerOwned(actor);\n      const isNPC = !isPC && hasTokenInScene(actor);\n      \n      return (currentTab === 'pc' && isPC) || (currentTab === 'npc' && isNPC);\n    });\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID } from \"../../../constants/General.mjs\";\nimport { HOOKS_CORE } from \"../../../constants/Hooks.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\n\n// Check if required D&D5e classes exist\nHooks.once(HOOKS_CORE.READY, () => {\n  if (!dnd5e.applications.dice.DamageRollConfigurationDialog) {\n    LogUtil.warn(\"DamageRollConfigurationDialog not found in dnd5e.applications.dice\");\n  }\n});\n\n/**\n * Mixin that provides GM-specific functionality for roll configuration dialogs\n * @param {Class} Base - The base dialog class to extend\n * @returns {Class} The extended class with GM functionality\n */\nexport function GMRollConfigMixin(Base) {\n  return class extends Base {\n    constructor(config = {}, message = {}, options = {}) {\n      super(config, message, options);\n      \n      this.actors = options.actors || [];\n      this.sendRequest = options.sendRequest ?? options.sendRequest ?? true;\n      this.showDC = options.showDC || false;\n      this.dcValue = options.dcValue || null;\n      \n      this.rollKey = options.rollKey || config.skill || config.ability || null;\n      this.rollTypeString = options.rollTypeString || null;\n      \n      this.windowTitle = options.window?.title || \"\";\n      this.windowSubtitle = options.window?.subtitle || \"\";\n    }\n    \n    /**\n     * Build a roll configuration from form data.\n     * Handles situational bonuses, ability selection, and DC values.\n     * @param {BasicRollConfiguration} config - Individual roll configuration from the rolls array\n     * @param {FormDataExtended} formData - Data from the dialog form\n     * @param {number} index - Index of this roll in the rolls array\n     * @returns {BasicRollConfiguration} The modified individual roll configuration\n     * @protected\n     * @override\n     */\n    _buildConfig(config, formData, index) {\n      const abilityFromForm = formData?.get(\"ability\");\n      const dcFromForm = formData?.get(\"dc\");\n      \n      const situational = formData?.get(`rolls.${index}.situational`);\n      LogUtil.log('_buildConfig', [situational, formData, config]);\n      if (situational) {\n        if (!config.parts) config.parts = [];\n        config.parts.push(\"@situational\");\n        if (!config.data) config.data = {};\n        config.data.situational = situational;\n      }else if (config.parts) {\n        const idx = config.parts.indexOf(\"@situational\");\n        if (idx !== -1) config.parts.splice(idx, 1);\n      }\n      \n      if (abilityFromForm) {\n        config.ability = abilityFromForm;\n        this.config.ability = abilityFromForm;\n      }\n      \n      const result = super._buildConfig(config, formData, index);\n      \n      if (dcFromForm) {\n        const dcValue = parseInt(dcFromForm);\n        if (!isNaN(dcValue)) {\n          result.options = result.options || {};\n          result.options.target = dcValue;\n        }\n      } else if (this.dcValue !== undefined && this.dcValue !== null) {\n        result.options = result.options || {};\n        result.options.target = this.dcValue;\n      }\n      \n      LogUtil.log(`${this.constructor.name}._buildConfig`, [this.config, formData, result]);\n      return result;\n    }\n    \n    /**\n     * Handle form changes to capture GM-specific fields.\n     * @param {Object} formConfig - The form configuration object\n     * @param {Event} event - The change event\n     * @protected\n     * @override\n     */\n    _onChangeForm(formConfig, event) {\n      LogUtil.log(`_onChangeForm`, [event.target.value]);\n      super._onChangeForm(formConfig, event);\n\n      const sendRequestCheckbox = this.element.querySelector('input[name=\"flash5e-send-request\"]');\n      if (sendRequestCheckbox) {\n        this.sendRequest = sendRequestCheckbox.checked;\n      }\n      \n      const dcInput = this.element.querySelector('input[name=\"dc\"]');\n      if (dcInput && dcInput.value) {\n        this.dcValue = parseInt(dcInput.value) || null;\n      }\n      \n    }\n    \n    /**\n     * Finalize rolls based on the action button clicked.\n     * @param {string} action - The action button that was clicked\n     * @returns {D20Roll[]} Array of finalized rolls ready for execution\n     * @protected\n     * @override\n     */\n    _finalizeRolls(action) {\n      const finalizedRolls = super._finalizeRolls(action);\n      LogUtil.log(`_finalizeRolls #1`, [finalizedRolls, this.sendRequest]);\n      \n      if (this.dcValue !== undefined && this.dcValue !== null) {\n        for (const roll of finalizedRolls) {\n          roll.options.target = this.dcValue;\n        }\n      }\n      \n      this.config.sendRequest = this.sendRequest;\n      \n      return finalizedRolls;\n    }\n    \n    /**\n     * Handle post-render actions for the dialog.\n     * Triggers initial formula rebuild if there's a situational bonus.\n     * @param {ApplicationRenderContext} context - The render context.\n     * @param {HandlebarsRenderOptions} options - Rendering options.\n     * @returns {Promise<void>}\n     * @protected\n     * @override\n     */\n    async _onRender(context, options) {\n      await super._onRender(context, options);\n      \n      if (this.config.rolls?.[0]?.data?.situational || this.config.situational) {\n        LogUtil.log(`${this.constructor.name}._onRender`, ['Triggering rebuild for initial situational bonus']);\n        setTimeout(() => {\n          this.rebuild();\n        }, 100);\n      }\n    }\n  };\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID, ROLL_TYPES } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\n\n/**\n * GM Roll Configuration Dialog\n * Extends the standard D&D5e roll configuration dialogs to add DC field and send request toggle\n */\nexport class GMRollConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.D20RollConfigurationDialog) {\n  /**\n   * Create a new GM Roll Configuration Dialog.\n   * @param {BasicRollProcessConfiguration} [config={}] - Process configuration containing rolls array of BasicRollConfiguration objects.\n   * @param {BasicRollMessageConfiguration} [message={}] - Message configuration for chat output.\n   * @param {BasicRollConfigurationDialogOptions} [options={}] - Dialog rendering options.\n   * @param {Actor[]} [options.actors] - Array of actors this roll is being made for.\n   * @param {boolean} [options.sendRequest] - Whether to send this as a roll request to players.\n   * @param {boolean} [options.showDC] - Whether to show the DC input field.\n   * @param {string} [options.rollKey] - The specific roll key (e.g., \"str\" for strength save).\n   * @param {typeof BasicRoll} [options.rollType] - The roll class to use (D20Roll, DamageRoll, etc.).\n   * @param {string} [options.rollTypeString] - The roll type as a string for identification.\n   * @param {object} [options.window] - Window configuration options.\n   * @param {string} [options.window.title] - The window title.\n   * @param {string} [options.window.subtitle] - The window subtitle.\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    super(config, message, options);\n    \n    LogUtil.log('constructor - initializing GM Dialog', [config, message, options]);\n  }\n  \n  /**\n   * Default rendering options for the GM roll configuration dialog.\n   * Extends the parent's default options to add custom CSS classes.\n   * @returns {object} The default options object.\n   * @override\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Get the window title for the dialog.\n   * Uses the window title from options if provided, otherwise falls back to parent implementation.\n   * The parent class constructs the title from options.window.title or uses a default localized string.\n   * @returns {string} The localized window title\n   * @override\n   */\n  get title() {\n    return this.windowTitle || super.title;\n  }\n  \n  /**\n   * Prepare the configuration data for rendering the dialog.\n   * This method is called internally by the parent class during rendering.\n   * Extends parent to add DC and send request options. The parent method prepares\n   * advantage/disadvantage toggles, roll mode selector, and situational bonus field.\n   * @param {BasicRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration containing rolls array\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration with rendering options\n   * @param {BasicRollMessageConfiguration} message - Message configuration for chat output\n   * @returns {Object} The prepared configuration data for rendering with added fields:\n   *   - showDC: Whether to display the DC input field\n   *   - dcValue: The current DC value if set\n   *   - sendRequest: Whether rolls should be sent to players\n   *   - actorCount: Number of actors this roll applies to\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare the rendering context for a specific dialog part.\n   * Adds GM-specific data like DC value and send request option to the configuration part.\n   * The parent method builds the base context for each part (\"configuration\", \"formulas\", \"buttons\").\n   * @param {string} partId - The ID of the part being prepared (\"configuration\", \"formulas\", \"buttons\")\n   * @param {ApplicationRenderContext} context - The rendering context to modify\n   * @param {HandlebarsRenderOptions} options - Options which configure application rendering behavior\n   * @returns {Promise<ApplicationRenderContext>} The modified context with GM-specific data added to configuration part:\n   *   - showDC: Whether to display the DC input field\n   *   - dcValue: The current DC value if set\n   *   - sendRequest: Whether rolls should be sent to players\n   *   - actorCount: Number of actors this roll applies to\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    LogUtil.log('_preparePartContext', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render actions for the dialog.\n   * Injects custom GM fields (DC input, send request checkbox) into the dialog after rendering.\n   * Also attaches event listeners and triggers initial formula rebuild if needed.\n   * @param {ApplicationRenderContext} context - The render context.\n   * @param {HandlebarsRenderOptions} options - Rendering options.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    LogUtil.log('_onRender', [context, options]);\n    super._onRender(context, options);\n    \n    GeneralUtil.preventDialogFlicker(this.element);\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    let configSection = this.element.querySelector('.rolls .formulas');\n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons.\n   * Sets up click handlers for the advantage mode toggle buttons.\n   * Currently logs the action but does not implement custom behavior.\n   * @private\n   */\n  _attachButtonListeners() {\n    LogUtil.log('_attachButtonListeners', [this.element]);\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  \n  /**\n   * Static method to create and display the GM roll configuration dialog.\n   * Creates a BasicRollProcessConfiguration and shows dialog for user configuration.\n   * @param {Actor[]|string[]} actors - Array of Actor documents or actor IDs to roll for\n   * @param {string} rollType - The type of roll (e.g., \"save\", \"ability\", \"skill\", \"tool\")\n   * @param {string} rollKey - The specific roll key (e.g., \"str\" for strength, \"athletics\" for skill)\n   * @param {Object} options - Additional options for dialog configuration\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {number} [options.dcValue] - Initial DC value\n   * @param {boolean} [options.advantage] - Whether to roll with advantage\n   * @param {boolean} [options.disadvantage] - Whether to roll with disadvantage\n   * @param {string} [options.rollMode] - Roll visibility mode\n   * @param {string} [options.situational] - Situational bonus formula\n   * @returns {Promise<BasicRollProcessConfiguration|null>} Process configuration with rolls array, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}) {\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMRollConfigDialog, initConfiguration', []);\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    \n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    const showDC = RollHelpers.shouldShowDC(normalizedRollType);\n    const rollClass = RollHelpers.getRollClass(normalizedRollType);\n    const rollConfig = RollHelpers.createBaseRollConfig(actor, rollType, rollKey);\n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        rollTypeString: normalizedRollType,  // Store the roll type string\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        position: {\n          width: 420,\n          height: \"auto\"\n        },\n        ...options\n      }\n    };\n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    \n    const rollProcessConfig = RollHelpers.processDialogResult(result, actors, rollType, rollKey, options);\n    if (!rollProcessConfig) return null;\n    \n    if (result.config?.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      const defaultAbility = actor.system.skills?.[rollKey]?.ability || CONFIG.DND5E.skills?.[rollKey]?.ability;\n      if (result.config.ability !== defaultAbility) {\n        rollProcessConfig.ability = result.config.ability;\n      }\n    }\n    \n    let finalTitle = dialogConfig.options.window.title;\n    if (result.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      const selectedAbilityLabel = CONFIG.DND5E.abilities[result.config.ability]?.label || result.config.ability;\n      if (normalizedRollType === ROLL_TYPES.SKILL) {\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        finalTitle = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: selectedAbilityLabel \n        });\n      } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        finalTitle = game.i18n.format(\"DND5E.ToolPromptTitle\", { \n          tool: toolLabel,\n          ability: selectedAbilityLabel \n        });\n      }\n    }\n    \n    rollProcessConfig.rollTitle = finalTitle;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    return rollProcessConfig;\n  }\n  \n  /**\n   * Get a formatted title for the roll type\n   * @private\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {Actor} actor - The actor (used to get default ability for skills)\n   * @returns {string} The formatted title\n   */\n  static _getRollTitle(rollType, rollKey, actor) {\n    let title = \"\";\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    \n    if ([ROLL_TYPES.SAVE, ROLL_TYPES.ABILITY, ROLL_TYPES.ABILITY_CHECK].includes(normalizedRollType) && !rollKey) {\n      LogUtil.warn('Missing rollKey for roll type', [normalizedRollType, rollKey]);\n    }\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        const skill = actor?.system.skills?.[rollKey];\n        const defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n        const abilityLabel = CONFIG.DND5E.abilities[defaultAbility]?.label || defaultAbility;\n        title = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: abilityLabel \n        });\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        const saveAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.SavePromptTitle\", { ability: saveAbility });\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        const checkAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.AbilityPromptTitle\", { ability: checkAbility });\n        break;\n      case ROLL_TYPES.CONCENTRATION:\n        title = game.i18n.localize(\"DND5E.Concentration\");\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        const tool = actor?.system.tools?.[rollKey];\n        const toolDefaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n        const toolAbilityLabel = CONFIG.DND5E.abilities[toolDefaultAbility]?.label || toolDefaultAbility;\n        title = game.i18n.format(\"DND5E.ToolPromptTitle\", { \n          tool: toolLabel,\n          ability: toolAbilityLabel\n        });\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        title = game.i18n.localize(\"DND5E.DeathSave\");\n        break;\n      case ROLL_TYPES.INITIATIVE: \n      case ROLL_TYPES.INITIATIVE_DIALOG: // Handle alternate case\n        title = game.i18n.localize(\"DND5E.Initiative\");\n        break;\n      default:\n        title = game.i18n.localize(\"DND5E.Roll\");\n    }\n    LogUtil.log('_getRollTitle', [normalizedRollType, title]);\n    \n    return title;\n  }\n\n  static _getSubtitle(actors = []) {\n    if (actors.length === 1) {\n      return actors[0].name;\n    } else if (actors.length > 1) {\n      return game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.multipleActors\");\n    } else {\n      return \"\";\n    }\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Hit Die Configuration Dialog\n * Extends base RollConfigurationDialog for hit die rolls\n * @extends {dnd5e.applications.dice.RollConfigurationDialog}\n */\nexport class GMHitDieConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.RollConfigurationDialog) {\n  /**\n   * Creates an instance of GMHitDieConfigDialog.\n   * Configures the dialog for hit die rolls with GM-specific options.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration\n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    options.rollType = CONFIG.Dice.BasicRoll || Roll;\n    options.showDC = false;\n    \n    super(config, message, options);\n    \n    LogUtil.log('constructor', [config, message, options]);\n  }\n  \n  /**\n   * Get default options for the hit die dialog.\n   * Extends parent options to add hit die specific CSS classes.\n   * @returns {Object} Default dialog options with \"hit-die-config\" class added\n   * @static\n   * @override\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\", \"hit-die-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * Overrides the formula display to show \"Hit Die (varies by actor)\" since\n   * different actors may have different hit die sizes.\n   * @param {BasicRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with custom formula display\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    LogUtil.log('GMHitDieConfigDialog._prepareConfigurationData', [data]);\n    \n    data.formula = \"Hit Die (varies by actor)\";\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * Adds send request toggle and actor count to the configuration part.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n      context.formula = \"Hit Die (varies by actor)\";\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * Injects the send request toggle field for GM control.\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    super._onRender(context, options);\n    \n    GeneralUtil.preventDialogFlicker(this.element);\n    \n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    let configSection = this.element.querySelector('.rolls .formulas');\n    \n    if (configSection && this.actors.length > 0) {\n      const templateData = {\n        showDC: false,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n  }\n  \n  /**\n   * Process form submission data.\n   * Extracts and stores send request preference from the form.\n   * @param {SubmitEvent} event - The submission event\n   * @param {HTMLFormElement} form - The form element\n   * @param {FormDataExtended} formData - Processed form data\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _processSubmitData(event, form, formData) {\n    await super._processSubmitData(event, form, formData);\n    this.sendRequest = formData.get(\"flash5e-send-request\") !== \"false\";\n    \n    LogUtil.log('_processSubmitData', [formData, this.config]);\n  }\n  \n  /**\n   * Finalize rolls based on the action button clicked.\n   * Stores the send request flag in the configuration.\n   * For hit die rolls, merge situational bonuses into the main formula.\n   * @param {string} action - The action button clicked\n   * @returns {BasicRoll[]} Array of finalized rolls\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    const finalizedRolls = super._finalizeRolls(action);\n    this.config.sendRequest = this.sendRequest;\n\n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the hit die configuration dialog.\n   * Creates appropriate hit die formulas based on each actor's available hit dice.\n   * @param {Actor[]} actors - Array of actors to roll hit dice for\n   * @param {string} rollType - The roll type (should be \"hitdie\")\n   * @param {string} rollKey - Not used for hit die rolls\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @returns {Promise<Object|null>} Configuration with rolls array and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}) {\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMHitDieConfigDialog, initConfiguration', []);\n    \n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {\n          flavor: \"Hit Die Roll\"\n        }\n      }]\n    };\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.BasicRoll || Roll,\n        window: {\n          title: game.i18n.localize(\"DND5E.HitDice\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        position: {\n          width: 420,\n          height: \"auto\"\n        },\n        ...options\n      }\n    };\n    \n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    if (!result?.rolls || result.rolls.length === 0) return null;\n    \n    LogUtil.log('GMHitDieConfigDialog - dialog result', [result.rolls]);\n    \n    const rollProcessConfig = RollHelpers.processDialogResult(result, actors, rollType, rollKey, options);\n    if (!rollProcessConfig) return null;\n    \n    if (result.config?.ability) {\n      rollProcessConfig.ability = result.config.ability;\n    }\n    \n    return rollProcessConfig;\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID, ROLL_TYPES } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Skill/Tool Configuration Dialog\n * Extends SkillToolRollConfigurationDialog for ability selection\n * @extends {dnd5e.applications.dice.SkillToolRollConfigurationDialog}\n */\nexport class GMSkillToolConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.SkillToolRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMSkillToolConfigDialog.\n   * Forces ability selection and adds GM-specific options.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   *   @param {boolean} [options.showDC=false] - Whether to show DC field\n   *   @param {number} [options.dcValue] - Initial DC value\n   *   @param {string} [options.rollKey] - The skill/tool key being rolled\n   *   @param {string} [options.rollTypeString] - Display name for the roll type\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    const skillConfig = foundry.utils.mergeObject(config, {\n      chooseAbility: true\n    });\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    super(skillConfig, message, options);\n    \n    LogUtil.log('constructor', [config, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * Extends parent to add DC and send request options.\n   * The parent handles ability selection UI for skills and tools.\n   * @param {D20Roll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * Adds GM-specific context data to the configuration part.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    LogUtil.log('_preparePartContext', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * Injects GM-specific form fields (DC and send request toggle).\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    LogUtil.log('_onRender', [context, options]);\n    super._onRender(context, options);\n    \n    GeneralUtil.preventDialogFlicker(this.element);\n\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    let configSection = this.element.querySelector('.rolls .formulas');\n\n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons.\n   * Sets up click handlers for the advantage mode toggle buttons.\n   * Currently logs the action but does not implement custom behavior.\n   * @private\n   */\n  _attachButtonListeners() {\n    LogUtil.log('_attachButtonListeners', []);\n\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  /**\n   * Static method to create and display the skill/tool configuration dialog.\n   * Handles ability selection for skills and tools with GM-specific options.\n   * @param {Actor[]} actors - Array of actors to roll for\n   * @param {string} rollType - The roll type (\"skill\" or \"tool\")\n   * @param {string} rollKey - The specific skill/tool key (e.g., \"athletics\", \"thieves\")\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {number} [options.dcValue] - Initial DC value\n   * @param {string} [options.ability] - Override ability selection\n   * @returns {Promise<Object|null>} Configuration with rolls array, ability selection, and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}) {\n    // Validate and normalize actors\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMSkillToolConfigDialog, initConfiguration', []);\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    const showDC = RollHelpers.shouldShowDC(normalizedRollType);\n    const rollClass = CONFIG.Dice.D20Roll;\n    \n    let defaultAbility = null;\n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      const skill = actor.system.skills[rollKey];\n      defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      const tool = actor.system.tools?.[rollKey];\n      defaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n    }\n    \n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      ability: defaultAbility,\n      chooseAbility: true,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      rollConfig.skill = rollKey;\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      rollConfig.tool = rollKey;\n    }\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        rollTypeString: normalizedRollType,\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        position: {\n          width: 420,\n          height: \"auto\"\n        },\n        ...options\n      }\n    };\n    \n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    \n    const rollProcessConfig = RollHelpers.processDialogResult(result, actors, rollType, rollKey, options);\n    if (!rollProcessConfig) return null;\n    \n    if (result.config?.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      rollProcessConfig.ability = result.config.ability;\n    }\n    \n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    return rollProcessConfig;\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Damage Roll Configuration Dialog\n * Extends DamageRollConfigurationDialog to add send request toggle\n * @extends {dnd5e.applications.dice.DamageRollConfigurationDialog}\n */\nexport class GMDamageConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.DamageRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMDamageConfigDialog.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    // Ensure the dialog is configured to show\n    const dialogConfig = foundry.utils.mergeObject({\n      configure: true\n    }, config);\n    \n    super(dialogConfig, message, options);\n    \n    LogUtil.log('GMDamageConfigDialog.constructor', [dialogConfig, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"damage-roll\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * @param {DamageRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('GMDamageConfigDialog._prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  \n  /**\n   * Handle initial rendering of the dialog.\n   * @param {ApplicationRenderContext} context - The render context.\n   * @param {HandlebarsRenderOptions} options - Rendering options.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    await super._onRender(context, options);\n    \n    // Prevent dialog flicker\n    GeneralUtil.preventDialogFlicker(this.element);\n    \n    // Inject send request checkbox if we have actors\n    if (this.actors.length > 0) {\n      const buttonGroup = this.element.querySelector('.rolls + .dialog-buttons');\n      if (buttonGroup && !this.element.querySelector('.gm-roll-config-fields')) {\n        const wrapper = document.createElement('div');\n        wrapper.className = 'gm-roll-config-fields';\n        wrapper.innerHTML = `\n          <div class=\"form-group\">\n            <label class=\"checkbox\">\n              <input type=\"checkbox\" name=\"flash5e-send-request\" ${this.sendRequest ? 'checked' : ''}>\n              ${game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.sendRequestToPlayers\")}\n            </label>\n          </div>\n        `;\n        buttonGroup.insertAdjacentElement('beforebegin', wrapper);\n      }\n    }\n  }\n\n  /**\n   * Static method to create and display the attack configuration dialog.\n   * SIMPLIFIED VERSION: Matches ability check pattern without attack-specific configs\n   * @param {Actor[]} actors - Array of actors to roll for\n   * @param {string} rollType - The roll type (\"attack\")\n   * @param {string} rollKey - The item ID for the attack\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {Object} originalConfig - The original roll configuration from the intercepted roll\n   * @param {Object} originalDialog - The original dialog configuration from the intercepted roll\n   * @returns {Promise<Object|null>} Configuration with rolls array and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}, originalConfig = {}, originalDialog = {}) {\n    actors = RollHelpers.validateActors(actors);\n    LogUtil.log('GMDamageConfigDialog, initConfiguration actors', [actors]);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn, originalConfig.rollMode);\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    \n    const rollConfig = {\n      subject: originalConfig.subject || actor, \n      data: actor.getRollData(),\n      critical: originalConfig.critical || {},\n      rolls: originalConfig.rolls || [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #1', [rollConfig]);\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #2', [messageConfig]);\n    \n    const { position, ...dialogOptions } = originalDialog?.options || {}; \n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.DamageRoll,\n        rollTypeString: normalizedRollType,\n        window: {\n          title: game.i18n.localize(\"DND5E.DamageRoll\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...dialogOptions,\n        ...options\n      }\n    };\n    \n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    \n    if (!result?.rolls || result.rolls.length === 0) return null;\n    \n    const firstRoll = result.rolls[0];\n    \n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    const rollProcessConfig = {\n      rolls: [{\n        parts: [],\n        data: situational ? { situational } : {},\n        options: {\n          ...(target && { target }),\n          isCritical: firstRoll?.options?.isCritical || firstRoll?.isCritical || false\n        }\n      }],\n      subject: originalConfig.subject || actor,\n      target,\n      isCritical: firstRoll?.options?.isCritical || firstRoll?.isCritical || false,\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipRollDialog: options.skipRollDialog || false,\n      chatMessage: true\n    };\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #6', [rollProcessConfig]); \n    \n    const finalRollMode = RollHelpers.determineRollMode(isPublicRollsOn, result.message?.rollMode);\n    rollProcessConfig.rollMode = finalRollMode;\n    \n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    LogUtil.log('GMDamageConfigDialog, initConfiguration - result', [rollProcessConfig]);\n    \n    return rollProcessConfig;\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Attack Roll Configuration Dialog\n * Extends AttackRollConfigurationDialog to add send request toggle\n * @extends {dnd5e.applications.dice.AttackRollConfigurationDialog}\n */\nexport class GMAttackConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.AttackRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMAttackConfigDialog.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    super(config, message, options);\n    \n    LogUtil.log('GMAttackConfigDialog.constructor', [config, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * @param {D20Roll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('GMAttackConfigDialog._prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    await super._onRender(context, options);\n    \n    GeneralUtil.preventDialogFlicker(this.element);\n    \n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    let configSection = this.element.querySelector('.rolls .formulas');\n    \n    if (configSection && this.actors.length > 0) {\n      const templateData = {\n        showDC: false,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n  }\n  \n  /**\n   * Override _finalizeRolls to prevent re-rendering when sendRequest is toggled off\n   * @param {string} action - The action button clicked\n   * @returns {BasicRoll[]} Array of finalized rolls\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    this.config.sendRequest = this.sendRequest;\n    \n    if (!this.sendRequest && this.config.isRollRequest) {\n      this.config.isRollRequest = false;\n    }\n    \n    return super._finalizeRolls(action);\n  }\n  \n  /**\n   * Static method to create and display the attack configuration dialog.\n   * SIMPLIFIED VERSION: Matches ability check pattern without attack-specific configs\n   * @param {Actor[]} actors - Array of actors to roll for\n   * @param {string} rollType - The roll type (\"attack\")\n   * @param {string} rollKey - The item ID for the attack\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {Object} originalConfig - The original roll configuration from the intercepted roll\n   * @param {Object} originalDialog - The original dialog configuration from the intercepted roll\n   * @returns {Promise<Object|null>} Configuration with rolls array and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}, originalConfig = {}, originalDialog = {}) {\n    // Validate and normalize actors\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMAttackConfigDialog, initConfiguration', []);\n    \n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    \n    const rollConfig = {\n      subject: originalConfig.subject || actor,\n      data: actor.getRollData(),\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    const { position, ...dialogOptions } = originalDialog?.options || {};\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.D20Roll,\n        rollTypeString: normalizedRollType,\n        window: {\n          title: game.i18n.localize(\"DND5E.Attack\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...dialogOptions,\n        ...options\n      }\n    };\n    \n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    LogUtil.log('GMAttackConfigDialog, initConfiguration', [result?.sendRequest]);\n    \n    if (!result?.rolls || result.rolls.length === 0) return null;\n    \n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    const rollProcessConfig = {\n      rolls: [{\n        parts: [],\n        data: situational ? { situational } : {},\n        options: {\n          ...(target && { target }),\n          // Include attack-specific options from the roll\n          ...(firstRoll?.options?.ammunition && { ammunition: firstRoll.options.ammunition }),\n          ...(firstRoll?.options?.attackMode && { attackMode: firstRoll.options.attackMode }),\n          ...(firstRoll?.options?.mastery !== undefined && { mastery: firstRoll.options.mastery })\n        }\n      }],\n      subject: originalConfig.subject || actor,\n      advantage,\n      disadvantage,\n      target,\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipDialog: options.skipDialogs || false,\n      chatMessage: !GeneralUtil.isModuleOn('midi-qol') || true\n    };\n    \n    const finalRollMode = RollHelpers.determineRollMode(isPublicRollsOn, result.message?.rollMode);\n    rollProcessConfig.rollMode = finalRollMode;\n    \n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    LogUtil.log('GMAttackConfigDialog, initConfiguration - SIMPLIFIED result', [rollProcessConfig]);\n    \n    return rollProcessConfig;\n  }\n}","import { ROLL_TYPES } from '../../constants/General.mjs';\nimport { getSettings } from '../../constants/Settings.mjs';\nimport { SettingsUtil } from '../SettingsUtil.mjs';\nimport { LogUtil } from '../LogUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog, GMHitDieConfigDialog } from '../dialogs/gm-dialogs/index.mjs';\nimport { CustomRollDialog } from '../dialogs/CustomRollDialog.mjs';\n\n/**\n * Utility class for roll configuration operations in the Roll Requests Menu\n */\nexport class RollMenuConfigUtil {\n  /**\n   * Get roll configuration from dialog or create default\n   * @param {Actor[]} actors - Actors being rolled for\n   * @param {string} rollMethodName - The roll method name\n   * @param {string} rollKey - The roll key\n   * @param {boolean} skipRollDialog - Whether to skip dialogs\n   * @param {Array} pcActors - PC actors with owners\n   * @returns {Promise<BasicRollProcessConfiguration|null>} Process configuration or null if cancelled\n   */\n  static async getRollConfiguration(actors, rollMethodName, rollKey, skipRollDialog, pcActors) {\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Show GM configuration dialog (unless skip dialogs is enabled or it's a custom roll)\n    if (!skipRollDialog && rollMethodName !== ROLL_TYPES.CUSTOM) {\n      // Use appropriate dialog based on roll type\n      let DialogClass;\n      if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(rollMethodName)) {\n        DialogClass = GMSkillToolConfigDialog;\n      } else if (rollMethodName === ROLL_TYPES.HIT_DIE) {\n        DialogClass = GMHitDieConfigDialog;\n      } else {\n        DialogClass = GMRollConfigDialog;\n      }\n      const config = await DialogClass.initConfiguration(actors, rollMethodName, rollKey, { \n        skipRollDialog,\n        sendRequest: rollRequestsEnabled || false \n      });\n      LogUtil.log('getRollConfiguration', [config]);\n      \n      return config; // Will be null if cancelled\n    } else {\n      // Use default BasicRollProcessConfiguration when skipping dialogs\n      const config = {\n        rolls: [{\n          parts: [],\n          data: {},\n          options: {}\n        }],\n        advantage: false,\n        disadvantage: false,\n        rollMode: game.settings.get(\"core\", \"rollMode\"),\n        chatMessage: true,\n        isRollRequest: false,\n        skipRollDialog: true,\n        sendRequest: rollRequestsEnabled && pcActors.length > 0\n      };\n      \n      // Death saves always have DC 10\n      if (rollMethodName === ROLL_TYPES.DEATH_SAVE) {\n        config.target = 10;\n      }\n      \n      return config;\n    }\n  }\n\n  /**\n   * Handle custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  static async handleCustomRoll() {\n    const formula = await this.showCustomRollDialog();\n    return formula; // Will be null if cancelled\n  }\n\n  /**\n   * Show custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  static async showCustomRollDialog() {\n    LogUtil.log('showCustomRollDialog');\n    return CustomRollDialog.prompt({\n      formula: \"\",\n      readonly: false\n    });\n  }\n}","import { MODULE } from '../../constants/General.mjs';\nimport { LogUtil } from '../LogUtil.mjs';\nimport { adjustMenuOffset } from '../helpers/Helpers.mjs';\nimport { GeneralUtil } from '../helpers/GeneralUtil.mjs';\n\n/**\n * Utility class for drag and position handling in the Roll Requests Menu\n */\nexport class RollMenuDragUtil {\n  static SNAP_DISTANCE = 50; // pixels\n  static DRAG_HANDLE_SELECTOR = '.drag-handle';\n  static LIGHTNING_BOLT_SELECTOR = '#flash-rolls-icon';\n  \n  /**\n   * Initialize drag functionality for the menu\n   * @param {RollRequestsMenu} menu - The menu instance\n   * @deprecated Use direct event listener attachment in _onRender instead\n   */\n  static initializeDrag(menu) {\n    const dragHandle = menu.element.querySelector(this.DRAG_HANDLE_SELECTOR);\n    \n    if (!dragHandle) {\n      LogUtil.error('RollMenuDragUtil.initializeDrag - No drag handle found!');\n      return;\n    }\n    \n    dragHandle.addEventListener('mousedown', (e) => {\n      this.handleDragStart(e, menu);\n    });\n  }\n  \n  /**\n   * Handle drag start\n   * @param {MouseEvent} event \n   * @param {RollRequestsMenu} menu \n   */\n  static handleDragStart(event, menu) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    menu.isDragging = true;\n    if(!menu.element){return}\n    menu.element.classList.add('dragging');\n    \n    menu.element.classList.remove('docked-right');\n    \n    const menuRect = menu.element.getBoundingClientRect();\n    const startX = event.clientX;\n    const startY = event.clientY;\n    const initialLeft = menuRect.left;\n    const initialTop = menuRect.top;\n    \n    const parent = menu.element.parentElement;\n\n    document.body.appendChild(menu.element);\n    menu.element.style.position = 'fixed';\n    menu.element.style.inset = '';  // Clear inset first\n    menu.element.style.top = `${initialTop}px`;\n    menu.element.style.left = `${initialLeft}px`;\n    menu.element.style.right = 'auto';\n    menu.element.style.bottom = 'auto';\n    menu.element.style.zIndex = 'var(--z-index-app)'; // Ensure it's on top while dragging\n    \n    menu.element.offsetHeight;\n    \n    const dragData = {\n      startX,\n      startY,\n      initialLeft,\n      initialTop,\n      currentLeft: initialLeft,\n      currentTop: initialTop\n    };\n    \n    const handleMove = (e) => this.handleDragMove(e, menu, dragData);\n    const handleUp = (e) => this.handleDragEnd(e, menu, dragData, handleMove, handleUp);\n    \n    document.addEventListener('mousemove', handleMove);\n    document.addEventListener('mouseup', handleUp);\n  }\n  \n  /**\n   * Handle drag move\n   * @param {MouseEvent} event \n   * @param {RollRequestsMenu} menu \n   * @param {Object} dragData \n   */\n  static handleDragMove(event, menu, dragData) {\n    if (!menu.isDragging || !menu.element) return;\n    const deltaX = event.clientX - dragData.startX;\n    const deltaY = event.clientY - dragData.startY;\n    \n    dragData.currentLeft = dragData.initialLeft + deltaX;\n    dragData.currentTop = dragData.initialTop + deltaY;\n    \n    menu.element.style.inset = '';\n    menu.element.style.right = 'auto';\n    menu.element.style.bottom = 'auto';\n    \n    menu.element.style.position = 'fixed';\n    menu.element.style.top = `${dragData.currentTop}px`;\n    menu.element.style.left = `${dragData.currentLeft}px`;\n    \n    const remInPixels = parseFloat(getComputedStyle(document.documentElement).fontSize) * 15;\n    if (dragData.currentLeft < remInPixels) {\n      menu.element.classList.add('left-edge');\n    } else {\n      menu.element.classList.remove('left-edge');\n    }\n    \n    const computed = window.getComputedStyle(menu.element);\n\n    const snapInfo = this.calculateSnapDistance(menu);\n    if (snapInfo.type !== 'none') {\n      menu.element.classList.add('near-snap');\n    } else {\n      menu.element.classList.remove('near-snap');\n    }\n  }\n  \n  /**\n   * Handle drag end\n   * @param {MouseEvent} event \n   * @param {RollRequestsMenu} menu \n   * @param {Object} dragData \n   * @param {Function} moveHandler \n   * @param {Function} upHandler \n   */\n  static async handleDragEnd(event, menu, dragData, moveHandler, upHandler) {\n    LogUtil.log('RollMenuDragUtil.handleDragEnd');\n    \n    document.removeEventListener('mousemove', moveHandler);\n    document.removeEventListener('mouseup', upHandler);\n    \n    menu.isDragging = false;\n    menu.element.classList.remove('dragging');\n    menu.element.classList.remove('near-snap');\n    \n    menu.element.style.zIndex = '';\n    \n    const snapInfo = this.calculateSnapDistance(menu);\n    \n    if (snapInfo.type === 'both-edges') {\n      const chatNotifications = document.querySelector('#chat-notifications');\n      if (chatNotifications) {\n        chatNotifications.insertBefore(menu.element, chatNotifications.firstChild);\n      }\n      await this.snapToDefault(menu);\n    } else if (snapInfo.type === 'right-edge') {\n      const chatNotifications = document.querySelector('#chat-notifications');\n      if (chatNotifications) {\n        chatNotifications.insertBefore(menu.element, chatNotifications.firstChild);\n      }\n      await this.snapToRightEdge(menu, dragData.currentTop);\n    } else {\n      menu.isCustomPosition = true;\n      menu.customPosition = {\n        x: dragData.currentLeft,\n        y: dragData.currentTop,\n        isCustom: true,\n        dockedRight: false\n      };\n      const isCrlngnUIOn = document.querySelector('body.crlngn-tabs') ? true : false;\n      GeneralUtil.addCSSVars('--flash-rolls-menu-offset', isCrlngnUIOn ? '0px' : '16px');\n      \n      await this.saveCustomPosition(menu.customPosition);\n      menu.element.classList.add('custom-position');\n      \n      const remInPixels = parseFloat(getComputedStyle(document.documentElement).fontSize) * 15;\n      if (dragData.currentLeft < remInPixels) {\n        menu.element.classList.add('left-edge');\n      }\n    }\n  }\n  \n  /**\n   * Check if menu should snap and determine snap type\n   * @param {RollRequestsMenu} menu \n   * @returns {{type: string, distance: number}} Snap information\n   */\n  static calculateSnapDistance(menu) {\n    const lightningBolt = document.querySelector(this.LIGHTNING_BOLT_SELECTOR);\n    if (!lightningBolt) return { type: 'none', distance: Infinity };\n    \n    const menuRect = menu.element.getBoundingClientRect();\n    const boltRect = lightningBolt.getBoundingClientRect();\n    \n    const horizontalDistance = Math.abs(boltRect.left - menuRect.right);\n    const verticalDistance = window.innerHeight - menuRect.bottom;\n    \n    if (horizontalDistance <= this.SNAP_DISTANCE) {\n      if (verticalDistance <= this.SNAP_DISTANCE) {\n        return { type: 'both-edges', distance: 0 };\n      }\n      return { type: 'right-edge', distance: 0 };\n    }\n    \n    return { type: 'none', distance: Infinity };\n  }\n  \n  /**\n   * Snap menu to right edge with custom vertical position\n   * @param {RollRequestsMenu} menu \n   * @param {number} currentTop - The vertical position to maintain\n   */\n  static async snapToRightEdge(menu, currentTop) {\n    LogUtil.log('RollMenuDragUtil.snapToRightEdge', [currentTop]);\n    \n    menu.isCustomPosition = true;\n    menu.customPosition = {\n      y: currentTop,\n      isCustom: true,\n      dockedRight: true\n    };\n    \n    menu.element.classList.remove('custom-position', 'left-edge');\n    menu.element.classList.add('docked-right', 'snapping');\n    \n    menu.element.style.position = 'fixed';\n    menu.element.style.inset = '';\n    menu.element.style.left = '';\n    menu.element.style.right = '';\n    menu.element.style.bottom = '';\n    menu.element.style.top = `${currentTop}px`;\n    menu.element.style.zIndex = '';\n    \n    adjustMenuOffset();\n    \n    await this.saveCustomPosition(menu.customPosition);\n    \n    setTimeout(() => {\n      menu.element.classList.remove('snapping');\n    }, 300);\n  }\n  \n  /**\n   * Snap menu back to default position\n   * @param {RollRequestsMenu} menu \n   */\n  static async snapToDefault(menu) {\n    LogUtil.log('RollMenuDragUtil.snapToDefault');\n    \n    menu.isCustomPosition = false;\n    menu.customPosition = null;\n    \n    menu.element.classList.remove('custom-position');\n    menu.element.classList.remove('left-edge');\n    menu.element.classList.add('snapping');\n    \n    menu.element.style.position = '';\n    menu.element.style.inset = '';\n    menu.element.style.left = '';\n    menu.element.style.top = '';\n    menu.element.style.right = '';\n    menu.element.style.bottom = '';\n    menu.element.style.zIndex = '';  \n    \n    adjustMenuOffset();\n    \n    await this.saveCustomPosition(null);\n    \n    setTimeout(() => {\n      menu.element.classList.remove('snapping');\n    }, 300);\n  }\n  \n  /**\n   * Apply custom position to menu\n   * @param {RollRequestsMenu} menu \n   * @param {Object} position \n   */\n  static applyCustomPosition(menu, position) {\n    if (!position || !position.isCustom) return;\n\n    const menuSize = menu.element.getBoundingClientRect();\n    \n    LogUtil.log('RollMenuDragUtil.applyCustomPosition', [position]);\n    if(position.x < 0){\n      position.x = 0;\n    }else if (position.x > window.innerWidth - menuSize.width){\n      position.x = window.innerWidth - menuSize.width;\n    }\n    \n    if(position.y < 0){\n      position.y = 0;\n    }else if (position.y > window.innerHeight - menuSize.height){\n      position.y = window.innerHeight - menuSize.height;\n    }\n    \n    menu.isCustomPosition = true;\n    menu.customPosition = position;\n    \n    if (position.dockedRight) {\n      const chatNotifications = document.querySelector('#chat-notifications');\n      if (chatNotifications) {\n        chatNotifications.insertBefore(menu.element, chatNotifications.firstChild);\n      }\n      \n      menu.element.style.position = 'fixed';\n      menu.element.style.inset = '';\n      menu.element.style.top = `${position.y}px`;\n      menu.element.style.left = '';\n      menu.element.style.right = '';\n      menu.element.style.bottom = '';\n      \n      menu.element.classList.add('docked-right');\n      menu.element.classList.remove('custom-position', 'left-edge');\n      \n      adjustMenuOffset();\n    } else {\n      document.body.appendChild(menu.element);\n      \n      menu.element.style.position = 'fixed';\n      menu.element.style.inset = '';\n      menu.element.style.top = `${position.y}px`;\n      menu.element.style.left = `${position.x}px`;\n      menu.element.style.right = 'auto';\n      menu.element.style.bottom = 'auto';\n      \n      const isCrlngnUIOn = document.querySelector('body.crlngn-tabs') ? true : false;\n      GeneralUtil.addCSSVars('--flash-rolls-menu-offset', isCrlngnUIOn ? '0px' : '16px');\n      \n      menu.element.classList.add('custom-position');\n      menu.element.classList.remove('docked-right');\n      \n      const remInPixels = parseFloat(getComputedStyle(document.documentElement).fontSize) * 15;\n      if (position.x < remInPixels) {\n        menu.element.classList.add('left-edge');\n      }\n    }\n  }\n  \n  /**\n   * Save custom position to user flag\n   * @param {Object|null} position \n   */\n  static async saveCustomPosition(position) {\n    if (!position) {\n      await game.user.setFlag(MODULE.ID, 'menuCustomPosition', null);\n      return;\n    }\n\n    const menu = document.querySelector('.flash-rolls-menu');\n    if (menu) {\n      const menuSize = menu.getBoundingClientRect();\n\n      if(position.x < 0){\n        position.x = 0;\n      }else if (position.x > window.innerWidth - menuSize.width){\n        position.x = window.innerWidth - menuSize.width;\n      }\n      \n      if(position.y < 0){\n        position.y = 0;\n      }else if (position.y > window.innerHeight - menuSize.height){\n        position.y = window.innerHeight - menuSize.height;\n      }\n    }\n    \n    await game.user.setFlag(MODULE.ID, 'menuCustomPosition', position);\n  }\n  \n  /**\n   * Load custom position from user flag\n   * @returns {Object|null} Position object or null\n   */\n  static loadCustomPosition() {\n    return game.user.getFlag(MODULE.ID, 'menuCustomPosition') || null;\n  }\n  \n  /**\n   * Reset menu to default position\n   * @param {RollRequestsMenu} menu \n   */\n  static async resetPosition(menu) {\n    await this.snapToDefault(menu);\n  }\n}","import { MODULE_ID } from '../constants/General.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport RollRequestsMenu from './RollRequestsMenu.mjs';\n\n/**\n * Utility class for managing actor status (favorites, blocked) using actor flags\n */\nexport class ActorStatusUtil {\n  /**\n   * Actor status flag keys\n   */\n  static FLAGS = {\n    FAVORITE: 'isFavorite',\n    BLOCKED: 'isBlocked'\n  };\n\n  /**\n   * Check if an actor is favorited\n   * @param {Actor|string} actor - The actor or actor ID\n   * @returns {boolean} Whether the actor is favorited\n   */\n  static isFavorite(actor) {\n    try {\n      const actorDoc = typeof actor === 'string' ? game.actors.get(actor) : actor;\n      if (!actorDoc || !actorDoc.getFlag) return false;\n      return actorDoc.getFlag(MODULE_ID, this.FLAGS.FAVORITE) === true;\n    } catch (error) {\n      LogUtil.error('Error checking favorite status', [error, actor]);\n      return false;\n    }\n  }\n\n  /**\n   * Check if an actor is blocked\n   * @param {Actor|string} actor - The actor or actor ID\n   * @returns {boolean} Whether the actor is blocked\n   */\n  static isBlocked(actor) {\n    const actorDoc = typeof actor === 'string' ? game.actors.get(actor) : actor;\n    if (!actorDoc) return false;\n    return actorDoc.getFlag(MODULE_ID, this.FLAGS.BLOCKED) === true;\n  }\n\n  /**\n   * Set favorite status for an actor\n   * @param {Actor|string} actor - The actor or actor ID\n   * @param {boolean} isFavorite - Whether to favorite the actor\n   * @returns {Promise<void>}\n   */\n  static async setFavorite(actor, isFavorite) {\n    const actorDoc = typeof actor === 'string' ? game.actors.get(actor) : actor;\n    if (!actorDoc) {\n      LogUtil.error('Actor not found', [actor]);\n      return;\n    }\n\n    LogUtil.log('ActorStatusUtil.setFavorite', [actorDoc.name, isFavorite]);\n\n    if (isFavorite) {\n      // If favoriting, remove blocked status\n      await actorDoc.setFlag(MODULE_ID, this.FLAGS.FAVORITE, true);\n      await actorDoc.unsetFlag(MODULE_ID, this.FLAGS.BLOCKED);\n      \n      // ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.actorAddedToFavorites\", {\n      //   actor: actorDoc.name\n      // }) || `${actorDoc.name} added to Flash Rolls favorites`);\n    } else {\n      await actorDoc.unsetFlag(MODULE_ID, this.FLAGS.FAVORITE);\n      \n      // ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.actorRemovedFromFavorites\", {\n      //   actor: actorDoc.name\n      // }) || `${actorDoc.name} removed from Flash Rolls favorites`);\n    }\n\n    this._refreshMenu();\n  }\n\n  /**\n   * Set blocked status for an actor\n   * @param {Actor|string} actor - The actor or actor ID\n   * @param {boolean} isBlocked - Whether to block the actor\n   * @returns {Promise<void>}\n   */\n  static async setBlocked(actor, isBlocked) {\n    const actorDoc = typeof actor === 'string' ? game.actors.get(actor) : actor;\n    if (!actorDoc) {\n      LogUtil.error('Actor not found', [actor]);\n      return;\n    }\n\n    LogUtil.log('ActorStatusUtil.setBlocked', [actorDoc.name, isBlocked]);\n\n    if (isBlocked) {\n      // If blocking, remove favorite status\n      await actorDoc.setFlag(MODULE_ID, this.FLAGS.BLOCKED, true);\n      await actorDoc.unsetFlag(MODULE_ID, this.FLAGS.FAVORITE);\n      \n      // ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.actorBlocked\", {\n      //   actor: actorDoc.name\n      // }) || `${actorDoc.name} blocked from Flash Rolls menu`);\n    } else {\n      await actorDoc.unsetFlag(MODULE_ID, this.FLAGS.BLOCKED);\n      \n      // ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.actorUnblocked\", {\n      //   actor: actorDoc.name\n      // }) || `${actorDoc.name} unblocked from Flash Rolls menu`);\n    }\n\n    this._refreshMenu();\n  }\n\n  /**\n   * Toggle favorite status for an actor\n   * @param {Actor|string} actor - The actor or actor ID\n   * @returns {Promise<void>}\n   */\n  static async toggleFavorite(actor, makeFavorite) {\n    const isFavorite = makeFavorite ? true : !this.isFavorite(actor);\n    await this.setFavorite(actor, isFavorite);\n  }\n\n  /**\n   * Toggle blocked status for an actor\n   * @param {Actor|string} actor - The actor or actor ID\n   * @returns {Promise<void>}\n   */\n  static async toggleBlocked(actor, makeBlocked) {\n    const isBlocked = makeBlocked ? true : !this.isBlocked(actor);\n    await this.setBlocked(actor, isBlocked);\n  }\n\n  /**\n   * Block an actor (for drag-to-remove functionality)\n   * @param {Actor|string} actor - The actor or actor ID\n   * @returns {Promise<void>}\n   */\n  static async blockActor(actor) {\n    await this.setBlocked(actor, true);\n  }\n\n  /**\n   * Get all favorite actors\n   * @returns {Actor[]} Array of favorite actors\n   */\n  static getFavoriteActors() {\n    return game.actors.filter(actor => this.isFavorite(actor));\n  }\n\n  /**\n   * Get all blocked actors\n   * @returns {Actor[]} Array of blocked actors\n   */\n  static getBlockedActors() {\n    return game.actors.filter(actor => this.isBlocked(actor));\n  }\n\n  /**\n   * Filter actors by removing blocked ones\n   * @param {Actor[]} actors - Array of actors to filter\n   * @returns {Actor[]} Filtered array without blocked actors\n   */\n  static filterBlocked(actors) {\n    return actors.filter(actor => !this.isBlocked(actor));\n  }\n\n  /**\n   * Get actor status object\n   * @param {Actor|string} actor - The actor or actor ID\n   * @returns {Object} Status object with favorite and blocked properties\n   */\n  static getActorStatus(actor) {\n    return {\n      isFavorite: this.isFavorite(actor),\n      isBlocked: this.isBlocked(actor)\n    };\n  }\n\n  /**\n   * Clear all status flags for an actor\n   * @param {Actor|string} actor - The actor or actor ID\n   * @returns {Promise<void>}\n   */\n  static async clearActorStatus(actor) {\n    const actorDoc = typeof actor === 'string' ? game.actors.get(actor) : actor;\n    if (!actorDoc) return;\n\n    await actorDoc.unsetFlag(MODULE_ID, this.FLAGS.FAVORITE);\n    await actorDoc.unsetFlag(MODULE_ID, this.FLAGS.BLOCKED);\n    \n    this._refreshMenu();\n  }\n\n  /**\n   * Refresh the Roll Requests Menu if it's open\n   * @private\n   */\n  static _refreshMenu() {\n    RollRequestsMenu.refreshIfOpen();\n  }\n\n  /**\n   * Get context menu options for actor management\n   * @param {HTMLElement} html - The HTML element\n   * @param {Array} options - Existing context menu options\n   * @returns {Array} Updated context menu options\n   */\n  static getContextMenuOptions(html, options) {\n    if (!game.user.isGM) return options;\n\n    options.push({\n      name: \"FLASH_ROLLS.contextMenu.toggleFavorite\",\n      icon: '<i class=\"fas fa-bolt\"></i>',\n      callback: li => {\n        const actorId = li.data('documentId') || li.dataset.entryId;\n        if (actorId) {\n          this.toggleFavorite(actorId);\n        }\n      },\n      condition: li => game.user.isGM\n    });\n\n    options.push({\n      name: \"FLASH_ROLLS.contextMenu.toggleBlocked\",\n      icon: '<i class=\"fas fa-ban\"></i>',\n      callback: li => {\n        const actorId = li.data('documentId') || li.dataset.entryId;\n        if (actorId) {\n          this.toggleBlocked(actorId);\n        }\n      },\n      condition: li => game.user.isGM\n    });\n\n    return options;\n  }\n}","import { LogUtil } from '../LogUtil.mjs';\nimport { ActorStatusUtil } from '../ActorStatusUtil.mjs';\n\n/**\n * Utility class for handling drag-to-remove functionality for actors in the Roll Requests Menu\n */\nexport class ActorDragUtil {\n  /**\n   * Initialize drag functionality for actor list items\n   * @param {RollRequestsMenu} menu - The menu instance\n   */\n  static initializeActorDrag(menu) {\n    const actorElements = menu.element.querySelectorAll('.actor-list .actor.drag-wrapper[draggable=\"true\"]');\n    \n    actorElements.forEach(actorElement => {\n      actorElement.addEventListener('dragstart', (e) => this.handleDragStart(e, menu));\n      actorElement.addEventListener('dragend', (e) => this.handleDragEnd(e, menu));\n    });\n    \n    const menuContainer = menu.element;\n    menuContainer.addEventListener('dragover', (e) => this.handleDragOver(e));\n    menuContainer.addEventListener('drop', (e) => this.handleDrop(e, menu));\n    \n    document.addEventListener('dragover', (e) => this.handleGlobalDragOver(e, menu));\n    document.addEventListener('drop', (e) => this.handleGlobalDrop(e, menu));\n  }\n  \n  /**\n   * Handle drag start event\n   * @param {DragEvent} event \n   * @param {RollRequestsMenu} menu \n   */\n  static handleDragStart(event, menu) {\n    const actorElement = event.currentTarget;\n    const actorId = actorElement.dataset.actorId;\n    const actor = game.actors.get(actorId);\n    \n    if (!actor) {\n      event.preventDefault();\n      return;\n    }\n    \n    LogUtil.log('ActorDragUtil.handleDragStart', [actor.name, actorId]);\n    \n    event.dataTransfer.setData('text/plain', actorId);\n    event.dataTransfer.setData('application/json', JSON.stringify({\n      actorId: actorId,\n      actorName: actor.name,\n      uniqueId: actorElement.dataset.id,\n      tokenId: actorElement.dataset.tokenId || null\n    }));\n    \n    event.dataTransfer.effectAllowed = 'move';\n    actorElement.classList.add('dragging');\n    \n    const rect = actorElement.getBoundingClientRect();\n    const dragImage = actorElement.cloneNode(true);\n    dragImage.style.opacity = '0.6';\n    dragImage.style.position = 'absolute';\n    dragImage.style.top = '-1000px';\n    dragImage.style.left = '-1000px';\n    dragImage.style.width = rect.width + 'px';\n    dragImage.style.pointerEvents = 'none';\n    document.body.appendChild(dragImage);\n    \n    event.dataTransfer.setDragImage(dragImage, rect.width / 2, rect.height / 2);\n    \n    setTimeout(() => {\n      if (dragImage.parentNode) {\n        dragImage.parentNode.removeChild(dragImage);\n      }\n    }, 0);\n    \n    menu._currentDragData = {\n      actorId: actorId,\n      actorElement: actorElement,\n      startTime: Date.now()\n    };\n  }\n  \n  /**\n   * Handle drag over event within the menu\n   * @param {DragEvent} event \n   */\n  static handleDragOver(event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'none';\n  }\n  \n  /**\n   * Handle drop event within the menu\n   * @param {DragEvent} event \n   * @param {RollRequestsMenu} menu \n   */\n  static handleDrop(event, menu) {\n    event.preventDefault();\n    LogUtil.log('ActorDragUtil.handleDrop - dropped within menu, canceling remove');\n    \n    this.cleanupDrag(menu);\n  }\n  \n  /**\n   * Handle global drag over (outside the menu)\n   * @param {DragEvent} event \n   * @param {RollRequestsMenu} menu \n   */\n  static handleGlobalDragOver(event, menu) {\n    if (!menu._currentDragData) return;\n    \n    const menuRect = menu.element.getBoundingClientRect();\n    const isOverMenu = (\n      event.clientX >= menuRect.left &&\n      event.clientX <= menuRect.right &&\n      event.clientY >= menuRect.top &&\n      event.clientY <= menuRect.bottom\n    );\n    \n    if (!isOverMenu) {\n      event.preventDefault();\n      event.dataTransfer.dropEffect = 'move';\n      \n      if (menu._currentDragData.actorElement) {\n        menu._currentDragData.actorElement.classList.add('drag-remove-zone');\n      }\n    } else {\n      if (menu._currentDragData.actorElement) {\n        menu._currentDragData.actorElement.classList.remove('drag-remove-zone');\n      }\n    }\n  }\n  \n  /**\n   * Handle global drop (outside the menu)\n   * @param {DragEvent} event \n   * @param {RollRequestsMenu} menu \n   */\n  static handleGlobalDrop(event, menu) {\n    if (!menu._currentDragData) return;\n    \n    const menuRect = menu.element.getBoundingClientRect();\n    const isOverMenu = (\n      event.clientX >= menuRect.left &&\n      event.clientX <= menuRect.right &&\n      event.clientY >= menuRect.top &&\n      event.clientY <= menuRect.bottom\n    );\n    \n    if (!isOverMenu) {\n      event.preventDefault();\n      \n      const dragData = JSON.parse(event.dataTransfer.getData('application/json'));\n      LogUtil.log('ActorDragUtil.handleGlobalDrop - blocking actor', [dragData.actorName]);\n      \n      this.blockActor(dragData.actorId, menu);\n    }\n    \n    this.cleanupDrag(menu);\n  }\n  \n  /**\n   * Handle drag end event\n   * @param {DragEvent} event \n   * @param {RollRequestsMenu} menu \n   */\n  static handleDragEnd(event, menu) {\n    LogUtil.log('ActorDragUtil.handleDragEnd');\n    \n    setTimeout(() => {\n      this.cleanupDrag(menu);\n    }, 100);\n  }\n  \n  /**\n   * Block an actor by setting the blocked flag\n   * @param {string} actorId - The actor ID to block\n   * @param {RollRequestsMenu} menu - The menu instance\n   */\n  static async blockActor(actorId, menu) {\n    try {\n      await ActorStatusUtil.blockActor(actorId);\n      \n      const actorElement = menu.element.querySelector(`[data-actor-id=\"${actorId}\"]`);\n      if (actorElement) {\n        const uniqueId = actorElement.dataset.id;\n        menu.selectedActors.delete(uniqueId);\n      }\n      \n      // Let the ActorStatusUtil._refreshMenu() handle the re-render automatically\n      \n    } catch (error) {\n      LogUtil.error('Error blocking actor', [error]);\n      ui.notifications.error(`Failed to block actor: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Clean up drag-related state and visual feedback\n   * @param {RollRequestsMenu} menu \n   */\n  static cleanupDrag(menu) {\n    if (menu._currentDragData?.actorElement) {\n      menu._currentDragData.actorElement.classList.remove('dragging', 'drag-remove-zone');\n    }\n    \n    menu._currentDragData = null;\n  }\n  \n  /**\n   * Remove drag event listeners (for cleanup)\n   * @param {RollRequestsMenu} menu \n   */\n  static removeDragListeners(menu) {\n    document.removeEventListener('dragover', this.handleGlobalDragOver);\n    document.removeEventListener('drop', this.handleGlobalDrop);\n  }\n}","import { LogUtil } from '../LogUtil.mjs';\nimport { isPlayerOwned } from '../helpers/Helpers.mjs';\nimport { ActorStatusUtil } from '../ActorStatusUtil.mjs';\n\n/**\n * Utility class for handling drag and drop of actors from the directory into the Flash Rolls menu\n */\nexport class ActorDropUtil {\n  /**\n   * Check if the current user can drop actors into the menu\n   * @param {string} selector - The drop target selector\n   * @returns {boolean} Whether the drop is allowed\n   */\n  static canDrop(selector) {\n    LogUtil.log('ActorDropUtil.canDrop', [selector]);\n    return game.user.isGM;\n  }\n\n  /**\n   * Handle the drag over event for visual feedback\n   * @param {DragEvent} event - The drag over event\n   * @param {RollRequestsMenu} menu - The menu instance\n   */\n  static handleDragOver(event, menu) {\n    LogUtil.log('ActorDropUtil.handleDragOver', [event, event.currentTarget, event.target]);\n    \n    event.preventDefault();\n    event.stopPropagation();\n    \n    if (event.dataTransfer) {\n      event.dataTransfer.dropEffect = 'copy';\n      LogUtil.log('ActorDropUtil.handleDragOver - dataTransfer types:', [event.dataTransfer.types]);\n    }\n    \n    const dropZone = event.currentTarget.closest('.actor-list, .actors');\n    if (dropZone) {\n      dropZone.classList.add('drag-over');\n      LogUtil.log('ActorDropUtil.handleDragOver - added drag-over class');\n    }\n    \n    return false;\n  }\n\n  /**\n   * Handle the drag leave event to remove visual feedback\n   * @param {DragEvent} event - The drag leave event\n   */\n  static handleDragLeave(event) {\n    LogUtil.log('ActorDropUtil.handleDragLeave', [event, event.currentTarget, event.target]);\n    \n    const rect = event.currentTarget.getBoundingClientRect();\n    const isActuallyLeaving = (\n      event.clientX < rect.left ||\n      event.clientX > rect.right ||\n      event.clientY < rect.top ||\n      event.clientY > rect.bottom\n    );\n    \n    if (isActuallyLeaving) {\n      const dropZone = event.currentTarget.closest('.actor-list, .actors');\n      if (dropZone) {\n        dropZone.classList.remove('drag-over');\n        LogUtil.log('ActorDropUtil.handleDragLeave - removed drag-over class');\n      }\n    }\n  }\n\n  /**\n   * Handle the drop event when an actor is dropped into the menu\n   * @param {DragEvent} event - The drop event\n   * @param {RollRequestsMenu} menu - The menu instance\n   */\n  static async handleDrop(event, menu) {\n    event.preventDefault();\n    event.stopPropagation(); // Prevent bubbling to parent elements\n    \n    for (let i = 0; i < event.dataTransfer.types.length; i++) {\n      const type = event.dataTransfer.types[i];\n      const data = event.dataTransfer.getData(type);\n      LogUtil.log(`ActorDropUtil.handleDrop - ${type}:`, [data]);\n    }\n\n    const allDragOverElements = menu.element.querySelectorAll('.drag-over');\n    allDragOverElements.forEach(element => {\n      element.classList.remove('drag-over');\n    });\n    LogUtil.log('ActorDropUtil.handleDrop - removed drag-over class from all elements');\n\n    try {\n      const dragData = this.parseDragData(event);\n      if (!dragData || dragData.type !== 'Actor') {\n        LogUtil.log('ActorDropUtil.handleDrop - Invalid drag data', [dragData]);\n        return;\n      }\n\n      const actor = await this.getActorFromDragData(dragData);\n      if (!actor) {\n        ui.notifications.warn(game.i18n.localize(\"FLASH_ROLLS.notifications.actorNotFound\") || \"Actor not found\");\n        return;\n      }\n      LogUtil.log('ActorDropUtil.handleDrop - Processing actor', [actor]);\n\n      const isPC = isPlayerOwned(actor);\n      const targetTab = isPC ? 'pc' : 'npc';\n\n      if (menu.currentTab !== targetTab) {\n        LogUtil.log('ActorDropUtil.handleDrop - Switching to tab', [targetTab]);\n        menu.currentTab = targetTab;\n      }\n      await this.addActorToMenu(actor, menu);\n\n      // ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.actorAdded\", { \n      //   actor: actor.name \n      // }) || `Added ${actor.name} to Flash Rolls menu`);\n\n    } catch (error) {\n      LogUtil.error('ActorDropUtil.handleDrop - Error processing drop', [error]);\n      ui.notifications.error(game.i18n.localize(\"FLASH_ROLLS.notifications.dropError\") || \"Error adding actor to menu\");\n    }\n  }\n\n  /**\n   * Parse drag data from the drag event\n   * @param {DragEvent} event - The drag event\n   * @returns {Object|null} The parsed drag data or null if invalid\n   */\n  static parseDragData(event) {\n    try {\n      LogUtil.log('ActorDropUtil.parseDragData - Starting parse, available types:', [event.dataTransfer.types]);\n      \n      const jsonData = event.dataTransfer.getData('application/json');\n      LogUtil.log('ActorDropUtil.parseDragData - JSON data:', [jsonData]);\n      if (jsonData) {\n        const parsed = JSON.parse(jsonData);\n        LogUtil.log('ActorDropUtil.parseDragData - Parsed JSON:', [parsed]);\n        return parsed;\n      }\n\n      const textData = event.dataTransfer.getData('text/plain');\n      LogUtil.log('ActorDropUtil.parseDragData - Text data:', [textData]);\n      \n      if (textData) {\n        if (textData.startsWith('Actor.')) {\n          const dragData = {\n            type: 'Actor',\n            uuid: textData\n          };\n          LogUtil.log('ActorDropUtil.parseDragData - Created Actor drag data from text:', [dragData]);\n          return dragData;\n        }\n        \n        try {\n          const parsed = JSON.parse(textData);\n          LogUtil.log('ActorDropUtil.parseDragData - Parsed text as JSON:', [parsed]);\n          return parsed;\n        } catch (e) {\n          LogUtil.log('ActorDropUtil.parseDragData - Text is not JSON');\n        }\n      }\n\n      LogUtil.log('ActorDropUtil.parseDragData - No valid data found');\n      return null;\n    } catch (error) {\n      LogUtil.error('ActorDropUtil.parseDragData - Error parsing drag data', [error]);\n      return null;\n    }\n  }\n\n  /**\n   * Get the actor document from drag data\n   * @param {Object} dragData - The drag data object\n   * @returns {Promise<Actor|null>} The actor document or null if not found\n   */\n  static async getActorFromDragData(dragData) {\n    try {\n      if (dragData.uuid) {\n        return await fromUuid(dragData.uuid);\n      } else if (dragData.id) {\n        return game.actors.get(dragData.id);\n      }\n      return null;\n    } catch (error) {\n      LogUtil.error('ActorDropUtil.getActorFromDragData - Error getting actor', [error]);\n      return null;\n    }\n  }\n\n  /**\n   * Add an actor to the menu as a favorite\n   * @param {Actor} actor - The actor to add\n   * @param {RollRequestsMenu} menu - The menu instance\n   */\n  static async addActorToMenu(actor, menu) {\n    LogUtil.log('ActorDropUtil.addActorToMenu', [actor.name, actor.id]);\n    LogUtil.log('ActorDropUtil.addActorToMenu - Current tab:', [menu.currentTab]);\n    \n    // Check current status\n    const isBlocked = ActorStatusUtil.isBlocked(actor);\n    const isFavorite = ActorStatusUtil.isFavorite(actor);\n    \n    LogUtil.log('ActorDropUtil.addActorToMenu - Actor status:', [{ isBlocked, isFavorite }]);\n    \n    if (isFavorite && !isBlocked) {\n      LogUtil.log('ActorDropUtil.addActorToMenu - Actor already a favorite', [actor.name]);\n      ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.actorAlreadyAdded\", { \n        actor: actor.name \n      }) || `${actor.name} is already in the menu`);\n      return;\n    }\n\n    // Add to favorites (this will automatically remove blocked status if needed)\n    LogUtil.log('ActorDropUtil.addActorToMenu - Setting as favorite:', [actor.id]);\n    await ActorStatusUtil.setFavorite(actor, true);\n    \n    // The ActorStatusUtil.setFavorite method will automatically trigger a menu refresh\n    // and handle removing blocked status, so we don't need to manually do anything else\n    \n    LogUtil.log('ActorDropUtil.addActorToMenu - Actor added to favorites successfully', [actor.name, actor.id]);\n  }\n}","import { MODULE, ROLL_TYPES } from '../constants/General.mjs';\nimport { HOOKS_CORE } from '../constants/Hooks.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { SidebarUtil } from './SidebarUtil.mjs';\nimport { getPlayerOwner, isPlayerOwned, hasTokenInScene, updateCanvasTokenSelection, delay, buildRollTypes, NotificationManager, filterActorsForDeathSaves, categorizeActorsByOwnership, adjustMenuOffset, getActorData } from './helpers/Helpers.mjs';\nimport { RollHandlers } from './RollHandlers.mjs';\nimport { RollHelpers } from './helpers/RollHelpers.mjs';\nimport { ensureCombatForInitiative, filterActorsForInitiative } from './helpers/RollValidationHelpers.mjs';\nimport { GeneralUtil } from './helpers/GeneralUtil.mjs';\nimport { ModuleHelpers } from './helpers/ModuleHelpers.mjs';\nimport { ChatMessageUtils } from './ChatMessageUtils.mjs';\nimport { RollMenuActorUtil } from './utils/RollMenuActorUtil.mjs';\nimport { RollMenuConfigUtil } from './utils/RollMenuConfigUtil.mjs';\nimport { RollMenuDragUtil } from './utils/RollMenuDragUtil.mjs';\nimport { ActorStatusUtil } from './ActorStatusUtil.mjs';\nimport { ActorDragUtil } from './utils/ActorDragUtil.mjs';\nimport { ActorDropUtil } from './utils/ActorDropUtil.mjs';\n\n/**\n * Roll Requests Menu Application\n * Extends Foundry's ApplicationV2 with Handlebars support to provide a menu interface for GMs to request rolls from players\n */\nconst { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api;\nexport default class RollRequestsMenu extends HandlebarsApplicationMixin(ApplicationV2) {\n  /**\n   * Singleton instance of the menu\n   * @type {RollRequestsMenu|null}\n   */\n  static #instance = null;\n\n  /**\n   * Debounce timer for refresh operations\n   * @type {number|null}\n   */\n  static #refreshDebounceTimer = null;\n\n  /**\n   * Debounce delay in milliseconds\n   * @type {number}\n   */\n  static #REFRESH_DEBOUNCE_DELAY = 250;\n\n  constructor(options = {}) {\n    LogUtil.log('RollRequestsMenu.constructor', [options]);\n    super(options);\n    \n    this.selectedActors = new Set();\n    this.currentTab = 'pc';\n    this.selectedRequestType = null;\n    this.isLocked = false; \n    this.optionsExpanded = game.user.getFlag(MODULE.ID, 'menuOptionsExpanded') ?? false;\n    this.accordionStates = game.user.getFlag(MODULE.ID, 'menuAccordionStates') ?? {};\n    \n    this.isDragging = false;\n    this.isCustomPosition = false;\n    this.customPosition = RollMenuDragUtil.loadCustomPosition();\n    \n    this._initializeFromSelectedTokens();\n  }\n\n  static DEFAULT_OPTIONS = {\n    id: 'flash-rolls-menu',\n    classes: ['flash-rolls-menu', 'placeable-hud'],\n    tag: 'div',\n    window: {\n      frame: false,\n      resizable: false,\n      minimizable: false\n    },\n    position: {},\n    dragDrop: [\n      {\n        dropSelector: '.actor-list'\n      }\n    ]\n  };\n\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/requests-menus.hbs`\n    }\n  };  \n  \n  async _prepareContext(options) {\n    LogUtil.log('_prepareContext');\n    const SETTINGS = getSettings();\n    const context = await super._prepareContext(options);\n    const actors = game.actors.contents;\n    const pcActors = [];\n    const npcActors = [];\n    const currentScene = game.scenes.active;\n    \n    for (const actor of actors) {\n      if (actor.type !== 'character' && actor.type !== 'npc') continue;\n      \n      const createActorData = (token = null) => {\n        const actorForStats = token?.actor || actor;\n        const hpData = RollMenuActorUtil.getActorHPData(actorForStats);\n        return {\n          id: actor.id,\n          uuid: actor.uuid,\n          name: token ? token.name : actor.name,\n          img: actor.img,\n          selected: this.selectedActors.has(token?.id || actor.id),\n          crlngnStats: RollMenuActorUtil.getActorStats(actorForStats),\n          hpPercent: hpData.hpPercent,\n          hpColor: hpData.hpColor,\n          tokenId: token?.id || null,\n          isToken: !!token,\n          uniqueId: token?.id || actor.id\n        };\n      };\n      \n      const isPlayerOwned = Object.entries(actor.ownership)\n        .some(([userId, level]) => {\n          const user = game.users.get(userId);\n          return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        });\n      \n      if (isPlayerOwned) {\n        if (ActorStatusUtil.isBlocked(actor)) {\n          continue;\n        }\n        \n        const showOnlyPCsWithToken = SettingsUtil.get(SETTINGS.showOnlyPCsWithToken?.tag);\n        const isFavorite = ActorStatusUtil.isFavorite(actor);\n        \n        const tokensInScene = currentScene?.tokens.filter(token => token.actorId === actor.id) || [];\n        \n        if (isFavorite) {\n          if (tokensInScene.length > 0) {\n            tokensInScene.forEach(tokenDoc => {\n              const actorData = createActorData(tokenDoc);\n              actorData.isFavorite = true;\n              pcActors.push(actorData);\n            });\n          } else {\n            const actorData = createActorData();\n            actorData.isFavorite = true;\n            pcActors.push(actorData);\n          }\n        } else if (showOnlyPCsWithToken) {\n          if (tokensInScene.length > 0) {\n            tokensInScene.forEach(tokenDoc => {\n              const actorData = createActorData(tokenDoc);\n              pcActors.push(actorData);\n            });\n          }\n        } else {\n          if (tokensInScene.length > 0) {\n            tokensInScene.forEach(tokenDoc => {\n              const actorData = createActorData(tokenDoc);\n              pcActors.push(actorData);\n            });\n          } else {\n            const actorData = createActorData();\n            pcActors.push(actorData);\n          }\n        }\n      } else {\n        if (ActorStatusUtil.isBlocked(actor)) {\n          continue;\n        }\n        \n        const isFavorite = ActorStatusUtil.isFavorite(actor);\n        const tokensInScene = currentScene?.tokens.filter(token => token.actorId === actor.id) || [];\n        \n        if (isFavorite) {\n          if (tokensInScene.length > 0) {\n            tokensInScene.forEach(tokenDoc => {\n              const actorData = createActorData(tokenDoc);\n              actorData.isFavorite = true;\n              npcActors.push(actorData);\n            });\n          } else {\n            const actorData = createActorData();\n            actorData.isFavorite = true;\n            npcActors.push(actorData);\n          }\n        } else {\n          if (tokensInScene.length > 0) {\n            tokensInScene.forEach(tokenDoc => {\n              const actorData = createActorData(tokenDoc);\n              npcActors.push(actorData);\n            });\n          }\n        }\n      }\n    }\n    \n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    const showOnlyPCsWithToken = SettingsUtil.get(SETTINGS.showOnlyPCsWithToken.tag);\n    \n    const currentActors = this.currentTab === 'pc' ? pcActors : npcActors;\n    const selectAllOn = currentActors.length > 0 && \n      currentActors.every(actor => this.selectedActors.has(actor.uniqueId));\n    \n    const requestTypes = [];\n    for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n      const requestType = {\n        id: key,\n        name: game.i18n.localize(`FLASH_ROLLS.rollTypes.${option.name}`) || option.label,\n        rollable: option.subList == null,\n        hasSubList: !!option.subList,\n        selected: this.selectedRequestType === key, \n        expanded: this.accordionStates[key] ?? false,\n        subItems: []\n      };\n      \n      if (option.subList) {\n        requestType.subItems = buildRollTypes(key, this.selectedActors);\n      }\n      \n      requestTypes.push(requestType);\n    }\n\n    const rollTypes = buildRollTypes(this.selectedRequestType, this.selectedActors);\n    \n    const preparedContext = {\n      ...context,\n      actors: currentActors,\n      currentTab: this.currentTab,\n      isPCTab: this.currentTab === 'pc',\n      isNPCTab: this.currentTab === 'npc',\n      selectedTab: this.currentTab,\n      rollRequestsEnabled,\n      skipRollDialog,\n      groupRollsMsgEnabled,\n      selectAllOn,\n      hasSelectedActors: this.selectedActors.size > 0,\n      requestTypes,\n      rollTypes,\n      showNames: true,\n      actorsLocked: this.isLocked,\n      optionsExpanded: this.optionsExpanded,\n      isGM: game.user.isGM,\n      isCompact: SettingsUtil.get(SETTINGS.compactMode.tag)\n    };\n    \n    this._lastPreparedContext = preparedContext;\n    \n    return preparedContext;\n  }\n\n\n  /**\n   * Override _renderFrame to control where the element is inserted in the DOM\n   * @override\n   */\n  async _renderFrame(options) {\n    const frame = await super._renderFrame(options);\n    \n    // Load and store custom position for use in _onRender\n    const customPosition = this.customPosition || RollMenuDragUtil.loadCustomPosition();\n    if (customPosition?.isCustom) {\n      this.isCustomPosition = true;\n      this.customPosition = customPosition;\n    }\n    \n    // Default placement in chat notifications area\n    const chatNotifications = document.querySelector('#chat-notifications');\n    if (chatNotifications && frame) {\n      chatNotifications.insertBefore(frame, chatNotifications.firstChild);\n    }\n    \n    return frame;\n  }\n\n  /**\n   * Called after the application is rendered\n   * Verifies if roll controls are visible and adjusts the offset of the menu\n   */\n  _onRender(context, options) {\n    super._onRender(context, options);\n\n    const menu = document.querySelector(\"#flash-rolls-menu\");\n    if(menu){\n      const SETTINGS = getSettings();\n      const isCompactMode = SettingsUtil.get(SETTINGS.compactMode.tag);\n      if(isCompactMode){\n        menu.classList.add(\"compact\");\n      }else{\n        menu.classList.remove(\"compact\");\n      }\n    }\n    \n    LogUtil.log('_onRender - DragDrop handlers:', [this._dragDrop]);\n    RollMenuDragUtil.applyCustomPosition(this, this.customPosition);\n    if (this._dragDrop && this._dragDrop.length > 0) {\n      this._dragDrop.forEach((handler, index) => {\n        LogUtil.log(`_onRender - DragDrop handler ${index}:`, [handler, handler.dropSelector, handler.callbacks]);\n      });\n    }\n    \n    this._attachListeners();\n    const dropZones = this.element.querySelectorAll('.actor-list');\n    \n    dropZones.forEach((zone, index) => {      \n      zone.removeEventListener('dragover', this._boundDragOver);\n      zone.removeEventListener('drop', this._boundDrop);\n      zone.removeEventListener('dragenter', this._boundDragEnter);\n      zone.removeEventListener('dragleave', this._boundDragLeave);\n      \n      this._boundDragOver = (e) => {\n        LogUtil.log('Manual dragover event triggered', [e]);\n        this._onDragOver(e);\n      };\n      \n      this._boundDrop = (e) => {\n        LogUtil.log('Manual drop event triggered', [e]);\n        this._onDrop(e);\n      };\n      \n      this._boundDragEnter = (e) => {\n        LogUtil.log('Manual dragenter event triggered', [e]);\n        e.preventDefault();\n      };\n      \n      this._boundDragLeave = (e) => {\n        LogUtil.log('Manual dragleave event triggered', [e]);\n        ActorDropUtil.handleDragLeave(e);\n      };\n      \n      zone.addEventListener('dragover', this._boundDragOver);\n      zone.addEventListener('drop', this._boundDrop);\n      zone.addEventListener('dragenter', this._boundDragEnter);\n      zone.addEventListener('dragleave', this._boundDragLeave);\n    });\n\n    adjustMenuOffset();\n\n    SettingsUtil.updateColorScheme();\n    this.element.classList.add('theme-' + SettingsUtil.coreColorScheme);\n    \n    if (this.optionsExpanded) {\n      const optionsToggle = this.element.querySelector('.options-toggle');\n      const optionsElement = this.element.querySelector('li.options');\n      const toggleBtn = this.element.querySelector('.options-toggle-btn');\n      \n      optionsToggle?.classList.add('expanded');\n      optionsElement?.classList.add('expanded');\n    }\n    \n    setTimeout(() => {\n      document.addEventListener('click', this._onClickOutside, true);\n    }, 100);\n    \n    this._tokenControlHook = Hooks.on(HOOKS_CORE.CONTROL_TOKEN, this._onTokenControlChange.bind(this));\n    this._updateItemHook = Hooks.on(HOOKS_CORE.UPDATE_ITEM, this._onItemUpdate.bind(this));\n    this._createItemHook = Hooks.on(HOOKS_CORE.CREATE_ITEM, this._onItemUpdate.bind(this));\n    this._deleteItemHook = Hooks.on(HOOKS_CORE.DELETE_ITEM, this._onItemUpdate.bind(this));\n    \n    ActorDragUtil.initializeActorDrag(this);\n    this._updateRequestTypesVisibilityNoRender();\n  }\n  \n  /**\n   * Handle token control changes\n   */\n  _onTokenControlChange(token, controlled) {\n    LogUtil.log('_onTokenControlChange');\n    if (!this.rendered) return;\n    \n    if (this._ignoreTokenControl) return;\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n    }\n    \n    this._tokenUpdateTimeout = setTimeout(() => {\n      const previousSelection = new Set(this.selectedActors);\n      \n      this._initializeFromSelectedTokens();\n      \n      const allActorIds = new Set([...previousSelection, ...this.selectedActors]);\n      for (const actorId of allActorIds) {\n        this._updateActorSelectionUI(actorId);\n      }\n      \n      this._updateSelectAllState();\n      this._updateRequestTypesVisibilityNoRender();\n      \n      this._tokenUpdateTimeout = null;\n    }, 100);\n  }\n  \n  /**\n   * Handle item updates on actors\n   * Re-renders the menu if the item affects character AC\n   */\n  _onItemUpdate(item, changes, options, userId) {\n    if (!this.rendered) return;\n    \n    const affectsAC = item.type === 'equipment' || \n                      changes.system?.equipped !== undefined ||\n                      changes.system?.attunement !== undefined;\n    if (!affectsAC) return;\n\n    const actor = item.parent;\n    if (!actor || actor.documentName !== 'Actor') return;\n    \n    const currentTab = this.currentTab;\n    const isPlayerOwned = Object.entries(actor.ownership)\n      .some(([uid, level]) => {\n        const user = game.users.get(uid);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n    \n    const shouldUpdate = (currentTab === 'pc' && isPlayerOwned) || \n                         (currentTab === 'npc' && !isPlayerOwned && hasTokenInScene(actor));\n    \n    if (shouldUpdate) {\n      if (this._itemUpdateTimeout) {\n        clearTimeout(this._itemUpdateTimeout);\n      }\n      \n      this._itemUpdateTimeout = setTimeout(() => {\n        this.render();\n        this._itemUpdateTimeout = null;\n      }, 500);\n    }\n  }\n\n  /**\n   * Handle clicks outside the menu\n   */\n  _onClickOutside = (event) => {\n    LogUtil.log('_onClickOutside');\n    if (this.isLocked) return;\n    const menu = this.element;\n    if (!menu) return;\n    if (event.target.closest('.flash-rolls-menu')) return;\n    if (menu.contains(event.target)) return;\n    if (event.target.closest('#flash-rolls-icon')) return;\n    if (event.target.closest('.dialog, .app, .notification, .application')) return;\n    this.close();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachListeners() {\n    LogUtil.log('_attachListeners');\n    \n    const html = this.element;\n    \n    html.querySelector('#flash-rolls-toggle')?.addEventListener('change', this._onToggleRollRequests.bind(this));\n    html.querySelector('#flash5e-skip-dialogs')?.addEventListener('change', this._onToggleSkipDialogs.bind(this));\n    html.querySelector('#flash5e-group-rolls-msg')?.addEventListener('change', this._onToggleGroupRollsMsg.bind(this));\n    html.querySelector('#flash5e-actors-all')?.addEventListener('change', this._onToggleSelectAll.bind(this));\n    html.querySelector('#flash5e-actors-lock')?.addEventListener('click', this._onToggleLock.bind(this));\n    html.querySelector('.options-toggle-btn')?.addEventListener('click', this._onToggleOptions.bind(this));\n    \n    const dragHandle = html.querySelector(RollMenuDragUtil.DRAG_HANDLE_SELECTOR);\n    if (dragHandle && !dragHandle.hasAttribute('data-drag-initialized')) {\n      dragHandle.setAttribute('data-drag-initialized', 'true');\n      dragHandle.addEventListener('mousedown', (e) => {\n        RollMenuDragUtil.handleDragStart(e, this);\n      });\n    }\n    \n    const tabs = html.querySelectorAll('.actor-tab');\n    tabs.forEach(tab => {\n      tab.addEventListener('click', this._onTabClick.bind(this));\n      tab.addEventListener('dblclick', this._onTabDoubleClick.bind(this));\n    });\n    \n    html.querySelectorAll('.actor.drag-wrapper').forEach(wrapper => {\n      wrapper.addEventListener('click', this._onActorClick.bind(this));\n    });\n    \n    const searchInput = html.querySelector('.search-input');\n    if (searchInput) {\n      searchInput.addEventListener('input', this._onSearchInput.bind(this));\n    }\n    \n    const accordion = html.querySelector('.request-types-accordion');\n    if (accordion) {\n      html.addEventListener('mouseenter', () => {\n        if (this.selectedActors.size > 0) {\n          accordion.classList.add('hover-visible');\n        }\n      });\n      \n      html.addEventListener('mouseleave', () => {\n        accordion.classList.remove('hover-visible');\n      });\n    }\n    \n    const requestTypesContainer = html.querySelector('.request-types');\n    if (requestTypesContainer) {\n      requestTypesContainer.addEventListener('click', (event) => {\n        const requestHeader = event.target.closest('.request-type-header');\n        \n        if (requestHeader) {\n          const requestItem = requestHeader.closest('.request-type-item');\n          \n          if (requestHeader.classList.contains('accordion-header')) {\n            this._onAccordionToggle(event);\n            return;\n          }\n          \n          if (requestHeader.classList.contains('toggle') && requestItem && requestItem.classList.contains('rollable')) {\n            const customEvent = {\n              ...event,\n              currentTarget: requestItem\n            };\n            this._onRequestTypeClick(customEvent);\n            return;\n          }\n        }\n        \n        const subItem = event.target.closest('.sub-item');\n        if (subItem && subItem.dataset.id) {\n          const customEvent = {\n            ...event,\n            currentTarget: subItem\n          };\n          this._onRollTypeClick(customEvent);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle roll requests toggle\n   */\n  async _onToggleRollRequests(event) {\n    LogUtil.log('_onToggleRollRequests');\n    const SETTINGS = getSettings();\n    const enabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, enabled);\n    \n    SidebarUtil.updateRollRequestsIcon(enabled);\n    \n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleSkipDialogs(event) {\n    LogUtil.log('_onToggleSkipDialogs');\n    const SETTINGS = getSettings();\n    const skip = event.target.checked;\n    await SettingsUtil.set(SETTINGS.skipRollDialog.tag, skip);\n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleGroupRollsMsg(event) {\n    LogUtil.log('_onToggleGroupRollsMsg');\n    const SETTINGS = getSettings();\n    const isEnabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.groupRollsMsgEnabled.tag, isEnabled);\n  }\n\n  /**\n   * Handle select all toggle\n   */\n  _onToggleSelectAll(event) {\n    LogUtil.log('_onToggleSelectAll');\n    const selectAll = event.target.checked;\n    this._ignoreTokenControl = true;\n    \n    const context = this._lastPreparedContext || {};\n    const currentActors = context.actors || [];\n    \n    currentActors.forEach(actorData => {\n      const uniqueId = actorData.uniqueId;\n      if (selectAll) {\n        this.selectedActors.add(uniqueId);\n        if (actorData.tokenId) {\n          updateCanvasTokenSelection(actorData.id, true, actorData.tokenId);\n        } else {\n          updateCanvasTokenSelection(actorData.id, true);\n        }\n      } else {\n        this.selectedActors.delete(uniqueId);\n        if (actorData.tokenId) {\n          updateCanvasTokenSelection(actorData.id, false, actorData.tokenId);\n        } else {\n          updateCanvasTokenSelection(actorData.id, false);\n        }\n      }\n    });\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 200);\n    \n    this.render();\n    this._updateRequestTypesVisibility();\n    \n    // Show/hide request types accordion based on selection\n    const accordion = this.element.querySelector('.request-types-accordion');\n    if (accordion) {\n      if (this.selectedActors.size > 0) {\n        accordion.classList.add('hover-visible');\n      } else {\n        accordion.classList.remove('hover-visible');\n      }\n    }\n  }\n  \n  /**\n   * Handle lock toggle\n   */\n  _onToggleLock(event) {\n    LogUtil.log('_onToggleLock');\n    event.preventDefault();\n    this.isLocked = !this.isLocked;\n    \n    const lockIcon = event.currentTarget;\n    lockIcon.classList.remove('fa-lock-keyhole', 'fa-lock-keyhole-open');\n    lockIcon.classList.add(this.isLocked ? 'fa-lock-keyhole' : 'fa-lock-keyhole-open');\n  }\n  \n  /**\n   * Handle options toggle\n   */\n  async _onToggleOptions(event) {\n    LogUtil.log('_onToggleOptions');\n    event.preventDefault();\n    event.stopPropagation();\n    \n    this.optionsExpanded = !this.optionsExpanded;\n    await game.user.setFlag(MODULE.ID, 'menuOptionsExpanded', this.optionsExpanded);\n    \n    const optionsToggleContainer = this.element.querySelector('.options-toggle');\n    if (optionsToggleContainer) {\n      optionsToggleContainer.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n    const optionsElement = this.element.querySelector('li.options');\n    if (optionsElement) {\n      optionsElement.classList.toggle('expanded', this.optionsExpanded);\n    }\n  }\n  \n  /**\n   * Check if the current user can drop actors into the menu\n   * @param {string} selector - The drop target selector\n   * @returns {boolean} Whether the drop is allowed\n   */\n  _canDragDrop(selector) {\n    const canDrop = ActorDropUtil.canDrop(selector);\n    LogUtil.log('RollRequestsMenu._canDragDrop', [selector, canDrop]);\n    return canDrop;\n  }\n\n  /**\n   * Handle drag over events for visual feedback\n   * @param {DragEvent} event - The drag over event\n   */\n  _onDragOver(event) {\n    LogUtil.log('RollRequestsMenu._onDragOver - DRAG OVER TRIGGERED!', [event]);\n    ActorDropUtil.handleDragOver(event, this);\n  }\n\n  /**\n   * Handle drop events when actors are dropped into the menu\n   * @param {DragEvent} event - The drop event\n   */\n  async _onDrop(event) {\n    LogUtil.log('RollRequestsMenu._onDrop - DROP TRIGGERED!', [event]);\n    await ActorDropUtil.handleDrop(event, this);\n  }\n  \n  /**\n   * Initialize selected actors from currently selected tokens\n   */\n  _initializeFromSelectedTokens() {\n    LogUtil.log('_initializeFromSelectedTokens');\n    \n    const controlledTokens = canvas.tokens?.controlled || [];\n    this.selectedActors.clear();\n    \n    for (const token of controlledTokens) {\n      if (token.actor) {\n        const uniqueId = token.id;\n        this.selectedActors.add(uniqueId);\n        \n        if (this.selectedActors.size === 1) {\n          const isPC = isPlayerOwned(token.actor);\n          this.currentTab = isPC ? 'pc' : 'npc';\n        }\n      }\n    }\n\n    LogUtil.log('_initializeFromSelectedTokens', [this.selectedActors]);\n\n  }\n  \n  /**\n   * Handle tab click\n   */\n  async _onTabClick(event) {\n    const tab = event.currentTarget.dataset.tab;\n    if (tab === this.currentTab) return;\n    \n    // this.selectedActors.clear();\n    // canvas.tokens?.releaseAll();\n    this.selectedRequestType = null;\n    \n    this.currentTab = tab;\n    await this.render();\n  }\n\n  /**\n   * Handle tab double-click to clear all selections\n   */\n  async _onTabDoubleClick(event) {\n    LogUtil.log('_onTabDoubleClick');\n    event.preventDefault();\n    event.stopPropagation();\n    \n    this._ignoreTokenControl = true;\n    this.selectedActors.clear();\n    canvas.tokens?.releaseAll();\n    this.selectedRequestType = null;\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 200);\n    \n    await this.render();\n    this._updateRequestTypesVisibility();\n  }\n\n  /**\n   * Handle click on actor row\n   */\n  _onActorClick(event) {\n    if (event.target.closest('.actor-select')) return;\n    \n    const wrapperElement = event.currentTarget;\n    \n    const uniqueId = wrapperElement.dataset.id;\n    const actorId = wrapperElement.dataset.actorId;\n    const tokenId = wrapperElement.dataset.tokenId;\n    this._toggleActorSelection(uniqueId, actorId, tokenId);\n  }\n  \n  /**\n   * Toggle actor selection state\n   */\n  _toggleActorSelection(uniqueId, actorId, tokenId) {\n    LogUtil.log('_toggleActorSelection');\n    this._ignoreTokenControl = true;\n    \n    if (this.selectedActors.has(uniqueId)) {\n      this.selectedActors.delete(uniqueId);\n      if (tokenId) {\n        updateCanvasTokenSelection(actorId, false, tokenId);\n      } else {\n        updateCanvasTokenSelection(actorId, false);\n      }\n    } else {\n      this.selectedActors.add(uniqueId);\n      if (tokenId) {\n        updateCanvasTokenSelection(actorId, true, tokenId);\n      } else {\n        updateCanvasTokenSelection(actorId, true);\n      }\n    }\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 100);\n    \n    this._updateActorSelectionUI(uniqueId);\n    this._updateSelectAllState();\n    this._updateRequestTypesVisibilityNoRender();\n    \n    // Show request types accordion if we have selected actors\n    const accordion = this.element.querySelector('.request-types-accordion');\n    if (accordion) {\n      if (this.selectedActors.size > 0) {\n        accordion.classList.add('hover-visible');\n      } else {\n        accordion.classList.remove('hover-visible');\n      }\n    }\n  }\n  \n  /**\n   * Update the visual state of an actor element without re-rendering\n   */\n  _updateActorSelectionUI(actorId) {\n    const wrapperElement = this.element.querySelector(`.actor.drag-wrapper[data-id=\"${actorId}\"]`);\n    if (!wrapperElement) return;\n    \n    const actorElement = wrapperElement.closest('.actor');\n    if (!actorElement) return;\n    \n    const checkbox = actorElement.querySelector('.actor-select');\n    const isSelected = this.selectedActors.has(actorId);\n    \n    if (checkbox) {\n      checkbox.checked = isSelected;\n    }\n    \n    wrapperElement.classList.toggle('selected', isSelected);\n    wrapperElement.dataset.selected = isSelected.toString();\n  }\n\n  /**\n   * Update request types visibility based on actor selection\n   */\n  _updateRequestTypesVisibility() {\n    LogUtil.log('_updateRequestTypesVisibility');\n    this.render();\n  }\n  \n  /**\n   * Update request types visibility without re-rendering\n   */\n  _updateRequestTypesVisibilityNoRender() {\n    LogUtil.log('_updateRequestTypesVisibilityNoRender');\n    const hasSelection = this.selectedActors.size > 0;\n    const requestTypesContainer = this.element.querySelector('.request-types');\n    \n    if (requestTypesContainer) {\n      requestTypesContainer.classList.toggle('disabled', !hasSelection);\n      \n      const requestItems = requestTypesContainer.querySelectorAll('.request-type-item');\n      requestItems.forEach(item => {\n        item.classList.toggle('disabled', !hasSelection);\n      });\n      \n      const hasPlayerCharacter = Array.from(this.selectedActors).some(uniqueId => {\n        const actor = getActorData(uniqueId);\n        return actor?.type === 'character';\n      });\n      \n      const hitDieItem = requestTypesContainer.querySelector('[data-id=\"HIT_DIE\"]');\n      if (hitDieItem) {\n        hitDieItem.style.display = hasPlayerCharacter ? '' : 'none';\n      }\n    }\n  }\n\n  /**\n   * Update select all checkbox state\n   */\n  _updateSelectAllState() {\n    LogUtil.log('_updateSelectAllState');\n    const selectAllCheckbox = this.element.querySelector('#flash5e-actors-all');\n    const currentActors = this.currentTab === 'pc' ? 'pc' : 'npc';\n    const checkboxes = this.element.querySelectorAll(`.${currentActors}-actors .actor-item input[type=\"checkbox\"]`);\n    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;\n    \n    selectAllCheckbox.checked = checkedCount > 0 && checkedCount === checkboxes.length;\n    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n  }\n\n  /**\n   * Handle search input\n   */\n  _onSearchInput(event) {\n    LogUtil.log('_onSearchInput');\n    const searchTerm = event.target.value.toLowerCase().trim();\n    const requestTypesContainer = this.element.querySelector('.request-types');\n    \n    if (!requestTypesContainer) return;\n    const requestItems = requestTypesContainer.querySelectorAll('.request-type-item');\n    \n    requestItems.forEach(requestItem => {\n      const requestName = requestItem.querySelector('.request-type-name')?.textContent.toLowerCase() || '';\n      const subItems = requestItem.querySelectorAll('.sub-item');\n      let hasVisibleSubItems = false;\n      \n      if (subItems.length > 0) {\n        subItems.forEach(subItem => {\n          const subItemName = subItem.querySelector('.sub-item-name')?.textContent.toLowerCase() || '';\n          const isVisible = subItemName.includes(searchTerm);\n          subItem.classList.toggle('hidden', !isVisible);\n          if (isVisible) hasVisibleSubItems = true;\n        });\n        \n        const categoryMatches = requestName.includes(searchTerm);\n        const shouldShowCategory = searchTerm === '' || categoryMatches || hasVisibleSubItems;\n        requestItem.classList.toggle('hidden', !shouldShowCategory);\n        \n        if (searchTerm && hasVisibleSubItems) {\n          const nestedList = requestItem.querySelector('.roll-types-nested');\n          const accordionToggle = requestItem.querySelector('.accordion-toggle');\n          if (nestedList && accordionToggle) {\n            nestedList.style.display = 'block';\n            accordionToggle.classList.add('expanded');\n          }\n        }\n      } else {\n        const isVisible = searchTerm === '' || requestName.includes(searchTerm);\n        requestItem.classList.toggle('hidden', !isVisible);\n      }\n    });\n  }\n\n  /**\n   * Handle accordion toggle\n   */\n  async _onAccordionToggle(event) {\n    event.stopPropagation();\n    \n    const requestHeader = event.target.closest('.request-type-header');\n    const requestItem = requestHeader.closest('.request-type-item');\n    const requestId = requestItem.dataset.id;\n    const accordionToggle = requestItem.querySelector('.accordion-toggle');\n    const nestedList = requestItem.querySelector('.roll-types-nested');\n    \n    if (!nestedList) return;\n    \n    const isExpanded = accordionToggle.classList.contains('expanded');\n    accordionToggle.classList.toggle('expanded', !isExpanded);\n    nestedList.style.display = isExpanded ? 'none' : 'block';\n    this.accordionStates[requestId] = !isExpanded;\n    await game.user.setFlag(MODULE.ID, 'menuAccordionStates', this.accordionStates);\n  }\n\n  /**\n   * Handle request type click\n   */\n  async _onRequestTypeClick(event) {\n    const requestItem = event.currentTarget;\n    const requestType = requestItem.dataset.id;\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    \n    if (!rollOption) {\n      LogUtil.error('Unknown request type:', [requestType]);\n      return;\n    }\n    \n    if (this.selectedRequestType === requestType) {\n      this.selectedRequestType = null;\n    } else {\n      this.selectedRequestType = requestType;\n    }\n    \n    if (rollOption.subList) {\n      await this.render();\n    } else if (this.selectedRequestType) {\n      this._triggerRoll(requestType, null);\n    }\n  }\n\n  /**\n   * Handle roll type click (sub-item in accordion)\n   */\n  _onRollTypeClick(event) {\n    LogUtil.log('_onRollTypeClick');\n    const rollKey = event.currentTarget.dataset.id;\n    const parentType = event.currentTarget.dataset.parent;\n    const requestType = parentType || this.selectedRequestType;\n    this._triggerRoll(requestType, rollKey);\n  }\n\n\n  /**\n   * Defines who rolls for each selected actor (GM or player)\n   * Orchestrates the roll actions accordingly\n   * @param {Object} config - Roll configuration\n   * @param {Array} pcActors - PC actors with owners\n   * @param {Actor[]} npcActors - NPC actors\n   * @param {string} rollMethodName - The roll method name\n   * @param {string} rollKey - The roll key\n   * @param {Array} actorsData - Array of actor entries with unique IDs\n   */\n  async _orchestrateRollsForActors(config, pcActors, npcActors, rollMethodName, rollKey, actorsData) {\n    const SETTINGS = getSettings();\n    const successfulRequests = [];\n    const offlinePlayerActors = [];\n    const onlinePlayerActors = [];\n    let groupRollId = foundry.utils.randomID();\n    // config.groupRollId = groupRollId;\n    \n    LogUtil.log('_orchestrateRollsForActors', [config, pcActors, npcActors]);\n    \n    const allActorEntries = [];\n    const allActors = [];\n\n    if (config.sendRequest) {\n      for (const { actor, owner } of pcActors) {\n        if (!owner.active) {\n          if(SettingsUtil.get(SETTINGS.showOfflineNotifications.tag)) {\n            NotificationManager.notify('info', game.i18n.format(\"FLASH_ROLLS.notifications.playerOffline\", { \n              player: owner.name \n            }));\n          }\n          offlinePlayerActors.push(actor);\n        }else{\n          onlinePlayerActors.push({actor, owner});\n        }\n      }\n      allActors.push(...onlinePlayerActors.map(({actor}) => actor));\n    } else {\n      npcActors.push(...pcActors.map(({ actor }) => actor));\n    }\n    \n    allActors.push(...offlinePlayerActors, ...npcActors);\n    const allActorIds = allActors.map(actor => actor.id);\n    \n    allActorEntries.push(...actorsData.filter(item => \n      item && item.actor && allActorIds.includes(item.actor.id)\n    ));\n\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    \n    if (groupRollsMsgEnabled && allActors.length > 1) {\n      LogUtil.log('_orchestrateRollsForActors - generated new groupRollId', [groupRollId]);\n      \n      await ChatMessageUtils.createGroupRollMessage(\n        allActorEntries,\n        rollMethodName,\n        rollKey,\n        config,\n        groupRollId\n      );\n      // Add delay to ensure group message is registered before sending roll requests\n      await delay(100);\n    }\n\n    /////////////////////////////////\n    // Special handling for hit die rolls - check ALL actors upfront and refill if needed\n    if (rollMethodName === ROLL_TYPES.HIT_DIE) {\n      LogUtil.log('_orchestrateRollsForActors - hit die roll detected, checking all actors for refill');\n      \n      const allActorsForHitDie = [];\n      onlinePlayerActors.forEach(({actor}) => allActorsForHitDie.push(actor));\n      offlinePlayerActors.forEach(actor => allActorsForHitDie.push(actor));\n      npcActors.forEach(actor => allActorsForHitDie.push(actor));\n      \n      LogUtil.log('_orchestrateRollsForActors - calling _handleHitDieRefill for', allActorsForHitDie.length, 'actors');\n      const refillCheckComplete = await this._handleHitDieRefill(allActorsForHitDie);\n      \n      if (!refillCheckComplete) {\n        LogUtil.log('_orchestrateRollsForActors - refill cancelled, aborting all rolls');\n        return;\n      }\n      \n      LogUtil.log('_orchestrateRollsForActors - refill check complete, proceeding with rolls');\n    }\n\n    /////////////////////////////////\n    // Player Rolls: Actors owned by active players\n    for (const { actor, owner } of onlinePlayerActors) {\n      const useGroupId = groupRollsMsgEnabled && allActors.length > 1 ? groupRollId : null;\n      \n      let currentRollKey = rollKey;\n      if (rollMethodName === ROLL_TYPES.HIT_DIE) {\n        currentRollKey = actor.system.attributes.hd.largestAvailable;\n        if (!currentRollKey) {\n          LogUtil.warn(`No hit dice available for ${actor.name} after refill attempt`);\n          continue;\n        }\n      }\n      \n      await this._sendRollRequestToPlayer(actor, owner, rollMethodName, currentRollKey, config, true, useGroupId);\n      successfulRequests.push({ actor, owner });\n      await delay(250);\n    }\n    if (successfulRequests.length > 0) {\n      this._showConsolidatedNotification(successfulRequests, rollMethodName, rollKey);\n    }\n    \n    /////////////////////////////////\n    // GM Rolls: Actors owned by offline players or NPC actors\n    let gmRolledActors = [];\n    gmRolledActors = gmRolledActors.concat(offlinePlayerActors);\n    gmRolledActors = gmRolledActors.concat(npcActors);\n\n    if (gmRolledActors.length > 0) {\n      config.skipRollDialog = true;\n      config.groupRollId = groupRollsMsgEnabled && allActors.length > 1 ? groupRollId : null;\n      \n      const gmActorIds = gmRolledActors.map(actor => actor.id);\n      const gmActorEntries = actorsData.filter(entry => \n        entry && entry.actor && gmActorIds.includes(entry.actor.id)\n      );\n      \n      await this._handleGMRollsWithTokens(gmActorEntries, rollMethodName, rollKey, config);\n    }\n  }\n\n  /**\n   * Handle hit die refill dialog for actors with no available hit dice\n   * This is centralized and called BEFORE any rolls are sent (to players or executed by GM)\n   * @param {Actor|Actor[]} actors - Single actor or array of actors to potentially refill hit dice for\n   * @returns {Promise<boolean>} True if refill succeeded or not needed, false if cancelled\n   */\n  async _handleHitDieRefill(actorsToRefill) {\n    const actors = Array.isArray(actorsToRefill) ? actorsToRefill : [actorsToRefill];\n    LogUtil.log('_handleHitDieRefill - processing actors:', actors.map(a => a.name));\n    \n    const actorsNeedingRefill = actors.filter(actor => {\n      const hdData = actor.system.attributes.hd;\n      const needsRefill = hdData.value === 0;\n      LogUtil.log('_handleHitDieRefill - checking actor', [actor.name, 'value:', hdData.value, 'needs refill:', needsRefill]);\n      return needsRefill;\n    });\n    \n    LogUtil.log('_handleHitDieRefill - actors needing refill:', actorsNeedingRefill.length, [actorsNeedingRefill]);\n    \n    if (actorsNeedingRefill.length === 0) {\n      LogUtil.log('_handleHitDieRefill - no refill needed', []);\n      return true; // No refill needed\n    }\n    \n    const actorNames = actorsNeedingRefill.map(actor => actor.name).join(\", \");\n    LogUtil.log('_handleHitDieRefill - showing dialog for actors:', actorNames);\n    \n    // Show dialog to GM\n    const dialogResult = await foundry.applications.api.DialogV2.confirm({\n      window: {\n        title: game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.hitDie.refillTitle\") || \"No Hit Dice Available\",\n        classes: [\"flash5e-hit-die-dialog\"]\n      },\n      position: {\n        width: 420\n      },\n      content: `<p>${game.i18n.format(\"FLASH_ROLLS.ui.dialogs.hitDie.refillMessage\", { \n        actors: actorNames \n      }) || \"\"}</p>`,\n      modal: true,\n      rejectClose: false,\n      yes: {\n        label: game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.hitDie.refillAndSend\") || \"Refill & Send\",\n        icon: \"\"\n      },\n      no: {\n        label: game.i18n.localize(\"Cancel\") || \"Cancel\",\n        icon: \"\"\n      }\n    });\n    \n    LogUtil.log('_handleHitDieRefill - dialog result:', dialogResult);\n    \n    if (dialogResult) {\n      LogUtil.log('_handleHitDieRefill - proceeding with refill for actors:', actorNames);\n      for (const actor of actorsNeedingRefill) {\n        try {\n          LogUtil.log('About to call handleHitDieRecovery for', [actor.name, 'isToken:', actor.isToken]);\n          const hitDieResult = await RollHandlers.handleHitDieRecovery(actor);\n          LogUtil.log('handleHitDieRecovery completed', [hitDieResult]);\n          \n          // If this is a token actor, also update the base actor to keep them in sync\n          if (actor.isToken && actor._actor) {\n            LogUtil.log('Also updating base actor for token', [actor._actor.name]);\n            try {\n              await RollHandlers.handleHitDieRecovery(actor._actor);\n              LogUtil.log('Base actor updated successfully');\n            } catch (baseActorError) {\n              LogUtil.error('Error updating base actor:', [baseActorError]);\n            }\n          }\n        } catch (error) {\n          LogUtil.error('Error calling handleHitDieRecovery:', [error]);\n        }\n      }\n      \n      NotificationManager.notify('info', game.i18n.format(\"FLASH_ROLLS.ui.dialogs.hitDie.refilled\", { \n        actor: actorNames \n      }) || `Hit dice refilled for ${actorNames}`);\n      \n      LogUtil.log('_handleHitDieRefill - refill completed, returning true');\n      return true;\n    }\n    \n    LogUtil.log('_handleHitDieRefill - user cancelled, returning false');\n    return false;\n  }\n\n  /**\n   * Method called from menu items to trigger the roll for selected actors\n   * @param {string} requestType - The type of roll request (e.g., 'skill', 'ability')\n   * @param {string} rollKey - The specific roll key (e.g., 'acr' for Acrobatics)\n   */\n  async _triggerRoll(requestType, rollKey) {\n    LogUtil.log('_triggerRoll', [requestType, rollKey]);\n    const SETTINGS = getSettings();\n    const selectedUniqueIds = Array.from(this.selectedActors);\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n    \n    // Convert selected unique IDs back to actors with their unique identifiers\n    let actorsData = selectedUniqueIds\n      .map(uniqueId => {\n        const actor = getActorData(uniqueId);\n        if (!actor) return null;\n        \n        let tokenId = null;\n        if (game.actors.get(uniqueId)) {\n          tokenId = null;\n        } else {\n          tokenId = uniqueId;\n        }\n        \n        return { actor, uniqueId, tokenId };\n      })\n      .filter(item => item);\n    \n    let actors = actorsData.map(item => item.actor);\n    \n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    const rollMethodName = (rollOption?.name || requestType)?.toLowerCase();\n    \n    switch(rollMethodName) {\n      case ROLL_TYPES.CUSTOM:\n        rollKey = await RollMenuConfigUtil.handleCustomRoll();\n        if (!rollKey) return;\n        break;\n      case ROLL_TYPES.INITIATIVE:\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n        const combatReady = await ensureCombatForInitiative();\n        if (combatReady) {\n          LogUtil.log(\"_triggerRoll - initiative\", [selectedUniqueIds]);\n          \n          const actorsWithoutTokens = [];\n          const actorsWithTokens = [];\n          \n          for (const uniqueId of selectedUniqueIds) {\n            const actor = getActorData(uniqueId);\n            if (!actor) continue;\n            \n            let tokenId = null;\n            \n            if (!game.actors.get(uniqueId)) {\n              tokenId = uniqueId;\n              actorsWithTokens.push(actor.name);\n            } else {\n              tokenId = actor.getActiveTokens()?.[0]?.id || null;\n              if (!tokenId) {\n                actorsWithoutTokens.push(actor.name);\n                continue;\n              }\n              actorsWithTokens.push(actor.name);\n              \n              const existingCombatant = game.combat.combatants.find(c => c.tokenId === tokenId);\n              if (!existingCombatant) {\n                await game.combat.createEmbeddedDocuments(\"Combatant\", [{\n                  actorId: actor.id,\n                  tokenId: tokenId\n                }]);\n              }\n            }\n          }\n          \n          if (actorsWithTokens.length === 0) {\n            ui.notifications.warn(game.i18n.localize(\"FLASH_ROLLS.notifications.noTokensForInitiative\") || \n              \"Cannot roll initiative: None of the selected actors have tokens on the scene.\");\n            return;\n          }\n          \n          if (actorsWithoutTokens.length > 0) {\n            ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.actorsSkippedInitiative\", {\n              actors: actorsWithoutTokens.join(\", \")\n            }) || `Initiative skipped for actors without tokens: ${actorsWithoutTokens.join(\", \")}`);\n          }\n          \n          const entriesWithTokens = actorsData.filter(entry => {\n            if (entry.tokenId) return true;\n            const hasToken = entry.actor.getActiveTokens()?.[0];\n            return !!hasToken;\n          });\n          \n          actorsData.length = 0;\n          actorsData.push(...entriesWithTokens);\n          \n          actors = entriesWithTokens.map(entry => entry.actor);\n          const uniqueActorIds = [...new Set(actors.map(actor => actor.id))];\n          const filteredActorIds = await filterActorsForInitiative(uniqueActorIds, game);\n\n          if (!filteredActorIds.length) return;\n\n          const filteredActorsData = actorsData.filter(item => \n            item && item.actor && filteredActorIds.includes(item.actor.id)\n          );\n          \n          actors = filteredActorIds\n            .map(id => game.actors.get(id))\n            .filter(actor => actor);\n          \n          actorsData.length = 0;\n          actorsData.push(...filteredActorsData);\n          \n          const initiateCombat = SettingsUtil.get(SETTINGS.initiateCombatOnRequest.tag);\n          if (initiateCombat) {\n            game.combat.startCombat();\n          }\n        }\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        actors = await filterActorsForDeathSaves(actors);\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        actors = actors.filter(actor => actor.type === 'character');\n        actorsData = actorsData.filter(item => item.actor.type === 'character');\n        if (actors.length === 0) {\n          NotificationManager.notify('warn', game.i18n.localize(\"FLASH_ROLLS.notifications.noCharactersForHitDie\") || \n            \"Hit dice can only be rolled for player characters, not NPCs.\");\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    \n    if (!actors.length) {\n      NotificationManager.notify('warn', \"No valid actors selected\");\n      return;\n    }\n    \n    const { pcActors, npcActors } = categorizeActorsByOwnership(actors);\n    const config = await RollMenuConfigUtil.getRollConfiguration(actors, rollMethodName, rollKey, skipRollDialog, pcActors);\n    \n    LogUtil.log(\"_triggerRoll config\", [config]);\n    if (!config) return;\n    await this._orchestrateRollsForActors(config, pcActors, npcActors, rollMethodName, rollKey, actorsData);\n    \n    if (!this.isLocked) {\n      setTimeout(() => this.close(), 500);\n    }\n  }\n  \n  /**\n   * Send a roll request to a player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config - Roll configuration from dialog\n   * @param {boolean} suppressNotification - If true, don't show individual notification\n   * @param {string} groupRollId - Optional group roll ID for multi-actor rolls\n   */\n  async _sendRollRequestToPlayer(actor, owner, requestType, rollKey, config, suppressNotification = false, groupRollId = null) {\n    LogUtil.log('_sendRollRequestToPlayer #A', [requestType, rollKey]);\n    const SETTINGS = getSettings();\n    \n    let rollType = requestType?.toLowerCase();\n    \n    // Mapping for compound types\n    if (rollType === ROLL_TYPES.ABILITY_CHECK) {\n      rollType = ROLL_TYPES.ABILITY;\n    } else if (rollType === ROLL_TYPES.SAVING_THROW) {\n      rollType = ROLL_TYPES.SAVE;\n    } else if (rollType === ROLL_TYPES.INITIATIVE_DIALOG) {\n      rollType = ROLL_TYPES.INITIATIVE;\n    }\n    \n    // For hit die rolls, get the largest available denomination\n    // Note: Refill check is already done in orchestration before this method is called\n    if (rollType === ROLL_TYPES.HIT_DIE) {\n      rollKey = actor.system.attributes.hd.largestAvailable;\n      if (!rollKey) {\n        LogUtil.warn(`No hit dice available for ${actor.name}.`);\n        return;\n      }\n    }\n    \n    // Build the request data with proper rollProcessConfig\n    // Filter out circular references that midi-qol might add\n    const cleanConfig = { ...config };\n    delete cleanConfig.subject;\n    delete cleanConfig.workflow;\n    delete cleanConfig.item;\n    delete cleanConfig.activity;\n    \n    const requestData = {\n      type: \"rollRequest\",\n      groupRollId: groupRollId || foundry.utils.randomID(),\n      actorId: actor.isToken ? actor.token.id : actor.id,\n      isTokenActor: actor.isToken, \n      baseActorId: actor.isToken ? actor._actor?.id : actor.id,\n      rollType,\n      rollKey,\n      activityId: null, \n      rollProcessConfig: {\n        ...cleanConfig,\n        _requestedBy: game.user.name\n      },\n      skipRollDialog: false,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    // await ModuleHelpers.prepareMidiQOLSettings();\n    LogUtil.log('_sendRollRequestToPlayer - prepareMidiQOLSettings', []);\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    if (!suppressNotification) {\n      NotificationManager.notify('info', game.i18n.format(\"FLASH_ROLLS.notifications.rollRequestSent\", { \n        player: owner.name,\n        actor: actor.name \n      }));\n    }\n  }\n  \n  /**\n   * Send a consolidated notification for multiple roll requests\n   * @param {Array} successfulRequests - Array of {actor, owner} objects\n   * @param {string} rollMethodName - The type of roll being requested\n   * @param {string} rollKey - The specific roll key (if applicable)\n   */\n  _showConsolidatedNotification(successfulRequests, rollMethodName, rollKey) {\n    LogUtil.log('_showConsolidatedNotification');\n    // Group requests by player\n    const requestsByPlayer = {};\n    for (const { actor, owner } of successfulRequests) {\n      if (!requestsByPlayer[owner.id]) {\n        requestsByPlayer[owner.id] = {\n          player: owner,\n          actors: []\n        };\n      }\n      requestsByPlayer[owner.id].actors.push(actor);\n    }\n    \n    // Get roll type name for display\n    // Find the option key that matches this rollMethodName\n    let rollOptionKey = null;\n    for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n      if (option.name === rollMethodName) {\n        rollOptionKey = key;\n        break;\n      }\n    }\n    \n    const rollTypeKey = rollMethodName;\n    let rollTypeName = game.i18n.localize(`FLASH_ROLLS.rollTypes.${rollTypeKey}`) || rollTypeKey;\n    \n    if (rollKey) {\n      const normalizedRollTypeKey = rollTypeKey.toLowerCase();\n      if (normalizedRollTypeKey === ROLL_TYPES.SKILL) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.SAVING_THROW) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.ABILITY_CHECK) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.TOOL) {\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          rollTypeName = `${rollTypeName} (${toolItem?.name || rollKey})`;\n        } else {\n          rollTypeName = `${rollTypeName} (${rollKey})`;\n        }\n      } else if (normalizedRollTypeKey === ROLL_TYPES.CUSTOM) {\n        rollTypeName = `${rollTypeName}: ${rollKey}`;\n      }\n    }\n    \n    // Use NotificationManager for consolidated roll request notifications\n    NotificationManager.notifyRollRequestsSent(requestsByPlayer, rollTypeName);\n  }\n  \n  /**\n   * Handle rolling for NPC actors locally\n   * @param {Actor[]} actors \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {BasicRollProcessConfiguration} rollProcessConfig - Process configuration from GM dialog\n   */\n  async _handleGMRolls(actors, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_handleGMRolls', [actors, requestType, rollKey, rollProcessConfig]);\n    \n    for (const actor of actors) {\n      await this._initiateRoll(actor, requestType, rollKey, rollProcessConfig);\n      await delay(100);\n    }\n  }\n\n  /**\n   * Handle GM rolls with token information preserved\n   * @param {Array} actorEntries - Array of actor entries with unique IDs\n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} rollProcessConfig \n   */\n  async _handleGMRollsWithTokens(actorEntries, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_handleGMRollsWithTokens', [actorEntries, requestType, rollKey, rollProcessConfig]);\n    \n    for (const entry of actorEntries) {\n      if (entry.tokenId) {\n        const token = canvas.tokens?.get(entry.tokenId) || game.scenes.active?.tokens.get(entry.tokenId);\n        if (token) {\n          await this._initiateRollForToken(entry.actor, token, requestType, rollKey, rollProcessConfig);\n        } else {\n          await this._initiateRoll(entry.actor, requestType, rollKey, rollProcessConfig);\n        }\n      } else {\n        await this._initiateRoll(entry.actor, requestType, rollKey, rollProcessConfig);\n      }\n      await delay(100);\n    }\n  }\n  \n  /**\n   * Execute local roll for a GM actor with token context\n   * @param {Actor} actor \n   * @param {Token} token \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {BasicRollProcessConfiguration} rollProcessConfig - Process configuration from GM dialog\n   */\n  async _initiateRollForToken(actor, token, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_initiateRollForToken', [actor.name, token.name, requestType, rollKey, rollProcessConfig]);\n    \n    const wasControlled = token.controlled;\n    if (!wasControlled) {\n      token.control({ releaseOthers: false });\n    }\n    \n    try {\n      await this._initiateRoll(actor, requestType, rollKey, rollProcessConfig);\n    } finally {\n      // Restore original control state\n      if (!wasControlled) {\n        token.release();\n      }\n    }\n  }\n\n  /**\n   * Execute local roll for a GM actor\n   * @param {Actor} actor \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {BasicRollProcessConfiguration} rollProcessConfig - Process configuration from GM dialog\n   */\n  async _initiateRoll(actor, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_initiateRoll', [actor, requestType, rollKey, rollProcessConfig]);\n    try {\n      const normalizedType = requestType.toLowerCase();\n      // actor = rollProcessConfig.subject || actor;\n      let actualRollKey = rollKey;\n      if (normalizedType === ROLL_TYPES.HIT_DIE) {\n        const hdData = actor.system.attributes.hd;\n        if(hdData.value > 0){\n          actualRollKey = hdData.largestAvailable;\n        }\n        if (!actualRollKey) {\n          LogUtil.warn('_initiateRoll - No hit dice available after orchestration refill', [actor.name]);\n          NotificationManager.notify('warn', game.i18n.format(\"FLASH_ROLLS.notifications.noHitDice\", { \n            actor: actor.name \n          }) || `No hit dice available for ${actor.name}`);\n          return;\n        }\n      }\n      \n      const situational = rollProcessConfig.rolls?.[0]?.data?.situational || \"\";\n      const requestData = {\n        rollKey: actualRollKey,\n        groupRollId: rollProcessConfig.groupRollId,\n        config: {\n          ...rollProcessConfig,\n          situational: situational,\n          rollMode: rollProcessConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n          advantage: rollProcessConfig.advantage || false,\n          disadvantage: rollProcessConfig.disadvantage || false,\n          target: rollProcessConfig.target\n        }\n      };\n      \n      const dialogConfig = {\n        configure: !rollProcessConfig.fastForward && !rollProcessConfig.skipRollDialog,\n        isRollRequest: true\n      };\n      \n      const messageConfig = {\n        rollMode: rollProcessConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        create: rollProcessConfig.chatMessage !== false,\n        isRollRequest: true  // Mark this as a roll request to prevent re-interception\n      };\n      \n      const rollConfig = rollProcessConfig.rolls?.[0] || {};\n      \n      const handler = RollHandlers[normalizedType];\n      if (handler) {\n        await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        NotificationManager.notify('warn', `Unknown roll type: ${requestType}`);\n      }\n    } catch (error) {\n      LogUtil.error('executeActorRoll', [error]);\n      NotificationManager.notify('error', game.i18n.format(\"FLASH_ROLLS.notifications.rollError\", { \n        actor: actor.name \n      }));\n    }\n  }\n\n  /**\n   * Clean up when closing\n   */\n  async _onClose(options) {\n    LogUtil.log('_onClose',[options]);\n\n    if(!this.element) { return; }\n    \n    if (this.isCustomPosition && this.element.parentElement === document.body) {\n      const chatNotifications = document.querySelector('#chat-notifications');\n      if (chatNotifications) {\n        chatNotifications.insertBefore(this.element, chatNotifications.firstChild);\n      }\n      this.element.style.position = '';\n      this.element.style.inset = '';\n      this.element.style.top = '';\n      this.element.style.left = '';\n      this.element.style.right = '';\n      this.element.style.bottom = '';\n      this.element.classList.remove('custom-position');\n    }\n    \n    await super._onClose(options);\n    \n    this.selectedActors.clear();\n    this.selectedRequestType = null;\n    document.removeEventListener('click', this._onClickOutside, true);\n    \n    if (this._tokenControlHook) {\n      Hooks.off(HOOKS_CORE.CONTROL_TOKEN, this._tokenControlHook);\n      this._tokenControlHook = null;\n    }\n    \n    if (this._updateItemHook) {\n      Hooks.off(HOOKS_CORE.UPDATE_ITEM, this._updateItemHook);\n      this._updateItemHook = null;\n    }\n    \n    if (this._createItemHook) {\n      Hooks.off(HOOKS_CORE.CREATE_ITEM, this._createItemHook);\n      this._createItemHook = null;\n    }\n    \n    if (this._deleteItemHook) {\n      Hooks.off(HOOKS_CORE.DELETE_ITEM, this._deleteItemHook);\n      this._deleteItemHook = null;\n    }\n    \n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n      this._tokenUpdateTimeout = null;\n    }\n    \n    if (this._actorUpdateTimeout) {\n      clearTimeout(this._actorUpdateTimeout);\n      this._actorUpdateTimeout = null;\n    }\n    \n    if (this._itemUpdateTimeout) {\n      clearTimeout(this._itemUpdateTimeout);\n      this._itemUpdateTimeout = null;\n    }\n    \n    if (RollRequestsMenu.#instance === this) {\n      RollRequestsMenu.#instance = null;\n    }\n  }\n\n  /**\n   * Override render positioning to use CSS instead of inline styles\n   */\n  setPosition(position={}) {\n    LogUtil.log('setPosition');\n    // Don't set any inline position styles - let CSS handle it\n    return this;\n  }\n  \n\n  /**\n   * Toggle the roll requests menu open/closed\n   * @static\n   */\n  static toggle() {\n    LogUtil.log('RollRequestsMenu.toggle');\n    \n    // Clean up orphaned menu, if present\n    const existingMenus = document.querySelectorAll('#flash-rolls-menu');\n    existingMenus.forEach(menu => {\n      LogUtil.log('Removing orphaned menu element');\n      menu.remove();\n    });\n    \n    if (!this.#instance) {\n      this.#instance = new RollRequestsMenu();\n      this.#instance.render(true);\n    } else {\n      if (this.#instance.rendered) {\n        this.#instance.close();\n      } else {\n        this.#instance._initializeFromSelectedTokens();\n        this.#instance.render(true);\n      }\n    }\n  }\n\n  /**\n   * Refresh the menu if it's currently open (debounced)\n   * @static\n   * @param {boolean} immediate - If true, refresh immediately without debouncing\n   */\n  static refreshIfOpen(immediate = false) {\n    if (!this.#instance || !this.#instance.rendered) {\n      return;\n    }\n\n    if (immediate) {\n      this._performRefresh();\n      return;\n    }\n\n    if (this.#refreshDebounceTimer) {\n      clearTimeout(this.#refreshDebounceTimer);\n    }\n\n    this.#refreshDebounceTimer = setTimeout(() => {\n      this._performRefresh();\n      this.#refreshDebounceTimer = null;\n    }, this.#REFRESH_DEBOUNCE_DELAY);\n  }\n\n  /**\n   * Perform the actual refresh operation\n   * @static\n   * @private\n   */\n  static _performRefresh() {\n    if (!this.#instance || !this.#instance.rendered) {\n      return;\n    }\n\n    LogUtil.log('RollRequestsMenu._performRefresh - refreshing menu');\n    this.#instance.render();\n    SettingsUtil.updateColorScheme();\n    this.#instance.element.classList.add('theme-' + SettingsUtil.coreColorScheme);\n  }\n\n  /**\n   * Show the menu automatically if setting is enabled\n   * Called during module initialization\n   * @static\n   */\n  static showOnLoadIfEnabled() {\n    LogUtil.log('RollRequestsMenu.showOnLoadIfEnabled');\n    const SETTINGS = getSettings();\n    const showOnLoad = SettingsUtil.get(SETTINGS.showMenuOnLoad.tag);\n    \n    if (showOnLoad && game.user.isGM) {\n      const existingMenus = document.querySelectorAll('#flash-rolls-menu');\n      existingMenus.forEach(menu => {\n        LogUtil.log('Removing orphaned menu element');\n        menu.remove();\n      });\n      \n      if (!this.#instance) {\n        this.#instance = new RollRequestsMenu();\n        this.#instance.render(true);\n        this.#instance.isLocked = true;\n      } else if (!this.#instance.rendered) {\n        this.#instance._initializeFromSelectedTokens();\n        this.#instance.render(true);\n        this.#instance.isLocked = true;\n      }\n    }\n  }\n}\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings, SETTING_SCOPE } from \"../constants/Settings.mjs\";\nimport { getSettingMenus } from \"../constants/SettingMenus.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  static coreColorScheme = \"dark\";\n  \n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    var isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n    if(isDebugOn){CONFIG.debug.hooks = true};\n\n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach((entry) => {\n      const setting = entry[1]; \n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        restricted: setting.scope === SETTING_SCOPE.world,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      LogUtil.log('registerSettings', [settingObj, settingObj.scope], true);\n\n      try {\n        game.settings.register(MODULE_ID, setting.tag, settingObj);\n      } catch (error) {\n        LogUtil.log(`Setting ${setting.tag} already registered or error:`, error);\n      }\n    });\n    \n  }\n\n  /**\n   * Register the settings menu - should be called during ready hook\n   * @static\n   */\n  static registerSettingsMenu() {\n    const settingMenus = Object.entries(getSettingMenus());\n    \n    for (const [menuKey, menuData] of settingMenus) {\n      if ((menuData.restricted && game.user?.isGM) || !menuData.restricted) {\n        const menuObj = {\n          name: menuData.tag,\n          label: menuData.label, \n          hint: menuData.hint,\n          icon: menuData.icon, \n          type: menuData.propType,\n          restricted: menuData.restricted\n        };\n        game.settings.registerMenu(MODULE_ID, menuData.tag, menuObj);\n      }\n    }\n\n    SettingsUtil.updateColorScheme();\n  }\n\n  static updateColorScheme(){\n    // const uiConfig = SettingsUtil.get(\"uiConfig\", \"core\"); \n    const foundryUiConfig = game.settings.get('core','uiConfig'); \n    SettingsUtil.coreColorScheme = foundryUiConfig?.colorScheme?.interface || \"dark\";\n    LogUtil.log('SettingsUtil.updateColorScheme', [foundryUiConfig, SettingsUtil.coreColorScheme]);\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    try {\n      if(moduleName===MODULE_ID){\n        setting = game.settings.get(moduleName, settingName);\n      }else{\n        const client = game.settings.storage.get(\"client\");\n        let selectedSetting = client[`${moduleName}.${settingName}`];\n        //\n        if(selectedSetting===undefined){\n          const world = game.settings.storage.get(\"world\");\n          selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n          setting = selectedSetting?.value;\n        }\n      }\n    } catch (error) {\n      // Setting not registered yet, return default\n      LogUtil.log(`Setting ${moduleName}.${settingName} not found, returning false`);\n      return false;\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n      LogUtil.log('SettingsUtil.set - world Setting?', [selectedSetting]);\n    } \n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n      LogUtil.log('SettingsUtil.set - success', [moduleName, settingName, newValue]);\n    }catch(e){\n      LogUtil.error('SettingsUtil.set - error', [e]);\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsEnabled(newValue);\n        break;\n      case SETTINGS.compactMode.tag:\n        SettingsUtil.applyCompactMode(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsEnabled(newValue){\n    const requestsIcon = document.querySelector(\".chat-controls .flash-rolls-icon\");\n    if(!requestsIcon){ return; }\n    \n    if(newValue){\n      requestsIcon.classList.add(\"active\");\n      // requestsIcon.setAttribute(\"aria-pressed\", \"true\");\n    }else{\n      requestsIcon.classList.remove(\"active\");\n      // requestsIcon.setAttribute(\"aria-pressed\", \"false\");\n    }\n  }\n\n  static applyCompactMode(newValue){\n    const SETTINGS = getSettings();\n    const isCompactMode = newValue || SettingsUtil.get(SETTINGS.compactMode.tag);\n\n    LogUtil.log('applyCompactMode', [isCompactMode]);\n    \n    RollRequestsMenu.refreshIfOpen();\n  }\n}\n","import { HOOKS_DND5E } from '../constants/Hooks.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { MODULE_ID, DEBUG_TAG, ROLL_TYPES, ACTIVITY_TYPES } from '../constants/General.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog, GMHitDieConfigDialog, GMDamageConfigDialog, GMAttackConfigDialog } from './dialogs/gm-dialogs/index.mjs';\nimport { RollHandlers } from './RollHandlers.mjs';\nimport { ensureCombatForInitiative, filterActorsForInitiative } from './helpers/RollValidationHelpers.mjs';\nimport { GeneralUtil } from './helpers/GeneralUtil.mjs';\nimport { ModuleHelpers } from './helpers/ModuleHelpers.mjs';\n/**\n * Handles intercepting D&D5e rolls on the GM side and redirecting them to players\n */\nexport class RollInterceptor {  \n  /**\n   * @type {Set<string>} - Set of registered hook IDs for cleanup\n   */\n  static registeredHooks = new Set();\n  \n  /**\n   * Initialize the roll interceptor\n   */\n  static initialize() {\n    LogUtil.log('RollInterceptor.initialize');\n    if (!game.user.isGM) return;\n    \n    this.registerHooks();\n  }\n  \n  /**\n   * Register all necessary hooks for roll interception\n   */\n  static registerHooks() {\n    LogUtil.log('RollInterceptor.registerHooks');\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, this._handlePreRoll.bind(this, ROLL_TYPES.ABILITY));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, this._handlePreRoll.bind(this, ROLL_TYPES.SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SKILL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.SKILL));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_TOOL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.TOOL));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._handlePreRoll.bind(this, ROLL_TYPES.ATTACK));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DAMAGE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DEATH_SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.HIT_DIE));\n\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE, this._handlePreRollInitiative.bind(this, ROLL_TYPES.INITIATIVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG, this._handlePreRollInitiative.bind(this, ROLL_TYPES.INITIATIVE));\n    this._registerHook(HOOKS_DND5E.ROLL_INITIATIVE, this._handleRollInitiative.bind(this, ROLL_TYPES.INITIATIVE));\n  }\n  \n  /**\n   * Helper to register a hook and track it for cleanup\n   * @param {string} hookName \n   * @param {Function} handler \n   */\n  static _registerHook(hookName, handler) {\n    LogUtil.log('RollInterceptor._registerHook');\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.add({ hookName, hookId });\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterHooks() {\n    LogUtil.log('RollInterceptor.unregisterHooks');\n    for (const { hookName, hookId } of this.registeredHooks) {\n      Hooks.off(hookName, hookId);\n    }\n    this.registeredHooks.clear();\n  }\n\n   /**\n   * Handle pre-roll initiative to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Actor5e} actor - Actor for initiative\n   * @param {D20Roll} roll - Roll configuration object\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRollInitiative(rollType, actor, roll) {\n    // LogUtil.log('_handlePreRollInitiative', [rollType, actor, roll]);\n    return;\n  }\n\n  /**\n   * Handle pre-roll hooks to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Object} config - Roll configuration object (or Actor for initiative)\n   * @param {Object} dialog - Dialog options\n   * @param {Object} message - Message options\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRoll(rollType, config, dialog, message) {\n    LogUtil.log('_handlePreRoll #0', [rollType, config, dialog, message]);\n    // Only intercept on GM side\n    if (!game.user.isGM || config.isRollRequest === false ) return;\n    const isMidiRequest = GeneralUtil.isModuleOn(MODULE_ID, 'midi-qol');\n\n    const hookNames = config?.hookNames || dialog?.hookNames || message?.hookNames || [];\n    const isInitiativeRoll = hookNames.includes('initiativeDialog') || hookNames.includes('initiative');\n    \n    if(rollType === ROLL_TYPES.ATTACK){\n      const moduleFlags = config.subject?.item?.getFlag(MODULE_ID, 'tempAttackConfig');\n      LogUtil.log('_handlePreRoll - is Attack roll', [config.subject?.item, moduleFlags]);\n      if(moduleFlags){\n        LogUtil.log('_handlePreRoll - found module flags, skipping interception', [moduleFlags]);\n        return;\n      }\n    }\n    \n    // if(rollType === ROLL_TYPES.DAMAGE){\n    //   // Check if this damage roll is from a local execution\n    //   const moduleFlags = config.subject?.item?.getFlag(MODULE_ID, 'tempDamageConfig');\n    //   config.scaling = true;\n    //   LogUtil.log('RollInterceptor._handlePreRoll - is Damage roll', [config, config.subject?.item, moduleFlags]);\n    //   if(moduleFlags){\n    //     LogUtil.log('RollInterceptor._handlePreRoll - found module flags, skipping interception', [moduleFlags]);\n    //     return;\n    //   }\n    // }\n    // Override rollType if this is actually an initiative roll\n    if (isInitiativeRoll && rollType === ROLL_TYPES.ABILITY) {\n      LogUtil.log('RollInterceptor._handlePreRoll - Overriding ability to initiative', [hookNames]);\n      rollType = ROLL_TYPES.INITIATIVE;\n    }\n    \n    if ( config?.isRollRequest || config.sendRequest===false || \n         dialog?.isRollRequest || message?.isRollRequest) {\n      LogUtil.log('_handlePreRoll - skipping interception (roll request)', [config, dialog, message]);\n      return;\n    }\n\n    let actor;\n    if (rollType === ROLL_TYPES.INITIATIVE && config instanceof Actor) {\n      actor = config;\n      LogUtil.log('_handlePreRoll - Initiative', [config, dialog, message]);\n      if (dialog?.isRollRequest === false || message?.isRollRequest === false) {\n        return;\n      }\n    } else if (rollType === ROLL_TYPES.HIT_DIE) {\n      actor = dialog?.subject?.actor || dialog?.subject || dialog?.actor;\n    } else if(rollType === ROLL_TYPES.ATTACK || rollType === ROLL_TYPES.DAMAGE){\n      actor = config.subject?.actor;\n    } else {\n      actor = config.subject?.actor || config.subject || config.actor;\n    }\n\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    // const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n\n    if(!rollInterceptionEnabled || //!rollRequestsEnabled ||\n      !actor || actor.documentName !== 'Actor') {\n      return;\n    }\n\n    const owner = GeneralUtil.getActorOwner(actor);   \n    LogUtil.log('_handlePreRoll - ownership', [owner]);\n    \n    if (!owner || !owner.active || owner.id === game.user.id) {\n      LogUtil.log('_handlePreRoll - skipping interception (ownership)', [owner?.name, owner?.active]);\n      return;\n    }else{\n      config.isRollRequest = true;\n    }\n\n    if (rollType === ROLL_TYPES.ATTACK) {\n      message = {\n        ...message,\n        rollMode: CONST.DICE_ROLL_MODES.PUBLIC\n      };\n    }\n\n    const isMidiActive = config.midiOptions !== null && config.midiOptions !== undefined;\n    if(config.midiOptions?.fastForward){\n      config.midiOptions = {\n        ...config.midiOptions,\n        consume: {\n          spellSlot: false\n        }\n      }\n    }\n    if(isMidiActive && game.user.isGM){\n      LogUtil.log('_handlePreRoll - isMidiActive', [isMidiActive]);\n      this._showGMConfigDialog(actor, owner, rollType, config, dialog, message); \n      return false;\n    }\n\n    if (config.sendRequest===false) { //|| config.fastForward===true || config.skipRollDialog===true || \n      LogUtil.log('_handlePreRoll - skipping interception', [dialog.configure, config.sendRequest]);\n      return;\n    }\n    \n    LogUtil.log('_handlePreRoll - intercepting roll #1', [config, message]);\n    this._showGMConfigDialog(actor, owner, rollType, config, dialog, message); \n    \n    return false;\n  }\n\n  static _handleRollInitiative(a,b,c) {\n    // LogUtil.log('_handleRollInitiative', [a,b,c]);\n    return;\n  }\n  \n  /**\n   * Handle initiative-specific pre-roll checks\n   * @param {Actor} actor\n   * @returns {Promise<boolean>} true if should continue with roll\n   */\n  static async _handleInitiativePreChecks(actor) {\n    if (!game.combat) {\n      const combatReady = await ensureCombatForInitiative();\n      if (!combatReady) return false;\n    }\n    \n    const filteredActorIds = await filterActorsForInitiative([actor.id], game);\n    return filteredActorIds.length > 0;\n  }\n\n  /**\n   * Get the appropriate dialog class for a roll type\n   * @param {string} rollType\n   * @returns {Class} The dialog class to use\n   */\n  static _getDialogClass(rollType) {\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      return GMSkillToolConfigDialog;\n    } else if (normalizedRollType === ROLL_TYPES.HIT_DIE) {\n      return GMHitDieConfigDialog;\n    } else if (normalizedRollType === ROLL_TYPES.ATTACK) {\n      return GMAttackConfigDialog;\n    } else if (normalizedRollType === ROLL_TYPES.DAMAGE) {\n      return GMDamageConfigDialog;\n    } else {\n      return GMRollConfigDialog;\n    }\n  }\n\n  /**\n   * Extract roll key and build roll config based on roll type\n   * @param {string} rollType\n   * @param {Object} config\n   * @param {Object} dialog\n   * @param {Actor} actor\n   * @returns {Object} {rollKey, rollConfig}\n   */\n  static _extractRollConfiguration(rollType, config, dialog, actor) {\n    const normalizedRollType = rollType?.toLowerCase();\n    let rollKey = null;\n    const rollConfig = {\n      rolls: [{\n        parts: [],\n        data: {},\n        options: {}\n      }]\n    };\n\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        rollConfig.skill = config.skill;\n        rollConfig.ability = config.ability || config.subject?.ability;\n        rollKey = rollConfig.skill;\n        break;\n        \n      case ROLL_TYPES.TOOL:\n        rollConfig.tool = config.tool;\n        rollConfig.ability = config.ability || config.subject?.ability;\n        rollKey = rollConfig.tool;\n        break;\n        \n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.SAVE:\n        rollConfig.ability = config.ability || config.subject?.ability;\n        rollKey = rollConfig.ability;\n        if (rollConfig.ability === 'con' && config.targetValue !== undefined) {\n          rollType = ROLL_TYPES.CONCENTRATION;\n        }\n        break;\n        \n      case ROLL_TYPES.CONCENTRATION:\n        rollConfig.ability = 'con';\n        rollKey = 'con';\n        break;\n        \n      case ROLL_TYPES.INITIATIVE:\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n        rollKey = actor.system.attributes?.init?.ability || 'dex';\n        break;\n        \n      case ROLL_TYPES.HIT_DIE:\n        rollConfig.denomination = typeof config === 'string' ? \n          config : (config.denomination || config.subject?.denomination);\n        rollKey = rollConfig.denomination;\n        break;\n        \n      case ROLL_TYPES.ATTACK:\n        if (dialog?.options) {\n          rollConfig.ammunition = dialog.options.ammunition;\n          rollConfig.attackMode = dialog.options.attackMode;\n          rollConfig.mastery = dialog.options.mastery;\n        }\n        rollKey = config.subject?.item?.id;\n        break;\n        \n      case ROLL_TYPES.DAMAGE:\n        rollConfig.item = config.subject?.item;\n        rollConfig.subject = config.subject;\n        rollConfig.critical = config.critical || {};\n        rollKey = config.subject?.item?.id;\n        break;\n    }\n\n    return { rollKey, rollConfig };\n  }\n\n  /**\n   * Show dialog and get configuration from user\n   * @param {Class} DialogClass\n   * @param {Actor} actor\n   * @param {string} rollType\n   * @param {string} rollKey\n   * @param {boolean} skipRollDialog\n   * @param {boolean} rollRequestsEnabled\n   * @param {Object} config\n   * @param {Object} dialog\n   * @returns {Promise<Object>} Dialog result or default config\n   */\n  static async _getDialogResult(DialogClass, actor, rollType, rollKey, skipRollDialog, rollRequestsEnabled, config, dialog) {\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    LogUtil.log('_getDialogResult', [actor, rollType, rollKey, config, dialog]);\n    if (skipRollDialog) {\n      return {\n        sendRequest: true,\n        advantage: false,\n        disadvantage: false,\n        situational: \"\",\n        rollMode: game.settings.get(\"core\", \"rollMode\")\n      };\n    }\n\n    if (!DialogClass.initConfiguration) {\n      LogUtil.error('DialogClass.initConfiguration not found', [DialogClass, DialogClass.name]);\n      throw new Error(`DialogClass ${DialogClass.name} does not have initConfiguration method`);\n    }\n    \n    const dialogOptions = {\n      skipRollDialog: false,\n      sendRequest: rollRequestsEnabled\n    };\n\n    if (normalizedRollType === ROLL_TYPES.ATTACK || normalizedRollType === ROLL_TYPES.DAMAGE) {\n      return await DialogClass.initConfiguration([actor], normalizedRollType, rollKey, dialogOptions, config, dialog);\n    } else {\n      return await DialogClass.initConfiguration([actor], normalizedRollType, rollKey, dialogOptions);\n    }\n  }\n\n  /**\n   * Show GM configuration dialog before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showGMConfigDialog(actor, owner, rollType, config, dialog, message) {\n    LogUtil.log('_showGMConfigDialog - config', [rollType, config]);\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n\n    try {\n      const normalizedRollType = rollType?.toLowerCase();\n      \n      if (normalizedRollType === ROLL_TYPES.INITIATIVE) {\n        const shouldContinue = await this._handleInitiativePreChecks(actor);\n        if (!shouldContinue) return;\n      }\n      \n      const DialogClass = this._getDialogClass(rollType);\n      const { rollKey, rollConfig } = this._extractRollConfiguration(rollType, config, dialog, actor);\n      \n      LogUtil.log('_showGMConfigDialog - rollConfig', [rollConfig, rollKey]);\n      \n      const result = await this._getDialogResult(\n        DialogClass, \n        actor, \n        rollType, \n        rollKey, \n        skipRollDialog, \n        rollRequestsEnabled, \n        config, \n        dialog\n      );\n      \n      if (!result) {\n        LogUtil.log('_showGMConfigDialog - Dialog cancelled');\n        return;\n      }\n      \n      // If sendRequest is false, execute local roll\n      if (!result.sendRequest || !rollRequestsEnabled) {\n        LogUtil.log('_showGMConfigDialog - triggering _executeInterceptedRoll', [rollType, config, result]);\n        await this._executeInterceptedRoll(actor, rollType, config, result);\n        return;\n      }\n      \n      // Send the roll request to the player with the configured settings\n      // Exclude the event object as it can't be serialized\n      // const { event, ...configWithoutEvent } = config;\n      delete config.event;\n      const finalConfig = {\n        ...config,\n        ...result,\n        rolls: result.rolls,\n        requestedBy: game.user.name,\n        // For attack activity rolls, prevent the usage message from being created\n        ...(rollType === ROLL_TYPES.ATTACK && { chatMessage: false })\n      };\n      \n      LogUtil.log('_showGMConfigDialog - triggering _sendRollRequest', [rollType, finalConfig]);\n      this._sendRollRequest(actor, owner, rollType, finalConfig);\n      \n    } catch (error) {\n      LogUtil.error('RollInterceptor._showGMConfigDialog - Error', [error]);\n      // Fallback: send request without configuration\n      // this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n  \n  /**\n   * Called when an intercepted roll should be executed \n   * locally on the GM side instead of sent to player\n   * @param {Actor} actor \n   * @param {string} rollType \n   * @param {Object} originalConfig\n   * @param {Object} dialogResult\n   */\n  static async _executeInterceptedRoll(actor, rollType, originalConfig, dialogResult) {\n    LogUtil.log('RollInterceptor._executeInterceptedRoll', [actor, rollType, originalConfig, dialogResult]);\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Ensure we have a proper roll configuration structure\n    const rollConfig = dialogResult.rolls?.[0] || {\n      parts: [],\n      data: {},\n      options: {}\n    };\n    const situational = rollConfig.data?.situational || dialogResult.situational || \"\";\n    \n    // Determine the correct rollKey based on the roll type\n    let rollKey;\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        rollKey = originalConfig.skill;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollKey = originalConfig.tool;\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.SAVE:\n        rollKey = originalConfig.ability || originalConfig.subject?.ability;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        rollKey = originalConfig.denomination;\n        break;\n      default:\n        rollKey = originalConfig.ability || originalConfig.skill || originalConfig.tool || originalConfig.denomination;\n    }\n    \n    const requestData = {\n      rollKey: rollKey,\n      config: {\n        advantage: dialogResult.advantage || originalConfig.advantage,\n        disadvantage: dialogResult.disadvantage || originalConfig.disadvantage,\n        target: dialogResult.target || dialogResult.dc || originalConfig.target,\n        rollMode: dialogResult.rollMode || originalConfig.rollMode,\n        situational: situational,\n        isRollRequest: false,\n        ability: originalConfig.ability\n      }\n    };\n    \n    if (normalizedRollType === ROLL_TYPES.SKILL && !requestData.config.ability) {\n      requestData.config.ability = actor.system.skills?.[requestData.rollKey]?.ability || \n                                   CONFIG.DND5E.skills?.[requestData.rollKey]?.ability;\n    } else if (normalizedRollType === ROLL_TYPES.TOOL && !requestData.config.ability) {\n      const toolConfig = actor.system.tools?.[requestData.rollKey];\n      requestData.config.ability = toolConfig?.ability || \n                                   CONFIG.DND5E.enrichmentLookup?.tools?.[requestData.rollKey]?.ability ||\n                                   'int';\n    } else if ((normalizedRollType === ROLL_TYPES.ABILITY || normalizedRollType === ROLL_TYPES.SAVE) && !requestData.config.ability) {\n      requestData.config.ability = requestData.rollKey;\n    }\n    \n    LogUtil.log('RollInterceptor._executeInterceptedRoll - requestData', [requestData, originalConfig, dialogResult]);\n    \n    const dialogConfig = {\n      configure: false, // Skip dialog\n      isRollRequest: false\n    };\n    \n    const messageConfig = {\n      rollMode: requestData.config.rollMode,\n      create: true,\n      isRollRequest: false\n    };\n    \n    try {\n      const handlerMap = ROLL_TYPES;\n      \n      const handler = RollHandlers[normalizedRollType];\n      \n      if (handler) {\n        // Special handling for attack and damage rolls\n        if (normalizedRollType === ROLL_TYPES.ATTACK || normalizedRollType === ROLL_TYPES.DAMAGE || normalizedRollType === ROLL_TYPES.SAVE) {\n          requestData.rollKey = originalConfig.subject?.item?.id;\n          requestData.activityId = originalConfig.subject?.id;\n        }\n        \n        await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        LogUtil.warn(`No handler found for roll type: ${normalizedRollType}`);\n      }\n    } catch (error) {\n      LogUtil.error(\"RollInterceptor._executeInterceptedRoll\", [error]);\n    }\n  }\n  \n  /**\n   * Send a roll request to the player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {BasicRollProcessConfiguration} config - The roll process configuration\n   */\n  static async _sendRollRequest(actor, owner, rollType, config) {\n    LogUtil.log('_sendRollRequest', [actor, owner, rollType, config]);\n    LogUtil.log('_sendRollRequest - config.rolls', [config.rolls]);\n    const SETTINGS = getSettings();\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n    let normalizedRollType = rollType?.toLowerCase();\n    \n    // Convert INITIATIVE to INITIATIVE_DIALOG for player requests\n    if (normalizedRollType === ROLL_TYPES.INITIATIVE) {\n      normalizedRollType = ROLL_TYPES.INITIATIVE_DIALOG;\n    }\n    \n    // Extract the roll key based on roll type\n    let rollKey = null;\n    let activityId = null;\n    switch (normalizedRollType) {\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.SAVE:\n        rollKey = config.ability;\n        break;\n      case ROLL_TYPES.SKILL:\n        rollKey = config.skill;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollKey = config.tool;\n        break;\n      case ROLL_TYPES.ATTACK:\n      case ROLL_TYPES.DAMAGE:\n        LogUtil.log('_sendRollRequest - Attack/Damage roll config', [rollType, config]);\n        // for activities, config.subject is the activity itself\n        rollKey = config.subject.item?.id;\n        activityId = config.subject.id;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        rollKey = typeof config === 'string' ? config : config.denomination;\n        break;\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n      case ROLL_TYPES.INITIATIVE:\n        rollKey = null;\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        rollKey = null;\n        break;\n      default:\n        LogUtil.warn(`Unknown roll type: ${rollType}`);\n        return;\n    }\n    \n    // Build the request data with proper rollProcessConfig\n    // Filter out circular references that midi-qol adds\n    const cleanConfig = { ...config };\n\n    if(cleanConfig.midiOptions && cleanConfig.activity && cleanConfig.activity.type === ACTIVITY_TYPES.DAMAGE){\n      LogUtil.log('_sendRollRequest - Damage activity', [cleanConfig]);\n      cleanConfig.midiOptions = {\n        ...cleanConfig.midiOptions,\n        workflowOptions: {\n          ...cleanConfig.midiOptions.workflowOptions,\n          fastForward: false,\n          fastForwardAttack: false,\n          fastForwardDamage: false,\n        }\n      };\n    }\n    delete cleanConfig.subject;\n    delete cleanConfig.workflow;\n    delete cleanConfig.item;\n    delete cleanConfig.activity;\n\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType: normalizedRollType,\n      rollKey,\n      activityId,\n      rollProcessConfig: {\n        ...cleanConfig,\n        _requestedBy: game.user.name  // Add who requested the roll\n      },\n      skipRollDialog: skipRollDialog,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n\n    LogUtil.log('_sendRollRequest - requestData', [owner, requestData]);\n    \n    // Check if owner exists and is active\n    if(!owner || !requestData){\n      ui.notifications.warn('Flash Rolls: No owner found for actor ' + actor.name);\n      return;\n    }\n    \n    if(!owner.active){\n      const SETTINGS = getSettings();\n      if(SettingsUtil.get(SETTINGS.showOfflineNotifications.tag)) {\n        ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.playerOffline\", { \n          player: owner.name \n        }));\n      }\n      // Execute the roll locally instead\n      await this._executeInterceptedRoll(actor, rollType, config, { \n        ...config,\n        sendRequest: false \n      });\n\n      setTimeout(() => {\n        GeneralUtil.removeTemplateForItem(config.subject?.item);\n      }, 3000); \n      return;\n    }\n    \n    // Owner is active, send the request\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n\n    // Show notification to GM\n    ui.notifications.info(game.i18n.format('FLASH_ROLLS.notifications.rollRequestSent', { \n      player: owner?.name || 'Unknown',\n      actor: actor.name || 'Unknown' \n    }));\n    \n    \n  }\n}","import { ActorStatusUtil } from '../ActorStatusUtil.mjs';\nimport { LogUtil } from '../LogUtil.mjs';\nimport { HOOKS_CORE } from '../../constants/Hooks.mjs';\n\n/**\n * Utility class for managing Flash Rolls status icons in the Actor Directory\n */\nexport class ActorDirectoryIconUtil {\n  /**\n   * Initialize the Actor Directory icon system\n   */\n  static initialize() {\n    LogUtil.log('ActorDirectoryIconUtil.initialize');\n    \n    // Hook into Actor Directory renders\n    Hooks.on(HOOKS_CORE.RENDER_ACTOR_DIRECTORY, this.onRenderActorDirectory.bind(this));\n    \n    // Hook into actor flag changes to update icons\n    Hooks.on(HOOKS_CORE.UPDATE_ACTOR, this.onUpdateActor.bind(this));\n    \n    // Update any already-rendered Actor Directory\n    this.updateExistingDirectory();\n  }\n\n  /**\n   * Update icons in an already-rendered Actor Directory\n   */\n  static updateExistingDirectory() {\n    // Find any existing Actor Directory\n    const actorDirectory = ui.actors;\n    if (actorDirectory && actorDirectory.rendered && actorDirectory.element) {\n      LogUtil.log('ActorDirectoryIconUtil.updateExistingDirectory - Found rendered directory, adding icons');\n      this.onRenderActorDirectory(actorDirectory, actorDirectory.element);\n    } else {\n      LogUtil.log('ActorDirectoryIconUtil.updateExistingDirectory - No rendered directory found');\n    }\n  }\n\n  /**\n   * Handle Actor Directory render to add status icons\n   * @param {ActorDirectory} app - The Actor Directory application\n   * @param {HTMLElement} html - The rendered HTML\n   */\n  static onRenderActorDirectory(app, html) {\n    LogUtil.log('ActorDirectoryIconUtil.onRenderActorDirectory', [app, html]);\n    \n    const actorItems = html.querySelectorAll('.directory-item.actor');\n    actorItems.forEach((element) => {\n      const actorId = element.dataset.entryId || element.dataset.documentId;\n      if (actorId) {\n        this.updateActorIcon(element, actorId);\n      }\n    });\n  }\n\n  /**\n   * Handle actor updates to refresh icons when status changes\n   * @param {Actor} actor - The updated actor\n   * @param {Object} changes - The changes made to the actor\n   */\n  static onUpdateActor(actor, changes) {\n    const flagChanges = changes.flags?.['flash-rolls-5e'];\n    if (flagChanges) {\n      LogUtil.log('ActorDirectoryIconUtil.onUpdateActor - Flash Rolls flags changed', [actor.name, flagChanges]);\n      this.refreshActorIcon(actor.id);\n    }\n  }\n\n  /**\n   * Update the Flash Rolls status icon for a specific actor element\n   * @param {HTMLElement} actorElement - The actor directory item element\n   * @param {string} actorId - The actor ID\n   */\n  static updateActorIcon(actorElement, actorId) {\n    const existingIcon = actorElement.querySelector('span.fas.fa-bolt, span.fas.fa-bolt-slash');\n    if (existingIcon) {\n      existingIcon.remove();\n    }\n\n    const actor = game.actors.get(actorId);\n    if (!actor) return;\n\n    const isFavorite = ActorStatusUtil.isFavorite(actor);\n    const isBlocked = ActorStatusUtil.isBlocked(actor);\n\n    if (!isFavorite && !isBlocked) return;\n    const icon = document.createElement('span');\n    \n    if (isBlocked) {\n      icon.className = 'fas fa-bolt-slash';\n      icon.title = 'Blocked from Flash Rolls menu';\n    } else if (isFavorite) {\n      icon.className = 'fas fa-bolt';\n      icon.title = 'Added to Flash Rolls menu';\n    }\n    actorElement.appendChild(icon);\n  }\n\n  /**\n   * Refresh the icon for a specific actor by ID\n   * @param {string} actorId - The actor ID\n   */\n  static refreshActorIcon(actorId) {\n    const actorElement = document.querySelector(`.directory-item.actor[data-entry-id=\"${actorId}\"], .directory-item.actor[data-document-id=\"${actorId}\"]`);\n    if (actorElement) {\n      this.updateActorIcon(actorElement, actorId);\n    }\n  }\n\n  /**\n   * Refresh all actor icons in the directory\n   */\n  static refreshAllIcons() {\n    LogUtil.log('ActorDirectoryIconUtil.refreshAllIcons');\n    \n    const actorItems = document.querySelectorAll('.directory-item.actor');\n    actorItems.forEach(element => {\n      const actorId = element.dataset.entryId || element.dataset.documentId;\n      if (actorId) {\n        this.updateActorIcon(element, actorId);\n      }\n    });\n  }\n}","import { HOOKS_CORE, HOOKS_DND5E, HOOKS_MIDI_QOL } from \"../constants/Hooks.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { RollInterceptor } from \"./RollInterceptor.mjs\";\nimport { updateSidebarClass, isSidebarExpanded } from \"./helpers/Helpers.mjs\";\nimport { SidebarUtil } from \"./SidebarUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { ACTIVITY_TYPES, MODULE_ID } from \"../constants/General.mjs\";\nimport { GeneralUtil } from \"./helpers/GeneralUtil.mjs\";\nimport { ModuleHelpers } from \"./helpers/ModuleHelpers.mjs\";\nimport { ChatMessageUtils } from \"./ChatMessageUtils.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\nimport { ActorStatusUtil } from \"./ActorStatusUtil.mjs\";\nimport { ActorDirectoryIconUtil } from \"./utils/ActorDirectoryIconUtil.mjs\";\n\n/**\n * Utility class for managing all module hooks in one place\n */\nexport class HooksUtil {\n  static registeredHooks = new Map();\n  static midiTimeout = null;\n  static throttleTimers = {};\n  \n  /**\n   * Initialize main module hooks\n   */\n  static initialize() {\n    Hooks.once(HOOKS_CORE.INIT, this._onInit.bind(this));\n    Hooks.once(HOOKS_CORE.READY, this._onReady.bind(this));\n    \n    Hooks.once(HOOKS_CORE.GET_ACTOR_CONTEXT_OPTIONS, (html, contextOptions) => {\n      LogUtil.log(\"getActorContextOptions hook\", [html, contextOptions]);\n      \n      if (!game.user.isGM) return;\n      \n      // Add to favor\n      // contextOptions.push({\n      //   name: game.i18n.localize(\"FLASH_ROLLS.contextMenu.addToFavorites\"),\n      //   icon: '<i class=\"fas fa-bolt\"></i>',\n      //   callback: li => {\n      //     const actorId = li.dataset.entryId;\n      //     if (actorId) {\n      //       ActorStatusUtil.toggleFavorite(actorId, true);\n      //     }\n      //     return actorId;\n      //   },\n      //   condition: li => {\n      //     const actorId = li?.dataset?.entryId;\n      //     const isFavorite = ActorStatusUtil.isFavorite(actorId);\n      //     // const isBlocked = ActorStatusUtil.isBlocked(actorId);\n      //     return !isFavorite;\n      //   }\n      // });\n\n      // contextOptions.push({\n      //   name: game.i18n.localize(\"FLASH_ROLLS.contextMenu.removeFromFavorites\"),\n      //   icon: '<i class=\"fas fa-bolt-slash\"></i>',\n      //   callback: li => {\n      //     const actorId = li.dataset.entryId;\n      //     if (actorId) {\n      //       ActorStatusUtil.toggleFavorite(actorId, false);\n      //     }\n      //     return actorId;\n      //   },\n      //   condition: li => {\n      //     const actorId = li?.dataset?.entryId;\n      //     const isFavorite = ActorStatusUtil.isFavorite(actorId);\n      //     return isFavorite;\n      //   }\n      // });\n\n      contextOptions.push({\n        name: game.i18n.localize(\"FLASH_ROLLS.contextMenu.unblockFromMenu\"),\n        icon: '<i class=\"fas fa-bolt\"></i>',\n        callback: li => {\n          const actorId = li.dataset.entryId;\n          if (actorId) {\n            ActorStatusUtil.toggleBlocked(actorId, false);\n          }\n          return actorId;\n        },\n        condition: li => {\n          const actorId = li?.dataset?.entryId;\n          const isBlocked = ActorStatusUtil.isBlocked(actorId);\n          return isBlocked;\n        }\n      });\n\n      contextOptions.push({\n        name: game.i18n.localize(\"FLASH_ROLLS.contextMenu.blockFromMenu\"),\n        icon: '<i class=\"fas fa-bolt-slash\"></i>',\n        callback: li => {\n          const actorId = li.dataset.entryId;\n          if (actorId) {\n            ActorStatusUtil.toggleBlocked(actorId, true);\n          }\n          return actorId;\n        },\n        condition: li => {\n          const actorId = li?.dataset?.entryId;\n          const isBlocked = ActorStatusUtil.isBlocked(actorId);\n          return !isBlocked;\n        }\n      });\n    });\n  }\n  \n  /**\n   * Triggered when Foundry initializes\n   */\n  static _onInit() {\n    const SETTINGS = getSettings();\n    document.body.classList.add(\"flash5e\");\n    SettingsUtil.registerSettings();\n    DiceConfigUtil.initialize();\n    \n    this._registerHooks();\n  }\n  \n  /**\n   * Triggered when Foundry is ready (fully loaded)\n   */\n  static _onReady() {\n    SettingsUtil.registerSettingsMenu();\n    ActorDirectoryIconUtil.initialize();\n    SidebarUtil.addSidebarControls(ui.sidebar, ui.sidebar?.element);\n    if(ModuleHelpers.isModuleActive(\"midi-qol\")){\n      LogUtil.log(\"HooksUtil.initialize\", [\"midi-qol is active. Awaiting for it to be ready...\"]);\n      Hooks.once(HOOKS_MIDI_QOL.READY, this._initModule.bind(this));\n    }else{\n      LogUtil.log(\"HooksUtil.initialize\", [\"midi-qol is NOT active. Starting...\"]);\n      this._initModule();\n    }\n  }\n\n  static async _initModule() {\n    const SETTINGS = getSettings();\n    const isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n    if (isDebugOn) {\n      CONFIG.debug.hooks = true;\n    }\n    \n    await ChatMessageUtils.initialize();\n\n    if (game.user.isGM) {\n      RollInterceptor.initialize();\n      this._registerGMHooks();\n      RollRequestsMenu.showOnLoadIfEnabled();\n    }else{\n      DiceConfigUtil.getDiceConfig();\n      this._registerPlayerHooks();\n    }\n    updateSidebarClass(isSidebarExpanded());\n  }\n  \n  /**\n   * Register D&D5e specific hooks\n   */\n  static _registerHooks() {\n    this._registerHook(HOOKS_CORE.RENDER_SIDEBAR, this._onRenderSidebar.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessage.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessageFlavor.bind(this));\n    this._registerHook(HOOKS_CORE.RENDER_CHAT_MESSAGE, this._onRenderChatMessageHTML.bind(this));\n    this._registerHook(HOOKS_CORE.CHANGE_SIDEBAR_TAB, this._onSidebarUpdate.bind(this));\n    this._registerHook(HOOKS_CORE.COLLAPSE_SIDE_BAR, this._onSidebarUpdate.bind(this));\n    this._registerHook(HOOKS_CORE.REFRESH_MEASURED_TEMPLATE, this.onRefreshTemplate.bind(this)); \n    this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderRollConfigDialog.bind(this));\n    this._registerHook(HOOKS_DND5E.RENDER_SKILL_TOOL_ROLL_DIALOG, this._onRenderSkillToolDialog.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_USE_ACTIVITY, this._onPreUseActivity.bind(this));\n    this._registerHook(HOOKS_DND5E.POST_USE_ACTIVITY, this._onPostUseActivity.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._onPreRollHitDieV2.bind(this));\n    this._registerHook(HOOKS_DND5E.POST_ROLL_CONFIG, this._onPostRollConfig.bind(this));\n    // this._registerHook(HOOKS_DND5E.ROLL_DAMAGE_V2, this._onPostRollDamage.bind(this));\n  }\n  \n  /**\n   * Register GM-specific hooks\n   */\n  static _registerGMHooks() {\n    this._registerHook(HOOKS_CORE.USER_CONNECTED, this._onUserConnected.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessageGM.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_V2, this._onPreRoll.bind(this));\n    \n    // Token hooks for updating roll requests menu\n    this._registerHook(HOOKS_CORE.CREATE_TOKEN, this._onTokenChange.bind(this));\n    this._registerHook(HOOKS_CORE.DELETE_TOKEN, this._onTokenChange.bind(this));\n    \n    // Hooks for updating roll requests menu when data changes\n    this._registerHook(HOOKS_CORE.UPDATE_SETTING, this._onSettingUpdate.bind(this));\n    this._registerHook(HOOKS_CORE.UPDATE_SCENE, this._onSceneUpdate.bind(this));\n    this._registerHook(HOOKS_CORE.UPDATE_ACTOR, this._onActorUpdate.bind(this));\n\n    game.users.forEach(user => {\n      this._onUserConnected(user);\n    });\n  }\n\n  static _registerPlayerHooks() {\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG, this._onPreRollInitiativeDialog.bind(this));\n    // this._registerHook(HOOKS_DND5E.PRE_CONFIGURE_INITIATIVE, this._onPreConfigureInitiative.bind(this));\n    \n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._onPreRollAttackV2.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._onPreRollDamageV2.bind(this));\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, (config, dialog, message) => {\n      LogUtil.log(\"_onPreRollAbilityCheckV2\", [config, dialog, message]);\n      if (config.isRollRequest) {\n        dialog.configure = true;\n      }\n    });\n    \n    // this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderRollConfigDialog.bind(this));\n  }\n\n  static _onSidebarUpdate(tab) {\n    LogUtil.log(\"_onSidebarUpdate\", [tab]);\n    updateSidebarClass(isSidebarExpanded());\n  }\n  \n  /**\n   * Handle data after roll configuration\n   */\n  static _onPostRollConfig(rolls, config, dialog, message) {\n    if (config._showRequestedBy && rolls.length > 0) {\n      message.data = message.data || {};\n      message.data._showRequestedBy = true;\n      message.data._requestedBy = config._requestedBy;\n    }\n  }\n\n  // static _onPostRollDamage(rolls, config, dialog, message) {\n  //   LogUtil.log(\"_onPostRollDamage\", [config]);\n  //   setTimeout(() => {\n  //     GeneralUtil.removeTemplateForItem(config.subject?.item);\n  //   }, 3000); \n  // }\n  \n  /**\n   * Handle data before creating chat message for requested rolls\n   */\n  static _onPreCreateChatMessage(chatMessage, data, options, userId) {\n    if (data._showRequestedBy && data.rolls?.length > 0) {\n      const requestedBy = data._requestedBy || 'GM';\n      const requestedText = game.i18n.format('FLASH_ROLLS.chat.requestedBy', { gm: requestedBy });\n      \n      const currentFlavor = data.flavor || '';\n      data.flavor = currentFlavor ? `${currentFlavor} ${requestedText}` : requestedText;\n    }\n    \n    if (data.flags?.[MODULE_ID]?.groupRollId) {\n      LogUtil.log('_onPreCreateChatMessage - Found groupRollId in data flags', [data]);\n    }\n    \n    if (data.rolls?.length > 0 || data.flags?.core?.initiativeRoll) {\n      const speaker = data.speaker;\n      const actorId = speaker?.actor;\n      \n      if (actorId) {\n        let actor = game.actors.get(actorId);\n        \n        if (!actor && speaker?.token) {\n          const token = canvas.tokens.get(speaker.token);\n          if (token?.actor) {\n            actor = token.actor;\n            LogUtil.log('_onPreCreateChatMessage - Using token actor from speaker', [actor.name, actor.id]);\n          }\n        }\n        \n        if (!actor) {\n          LogUtil.log('_onPreCreateChatMessage - No actor found', [actorId, speaker]);\n          return;\n        }\n        \n        if (game.user.isGM) {\n          const baseActorId = actor.isToken ? actor.actor?.id : actor.id;\n          const checkIds = [actorId, baseActorId].filter(id => id);\n          \n          for (const [groupRollId, pendingData] of ChatMessageUtils.pendingRolls.entries()) {\n            const actorEntries = pendingData.actorEntries || (pendingData.actors ? pendingData.actors.map(id => ({ actorId: id })) : []);\n            if (checkIds.some(id => actorEntries.some(entry => entry.actorId === id))) {\n              // This actor is part of a group roll, add the flag\n              data.flags = data.flags || {};\n              data.flags[MODULE_ID] = data.flags[MODULE_ID] || {};\n              data.flags[MODULE_ID].groupRollId = groupRollId;\n              LogUtil.log('_onPreCreateChatMessage - Added groupRollId flag (GM)', [groupRollId, actorId]);\n              break;\n            }\n          }\n        } else {\n          let storedGroupRollId = actor.getFlag(MODULE_ID, 'tempGroupRollId');\n          if (!storedGroupRollId && actor.isToken) {\n            const baseActor = game.actors.get(actor.actor?.id);\n            if (baseActor) {\n              storedGroupRollId = baseActor.getFlag(MODULE_ID, 'tempGroupRollId');\n              LogUtil.log('_onPreCreateChatMessage - Checking base actor for tempGroupRollId', [baseActor.id, storedGroupRollId]);\n            }\n          }\n          \n          if (storedGroupRollId) {\n            actor.unsetFlag(MODULE_ID, 'tempGroupRollId');\n            if (actor.isToken) {\n              const baseActor = game.actors.get(actor.actor?.id);\n              if (baseActor) {\n                baseActor.unsetFlag(MODULE_ID, 'tempGroupRollId');\n              }\n            }\n          }\n          \n          let storedInitConfig = actor.getFlag(MODULE_ID, 'tempInitiativeConfig');\n          \n          if (!storedInitConfig && actor.isToken) {\n            const baseActor = game.actors.get(actor.actor?.id);\n            if (baseActor) {\n              storedInitConfig = baseActor.getFlag(MODULE_ID, 'tempInitiativeConfig');\n            }\n          }\n          \n          if (storedInitConfig?.groupRollId || storedGroupRollId) {\n            data.flags = data.flags || {};\n            data.flags[MODULE_ID] = data.flags[MODULE_ID] || {};\n            data.flags[MODULE_ID].groupRollId = storedGroupRollId || storedInitConfig?.groupRollId || '';\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Handle flavor data before creating chat message\n   */\n  static _onPreCreateChatMessageFlavor(message, data, options, userId) {\n    if (data.rolls?.length > 0 && data.rolls[0]) {\n      try {\n        const rollData = data.rolls[0];\n        if (rollData.options?._customFlavor) {\n          data.flavor = rollData.options._customFlavor;\n        }\n      } catch (error) {\n        LogUtil.error(\"_onPreCreateChatMessageFlavor\", [error]);\n      }\n    }\n  }\n  \n  /**\n   * Triggered whenever roll configuration dialog is rendered. \n   * Used to add custom situational bonus from data, since the default DnD5e dialog does not seem to handle that\n   */\n  static _onRenderRollConfigDialog(app, html, data) {\n    console.trace(\"Flash Rolls 5e - _onRenderRollConfigDialog\", [ app, data ]);\n    if (app._flashRollsApplied) return;\n    // LogUtil.log(\"_onRenderRollConfigDialog #0\", [ app, data ]);\n    \n    // const isDamageRoll = app instanceof dnd5e.applications.dice.DamageRollConfigurationDialog;\n    // LogUtil.log(\"_onRenderRollConfigDialog - isDamageRoll?\", [isDamageRoll, app.constructor.name]);\n    \n    const isInitiativeRoll = app.config?.hookNames?.includes('initiativeDialog') || \n                           app.element?.id?.includes('initiative');\n    \n    if (isInitiativeRoll) {\n      const actor = app.config?.subject;\n      if (!actor) return;\n      \n      const storedConfig = actor.getFlag(MODULE_ID, 'tempInitiativeConfig');      \n      if (storedConfig) {\n        app._flashRollsApplied = true;\n        const situationalInput = html.querySelector('input[name*=\"situational\"]');\n        setTimeout(() => {\n          situationalInput.dispatchEvent(new Event('change', {\n            bubbles: true,\n            cancelable: false\n          }));\n        }, 50);\n      }\n      \n      return;\n    }else{\n      const situationalInputs = html.querySelectorAll('input[name*=\"situational\"]');\n      LogUtil.log(\"_onRenderRollConfigDialog - found situational inputs\", [situationalInputs.length]);\n      \n      situationalInputs.forEach((input, index) => { \n        LogUtil.log(\"_onRenderRollConfigDialog - processing input\", [index, input.name, input.value]);\n        if (!input.value && app.config?.rolls?.[0]?.data?.situational) {\n          input.value = app.config.rolls[0].data.situational;\n        }\n        LogUtil.log(\"_onRenderRollConfigDialog #1\", [input.value, app.config.rolls]);\n        \n        // app.config.scaling = true;\n        if (input.value) {\n          app._flashRollsApplied = true;\n\n          if (app.config?.rolls?.[0]?.data) {\n            delete app.config.rolls[0].data.situational;\n          }\n          \n          setTimeout(() => {\n\n            input.dispatchEvent(new Event('change', {\n              bubbles: true,\n              cancelable: false\n            }));\n            LogUtil.log(\"_onRenderRollConfigDialog #2 - dispatched change event\", []);\n          }, 150);\n        }\n      });\n    }\n    \n  }\n  \n  /**\n   * Intercept group roll message creation (GM only) - currently unused\n   */\n  static _onPreCreateChatMessageGM(message, data, options, userId) {\n    // LogUtil.log(\"_onPreCreateChatMessageGM\", [message, data, options, userId]);\n  }\n  \n  /**\n   * Intercept rendered chat messages to handle group rolls\n   */\n  static _onRenderChatMessageHTML(message, html, context) {\n    LogUtil.log(\"_onRenderChatMessageHTML\", [message, html, context]);\n    ChatMessageUtils.interceptRollMessage(message, html, context);\n    \n    this._addSelectTargetsButton(message, html);\n\n    if(game.user.isGM){\n      const item = context.subject?.item;\n      if (!item) return;\n      setTimeout(() => {\n        GeneralUtil.removeTemplateForItem(item);\n      }, 3000); \n    }\n    \n  }\n  \n  /**\n   * Add \"Select Targeted\" button to damage roll messages with saves\n   * @param {ChatMessage} message - The chat message\n   * @param {jQuery} html - The rendered HTML\n   */\n  static _addSelectTargetsButton(message, html) {\n    if(!game.user.isGM) return;\n    LogUtil.log(\"_addSelectTargetsButton #0\", [message, html, html.querySelector('.message-content')]);\n    if (message.flags?.dnd5e?.roll?.type !== 'damage' || html.querySelector('.select-targeted')) return;\n    \n    const button = document.createElement('button');\n    button.className = 'select-targeted';\n    button.type = 'button';\n    button.setAttribute(\"data-tooltip-direction\", \"LEFT\");\n    button.setAttribute(\"data-tooltip\", \"Select Targeted\");\n    button.innerHTML = '<i class=\"fas fa-crosshairs\"></i>';\n    \n    button.addEventListener('click', (event) => {\n      event.preventDefault();\n      this._selectTargetedTokens(event);\n    });\n    \n    html.querySelector('.message-content').appendChild(button);\n    message.update({\n      content: html\n    });\n  }\n  \n  /**\n   * Select all currently targeted tokens as damage targets\n   * @param {ChatMessage} message - The chat message\n   */\n  static _selectTargetedTokens(event) {\n    const message = event.currentTarget.closest('.chat-message');\n    const targets = message.querySelectorAll(\"[data-target-uuid]\");\n    \n    if (targets.length === 0) {\n      ui.notifications.warn(game.i18n.localize(\"FLASH_ROLLS.notifications.noTargetedTokens\"));\n      return;\n    }\n\n    LogUtil.log(\"_selectTargetedTokens\", [message, targets, canvas.tokens.placeables, game.scenes.active]);\n    for ( let i=0; i < targets.length; i++ ) {\n      const target = targets[i];\n      const actorId = target.dataset.targetUuid.split('Actor.')[1];\n      const token = canvas.tokens.placeables.find(t => {\n        return t.document.actorId === actorId;\n      });\n      token?.control({ releaseOthers: i===0 });\n    }\n  }\n  \n  /**\n   * Request dice configuration from the connected user\n   */\n  static _onUserConnected(user) {\n    if (user.active && user.id !== game.user.id) {\n      DiceConfigUtil.requestDiceConfigFromUser(user.id);\n    }\n  }\n\n  /**\n   * Handle token create/delete events to refresh roll requests menu\n   * @param {Token} token - The token document\n   * @param {Object} options - Creation/deletion options  \n   * @param {string} userId - The user ID who performed the action\n   */\n  static _onTokenChange(token, options, userId) {\n    LogUtil.log('HooksUtil._onTokenChange - Re-rendering roll requests menu due to token create/delete');\n    RollRequestsMenu.refreshIfOpen();\n  }\n\n  static _onSettingUpdate(setting, value, options, userId) {\n    const SETTINGS = getSettings();\n    const MODULE = { ID: 'flash-rolls-5e' };\n    \n    if (setting.key === `${MODULE.ID}.${SETTINGS.showOnlyPCsWithToken.tag}`) {\n      \n      LogUtil.log('HooksUtil._onSettingUpdate - Re-rendering roll requests menu due to setting change', [setting.key]);\n      RollRequestsMenu.refreshIfOpen();\n    }else if(setting.key === `core.uiConfig`){\n      SettingsUtil.updateColorScheme();\n      RollRequestsMenu.refreshIfOpen();\n    }\n  }\n\n  static _onSceneUpdate(scene, changes, options, userId) {\n    if (changes.active === true) {\n      LogUtil.log('HooksUtil._onSceneUpdate - Re-rendering roll requests menu due to active scene change');\n      RollRequestsMenu.refreshIfOpen();\n    }\n  }\n\n  static _onActorUpdate(actor, changes, options, userId) {\n    LogUtil.log(\"HooksUtil._onActorUpdate\", [actor, changes]);\n    const ownershipChanged = changes['==ownership'] !== undefined;\n    const statsChanged = changes.system?.attributes?.hp || \n                        changes.system?.attributes?.ac || \n                        changes.system?.attributes?.spell?.dc ||\n                        changes.system?.skills?.prc ||\n                        changes.system?.abilities ||\n                        changes.system?.attributes?.prof;\n\n    if (!statsChanged && !ownershipChanged) return;\n    \n    LogUtil.log(\"HooksUtil._onActorUpdate - Re-rendering roll requests menu due to actor update\", [actor, changes]);\n    RollRequestsMenu.refreshIfOpen();\n  }\n\n  /**\n   * Handle render ApplicationV2\n   */\n  static _onRenderApplicationV2(app, html, options) {\n    LogUtil.log(\"_onRenderApplicationV2\", [app, html, options]);\n  }\n  \n  /**\n   * Handle render Sidebar\n   */\n  static _onRenderSidebar(app, html, options) {\n    LogUtil.log(\"_onRenderSidebar\", [app, html]);\n    if(game.ready){\n      SidebarUtil.addSidebarControls(app, html);\n    }\n  }\n  \n  /**\n   * Register a hook and track it\n   * @param {string} hookName - The hook name\n   * @param {Function} handler - The handler function\n   * @private\n   */\n  static _registerHook(hookName, handler) {\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.set(`${hookName}_${hookId}`, hookId);\n    return hookId;\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterAll() {\n    this.registeredHooks.forEach((hookId, key) => {\n      const hookName = key.split('_')[0];\n      Hooks.off(hookName, hookId);\n    });\n    this.registeredHooks.clear();\n  }\n  \n  /**\n   * Check if a hook is registered\n   * @param {string} hookName - The hook name to check\n   * @returns {boolean}\n   */\n  static isRegistered(hookName) {\n    for (const key of this.registeredHooks.keys()) {\n      if (key.startsWith(`${hookName}_`)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Triggered before a roll is made\n   * @param {*} config \n   * @param {*} dialogOptions \n   * @param {*} messageOptions \n   */\n  static _onPreRoll(config, dialogOptions, messageOptions, d) {\n    LogUtil.log(\"_onPreRoll #0\", [config, dialogOptions, messageOptions, d]);\n    \n  }\n  \n  /**\n   * Actor5e.rollHitDie concatenates our roll data with its own roll data, creating two rolls.\n   * We fix this behavior here so situational bonus is added correctly without duplicating rolls\n   */\n  static _onPreRollHitDieV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollHitDieV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    if (config.rolls && config.rolls.length > 1) {\n      const allSituationalBonuses = [];\n      \n      for(let i = 0; i < config.rolls.length; i++){\n        const roll = config.rolls[i];\n        if (roll && roll.data && roll.data.situational) {\n          allSituationalBonuses.push(roll.data.situational);\n        }\n      }\n      \n      if (allSituationalBonuses.length > 0) {\n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        \n        const uniqueBonuses = [...new Set(allSituationalBonuses)];\n        \n        config.rolls[0].data.situational = uniqueBonuses.map(bonus => {\n          const trimmedBonus = bonus.toString().trim();\n          if (trimmedBonus.startsWith('-')) {\n            return `(${trimmedBonus})`;\n          } else if (trimmedBonus.startsWith('+')) {\n            return `${trimmedBonus.substring(1)}`;\n          } else {\n            return `${trimmedBonus}`;\n          }\n        }).join(' + ');\n        \n        if(game.user.isGM && !config.rolls[0].parts.find(p => p.includes(\"@situational\"))){\n          config.rolls[0].parts.push(\"@situational\");\n        }\n      }\n      \n      config.rolls = config.rolls.slice(0, 1);\n      LogUtil.log(\"Cleaned up hit die rolls\", config.rolls);\n    }\n  }\n  \n  /**\n   * Handle pre-roll initiative dialog hook to add situational bonus\n   */\n  static _onPreRollInitiativeDialog(config, dialogOptions, messageOptions) {\n    const actor = config.subject;\n    const storedConfig = actor.getFlag(MODULE_ID, 'tempInitiativeConfig');\n\n    LogUtil.log(\"_onPreRollInitiativeDialog triggered\", [config, storedConfig, dialogOptions, messageOptions]);\n    config.advantage = storedConfig?.advantage || config.advantage || false;\n    config.disadvantage = storedConfig?.disadvantage || config.disadvantage || false;\n    \n    config.rollMode = storedConfig?.rollMode || config.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n    messageOptions.rollMode = storedConfig?.rollMode || messageOptions.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n    \n    if (storedConfig.rolls?.[0]?.data?.situational && config.rolls?.[0]?.data) {\n      config.rolls[0].data.situational = storedConfig.rolls[0].data.situational;\n    }\n  \n  }\n  \n  /**\n   * Handle pre-roll attack hook to restore GM-configured options\n   */\n  static _onPreRollAttackV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollAttackV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    const stored = config.subject?.item?.getFlag(MODULE_ID, 'tempAttackConfig');\n    if (stored) {\n      LogUtil.log(\"_onPreRollAttackV2 - Found stored request config from flag\", [stored]);\n      \n      if(stored.isRollRequest === false || stored.skipRollDialog === true || stored.sendRequest === false) {\n        LogUtil.log(\"_onPreRollAttackV2 - Not a roll request, skipping\", [stored]);\n        return;\n      }\n\n      if (stored.attackMode) config.attackMode = stored.attackMode;\n      if (stored.ammunition) config.ammunition = stored.ammunition;\n      if (stored.mastery !== undefined) config.mastery = stored.mastery;\n      config.advantage = stored.advantage || false;\n      config.disadvantage = stored.disadvantage || false;\n      messageOptions.rollMode = stored.rollMode || messageOptions.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n      \n      if (stored.situational) {\n        if (!config.rolls || config.rolls.length === 0) {\n          config.rolls = [{\n            parts: [],\n            data: {},\n            options: {}\n          }];\n        }\n        \n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        config.rolls[0].data.situational = stored.situational;\n      }\n      LogUtil.log(\"_onPreRollAttackV2 - Applied stored configuration to attack roll\", [config, messageOptions]);\n    }\n  }\n\n  /**\n   * Handle pre-roll damage hook to restore GM-configured options\n   */\n  static _onPreRollDamageV2(config, dialogOptions, messageOptions) {\n    // console.trace(\"Flash Rolls 5e - _onPreRollDamageV2 triggered #0\", [config]);\n    const stored = config.subject?.item?.getFlag(MODULE_ID, 'tempDamageConfig');\n    LogUtil.log(\"_onPreRollDamageV2 triggered #0\", [config, dialogOptions, messageOptions]);\n    \n    if(config.midiOptions && !game.user.isGM\n      && config.subject?.type === ACTIVITY_TYPES.DAMAGE\n    ){\n      dialogOptions.configure = true;\n      // config.midiOptions = {\n      //   ...config.midiOptions,\n      //   fastForwardDamage: false,\n      //   workflowOptions: {\n      //     ...config.midiOptions.workflowOptions,\n      //     fastForwardDamage: false,\n      //     autoRollAttack: false,\n      //     autoRollDamage: false,\n      //     forceCompletion: false\n      //   }\n      // }\n    }\n    if (stored) {\n      LogUtil.log(\"_onPreRollDamageV2 - Found stored request config from flag\", [stored, stored.situational]);\n      \n      if(stored.isRollRequest === false || stored.skipRollDialog === true || stored.sendRequest === false) {\n        LogUtil.log(\"_onPreRollDamageV2 - Not a roll request, skipping\", [stored]);\n        return;\n      }\n      \n      LogUtil.log(\"_onPreRollDamageV2 triggered #1\", [config, dialogOptions, messageOptions]);\n\n      if (stored.critical) config.critical = stored.critical;\n      messageOptions.rollMode = stored.rollMode || messageOptions.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n      \n      if (stored.situational) {\n        if (!config.rolls || config.rolls.length === 0) {\n          config.rolls = [{\n            parts: [],\n            data: {},\n            options: {}\n          }];\n        }\n        \n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        config.rolls[0].data.situational = stored.situational;\n        \n        // Store the situational for the render hook to handle\n        config._flashRollsSituational = stored.situational;\n      }\n      LogUtil.log(\"_onPreRollDamageV2 - Applied stored configuration to damage roll\", [config, messageOptions]);\n    }\n  }\n  \n  /**\n   * Handle pre-use activity hook to prevent usage messages when GM intercepts rolls\n   */\n  static _onPreUseActivity(activity, config, dialog, message) {\n    // console.trace(\"Flash Rolls 5e - _onPreUseActivity triggered #0\", [activity, config, dialog, message]);\n    LogUtil.log(\"_onPreUseActivity #0\", [activity, config, dialog, message]);   \n    const SETTINGS = getSettings();\n    const requestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    if (!requestsEnabled || !rollInterceptionEnabled) return;  \n    activity.item.unsetFlag(MODULE_ID, 'tempAttackConfig'); \n    activity.item.unsetFlag(MODULE_ID, 'tempDamageConfig'); \n    activity.item.unsetFlag(MODULE_ID, 'tempSaveConfig'); \n\n    const actor = activity.actor;\n    if (!actor) return;\n    LogUtil.log(\"_onPreUseActivity #1\", [activity, config, dialog, message]);\n    // if(GeneralUtil.isModuleOn(MODULE_ID, 'midi-qol')){\n    //   // message.create = false;\n    // }\n\n    const consumptionConfigMode = SettingsUtil.get(SETTINGS.consumptionConfigMode.tag);\n    // LogUtil.log(\"_onPreUseActivity - Settings\", [consumptionConfigMode, requestsEnabled, rollInterceptionEnabled]);\n    LogUtil.log(\"_onPreUseActivity #2\", [activity, config, dialog, message]);\n\n    switch (consumptionConfigMode) {\n      case 1:\n        dialog.configure = false;\n        break;\n      case 2:\n        dialog.configure = game.user.isGM;\n        break;\n      case 3:\n        dialog.configure = !game.user.isGM;\n        break;\n      default:\n        dialog.configure = true;\n        break;\n    }\n\n    if(game.user.isGM){\n      config.consume = {\n        action: false,\n        resources: [],\n        spellSlot: false\n      }\n    }\n    if(config.midiOptions && \n      (activity.type === ACTIVITY_TYPES.DAMAGE || activity.type === ACTIVITY_TYPES.SAVE)){\n      dialog.configure = false;\n      activity.midiOptions = {\n        ...config.midiOptions,\n        fastForwardDamage: false,\n        workflowOptions: {\n          // ...activity.midiOptions.workflowOptions,\n          fastForwardDamage: false,\n          autoRollAttack: false,\n          autoRollDamage: false,\n          forceCompletion: false\n        }\n      }\n      config.midiOptions = {\n        ...config.midiOptions,\n        fastForwardDamage: false,\n        workflowOptions: {\n          ...config.midiOptions.workflowOptions,\n          fastForwardDamage: false,\n          autoRollAttack: false,\n          autoRollDamage: false\n        }\n      }\n      // return false;\n      LogUtil.log(\"_onPreUseActivity - activity\", [activity]);\n    }\n\n    if(!game.user.isGM) return;\n    \n    const actorOwner = GeneralUtil.getActorOwner(actor);\n    \n    if (actorOwner && actorOwner.active && !actorOwner.isGM) {\n      LogUtil.log(\"Preventing usage message for player-owned actor\", [actor.name]);\n      message.create = false;\n    }\n  }\n\n  static _onPostUseActivity(activity, config, dialog, message) {\n    const SETTINGS = getSettings();\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n    const requestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    const isGM = game.user.isGM;\n\n    LogUtil.log(\"_onPostUseActivity #0\", [activity, config, dialog, message]);\n\n    if(!game.user.isGM && config.midiOptions){\n      config.midiOptions = {\n        ...config.midiOptions,\n        fastForwardDamage: false,\n        workflowOptions: {\n          ...config.midiOptions.workflowOptions,\n          fastForwardDamage: false,\n          autoRollAttack: false,\n          autoRollDamage: false,\n          forceCompletion: false\n        }\n      }\n    }\n\n    if(!requestsEnabled || !rollInterceptionEnabled) return;\n    const actorOwner = GeneralUtil.getActorOwner(activity.actor);\n    if (!actorOwner?.active || actorOwner.isGM) {\n      LogUtil.log(\"Preventing usage message - no owning player for actor\", [activity.actor]);\n      return;\n    }\n    \n    if(game.user.isGM && (activity.type === ACTIVITY_TYPES.SAVE || activity.type === ACTIVITY_TYPES.DAMAGE)){ \n      const isOwnerActive = actorOwner && actorOwner.active && !actorOwner.isGM;\n      config.scaling = true;\n    }\n\n      // LogUtil.log(\"_onPostUseActivity #1\", [activity, config]);\n      // if(activity.damage?.parts?.length > 0){\n      //   LogUtil.log(\"_onPostUseActivity #2 - roll triggered\", [activity, config]);\n      //   activity.rollDamage(config, {\n      //     ...dialog,\n      //     configure: !game.user.isGM || (isOwnerActive && !skipRollDialog)\n      //   }, message)\n      // }\n  }\n  \n  /**\n   * Handle rendering of skill/tool configuration dialog to fix message flavor\n   */\n  static _onRenderSkillToolDialog(app, html, data) {\n    LogUtil.log(\"_onRenderSkillToolDialog triggered\", [app]);\n    if (app._abilityFlavorFixed) return;\n    \n    const abilitySelect = html.querySelector('select[name=\"ability\"]');\n    if (!abilitySelect) return;\n    \n    if (app.config?.isRollRequest && app.config?.ability) {\n      const selectedAbility = abilitySelect.value;\n      const configAbility = app.config.ability;\n\n      if (selectedAbility === configAbility) {\n        app._abilityFlavorFixed = true;\n        \n        setTimeout(() => {\n          const changeEvent = new Event('change', {\n            bubbles: true,\n            cancelable: true\n          });\n          abilitySelect.dispatchEvent(changeEvent);\n        }, 50);\n      }\n    }\n  }\n\n  /**\n   * TEMPLATES\n   */\n  static onRefreshTemplate(template, options) {\n    if(!template.isOwner){ return; }\n    const throttleKey = `refresh-template-${template.id}`;\n    const SETTINGS = getSettings();\n    const targettingSetting = SettingsUtil.get(SETTINGS.templateAutoTarget.tag);\n    \n    if (HooksUtil.throttleTimers[throttleKey]) {\n      clearTimeout(HooksUtil.throttleTimers[throttleKey]);\n    }\n\n    HooksUtil.throttleTimers[throttleKey] = setTimeout(() => {\n      let maxDisposition = 3;\n\n      switch(targettingSetting){\n        case 1:\n          maxDisposition = 3; break;\n        case 2: \n          maxDisposition = 0; break;\n        default: \n          return;\n      }\n\n      game.user.targets.forEach(t => t.setTarget(false, { releaseOthers: false }));\n      \n      const tokensToTarget = [];\n      for(let token of canvas.tokens.placeables){\n        if(token.document.disposition <= maxDisposition && template.shape.contains(token.center.x-template.x,token.center.y-template.y)){\n          tokensToTarget.push(token);\n        }\n      }\n      \n      tokensToTarget.forEach((token, i) => {\n        token.setTarget(true, { \n          releaseOthers: i === 0,  // Only release others on first token\n          groupSelection: true \n        });\n      });\n      \n      if (tokensToTarget.length > 0) {\n        game.user.broadcastActivity({ targets: game.user.targets.ids });\n      }\n      \n      delete HooksUtil.throttleTimers[throttleKey];\n    }, 50);\n  }\n}","import { MODULE_ID, ROLL_TYPES } from \"../constants/General.mjs\";\nimport { getRollTypeDisplay, applyTargetTokens, NotificationManager } from \"./helpers/Helpers.mjs\";\nimport { RollHandlers } from \"./RollHandlers.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { GeneralUtil } from \"./helpers/GeneralUtil.mjs\";\n\n/**\n * @typedef {Object} RollRequestData\n * @property {string} type - \"rollRequest\"\n * @property {string} requestId - Unique identifier for this request\n * @property {string} actorId - ID of the actor to roll for\n * @property {string} rollType - Type of roll (ability, save, skill, etc.) from ROLL_TYPES\n * @property {string} rollKey - Specific roll key (e.g., \"str\", \"acr\", \"perception\")\n * @property {string|null} activityId - Activity ID for item-based rolls\n * @property {BasicRollProcessConfiguration} rollProcessConfig - D&D5e roll process configuration\n * @property {boolean} skipRollDialog - Whether to skip the roll configuration dialog\n * @property {string[]} targetTokenIds - Array of targeted token IDs\n * @property {boolean} preserveTargets - Whether to apply GM's targets to the player\n */\n\n/**\n * Utility class for handling roll requests from GM to players\n */\nexport class RollRequestUtil {\n  /**\n   * Queue for managing roll requests per user\n   * @type {Array<{actor: Actor, requestData: RollRequestData}>}\n   */\n  static rollQueue = [];\n  \n  /**\n   * Flag indicating if a roll dialog is currently active\n   * @type {boolean}\n   */\n  static isProcessingRoll = false;\n  \n  /**\n   * Handle roll request from GM on player side\n   * @param {RollRequestData} requestData - The roll request data\n   */\n  static async handleRequest(requestData) {\n    const isMidiRequest = GeneralUtil.isModuleOn(MODULE_ID, 'midi-qol');\n    LogUtil.log('handleRequest', [requestData]);\n    if (game.user.isGM) return;\n    \n    let actor;\n    if (requestData.isTokenActor) {\n      const tokenDoc = game.scenes.active?.tokens.get(requestData.actorId);\n      actor = tokenDoc?.actor;\n      if (!actor) {\n        LogUtil.warn('Token actor not found:', requestData.actorId);\n        return;\n      }\n    } else {\n      actor = game.actors.get(requestData.actorId);\n    }\n    \n    if (!actor || !actor.isOwner) {\n      return;\n    }\n    \n    if (requestData.preserveTargets && \n      requestData.targetTokenIds?.length > 0 \n      // && game.user.targets.size === 0\n    ) {\n      LogUtil.log('handleRequest - applyTargetTokens', [requestData]);\n      applyTargetTokens(requestData.targetTokenIds);\n    }\n\n    if(isMidiRequest && requestData.rollProcessConfig.midiOptions){\n      requestData.rollProcessConfig.midiOptions = {\n        ...requestData.rollProcessConfig.midiOptions,\n        fastForward: false,\n        fastForwardAttack: false,\n        dialogOptions: {\n          ...requestData.rollProcessConfig.midiOptions.dialogOptions,\n          fastForward: false,\n          fastForwardAttack: false,\n        },\n        workflowOptions: {\n          ...requestData.rollProcessConfig.midiOptions.workflowOptions,\n          fastForward: false,\n          fastForwardAttack: false,\n        }\n      };\n    }\n    \n    NotificationManager.notify('info', '', {\n      batch: true,\n      batchData: {\n        actor: actor.name,\n        rollType: requestData.rollType,\n        rollKey: requestData.rollKey,\n        gm: requestData.rollProcessConfig._requestedBy || 'GM'\n      }\n    });\n    \n    this.rollQueue.push({ actor, requestData });\n    LogUtil.log('handleRequest - Added to queue', [this.rollQueue.length, this.isProcessingRoll]);\n    \n    if (!this.isProcessingRoll) {\n      this.processNextRoll();\n    }\n  }\n  \n  /**\n   * Process the next roll in the queue\n   */\n  static async processNextRoll() {\n    if (this.rollQueue.length === 0) {\n      this.isProcessingRoll = false;\n      return;\n    }\n    \n    this.isProcessingRoll = true;\n    const { actor, requestData } = this.rollQueue.shift();\n    \n    LogUtil.log('processNextRoll - Processing', [actor.name, this.rollQueue.length, 'remaining']);\n    \n    try {\n      await this.executePlayerRollRequest(actor, requestData);\n    } catch (error) {\n      LogUtil.error('Error processing roll request:', [error]);\n    }\n    \n    setTimeout(() => {\n      this.processNextRoll();\n    }, 500);\n  }\n  \n  /**\n   * Execute a roll request received by a player\n   * @param {Actor} actor - The actor performing the roll\n   * @param {RollRequestData} requestData - The roll request data from GM\n   */\n  static async executePlayerRollRequest(actor, requestData) {\n    const SETTINGS = getSettings();\n    const publicPlayerRolls = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag);\n\n    LogUtil.log('executePlayerRollRequest', [actor, requestData]);\n    LogUtil.log('executePlayerRollRequest - groupRollId check', [requestData.groupRollId, typeof requestData.groupRollId]);\n    \n    try {\n      const normalizedRollType = requestData.rollType?.toLowerCase();\n      const rollConfig = requestData.rollProcessConfig.rolls?.[0] || {\n        parts: [],\n        data: {},\n        options: {}\n      };\n      \n      const shouldSkipDialog = game.user.isGM ? requestData.skipRollDialog : false;\n      const dialogConfig = {\n        configure: !shouldSkipDialog\n      };\n      \n      const rollModeFromGM = requestData.rollProcessConfig.rollMode;\n      const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n      const finalRollMode = rollModeFromGM || defaultRollMode;\n      \n      const messageConfig = {\n        rollMode: finalRollMode,\n        create: requestData.rollProcessConfig.chatMessage !== false\n      };\n      \n      const handlerRequestData = {\n        rollKey: requestData.rollKey,\n        activityId: requestData.activityId, \n        config: requestData.rollProcessConfig,\n        groupRollId: requestData.groupRollId \n      };\n\n      const handler = RollHandlers[normalizedRollType];\n      if (handler) {\n        await handler(actor, handlerRequestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        LogUtil.warn(`No handler found for roll type: ${normalizedRollType}`);\n        NotificationManager.notify('warn', game.i18n.format('FLASH_ROLLS.notifications.rollError', { \n          actor: actor.name || 'Unknown Actor'\n        }));\n      }\n    } catch (error) {\n      LogUtil.error('Error executing roll request:', [error]);\n      NotificationManager.notify('error', game.i18n.format('FLASH_ROLLS.notifications.rollError', { \n        actor: actor.name || 'Unknown Actor'\n      }));\n    }\n  }\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SOCKET_CALLS } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { HooksUtil } from \"./HooksUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { RollRequestUtil } from \"./RollRequestUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { HOOKS_CORE } from \"../constants/Hooks.mjs\";\nimport { ActorDirectoryIconUtil } from \"./utils/ActorDirectoryIconUtil.mjs\";\n\n/**\n * @typedef {import(\"./RollRequestUtil.mjs\").RollRequestData} RollRequestData\n */\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    SocketUtil.initialize(Main.registerSocketCalls);\n    HooksUtil.initialize();\n  }\n\n  // Wrapper methods for socket calls to DiceConfigUtil\n  static getDiceConfig() {\n    return DiceConfigUtil.getDiceConfig();\n  }\n  \n  static receiveDiceConfig(userId, diceConfig) {\n    DiceConfigUtil.receiveDiceConfig(userId, diceConfig);\n  }\n\n  /**\n   * Handle roll request from GM on player side\n   * @param {RollRequestData} requestData - The roll request data\n   */\n  static async handleRollRequest(requestData) {\n    LogUtil.log('Main.handleRollRequest', requestData);\n    return RollRequestUtil.handleRequest(requestData);\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.handleRollRequest, Main.handleRollRequest);\n  }\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\nimport \"./styles/chat-messages.css\";\nimport \"./styles/flash-rolls-menu.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\n// Initialize the module\nMain.init();\n"],"names":["SETTING_INPUT","SETTING_SCOPE","getSettings","MODULE_ID","DEBUG_TAG","SOCKET_CALLS","ACTIVITY_TYPES","ROLL_TYPES","ROLL_REQUEST_OPTIONS","MODULE","HOOKS_CORE","HOOKS_SOCKET","HOOKS_MIDI_QOL","HOOKS_DND5E","_LogUtil","ref","data","bypassSettings","debugSetting","dataArray","strRef","options","_a","__publicField","LogUtil","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","name","func","value","callback","handler","parameters","userId","executionKey","resp","error","SocketUtil","DiceConfigUtil","clientSettings","diceConfig","_b","user","_GeneralUtil_static","parseCSS_fn","GeneralUtil","moduleName","module","parent","selector","element","delay","varName","varValue","bodyStyle","body","existingStyle","cssText","ruleStart","ruleEnd","declarations","decl","varsMap","parts","newRuleContent","newCss","offsetTop","elementHeight","foundryFonts","customFontsObj","customFonts","fontFamily","cssImportedFonts","f","b","content","id","checkForDuplicates","customStyle","importRegex","imports","contentWithoutImports","match","currentContent","existingImports","currentMatch","currentContentWithoutImports","newImports","imp","allImports","to","direction","duration","onComplete","animationId","isHorizontal","start","change","startTime","animateScroll","currentTime","elapsedTime","progress","easeProgress","newAnimationId","title","dialogConfig","templatePath","templatePaths","cssString","trimmedCSS","style","testCSS","isValid","cssRules","targetSelectors","parsedCSS","__privateMethod","mainStyle","processedRules","rulesByContent","rule","pseudoSelector","combinedSelectors","s","selectors","targetList","nestedSelector","targetSelector","actor","ownership","level","item","SETTINGS","removeTemplateSettingOn","SettingsUtil","templates","mt","css","baseProperties","nestedRules","lines","currentNested","braceCount","i","line","openBraces","closeBraces","contentAfterBrace","__privateAdd","fontName","cleanName","FormDataExtended","ApplicationV2","HandlebarsApplicationMixin","_element","_activeTab","_requireReload","_ModuleSettingsMenu_static","onSubmit_fn","onReset_fn","getTabs_fn","_ModuleSettingsMenu","context","__privateSet","__privateGet","toggle","p","select","currentValue","option","restrictedTabs","tab","partId","_c","partContext","getSettingMenus","partKey","menuContext","menuKey","fieldNames","fields","fieldValues","fieldDefaults","fieldName","entry","index","formData","confirmReload","activeTab","settings","currSetting","group","event","form","a","activeContent","defaults","inputField","tabList","key","ModuleSettingsMenu","PatreonSupport","args","ModuleHelpers","moduleId","ActivityUtil","rollType","activities","attackActivities","damageAttackActivities","damageActivities","saveActivities","itemSaveActivities","activityType","itemId","activityId","config","_d","_e","_f","_g","_h","isMidiActive","activity","damageConfig","normalizedRollType","rollRequestConfig","damageHandledByUse","MidiQOL","workflow","damageRoll","formulas","part","defaultOptions","SidebarUtil","app","html","chatControls","rollRequestsEnabled","rollRequestIcon","firstChatControlIcon","RollRequestsMenu","enabled","icon","getRollTypeDisplay","rollKey","display","toolData","toolItem","showBatchedNotifications","pendingNotifications","getRollTypeDisplayFn","notificationsByType","notif","entries","messages","rollTypeDisplay","actorNames","getPlayerOwner","applyTargetTokens","tokenIds","t","token","isPlayerOwned","hasTokenInScene","currentScene","updateCanvasTokenSelection","actorId","selected","tokenId","tokens","specificToken","ms","resolve","isSidebarExpanded","updateSidebarClass","isExpanded","adjustMenuOffset","buildRollTypes","selectedRequestType","selectedActors","rollTypes","selectedOption","configData","label","_NotificationManager","type","message","requestsByPlayer","rollTypeName","successfulRequests","playerData","playerSummaries","playerId","NotificationManager","filterActorsForDeathSaves","actors","actorsNeedingDeathSaves","actorsSkippingDeathSaves","hp","deathSaves","successes","failures","categorizeActorsByOwnership","pcActors","npcActors","owner","rollPrivacyVertical","controlsWidth","isCrlngnUIOn","getActorData","uniqueId","tokenDoc","RollHelpers","situational","requestData","rollConfig","additionalConfig","normalizedType","rollMode","DialogClass","messageConfig","dialogOptions","firstRoll","advantage","disadvantage","target","rollProcessConfig","isPublicRollsOn","messageRollMode","playerOwner","rollResults","dc","halfThreshold","sum","acc","average","highestModifier","leaderActorId","leaderModifier","modifier","leaderResult","otherResults","adjustedResult","lowestModifier","weakestActorId","weakestModifierValue","weakestResult","successWord","tool","resultMode","calculationResult","CustomRollDialog","htmlElement","formulaInput","validationMessage","messageElement","die","currentFormula","diceRegex","diceMap","remainingFormula","count","dieType","newDieType","diceParts","formula","dialog","ChatMessageUtils","attachGroupRollListeners","actorResult","diceBtn","dataset","groupRollId","RollHandlers","rollMethod","dcControl","dcInput","showToPlayers","groupFooterDetails","debounceTimer","handleDCChange","newDC","messageId","targetMessage","e","actorEntries","validEntries","flavor","results","supportsDC","showDCToPlayers","abilityLabel","saveLabel","skillLabel","skillAbility","skillAbilityLabel","toolLabel","toolAbility","toolAbilityLabel","messageData","msg","nextUpdate","pendingData","flagData","resultIndex","speakerActorId","rollBreakdown","groupResult","newContent","groupMessage","m","msgId","requestId","groupRollsMsgEnabled","fiveMinutesAgo","defaultAbility","toolConfig","tokenActor","initiativeConfig","tempConfig","rollOptions","processConfig","activityConfig","confirmedFormula","updateResult","itemUpdateResult","ensureCombatForInitiative","filterActorsForInitiative","actorIds","game","actorsNamesWithInitiative","actorIdsWithInitiative","c","combatants","filteredIds","RollMenuActorUtil","system","stats","spellDC","hpPercent","hpColor","selectedActorIds","currentTab","isPC","isNPC","GMRollConfigMixin","Base","abilityFromForm","dcFromForm","idx","dcValue","formConfig","sendRequestCheckbox","action","finalizedRolls","GMRollConfigDialog","configSection","templateData","template","wrapper","button","_i","showDC","rollClass","finalTitle","selectedAbilityLabel","_j","_k","_l","_m","skill","saveAbility","checkAbility","toolDefaultAbility","GMHitDieConfigDialog","GMSkillToolConfigDialog","skillConfig","GMDamageConfigDialog","buttonGroup","originalConfig","originalDialog","position","finalRollMode","GMAttackConfigDialog","RollMenuConfigUtil","rollMethodName","skipRollDialog","RollMenuDragUtil","menu","dragHandle","menuRect","startX","startY","initialLeft","initialTop","dragData","handleMove","handleUp","deltaX","deltaY","remInPixels","moveHandler","upHandler","snapInfo","chatNotifications","lightningBolt","boltRect","horizontalDistance","verticalDistance","currentTop","menuSize","ActorStatusUtil","actorDoc","isFavorite","isBlocked","makeFavorite","makeBlocked","li","ActorDragUtil","actorElement","menuContainer","rect","dragImage","ActorDropUtil","dropZone","targetTab","jsonData","parsed","textData","_instance","_refreshDebounceTimer","_REFRESH_DEBOUNCE_DELAY","_RollRequestsMenu","createActorData","actorForStats","hpData","showOnlyPCsWithToken","tokensInScene","actorData","currentActors","selectAllOn","requestTypes","requestType","preparedContext","frame","customPosition","zone","optionsToggle","optionsElement","controlled","previousSelection","allActorIds","changes","uid","searchInput","accordion","requestTypesContainer","requestHeader","requestItem","customEvent","subItem","skip","isEnabled","selectAll","lockIcon","optionsToggleContainer","canDrop","controlledTokens","wrapperElement","checkbox","isSelected","hasSelection","hasPlayerCharacter","hitDieItem","selectAllCheckbox","checkboxes","checkedCount","cb","searchTerm","requestName","subItems","hasVisibleSubItems","isVisible","categoryMatches","shouldShowCategory","nestedList","accordionToggle","rollOption","actorsData","offlinePlayerActors","onlinePlayerActors","allActorEntries","allActors","allActorsForHitDie","useGroupId","currentRollKey","gmRolledActors","gmActorIds","gmActorEntries","actorsToRefill","actorsNeedingRefill","hdData","needsRefill","dialogResult","hitDieResult","baseActorError","selectedUniqueIds","actorsWithoutTokens","actorsWithTokens","entriesWithTokens","uniqueActorIds","filteredActorIds","filteredActorsData","suppressNotification","cleanConfig","rollTypeKey","normalizedRollTypeKey","wasControlled","actualRollKey","immediate","_SettingsUtil","isDebugOn","setting","settingObj","settingMenus","menuData","menuObj","foundryUiConfig","settingName","selectedSetting","newValue","requestsIcon","isCompactMode","RollInterceptor","hookName","hookId","hookNames","isInitiativeRoll","moduleFlags","finalConfig","_n","handlerMap","ActorDirectoryIconUtil","actorDirectory","flagChanges","existingIcon","_HooksUtil","contextOptions","chatMessage","requestedBy","requestedText","currentFlavor","speaker","baseActorId","checkIds","storedGroupRollId","baseActor","storedInitConfig","rollData","situationalInput","situationalInputs","input","targets","scene","ownershipChanged","messageOptions","d","allSituationalBonuses","uniqueBonuses","bonus","trimmedBonus","storedConfig","stored","requestsEnabled","rollInterceptionEnabled","consumptionConfigMode","actorOwner","abilitySelect","selectedAbility","configAbility","changeEvent","throttleKey","targettingSetting","maxDisposition","tokensToTarget","HooksUtil","RollRequestUtil","isMidiRequest","rollModeFromGM","defaultRollMode","handlerRequestData","Main"],"mappings":"uiBAAO,MAAMA,EAAgB,CAC3B,OAAQ,SACR,SAAU,UACZ,EACaC,EAAgB,CAC3B,OAAQ,SACR,MAAO,OACT,EAMaC,EAAc,KAClB,CACL,gBAAiB,CACf,IAAK,2BACL,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,KAAM,KAAK,KAAK,SAAS,8CAA8C,EACvE,SAAU,OACV,OAAQ,CACN,iBACA,0BACA,oBACA,qBACA,iBACA,wBACA,2BACA,0BACA,uBACA,cACA,mBACD,EACD,QAAS,CACP,eAAgB,GAChB,wBAAyB,GACzB,kBAAmB,GACnB,mBAAoB,EACpB,eAAgB,GAChB,sBAAuB,EACvB,yBAA0B,GAC1B,wBAAyB,GACzB,qBAAsB,GACtB,YAAa,GACb,kBAAmB,EACpB,EACD,MAAOD,EAAc,MACrB,OAAQ,GACR,eAAgB,EACjB,EAED,mBAAoB,CAClB,IAAK,+BACL,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,KAAM,KAAK,KAAK,SAAS,8CAA8C,EACvE,SAAU,OACV,OAAQ,CACN,uBACA,sBACA,sBACD,EACD,QAAS,CACP,qBAAsB,GACtB,oBAAqB,EACrB,qBAAsB,EACvB,EACD,MAAOA,EAAc,MACrB,OAAQ,GACR,eAAgB,EACjB,EAED,qBAAsB,CACpB,IAAK,2BACL,MAAO,KAAK,KAAK,SAAS,iDAAiD,EAC3E,KAAM,KAAK,KAAK,SAAS,gDAAgD,EACzE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,oBAAqB,CACnB,IAAK,wBACL,MAAO,KAAK,KAAK,SAAS,gDAAgD,EAC1E,KAAM,KAAK,KAAK,SAAS,+CAA+C,EACxE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,qBAAsB,CACpB,IAAK,qBACL,MAAO,KAAK,KAAK,SAAS,iDAAiD,EAC3E,KAAM,KAAK,KAAK,SAAS,gDAAgD,EACzE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,oBAAqB,CACnB,IAAK,yBACL,MAAO,KAAK,KAAK,SAAS,gDAAgD,EAC1E,KAAM,KAAK,KAAK,SAAS,+CAA+C,EACxE,SAAU,OACV,UAAWD,EAAc,OACzB,QAAS,CACP,EAAG,KAAK,KAAK,SAAS,oDAAoD,EAC1E,EAAG,KAAK,KAAK,SAAS,oDAAoD,EAC1E,EAAG,KAAK,KAAK,SAAS,oDAAoD,EAC1E,EAAG,KAAK,KAAK,SAAS,oDAAoD,CAC3E,EACD,QAAS,EACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,sBAAuB,CACrB,IAAK,0BACL,MAAO,KAAK,KAAK,SAAS,kDAAkD,EAC5E,KAAM,KAAK,KAAK,SAAS,iDAAiD,EAC1E,SAAU,OACV,UAAWD,EAAc,OACzB,QAAS,CACP,EAAG,KAAK,KAAK,SAAS,sDAAsD,EAC5E,EAAG,KAAK,KAAK,SAAS,sDAAsD,EAC5E,EAAG,KAAK,KAAK,SAAS,sDAAsD,EAC5E,EAAG,KAAK,KAAK,SAAS,sDAAsD,CAC7E,EACD,QAAS,EACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,eAAgB,CACd,IAAK,mBACL,MAAO,KAAK,KAAK,SAAS,2CAA2C,EACrE,KAAM,KAAK,KAAK,SAAS,0CAA0C,EACnE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,kBAAmB,CACjB,IAAK,uBACL,MAAO,KAAK,KAAK,SAAS,8CAA8C,EACxE,KAAM,KAAK,KAAK,SAAS,6CAA6C,EACtE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,wBAAyB,CACvB,IAAK,uBACL,MAAO,KAAK,KAAK,SAAS,oDAAoD,EAC9E,KAAM,KAAK,KAAK,SAAS,mDAAmD,EAC5E,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,kBAAmB,CACjB,IAAK,sBACL,MAAO,KAAK,KAAK,SAAS,8CAA8C,EACxE,KAAM,KAAK,KAAK,SAAS,6CAA6C,EACtE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,yBAA0B,CACxB,IAAK,6BACL,MAAO,KAAK,KAAK,SAAS,qDAAqD,EAC/E,KAAM,KAAK,KAAK,SAAS,oDAAoD,EAC7E,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,yBAA0B,CACxB,IAAK,6BACL,MAAO,KAAK,KAAK,SAAS,qDAAqD,EAC/E,KAAM,KAAK,KAAK,SAAS,oDAAoD,EAC7E,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,wBAAyB,CACvB,IAAK,6BACL,MAAO,KAAK,KAAK,SAAS,oDAAoD,EAC9E,KAAM,KAAK,KAAK,SAAS,mDAAmD,EAC5E,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,qBAAsB,CACpB,IAAK,2BACL,MAAO,KAAK,KAAK,SAAS,iDAAiD,EAC3E,KAAM,KAAK,KAAK,SAAS,gDAAgD,EACzE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,YAAa,CACX,IAAK,mBACL,MAAO,KAAK,KAAK,SAAS,wCAAwC,EAClE,KAAM,KAAK,KAAK,SAAS,uCAAuC,EAChE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,mBAAoB,CAClB,IAAK,uBACL,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,KAAM,KAAK,KAAK,SAAS,8CAA8C,EACvE,SAAU,OACV,QAAS,CACP,EAAG,KAAK,KAAK,SAAS,2DAA2D,EACjF,EAAG,KAAK,KAAK,SAAS,mEAAmE,EACzF,EAAG,KAAK,KAAK,SAAS,4DAA4D,CACnF,EACD,UAAWD,EAAc,OACzB,QAAS,EACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,eAAgB,CACd,IAAK,kBACL,MAAO,KAAK,KAAK,SAAS,2CAA2C,EACrE,KAAM,KAAK,KAAK,SAAS,0CAA0C,EACnE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,UAAW,CACT,IAAK,gBACL,MAAO,KAAK,KAAK,SAAS,sCAAsC,EAChE,KAAM,KAAK,KAAK,SAAS,qCAAqC,EAC9D,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,OACrB,OAAQ,EACT,EAED,eAAgB,CACd,IAAK,0BACL,MAAO,KAAK,KAAK,SAAS,2CAA2C,EACrE,KAAM,KAAK,KAAK,SAAS,0CAA0C,EACnE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACd,CACG,GCvRUE,EAAY,iBAOZC,GAAY,CACvB,mBACA,8CACA,GACF,EAEaC,GAAe,CAC1B,kBAAmB,oBACnB,cAAe,gBACf,kBAAmB,mBACrB,EAqBaC,GAAiB,CAI5B,OAAQ,SAKR,KAAM,MAIR,EAkBaC,EAAa,CACxB,QAAS,UACT,cAAe,eACf,OAAQ,SACR,cAAe,gBACf,OAAQ,SACR,WAAY,YACZ,QAAS,UACT,OAAQ,SACR,QAAS,UACT,QAAS,SACT,WAAY,aACZ,kBAAmB,mBACnB,UAAW,WACX,KAAM,OACN,aAAc,cACd,MAAO,QACP,KAAM,MACR,EAEaC,GAAuB,CAClC,cAAe,CAAE,KAAMD,EAAW,cAAe,MAAO,gBAAiB,QAAS,YAAa,UAAW,kBAAoB,EAC9H,aAAc,CAAE,KAAMA,EAAW,aAAc,MAAO,eAAgB,QAAS,YAAa,UAAW,kBAAoB,EAC3H,MAAO,CAAE,KAAMA,EAAW,MAAO,MAAO,cAAe,QAAS,SAAU,UAAW,eAAiB,EACtG,KAAM,CAAE,KAAMA,EAAW,KAAM,MAAO,aAAc,QAAS,QAAS,UAAW,cAAgB,EACjG,cAAe,CAAE,KAAMA,EAAW,cAAe,MAAO,sBAAuB,QAAS,KAAM,UAAW,EAAI,EAC7G,WAAY,CAAE,KAAMA,EAAW,WAAY,MAAO,kBAAmB,QAAS,KAAM,UAAW,EAAI,EACnG,WAAY,CAAE,KAAMA,EAAW,WAAY,MAAO,aAAc,QAAS,KAAM,UAAW,EAAI,EAE9F,QAAS,CAAE,KAAMA,EAAW,QAAS,MAAO,UAAW,QAAS,KAAM,UAAW,EAAI,EACrF,OAAQ,CAAE,KAAMA,EAAW,OAAQ,MAAO,cAAe,QAAS,KAAM,UAAW,EAAI,CACzF,EAOaE,EAAS,CACpB,GAAIN,EACJ,qBAAsBK,EACxB,EC9GaE,EAAa,CACxB,KAAM,OACN,MAAO,QACP,oBAAqB,wBACrB,gBAAiB,gBAGjB,mBAAoB,mBACpB,eAAgB,gBAEhB,aAAc,cAGd,eAAgB,gBAChB,wBAAyB,uBAGzB,kBAAmB,kBACnB,0BAA2B,0BAC3B,cAAe,eAEf,aAAc,cACd,aAAc,cACd,aAAc,cACd,YAAa,aACb,YAAa,aACb,YAAa,aACb,eAAgB,gBAChB,0BAA2B,yBAC3B,uBAAwB,sBAC1B,EAKaC,GAAe,CAC1B,MAAO,iBACT,EAKaC,GAAiB,CAC5B,MAAO,gBACT,EAKaC,EAAc,CAEzB,YAAa,kBAGb,iBAAkB,uBAClB,kBAAmB,wBAGnB,uBAAwB,8BACxB,sBAAuB,6BAmBvB,uBAAwB,2BAKxB,kBAAmB,uBACnB,iBAAkB,sBAKlB,oBAAqB,wBAWrB,2BAA4B,gCAE5B,oBAAqB,0BACrB,gBAAiB,uBAGjB,mBAAoB,wBAKpB,mBAAoB,wBAkBpB,iBAAkB,8BAClB,iCAAkC,gCAClC,8BAA+B,wCAEjC,ECpIaC,GAAN,MAAMA,EAAQ,CAUnB,OAAO,IAAIC,EAAI,GAAIC,EAAK,CAAE,EAAEC,EAAe,GAAO,CAChD,GAAI,CACF,MAAMC,EAAe,KAAK,SAAS,IAAIf,EAAW,eAAe,GAAKW,GAAQ,QAE9E,GAAG,EADmBG,GAAkBC,GACnB,OAGrB,MAAMC,EAAY,MAAM,QAAQH,CAAI,EAAIA,EAAO,CAACA,CAAI,EACpD,QAAQ,IAAI,GAAGZ,GAAWW,EAAK,GAAGI,CAAS,CAC5C,MAAU,CAET,GAAIF,GAAkBH,GAAQ,QAAS,CAErC,MAAMK,EAAY,MAAM,QAAQH,CAAI,EAAIA,EAAO,CAACA,CAAI,EACpD,QAAQ,IAAI,GAAGZ,GAAWW,EAAK,GAAGI,CAAS,CACnD,CACA,CACA,CAOE,OAAO,KAAKJ,EAAI,GAAIC,EAAK,CAAA,EAAI,CAE3B,MAAMG,EAAY,MAAM,QAAQH,CAAI,EAAIA,EAAO,CAACA,CAAI,EACpD,QAAQ,KAAK,GAAGZ,GAAWW,EAAK,GAAGI,CAAS,CAChD,CAYE,OAAO,MAAMC,EAAQJ,EAAK,CAAA,EAAIK,EAAU,CAAE,GAAI,GAAO,QAAS,GAAM,UAAW,EAAK,EAAI,CHxDnF,IAAAC,EG0DH,MAAMH,EAAY,MAAM,QAAQH,CAAI,EAAIA,EAAO,CAACA,CAAI,EAEjDK,EAAQ,MACTC,EAAA,GAAG,gBAAH,MAAAA,EAAkB,MAAMF,EAAQ,CAAE,SAAU,GAAM,UAAWC,EAAQ,aAEpEA,EAAQ,SAAS,QAAQ,MAAM,GAAGjB,GAAWgB,EAAQ,GAAGD,CAAS,CACxE,CACA,EAzDEI,EAFWT,GAEJ,UAAU,IAFZ,IAAMU,EAANV,GCCA,MAAMW,EAAN,MAAMA,CAAW,CA0ItB,OAAO,sBAAsBT,EAAMU,EAAS,GAAO,CAGjD,OAFAF,EAAQ,IAAI,wBAAyB,CAACR,EAAMU,CAAQ,CAAC,EAEjDV,GAAQ,MAERU,GAAYV,EAAK,OAAS,MAAM,QAAQA,EAAK,KAAK,IAGpDA,EAAK,MAAQA,EAAK,MAAM,IAAIW,GACvBA,aAAa,KACGA,EAAE,OAAQ,EAGpBA,CAEV,GAGIX,CACX,CAOE,OAAO,yBAAyBA,EAAMU,EAAS,GAAO,CACpDF,EAAQ,IAAI,2BAA4B,CAACR,EAAMU,CAAQ,CAAC,EACxD,IAAIE,EAAS,CAAE,GAAGZ,CAAM,EACxB,GAAI,CAACA,EAAM,OAAOY,EAElB,GAAGF,GAAYV,EAAK,OAASA,EAAK,MAAM,OAAS,EAAE,CACjD,MAAMa,EAAQD,EAAO,MAAM,IAAID,GAAK,CAClC,IAAIG,EAAOH,EACX,OAAG,OAAOA,GAAM,SACdG,EAAO,KAAK,SAASH,CAAC,EAEtBG,EAAO,KAAK,SAAS,KAAK,UAAUH,CAAC,CAAC,EAEjCG,CACR,CAAA,EACD,OAAAF,EAAO,MAAQ,CAAC,GAAGC,CAAK,EACjBD,CACb,CAEI,OAAOA,CACX,CAEA,EAzLEL,EADWE,EACJ,UACPF,EAFWE,EAEJ,oBAAoB,IAAI,KAQ/BF,EAVWE,EAUJ,aAAcM,GAAiB,CACpCP,EAAQ,IAAI,aAAc,CAACO,CAAY,CAAC,EAExC,MAAM,KAAKpB,GAAa,MAAO,IAAM,CAEnC,GAAI,OAAO,UAAc,IAAa,CACpCa,EAAQ,MAAM,gFAAgF,EAC9F,GAAG,cAAc,MAAM,KAAK,KAAK,SAAS,4CAA4C,EAAG,CAAC,UAAW,EAAI,CAAC,EAC1G,MACR,CAEM,GAAI,CAEFC,EAAW,OAAS,UAAU,eAAetB,CAAS,EAGlD4B,GACFA,EAAc,CAGjB,MAAW,CAClB,CACA,CAAK,CACL,GAQER,EAzCWE,EAyCJ,eAAe,CAACO,EAAMC,IAAS,CACpCT,EAAQ,IAAI,eAAgB,CAACQ,CAAI,CAAC,EAC9BP,EAAW,QACbA,EAAW,OAAO,SAASO,EAAMC,CAAI,CAG3C,GAQEV,EAvDWE,EAuDJ,cAAc,CAACS,EAAOC,IAAa,CACxCX,EAAQ,IAAI,cAAe,CAACU,CAAK,CAAC,EAC9BC,GACAA,EAAU,CAElB,GASEZ,EArEWE,EAqEJ,aAAa,MAAOW,KAAYC,IAAe,CAEpD,GADAb,EAAQ,IAAI,aAAc,CAACY,EAAS,GAAGC,CAAU,CAAC,EAC9C,EAACZ,EAAW,OAGhB,OAAO,MAAMA,EAAW,OAAO,iBAAiBW,EAAS,GAAGC,CAAU,CAC1E,GASEd,EApFWE,EAoFJ,aAAa,MAAOW,KAAYC,IAAe,CACpD,GAAKZ,EAAW,OAGhB,OAAO,MAAMA,EAAW,OAAO,mBAAmBW,EAAS,GAAGC,CAAU,CAC5E,GAUEd,EAnGWE,EAmGJ,cAAc,MAAOW,EAASE,KAAWD,IAAe,CAE7D,GADAb,EAAQ,IAAI,iBAAkB,CAACY,EAASE,EAAQ,GAAGD,CAAU,CAAC,EAC1D,CAACZ,EAAW,OACZ,OAIJ,GADAD,EAAQ,IAAI,iBAAkB,CAACc,IAAW,KAAK,KAAK,EAAE,CAAC,EACpDA,IAAW,KAAK,KAAK,GACtB,OAAO,KAET,MAAMC,EAAe,GAAGH,CAAO,IAAIE,CAAM,GAIzC,GAFAd,EAAQ,IAAI,iBAAkB,CAACC,EAAW,kBAAkB,IAAIc,CAAY,CAAC,CAAC,EAE1Ed,EAAW,kBAAkB,IAAIc,CAAY,EAC7C,OAAO,KAGXd,EAAW,kBAAkB,IAAIc,EAAc,EAAI,EAEnD,GAAI,CACF,MAAMC,EAAO,MAAMf,EAAW,OAAO,cAAcW,EAASE,EAAQ,GAAGD,CAAU,EACjF,OAAAb,EAAQ,IAAI,4BAA6B,CAACgB,CAAI,CAAC,EACxCA,CACR,OAAQC,EAAO,CACd,OAAAjB,EAAQ,MAAM,yBAA0B,CAACiB,CAAK,CAAC,EACxC,IACb,QAAc,CACRjB,EAAQ,IAAI,2BAA4B,EAAE,EAE1CC,EAAW,kBAAkB,OAAOc,CAAY,CACtD,CACA,GAnIO,IAAMG,GAANjB,ECFA,MAAMkB,EAAe,CAc1B,OAAO,YAAa,CAClB,KAAK,cAAe,CACxB,CAME,OAAO,eAAgB,CACrB,GAAI,CAAC,KAAK,KAAM,MAAO,CAAE,EAEzB,MAAMC,EAAiB,KAAK,SAAS,QAAQ,IAAI,QAAQ,EACzD,YAAK,WAAaA,EAAe,wBAAwB,GAAK,GAEvD,KAAK,UAChB,CAME,OAAO,eAAgB,CACrB,OAAK,KAAK,MAGV,KAAK,cAAe,EAGhB,KAAK,KAAK,MACZ,KAAK,qBAAsB,EAGtB,KAAK,YAVW,CAAE,CAW7B,CAME,OAAO,sBAAuB,CAC5BF,GAAW,WAAW,oBAAqB,KAAK,KAAK,GAAI,KAAK,UAAU,CAC5E,CAOE,OAAO,kBAAkBJ,EAAQO,EAAY,CLnExC,IAAAvB,EAAAwB,IKoECxB,EAAA,KAAK,OAAL,MAAAA,EAAW,MAAQgB,MAAWQ,EAAA,KAAK,OAAL,YAAAA,EAAW,OAC3C,KAAK,kBAAkBR,CAAM,EAAIO,EAAa,KAAK,MAAMA,CAAU,EAAI,CAAE,EAE/E,CAOE,OAAO,kBAAkBP,EAAQ,CL9E5B,IAAAhB,EK+EH,OAAIgB,MAAWhB,EAAA,KAAK,OAAL,YAAAA,EAAW,IACjB,KAAK,WAGP,KAAK,kBAAkBgB,CAAM,GAAK,CAAE,CAC/C,CAME,OAAO,0BAA0BA,EAAQ,CACvCI,GAAW,YAAY,gBAAiBJ,CAAM,CAClD,CAKE,OAAO,iCAAkC,CLjGpC,IAAAhB,GKkGEA,EAAA,KAAK,OAAL,MAAAA,EAAW,MAEhB,KAAK,MAAM,QAAQyB,GAAQ,CACrBA,EAAK,QAAU,CAACA,EAAK,MAAQA,EAAK,KAAO,KAAK,KAAK,IACrD,KAAK,0BAA0BA,EAAK,EAAE,CAE9C,CAAK,CACL,CAKE,OAAO,oBAAqB,CAC1B,KAAK,kBAAoB,CAAE,CAC/B,CAOE,OAAO,cAAcT,EAAQ,CLvHxB,IAAAhB,EKwHH,OAAIgB,MAAWhB,EAAA,KAAK,OAAL,YAAAA,EAAW,IACjB,CAAC,CAAC,KAAK,WAGT,CAAC,CAAC,KAAK,kBAAkBgB,CAAM,CAC1C,CACA,CArHEf,EAJWoB,GAIJ,aAAa,CAAE,GAKtBpB,EATWoB,GASJ,oBAAoB,CAAE,GLdxB,IAAAK,GAAAC,GMMA,MAAMC,CAAY,CAMvB,OAAO,WAAWC,EAAW,CNZxB,IAAA7B,EMaH,MAAM8B,GAAS9B,EAAA,KAAK,UAAL,YAAAA,EAAc,IAAI6B,GACjC,MAAO,GAAQC,GAAA,MAAAA,EAAQ,OAC3B,CAQE,OAAO,KAAKC,EAAQC,EAAU,CAC5B,OAAOD,EAAO,cAAcC,CAAQ,CACxC,CAOE,OAAO,aAAaC,EAAS,CAE3B,OADc,OAAO,iBAAiBA,CAAO,EACnC,QAAU,MACX,EAEFA,EAAQ,WACnB,CAOE,OAAO,qBAAqBA,EAASC,EAAQ,IAAK,CAC3CD,IAELA,EAAQ,MAAM,QAAU,IACxBA,EAAQ,MAAM,WAAa,wBAE3B,WAAW,IAAM,CACXA,IACFA,EAAQ,MAAM,QAAU,IAE3B,EAAEC,CAAK,EACZ,CAOE,OAAO,WAAWC,EAASC,EAAU,CACnC,IAAIC,EAAY,SAAS,cAAc,oBAAoB,EAE3D,GAAI,CAACA,EAAW,CACd,MAAMC,EAAO,SAAS,cAAc,cAAc,EAClD,GAAG,CAACA,EAAM,OAEV,MAAMC,EAAgBD,EAAK,cAAc,oBAAoB,EACzDC,GACFA,EAAc,OAAQ,EAGxBF,EAAY,SAAS,cAAc,OAAO,EAC1CA,EAAU,GAAK,eACfA,EAAU,YAAc;AAAA;AAAA,EACxBC,EAAK,QAAQD,CAAS,CAC5B,CAEI,IAAIG,EAAUH,EAAU,YAEpBI,EAAYD,EAAQ,QAAQ,gBAAgB,EAC5CE,EAAUF,EAAQ,QAAQ,IAAKC,CAAS,EAExCA,IAAc,KAChBD,EAAU;AAAA;AAAA,EACVC,EAAY,EACZC,EAAUF,EAAQ,QAAQ,GAAG,GAK/B,MAAMG,EAFWH,EAAQ,UAAUC,EAAY,GAAyBC,CAAO,EAEjD,MAAM,GAAG,EACpC,IAAIE,GAAQA,EAAK,KAAM,CAAA,EACvB,OAAOA,GAAQA,IAAS,EAAE,EAEvBC,EAAU,CAAE,EAClBF,EAAa,QAAQC,GAAQ,CAC3B,MAAME,EAAQF,EAAK,MAAM,GAAG,EAC5B,GAAIE,EAAM,QAAU,EAAG,CACrB,MAAMpC,EAAOoC,EAAM,CAAC,EAAE,KAAM,EACtBlC,EAAQkC,EAAM,MAAM,CAAC,EAAE,KAAK,GAAG,EAAE,OACnCpC,IAAMmC,EAAQnC,CAAI,EAAIE,EAClC,CACA,CAAK,EAEGuB,EAAQ,SAAS,MAAM,GACvB,OAAOC,GAAa,UACpB,CAACA,EAAS,WAAW,GAAG,GACxB,CAACA,EAAS,WAAW,GAAG,GACxB,CAACA,EAAS,MAAM,0BAA0B,IAC5CA,EAAW,IAAIA,CAAQ,KAGzBS,EAAQV,CAAO,EAAIC,EAEnB,MAAMW,EAAiB,OAAO,QAAQF,CAAO,EAC1C,IAAI,CAAC,CAACnC,EAAME,CAAK,IAAM,KAAKF,CAAI,KAAKE,CAAK,GAAG,EAC7C,KAAK;AAAA,CAAI,EAENoC,EACJR,EAAQ,UAAU,EAAGC,CAAS,EAC9B;AAAA,EACAM,EACA;AAAA,GACAP,EAAQ,UAAUE,EAAU,CAAC,EAE/BL,EAAU,YAAcW,CAC5B,CAOE,OAAO,gBAAgBf,EAAS,CAC9B,MAAMgB,EAAYhB,EAAQ,UACpBiB,EAAgBjB,EAAQ,aAC9B,OAAO,OAAO,aAAegB,EAAYC,EAC7C,CAME,aAAa,aAAc,CACzB,MAAMC,EAAe,IAAI,IAAI,OAAO,KAAK,OAAO,eAAe,CAAC,EAC1DC,EAAiB,KAAK,SAAS,IAAI,OAAQ,OAAO,GAAK,CAAE,EACzDC,EAAc,OAAO,QAAQD,CAAc,EAAE,IAAI,CAAC,CAACE,CAAU,IAAMA,CAAU,EAE7EC,EAAmB,MAAM,KAAK,mBAAoB,EAWxD,OATiB,MAAM,KAAK,IAAI,IAAI,CAClC,GAAGJ,EACH,GAAGE,EACH,GAAGE,CACT,CAAK,CAAC,EACD,OAAOC,GAAK,CAAC,sCAAsC,KAAKA,CAAC,CAAC,EAC1D,IAAIA,GAAKA,EAAE,QAAQ,QAAS,EAAE,EAAE,KAAM,CAAA,EACtC,KAAK,CAAC,EAAGC,IAAM,EAAE,YAAa,EAAC,cAAcA,EAAE,YAAW,CAAE,CAAC,GAE3C,CAAE,CACzB,CAmBE,OAAO,aAAaC,EAASC,EAAK,qBAAsBC,EAAqB,GAAM,CACjF,GAAI,CAACF,EACH,OAGF,IAAIG,EAAc,SAAS,cAAc,IAAMF,CAAE,EAE5CE,IACHA,EAAc,SAAS,cAAc,OAAO,EAC5CA,EAAY,GAAKF,EACjBE,EAAY,YAAc,GAC1B,SAAS,KAAK,YAAYA,CAAW,GAGvC,MAAMC,EAAc,sDACdC,EAAU,CAAE,EAClB,IAAIC,EAAwBN,EACxBO,EACJ,MAAQA,EAAQH,EAAY,KAAKJ,CAAO,KAAO,MAC7CK,EAAQ,KAAKE,EAAM,CAAC,CAAC,EAKvB,GAFAD,EAAwBN,EAAQ,QAAQI,EAAa,EAAE,EAAE,KAAM,EAE3D,CAACF,EAAoB,CACvBC,EAAY,YAAcE,EAAQ,KAAK;AAAA,CAAI,GAAKA,EAAQ,OAAS;AAAA;AAAA,EAAS,IAAMC,EAChF,MACN,CAEI,GAAI,CAACH,EAAY,YAAY,SAASG,CAAqB,EAAG,CAC5D,MAAME,EAAiBL,EAAY,YAC7BM,EAAkB,CAAE,EAC1B,IAAIC,EACJ,MAAQA,EAAeN,EAAY,KAAKI,CAAc,KAAO,MAC3DC,EAAgB,KAAKC,EAAa,CAAC,CAAC,EAGtC,MAAMC,EAA+BH,EAAe,QAAQJ,EAAa,EAAE,EAAE,KAAM,EAC7EQ,EAAaP,EAAQ,OAAOQ,GAAO,CAACJ,EAAgB,SAASI,CAAG,CAAC,EACjEC,EAAa,CAAC,GAAGL,EAAiB,GAAGG,CAAU,EACrDT,EAAY,YAAcW,EAAW,KAAK;AAAA,CAAI,GACpBA,EAAW,OAAS;AAAA;AAAA,EAAS,IAC9BH,GACCA,GAAgCL,EAAwB;AAAA;AAAA,EAAS,IAClEA,CAC/B,CACA,CAWE,OAAO,eAAe/B,EAASwC,EAAIC,EAAY,aAAcC,EAAW,IAAKC,EAAa,KAAM,CAE9F,MAAMC,EAAc5C,EAAQ,QAAQ,kBAChC4C,GACF,qBAAqB,OAAOA,CAAW,CAAC,EAI1C,MAAMC,EAAeJ,IAAc,aAC7BK,EAAQD,EAAe7C,EAAQ,WAAaA,EAAQ,UACpD+C,EAASP,EAAKM,EAGpB,GAAIC,IAAW,EACb,OAAIJ,GAAYA,EAAY,EACrB,KAGT,MAAMK,EAAY,YAAY,IAAK,EAE7BC,EAAiBC,GAAgB,CACrC,MAAMC,EAAcD,EAAcF,EAElC,GAAIG,GAAeT,EAAU,CACvBG,EACF7C,EAAQ,WAAawC,EAErBxC,EAAQ,UAAYwC,EAGtB,OAAOxC,EAAQ,QAAQ,kBACnB2C,GAAYA,EAAY,EAC5B,MACR,CAEM,MAAMS,EAAWD,EAAcT,EACzBW,EAAeD,EAAW,GAC5B,EAAIA,EAAWA,EACf,EAAI,KAAK,IAAI,GAAKA,EAAW,EAAG,CAAC,EAAI,EAErCP,EACF7C,EAAQ,WAAa8C,EAAQC,EAASM,EAEtCrD,EAAQ,UAAY8C,EAAQC,EAASM,EAGvC,MAAMC,EAAiB,sBAAsBL,CAAa,EAC1D,OAAAjD,EAAQ,QAAQ,kBAAoBsD,EAC7BA,CACR,EAEKA,EAAiB,sBAAsBL,CAAa,EAC1D,OAAAjD,EAAQ,QAAQ,kBAAoBsD,EAC7BA,CACX,CASE,OAAO,cACLC,EAAQ,KAAK,KAAK,SAAS,oCAAoC,EAC/D9B,EAAU,KAAK,KAAK,SAAS,oCAAoC,EACjE3D,EAAU,CAAA,EAAI,CAEd,MAAM0F,EAAe,CACnB,OAAQ,CACN,MAAAD,CACD,EACD,SAAU,CACR,MAAO,IACP,OAAQ,MACT,EACD,QAAA9B,EACA,IAAK,CACH,MAAO,KAAK,KAAK,SAAS,6BAA6B,EACvD,SAAU,KACRxD,EAAQ,IAAI,mCAAmC,EAC/C,OAAO,SAAS,OAAQ,EACjB,GAEV,EACD,GAAI,CACF,MAAO,KAAK,KAAK,SAAS,6BAA6B,EACvD,SAAU,IAAM,EACjB,EACD,WAAY,GACZ,YAAa,EACd,EAED,mBAAYuF,EAAc1F,CAAO,EAC1B,QAAQ,aAAa,IAAI,SAAS,QAAQ0F,CAAY,CACjE,CAQE,OAAO,eAAeC,EAAchG,EAAK,CACvC,OAAO,QAAQ,aAAa,WAAW,eAAegG,EAAchG,CAAI,CAC5E,CAOE,OAAO,aAAagG,EAAa,CAC/B,OAAO,QAAQ,aAAa,WAAW,aAAaA,CAAY,CACpE,CAOE,OAAO,cAAcC,EAAc,CACjC,OAAI,MAAM,QAAQA,CAAa,IAAGA,EAAgB,CAACA,CAAa,GACzD,QAAQ,aAAa,WAAW,cAAcA,CAAa,CACtE,CAOE,OAAO,eAAeC,EAAW,CAC/B,GAAI,CAACA,GAAa,OAAOA,GAAc,SAAU,MAAO,GACxD,MAAMC,EAAaD,EAAU,KAAM,EACnC,GAAI,CAACC,EAAY,MAAO,GACxB,GAAI,CACF,MAAMC,EAAQ,SAAS,cAAc,OAAO,EACtCC,EAAU,GAAGF,CAAU,uBAC7BC,EAAM,YAAcC,EACpB,SAAS,KAAK,YAAYD,CAAK,EAC/B,MAAME,EAAU,GAAQF,EAAM,OAASA,EAAM,MAAM,UAAYA,EAAM,MAAM,SAAS,OAAS,GAC7F,gBAAS,KAAK,YAAYA,CAAK,EACxBE,CACR,OAAQ7E,EAAO,CACd,OAAAjB,EAAQ,IAAI,wBAAyB,CAACiB,EAAOyE,CAAS,CAAC,EAChD,EACb,CACA,CAQE,OAAO,gBAAgBK,EAAUC,EAAiB,CAChD,GAAI,CAACD,GAAY,CAACC,EAAiB,MAAO,GAC1C,MAAMC,EAAYC,GAAA,KAAK1E,GAAAC,IAAL,UAAesE,GAC3BI,EAAYH,EAAkB;AAAA,EAASC,EAAU,eAAe,KAAK;AAAA,CAAI,EAAI;AAAA,GAC7EG,EAAiB,CAAE,EACnBC,EAAiB,IAAI,IAE3B,OAAAJ,EAAU,YAAY,QAAQK,GAAQ,CACpC,KAAM,CAAE,SAAAxE,EAAU,QAAA0B,CAAO,EAAK8C,EAE9B,GAAIxE,EAAS,WAAW,GAAG,EAAG,CAC5B,MAAMyE,EAAiBzE,EAAS,UAAU,CAAC,EACrC0E,EAAoBR,EAAgB,MAAM,GAAG,EAChD,IAAIS,GAAKA,EAAE,KAAM,CAAA,EACjB,OAAO,OAAO,EACd,IAAIA,GAAKA,EAAIF,CAAc,EAC3B,KAAK,IAAI,EAEZH,EAAe,KAAK,GAAGI,CAAiB;AAAA,EAAOhD,CAAO;AAAA,EAAK,EAC3D,MACR,CAEW6C,EAAe,IAAI7C,CAAO,GAC7B6C,EAAe,IAAI7C,EAAS,EAAE,EAGhC,MAAMkD,EAAY5E,EAAS,MAAM,GAAG,EAAE,IAAI2E,GAAKA,EAAE,MAAM,EACjDE,EAAaX,EAAgB,MAAM,GAAG,EAAE,IAAIS,GAAKA,EAAE,KAAI,CAAE,EAAE,OAAO,OAAO,EAE/EC,EAAU,QAAQE,GAAkB,CAClCD,EAAW,QAAQE,GAAkB,CACnCR,EAAe,IAAI7C,CAAO,EAAE,KAAK,GAAGqD,CAAc,IAAID,CAAc,EAAE,CAChF,CAAS,CACT,CAAO,CACP,CAAK,EAEDP,EAAe,QAAQ,CAACK,EAAWlD,IAAY,CAC7C4C,EAAe,KAAK,GAAGM,EAAU,KAAK,IAAI,CAAC;AAAA,EAAOlD,CAAO;AAAA,EAAK,CACpE,CAAK,EAEM2C,EAAY;AAAA;AAAA,EAASC,EAAe,KAAK;AAAA;AAAA,CAAM,CAC1D,CAwDE,OAAO,cAAcU,EAAO,CAC1B,MAAMC,EAAYD,EAAM,WAAa,CAAE,EAEvC,SAAW,CAAChG,EAAQkG,CAAK,IAAK,OAAO,QAAQD,CAAS,EACpD,GAAIC,GAAS,MAAM,0BAA0B,MAAO,CAClD,MAAMzF,EAAO,KAAK,MAAM,IAAIT,CAAM,EAClC,GAAIS,GAAQ,CAACA,EAAK,KAChB,OAAOA,CAEjB,CAGI,IAAGwF,GAAA,YAAAA,EAAW,UAAW,MAAM,0BAA0B,MAAM,CAC7D,MAAMxF,EAAO,KAAK,MAAM,OAAOA,GAAQ,CAACA,EAAK,IAAI,EAAE,CAAC,EACpD,GAAIA,EACF,OAAOA,CAEf,CAEI,OAAO,IACX,CASE,OAAO,cACL+D,EAAQ,KAAK,KAAK,SAAS,4CAA4C,EACvE9B,EAAU,KAAK,KAAK,SAAS,4CAA4C,EACzE3D,EAAU,CAAA,EAAI,CAEd,MAAM0F,EAAe,CACnB,OAAQ,CACN,MAAAD,CACD,EACD,SAAU,CACR,MAAO,IACP,OAAQ,MACT,EACD,QAAA9B,EACA,IAAK,CACH,MAAO,KAAK,KAAK,SAAS,qCAAqC,EAC/D,SAAU,KACRxD,EAAQ,IAAI,mCAAmC,EAC/C,OAAO,SAAS,OAAQ,EACjB,GAEV,EACD,GAAI,CACF,MAAO,KAAK,KAAK,SAAS,qCAAqC,EAC/D,SAAU,IAAM,EACjB,EACD,WAAY,GACZ,YAAa,EACd,EAED,mBAAYuF,EAAc1F,CAAO,EAC1B,QAAQ,aAAa,IAAI,SAAS,QAAQ0F,CAAY,CACjE,CAME,OAAO,sBAAuB0B,EAAM,CAClCjH,EAAQ,IAAI,4BAA6B,CAACiH,CAAI,CAAC,EAC/C,MAAMC,EAAWxI,EAAa,EACxByI,EAA0BC,EAAa,IAAIF,EAAS,eAAe,GAAG,EAE5E,GADAlH,EAAQ,IAAI,4BAA6B,CAACmH,CAAuB,CAAC,EAC/D,CAACA,EAA0B,OAC9B,MAAME,EAAY,OAAO,UAAU,QAAQ,SAAS,OAAOC,GAClDA,EAAG,SAAS,MAAM,MAAM,QAASL,GAAA,YAAAA,EAAM,KAC/C,EAED,OAAO,MAAM,wBAAwB,mBAAoBI,EAAU,IAAI,GAAG,EAAE,EAAE,CAAC,CACnF,CACA,CArjBO7F,GAAA,YAsbEC,GAAS,SAAC8F,EAAK,CACpB,MAAMC,EAAiB,CAAE,EACnBC,EAAc,CAAE,EAChBC,EAAQH,EAAI,MAAM;AAAA,CAAI,EAE5B,IAAII,EAAgB,KAChBC,EAAa,EAEjB,QAASC,EAAI,EAAGA,EAAIH,EAAM,OAAQG,IAAK,CACrC,MAAMC,EAAOJ,EAAMG,CAAC,EAAE,KAAM,EAC5B,GAAI,CAACC,EAAM,SAEX,MAAMC,GAAcD,EAAK,MAAM,IAAI,GAAK,CAAA,GAAI,OACtCE,GAAeF,EAAK,MAAM,IAAI,GAAK,CAAA,GAAI,OAE7C,GAAIA,EAAK,SAAS,GAAG,GAAK,CAACH,EAAe,CAExCA,EAAgB,CAAE,SADDG,EAAK,UAAU,EAAGA,EAAK,QAAQ,GAAG,CAAC,EAAE,KAAM,EAChC,QAAS,GAAI,UAAWD,CAAG,EACvDD,EAAa,EAEb,MAAMK,EAAoBH,EAAK,UAAUA,EAAK,QAAQ,GAAG,EAAI,CAAC,EAAE,KAAM,EAClEG,GAAqB,CAACA,EAAkB,SAAS,GAAG,IACtDN,EAAc,SAAWM,EAAoB;AAAA,EAEhD,MAAUN,GACTC,GAAcG,EAAaC,EAEvBJ,EAAa,EACfD,EAAc,SAAWG,EAAO;AAAA,GAGhCH,EAAc,QAAUA,EAAc,QAAQ,QAAQ,QAAS,EAAE,EAAE,KAAM,EACzEF,EAAY,KAAKE,CAAa,EAC9BA,EAAgB,OAET,CAACG,EAAK,SAAS,GAAG,GAAK,CAACA,EAAK,SAAS,GAAG,GAClDN,EAAe,KAAKM,CAAI,CAEhC,CAEI,MAAO,CAAE,eAAAN,EAAgB,YAAAC,CAAa,CAC1C,EA/dOS,GAAMxG,EAANF,IAsKLzB,EAtKW2B,EAsKJ,eAAgByG,GAAa,CAClC,MAAMC,EAAYD,EAAS,QAAQ,SAAU,EAAE,EAC/C,OAAOC,EAAU,SAAS,GAAG,EAAI,IAAIA,CAAS,IAAMA,CACxD,GCzKA,KAAM,CAAE,iBAAAC,EAAgB,EAAK,QAAQ,MAE/B,CAAA,cAAEC,GAAa,2BAAEC,EAA0B,EAAK,QAAQ,aAAa,IPRpE,IAAAzI,GAAA0I,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GOeA,MAAMC,EAAN,MAAMA,UAA2BR,GAA2BD,EAAa,CAAE,CAA3E,kCAwMLvI,EAAA,iBAAY,CAACiJ,EAASnJ,IAAY,CACfnB,EAAW,EAC5BuK,GAAAF,EAAmBP,GAAW,KAAK,SAEfU,EAAAH,EAAmBP,IAAS,iBAAiB,cAAc,EACnE,QAAQW,GAAU,CAC5BA,EAAO,iBAAiB,QAAS,IAAM,CACrCD,EAAAH,EAAmBP,IAAS,iBAAiB,QAAQ,EAAE,QAAQY,GAAKA,EAAE,UAAU,OAAO,OAAO,CAAC,CACvG,CAAO,CACP,CAAK,EAEeF,EAAAH,EAAmBP,IAAS,iBAAiB,4BAA4B,EACjF,QAAQa,GAAU,CACxB,MAAMC,EAAe,OAAOD,EAAO,QAAQ,YAAY,EACjDE,EAASF,EAAO,cAAc,iBAAiBC,CAAY,IAAI,EACjEC,IACFA,EAAO,SAAW,GAE1B,CAAK,CACL,GArJE,sBAAsB1J,EAAS,CAC7B,MAAM+C,EAAQ,MAAM,sBAAsB/C,CAAO,EAC3C2J,EAAiBT,EAAmB,kBAAmB,EAE7D,OAAI,KAAK,KAAK,MACZS,EAAe,QAAQC,GAAO,CAC5B,OAAO7G,EAAM6G,CAAG,CACjB,CAAA,EAGI7G,CACX,CAGE,MAAM,gBAAgB/C,EAAS,CAC7B,MAAMmJ,EAAU,MAAM,MAAM,gBAAgBnJ,CAAO,EACnD,OAAAmJ,EAAQ,UAAYnJ,EAAQ,WAAa,OAAO,KAAKmJ,EAAQ,IAAI,EAAE,CAAC,EACpEA,EAAQ,KAAO,KAAK,KAAK,KAElBA,CACX,CAGG,MAAM,oBAAoBU,EAAQV,EAASnJ,EAAS,CP5GhD,IAAAC,EAAAwB,EAAAqI,EO6GH,MAAMC,EAAc,MAAM,MAAM,oBAAoBF,EAAQV,EAASnJ,CAAO,EACvE6J,KAAUV,EAAQ,OAAOY,EAAY,IAAMA,EAAY,KAAKF,CAAM,GACtDhL,EAAW,EACLmL,GAAe,EACtC,MAAML,EAAiBT,EAAmB,kBAAmB,EAO7D,OALI,KAAK,KAAK,MACZS,EAAe,QAAQC,GAAO,CAC5B,OAAOG,EAAY,KAAKH,CAAG,CAC5B,CAAA,EAEMC,EAAM,CACb,IAAK,OACH,MAEF,IAAK,SAAU,CACbE,EAAY,QAAU,CACpB,CAAE,KAAM,SAAU,KAAM,GAAI,MAAO,+BAAgC,OAAQ,UAAY,EACvF,CAAE,KAAM,SAAU,KAAM,GAAI,MAAO,6BAA6B,CACjE,EACD,KACR,CACM,QAAS,CACPA,EAAY,IAAMA,EAAY,KAAKF,CAAM,EACzC,MAAMI,IAAUhK,EAAAiJ,EAAmB,MAAMW,CAAM,IAA/B,YAAA5J,EAAkC,UAAW,KAC7D,GAAGgK,EAAQ,CACT,MAAMC,EAAchB,EAAmB,eAAee,CAAO,EAEzDC,EAAY,SACdH,EAAY,OAAS,CACnB,GAAGA,EAAY,OACf,GAAGG,EAAY,MAC7B,GAGcA,EAAY,gBACdH,EAAY,cAAgB,CAC1B,GAAGA,EAAY,cACf,GAAGG,EAAY,aAC7B,GAGcA,EAAY,aACd,OAAO,OAAOH,EAAaG,EAAY,WAAW,EAGpDH,EAAY,YAAc,OAAO,SAAOD,GAAArI,EAAA,QAAQ,eAAR,YAAAA,EAAsB,UAAtB,YAAAqI,EAA+B,OAAQ,CAAA,CAAE,EAAE,IAAIF,IAAQ,CAC7F,QAASA,EAAI,QACb,KAAMA,EAAI,KACV,UAAW,GACX,cAAe,GACf,cAAe,oCAAoCA,EAAI,IAAI,EACvE,EAAY,CACZ,CACQ,KACR,CACA,CACI,OAAAzJ,EAAQ,IAAI,sBAAuB,CAAC4J,EAAaF,CAAM,CAAC,EACjDE,CACX,CAOE,OAAO,eAAeI,EAAQ,CP/KzB,IAAAlK,EOgLH,MAAMoH,EAAWxI,EAAa,EACxBuL,IAAanK,EAAAoH,EAAS8C,CAAO,IAAhB,YAAAlK,EAAmB,SAAU,KAChD,GAAG,CAACmK,EAAY,MAAO,CAAE,EACzB,MAAMC,EAAS,CAAE,EACXC,EAAc,CAAE,EAChBC,EAAgB,CAAE,EAExB,OAAAH,EAAW,QAASI,GAAc,CAChC,GAAGnD,EAASmD,CAAS,EAAG,CACtB,MAAM3J,EAAQ0G,EAAa,IAAIF,EAASmD,CAAS,EAAE,GAAG,EACtDH,EAAOG,CAAS,EAAInD,EAASmD,CAAS,EACtCF,EAAYE,CAAS,EAAI3J,IAAS,OAAYA,EAAQwG,EAASmD,CAAS,EAAE,QAC1ED,EAAcC,CAAS,EAAInD,EAASmD,CAAS,EAAE,OACvD,CACA,CAAK,EAEM,CAAC,OAAQH,EAAQ,YAAaC,EAAa,cAAeC,CAAa,CAClF,CAME,OAAO,mBAAmB,CACxB,MAAMZ,EAAiB,CAAE,EACzB,cAAO,QAAQT,EAAmB,KAAK,EAAE,QAAQ,CAACuB,EAAOC,IAAU,CAC9DD,EAAM,CAAC,IAAI,QAAUA,EAAM,CAAC,IAAI,UAAYA,EAAM,CAAC,EAAE,UACtDd,EAAe,KAAKc,EAAM,CAAC,CAAC,CAEpC,CAAK,EACMd,CACX,CAiDE,OAAO,eAAegB,EAAS,CAC7B,IAAIC,EAAgB,GACpB,MAAMvD,EAAWxI,EAAa,EAGxBgM,EAFOxB,EAAAH,EAAmBP,IACL,cAAc,sBAAsB,EAC/B,QAAQ,IAGxC,GAFAS,GAAAF,EAAmBN,GAAaiC,GAE7B,CAACF,EACF,OAIF,IAAIG,EACJ,OAAIH,EAAS,SACXG,EAAW,QAAQ,MAAM,aAAaH,EAAS,MAAM,GAKvD,OAAO,QAAQG,CAAQ,EAAE,QAAQ,CAAC,CAACN,EAAW3J,CAAK,IAAM,CPpRtD,IAAAZ,EOsRD,GAAG,CAAAuK,EAAU,SAAS,QAAQ,IAE9BrK,EAAQ,IAAI,oBAAqB,CAACkH,EAAUA,EAASmD,CAAS,CAAC,CAAC,EAC7DM,EAASN,CAAS,IAAM,QAAanD,EAASmD,CAAS,GAAG,CAC3D,MAAMO,EAAcxD,EAAa,IAAIF,EAASmD,CAAS,EAAE,GAAG,EAC5DjD,EAAa,IAAIF,EAASmD,CAAS,EAAE,IAAKM,EAASN,CAAS,CAAC,GAE1DvK,EAAAoH,EAASmD,CAAS,IAAlB,MAAAvK,EAAqB,gBAAkB8K,IAAgBD,EAASN,CAAS,IAC1EI,EAAgB,GAE1B,CACA,CAAK,EAED,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,2CAA2C,CAAC,EAC9EA,CACX,CAGE,UAAUhB,EAAKoB,EAAOhL,EAAS,CAC7B,MAAM,UAAU4J,EAAKoB,EAAOhL,CAAO,EACnCoJ,GAAAF,EAAmBN,GAAagB,EACpC,CA4CA,EAvUSjB,GAAA,YACAC,GAAA,YACAC,GAAA,YAHFC,GAAA,YAsOQC,GAAS,eAACkC,EAAOC,EAAMP,EAAU,CAC5CM,EAAM,eAAgB,EACtBA,EAAM,gBAAiB,EAEH/B,EAAmB,eAAeyB,CAAQ,GAG5D9I,EAAY,cAAe,CAEjC,EAuDemH,GAAQ,eAACmC,EAAGzH,EAAE,CACzB,MAAM2D,EAAWxI,EAAa,EAExBuM,EADO/B,EAAAH,EAAmBP,IACL,cAAc,sBAAsB,EACzDkC,EAAYO,EAAc,QAAQ,IAClCjB,EAAUjB,EAAmB,MAAM2B,CAAS,EAAE,QAC9CQ,EAAWhE,EAAS8C,CAAO,EAAE,QAEpBiB,EAAc,iBAAiB,eAAe,EACtD,QAAQE,GAAc,CAC3BA,EAAW,MAAQD,EAASC,EAAW,IAAI,EACxCA,EAAW,OAAO,aACnBA,EAAW,QAAUD,EAASC,EAAW,IAAI,EAErD,CAAK,EAEDnL,EAAQ,IAAI,WAAY,CAACkJ,EAAAH,EAAmBN,IAAYiC,EAAWM,EAAGzH,CAAC,CAAC,CAC5E,EAESuF,GAAQ,UAAG,CAChB,MAAMsC,EAAU,CAAE,EAClB,cAAO,QAAQrC,EAAmB,KAAK,EAAE,QAAQ,CAAC,CAACsC,EAAK3K,CAAK,IAAM,CAC9DA,EAAM,SACP0K,EAAQ,KAAK,CACX,GAAIC,EACJ,KAAM,GACN,MAAO,eACP,MAAO,gDAAgDA,CAAG,EAC3D,CAAA,CAEJ,CAAA,EACMD,CACX,EAtUOlD,GAAMa,EAANJ,IACLT,GADWa,EACJP,IACPN,GAFWa,EAEJN,IACPP,GAHWa,EAGJL,IACP3I,EAJWgJ,EAIJ,iBAMPhJ,EAVWgJ,EAUJ,kBAAkB,CACvB,GAAI,uBACJ,IAAK,OACL,OAAQ,CACN,KAAM,aACN,MAAO,gDACP,eAAgB,CAAC,gBAAiB,SAAU,UAAW,iBAAiB,EACxE,UAAW,EACZ,EACD,SAAU,CACR,MAAO,IACP,OAAQ,MACT,EACD,QAAS,CACP,SAAU7C,GAAA6C,EAAmBJ,GAAAE,GAC9B,EACD,KAAM,CACJ,QAAS3C,GAAA6C,EAAmBJ,GAAAC,IAC5B,cAAe,EACrB,CACA,GAME7I,EApCWgJ,EAoCJ,QAAQ,CACb,KAAM,CACJ,SAAU,uCACV,SAAU,EACX,EACD,gBAAiB,CACf,QAAS,kBACT,SAAU,wDACV,SAAU,EACX,EACD,WAAY,CACV,QAAS,qBACT,SAAU,4DACV,SAAU,EACX,EACD,OAAQ,CACN,SAAU,oCACV,SAAU,EAChB,CACG,GAMDhJ,EA7DWgJ,EA6DJ,OAAO,CACZ,QAAS,CACP,QAAS,kBACT,KAAM7C,GAAApG,GAAAiJ,EAAmBJ,GAAAG,IAAnB,KAAAhJ,IACN,YAAa,EACnB,CACG,GAnEI,IAAMwL,GAANvC,ECZP,MAAMwC,WAAuB,eAAgB,CAC3C,eAAeC,EAAM,CACnB,MAAM,GAAGA,CAAI,EACb,OAAO,KAAK,sDAAuD,QAAQ,EAC3E,KAAK,MAAO,CAChB,CAEE,QAAS,CACP,YAAK,MAAO,EACL,IACX,CACA,CAEO,SAAS3B,IAAkB,CAChC,MAAO,CACL,mBAAoB,CAClB,IAAK,GACL,IAAK,KAAK,KAAK,SAAS,+CAA+C,EACvE,KAAM,KAAK,KAAK,SAAS,+CAA+C,EACxE,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,KAAM,KAAK,KAAK,SAAS,8CAA8C,EACvE,KAAM,aACN,SAAUyB,GACV,WAAY,EACb,EACD,eAAgB,CACd,IAAK,GACL,IAAK,KAAK,KAAK,SAAS,2CAA2C,EACnE,KAAM,KAAK,KAAK,SAAS,2CAA2C,EACpE,MAAO,KAAK,KAAK,SAAS,iDAAiD,EAC3E,KAAM,KAAK,KAAK,SAAS,0CAA0C,EACnE,KAAM,eACN,SAAUC,GACV,WAAY,EAClB,CACG,CACH,CC/BO,MAAME,EAAc,CAQzB,OAAO,eAAeC,EAAU,CAC9B,MAAM9J,EAAS,KAAK,QAAQ,IAAI8J,CAAQ,EACxC,OAAO9J,GAAUA,EAAO,MAC5B,CAME,OAAO,YAAa,CAClB,OAAI,KAAK,eAAe,UAAU,GAAK,OAAO,QAAY,IACjD,QAEF,IACX,CAEA,CAvBE7B,EADW0L,GACJ,cAAc,MCwBhB,MAAME,EAAa,CAQxB,OAAO,oBAAoB1E,EAAM2E,EAAU,CVzCtC,IAAA9L,EU0CH,GAAI,GAACA,EAAAmH,GAAA,YAAAA,EAAM,SAAN,MAAAnH,EAAc,YAAY,OAAO,KAEtC,MAAM+L,EAAa5E,EAAK,OAAO,WAG/B,OAF2B2E,GAAA,YAAAA,EAAU,cAEX,CACxB,KAAK7M,EAAW,OACd,MAAM+M,EAAmBD,EAAW,UAAU,QAAQ,EACtD,OAAOC,GAAA,YAAAA,EAAmB,KAAM,KAElC,KAAK/M,EAAW,OACd,MAAMgN,EAAyBF,EAAW,UAAU,QAAQ,EAC5D,IAAIE,GAAA,YAAAA,EAAwB,QAAS,EAAG,OAAOA,EAAuB,CAAC,EAEvE,MAAMC,EAAmBH,EAAW,UAAU,QAAQ,EACtD,IAAIG,GAAA,YAAAA,EAAkB,QAAS,EAAG,OAAOA,EAAiB,CAAC,EAE3D,MAAMC,EAAiBJ,EAAW,UAAU,MAAM,EAClD,OAAII,GAAA,YAAAA,EAAgB,QAAS,EAAUA,EAAe,CAAC,EAEhD,KAET,KAAKlN,EAAW,UACd,MAAMmN,EAAqBL,EAAW,UAAU,MAAM,EACtD,OAAOK,GAAA,YAAAA,EAAqB,KAAM,KAEpC,QACE,OAAO,IACf,CACA,CAQE,OAAO,oBAAoBjF,EAAMkF,EAAc,CV/E1C,IAAArM,EUgFH,OAAKA,EAAAmH,GAAA,YAAAA,EAAM,SAAN,MAAAnH,EAAc,WACZmH,EAAK,OAAO,WAAW,UAAUkF,CAAY,EADd,CAAE,CAE5C,CAQE,OAAO,mBAAmBlF,EAAM2E,EAAU,CACxC,OAAA5L,EAAQ,IAAI,qBAAsB,CAACiH,EAAM2E,CAAQ,CAAC,EAC3C,CAAC,CAAC,KAAK,oBAAoB3E,EAAM2E,CAAQ,CACpD,CAaE,aAAa,oBAAoB9E,EAAO8E,EAAUQ,EAAQC,EAAYC,EAAQ,CV1GzE,IAAAxM,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EU2GH3M,EAAQ,IAAI,sBAAuB,CAAC8G,EAAO8E,EAAUQ,EAAQC,EAAYC,CAAM,CAAC,EAChF,MAAMM,EAAenB,GAAc,eAAe,UAAU,EACtDxE,EAAOH,EAAM,MAAM,IAAIsF,CAAM,EACnC,GAAI,CAACnF,EACH,MAAM,IAAI,MAAM,QAAQmF,CAAM,uBAAuBtF,EAAM,IAAI,EAAE,EAGnE,IAAI+F,EAAW,KACXC,EAAe,KAQnB,GALIT,IACFQ,GAAW/M,EAAAmH,EAAK,OAAO,aAAZ,YAAAnH,EAAwB,IAAIuM,IAEzCQ,EAAWA,GAAY,KAAK,oBAAoB5F,EAAM2E,CAAQ,EAE1D,CAACiB,EACH,MAAM,IAAI,MAAM,8BAA8B5F,EAAK,IAAI,EAAE,EAE3DjH,EAAQ,IAAI,iCAAkC,CAAC6M,EAAUjB,CAAQ,CAAC,EAGlE,MAAMmB,EAAqBnB,GAAA,YAAAA,EAAU,cAGrC,GAAIiB,EACF,OAAQE,EAAkB,CACxB,KAAKhO,EAAW,OACdiB,EAAQ,IAAI,2CAA4C,CAACsM,CAAM,CAAC,EAIhE,MAAMU,EAAoB,CACxB,WAAYV,EAAO,MAAM,WACzB,WAAYA,EAAO,MAAM,WACzB,QAASA,EAAO,MAAM,QACtB,aAAaC,GAAA5C,GAAArI,EAAAgL,EAAO,MAAM,QAAb,YAAAhL,EAAqB,KAArB,YAAAqI,EAAyB,OAAzB,YAAA4C,EAA+B,YAC5C,UAAWD,EAAO,MAAM,UACxB,aAAcA,EAAO,MAAM,aAC3B,UAAUE,EAAAF,EAAO,UAAP,YAAAE,EAAgB,QAC3B,EACD,MAAMK,EAAS,KAAK,QAAQlO,EAAW,mBAAoBqO,CAAiB,EAE5EhN,EAAQ,IAAI,mDAAoD,CAACgN,CAAiB,CAAC,EAEnF,GAAI,CACFV,EAAO,QAAQ,OAAS,GAErBM,IACDN,EAAO,MAAM,QAAU,CACrB,UAAW,GACX,OAAQ,GACR,UAAW,CAAA,CAC3B,GAGY,MAAMO,EAAS,IAAIP,EAAO,MAAOA,EAAO,OAAQA,EAAO,OAAO,CAgB/D,OAAQrL,EAAO,CACdjB,EAAQ,MAAM,0CAA2C,CAACiB,CAAK,CAAC,CAC5E,QAAoB,CAER,MAAM4L,EAAS,KAAK,UAAUlO,EAAW,kBAAkB,CACvE,CACU,OACF,KAAKI,EAAW,OACdiB,EAAQ,IAAI,uCAAwC,CAAC6M,EAAUP,CAAM,CAAC,EAClEM,GAGFN,EAAO,MAAQ,CACb,GAAGA,EAAO,MACV,QAAS,CACP,GAAGA,EAAO,MAAM,QAChB,UAAU,GACV,OAAQ,GACR,UAAW,CAAA,CAC3B,CACA,EACYA,EAAO,OAAO,UAAY,IAX1BA,EAAO,QAAQ,OAAS,GAc1BQ,EAAe,CACb,SAAUR,EAAO,MAAM,UAAY,CAAE,EACrC,YAAaA,EAAO,MAAM,MAAM,CAAC,EAAE,KAAK,aAAe,GACvD,UAAUG,EAAAH,EAAO,UAAP,YAAAG,EAAgB,SAE1B,SAAQC,EAAAJ,EAAO,UAAP,YAAAI,EAAgB,UAAW,GACnC,QAASJ,EAAO,MAAM,OACvB,EACDA,EAAO,MAAQ,CACb,GAAGA,EAAO,MACV,QAAS,CACP,GAAGA,EAAO,MAAM,QAChB,UAAU,GACV,OAAQ,GACR,UAAW,CAAA,CACzB,CACA,EAIU,IAAIW,EAAqBJ,EAAS,OAAS/N,GAAe,QAAU+N,EAAS,OAAS/N,GAAe,MAAQ,EAAC+N,GAAA,MAAAA,EAAU,QACrHD,GAAgBK,EACjB,MAAM,KAAK,iBAAiBJ,EAAUP,EAAO,KAAK,EAC1C,CAAC,KAAK,KAAK,OAASO,EAAS,OAAS/N,GAAe,MAAQ+N,EAAS,OAAS/N,GAAe,QAAU,EAAC+N,GAAA,MAAAA,EAAU,UAC3H,MAAMA,EAAS,IAAIP,EAAO,MAAO,CAC/B,GAAGA,EAAO,OACV,UAAW,EACzB,EAAeA,EAAO,OAAO,EAEnB,MAAMO,EAAS,KAAK,QAAQlO,EAAW,mBAAoBmO,CAAY,EACvE9M,EAAQ,IAAI,uDAAwD,CAAC8M,CAAY,CAAC,EAElF,GAAI,CACF,GAAGF,EAAc,CACf,MAAMM,EAAUzB,GAAc,WAAY,EAC1C,GAAIyB,EAAS,CACX,MAAMC,GAAWR,EAAAO,EAAQ,WAAR,YAAAP,EAAkB,YAAYE,EAAS,MASxD,GARAM,EAAS,YAAc,CACrB,YAAa,GAEb,eAAgB,GAEhB,eAAgB,EAClC,EACgBnN,EAAQ,IAAI,iCAAkC,CAACiN,CAAkB,CAAC,EAC/DE,GAAY,CAACF,EAAmB,CACjC,MAAMG,EAAa,MAAMD,EAAS,SAAS,WAAW,CACpD,GAAGL,EACH,SAAUK,CAC9B,EAAqB,CACD,GAAGb,EAAO,OACV,UAAW,EACZ,EAAE,EAAE,CACvB,CAGgB,MAChB,CACA,MACctM,EAAQ,IAAI,oCAAqC,CAAC6M,EAAUC,EAAcR,CAAM,CAAC,EAE7EW,IACFX,EAAO,OAAO,QAAU,CACtB,UAAU,GACV,OAAQ,GACR,UAAW,CAAA,CAC7B,EACgB,MAAMO,EAAS,WAAWC,EAAcR,EAAO,OAAQA,EAAO,OAAO,EAG1E,OAAQrL,EAAO,CACdjB,EAAQ,MAAM,CAAC,0CAA2CiB,CAAK,CAAC,CAC5E,QAAoB,CACR,MAAM4L,EAAS,KAAK,UAAUlO,EAAW,kBAAkB,CACvE,CACU,OACF,QACEqB,EAAQ,IAAI,0CAA2C,CAAC+M,CAAkB,CAAC,EAC3E,MAAMF,EAAS,IAAIP,EAAO,MAAOA,EAAO,OAAQA,EAAO,OAAO,EAC9D,MACV,CAGI,MAAM,IAAI,MAAM,gCAAgCS,CAAkB,YAAY9F,EAAK,IAAI,EAAE,CAC7F,CAOE,OAAO,uBAAuB4F,EAAU,CAEtC,OADA7M,EAAQ,IAAI,yBAA0B,CAAC6M,CAAQ,CAAC,EAC3CA,EAEE,CACL,KAAMA,EAAS,MAAQA,EAAS,YAAY,SAAS,MACrD,KAAMA,EAAS,KACf,KAAMA,EAAS,YAAY,SAAS,KACpC,UAAWA,EAAS,OAAS,SAC7B,UAAW,CAAC,SAAU,SAAU,MAAM,EAAE,SAASA,EAAS,IAAI,EAC9D,QAASA,EAAS,OAAS,MAC5B,EATqB,IAU1B,CAOE,OAAO,iBAAiBA,EAAU,CVzT7B,IAAA/M,EAAAwB,EU2TH,GADAtB,EAAQ,IAAI,mBAAoB,CAAC6M,CAAQ,CAAC,EACtC,GAACvL,GAAAxB,EAAA+M,GAAA,YAAAA,EAAU,SAAV,YAAA/M,EAAkB,QAAlB,MAAAwB,EAAyB,QAAQ,OAAO,KAG7C,MAAM+L,EAAWR,EAAS,OAAO,MAAM,IAAIS,GAAQA,EAAK,OAAO,EAAE,OAAOhK,GAAKA,CAAC,EAC9E,OAAO+J,EAAS,OAAS,EAAIA,EAAS,KAAK,KAAK,EAAI,IACxD,CAEE,aAAa,iBAAiBR,EAAUP,EAAS,GAAI,CACnDtM,EAAQ,IAAI,mBAAoB,CAAC6M,EAAUP,CAAM,CAAC,EAElD,MAAMY,EAAUzB,GAAc,WAAY,EAC1C,GAAI,CAACyB,EAAS,CACZlN,EAAQ,KAAK,uBAAuB,EACpC,MACN,CASI,IAAIuN,EAAiB,CACnB,QAAS,CACP,OAAQ,GACR,UAAW,CAAE,EACb,UAAW,EACZ,EACD,YAAa,GACb,kBAAmB,GACnB,cAAe,CACb,YAAa,GACb,kBAAmB,GACnB,kBAAmB,EACpB,EAED,gBAAiB,GAEjB,YAAa,CACX,eAAgB,GAChB,eAAgB,GAChB,eAAgB,OAChB,eAAgB,GAChB,YAAa,GACb,kBAAmB,GACnB,kBAAmB,GACnB,oBAAqB,MAC7B,CACK,EACD,OAAAV,EAAS,eAAiB,CACxB,GAAGA,EAAS,eACZ,kBAAmB,QACzB,EAGIP,EAAS,CAAC,GAAGiB,EAAgB,GAAGjB,CAAM,EAEtCtM,EAAQ,IAAI,4BAA6B,CAACsM,CAAM,CAAC,EAG1C,MAAMY,EAAQ,oBAAoBL,EAAUP,EAAQ,CAAA,CAAE,CAEjE,CAEA,CCpXO,MAAMkB,EAAY,CAMvB,OAAO,mBAAmBC,EAAKC,EAAM,CAEnC,GADA1N,EAAQ,IAAI,qBAAqB,CAACyN,EAAKC,CAAI,CAAC,EACxC,CAAC,KAAK,KAAK,MAAQ,CAACD,GAAOA,EAAI,KAAO,UAAW,OAGrD,MAAME,EAAe,SAAS,cAAc,eAAe,EAG3D,GAFA3N,EAAQ,IAAI,qBAAqB,CAAC2N,CAAY,CAAC,EAE3C,CAACA,GAAgBA,EAAa,cAAc,mBAAmB,EACjE,OAIF,MAAMzG,EAAWxI,EAAa,EACxBkP,EAAsBxG,EAAa,IAAIF,EAAS,oBAAoB,GAAG,EAGvE2G,EAAkB,SAAS,cAAc,QAAQ,EACvDA,EAAgB,GAAK,mBACrBA,EAAgB,aAAa,yBAA0B,OAAO,EAC9DA,EAAgB,UAAY,qDAAqDD,EAAsB,UAAY,EAAE,GACrHC,EAAgB,MAAQ,KAAK,KAAK,SAAS,wCAAwC,EACnFA,EAAgB,UAAY,wBAAwBD,EAAsB,GAAK,QAAQ,SAGvF,MAAME,EAAuBH,EAAa,WACtCG,EACFA,EAAqB,WAAW,aAAaD,EAAiBC,CAAoB,EAElFH,EAAa,aAAaE,EAAiBF,EAAa,UAAU,EAGpE3N,EAAQ,IAAI,qBAAqB,CAAC8N,EAAsBD,CAAe,CAAC,EAExEA,EAAgB,iBAAiB,QAAU/C,GAAU,CACnDA,EAAM,gBAAiB,EACvBA,EAAM,eAAgB,EACtBiD,EAAiB,OAAQ,CAC/B,CAAK,CACL,CAME,OAAO,uBAAuBC,EAAS,CACrC,MAAMC,EAAO,SAAS,cAAc,qBAAqB,EACrDA,IACFA,EAAK,UAAY,cAAcD,EAAU,GAAK,QAAQ,GAE5D,CACA,CCpDO,SAASE,GAAmBtC,EAAUuC,EAAS,CZb/C,IAAArO,EAAAwB,EAAAqI,EAAA4C,EAAAC,EYcL,IAAI4B,EAAU,KAAK,KAAK,SAAS,yBAAyBxC,CAAQ,EAAE,GAAKA,EAGzE,MAAMmB,EAAqBnB,GAAA,YAAAA,EAAU,cAErC,GAAIuC,EACF,OAAQpB,EAAkB,CACxB,KAAKhO,EAAW,MACdqP,GAAW,OAAKtO,EAAA,OAAO,MAAM,OAAOqO,CAAO,IAA3B,YAAArO,EAA8B,QAASqO,CAAO,IAC9D,MACF,KAAKpP,EAAW,KACdqP,GAAW,OAAK9M,EAAA,OAAO,MAAM,UAAU6M,CAAO,IAA9B,YAAA7M,EAAiC,QAAS6M,CAAO,IACjE,MACF,KAAKpP,EAAW,QACdqP,GAAW,OAAKzE,EAAA,OAAO,MAAM,UAAUwE,CAAO,IAA9B,YAAAxE,EAAiC,QAASwE,CAAO,IACjE,MACF,KAAKpP,EAAW,KACd,MAAMsP,GAAW7B,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuC2B,GACxD,GAAIE,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAMC,EAAW,MAAM,UAAU,MAAM,YAAYD,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFD,GAAW,MAAKE,GAAA,YAAAA,EAAU,OAAQH,CAAO,GACnD,MACUC,GAAW,KAAKD,CAAO,IAEzB,MACF,KAAKpP,EAAW,OACdqP,EAAU,GAAGA,CAAO,KAAKD,CAAO,GAChC,KACR,CAGE,OAAOC,CACT,CAOO,SAASG,GAAyBC,EAAsBC,EAAuBP,GAAoB,CACxG,GAAIM,EAAqB,SAAW,EAAG,OAGvC,MAAME,EAAsB,CAAE,EAC9B,UAAWC,KAASH,EAAsB,CACxC,MAAMnD,EAAM,GAAGsD,EAAM,QAAQ,IAAIA,EAAM,SAAW,EAAE,GAC/CD,EAAoBrD,CAAG,IAC1BqD,EAAoBrD,CAAG,EAAI,CACzB,SAAUsD,EAAM,SAChB,QAASA,EAAM,QACf,OAAQ,CAAE,EACV,GAAIA,EAAM,EACX,GAEHD,EAAoBrD,CAAG,EAAE,OAAO,KAAKsD,EAAM,KAAK,CACpD,CAEE,MAAMC,EAAU,OAAO,OAAOF,CAAmB,EACjD,GAAIE,EAAQ,SAAW,GAAKA,EAAQ,CAAC,EAAE,OAAO,SAAW,EAAG,CAE1D,MAAMtE,EAAQsE,EAAQ,CAAC,EACvB,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,gDAAiD,CACtF,GAAItE,EAAM,GACV,SAAUmE,EAAqBnE,EAAM,SAAUA,EAAM,OAAO,CAClE,CAAK,CAAC,CACN,KAAS,CAEL,MAAMuE,EAAW,CAAE,EACnB,UAAWvE,KAASsE,EAAS,CAC3B,MAAME,EAAkBL,EAAqBnE,EAAM,SAAUA,EAAM,OAAO,EACpEyE,EAAazE,EAAM,OAAO,KAAK,IAAI,EACzCuE,EAAS,KAAK,GAAGC,CAAe,KAAKC,CAAU,GAAG,CACxD,CAEI,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,yDAA0D,CAC/F,GAAIH,EAAQ,CAAC,EAAE,GACf,SAAUC,EAAS,KAAK,IAAI,CAClC,CAAK,CAAC,CACN,CACA,CAOO,SAASG,GAAelI,EAAO,CACpC,MAAMC,EAAYD,EAAM,WAAa,CAAE,EAEvC,SAAW,CAAChG,EAAQkG,CAAK,IAAK,OAAO,QAAQD,CAAS,EACpD,GAAIC,GAAS,MAAM,0BAA0B,MAAO,CAClD,MAAMzF,EAAO,KAAK,MAAM,IAAIT,CAAM,EAClC,GAAIS,GAAQ,CAACA,EAAK,KAChB,OAAOA,CAEf,CAGE,OAAO,IACT,CAsBO,SAAS0N,GAAkBC,EAAU3N,EAAO,KAAK,KAAM,CACvD2N,GAAA,MAAAA,EAAU,QAEfA,EAAS,QAAQ,CAACzL,EAAI8G,IAAU,CAC9BvK,EAAQ,IAAI,oBAAqB,CAACyD,EAAI,OAAO,OAAO,WAAW,IAAI0L,GAAKA,EAAE,EAAE,CAAC,CAAC,EAC9E,MAAMC,EAAQ,OAAO,OAAO,WAAW,KAAKD,GAAKA,EAAE,KAAO1L,CAAE,EACxD2L,EACFA,EAAM,UAAU,GAAM,CAAE,cAAe7E,IAAU,EAAG,EAEpDvK,EAAQ,KAAK,uCAAwC,CAACyD,CAAE,CAAC,CAE/D,CAAG,CAQH,CAkCO,SAAS4L,GAAcvI,EAAO,CAEnC,OAAIA,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAc,GAExD,OAAO,QAAQA,EAAM,SAAS,EAClC,KAAK,CAAC,CAAChG,EAAQkG,CAAK,IAAM,CACzB,MAAMzF,EAAO,KAAK,MAAM,IAAIT,CAAM,EAClC,OAAOS,GAAQ,CAACA,EAAK,MAAQyF,GAAS,MAAM,0BAA0B,KAC5E,CAAK,CACL,CAOO,SAASsI,GAAgBxI,EAAO,CAErC,GAAIA,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAO,MAAO,GAE/D,MAAMyI,EAAe,KAAK,OAAO,OACjC,OAAOA,GAAgBA,EAAa,OAAO,KAAKH,GAASA,EAAM,UAAYtI,EAAM,EAAE,CACrF,CAOO,SAAS0I,GAA2BC,EAASC,EAAUC,EAAU,KAAM,CAE5E,GAAI,CADU,KAAK,OAAO,OACd,OAEZ,IAAIC,EACJ,GAAID,EAAS,CACX,MAAME,EAAgB,OAAO,OAAO,WAAW,KAAKV,GAAKA,EAAE,KAAOQ,CAAO,EACzEC,EAASC,EAAgB,CAACA,CAAa,EAAI,CAAE,CACjD,MACID,EAAS,OAAO,OAAO,WAAW,OAAOT,GAAC,CZlOvC,IAAArP,EYkO2C,QAAAA,EAAAqP,EAAE,QAAF,YAAArP,EAAS,MAAO2P,EAAO,EAGvE,UAAWL,KAASQ,EACdF,EACFN,EAAM,QAAQ,CAAE,cAAe,EAAK,CAAE,EAEtCA,EAAM,QAAS,CAGrB,CAOO,SAASpN,GAAM8N,EAAI,CACxB,OAAO,IAAI,QAAQC,GAAW,WAAWA,EAASD,CAAE,CAAC,CACvD,CAMO,SAASE,IAAoB,CZ3P7B,IAAAlQ,EY4PL,QAAOA,EAAA,mBAAI,UAAJ,YAAAA,EAAa,WAAY,EAClC,CAMO,SAASmQ,GAAmBC,EAAY,CAC7C,MAAM9N,EAAO,SAAS,cAAc,MAAM,EACtC8N,EACF9N,EAAK,UAAU,IAAI,0BAA0B,EAE7CA,EAAK,UAAU,OAAO,0BAA0B,EAElD+N,GAAkB,CACpB,CAQO,SAASC,GAAeC,EAAqBC,EAAgB,CZnR7D,IAAAxQ,EAAAwB,EYoRL,MAAMiP,EAAY,CAAE,EAEpB,GAAI,CAACF,EACH,OAAOE,EAGT,MAAMC,EAAiBvR,EAAO,qBAAqBoR,CAAmB,EACtE,GAAI,CAACG,GAAkB,CAACA,EAAe,QACrC,OAAOD,EAGT,MAAME,EAAa,OAAO,MAAMD,EAAe,OAAO,EAEtD,GAAIC,EAAY,CACd,SAAW,CAACpF,EAAK7L,CAAI,IAAK,OAAO,QAAQiR,CAAU,EAAG,CACpD,IAAIC,EAAQlR,EAAK,OAASA,EAAK,MAAQ6L,EAEvC,GAAImF,EAAe,UAAY,WAAWlP,GAAAxB,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,MAAAwB,EAAuC+J,IAAM,CACrF,MAAMgD,EAAW,OAAO,MAAM,iBAAiB,MAAMhD,CAAG,EACxD,GAAIgD,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAMC,EAAW,MAAM,UAAU,MAAM,YAAYD,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFqC,GAAQpC,GAAA,YAAAA,EAAU,OAAQoC,CACpC,CACA,CAEMH,EAAU,KAAK,CACb,GAAIlF,EACJ,KAAMqF,EACN,SAAU,EAClB,CAAO,CACP,CAEIH,EAAU,KAAK,CAACvF,EAAGzH,IAAMyH,EAAE,KAAK,cAAczH,EAAE,IAAI,CAAC,CACzD,CAEE,OAAOgN,CACT,CAKO,MAAMI,EAAN,MAAMA,CAAoB,CAa/B,OAAO,OAAOC,EAAMC,EAAShR,EAAU,CAAA,EAAI,CACzC,GAAI,CAACA,EAAQ,MAAO,CAClB,GAAG,cAAc+Q,CAAI,EAAEC,CAAO,EAC9B,MACN,CAEQhR,EAAQ,YACV8Q,EAAoB,qBAAqB,KAAK9Q,EAAQ,SAAS,EAE3D8Q,EAAoB,mBACtB,aAAaA,EAAoB,iBAAiB,EAGpDA,EAAoB,kBAAoB,WAAW,IAAM,CACvDpC,GAAyBoC,EAAoB,oBAAoB,EACjEA,EAAoB,qBAAuB,CAAE,EAC7CA,EAAoB,kBAAoB,IAChD,EAASA,EAAoB,wBAAwB,EAErD,CAOE,OAAO,uBAAuBG,EAAkBC,EAAc,CAC5D,MAAMC,EAAqB,OAAO,QAAQF,CAAgB,EAE1D,GAAIE,EAAmB,SAAW,EAGlC,GAAIA,EAAmB,SAAW,EAAG,CACnC,MAAMC,EAAa,OAAO,OAAOH,CAAgB,EAAE,CAAC,EAC9C/B,EAAakC,EAAW,OAAO,IAAI,GAAK,EAAE,IAAI,EAAE,KAAK,IAAI,EAC/D,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,mDAAoD,CACzF,SAAUF,EACV,OAAQhC,EACR,OAAQkC,EAAW,OAAO,IAClC,CAAO,CAAC,CACR,KAAW,CAEL,MAAMC,EAAkBF,EAAmB,IAAI,CAAC,CAACG,EAAU3R,CAAI,IAAM,CACnE,MAAMuP,EAAavP,EAAK,OAAO,IAAIwL,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,EACzD,MAAO,GAAGxL,EAAK,OAAO,IAAI,KAAKuP,CAAU,GACjD,CAAO,EACD,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,qDAAsD,CAC3F,SAAUgC,EACV,MAAOC,EAAmB,OAC1B,QAASE,EAAgB,KAAK,IAAI,CAC1C,CAAO,CAAC,CACR,CACA,CAKE,OAAO,cAAe,CAChBP,EAAoB,oBACtB,aAAaA,EAAoB,iBAAiB,EAClDA,EAAoB,kBAAoB,MAE1CA,EAAoB,qBAAuB,CAAE,CACjD,CACA,EA5EE5Q,EADW4Q,EACJ,uBAAuB,CAAE,GAChC5Q,EAFW4Q,EAEJ,oBAAoB,MAC3B5Q,EAHW4Q,EAGJ,2BAA2B,KAH7B,IAAMS,EAANT,EAoFA,SAASU,GAA0BC,EAAQ,CZjZ3C,IAAAxR,EYkZL,MAAMyR,EAA0B,CAAE,EAC5BC,EAA2B,CAAE,EAEnC,UAAW1K,KAASwK,EAAQ,CAC1B,MAAMG,IAAK3R,EAAAgH,EAAM,OAAO,WAAW,KAAxB,YAAAhH,EAA4B,QAAS,EAC1C4R,EAAa5K,EAAM,OAAO,WAAW,OAAS,CAAE,EAChD6K,EAAYD,EAAW,SAAW,EAClCE,EAAWF,EAAW,SAAW,EAGnCD,GAAM,GAAKE,EAAY,GAAKC,EAAW,EACzCL,EAAwB,KAAKzK,CAAK,EAElC0K,EAAyB,KAAK1K,EAAM,IAAI,CAE9C,CAGE,OAAI0K,EAAyB,OAAS,GACpCJ,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,oDAAqD,CACvG,OAAQI,EAAyB,KAAK,IAAI,CAChD,CAAK,CAAC,EAGGD,CACT,CAOO,SAASM,GAA4BP,EAAQ,CAClD,MAAMQ,EAAW,CAAE,EACbC,EAAY,CAAE,EAEpB,UAAWjL,KAASwK,EAAQ,CAC1B,MAAMU,EAAQhD,GAAelI,CAAK,EAC9BkL,EACFF,EAAS,KAAK,CAAE,MAAAhL,EAAO,MAAAkL,CAAK,CAAE,EAE9BD,EAAU,KAAKjL,CAAK,CAE1B,CAEE,MAAO,CAAE,SAAAgL,EAAU,UAAAC,CAAW,CAChC,CAiBO,SAAS5B,GAAiBD,EAAW,GAAK,CAC/C,MAAM+B,EAAsB,SAAS,cAAc,mCAAmC,EAChFC,EAAgBD,EAAsBvQ,EAAY,aAAauQ,CAAmB,EAAI,GACtFE,EAAe,WAAS,cAAc,kBAAkB,EAE9DzQ,EAAY,WAAW,6BAA8ByQ,EAAeD,EAAgBA,EAAgB,IAAM,IAAI,CAChH,CAOO,SAASE,GAAaC,EAAS,CZ9d/B,IAAAvS,EAAAwB,EY+dL,MAAMwF,EAAQ,KAAK,OAAO,IAAIuL,CAAQ,EACtC,GAAIvL,EAAO,OAAOA,EAClB,MAAMsI,GAAQtP,EAAA,OAAO,SAAP,YAAAA,EAAe,IAAIuS,GAC3BC,GAAWhR,EAAA,KAAK,OAAO,SAAZ,YAAAA,EAAoB,OAAO,IAAI+Q,GAEhD,OAAOvL,IAASsI,GAAA,YAAAA,EAAO,SAASkD,GAAA,YAAAA,EAAU,QAAS,IACrD,CC5dO,MAAMC,EAAc,CAOzB,oBAAoBjG,EAAQkG,EAAa,CbhBpC,IAAA1S,EaiBH,OAAAE,EAAQ,IAAI,8BAA+B,CAACwS,EAAalG,CAAM,CAAC,EAC5DkG,KAAe1S,EAAAwM,EAAO,QAAP,MAAAxM,EAAe,MAE3BwM,EAAO,MAAM,CAAC,EAAE,QAAOA,EAAO,MAAM,CAAC,EAAE,MAAQ,CAAE,GACjDA,EAAO,MAAM,CAAC,EAAE,OAAMA,EAAO,MAAM,CAAC,EAAE,KAAO,CAAE,GAEpDA,EAAO,MAAM,CAAC,EAAE,KAAK,YAAckG,EAG9BlG,EAAO,MAAM,CAAC,EAAE,MAAM,SAAS,cAAc,GAChDA,EAAO,MAAM,CAAC,EAAE,MAAM,KAAK,cAAc,EAE3CtM,EAAQ,IAAI,6BAA8B,CAACsM,CAAM,CAAC,GAG7CA,CACR,EAkBD,gBAAgBmG,EAAaC,EAAYC,EAAmB,CAAA,EAAI,CbnD3D,IAAA7S,EaqDH,MAAMwM,EAAS,CACb,MAAO,CAAC,CACN,MAAOoG,EAAW,OAAS,CAAE,EAC7B,KAAMA,EAAW,MAAQ,CAAE,EAC3B,QAAS,CACP,GAAGA,EAAW,SAAW,CAAE,EAE3B,KAAI5S,EAAA4S,EAAW,UAAX,YAAA5S,EAAoB,kBAAmB,CAAE,gBAAiB,EAAM,CAC9E,CACA,CAAO,EACD,UAAW2S,EAAY,OAAO,WAAa,GAC3C,aAAcA,EAAY,OAAO,cAAgB,GACjD,OAAQA,EAAY,OAAO,OAC3B,QAAS,KACT,YAAa,GACb,OAAQ,GAER,GAAIA,EAAY,OAAO,UAAY,CAAE,SAAUA,EAAY,OAAO,UAClE,GAAGE,CACJ,EAEKH,EAAcC,EAAY,OAAO,YACvC,OAAID,GACF,KAAK,oBAAoBlG,EAAQkG,CAAW,EAGvC,KAAK,gBAAgBlG,EAAQmG,CAAW,CAChD,EAUD,gBAAgBnG,EAAQmG,EAAa,CACnC,OAAAnG,EAAO,cAAgB,MAAK,KAAK,KACjCA,EAAO,iBAAmB,GAC1BA,EAAO,aAAemG,EAAY,OAAO,aAAe,KAEjDnG,CACR,EAOD,eAAegF,EAAQ,CACrB,MAAI,CAACA,GAAUA,EAAO,SAAW,EAAU,MAGvC,OAAOA,EAAO,CAAC,GAAM,WACvBA,EAASA,EAAO,IAAI7B,GAAW,KAAK,OAAO,IAAIA,CAAO,CAAC,EAAE,OAAOzE,GAAKA,CAAC,GAGjEsG,EAAO,OAAS,EAAIA,EAAS,KACrC,EAOD,aAAa1F,EAAU,CACrB,MAAMgH,EAAiBhH,GAAA,YAAAA,EAAU,cAEjC,MAAI,CAAC7M,EAAW,OAAQA,EAAW,OAAO,EAAE,SAAS6T,CAAc,EAC1D,OAAO,KAAK,YAAc,OAAO,KAAK,UACpC,CAAC7T,EAAW,QAASA,EAAW,OAAQA,EAAW,OAAO,EAAE,SAAS6T,CAAc,EACrF,OAAO,KAAK,UAGd,OAAO,KAAK,OACpB,EAOD,aAAahH,EAAU,CACrB,MAAMgH,EAAiBhH,GAAA,YAAAA,EAAU,cACjC,MAAO,CACL7M,EAAW,KACXA,EAAW,aACXA,EAAW,QACXA,EAAW,cACXA,EAAW,cACXA,EAAW,MACXA,EAAW,IACjB,EAAM,SAAS6T,CAAc,CAC1B,EASD,qBAAqB9L,EAAO8E,EAAUuC,EAAS,CAC7C,MAAMyE,EAAiBhH,GAAA,YAAAA,EAAU,cAE3B8G,EAAa,CACjB,KAAM5L,EAAM,YAAa,EACzB,QAASA,EACT,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMA,EAAM,YAAa,EACzB,QAAS,CAAA,CACV,CAAA,CACF,EAED,OAAQ8L,EAAc,CACpB,KAAK7T,EAAW,MACd2T,EAAW,MAAQvE,EACnB,MACF,KAAKpP,EAAW,KACd2T,EAAW,KAAOvE,EAClB,MACF,KAAKpP,EAAW,KAChB,KAAKA,EAAW,aAChB,KAAKA,EAAW,QAChB,KAAKA,EAAW,cACd2T,EAAW,QAAUvE,EACrB,MACF,KAAKpP,EAAW,QACd2T,EAAW,MAAM,CAAC,EAAE,QAAQ,OAAS,UACrC,KACR,CAEI,OAAOA,CACR,EAQD,oBAAoB5L,EAAO+L,EAAW,KAAM,CAC1C,MAAMvG,EAAS,CACb,OAAQ,GACR,KAAM,CACJ,QAAS,YAAY,WAAW,CAAE,MAAAxF,CAAO,CAAA,CACjD,CACK,EAED,OAAI+L,IACFvG,EAAO,SAAWuG,GAGbvG,CACR,EAUD,MAAM,kBAAkBwG,EAAaJ,EAAYK,EAAeC,EAAe,CAC7E,MAAMvF,EAAM,IAAIqF,EAAYJ,EAAYK,EAAeC,CAAa,EAgBpE,OAde,MAAM,IAAI,QAAQjD,GAAW,CAC1CtC,EAAI,iBAAiB,QAAS,IAAM,CAClCsC,EAAQ,CACN,MAAOtC,EAAI,MACX,OAAQA,EAAI,OACZ,QAASA,EAAI,QACb,YAAaA,EAAI,YACjB,SAAUA,EAAI,OAAO,SACrB,WAAYA,EAAI,OAAO,UACjC,CAAS,CACT,EAAS,CAAE,KAAM,GAAM,EACjBA,EAAI,OAAO,CAAE,MAAO,EAAI,CAAE,CAChC,CAAK,CAGF,EAWD,oBAAoBrN,EAAQkR,EAAQ1F,EAAUuC,EAAStO,EAAU,GAAI,CbxPhE,IAAAC,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,Ea0PH,GAAI,EAACrM,GAAA,MAAAA,EAAQ,QAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAExD,MAAMwS,EAAiBhH,GAAA,YAAAA,EAAU,cAC3BqH,EAAY7S,EAAO,MAAM,CAAC,EAGhC,IAAI8S,EAAY,GACZC,EAAe,KAEfrT,EAAAmT,GAAA,YAAAA,EAAW,UAAX,YAAAnT,EAAoB,iBAAkB,SACxCoT,EAAYD,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,UAC7EE,EAAeF,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,cAIlF,MAAMT,IAAclR,EAAA2R,GAAA,YAAAA,EAAW,OAAX,YAAA3R,EAAiB,cAAe,GAC9C8R,GAASzJ,EAAAsJ,GAAA,YAAAA,EAAW,UAAX,YAAAtJ,EAAoB,OAG7B0J,EAAoB,CACxB,MAAO,CAAC,CACN,QAAO9G,EAAA0G,GAAA,YAAAA,EAAW,QAAX,YAAA1G,EAAkB,UAAW,CAAE,EACtC,KAAMiG,EAAc,CAAE,YAAAA,CAAW,EAAK,CAAE,EACxC,QAASY,EAAS,CAAE,OAAAA,GAAW,CAAA,CACvC,CAAO,EACD,QAAS9B,EAAO,CAAC,EACjB,UAAA4B,EACA,aAAAC,EACA,OAAAC,EACA,YAAahT,EAAO,YACpB,cAAeA,EAAO,YACtB,eAAgBP,EAAQ,gBAAkB,GAC1C,YAAa,EACd,EAEKqH,EAAWxI,EAAa,EACxB4U,EAAkBlM,EAAa,IAAIF,EAAS,kBAAkB,GAAG,IAAM,GACvE2L,EAAW,KAAK,kBAAkBS,GAAiB9G,EAAApM,EAAO,UAAP,YAAAoM,EAAgB,QAAQ,EACjF,OAAA6G,EAAkB,SAAWR,GAEzBpG,EAAArM,EAAO,SAAP,MAAAqM,EAAe,SAAW,CAAC1N,EAAW,MAAOA,EAAW,IAAI,EAAE,SAAS6T,CAAc,IACvFS,EAAkB,QAAUjT,EAAO,OAAO,SAGrCiT,CACR,EAQD,kBAAkBC,EAAiBC,EAAiB,CAElD,OAAIA,IAKGD,EACL,MAAM,gBAAgB,OACtB,KAAK,SAAS,IAAI,OAAQ,UAAU,EACvC,EAOD,cAAcxM,EAAO,CACnB,OAAO,OAAO,QAAQA,EAAM,SAAS,EAClC,KAAK,CAAC,CAAChG,EAAQkG,CAAK,IAAM,CACzB,MAAMzF,EAAO,KAAK,MAAM,IAAIT,CAAM,EAClC,OAAOS,GAAQ,CAACA,EAAK,MAAQyF,GAAS,MAAM,0BAA0B,KAC9E,CAAO,CACJ,EAOD,oBAAoBF,EAAO,CACzB,MAAM0M,EAAcxE,GAAelI,CAAK,EACxC,OAAO0M,GAAeA,EAAY,MACnC,EAYD,sBAAsBC,EAAaC,EAAI,CACrC,MAAM/B,EAAY8B,EAAY,OAAOtT,GAAKA,EAAE,OAASuT,CAAE,EAAE,OACnD9B,EAAW6B,EAAY,OAAS9B,EAChCgC,EAAgB,KAAK,KAAKF,EAAY,OAAS,CAAC,EAEtD,MAAO,CACL,YAAa9B,GAAagC,EAC1B,UAAAhC,EACA,SAAAC,EACA,QAAS,KAAK,KAAK,OAAO,6CAA8C,CACtE,UAAAD,EACA,MAAO8B,EAAY,OACnB,UAAWE,CACnB,CAAO,EACD,OAAQ,eACT,CACF,EAQD,sBAAsBF,EAAaC,EAAI,CACrC,MAAME,EAAMH,EAAY,OAAO,CAACI,EAAK1T,IAAM0T,EAAM1T,EAAE,MAAO,CAAC,EACrD2T,EAAU,KAAK,MAAMF,EAAMH,EAAY,MAAM,EAEnD,MAAO,CACL,YAAaK,EACb,QAAAA,EACA,QAASA,GAAWJ,EACpB,QAAS,KAAK,KAAK,OAAO,6CAA8C,CACtE,QAAAI,EACA,GAAAJ,CACR,CAAO,EACD,OAAQ,eACT,CACF,EAWD,wBAAwBD,EAAaC,EAAIpC,EAAQ1F,EAAUuC,EAAS,Cb7Y/D,IAAArO,Ea8YH,IAAIiU,EAAkB,KAClBC,EAAgB,KAChBC,EAAiB,EAErB,UAAWnN,KAASwK,EAAQ,CAC1B,MAAM4C,EAAW,KAAK,kBAAkBpN,EAAO8E,EAAUuC,CAAO,EAC5D+F,EAAWH,IACbA,EAAkBG,EAClBF,EAAgBlN,EAAM,GACtBmN,EAAiBC,EAEzB,CAEI,MAAMC,EAAeV,EAAY,KAAKtT,GAAKA,EAAE,UAAY6T,CAAa,EACtE,GAAI,CAACG,EACH,MAAO,CACL,YAAa,EACb,MAAO,4BACP,OAAQ,kBACT,EAIH,MAAMC,EAAeX,EAAY,OAAOtT,GAAKA,EAAE,UAAY6T,CAAa,EAClErC,EAAYyC,EAAa,OAAOjU,GAAKA,EAAE,OAASuT,CAAE,EAAE,OACpD9B,EAAWwC,EAAa,OAAOjU,GAAKA,EAAE,MAAQuT,CAAE,EAAE,OAClDW,EAAiBF,EAAa,MAAQxC,EAAYC,EAExD,MAAO,CACL,YAAayC,EACb,WAAYF,EAAa,MACzB,YAAYrU,EAAAwR,EAAO,KAAKtG,GAAKA,EAAE,KAAOgJ,CAAa,IAAvC,YAAAlU,EAA0C,KACtD,eAAAmU,EACA,MAAOtC,EACP,QAASC,EACT,QAASyC,GAAkBX,EAC3B,QAAS,KAAK,KAAK,OAAO,+CAAgD,CACxE,WAAYS,EAAa,MACzB,MAAOxC,EACP,QAASC,EACT,eAAAyC,EACA,GAAAX,CACR,CAAO,EACD,OAAQ,kBACT,CACF,EAWD,qBAAqBD,EAAaC,EAAIpC,EAAQ1F,EAAUuC,EAAS,Cbtc5D,IAAArO,EaucH,IAAIwU,EAAiB,IACjBC,EAAiB,KACjBC,EAAuB,EAE3B,UAAW1N,KAASwK,EAAQ,CAC1B,MAAM4C,EAAW,KAAK,kBAAkBpN,EAAO8E,EAAUuC,CAAO,EAC5D+F,EAAWI,IACbA,EAAiBJ,EACjBK,EAAiBzN,EAAM,GACvB0N,EAAuBN,EAE/B,CAEI,MAAMO,EAAgBhB,EAAY,KAAKtT,GAAKA,EAAE,UAAYoU,CAAc,EACxE,GAAI,CAACE,EACH,MAAO,CACL,YAAa,EACb,MAAO,kCACP,OAAQ,cACT,EAIH,MAAM9C,EAAY8B,EAAY,OAAOtT,GAAKA,EAAE,UAAYoU,GAAkBpU,EAAE,OAASuT,CAAE,EAAE,OACnFW,EAAiBI,EAAc,MAAQ9C,EAEvC+C,EAAc/C,IAAc,EAChC,KAAK,KAAK,SAAS,mDAAmD,EACtE,KAAK,KAAK,SAAS,iDAAiD,EAEtE,MAAO,CACL,YAAa0C,EACb,YAAaI,EAAc,MAC3B,aAAa3U,EAAAwR,EAAO,KAAKtG,GAAKA,EAAE,KAAOuJ,CAAc,IAAxC,YAAAzU,EAA2C,KACxD,gBAAiB0U,EACjB,MAAO7C,EACP,QAAS0C,GAAkBX,EAC3B,QAAS,KAAK,KAAK,OAAO,4CAA6C,CACrE,YAAae,EAAc,MAC3B,MAAO9C,EACP,YAAA+C,EACA,eAAAL,EACA,GAAAX,CACR,CAAO,EACD,OAAQ,cACT,CACF,EAUD,kBAAkB5M,EAAO8E,EAAUuC,EAAS,Cb/fvC,IAAArO,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EakgBH,OAFuBd,GAAA,YAAAA,EAAU,cAEX,CACpB,KAAK7M,EAAW,MACd,QAAOe,EAAAgH,EAAM,OAAO,OAAOqH,CAAO,IAA3B,YAAArO,EAA8B,UAC9BwB,EAAAwF,EAAM,OAAO,OAAOqH,CAAO,IAA3B,YAAA7M,EAA8B,MAAO,EAE9C,KAAKvC,EAAW,KAChB,KAAKA,EAAW,aAEd,QAAOwN,GAAA5C,EAAA7C,EAAM,OAAO,UAAUqH,CAAO,IAA9B,YAAAxE,EAAiC,OAAjC,YAAA4C,EAAuC,UACvCC,EAAA1F,EAAM,OAAO,UAAUqH,CAAO,IAA9B,YAAA3B,EAAiC,OAAQ,EAElD,KAAKzN,EAAW,QAChB,KAAKA,EAAW,cACd,QAAO0N,EAAA3F,EAAM,OAAO,UAAUqH,CAAO,IAA9B,YAAA1B,EAAiC,MAAO,EAEjD,KAAK1N,EAAW,KACd,IAAI2N,EAAA5F,EAAM,OAAO,QAAb,MAAA4F,EAAqByB,GACvB,OAAOrH,EAAM,OAAO,MAAMqH,CAAO,EAAE,OAC5BrH,EAAM,OAAO,MAAMqH,CAAO,EAAE,KAAO,EAE5C,MAAMwG,EAAO7N,EAAM,MAAM,KAAKe,GAC5BA,EAAE,OAAS,QACXA,EAAE,OAAO,WAAasG,CACvB,EACD,OAAOwG,GAAA,YAAAA,EAAM,OAAO,QAAS,EAE/B,QACE,MAAO,EACf,CACG,EAWD,eAAelB,EAAaC,EAAIpC,EAAQ1F,EAAUuC,EAAS,CAGzD,GAAI,CAFasF,EAAY,MAAMtT,GAAKA,EAAE,QAAU,MAAQA,EAAE,QAAU,MAAS,EAG/E,MAAO,CACL,SAAU,GACV,QAAS,GACT,OAAQ,CACT,EAGH,MAAM+G,EAAWxI,EAAa,EACxBkW,EAAaxN,EAAa,IAAIF,EAAS,oBAAoB,GAAG,GAAK,EAEzE,IAAI2N,EAEJ,OAAQD,EAAU,CAChB,IAAK,GACH,OAAAC,EAAoB,KAAK,sBAAsBpB,EAAaC,CAAE,EACvD,CACL,SAAU,GACV,QAASmB,EAAkB,YAC3B,OAAQA,EAAkB,YAAc,EAAI,EAC5C,QAASA,CACV,EAEH,IAAK,GACH,OAAAA,EAAoB,KAAK,sBAAsBpB,EAAaC,CAAE,EACvD,CACL,SAAU,GACV,QAASmB,EAAkB,QAC3B,OAAQA,EAAkB,YAC1B,QAASA,CACV,EAEH,IAAK,GACH,OAAAA,EAAoB,KAAK,wBAAwBpB,EAAaC,EAAIpC,EAAQ1F,EAAUuC,CAAO,EACpF,CACL,SAAU,GACV,QAAS0G,EAAkB,QAC3B,OAAQA,EAAkB,YAC1B,QAASA,CACV,EAEH,IAAK,GACH,OAAAA,EAAoB,KAAK,qBAAqBpB,EAAaC,EAAIpC,EAAQ1F,EAAUuC,CAAO,EACjF,CACL,SAAU,GACV,QAAS0G,EAAkB,QAC3B,OAAQA,EAAkB,YAC1B,QAASA,CACV,EAEH,QACE,OAAAA,EAAoB,KAAK,sBAAsBpB,EAAaC,CAAE,EACvD,CACL,SAAU,GACV,QAASmB,EAAkB,YAC3B,OAAQA,EAAkB,YAAc,EAAI,EAC5C,QAASA,CACV,CACT,CACA,CACA,ECnmBM,CAAA,cAAEvM,GAAa,2BAAEC,EAA0B,EAAK,QAAQ,aAAa,IACpE,MAAMuM,WAAyBvM,GAA2BD,EAAa,CAAE,CAC9E,YAAYzI,EAAU,GAAI,CACxB,MAAMA,CAAO,EACb,KAAK,QAAUA,EAAQ,SAAW,GAClC,KAAK,SAAWA,EAAQ,UAAY,GACpC,KAAK,MAAQA,EAAQ,MACrB,KAAK,SAAWA,EAAQ,SACxB,KAAK,WAAa,CAAE,CACxB,CAKE,WAAW,iBAAkB,CAC3B,OAAO,QAAQ,MAAM,YAAY,MAAM,gBAAiB,CACtD,GAAI,6BACJ,QAAS,CAAC,iBAAkB,4BAA4B,EACxD,IAAK,MACL,OAAQ,CACN,MAAO,yCACP,KAAM,kBACN,UAAW,GACX,WAAY,GACZ,MAAO,EACR,EACD,SAAU,CACR,MAAO,IACP,OAAQ,MAChB,CACA,CAAK,CACL,CAKE,eAAeiL,EAAOsI,EAAQ,CAE5B,OADeA,EAAO,QAAQ,OAChB,CACZ,IAAK,WACH,OAAO,KAAK,SAAStI,EAAOsI,CAAM,EACpC,IAAK,SACH,OAAO,KAAK,OAAOtI,EAAOsI,CAAM,EAClC,IAAK,SACH,OAAO,KAAK,OAAOtI,EAAOsI,CAAM,CACxC,CACA,CAKE,MAAM,gBAAgBvT,EAAU,GAAI,CAElC,MAAO,CACL,GAFc,MAAM,MAAM,gBAAgBA,CAAO,EAGjD,QAAS,KAAK,QACd,SAAU,KAAK,QAChB,CACL,CAiBE,qBAAqB6J,EAAQqL,EAAalV,EAAS,CACjD,MAAM,qBAAqB6J,EAAQqL,EAAalV,CAAO,EAEvD,MAAMmV,EAAeD,EAAY,cAAc,sBAAsB,EAC/DE,EAAoBF,EAAY,cAAc,6BAA6B,EAE7EC,GAAgB,CAAC,KAAK,WACxBA,EAAa,iBAAiB,QAAUlK,GAAU,CAChD,KAAK,QAAUA,EAAM,OAAO,MAAM,KAAM,EACxC,KAAK,wBAAwBmK,CAAiB,CACtD,CAAO,EAEG,KAAK,SACP,KAAK,wBAAwBA,CAAiB,EAGtD,CAME,wBAAwBC,EAAgB,CACtC,GAAI,CAACA,EAAgB,OAErB,GAAI,CAAC,KAAK,QAAS,CACjBA,EAAe,YAAc,SAC7BA,EAAe,UAAU,OAAO,QAAS,SAAS,EAClD,MACN,CAEoB,KAAK,gBAAgB,KAAK,OAAO,GAG/CA,EAAe,YAAc,KAAK,KAAK,SAAS,qCAAqC,EACrFA,EAAe,UAAU,OAAO,OAAO,EACvCA,EAAe,UAAU,IAAI,SAAS,IAEtCA,EAAe,YAAc,KAAK,KAAK,SAAS,uCAAuC,EACvFA,EAAe,UAAU,OAAO,SAAS,EACzCA,EAAe,UAAU,IAAI,OAAO,EAE1C,CAOE,OAAOpK,EAAOsI,EAAQ,CACpB,MAAM+B,EAAM/B,EAAO,QAAQ,IAErB4B,EAAe,KAAK,QAAQ,cAAc,sBAAsB,EACtE,GAAI,CAACA,EAAc,OAEnB,MAAMI,EAAiBJ,EAAa,MAAM,KAAM,EAEhD,GAAII,EAAgB,CAClB,MAAMC,EAAY,eACZC,EAAU,IAAI,IAEpB,IAAIC,EAAmBH,EACnBrR,EAEJ,MAAQA,EAAQsR,EAAU,KAAKD,CAAc,KAAO,MAAM,CACxD,MAAMI,EAAQ,SAASzR,EAAM,CAAC,GAAK,GAAG,EAChC0R,EAAU1R,EAAM,CAAC,EACvBuR,EAAQ,IAAIG,GAAUH,EAAQ,IAAIG,CAAO,GAAK,GAAKD,CAAK,EACxDD,EAAmBA,EAAiB,QAAQxR,EAAM,CAAC,EAAG,EAAE,EAAE,KAAM,CACxE,CAEM,MAAM2R,EAAaP,EAAI,UAAU,CAAC,EAClCG,EAAQ,IAAII,GAAaJ,EAAQ,IAAII,CAAU,GAAK,GAAK,CAAC,EAE1D,MAAMC,EAAY,CAAE,EACpB,SAAW,CAACF,EAASD,CAAK,IAAKF,EAC7BK,EAAU,KAAK,GAAGH,CAAK,IAAIC,CAAO,EAAE,EAGtCF,EAAmBA,EAAiB,QAAQ,+BAAgC,EAAE,EAAE,KAAM,EAElFA,GAAoBA,IAAqB,IAC3C,KAAK,QAAU,GAAGI,EAAU,KAAK,KAAK,CAAC,MAAMJ,CAAgB,GAE7D,KAAK,QAAUI,EAAU,KAAK,KAAK,CAE3C,MACM,KAAK,QAAU,IAAIR,CAAG,GAExBH,EAAa,MAAQ,KAAK,QAE1BA,EAAa,cAAc,IAAI,MAAM,OAAO,CAAC,CACjD,CAOE,gBAAgBY,EAAS,CdpLpB,IAAA9V,EcqLH,GAAI,CAAC8V,GAAWA,EAAQ,KAAI,IAAO,GAAI,MAAO,GAE9C,GAAI,CACF,OAAO,KAAK,SAASA,CAAO,CAC7B,MAAe,CACd,GAAI,CACF,WAAI,KAAKA,IAAS9V,EAAA,KAAK,QAAL,YAAAA,EAAY,gBAAiB,EAAE,EAC1C,EACR,MAAW,CACV,MAAO,EACf,CACA,CACA,CAKE,MAAM,UAAW,CAEf,GADAE,EAAQ,IAAI,UAAU,EAClB,CAAC,KAAK,gBAAgB,KAAK,OAAO,EAAG,CACvC,GAAG,cAAc,MAAM,KAAK,KAAK,OAAO,2CAA4C,CAClF,QAAS,KAAK,SAAW,OACjC,CAAO,CAAC,EACF,MACN,CAEQ,KAAK,UACP,MAAM,KAAK,SAAS,KAAK,OAAO,EAGlC,KAAK,MAAO,CAChB,CAKE,QAAS,CACP,KAAK,MAAO,CAChB,CAOE,aAAa,OAAOH,EAAU,GAAI,CAChC,OAAO,IAAI,QAASkQ,GAAY,CAC9B,MAAM8F,EAAS,IAAI,KAAK,CACtB,GAAGhW,EACH,SAAW+V,GAAY7F,EAAQ6F,CAAO,CAC9C,CAAO,EAEDC,EAAO,iBAAiB,QAAS,IAAM,CAChCA,EAAO,WACV9F,EAAQ,IAAI,CAEtB,CAAO,EAED8F,EAAO,OAAO,EAAI,CACxB,CAAK,CACL,CAKE,MAAM,MAAMhW,EAAU,GAAI,CACxB,YAAK,UAAY,GACV,MAAM,MAAMA,CAAO,CAC9B,CACA,CArLEE,EA9DW+U,GA8DJ,QAAQ,CACb,KAAM,CACJ,SAAU,WAAW7V,EAAO,EAAE,mCAC/B,EACD,OAAQ,CACN,SAAU,WAAWA,EAAO,EAAE,0CACpC,CACG,GChEI,MAAM6W,CAAiB,CAkC5B,aAAa,YAAa,CACxB9V,EAAQ,IAAI,6BAA6B,EACzC,MAAM,KAAK,gBAAiB,EAC5B,KAAK,uBAAwB,CACjC,CAKE,OAAO,wBAAyB,CAC9B,MAAM+V,EAA2B,CAACrI,EAAMmD,IAAY,CAClDnD,EAAK,iBAAiB,eAAe,EAAE,QAAQ3L,GAAW,CACxDA,EAAQ,iBAAiB,QAAU+I,GAAU,CAC3C,GAAIA,EAAM,OAAO,QAAQ,oBAAoB,EAC3C,OAGFA,EAAM,eAAgB,EACtBA,EAAM,gBAAiB,EAEvB,MAAMkL,EAAcjU,EAEpB/B,EAAQ,IAAI,qBAAsB,CAAC+B,CAAO,CAAC,EAEvCiU,EAAY,UAAU,SAAS,UAAU,EAC3CA,EAAY,UAAU,OAAO,UAAU,EAEvCA,EAAY,UAAU,IAAI,UAAU,CAEhD,CAAS,CACT,CAAO,EAEDtI,EAAK,iBAAiB,oBAAoB,EAAE,QAAQuI,GAAW,CAC7DA,EAAQ,iBAAiB,QAAS,MAAOnL,GAAU,Cf/EpD,IAAAhL,EegFGgL,EAAM,eAAgB,EACtBA,EAAM,gBAAiB,EACvBA,EAAM,yBAA0B,EAEhC,MAAMoL,EAAUD,EAAQ,QAClBxG,EAAUyG,EAAQ,QAClBpP,EAAQ,KAAK,OAAO,IAAI2I,CAAO,EAErC,GAAI,CAAC3I,EAAO,CACV,GAAG,cAAc,KAAK,iBAAiB,EACvC,MACZ,CAGU,GAAI,EADY,KAAK,KAAK,MAAQA,EAAM,SAC1B,CACZ,GAAG,cAAc,KAAK,yCAAyCA,EAAM,IAAI,EAAE,EAC3E,MACZ,CAEU,MAAM8E,GAAW9L,EAAAoW,EAAQ,OAAR,YAAApW,EAAc,cACzBqO,EAAU+H,EAAQ,QAClBC,EAAcD,EAAQ,YACtBxC,EAAKwC,EAAQ,GAAK,SAASA,EAAQ,EAAE,EAAI,KAE/ClW,EAAQ,IAAI,wBAAyB,CAAC4L,EAAUuC,EAASsB,EAAS0G,CAAW,CAAC,EAE9E,MAAM1D,EAAc,CAClB,QAAStE,EACT,YAAagI,EACb,OAAQ,CACN,UAAW,GACX,aAAc,GACd,OAAQzC,EACR,SAAU,KAAK,SAAS,IAAI,OAAQ,UAAU,CAC5D,CACW,EAGKnO,EAAe,CACnB,UAAW,GACX,cAAe,EAChB,EAEKwN,EAAgB,CACpB,SAAU,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC9C,OAAQ,GACR,cAAe,EAChB,EAEKL,EAAa,CACjB,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACV,EAED,GAAI,CACF,MAAM9R,EAAUwV,EAAaxK,CAAQ,EACrC,GAAIhL,EACF,MAAMA,EAAQkG,EAAO2L,EAAaC,EAAYnN,EAAcwN,CAAa,MACpE,CACL,IAAIsD,EACJ,OAAOzK,EAAQ,CACb,KAAK7M,EAAW,MACdsX,EAAa,YACb,MACF,KAAKtX,EAAW,QAChB,KAAKA,EAAW,cACdsX,EAAa,kBACb,MACF,KAAKtX,EAAW,KAChB,KAAKA,EAAW,aACdsX,EAAa,kBACb,MACF,KAAKtX,EAAW,KACdsX,EAAa,gBACb,MACF,QACE,GAAG,cAAc,KAAK,sBAAsBzK,CAAQ,EAAE,EACtD,MAClB,CAEkByK,GAAcvP,EAAMuP,CAAU,GAChC,MAAMvP,EAAMuP,CAAU,EAAElI,EAAS,CAC/B,GAAGsE,EAAY,OACf,eAAgB,CAAE,mCAAoC0D,CAAW,CACnF,CAAiB,CAEjB,CACW,OAAQlV,EAAO,CACdjB,EAAQ,MAAM,iCAAkCiB,CAAK,EACrD,GAAG,cAAc,MAAM,2BAA2BA,EAAM,OAAO,EAAE,CAC7E,CACA,CAAS,CACT,CAAO,EAGD,MAAMqV,EAAY5I,EAAK,cAAc,wBAAwB,EACvD6I,EAAU7I,EAAK,cAAc,WAAW,EAE9C,GAAI4I,EAAW,CACb,MAAME,EAAgBF,EAAU,QAAQ,gBAAkB,OAI1D,GAHK,KAAK,KAAK,OACbA,EAAU,MAAM,QAAU,QAExB,CAAC,KAAK,KAAK,MAAQ,CAACE,EAAe,CACrC,MAAMC,EAAqB/I,EAAK,cAAc,0CAA0C,EACpF+I,IACFA,EAAmB,MAAM,QAAU,OAE/C,CACA,CAEM,GAAIF,EACF,GAAI,CAAC,KAAK,KAAK,KACbA,EAAQ,SAAW,GACnBA,EAAQ,MAAM,OAAS,kBAClB,CACL,IAAIG,EAAgB,KAEpB,MAAMC,EAAiB,SAAY,CACjC,MAAMC,EAAQ,SAASL,EAAQ,KAAK,EAEpC,GAAI,CAACA,EAAQ,MAAO,OAEpB,GAAI,MAAMK,CAAK,GAAKA,EAAQ,GAAKA,EAAQ,GAAI,CAC3CL,EAAQ,MAAQ,GAChB,MACd,CAEY,MAAMM,EAAYN,EAAQ,QAAQ,UAC5BO,EAAgB,KAAK,SAAS,IAAID,CAAS,EAE7CC,GACF,MAAM,KAAK,kBAAkBA,EAAeF,CAAK,CAEpD,EAEDL,EAAQ,iBAAiB,QAAUQ,GAAM,CACnCL,GACF,aAAaA,CAAa,EAG5BA,EAAgB,WAAW,IAAM,CAC/BC,EAAgB,CACjB,EAAE,GAAG,CAClB,CAAW,EAEDJ,EAAQ,iBAAiB,WAAaQ,GAAM,CACtCA,EAAE,MAAQ,UACRL,GACF,aAAaA,CAAa,EAE5BC,EAAgB,EAE9B,CAAW,CACX,CAEK,EAED,MAAM,GAAGzX,EAAW,oBAAqB,CAAC2R,EAASnD,IAAS,CACrDmD,EAAQ,QAAQlS,EAAW,aAAa,GAC7CoX,EAAyBrI,CAAa,CAC5C,CAAK,EAED,MAAM,GAAGxO,EAAW,gBAAiB,CAACuO,EAAKC,IAAS,CACxBA,EAAK,iBAAiB,qBAAqB,EACnD,QAAQ3L,GAAW,CACnC,MAAMmT,EAAiBnT,EAAQ,QAAQ,eAAe,EACtD,GAAImT,EAAgB,CAClB,MAAM2B,EAAY3B,EAAe,QAAQ,UACnCrE,EAAU,KAAK,SAAS,IAAIgG,CAAS,EACvChG,GAAWA,EAAQ,QAAQlS,EAAW,aAAa,GACrDoX,EAAyBhU,CAAgB,CAErD,CACA,CAAO,CACP,CAAK,CACL,CAKE,aAAa,iBAAkB,CAC7B/B,EAAQ,IAAI,kCAAkC,EAC9C,GAAI,CACF,MAAM0B,EAAY,cAAc,CAAC,KAAK,YAAY,CAAC,CACpD,OAAQT,EAAO,CACdjB,EAAQ,MAAM,6BAA8BiB,CAAK,CACvD,CACA,CAWE,aAAa,uBAAuB+V,EAAcpL,EAAUuC,EAAS7B,EAAQ6J,EAAa,CACxFnW,EAAQ,IAAI,0CAA2C,CAACgX,EAAa,OAAQpL,EAAUuC,EAASgI,CAAW,CAAC,EAE5G,MAAM3W,EAAO,KAAK,mBAAmBwX,EAAcpL,EAAUuC,EAAS7B,CAAM,EAC5E,GAAI,CAAC9M,EACH,OAAAQ,EAAQ,MAAM,0DAA0D,EACjE,KAETR,EAAK,YAAc2W,EACnB,MAAMc,EAAeD,EAAa,OAAO1M,GAASA,GAASA,EAAM,KAAK,EAEhEuI,EADsBoE,EAAa,KAAK3M,GAASiI,EAAY,oBAAoBjI,EAAM,KAAK,CAAC,EAEjG,MAAM,gBAAgB,OACtB,KAAK,SAAS,IAAI,OAAQ,UAAU,EAEtC,YAAK,aAAa,IAAI6L,EAAa,CACjC,aAAcc,EAAa,IAAI3M,IAAU,CAAE,QAASA,EAAM,MAAM,GAAI,SAAUA,EAAM,SAAU,QAASA,EAAM,OAAO,EAAG,EACvH,SAAAsB,EACA,QAAAuC,EACA,OAAA7B,EACA,QAAS,IAAI,GACnB,CAAK,EAEe,MAAM,KAAK,iBAAiB9M,EAAMqT,CAAQ,CAE9D,CAUE,OAAO,mBAAmBmE,EAAcpL,EAAUuC,EAAS7B,EAAQ,CACjEtM,EAAQ,IAAI,sCAAuC,CAACgX,EAAa,OAAQpL,EAAUuC,EAAS7B,CAAM,CAAC,EACnGtM,EAAQ,IAAI,+DAAgEgX,EAAa,IAAI1M,GAAU,Cf7TpG,IAAAxK,EAAAwB,Ee6ToG,OACrG,SAAU,CAAC,CAACgJ,EACZ,SAAU,CAAC,EAAEA,GAASA,EAAM,OAC5B,UAAWA,EAAQ,OAAO,KAAKA,CAAK,EAAI,OACxC,YAAWhJ,GAAAxB,EAAAwK,GAAA,YAAAA,EAAO,QAAP,YAAAxK,EAAc,cAAd,YAAAwB,EAA2B,OAAQ,WAC/C,EAAC,CAAC,EAEH,MAAM2V,EAAeD,EAAa,OAAO1M,GAASA,GAASA,EAAM,KAAK,EACtE,GAAI2M,EAAa,SAAW,EAC1B,OAAAjX,EAAQ,MAAM,oDAAqD,CAACgX,CAAY,CAAC,EAC1E,KAGT,IAAIE,EAAS,KAAK,iBAAiBtL,EAAUuC,EAAS7B,CAAM,EAC5D,MAAMoH,GAAKpH,GAAA,YAAAA,EAAQ,MAAMA,GAAA,YAAAA,EAAQ,QAC3B6K,EAAUF,EAAa,IAAI3M,GAAU,Cf5UxC,IAAAxK,EAAAwB,EAAAqI,EAAA4C,Ee4UwC,OACzC,QAASjC,EAAM,MAAM,GACrB,SAAUA,EAAM,SAChB,QAASA,EAAM,QACf,SAAUA,EAAM,MAAM,OAAOhJ,GAAAxB,EAAAwK,EAAM,MAAM,iBAAZ,YAAAxK,EAA4B,UAA5B,YAAAwB,EAAqC,MAAO,4BACzE,UAAWgJ,EAAM,WACdiC,GAAA5C,EAAA,OAAO,SAAP,YAAAA,EAAe,IAAIW,EAAM,WAAzB,YAAAiC,EAAmC,OAAQjC,EAAM,MAAM,KAE1D,OAAQ,GACR,SAAU,GACV,MAAO,KACP,QAAS,GACT,QAAS,EACf,EAAM,EAEI8M,EAAa7E,EAAY,aAAa3G,CAAQ,EAC9C1E,EAAWxI,EAAa,EACxB2Y,EAAkBjQ,EAAa,IAAIF,EAAS,qBAAqB,GAAG,EAE1E,MAAO,CACL,OAAAgQ,EACA,QAAAC,EACA,OAA4BzD,GAAO,KACnC,GAAAA,EACA,SAAA9H,EACA,QAAAuC,EACA,WAAAiJ,EACA,gBAAAC,EACA,aAAcJ,EAAa,IAAI3M,IAAU,CAAE,QAASA,EAAM,MAAM,GAAI,SAAUA,EAAM,SAAU,QAASA,EAAM,OAAO,EAAG,EACvH,SAAU3L,CACX,CACL,CAME,OAAO,iBAAiBiN,EAAUuC,EAAS7B,EAAQ,CfjX9C,IAAAxM,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EekXH,IAAIuK,EAAS,GAEb,OAAOtL,GAAA,YAAAA,EAAU,cAAa,CAC5B,KAAK7M,EAAW,QAChB,KAAKA,EAAW,cACd,MAAMuY,IAAexX,EAAA,OAAO,MAAM,UAAUqO,CAAO,IAA9B,YAAArO,EAAiC,QAASqO,EAC/D+I,EAAS,KAAK,KAAK,OAAO,2BAA4B,CAAE,QAASI,EAAc,EAC/E,MACF,KAAKvY,EAAW,KAChB,KAAKA,EAAW,aACd,MAAMwY,IAAYjW,EAAA,OAAO,MAAM,UAAU6M,CAAO,IAA9B,YAAA7M,EAAiC,QAAS6M,EAC5D+I,EAAS,KAAK,KAAK,OAAO,wBAAyB,CAAE,QAASK,EAAW,EACzE,MACF,KAAKxY,EAAW,MACd,MAAMyY,IAAa7N,EAAA,OAAO,MAAM,OAAOwE,CAAO,IAA3B,YAAAxE,EAA8B,QAASwE,EACpDsJ,GAAenL,GAAA,YAAAA,EAAQ,YAAWC,EAAA,OAAO,MAAM,OAAO4B,CAAO,IAA3B,YAAA5B,EAA8B,UAAW,MAC3EmL,IAAoBlL,EAAA,OAAO,MAAM,UAAUiL,CAAY,IAAnC,YAAAjL,EAAsC,QAASiL,EACzEP,EAAS,KAAK,KAAK,OAAO,yBAA0B,CAClD,MAAOM,EACP,QAASE,CACnB,CAAS,EACD,MACF,KAAK3Y,EAAW,KACd,MAAMsP,GAAW3B,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuCyB,GACxD,IAAIwJ,EAAYxJ,EAChB,GAAIE,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAMC,EAAW,MAAM,UAAU,MAAM,YAAYD,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFsJ,GAAYrJ,GAAA,YAAAA,EAAU,OAAQH,CACxC,CACQ,MAAMyJ,GAActL,GAAA,YAAAA,EAAQ,WAAW+B,GAAA,YAAAA,EAAU,UAAW,MACtDwJ,IAAmBlL,EAAA,OAAO,MAAM,UAAUiL,CAAW,IAAlC,YAAAjL,EAAqC,QAASiL,EACvEV,EAAS,KAAK,KAAK,OAAO,wBAAyB,CACjD,KAAMS,EACN,QAASE,CACnB,CAAS,EACD,MACF,KAAK9Y,EAAW,cACdmY,EAAS,KAAK,KAAK,SAAS,6BAA6B,GAAK,gBAC9D,MACF,KAAKnY,EAAW,WACdmY,EAAS,KAAK,KAAK,SAAS,iBAAiB,GAAK,qBAClD,MACF,KAAKnY,EAAW,QAChB,IAAK,UACHmY,EAAS,KAAK,KAAK,SAAS,eAAe,GAAK,WAChD,MACF,KAAKnY,EAAW,QACdmY,GAAS5K,GAAA,YAAAA,EAAQ,SAAU,KAAK,KAAK,SAAS,eAAe,GAAK,UAClE,MACF,KAAKvN,EAAW,OACdmY,GAAS5K,GAAA,YAAAA,EAAQ,SAAU6B,GAAW,KAAK,KAAK,SAAS,YAAY,GAAK,cAC1E,MACF,KAAKpP,EAAW,QACdmY,GAAS5K,GAAA,YAAAA,EAAQ,SAAU6B,GAAW,KAAK,KAAK,SAAS,YAAY,GAAK,iBAC1E,MACF,KAAKpP,EAAW,UACdmY,GAAS5K,GAAA,YAAAA,EAAQ,SAAU,KAAK,KAAK,SAAS,mBAAmB,GAAK,eACtE,MACF,KAAKvN,EAAW,WACdmY,EAAS,KAAK,KAAK,SAAS,kBAAkB,EAC9C,MACF,KAAKnY,EAAW,OACdmY,GAAS5K,GAAA,YAAAA,EAAQ,SAAU,KAAK,KAAK,SAAS,cAAc,GAAK,cACjE,MACF,KAAKvN,EAAW,OACdmY,GAAS5K,GAAA,YAAAA,EAAQ,SAAU,KAAK,KAAK,SAAS,cAAc,GAAK,cACjE,MACF,QACE4K,GAAS5K,GAAA,YAAAA,EAAQ,SAAU,MACnC,CAEI,OAAO4K,CACX,CAQE,aAAa,iBAAiB1X,EAAMqT,EAAW,KAAM,CACnD7S,EAAQ,IAAI,iCAAkC,CAACR,EAAK,YAAaqT,CAAQ,CAAC,EAE1E,GAAI,CAEF,MAAMiF,EAAc,CAClB,QAFc,MAAMpW,EAAY,eAAe,KAAK,aAAclC,CAAI,EAGtE,QAAS,CACP,MAAO,YACR,EACD,MAAO,CACL,CAACb,CAAS,EAAG,CACX,YAAa,GACb,YAAaa,EAAK,YAClB,SAAUA,CACtB,CACA,CACO,EACGqT,GACF,YAAY,cAAciF,EAAajF,CAAQ,EAGjD,MAAMkF,EAAM,MAAM,YAAY,OAAOD,CAAW,EAChD,YAAK,kBAAkB,IAAItY,EAAK,YAAauY,CAAG,EACzCA,CACR,OAAQ9W,EAAO,CACd,OAAAjB,EAAQ,MAAM,+BAAgCiB,CAAK,EAC5C,IACb,CACA,CAQE,aAAa,uBAAuBkV,EAAa9D,EAAU/R,EAAM,CAG/D,GAFAN,EAAQ,IAAI,0CAA2C,CAACmW,EAAa9D,EAAU/R,EAAM,EAEjF,CAAC,KAAK,KAAK,KACb,OAIF,MAAM0X,GADgB,KAAK,YAAY,IAAI7B,CAAW,GAAK,QAAQ,QAAS,GAC3C,KAAK,IAAM,KAAK,wBAAwBA,EAAa9D,EAAU/R,CAAI,CAAC,EACrG,YAAK,YAAY,IAAI6V,EAAa6B,CAAU,EAErCA,CACX,CASE,aAAa,wBAAwB7B,EAAa9D,EAAU/R,EAAM,Cf5f7D,IAAAR,EAAAwB,EAAAqI,Ee8fH,IAAIkH,EAAU,KAAK,kBAAkB,IAAIsF,CAAW,EAChD8B,EAAc,KAAK,aAAa,IAAI9B,CAAW,EAEnD,GAAI,CAACtF,IAEHA,EADiB,KAAK,SAAS,SACZ,KAAK,GACtB,EAAE,QAAQlS,EAAW,aAAa,IAAMwX,GACxC,EAAE,QAAQxX,EAAW,aAAa,CACnC,EAEGkS,IACF,KAAK,kBAAkB,IAAIsF,EAAatF,CAAO,EAC/C7Q,EAAQ,IAAI,8DAA+D,CAACmW,CAAW,CAAC,EAEpF,CAAC8B,IAAa,CAChB,MAAMC,EAAWrH,EAAQ,QAAQlS,EAAW,UAAU,EACtDsZ,EAAc,CACZ,aAAcC,EAAS,cAAgBA,EAAS,QAAQ,IAAI/X,IAAM,CAAE,QAASA,EAAE,QAAS,SAAUA,EAAE,SAAU,QAASA,EAAE,OAAO,EAAG,EACnI,QAAS,IAAI,GACd,EACD,KAAK,aAAa,IAAIgW,EAAa8B,CAAW,CACxD,CAII,GAAI,CAACpH,EAAS,CACZ7Q,EAAQ,IAAI,yCAA0CmW,CAAW,EACjE,MACN,CAGQ8B,GAAeA,EAAY,SAC7BA,EAAY,QAAQ,IAAI5F,EAAU,CAChC,MAAO/R,EAAK,MACZ,KAAMA,CACd,CAAO,EAGH,MAAM4X,EAAWrH,EAAQ,QAAQlS,EAAW,UAAU,EAEtD,IAAIwZ,EAAcD,EAAS,QAAQ,UAAU/X,GAAKA,EAAE,WAAakS,CAAQ,EAGzE,GAAI8F,IAAgB,KAElBA,EAAcD,EAAS,QAAQ,UAAU/X,GAAKA,EAAE,UAAYkS,CAAQ,EAGhE8F,IAAgB,KAClBA,EAAcD,EAAS,QAAQ,UAAU/X,GAAKA,EAAE,UAAYkS,CAAQ,GAIlE8F,IAAgB,MAAMrY,EAAA+Q,EAAQ,UAAR,MAAA/Q,EAAiB,QAAO,CAChD,MAAMsY,EAAiBvH,EAAQ,QAAQ,MACvCsH,EAAcD,EAAS,QAAQ,UAAU/X,GAAKA,EAAE,UAAYiY,CAAc,CAClF,CAGI,GAAID,IAAgB,GAAI,CACtBD,EAAS,QAAQC,CAAW,EAAE,OAAS,GACvCD,EAAS,QAAQC,CAAW,EAAE,SAAW,GACzCD,EAAS,QAAQC,CAAW,EAAE,MAAQ7X,EAAK,MAE3C,GAAI,CACF,IAAI+X,EAAgB,MAAM/X,EAAK,OAAQ,EAQvC4X,EAAS,QAAQC,CAAW,EAAE,cAAgBE,CAC/C,OAAQpX,EAAO,CACdjB,EAAQ,MAAM,iCAAkCiB,CAAK,EACrDiX,EAAS,QAAQC,CAAW,EAAE,cAAgB,IACtD,CAEUD,EAAS,QAAUA,EAAS,KAC9BA,EAAS,QAAQC,CAAW,EAAE,QAAU7X,EAAK,OAAS4X,EAAS,GAC/DA,EAAS,QAAQC,CAAW,EAAE,QAAU7X,EAAK,MAAQ4X,EAAS,GAEtE,CAEIA,EAAS,UAAYA,EAAS,QAAQ,MAAM/X,GAAKA,EAAE,MAAM,EACzD+X,EAAS,UAAYrH,EAAQ,GAE7BqH,EAAS,WAAa3F,EAAY,aAAa2F,EAAS,QAAQ,EAEhE,MAAMhR,EAAWxI,EAAa,EAI9B,GAHAwZ,EAAS,gBAAkB9Q,EAAa,IAAIF,EAAS,qBAAqB,GAAG,EAGzEgR,EAAS,YAAcA,EAAS,QAAUA,EAAS,GAAI,CACzD,MAAM5G,IAAShQ,EAAA4W,EAAS,eAAT,YAAA5W,EAAuB,IAAIgJ,GAAS,KAAK,OAAO,IAAIA,EAAM,OAAO,GAAG,OAAOU,GAAKA,OAChFrB,EAAAuO,EAAS,SAAT,YAAAvO,EAAiB,IAAIlG,GAAM,KAAK,OAAO,IAAIA,CAAE,GAAG,OAAOuH,GAAKA,KAAM,CAAE,EAE7EsN,EAAc/F,EAAY,eAC9B2F,EAAS,QACTA,EAAS,GACT5G,EACA4G,EAAS,SACTA,EAAS,OACV,EAEDA,EAAS,YAAcI,EACvBtY,EAAQ,IAAI,qCAAsC,CAACsY,EAAY,QAAQ,CAAC,EAEpEA,EAAY,UAAYA,EAAY,UACtCJ,EAAS,aAAeI,EAAY,QAAQ,QAEpD,CAEI,MAAMC,EAAa,MAAM7W,EAAY,eAAe,KAAK,aAAcwW,CAAQ,EAC/E,MAAMrH,EAAQ,OAAO,CACnB,QAAS0H,EACT,MAAO,CACL,CAAC5Z,CAAS,EAAG,CACX,SAAUuZ,CACpB,CACA,CACA,CAAK,EAEGD,GAAA,MAAAA,EAAa,UAAWA,GAAA,MAAAA,EAAa,eACnCA,EAAY,QAAQ,OAASA,EAAY,aAAa,SACxD,KAAK,aAAa,OAAO9B,CAAW,EACpC,WAAW,IAAM,CACf,KAAK,kBAAkB,OAAOA,CAAW,EACzC,KAAK,YAAY,OAAOA,CAAW,CACpC,EAAE,GAAK,EAGhB,CAOE,aAAa,kBAAkBtF,EAAS+F,EAAO,Cf1oB1C,IAAA9W,EAAAwB,Ee2oBH,MAAM4W,EAAWrH,EAAQ,QAAQlS,EAAW,UAAU,EAItD,GAHI,CAACuZ,IAELA,EAAS,WAAa3F,EAAY,aAAa2F,EAAS,QAAQ,EAC5D,CAACA,EAAS,YAAY,OAE1BA,EAAS,GAAKtB,EACdsB,EAAS,OAAS,GAClBA,EAAS,QAAQ,QAAQ9X,GAAU,CAC7BA,EAAO,QAAUA,EAAO,QAAU,OACpCA,EAAO,QAAUA,EAAO,OAASwW,EACjCxW,EAAO,QAAUA,EAAO,MAAQwW,EAExC,CAAK,EAED,MAAMtF,IAASxR,EAAAoY,EAAS,eAAT,YAAApY,EAAuB,IAAIwK,GAAS,KAAK,OAAO,IAAIA,EAAM,OAAO,GAAG,OAAOU,GAAKA,OAChF1J,EAAA4W,EAAS,SAAT,YAAA5W,EAAiB,IAAImC,GAAM,KAAK,OAAO,IAAIA,CAAE,GAAG,OAAOuH,GAAKA,KAAM,CAAE,EAE7EsN,EAAc/F,EAAY,eAC9B2F,EAAS,QACTtB,EACAtF,EACA4G,EAAS,SACTA,EAAS,OACV,EAEDA,EAAS,YAAcI,EAEnBA,EAAY,UAAYA,EAAY,UACtCJ,EAAS,aAAeI,EAAY,QAAQ,SAG9CJ,EAAS,UAAYA,EAAS,QAAQ,MAAM/X,GAAKA,EAAE,MAAM,EACzD+X,EAAS,UAAYrH,EAAQ,GAE7B,MAAM3J,EAAWxI,EAAa,EAC9BwZ,EAAS,gBAAkB9Q,EAAa,IAAIF,EAAS,qBAAqB,GAAG,EAE7E,MAAMqR,EAAa,MAAM7W,EAAY,eAAe,KAAK,aAAcwW,CAAQ,EAC/E,MAAMrH,EAAQ,OAAO,CACnB,QAAS0H,EACT,MAAO,CACL,CAAC5Z,CAAS,EAAG,CACX,SAAUuZ,CACpB,CACA,CACA,CAAK,CACL,CASE,OAAO,qBAAqBrH,EAASnD,EAAM1E,EAAS,CfnsB/C,IAAAlJ,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EeosBH,MAAMxF,EAAWxI,EAAa,EAE9B,GAAI,CADyB0I,EAAa,IAAIF,EAAS,qBAAqB,GAAG,EACpD,OAE3B,MAAMuI,GAAU3P,EAAA+Q,EAAQ,UAAR,YAAA/Q,EAAiB,MAC3B6P,GAAUrO,EAAAuP,EAAQ,UAAR,YAAAvP,EAAiB,MAIjC,IAAIwF,EACJ,GAAI6I,EAAS,CACX,MAAMP,IAAQzF,EAAA,OAAO,SAAP,YAAAA,EAAe,IAAIgG,OAAYnD,GAAAD,EAAA,KAAK,OAAO,SAAZ,YAAAA,EAAoB,SAApB,YAAAC,EAA4B,IAAImD,IAC7E7I,EAAQsI,GAAA,YAAAA,EAAO,KACrB,CAKI,GAJKtI,IACHA,EAAQ,KAAK,OAAO,IAAI2I,CAAO,GAG7B,CAAC3I,EAAO,OAEZ,MAAMuL,EAAW1C,GAAWF,EACtB0G,EAActF,EAAQ,QAAQlS,EAAW,aAAa,KAAK8N,EAAA3F,EAAM,QAAQnI,EAAW,sBAAsB,IAA/C,YAAA8N,EAAkD,aAEnH,GAAI,CAAC0J,EAAa,CAChBnW,EAAQ,IAAI,mDAAoD,CAAC8G,EAAM,IAAI,CAAC,EAC5E,MACN,CAEI,GAAI,CAAC,KAAK,KAAK,MAAQ,CAAC,KAAK,kBAAkB,IAAIqP,CAAW,EAAG,CAE/D,MAAMqC,EADW,KAAK,SAAS,SACD,KAAKC,GACjCA,EAAE,QAAQ9Z,EAAW,aAAa,IAAMwX,GACxCsC,EAAE,QAAQ9Z,EAAW,aAAa,CACnC,EAEG6Z,IACF,KAAK,kBAAkB,IAAIrC,EAAaqC,CAAY,EACpDxY,EAAQ,IAAI,uDAAwD,CAAC8G,EAAM,KAAKqP,CAAW,CAAC,EAEpG,CAEI,GAAI,CAAC,KAAK,kBAAkB,IAAIA,CAAW,EAAG,CAC5CnW,EAAQ,IAAI,gDAAiD,CAAC8G,EAAM,KAAMqP,EAAa,MAAM,KAAK,KAAK,kBAAkB,KAAI,CAAE,CAAC,CAAC,EACjInW,EAAQ,IAAI,qDAAsD,CAChE,KAAK,SAAS,SACd,KAAK,SAAS,SACX,OAAOyY,GAAKA,EAAE,QAAQ9Z,EAAW,aAAa,CAAC,EAC/C,IAAI8Z,IAAM,CAAE,GAAIA,EAAE,GAAI,YAAaA,EAAE,QAAQ9Z,EAAW,aAAa,CAAC,EAAG,CACpF,CAAO,EAGD,MAAM6Z,EADW,KAAK,SAAS,SACD,KAAKC,GACjCA,EAAE,QAAQ9Z,EAAW,aAAa,IAAMwX,GACxCsC,EAAE,QAAQ9Z,EAAW,aAAa,CACnC,EAED,GAAI6Z,EACFxY,EAAQ,IAAI,sEAAuE,CAACmW,CAAW,CAAC,EAChG,KAAK,kBAAkB,IAAIA,EAAaqC,CAAY,MAC/C,CACLxY,EAAQ,IAAI,mEAAoE,CAACmW,CAAW,CAAC,EAC7F,MACR,CACA,CAEI,MAAM7V,GAAOoM,EAAAmE,EAAQ,QAAR,YAAAnE,EAAgB,GAC7B,GAAKpM,EAML,GAJIoN,GAAQA,aAAgB,aAAeA,EAAK,QAC9CA,EAAK,MAAM,QAAU,QAGnB,KAAK,KAAK,KAAM,CAClB,KAAK,uBAAuByI,EAAa9D,EAAU/R,CAAI,EAEvD,MAAMoY,EAAQ7H,EAAQ,GACtB,GAAI,KAAK,6BAA6B,IAAI6H,CAAK,EAC7C,OAEF,KAAK,6BAA6B,IAAIA,CAAK,EAEvCA,GACF,WAAW,SAAY,CACrB1Y,EAAQ,IAAI,kCAAmC,CAAC0Y,CAAK,CAAC,EACtD,GAAI,CACgB,KAAK,SAAS,IAAIA,CAAK,GAEvC,MAAM7H,EAAQ,OAAQ,EACtB7Q,EAAQ,IAAI,oDAAqD,CAAC0Y,CAAK,CAAC,GAExE1Y,EAAQ,IAAI,iDAAkD,CAAC0Y,CAAK,CAAC,CAExE,OAAQzX,EAAO,CACdjB,EAAQ,IAAI,gDAAiD,CAAC0Y,EAAOzX,EAAM,OAAO,CAAC,CAC/F,QAAoB,CACR,KAAK,6BAA6B,OAAOyX,CAAK,CAC1D,CACS,EAAE,GAAG,CAEd,MAEM1Y,EAAQ,IAAI,wEAAyE,CAACmW,CAAW,CAAC,CAIxG,CAOE,OAAO,YAAYwC,EAAW,CAC5B,OAAO,KAAK,aAAa,IAAIA,CAAS,GAAK,KAAK,kBAAkB,IAAIA,CAAS,CACnF,CAQE,aAAa,iBAAiB5F,EAAeN,EAAa3L,EAAQ,KAAM,CACtE,MAAMI,EAAWxI,EAAa,EACxBka,EAAuBxR,EAAa,IAAIF,EAAS,qBAAqB,GAAG,EAW/E,GATAlH,EAAQ,IAAI,0BAA2B,CAAC+S,EAAeN,EAAY,YAAa,KAAK,YAAYA,EAAY,WAAW,CAAC,CAAC,EAC1HzS,EAAQ,IAAI,oCAAqC,CAC/C,eAAgByS,EAAY,YAC5B,QAAS,OAAOA,EAAY,YAC5B,QAAS,KAAK,KAAK,KACnB,SAAU3L,GAAA,YAAAA,EAAO,KACjB,oBAAqB,OAAO,KAAK2L,CAAW,CAClD,CAAK,EAEG,CAAC,KAAK,KAAK,MAAQA,EAAY,aAAe3L,IAChD,MAAMA,EAAM,QAAQnI,EAAW,kBAAmB8T,EAAY,WAAW,EACzEzS,EAAQ,IAAI,gEAAiE,CAACyS,EAAY,YAAa3L,EAAM,EAAE,CAAC,EAI5GA,EAAM,SAAWA,EAAM,QACzB,MAAMA,EAAM,MAAM,QAAQnI,EAAW,kBAAmB8T,EAAY,WAAW,EAC/EzS,EAAQ,IAAI,0EAA2E,CAACyS,EAAY,YAAa3L,EAAM,MAAM,EAAE,CAAC,GAG9H,CAAC,KAAK,kBAAkB,IAAI2L,EAAY,WAAW,GAAG,CAExD,MAAM+F,EADW,KAAK,SAAS,SACD,KAAKC,GACjCA,EAAE,QAAQ9Z,EAAW,aAAa,IAAM8T,EAAY,aACpDgG,EAAE,QAAQ9Z,EAAW,aAAa,CACnC,EAEG6Z,IACF,KAAK,kBAAkB,IAAI/F,EAAY,YAAa+F,CAAY,EAChExY,EAAQ,IAAI,kEAAmE,CAACyS,EAAY,WAAW,CAAC,EAElH,CAIQmG,GAAwBnG,EAAY,cAChB,MAAK,KAAK,MAAO,KAAK,YAAYA,EAAY,WAAW,KAG7EM,EAAc,KAAOA,EAAc,MAAQ,CAAE,EAC7CA,EAAc,KAAK,MAAQA,EAAc,KAAK,OAAS,CAAE,EACzDA,EAAc,KAAK,MAAMpU,CAAS,EAAIoU,EAAc,KAAK,MAAMpU,CAAS,GAAK,CAAE,EAC/EoU,EAAc,KAAK,MAAMpU,CAAS,EAAE,YAAc8T,EAAY,YAE9DzS,EAAQ,IAAI,iDAAkD,CAAC+S,CAAa,CAAC,EAGrF,CAKE,OAAO,SAAU,CACf,MAAM8F,EAAiB,KAAK,IAAK,EAAI,IAErC,SAAW,CAACF,EAAW9H,CAAO,IAAK,KAAK,kBAAkB,UACpDA,EAAQ,UAAYgI,IACtB,KAAK,kBAAkB,OAAOF,CAAS,EACvC,KAAK,aAAa,OAAOA,CAAS,EAG1C,CACA,CA/2BE5Y,EALW+V,EAKJ,oBAAoB,IAAI,KAM/B/V,EAXW+V,EAWJ,eAAe,IAAI,KAM1B/V,EAjBW+V,EAiBJ,+BAA+B,IAAI,KAM1C/V,EAvBW+V,EAuBJ,cAAc,IAAI,KAMzB/V,EA7BW+V,EA6BJ,eAAe,4DC7BjB,MAAMM,EAAe,CAC1B,QAAS,MAAOtP,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,CAC9E,MAAMzG,EAASiG,EAAY,gBAAgBE,EAAaC,EAAY,CAClE,QAASD,EAAY,OAC3B,CAAK,EAED,MAAMqD,EAAiB,iBAAiB/C,EAAeN,EAAa3L,CAAK,EACzE,MAAMA,EAAM,iBAAiBwF,EAAQ/G,EAAcwN,CAAa,CACjE,EAED,aAAc,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAC1DqD,EAAa,QAAQtP,EAAO2L,EAAaC,EAAYnN,EAAcwN,CAAa,EAGzF,KAAM,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,ChB1BxE,IAAAjT,EgB2BH,MAAMwM,EAASiG,EAAY,gBAAgBE,EAAaC,EAAY,CAClE,UAAS5S,EAAA2S,EAAY,SAAZ,YAAA3S,EAAoB,UAAW2S,EAAY,OAC1D,CAAK,EAED,MAAMqD,EAAiB,iBAAiB/C,EAAeN,EAAa3L,CAAK,EAEzE,MAAMA,EAAM,gBAAgBwF,EAAQ/G,EAAcwN,CAAa,CAChE,EAED,YAAa,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IACzDqD,EAAa,KAAKtP,EAAO2L,EAAaC,EAAYnN,EAAcwN,CAAa,EAGtF,MAAO,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,ChBxCzE,IAAAjT,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EgByCH,MAAMqM,IAAiBxX,GAAAxB,EAAAgH,EAAM,OAAO,SAAb,YAAAhH,EAAsB2S,EAAY,WAAlC,YAAAnR,EAA4C,YAC7CiL,GAAA5C,EAAA,OAAO,MAAM,SAAb,YAAAA,EAAsB8I,EAAY,WAAlC,YAAAlG,EAA4C,UAC5C,OAEhBD,EAASiG,EAAY,gBAAgBE,EAAaC,EAAY,CAClE,MAAOD,EAAY,QACnB,cAAelN,EAAa,YAAc,GAC1C,QAASkN,EAAY,OAAO,SAAWqG,CAC7C,CAAK,EAED,GAAIrG,EAAY,OAAO,SAAWlN,EAAa,YAAc,GAAO,CAClE,MAAMiS,IAAahL,EAAA,OAAO,MAAM,OAAOiG,EAAY,OAAO,IAAvC,YAAAjG,EAA0C,QAASiG,EAAY,QAC5E6E,IAAe7K,EAAA,OAAO,MAAM,UAAUgG,EAAY,OAAO,OAAO,IAAjD,YAAAhG,EAAoD,QAASgG,EAAY,OAAO,QAC/FyE,EAAS,KAAK,KAAK,OAAO,yBAA0B,CACxD,MAAOM,EACP,QAASF,CACjB,CAAO,EACDvE,EAAc,KAAOA,EAAc,MAAQ,CAAE,EAC7CA,EAAc,KAAK,OAASmE,CAClC,CACI,MAAMpB,EAAiB,iBAAiB/C,EAAeN,EAAa3L,CAAK,EACzE,MAAMA,EAAM,UAAUwF,EAAQ/G,EAAcwN,CAAa,CAC1D,EAED,KAAM,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,ChBjExE,IAAAjT,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EgBkEH,MAAMqM,GAAajZ,EAAAgH,EAAM,OAAO,QAAb,YAAAhH,EAAqB2S,EAAY,SAC9CqG,GAAiBC,GAAA,YAAAA,EAAY,YACbxM,GAAA5C,GAAArI,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAqI,EAAuC8I,EAAY,WAAnD,YAAAlG,EAA6D,UAC7D,MAEhBD,EAASiG,EAAY,gBAAgBE,EAAaC,EAAY,CAClE,KAAMD,EAAY,QAClB,cAAelN,EAAa,YAAc,GAC1C,QAASkN,EAAY,OAAO,SAAWqG,CAC7C,CAAK,EAED,GAAIrG,EAAY,OAAO,SAAWlN,EAAa,YAAc,GAAO,CAClE,MAAM8I,GAAW5B,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuCgG,EAAY,SACpE,IAAIkF,EAAYlF,EAAY,QAC5B,GAAIpE,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAMC,EAAW,MAAM,UAAU,MAAM,YAAYD,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFsJ,GAAYrJ,GAAA,YAAAA,EAAU,OAAQmE,EAAY,OAClD,CACM,MAAM6E,IAAe5K,EAAA,OAAO,MAAM,UAAU+F,EAAY,OAAO,OAAO,IAAjD,YAAA/F,EAAoD,QAAS+F,EAAY,OAAO,QAC/FyE,EAAS,KAAK,KAAK,OAAO,wBAAyB,CACvD,KAAMS,EACN,QAASL,CACjB,CAAO,EACDvE,EAAc,KAAOA,EAAc,MAAQ,CAAE,EAC7CA,EAAc,KAAK,OAASmE,CAClC,CACIlX,EAAQ,IAAI,uBAAwB,CAACsM,EAAQ/G,EAAcwN,CAAa,CAAC,EAEzE,MAAM+C,EAAiB,iBAAiB/C,EAAeN,EAAa3L,CAAK,EACzE,MAAMA,EAAM,cAAcwF,EAAQ/G,EAAcwN,CAAa,CAC9D,EAED,cAAe,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,CACpF,MAAMzG,EAASiG,EAAY,gBAAgBE,EAAaC,CAAU,EAElE,MAAMoD,EAAiB,iBAAiB/C,EAAeN,EAAa3L,CAAK,EACzE,MAAMA,EAAM,kBAAkBwF,EAAQ/G,EAAcwN,CAAa,CAClE,EAED,OAAQ,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,CAC7E,MAAMqD,EAAa,mBAAmBtP,EAAO/H,EAAW,OAAQ0T,EAAaC,EAAYnN,EAAcwN,CAAa,CACrH,EAED,OAAQ,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,CAC7E,MAAMqD,EAAa,mBAAmBtP,EAAO/H,EAAW,OAAQ0T,EAAaC,EAAYnN,EAAcwN,CAAa,CACrH,EAED,SAAU,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,CAC/E,MAAMqD,EAAa,mBAAmBtP,EAAO/H,EAAW,UAAW0T,EAAaC,EAAYnN,EAAcwN,CAAa,CACxH,EAED,WAAY,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,ChBrH9E,IAAAjT,EAAAwB,EAAAqI,EgBsHH,GAAI,CAAC,KAAK,OAAQ,CAChB,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,mBAAmB,CAAC,EAC7D,MACN,CACwB8I,EAAY,OAAO,cAAe3S,EAAA4S,EAAW,OAAX,MAAA5S,EAAiB,YACnD2S,EAAY,YAEhC,IAAIuG,EAAalS,EACjB,GAAI,CAACA,EAAM,QAAS,CAClB,MAAMsI,EAAQ,OAAO,OAAO,WAAW,KAAKD,GAAK,ChB/HhD,IAAArP,EgB+HgD,QAAAA,EAAAqP,EAAE,QAAF,YAAArP,EAAS,MAAOgH,EAAM,GAAE,EACzE,GAAIsI,EACF4J,EAAa5J,EAAM,UACd,CACL,GAAG,cAAc,MAAM,KAAK,KAAK,SAAS,iDAAiD,CAAC,EAC5F,MACR,CACA,CACI,MAAM0G,EAAiB,iBAAiB/C,EAAeN,EAAa3L,CAAK,EAEzE,GAAI,CACF,GAAIvB,EAAa,UAAW,CAG1B,GAFAvF,EAAQ,IAAI,mCAAoC,EAAE,EAE9CyS,EAAY,OAAQ,CACtB,MAAMwG,EAAmB1G,EAAY,gBAAgBE,EAAaC,EAAY,CAC5E,UAAS/I,GAAArI,EAAAwF,EAAM,OAAO,aAAb,YAAAxF,EAAyB,OAAzB,YAAAqI,EAA+B,UAAW,KAC/D,CAAW,EAEKuP,EAAa,CACjB,UAAWzG,EAAY,OAAO,WAAa,GAC3C,aAAcA,EAAY,OAAO,cAAgB,GACjD,SAAUA,EAAY,OAAO,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC7E,MAAOwG,EAAiB,MACxB,YAAaxG,EAAY,WAC1B,EACD,MAAM3L,EAAM,QAAQnI,EAAW,uBAAwBua,CAAU,EACjE,MAAMF,EAAW,QAAQra,EAAW,uBAAwBua,CAAU,CAChF,CACQ,MAAMF,EAAW,qBAAsB,EACvC,MAAMA,EAAW,UAAUra,EAAW,sBAAsB,EAC5D,MAAMmI,EAAM,UAAUnI,EAAW,sBAAsB,CAE/D,KAAa,CACL,MAAMua,EAAa,CACjB,SAAUzG,EAAY,OAAO,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC7E,YAAaA,EAAY,WAC1B,EAED,MAAM3L,EAAM,QAAQnI,EAAW,uBAAwBua,CAAU,EACjE,MAAMF,EAAW,QAAQra,EAAW,uBAAwBua,CAAU,EAEtE,MAAMC,EAAc,CAClB,iBAAkB,GAClB,iBAAkB,EACnB,EACD,MAAMH,EAAW,eAAeG,CAAW,EAC3C,MAAMH,EAAW,UAAUra,EAAW,sBAAsB,EAC5D,MAAMmI,EAAM,UAAUnI,EAAW,sBAAsB,CAC/D,CACK,OAAQsC,EAAO,CACdjB,EAAQ,MAAM,kCAAmC,CAACiB,CAAK,CAAC,EACxDmQ,EAAoB,OAAO,QAAS,2BAA2BnQ,EAAM,OAAO,EAAE,CACpF,CACG,EAGD,iBAAkB,MAAO6F,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAC9DqD,EAAa,WAAWtP,EAAO2L,EAAaC,EAAYnN,EAAcwN,CAAa,EAG5F,UAAW,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,CAChF,MAAMzG,EAASiG,EAAY,gBAAgBE,EAAaC,CAAU,EAClE,MAAMoD,EAAiB,iBAAiB/C,EAAeN,EAAa3L,CAAK,EACzE,MAAMA,EAAM,cAAcwF,EAAQ/G,EAAcwN,CAAa,CAC9D,EAED,OAAQ,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,CAC7ExN,EAAa,UAAY,KAAK,KAAK,KAAOA,EAAa,UAAY,GAEnE,MAAM+G,EAASiG,EAAY,gBAAgBE,EAAaC,EAAY,CAClE,aAAcD,EAAY,OAChC,CAAK,EACDzS,EAAQ,IAAI,sBAAuB,CAACsM,EAAQ/G,EAAcwN,CAAa,CAAC,EACxE,MAAM+C,EAAiB,iBAAiB/C,EAAeN,EAAa3L,CAAK,EACzE,MAAMA,EAAM,WAAWwF,EAAQ/G,EAAcwN,CAAa,CAC3D,EAED,OAAQ,MAAOjM,EAAO2L,EAAaC,EAAYnN,EAAcwN,IAAkB,CAC7E,MAAMqD,EAAa,iBAAiBtP,EAAO2L,EAAalN,EAAcwN,CAAa,CACpF,EAiBD,MAAM,mBAAmBjM,EAAO8E,EAAU6G,EAAaC,EAAYnN,EAAcwN,EAAe,ChBhO3F,IAAAjT,EAAAwB,EgBkOH,GADAtB,EAAQ,IAAI,kCAAmC,CAAC4L,EAAU6G,EAAaC,CAAU,CAAC,EAC9ED,EAAY,QAAS,CACvB,MAAM2G,EAAgB7G,EAAY,gBAAgBE,EAAaC,CAAU,EAEnEyG,IAAc7X,GAAAxB,EAAAsZ,EAAc,QAAd,YAAAtZ,EAAsB,KAAtB,YAAAwB,EAA0B,UAAW,CAAE,EACrD+X,EAAiB,CACrB,MAAO,CACL,GAAG5G,EAAY,OACf,MAAO2G,EAAc,MACrB,GAAID,EAAY,YAAc,CAAE,WAAYA,EAAY,UAAU,EAClE,GAAIA,EAAY,YAAc,CAAE,WAAYA,EAAY,UAAU,EAClE,GAAIA,EAAY,UAAY,QAAa,CAAE,QAASA,EAAY,OAAS,CAC1E,EACD,OAAQ5T,EACR,QAASwN,CACV,EAED/S,EAAQ,IAAI,6CAA8C,CAACqZ,CAAc,CAAC,EAE1E,MAAM1N,GAAa,oBACjB7E,EACA8E,EACA6G,EAAY,QACZA,EAAY,WACZ4G,CACD,CACP,CACG,EAcD,MAAM,iBAAiBvS,EAAO2L,EAAalN,EAAcwN,EAAe,ChB1QnE,IAAAjT,EAAAwB,EAAAqI,EAAA4C,EgB2QH,MAAMqJ,EAAUnD,EAAY,QAE5B,IAAIlN,GAAA,YAAAA,EAAc,aAAc,GAAO,CACrC,GAAI,CACF,MAAMjF,EAAO,IAAI,KAAKsV,EAAS9O,EAAM,YAAW,CAAE,EAElDxG,EAAK,QAAUA,EAAK,SAAW,CAAE,EACjCA,EAAK,QAAQ,gBAAgBR,EAAA2S,EAAY,SAAZ,YAAA3S,EAAoB,iBAAkB,GAEnE,MAAMQ,EAAK,SAAU,EACrB,MAAMwV,EAAiB,iBAAiB/C,EAAeN,EAAa3L,CAAK,EAEzE,MAAMxG,EAAK,UAAU,CACnB,QAAS,YAAY,WAAW,CAAC,MAAAwG,CAAK,CAAC,EACvC,OAAQ,KAAK,KAAK,SAAS,yBAAyB/H,EAAW,MAAM,EAAE,EACvE,UAAUgU,GAAA,YAAAA,EAAe,aAAYzR,EAAAmR,EAAY,SAAZ,YAAAnR,EAAoB,WAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EACzG,gBAAeqI,EAAA8I,EAAY,SAAZ,YAAA9I,EAAoB,iBAAkB,GACrD,QAAQoJ,GAAA,YAAAA,EAAe,UAAW,GAClC,OAAOxG,EAAAwG,GAAA,YAAAA,EAAe,OAAf,YAAAxG,EAAqB,KACtC,CAAS,CACF,MAAe,CACd,GAAG,cAAc,MAAM,KAAK,KAAK,OAAO,8CAA+C,CAAC,QAASqJ,CAAO,CAAC,CAAC,CAClH,CACM,MACN,CAEmB,IAAId,GAAiB,CAClC,QAASc,EACT,SAAU,GACV,MAAO9O,EACP,SAAU,MAAOwS,GAAqB,ChBzSrC,IAAAxZ,EgB0SC,GAAI,CACF,MAAMQ,EAAO,IAAI,KAAKgZ,EAAkBxS,EAAM,YAAW,CAAE,EAE3DxG,EAAK,QAAUA,EAAK,SAAW,CAAE,EACjCA,EAAK,QAAQ,cAAgB,GAE7B,MAAMA,EAAK,SAAU,EACrB,MAAMwV,EAAiB,iBAAiB/C,EAAeN,EAAa3L,CAAK,EAEzE,MAAMxG,EAAK,UAAU,CACnB,QAAS,YAAY,WAAW,CAAC,MAAAwG,CAAK,CAAC,EACvC,OAAQ,KAAK,KAAK,SAAS,yBAAyB/H,EAAW,MAAM,EAAE,EACvE,SAAU0T,EAAY,OAAO,SAC7B,cAAe,GACf,iBAAkB,GAClB,aAAcA,EAAY,OAAO,aAAe,KAChD,OAAO3S,EAAAiT,GAAA,YAAAA,EAAe,OAAf,YAAAjT,EAAqB,KACxC,CAAW,CACF,MAAe,CACd,GAAG,cAAc,MAAM,KAAK,KAAK,OAAO,8CAA+C,CAAC,QAASwZ,CAAgB,CAAC,CAAC,CAC7H,CACA,CACA,CAAK,EAEM,OAAO,EAAI,CACnB,EAOD,MAAM,qBAAqBxS,EAAO,CAChC,MAAM1G,EAAS,QAAQ,MAAM,YAAY,CACvC,KAAM,OACN,OAAQ,CACN,QAAS,CACV,EACD,OAAQ,GACR,MAAO,CAAE,EACT,WAAY,CAAE,EACd,YAAa,CAAA,CACd,EAAE,EAAE,EAEA,QAASA,IAASA,EAAO,OAAO,QAAUA,EAAO,KAEtD0G,EAAM,wBAAwB,CAAE,WAAYA,EAAM,OAAO,WAAW,GAAG,IAAK,KAAM,MAAM,EAAI1G,CAAM,EAElGA,EAAO,IAAMA,EAAO,OAAO,QAC3BA,EAAO,SAAW,GAElB,GAAI,CACF,GAAIA,EAAO,YAAc,OAAO,KAAKA,EAAO,UAAU,EAAE,OAAS,EAAG,CAClE,MAAMmZ,EAAe,MAAMzS,EAAM,OAAO1G,EAAO,WAAY,CAAE,OAAQ,GAAO,CACpF,MACQJ,EAAQ,IAAI,8BAA+B,EAAE,EAG/C,GAAII,EAAO,aAAeA,EAAO,YAAY,OAAS,EAAG,CACvD,MAAMoZ,EAAmB,MAAM1S,EAAM,wBAAwB,OAAQ1G,EAAO,YAAa,CAAE,OAAQ,GAAO,CAClH,MACQJ,EAAQ,IAAI,6BAA8B,EAAE,CAE/C,OAAQiB,EAAO,CACd,MAAAjB,EAAQ,MAAM,gDAAiD,CAACiB,CAAK,CAAC,EAChEA,CACZ,CAEI,OAAAjB,EAAQ,IAAI,0BAA2B,CAACI,CAAM,CAAC,EAExCA,CACX,CACA,EC3WO,eAAeqZ,IAA4B,CAChD,OAAK,KAAK,SAER,MADe,MAAM,OAAO,OAAO,CAAC,MAAO,KAAK,OAAO,OAAO,EAAE,CAAC,GACpD,SAAU,EACvBrI,EAAoB,OAAO,OAAQ,KAAK,KAAK,SAAS,yCAAyC,CAAC,GAE3F,KAAK,MACd,CAQO,eAAesI,GAA0BC,EAAUC,EAAM,CAC9D,GAAI,CAACA,EAAK,OAAQ,OAAOD,EAEzB,MAAMrI,EAASqI,EACZ,IAAIlW,GAAMmW,EAAK,OAAO,IAAInW,CAAE,CAAC,EAC7B,OAAOqD,GAASA,CAAK,EAElB+S,EAA4B,CAAE,EAC9BC,EAAyB,IAAI,IAEnC,UAAWhT,KAASwK,EACCsI,EAAK,OAAO,qBAAqB9S,EAAM,EAAE,EAC3B,KAAKiT,GAAKA,EAAE,aAAe,IAAI,IAE9DF,EAA0B,KAAK/S,EAAM,IAAI,EACzCgT,EAAuB,IAAIhT,EAAM,EAAE,GAMvC,GAHA9G,EAAQ,IAAI,4BAA6B,CAAC6Z,CAAyB,CAAC,EAGhEA,EAA0B,OAAS,EAiBrC,GAhBe,MAAM,QAAQ,aAAa,IAAI,SAAS,QAAQ,CAC7D,OAAQ,CACN,MAAOD,EAAK,KAAK,SAAS,8CAA8C,EACxE,QAAS,CAAC,gBAAgB,CAC3B,EACD,SAAU,CACR,MAAO,IACP,OAAQ,MACT,EACD,QAAS,MAAQA,EAAK,KAAK,OAAO,0CAA2C,CAC3E,OAAQC,EAA0B,KAAK,IAAI,CAC5C,CAAA,EAAI,OACL,YAAa,GACb,MAAO,EACb,CAAK,EASM,CACL,GAAID,EAAK,KAAK,KACZ,UAAWnK,KAAWqK,EAAwB,CAC5C,MAAME,EAAaJ,EAAK,OAAO,qBAAqBnK,CAAO,EAC3DzP,EAAQ,IAAI,kEAAmE,CAACga,CAAU,CAAC,EAC3F,UAAWD,KAAKC,EACd,MAAMD,EAAE,OAAO,CAAE,WAAY,IAAI,CAAE,CAE/C,MAEQ/Z,EAAQ,IAAI,4FAA4F,EAG1G,OAAO2Z,CACb,KArBiB,CACX,MAAMM,EAAcN,EAAS,OAAOlW,GAAM,CAACqW,EAAuB,IAAIrW,CAAE,CAAC,EACzE,OAAIwW,EAAY,SAAW,GACzB7I,EAAoB,OAAO,OAAQwI,EAAK,KAAK,SAAS,mDAAmD,CAAC,EAGrGK,CACb,CAiBE,OAAON,CACT,CChFO,MAAMO,EAAkB,CAM7B,OAAO,cAAcpT,EAAO,ClBXvB,IAAAhH,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EkBYH,MAAM0N,EAASrT,EAAM,OACfsT,EAAQ,CAAE,GAGZta,EAAAqa,EAAO,aAAP,MAAAra,EAAmB,IACrBsa,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,WAAW,GAAG,KACpC,CAAO,GAIC7Y,EAAA6Y,EAAO,aAAP,MAAA7Y,EAAmB,IACrB8Y,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,WAAW,GAAG,KACpC,CAAO,EAGH,MAAME,GAAU9N,GAAA5C,EAAAwQ,EAAO,aAAP,YAAAxQ,EAAmB,QAAnB,YAAA4C,EAA0B,GAC1C,OAAI8N,GACFD,EAAM,KAAK,CACT,OAAQ,KACR,MAAOC,CACf,CAAO,GAGC5N,GAAAD,EAAA2N,EAAO,SAAP,YAAA3N,EAAe,MAAf,MAAAC,EAAoB,SACtB2N,EAAM,KAAK,CACT,OAAQ,MACR,MAAOD,EAAO,OAAO,IAAI,OACjC,CAAO,EAGIC,CACX,CAOE,OAAO,eAAetT,EAAO,ClBtDxB,IAAAhH,EkBuDH,MAAM2R,GAAK3R,EAAAgH,EAAM,OAAO,aAAb,YAAAhH,EAAyB,GACpC,GAAI,CAAC2R,GAAM,CAACA,EAAG,IACb,MAAO,CAAE,UAAW,IAAK,QAAS,2BAA6B,EAGjE,MAAM6I,EAAY,KAAK,MAAO7I,EAAG,MAAQA,EAAG,IAAO,GAAG,EAChD8I,EAAUD,EAAY,GAAK,4BAA8B,2BAE/D,MAAO,CAAE,UAAAA,EAAW,QAAAC,CAAS,CACjC,CAQE,OAAO,iBAAiBC,EAAkBC,EAAY,CACpD,OAAOD,EAAiB,OAAO/K,GAAW,CACxC,MAAM3I,EAAQ,KAAK,OAAO,IAAI2I,CAAO,EACrC,GAAI,CAAC3I,EAAO,MAAO,GACnB,MAAM4T,EAAOrL,GAAcvI,CAAK,EAC1B6T,EAAQ,CAACD,GAAQpL,GAAgBxI,CAAK,EAE5C,OAAQ2T,IAAe,MAAQC,GAAUD,IAAe,OAASE,CACvE,CAAK,CACL,CACA,CC5EA,MAAM,KAAKzb,EAAW,MAAO,IAAM,CAC5B,MAAM,aAAa,KAAK,+BAC3Bc,EAAQ,KAAK,oEAAoE,CAErF,CAAC,EAOM,SAAS4a,GAAkBC,EAAM,CACtC,OAAO,cAAcA,CAAK,CACxB,YAAYvO,EAAS,CAAE,EAAEuE,EAAU,CAAE,EAAEhR,EAAU,GAAI,CnBnBlD,IAAAC,EAAAwB,EmBoBD,MAAMgL,EAAQuE,EAAShR,CAAO,EAE9B,KAAK,OAASA,EAAQ,QAAU,CAAE,EAClC,KAAK,YAAcA,EAAQ,aAAeA,EAAQ,aAAe,GACjE,KAAK,OAASA,EAAQ,QAAU,GAChC,KAAK,QAAUA,EAAQ,SAAW,KAElC,KAAK,QAAUA,EAAQ,SAAWyM,EAAO,OAASA,EAAO,SAAW,KACpE,KAAK,eAAiBzM,EAAQ,gBAAkB,KAEhD,KAAK,cAAcC,EAAAD,EAAQ,SAAR,YAAAC,EAAgB,QAAS,GAC5C,KAAK,iBAAiBwB,EAAAzB,EAAQ,SAAR,YAAAyB,EAAgB,WAAY,EACxD,CAYI,aAAagL,EAAQ9B,EAAUD,EAAO,CACpC,MAAMuQ,EAAkBtQ,GAAA,YAAAA,EAAU,IAAI,WAChCuQ,EAAavQ,GAAA,YAAAA,EAAU,IAAI,MAE3BgI,EAAchI,GAAA,YAAAA,EAAU,IAAI,SAASD,CAAK,gBAEhD,GADAvK,EAAQ,IAAI,eAAgB,CAACwS,EAAahI,EAAU8B,CAAM,CAAC,EACvDkG,EACGlG,EAAO,QAAOA,EAAO,MAAQ,CAAE,GACpCA,EAAO,MAAM,KAAK,cAAc,EAC3BA,EAAO,OAAMA,EAAO,KAAO,CAAE,GAClCA,EAAO,KAAK,YAAckG,UAClBlG,EAAO,MAAO,CACtB,MAAM0O,EAAM1O,EAAO,MAAM,QAAQ,cAAc,EAC3C0O,IAAQ,IAAI1O,EAAO,MAAM,OAAO0O,EAAK,CAAC,CAClD,CAEUF,IACFxO,EAAO,QAAUwO,EACjB,KAAK,OAAO,QAAUA,GAGxB,MAAM1a,EAAS,MAAM,aAAakM,EAAQ9B,EAAUD,CAAK,EAEzD,GAAIwQ,EAAY,CACd,MAAME,EAAU,SAASF,CAAU,EAC9B,MAAME,CAAO,IAChB7a,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAAS6a,EAElC,MAAiB,KAAK,UAAY,QAAa,KAAK,UAAY,OACxD7a,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAAS,KAAK,SAG/B,OAAAJ,EAAQ,IAAI,GAAG,KAAK,YAAY,IAAI,gBAAiB,CAAC,KAAK,OAAQwK,EAAUpK,CAAM,CAAC,EAC7EA,CACb,CASI,cAAc8a,EAAYpQ,EAAO,CAC/B9K,EAAQ,IAAI,gBAAiB,CAAC8K,EAAM,OAAO,KAAK,CAAC,EACjD,MAAM,cAAcoQ,EAAYpQ,CAAK,EAErC,MAAMqQ,EAAsB,KAAK,QAAQ,cAAc,oCAAoC,EACvFA,IACF,KAAK,YAAcA,EAAoB,SAGzC,MAAM5E,EAAU,KAAK,QAAQ,cAAc,kBAAkB,EACzDA,GAAWA,EAAQ,QACrB,KAAK,QAAU,SAASA,EAAQ,KAAK,GAAK,KAGlD,CASI,eAAe6E,EAAQ,CACrB,MAAMC,EAAiB,MAAM,eAAeD,CAAM,EAGlD,GAFApb,EAAQ,IAAI,oBAAqB,CAACqb,EAAgB,KAAK,WAAW,CAAC,EAE/D,KAAK,UAAY,QAAa,KAAK,UAAY,KACjD,UAAW/a,KAAQ+a,EACjB/a,EAAK,QAAQ,OAAS,KAAK,QAI/B,YAAK,OAAO,YAAc,KAAK,YAExB+a,CACb,CAWI,MAAM,UAAUrS,EAASnJ,EAAS,CnBxI/B,IAAAC,EAAAwB,EAAAqI,EmByID,MAAM,MAAM,UAAUX,EAASnJ,CAAO,IAElC8J,GAAArI,GAAAxB,EAAA,KAAK,OAAO,QAAZ,YAAAA,EAAoB,KAApB,YAAAwB,EAAwB,OAAxB,MAAAqI,EAA8B,aAAe,KAAK,OAAO,eAC3D3J,EAAQ,IAAI,GAAG,KAAK,YAAY,IAAI,aAAc,CAAC,kDAAkD,CAAC,EACtG,WAAW,IAAM,CACf,KAAK,QAAS,CACf,EAAE,GAAG,EAEd,CACG,CACH,CCvIO,MAAMsb,WAA2BV,GAAkB,MAAM,aAAa,KAAK,0BAA0B,CAAE,CAgB5G,YAAYtO,EAAS,CAAE,EAAEuE,EAAU,CAAE,EAAEhR,EAAU,GAAI,CACnDA,EAAQ,SAAWA,EAAQ,UAAY,OAAO,KAAK,QACnD,MAAMyM,EAAQuE,EAAShR,CAAO,EAE9BG,EAAQ,IAAI,uCAAwC,CAACsM,EAAQuE,EAAShR,CAAO,CAAC,CAClF,CAQE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,gBAAgB,CAChE,CAAK,CACL,CASE,IAAI,OAAQ,CACV,OAAO,KAAK,aAAe,MAAM,KACrC,CAmBE,0BAA0BS,EAAMgM,EAAQuJ,EAAQhF,EAAS,CACvD7Q,EAAQ,IAAI,4BAA6B,CAACM,EAAMgM,EAAQuJ,EAAQhF,CAAO,CAAC,EACxE,MAAMrR,EAAO,MAAM,0BAA0Bc,EAAMgM,EAAQuJ,EAAQhF,CAAO,EAE1E,OAAArR,EAAK,OAAS,KAAK,OACnBA,EAAK,QAAU,KAAK,QACpBA,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAiBE,MAAM,oBAAoBkK,EAAQV,EAASnJ,EAAS,CAClD,OAAAG,EAAQ,IAAI,sBAAuB,CAAC0J,EAAQV,EAASnJ,CAAO,CAAC,EAC7DmJ,EAAU,MAAM,MAAM,oBAAoBU,EAAQV,EAASnJ,CAAO,EAE9D6J,IAAW,kBACbV,EAAQ,OAAS,KAAK,OACtBA,EAAQ,QAAU,KAAK,QACvBA,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,QAG5BA,CACX,CAYE,MAAM,UAAUA,EAASnJ,EAAS,CAKhC,GAJAG,EAAQ,IAAI,YAAa,CAACgJ,EAASnJ,CAAO,CAAC,EAC3C,MAAM,UAAUmJ,EAASnJ,CAAO,EAEhC6B,EAAY,qBAAqB,KAAK,OAAO,EACzC,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAGF,IAAI6Z,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EAEjE,GAAIA,IAAkB,KAAK,QAAU,KAAK,OAAO,OAAS,GAAI,CAC5D,MAAMC,EAAe,CACnB,OAAQ,KAAK,OACb,QAAS,KAAK,QACd,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM/Z,EAAY,eAAe,WAAW/C,CAAS,uCAAwC6c,CAAY,EAEpHE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAEpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,EAC5DA,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CAEI,KAAK,uBAAwB,CACjC,CAQE,wBAAyB,CACvBvb,EAAQ,IAAI,yBAA0B,CAAC,KAAK,OAAO,CAAC,EACpC,KAAK,QAAQ,iBAAiB,iFAAiF,EACvH,QAAQ2b,GAAU,CACxBA,EAAO,iBAAiB,QAAU7Q,GAAU,CAC3BA,EAAM,cAAc,QAAQ,MACnD,CAAO,CACP,CAAK,CACL,CAmBE,aAAa,kBAAkBwG,EAAQ1F,EAAUuC,EAAStO,EAAU,CAAA,EAAI,CpB/LnE,IAAAC,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAiP,EoBiMH,GADAtK,EAASiB,EAAY,eAAejB,CAAM,EACtC,CAACA,EAAQ,OAAO,KAEpB,MAAMxK,EAAQwK,EAAO,CAAC,EACtBtR,EAAQ,IAAI,wCAAyC,EAAE,EAEvD,MAAM+M,EAAqBnB,GAAA,YAAAA,EAAU,cAE/B1E,EAAWxI,EAAa,EACxB4U,EAAkBlM,EAAa,IAAIF,EAAS,kBAAkB,GAAG,IAAM,GACvE2L,EAAWN,EAAY,kBAAkBe,CAAe,EAExDuI,EAAStJ,EAAY,aAAaxF,CAAkB,EACpD+O,EAAYvJ,EAAY,aAAaxF,CAAkB,EACvD2F,EAAaH,EAAY,qBAAqBzL,EAAO8E,EAAUuC,CAAO,EACtE4E,EAAgBR,EAAY,oBAAoBzL,EAAO+L,CAAQ,EAE/DtN,EAAe,CACnB,QAAS,CACP,OAAA+L,EACA,YAAaA,EAAO,KAAKtG,GAAKuH,EAAY,cAAcvH,CAAC,CAAC,EAC1D,OAAA6Q,EACA,QAAA1N,EACA,SAAU2N,EACV,eAAgB/O,EAChB,OAAQ,CACN,MAAOuO,GAAmB,cAAcvO,EAAoBoB,EAASrH,CAAK,EAC1E,SAAUwU,GAAmB,aAAahK,CAAM,CACjD,EACD,SAAU,CACR,MAAO,IACP,OAAQ,MACT,EACD,GAAGzR,CACX,CACK,EACKO,EAAS,MAAMmS,EAAY,kBAAkB,KAAMG,EAAYK,EAAexN,EAAa,OAAO,EAElG8N,EAAoBd,EAAY,oBAAoBnS,EAAQkR,EAAQ1F,EAAUuC,EAAStO,CAAO,EACpG,GAAI,CAACwT,EAAmB,OAAO,KAE/B,IAAIvT,EAAAM,EAAO,SAAP,MAAAN,EAAe,SAAW,CAACf,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASgO,CAAkB,EAAG,CAC9F,MAAM+L,IAAiBnP,GAAArI,EAAAwF,EAAM,OAAO,SAAb,YAAAxF,EAAsB6M,KAAtB,YAAAxE,EAAgC,YAAW6C,GAAAD,EAAA,OAAO,MAAM,SAAb,YAAAA,EAAsB4B,KAAtB,YAAA3B,EAAgC,SAC9FpM,EAAO,OAAO,UAAY0Y,IAC5BzF,EAAkB,QAAUjT,EAAO,OAAO,QAElD,CAEI,IAAI2b,EAAaxW,EAAa,QAAQ,OAAO,MAC7C,GAAInF,EAAO,OAAO,SAAW,CAACrB,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASgO,CAAkB,EAAG,CAC7F,MAAMiP,IAAuBvP,EAAA,OAAO,MAAM,UAAUrM,EAAO,OAAO,OAAO,IAA5C,YAAAqM,EAA+C,QAASrM,EAAO,OAAO,QACnG,GAAI2M,IAAuBhO,EAAW,MAAO,CAC3C,MAAMyY,IAAa9K,EAAA,OAAO,MAAM,OAAOyB,CAAO,IAA3B,YAAAzB,EAA8B,QAASyB,EAC1D4N,EAAa,KAAK,KAAK,OAAO,yBAA0B,CACtD,MAAOvE,EACP,QAASwE,CACnB,CAAS,CACT,SAAiBjP,IAAuBhO,EAAW,KAAM,CACjD,MAAMsP,GAAWuN,GAAAjP,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAiP,EAAuCzN,GACxD,IAAIwJ,GAAYxJ,EAChB,GAAIE,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAMC,GAAW,MAAM,UAAU,MAAM,YAAYD,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFsJ,IAAYrJ,IAAA,YAAAA,GAAU,OAAQH,CACxC,CACQ4N,EAAa,KAAK,KAAK,OAAO,wBAAyB,CACrD,KAAMpE,GACN,QAASqE,CACnB,CAAS,CACT,CACA,CAEI,OAAA3I,EAAkB,UAAY0I,EAC9B1I,EAAkB,SAAWtG,EAC7BsG,EAAkB,QAAUlF,EAErBkF,CACX,CAUE,OAAO,cAAczH,EAAUuC,EAASrH,EAAO,CpBtR1C,IAAAhH,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAiP,EAAAK,EAAAC,EAAAC,EAAAC,EoBuRH,IAAI9W,EAAQ,GAEZ,MAAMyH,EAAqBnB,GAAA,YAAAA,EAAU,cAMrC,OAJI,CAAC7M,EAAW,KAAMA,EAAW,QAASA,EAAW,aAAa,EAAE,SAASgO,CAAkB,GAAK,CAACoB,GACnGnO,EAAQ,KAAK,gCAAiC,CAAC+M,EAAoBoB,CAAO,CAAC,EAGrEpB,EAAkB,CACxB,KAAKhO,EAAW,MACd,MAAMyY,IAAa1X,EAAA,OAAO,MAAM,OAAOqO,CAAO,IAA3B,YAAArO,EAA8B,QAASqO,EACpDkO,GAAQ/a,EAAAwF,GAAA,YAAAA,EAAO,OAAO,SAAd,YAAAxF,EAAuB6M,GAC/B2K,GAAiBuD,GAAA,YAAAA,EAAO,YAAW1S,EAAA,OAAO,MAAM,OAAOwE,CAAO,IAA3B,YAAAxE,EAA8B,UAAW,MAC5E2N,IAAe/K,EAAA,OAAO,MAAM,UAAUuM,CAAc,IAArC,YAAAvM,EAAwC,QAASuM,EACtExT,EAAQ,KAAK,KAAK,OAAO,yBAA0B,CACjD,MAAOkS,EACP,QAASF,CACnB,CAAS,EACD,MACF,KAAKvY,EAAW,KAChB,KAAKA,EAAW,aACd,MAAMud,IAAc9P,EAAA,OAAO,MAAM,UAAU2B,CAAO,IAA9B,YAAA3B,EAAiC,QAAS2B,EAC9D7I,EAAQ,KAAK,KAAK,OAAO,wBAAyB,CAAE,QAASgX,EAAa,EAC1E,MACF,KAAKvd,EAAW,QAChB,KAAKA,EAAW,cACd,MAAMwd,IAAe9P,EAAA,OAAO,MAAM,UAAU0B,CAAO,IAA9B,YAAA1B,EAAiC,QAAS0B,EAC/D7I,EAAQ,KAAK,KAAK,OAAO,2BAA4B,CAAE,QAASiX,EAAc,EAC9E,MACF,KAAKxd,EAAW,cACduG,EAAQ,KAAK,KAAK,SAAS,qBAAqB,EAChD,MACF,KAAKvG,EAAW,KACd,MAAMsP,GAAW1B,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuCwB,GACxD,IAAIwJ,EAAYxJ,EAChB,GAAIE,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAMC,GAAW,MAAM,UAAU,MAAM,YAAYD,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFsJ,GAAYrJ,IAAA,YAAAA,GAAU,OAAQH,CACxC,CACQ,MAAMwG,GAAOiH,EAAA9U,GAAA,YAAAA,EAAO,OAAO,QAAd,YAAA8U,EAAsBzN,GAC7BqO,GAAqB7H,GAAA,YAAAA,EAAM,YAAWwH,GAAAD,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuC/N,KAAvC,YAAAgO,EAAiD,UAAW,MAClGtE,KAAmBuE,EAAA,OAAO,MAAM,UAAUI,CAAkB,IAAzC,YAAAJ,EAA4C,QAASI,EAC9ElX,EAAQ,KAAK,KAAK,OAAO,wBAAyB,CAChD,KAAMqS,EACN,QAASE,EACnB,CAAS,EACD,MACF,KAAK9Y,EAAW,WACduG,EAAQ,KAAK,KAAK,SAAS,iBAAiB,EAC5C,MACF,KAAKvG,EAAW,WAChB,KAAKA,EAAW,kBACduG,EAAQ,KAAK,KAAK,SAAS,kBAAkB,EAC7C,MACF,QACEA,EAAQ,KAAK,KAAK,SAAS,YAAY,CAC/C,CACI,OAAAtF,EAAQ,IAAI,gBAAiB,CAAC+M,EAAoBzH,CAAK,CAAC,EAEjDA,CACX,CAEE,OAAO,aAAagM,EAAS,GAAI,CAC/B,OAAIA,EAAO,SAAW,EACbA,EAAO,CAAC,EAAE,KACRA,EAAO,OAAS,EAClB,KAAK,KAAK,SAAS,uCAAuC,EAE1D,EAEb,CACA,CChVO,MAAMmL,WAA6B7B,GAAkB,MAAM,aAAa,KAAK,uBAAuB,CAAE,CAW3G,YAAYtO,EAAS,CAAE,EAAEuE,EAAU,CAAE,EAAEhR,EAAU,GAAI,CACnDA,EAAQ,SAAW,OAAO,KAAK,WAAa,KAC5CA,EAAQ,OAAS,GAEjB,MAAMyM,EAAQuE,EAAShR,CAAO,EAE9BG,EAAQ,IAAI,cAAe,CAACsM,EAAQuE,EAAShR,CAAO,CAAC,CACzD,CASE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,iBAAkB,gBAAgB,CAClF,CAAK,CACL,CAcE,0BAA0BS,EAAMgM,EAAQuJ,EAAQhF,EAAS,CACvD,MAAMrR,EAAO,MAAM,0BAA0Bc,EAAMgM,EAAQuJ,EAAQhF,CAAO,EAC1E,OAAA7Q,EAAQ,IAAI,iDAAkD,CAACR,CAAI,CAAC,EAEpEA,EAAK,QAAU,4BACfA,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAYE,MAAM,oBAAoBkK,EAAQV,EAASnJ,EAAS,CAClD,OAAAmJ,EAAU,MAAM,MAAM,oBAAoBU,EAAQV,EAASnJ,CAAO,EAE9D6J,IAAW,kBACbV,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,OACjCA,EAAQ,QAAU,6BAGbA,CACX,CAWE,MAAM,UAAUA,EAASnJ,EAAS,CAKhC,GAJA,MAAM,UAAUmJ,EAASnJ,CAAO,EAEhC6B,EAAY,qBAAqB,KAAK,OAAO,EAEzC,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAGF,IAAI6Z,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EAEjE,GAAIA,GAAiB,KAAK,OAAO,OAAS,EAAG,CAC3C,MAAMC,EAAe,CACnB,OAAQ,GACR,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM/Z,EAAY,eAAe,WAAW/C,CAAS,uCAAwC6c,CAAY,EAEpHE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAEpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CACA,CAYE,MAAM,mBAAmBzQ,EAAOC,EAAMP,EAAU,CAC9C,MAAM,MAAM,mBAAmBM,EAAOC,EAAMP,CAAQ,EACpD,KAAK,YAAcA,EAAS,IAAI,sBAAsB,IAAM,QAE5DxK,EAAQ,IAAI,qBAAsB,CAACwK,EAAU,KAAK,MAAM,CAAC,CAC7D,CAWE,eAAe4Q,EAAQ,CACrB,MAAMC,EAAiB,MAAM,eAAeD,CAAM,EAClD,YAAK,OAAO,YAAc,KAAK,YAExBC,CACX,CAaE,aAAa,kBAAkB/J,EAAQ1F,EAAUuC,EAAStO,EAAU,CAAA,EAAI,CrB7KnE,IAAAC,EqB+KH,GADAwR,EAASiB,EAAY,eAAejB,CAAM,EACtC,CAACA,EAAQ,OAAO,KAEpB,MAAMxK,EAAQwK,EAAO,CAAC,EACtBtR,EAAQ,IAAI,0CAA2C,EAAE,EAEzD,MAAMkH,EAAWxI,EAAa,EACxB4U,EAAkBlM,EAAa,IAAIF,EAAS,kBAAkB,GAAG,IAAM,GACvE2L,EAAWN,EAAY,kBAAkBe,CAAe,EAExDZ,EAAa,CACjB,KAAM5L,EAAM,YAAa,EACzB,QAASA,EACT,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMA,EAAM,YAAa,EACzB,QAAS,CACP,OAAQ,cAClB,CACO,CAAA,CACF,EAEKiM,EAAgBR,EAAY,oBAAoBzL,EAAO+L,CAAQ,EAE/DtN,EAAe,CACnB,QAAS,CACP,OAAA+L,EACA,YAAaA,EAAO,KAAKtG,GAAKuH,EAAY,cAAcvH,CAAC,CAAC,EAC1D,QAAAmD,EACA,SAAU,OAAO,KAAK,WAAa,KACnC,OAAQ,CACN,MAAO,KAAK,KAAK,SAAS,eAAe,EACzC,SAAUmN,GAAmB,aAAahK,CAAM,CACjD,EACD,SAAU,CACR,MAAO,IACP,OAAQ,MACT,EACD,GAAGzR,CACX,CACK,EAEKO,EAAS,MAAMmS,EAAY,kBAAkB,KAAMG,EAAYK,EAAexN,EAAa,OAAO,EACxG,GAAI,EAACnF,GAAA,MAAAA,EAAQ,QAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAExDJ,EAAQ,IAAI,uCAAwC,CAACI,EAAO,KAAK,CAAC,EAElE,MAAMiT,EAAoBd,EAAY,oBAAoBnS,EAAQkR,EAAQ1F,EAAUuC,EAAStO,CAAO,EACpG,OAAKwT,IAEDvT,EAAAM,EAAO,SAAP,MAAAN,EAAe,UACjBuT,EAAkB,QAAUjT,EAAO,OAAO,SAGrCiT,GANwB,IAOnC,CACA,CCxNO,MAAMqJ,WAAgC9B,GAAkB,MAAM,aAAa,KAAK,gCAAgC,CAAE,CAevH,YAAYtO,EAAS,CAAE,EAAEuE,EAAU,CAAE,EAAEhR,EAAU,GAAI,CACnD,MAAM8c,EAAc,QAAQ,MAAM,YAAYrQ,EAAQ,CACpD,cAAe,EACrB,CAAK,EACDzM,EAAQ,SAAWA,EAAQ,UAAY,OAAO,KAAK,QACnD,MAAM8c,EAAa9L,EAAShR,CAAO,EAEnCG,EAAQ,IAAI,cAAe,CAACsM,EAAQuE,EAAShR,CAAO,CAAC,CACzD,CAKE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,gBAAgB,CAChE,CAAK,CACL,CAcE,0BAA0BS,EAAMgM,EAAQuJ,EAAQhF,EAAS,CACvD7Q,EAAQ,IAAI,4BAA6B,CAACM,EAAMgM,EAAQuJ,EAAQhF,CAAO,CAAC,EACxE,MAAMrR,EAAO,MAAM,0BAA0Bc,EAAMgM,EAAQuJ,EAAQhF,CAAO,EAG1E,OAAArR,EAAK,OAAS,KAAK,OACnBA,EAAK,QAAU,KAAK,QACpBA,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAYE,MAAM,oBAAoBkK,EAAQV,EAASnJ,EAAS,CAClD,OAAAG,EAAQ,IAAI,sBAAuB,CAAC0J,EAAQV,EAASnJ,CAAO,CAAC,EAC7DmJ,EAAU,MAAM,MAAM,oBAAoBU,EAAQV,EAASnJ,CAAO,EAE9D6J,IAAW,kBACbV,EAAQ,OAAS,KAAK,OACtBA,EAAQ,QAAU,KAAK,QACvBA,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,QAG5BA,CACX,CAWE,MAAM,UAAUA,EAASnJ,EAAS,CAMhC,GALAG,EAAQ,IAAI,YAAa,CAACgJ,EAASnJ,CAAO,CAAC,EAC3C,MAAM,UAAUmJ,EAASnJ,CAAO,EAEhC6B,EAAY,qBAAqB,KAAK,OAAO,EAEzC,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAGF,IAAI6Z,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EAEjE,GAAIA,IAAkB,KAAK,QAAU,KAAK,OAAO,OAAS,GAAI,CAC5D,MAAMC,EAAe,CACnB,OAAQ,KAAK,OACb,QAAS,KAAK,QACd,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM/Z,EAAY,eAAe,WAAW/C,CAAS,uCAAwC6c,CAAY,EAEpHE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAEpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CAEI,KAAK,uBAAwB,CACjC,CAQE,wBAAyB,CACvBvb,EAAQ,IAAI,yBAA0B,EAAE,EAExB,KAAK,QAAQ,iBAAiB,iFAAiF,EACvH,QAAQ2b,GAAU,CACxBA,EAAO,iBAAiB,QAAU7Q,GAAU,CAC3BA,EAAM,cAAc,QAAQ,MACnD,CAAO,CACP,CAAK,CACL,CAeE,aAAa,kBAAkBwG,EAAQ1F,EAAUuC,EAAStO,EAAU,CAAA,EAAI,CtBxKnE,IAAAC,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EsB2KH,GADA6E,EAASiB,EAAY,eAAejB,CAAM,EACtC,CAACA,EAAQ,OAAO,KAEpB,MAAMxK,EAAQwK,EAAO,CAAC,EACtBtR,EAAQ,IAAI,6CAA8C,EAAE,EAE5D,MAAM+M,EAAqBnB,GAAA,YAAAA,EAAU,cAC/B1E,EAAWxI,EAAa,EACxB4U,EAAkBlM,EAAa,IAAIF,EAAS,kBAAkB,GAAG,IAAM,GACvE2L,EAAWN,EAAY,kBAAkBe,CAAe,EAExDuI,EAAStJ,EAAY,aAAaxF,CAAkB,EACpD+O,EAAY,OAAO,KAAK,QAE9B,IAAIhD,EAAiB,KACrB,GAAI/L,IAAuBhO,EAAW,MAAO,CAC3C,MAAMsd,EAAQvV,EAAM,OAAO,OAAOqH,CAAO,EACzC2K,GAAiBuD,GAAA,YAAAA,EAAO,YAAWvc,EAAA,OAAO,MAAM,OAAOqO,CAAO,IAA3B,YAAArO,EAA8B,UAAW,KAClF,SAAeiN,IAAuBhO,EAAW,KAAM,CACjD,MAAM4V,GAAOrT,EAAAwF,EAAM,OAAO,QAAb,YAAAxF,EAAqB6M,GAClC2K,GAAiBnE,GAAA,YAAAA,EAAM,YAAWnI,GAAAD,GAAA5C,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAA4C,EAAuC4B,KAAvC,YAAA3B,EAAiD,UAAW,KACpG,CAEI,MAAMkG,EAAa,CACjB,KAAM5L,EAAM,YAAa,EACzB,QAASA,EACT,QAASgS,EACT,cAAe,GACf,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMhS,EAAM,YAAa,EACzB,QAAS,CAAA,CACV,CAAA,CACF,EAEGiG,IAAuBhO,EAAW,MACpC2T,EAAW,MAAQvE,EACVpB,IAAuBhO,EAAW,OAC3C2T,EAAW,KAAOvE,GAGpB,MAAM4E,EAAgBR,EAAY,oBAAoBzL,EAAO+L,CAAQ,EAE/DtN,EAAe,CACnB,QAAS,CACP,OAAA+L,EACA,YAAaA,EAAO,KAAKtG,GAAKuH,EAAY,cAAcvH,CAAC,CAAC,EAC1D,OAAA6Q,EACA,QAAA1N,EACA,SAAU2N,EACV,eAAgB/O,EAChB,OAAQ,CACN,MAAOuO,GAAmB,cAAcvO,EAAoBoB,EAASrH,CAAK,EAC1E,SAAUwU,GAAmB,aAAahK,CAAM,CACjD,EACD,SAAU,CACR,MAAO,IACP,OAAQ,MACT,EACD,GAAGzR,CACX,CACK,EAEKO,EAAS,MAAMmS,EAAY,kBAAkB,KAAMG,EAAYK,EAAexN,EAAa,OAAO,EAElG8N,EAAoBd,EAAY,oBAAoBnS,EAAQkR,EAAQ1F,EAAUuC,EAAStO,CAAO,EACpG,OAAKwT,IAED5G,EAAArM,EAAO,SAAP,MAAAqM,EAAe,SAAW,CAAC1N,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASgO,CAAkB,IAC3FsG,EAAkB,QAAUjT,EAAO,OAAO,SAG5CiT,EAAkB,UAAY9N,EAAa,QAAQ,OAAO,MAC1D8N,EAAkB,SAAWtG,EAC7BsG,EAAkB,QAAUlF,EAErBkF,GAVwB,IAWnC,CACA,CC3OO,MAAMuJ,WAA6BhC,GAAkB,MAAM,aAAa,KAAK,6BAA6B,CAAE,CAUjH,YAAYtO,EAAS,CAAE,EAAEuE,EAAU,CAAE,EAAEhR,EAAU,GAAI,CAEnD,MAAM0F,EAAe,QAAQ,MAAM,YAAY,CAC7C,UAAW,EACZ,EAAE+G,CAAM,EAET,MAAM/G,EAAcsL,EAAShR,CAAO,EAEpCG,EAAQ,IAAI,mCAAoC,CAACuF,EAAcsL,EAAShR,CAAO,CAAC,CACpF,CAKE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,cAAe,gBAAgB,CAC/E,CAAK,CACL,CAYE,0BAA0BS,EAAMgM,EAAQuJ,EAAQhF,EAAS,CACvD7Q,EAAQ,IAAI,iDAAkD,CAACM,EAAMgM,EAAQuJ,EAAQhF,CAAO,CAAC,EAC7F,MAAMrR,EAAO,MAAM,0BAA0Bc,EAAMgM,EAAQuJ,EAAQhF,CAAO,EAE1E,OAAArR,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAWE,MAAM,UAAUwJ,EAASnJ,EAAS,CAOhC,GANA,MAAM,MAAM,UAAUmJ,EAASnJ,CAAO,EAGtC6B,EAAY,qBAAqB,KAAK,OAAO,EAGzC,KAAK,OAAO,OAAS,EAAG,CAC1B,MAAMmb,EAAc,KAAK,QAAQ,cAAc,0BAA0B,EACzE,GAAIA,GAAe,CAAC,KAAK,QAAQ,cAAc,wBAAwB,EAAG,CACxE,MAAMnB,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAY;AAAA;AAAA;AAAA,mEAGuC,KAAK,YAAc,UAAY,EAAE;AAAA,gBACpF,KAAK,KAAK,SAAS,6CAA6C,CAAC;AAAA;AAAA;AAAA,UAIzEmB,EAAY,sBAAsB,cAAenB,CAAO,CAChE,CACA,CACA,CAeE,aAAa,kBAAkBpK,EAAQ1F,EAAUuC,EAAStO,EAAU,CAAE,EAAEid,EAAiB,CAAA,EAAIC,EAAiB,GAAI,CvB9G7G,IAAAjd,EAAAwB,EAAAqI,EAAA4C,EAAAC,EuBiHH,GAFA8E,EAASiB,EAAY,eAAejB,CAAM,EAC1CtR,EAAQ,IAAI,iDAAkD,CAACsR,CAAM,CAAC,EAClE,CAACA,EAAQ,OAAO,KAEpB,MAAMxK,EAAQwK,EAAO,CAAC,EAChBpK,EAAWxI,EAAa,EACxB4U,EAAkBlM,EAAa,IAAIF,EAAS,kBAAkB,GAAG,IAAM,GACvE2L,EAAWN,EAAY,kBAAkBe,EAAiBwJ,EAAe,QAAQ,EAEjF/P,EAAqBnB,GAAA,YAAAA,EAAU,cAE/B8G,EAAa,CACjB,QAASoK,EAAe,SAAWhW,EACnC,KAAMA,EAAM,YAAa,EACzB,SAAUgW,EAAe,UAAY,CAAE,EACvC,MAAOA,EAAe,OAAS,CAAC,CAC9B,MAAO,CAAE,EACT,KAAMhW,EAAM,YAAa,EACzB,QAAS,CAAA,CACV,CAAA,CACF,EACD9G,EAAQ,IAAI,6CAA8C,CAAC0S,CAAU,CAAC,EAEtE,MAAMK,EAAgBR,EAAY,oBAAoBzL,EAAO+L,CAAQ,EACrE7S,EAAQ,IAAI,6CAA8C,CAAC+S,CAAa,CAAC,EAEzE,KAAM,CAAE,SAAAiK,EAAU,GAAGhK,CAAe,GAAG+J,GAAA,YAAAA,EAAgB,UAAW,GAE5DxX,EAAe,CACnB,QAAS,CACP,OAAA+L,EACA,YAAaA,EAAO,KAAKtG,GAAKuH,EAAY,cAAcvH,CAAC,CAAC,EAC1D,QAAAmD,EACA,SAAU,OAAO,KAAK,WACtB,eAAgBpB,EAChB,OAAQ,CACN,MAAO,KAAK,KAAK,SAAS,kBAAkB,EAC5C,SAAUuO,GAAmB,aAAahK,CAAM,CACjD,EACD,GAAG0B,EACH,GAAGnT,CACX,CACK,EAEKO,EAAS,MAAMmS,EAAY,kBAAkB,KAAMG,EAAYK,EAAexN,EAAa,OAAO,EAExG,GAAI,EAACnF,GAAA,MAAAA,EAAQ,QAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAExD,MAAM6S,EAAY7S,EAAO,MAAM,CAAC,EAE1BoS,IAAc1S,EAAAmT,GAAA,YAAAA,EAAW,OAAX,YAAAnT,EAAiB,cAAe,GAC9CsT,GAAS9R,EAAA2R,GAAA,YAAAA,EAAW,UAAX,YAAA3R,EAAoB,OAE7B+R,EAAoB,CACxB,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMb,EAAc,CAAE,YAAAA,CAAW,EAAK,CAAE,EACxC,QAAS,CACP,GAAIY,GAAU,CAAE,OAAAA,GAChB,aAAYzJ,EAAAsJ,GAAA,YAAAA,EAAW,UAAX,YAAAtJ,EAAoB,cAAcsJ,GAAA,YAAAA,EAAW,aAAc,EACjF,CACA,CAAO,EACD,QAAS6J,EAAe,SAAWhW,EACnC,OAAAsM,EACA,aAAY7G,EAAA0G,GAAA,YAAAA,EAAW,UAAX,YAAA1G,EAAoB,cAAc0G,GAAA,YAAAA,EAAW,aAAc,GACvE,YAAa7S,EAAO,YACpB,cAAeA,EAAO,YACtB,eAAgBP,EAAQ,gBAAkB,GAC1C,YAAa,EACd,EACDG,EAAQ,IAAI,6CAA8C,CAACqT,CAAiB,CAAC,EAE7E,MAAM4J,EAAgB1K,EAAY,kBAAkBe,GAAiB9G,EAAApM,EAAO,UAAP,YAAAoM,EAAgB,QAAQ,EAC7F,OAAA6G,EAAkB,SAAW4J,EAE7B5J,EAAkB,UAAY9N,EAAa,QAAQ,OAAO,MAC1D8N,EAAkB,SAAWtG,EAC7BsG,EAAkB,QAAUlF,EAE5BnO,EAAQ,IAAI,mDAAoD,CAACqT,CAAiB,CAAC,EAE5EA,CACX,CACA,CCpLO,MAAM6J,WAA6BtC,GAAkB,MAAM,aAAa,KAAK,6BAA6B,CAAE,CAUjH,YAAYtO,EAAS,CAAE,EAAEuE,EAAU,CAAE,EAAEhR,EAAU,GAAI,CACnD,MAAMyM,EAAQuE,EAAShR,CAAO,EAE9BG,EAAQ,IAAI,mCAAoC,CAACsM,EAAQuE,EAAShR,CAAO,CAAC,CAC9E,CAKE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,gBAAgB,CAChE,CAAK,CACL,CAYE,0BAA0BS,EAAMgM,EAAQuJ,EAAQhF,EAAS,CACvD7Q,EAAQ,IAAI,iDAAkD,CAACM,EAAMgM,EAAQuJ,EAAQhF,CAAO,CAAC,EAC7F,MAAMrR,EAAO,MAAM,0BAA0Bc,EAAMgM,EAAQuJ,EAAQhF,CAAO,EAE1E,OAAArR,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAWE,MAAM,oBAAoBkK,EAAQV,EAASnJ,EAAS,CAClD,OAAAmJ,EAAU,MAAM,MAAM,oBAAoBU,EAAQV,EAASnJ,CAAO,EAE9D6J,IAAW,kBACbV,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,QAG5BA,CACX,CAUE,MAAM,UAAUA,EAASnJ,EAAS,CAKhC,GAJA,MAAM,MAAM,UAAUmJ,EAASnJ,CAAO,EAEtC6B,EAAY,qBAAqB,KAAK,OAAO,EAEzC,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAGF,IAAI6Z,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EAEjE,GAAIA,GAAiB,KAAK,OAAO,OAAS,EAAG,CAC3C,MAAMC,EAAe,CACnB,OAAQ,GACR,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM/Z,EAAY,eAAe,WAAW/C,CAAS,uCAAwC6c,CAAY,EAEpHE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAEpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CACA,CASE,eAAeH,EAAQ,CACrB,YAAK,OAAO,YAAc,KAAK,YAE3B,CAAC,KAAK,aAAe,KAAK,OAAO,gBACnC,KAAK,OAAO,cAAgB,IAGvB,MAAM,eAAeA,CAAM,CACtC,CAeE,aAAa,kBAAkB9J,EAAQ1F,EAAUuC,EAAStO,EAAU,CAAE,EAAEid,EAAiB,CAAA,EAAIC,EAAiB,GAAI,CxBjJ7G,IAAAjd,EAAAwB,EAAAqI,EAAA4C,EAAAC,GAAAC,GAAAC,GwBoJH,GADA4E,EAASiB,EAAY,eAAejB,CAAM,EACtC,CAACA,EAAQ,OAAO,KAEpB,MAAMxK,EAAQwK,EAAO,CAAC,EACtBtR,EAAQ,IAAI,0CAA2C,EAAE,EAEzD,MAAMkH,EAAWxI,EAAa,EACxB4U,EAAkBlM,EAAa,IAAIF,EAAS,kBAAkB,GAAG,IAAM,GAEvE6F,EAAqBnB,GAAA,YAAAA,EAAU,cAE/B8G,EAAa,CACjB,QAASoK,EAAe,SAAWhW,EACnC,KAAMA,EAAM,YAAa,EACzB,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMA,EAAM,YAAa,EACzB,QAAS,CAAA,CACV,CAAA,CACF,EAEK+L,EAAWN,EAAY,kBAAkBe,CAAe,EAExDP,EAAgBR,EAAY,oBAAoBzL,EAAO+L,CAAQ,EAE/D,CAAE,SAAAmK,EAAU,GAAGhK,CAAe,GAAG+J,GAAA,YAAAA,EAAgB,UAAW,CAAE,EAC9DxX,EAAe,CACnB,QAAS,CACP,OAAA+L,EACA,YAAaA,EAAO,KAAKtG,IAAKuH,EAAY,cAAcvH,EAAC,CAAC,EAC1D,QAAAmD,EACA,SAAU,OAAO,KAAK,QACtB,eAAgBpB,EAChB,OAAQ,CACN,MAAO,KAAK,KAAK,SAAS,cAAc,EACxC,SAAUuO,GAAmB,aAAahK,CAAM,CACjD,EACD,GAAG0B,EACH,GAAGnT,CACX,CACK,EAEKO,EAAS,MAAMmS,EAAY,kBAAkB,KAAMG,EAAYK,EAAexN,EAAa,OAAO,EAGxG,GAFAvF,EAAQ,IAAI,0CAA2C,CAACI,GAAA,YAAAA,EAAQ,WAAW,CAAC,EAExE,EAACA,GAAA,MAAAA,EAAQ,QAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAExD,MAAM6S,EAAY7S,EAAO,MAAM,CAAC,EAChC,IAAI8S,EAAY,GACZC,EAAe,KAEfrT,EAAAmT,GAAA,YAAAA,EAAW,UAAX,YAAAnT,EAAoB,iBAAkB,SACxCoT,EAAYD,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,UAC7EE,EAAeF,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,cAGlF,MAAMT,IAAclR,EAAA2R,GAAA,YAAAA,EAAW,OAAX,YAAA3R,EAAiB,cAAe,GAC9C8R,GAASzJ,EAAAsJ,GAAA,YAAAA,EAAW,UAAX,YAAAtJ,EAAoB,OAE7B0J,EAAoB,CACxB,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMb,EAAc,CAAE,YAAAA,CAAW,EAAK,CAAE,EACxC,QAAS,CACP,GAAIY,GAAU,CAAE,OAAAA,GAEhB,KAAI7G,EAAA0G,GAAA,YAAAA,EAAW,UAAX,YAAA1G,EAAoB,aAAc,CAAE,WAAY0G,EAAU,QAAQ,YACtE,KAAIzG,GAAAyG,GAAA,YAAAA,EAAW,UAAX,YAAAzG,GAAoB,aAAc,CAAE,WAAYyG,EAAU,QAAQ,YACtE,KAAIxG,GAAAwG,GAAA,YAAAA,EAAW,UAAX,YAAAxG,GAAoB,WAAY,QAAa,CAAE,QAASwG,EAAU,QAAQ,OAAS,CACjG,CACA,CAAO,EACD,QAAS6J,EAAe,SAAWhW,EACnC,UAAAoM,EACA,aAAAC,EACA,OAAAC,EACA,YAAahT,EAAO,YACpB,cAAeA,EAAO,YACtB,WAAYP,EAAQ,aAAe,GACnC,YAAa,CAAC6B,EAAY,WAAW,UAAU,GAAK,EACrD,EAEKub,EAAgB1K,EAAY,kBAAkBe,GAAiB5G,GAAAtM,EAAO,UAAP,YAAAsM,GAAgB,QAAQ,EAC7F,OAAA2G,EAAkB,SAAW4J,EAE7B5J,EAAkB,UAAY9N,EAAa,QAAQ,OAAO,MAC1D8N,EAAkB,SAAWtG,EAC7BsG,EAAkB,QAAUlF,EAE5BnO,EAAQ,IAAI,8DAA+D,CAACqT,CAAiB,CAAC,EAEvFA,CACX,CACA,CCrOO,MAAM8J,EAAmB,CAU9B,aAAa,qBAAqB7L,EAAQ8L,EAAgBjP,EAASkP,EAAgBvL,EAAU,CAC3F,MAAM5K,EAAWxI,EAAa,EACxBkP,EAAsBxG,EAAa,IAAIF,EAAS,oBAAoB,GAAG,EAG7E,GAAI,CAACmW,GAAkBD,IAAmBre,EAAW,OAAQ,CAE3D,IAAI+T,EACA,CAAC/T,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASqe,CAAc,EAC7DtK,EAAc4J,GACLU,IAAmBre,EAAW,QACvC+T,EAAc2J,GAEd3J,EAAcwI,GAEhB,MAAMhP,EAAS,MAAMwG,EAAY,kBAAkBxB,EAAQ8L,EAAgBjP,EAAS,CAClF,eAAAkP,EACA,YAAazP,GAAuB,EAC5C,CAAO,EACD,OAAA5N,EAAQ,IAAI,uBAAwB,CAACsM,CAAM,CAAC,EAErCA,CACb,KAAW,CAEL,MAAMA,EAAS,CACb,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACnB,CAAS,EACD,UAAW,GACX,aAAc,GACd,SAAU,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC9C,YAAa,GACb,cAAe,GACf,eAAgB,GAChB,YAAasB,GAAuBkE,EAAS,OAAS,CACvD,EAGD,OAAIsL,IAAmBre,EAAW,aAChCuN,EAAO,OAAS,IAGXA,CACb,CACA,CAME,aAAa,kBAAmB,CAE9B,OADgB,MAAM,KAAK,qBAAsB,CAErD,CAME,aAAa,sBAAuB,CAClC,OAAAtM,EAAQ,IAAI,sBAAsB,EAC3B8U,GAAiB,OAAO,CAC7B,QAAS,GACT,SAAU,EAChB,CAAK,CACL,CACA,CChFO,MAAMwI,EAAiB,CAU5B,OAAO,eAAeC,EAAM,CAC1B,MAAMC,EAAaD,EAAK,QAAQ,cAAc,KAAK,oBAAoB,EAEvE,GAAI,CAACC,EAAY,CACfxd,EAAQ,MAAM,yDAAyD,EACvE,MACN,CAEIwd,EAAW,iBAAiB,YAAczG,GAAM,CAC9C,KAAK,gBAAgBA,EAAGwG,CAAI,CAClC,CAAK,CACL,CAOE,OAAO,gBAAgBzS,EAAOyS,EAAM,CAKlC,GAJAzS,EAAM,eAAgB,EACtBA,EAAM,gBAAiB,EAEvByS,EAAK,WAAa,GACf,CAACA,EAAK,QAAS,OAClBA,EAAK,QAAQ,UAAU,IAAI,UAAU,EAErCA,EAAK,QAAQ,UAAU,OAAO,cAAc,EAE5C,MAAME,EAAWF,EAAK,QAAQ,sBAAuB,EAC/CG,EAAS5S,EAAM,QACf6S,EAAS7S,EAAM,QACf8S,EAAcH,EAAS,KACvBI,EAAaJ,EAAS,IAEbF,EAAK,QAAQ,cAE5B,SAAS,KAAK,YAAYA,EAAK,OAAO,EACtCA,EAAK,QAAQ,MAAM,SAAW,QAC9BA,EAAK,QAAQ,MAAM,MAAQ,GAC3BA,EAAK,QAAQ,MAAM,IAAM,GAAGM,CAAU,KACtCN,EAAK,QAAQ,MAAM,KAAO,GAAGK,CAAW,KACxCL,EAAK,QAAQ,MAAM,MAAQ,OAC3BA,EAAK,QAAQ,MAAM,OAAS,OAC5BA,EAAK,QAAQ,MAAM,OAAS,qBAE5BA,EAAK,QAAQ,aAEb,MAAMO,EAAW,CACf,OAAAJ,EACA,OAAAC,EACA,YAAAC,EACA,WAAAC,EACA,YAAaD,EACb,WAAYC,CACb,EAEKE,EAAchH,GAAM,KAAK,eAAeA,EAAGwG,EAAMO,CAAQ,EACzDE,EAAYjH,GAAM,KAAK,cAAcA,EAAGwG,EAAMO,EAAUC,EAAYC,CAAQ,EAElF,SAAS,iBAAiB,YAAaD,CAAU,EACjD,SAAS,iBAAiB,UAAWC,CAAQ,CACjD,CAQE,OAAO,eAAelT,EAAOyS,EAAMO,EAAU,CAC3C,GAAI,CAACP,EAAK,YAAc,CAACA,EAAK,QAAS,OACvC,MAAMU,EAASnT,EAAM,QAAUgT,EAAS,OAClCI,EAASpT,EAAM,QAAUgT,EAAS,OAExCA,EAAS,YAAcA,EAAS,YAAcG,EAC9CH,EAAS,WAAaA,EAAS,WAAaI,EAE5CX,EAAK,QAAQ,MAAM,MAAQ,GAC3BA,EAAK,QAAQ,MAAM,MAAQ,OAC3BA,EAAK,QAAQ,MAAM,OAAS,OAE5BA,EAAK,QAAQ,MAAM,SAAW,QAC9BA,EAAK,QAAQ,MAAM,IAAM,GAAGO,EAAS,UAAU,KAC/CP,EAAK,QAAQ,MAAM,KAAO,GAAGO,EAAS,WAAW,KAEjD,MAAMK,EAAc,WAAW,iBAAiB,SAAS,eAAe,EAAE,QAAQ,EAAI,GAClFL,EAAS,YAAcK,EACzBZ,EAAK,QAAQ,UAAU,IAAI,WAAW,EAEtCA,EAAK,QAAQ,UAAU,OAAO,WAAW,EAG1B,OAAO,iBAAiBA,EAAK,OAAO,EAEpC,KAAK,sBAAsBA,CAAI,EACnC,OAAS,OACpBA,EAAK,QAAQ,UAAU,IAAI,WAAW,EAEtCA,EAAK,QAAQ,UAAU,OAAO,WAAW,CAE/C,CAUE,aAAa,cAAczS,EAAOyS,EAAMO,EAAUM,EAAaC,EAAW,CACxEre,EAAQ,IAAI,gCAAgC,EAE5C,SAAS,oBAAoB,YAAaoe,CAAW,EACrD,SAAS,oBAAoB,UAAWC,CAAS,EAEjDd,EAAK,WAAa,GAClBA,EAAK,QAAQ,UAAU,OAAO,UAAU,EACxCA,EAAK,QAAQ,UAAU,OAAO,WAAW,EAEzCA,EAAK,QAAQ,MAAM,OAAS,GAE5B,MAAMe,EAAW,KAAK,sBAAsBf,CAAI,EAEhD,GAAIe,EAAS,OAAS,aAAc,CAClC,MAAMC,EAAoB,SAAS,cAAc,qBAAqB,EAClEA,GACFA,EAAkB,aAAahB,EAAK,QAASgB,EAAkB,UAAU,EAE3E,MAAM,KAAK,cAAchB,CAAI,CACnC,SAAee,EAAS,OAAS,aAAc,CACzC,MAAMC,EAAoB,SAAS,cAAc,qBAAqB,EAClEA,GACFA,EAAkB,aAAahB,EAAK,QAASgB,EAAkB,UAAU,EAE3E,MAAM,KAAK,gBAAgBhB,EAAMO,EAAS,UAAU,CAC1D,KAAW,CACLP,EAAK,iBAAmB,GACxBA,EAAK,eAAiB,CACpB,EAAGO,EAAS,YACZ,EAAGA,EAAS,WACZ,SAAU,GACV,YAAa,EACd,EACD,MAAM3L,EAAe,WAAS,cAAc,kBAAkB,EAC9DzQ,EAAY,WAAW,4BAA6ByQ,EAAe,MAAQ,MAAM,EAEjF,MAAM,KAAK,mBAAmBoL,EAAK,cAAc,EACjDA,EAAK,QAAQ,UAAU,IAAI,iBAAiB,EAE5C,MAAMY,EAAc,WAAW,iBAAiB,SAAS,eAAe,EAAE,QAAQ,EAAI,GAClFL,EAAS,YAAcK,GACzBZ,EAAK,QAAQ,UAAU,IAAI,WAAW,CAE9C,CACA,CAOE,OAAO,sBAAsBA,EAAM,CACjC,MAAMiB,EAAgB,SAAS,cAAc,KAAK,uBAAuB,EACzE,GAAI,CAACA,EAAe,MAAO,CAAE,KAAM,OAAQ,SAAU,GAAU,EAE/D,MAAMf,EAAWF,EAAK,QAAQ,sBAAuB,EAC/CkB,EAAWD,EAAc,sBAAuB,EAEhDE,EAAqB,KAAK,IAAID,EAAS,KAAOhB,EAAS,KAAK,EAC5DkB,EAAmB,OAAO,YAAclB,EAAS,OAEvD,OAAIiB,GAAsB,KAAK,cACzBC,GAAoB,KAAK,cACpB,CAAE,KAAM,aAAc,SAAU,CAAG,EAErC,CAAE,KAAM,aAAc,SAAU,CAAG,EAGrC,CAAE,KAAM,OAAQ,SAAU,GAAU,CAC/C,CAOE,aAAa,gBAAgBpB,EAAMqB,EAAY,CAC7C5e,EAAQ,IAAI,mCAAoC,CAAC4e,CAAU,CAAC,EAE5DrB,EAAK,iBAAmB,GACxBA,EAAK,eAAiB,CACpB,EAAGqB,EACH,SAAU,GACV,YAAa,EACd,EAEDrB,EAAK,QAAQ,UAAU,OAAO,kBAAmB,WAAW,EAC5DA,EAAK,QAAQ,UAAU,IAAI,eAAgB,UAAU,EAErDA,EAAK,QAAQ,MAAM,SAAW,QAC9BA,EAAK,QAAQ,MAAM,MAAQ,GAC3BA,EAAK,QAAQ,MAAM,KAAO,GAC1BA,EAAK,QAAQ,MAAM,MAAQ,GAC3BA,EAAK,QAAQ,MAAM,OAAS,GAC5BA,EAAK,QAAQ,MAAM,IAAM,GAAGqB,CAAU,KACtCrB,EAAK,QAAQ,MAAM,OAAS,GAE5BpN,GAAkB,EAElB,MAAM,KAAK,mBAAmBoN,EAAK,cAAc,EAEjD,WAAW,IAAM,CACfA,EAAK,QAAQ,UAAU,OAAO,UAAU,CACzC,EAAE,GAAG,CACV,CAME,aAAa,cAAcA,EAAM,CAC/Bvd,EAAQ,IAAI,gCAAgC,EAE5Cud,EAAK,iBAAmB,GACxBA,EAAK,eAAiB,KAEtBA,EAAK,QAAQ,UAAU,OAAO,iBAAiB,EAC/CA,EAAK,QAAQ,UAAU,OAAO,WAAW,EACzCA,EAAK,QAAQ,UAAU,IAAI,UAAU,EAErCA,EAAK,QAAQ,MAAM,SAAW,GAC9BA,EAAK,QAAQ,MAAM,MAAQ,GAC3BA,EAAK,QAAQ,MAAM,KAAO,GAC1BA,EAAK,QAAQ,MAAM,IAAM,GACzBA,EAAK,QAAQ,MAAM,MAAQ,GAC3BA,EAAK,QAAQ,MAAM,OAAS,GAC5BA,EAAK,QAAQ,MAAM,OAAS,GAE5BpN,GAAkB,EAElB,MAAM,KAAK,mBAAmB,IAAI,EAElC,WAAW,IAAM,CACfoN,EAAK,QAAQ,UAAU,OAAO,UAAU,CACzC,EAAE,GAAG,CACV,CAOE,OAAO,oBAAoBA,EAAMP,EAAU,CACzC,GAAI,CAACA,GAAY,CAACA,EAAS,SAAU,OAErC,MAAM6B,EAAWtB,EAAK,QAAQ,sBAAuB,EAkBrD,GAhBAvd,EAAQ,IAAI,uCAAwC,CAACgd,CAAQ,CAAC,EAC3DA,EAAS,EAAI,EACdA,EAAS,EAAI,EACLA,EAAS,EAAI,OAAO,WAAa6B,EAAS,QAClD7B,EAAS,EAAI,OAAO,WAAa6B,EAAS,OAGzC7B,EAAS,EAAI,EACdA,EAAS,EAAI,EACLA,EAAS,EAAI,OAAO,YAAc6B,EAAS,SACnD7B,EAAS,EAAI,OAAO,YAAc6B,EAAS,QAG7CtB,EAAK,iBAAmB,GACxBA,EAAK,eAAiBP,EAElBA,EAAS,YAAa,CACxB,MAAMuB,EAAoB,SAAS,cAAc,qBAAqB,EAClEA,GACFA,EAAkB,aAAahB,EAAK,QAASgB,EAAkB,UAAU,EAG3EhB,EAAK,QAAQ,MAAM,SAAW,QAC9BA,EAAK,QAAQ,MAAM,MAAQ,GAC3BA,EAAK,QAAQ,MAAM,IAAM,GAAGP,EAAS,CAAC,KACtCO,EAAK,QAAQ,MAAM,KAAO,GAC1BA,EAAK,QAAQ,MAAM,MAAQ,GAC3BA,EAAK,QAAQ,MAAM,OAAS,GAE5BA,EAAK,QAAQ,UAAU,IAAI,cAAc,EACzCA,EAAK,QAAQ,UAAU,OAAO,kBAAmB,WAAW,EAE5DpN,GAAkB,CACxB,KAAW,CACL,SAAS,KAAK,YAAYoN,EAAK,OAAO,EAEtCA,EAAK,QAAQ,MAAM,SAAW,QAC9BA,EAAK,QAAQ,MAAM,MAAQ,GAC3BA,EAAK,QAAQ,MAAM,IAAM,GAAGP,EAAS,CAAC,KACtCO,EAAK,QAAQ,MAAM,KAAO,GAAGP,EAAS,CAAC,KACvCO,EAAK,QAAQ,MAAM,MAAQ,OAC3BA,EAAK,QAAQ,MAAM,OAAS,OAE5B,MAAMpL,EAAe,WAAS,cAAc,kBAAkB,EAC9DzQ,EAAY,WAAW,4BAA6ByQ,EAAe,MAAQ,MAAM,EAEjFoL,EAAK,QAAQ,UAAU,IAAI,iBAAiB,EAC5CA,EAAK,QAAQ,UAAU,OAAO,cAAc,EAE5C,MAAMY,EAAc,WAAW,iBAAiB,SAAS,eAAe,EAAE,QAAQ,EAAI,GAClFnB,EAAS,EAAImB,GACfZ,EAAK,QAAQ,UAAU,IAAI,WAAW,CAE9C,CACA,CAME,aAAa,mBAAmBP,EAAU,CACxC,GAAI,CAACA,EAAU,CACb,MAAM,KAAK,KAAK,QAAQ/d,EAAO,GAAI,qBAAsB,IAAI,EAC7D,MACN,CAEI,MAAMse,EAAO,SAAS,cAAc,mBAAmB,EACvD,GAAIA,EAAM,CACR,MAAMsB,EAAWtB,EAAK,sBAAuB,EAE1CP,EAAS,EAAI,EACdA,EAAS,EAAI,EACLA,EAAS,EAAI,OAAO,WAAa6B,EAAS,QAClD7B,EAAS,EAAI,OAAO,WAAa6B,EAAS,OAGzC7B,EAAS,EAAI,EACdA,EAAS,EAAI,EACLA,EAAS,EAAI,OAAO,YAAc6B,EAAS,SACnD7B,EAAS,EAAI,OAAO,YAAc6B,EAAS,OAEnD,CAEI,MAAM,KAAK,KAAK,QAAQ5f,EAAO,GAAI,qBAAsB+d,CAAQ,CACrE,CAME,OAAO,oBAAqB,CAC1B,OAAO,KAAK,KAAK,QAAQ/d,EAAO,GAAI,oBAAoB,GAAK,IACjE,CAME,aAAa,cAAcse,EAAM,CAC/B,MAAM,KAAK,cAAcA,CAAI,CACjC,CACA,CAhXExd,EADWud,GACJ,gBAAgB,IACvBvd,EAFWud,GAEJ,uBAAuB,gBAC9Bvd,EAHWud,GAGJ,0BAA0B,qBCJ5B,MAAMwB,CAAgB,CAc3B,OAAO,WAAWhY,EAAO,CACvB,GAAI,CACF,MAAMiY,EAAW,OAAOjY,GAAU,SAAW,KAAK,OAAO,IAAIA,CAAK,EAAIA,EACtE,MAAI,CAACiY,GAAY,CAACA,EAAS,QAAgB,GACpCA,EAAS,QAAQpgB,EAAW,KAAK,MAAM,QAAQ,IAAM,EAC7D,OAAQsC,EAAO,CACd,OAAAjB,EAAQ,MAAM,iCAAkC,CAACiB,EAAO6F,CAAK,CAAC,EACvD,EACb,CACA,CAOE,OAAO,UAAUA,EAAO,CACtB,MAAMiY,EAAW,OAAOjY,GAAU,SAAW,KAAK,OAAO,IAAIA,CAAK,EAAIA,EACtE,OAAKiY,EACEA,EAAS,QAAQpgB,EAAW,KAAK,MAAM,OAAO,IAAM,GADrC,EAE1B,CAQE,aAAa,YAAYmI,EAAOkY,EAAY,CAC1C,MAAMD,EAAW,OAAOjY,GAAU,SAAW,KAAK,OAAO,IAAIA,CAAK,EAAIA,EACtE,GAAI,CAACiY,EAAU,CACb/e,EAAQ,MAAM,kBAAmB,CAAC8G,CAAK,CAAC,EACxC,MACN,CAEI9G,EAAQ,IAAI,8BAA+B,CAAC+e,EAAS,KAAMC,CAAU,CAAC,EAElEA,GAEF,MAAMD,EAAS,QAAQpgB,EAAW,KAAK,MAAM,SAAU,EAAI,EAC3D,MAAMogB,EAAS,UAAUpgB,EAAW,KAAK,MAAM,OAAO,GAMtD,MAAMogB,EAAS,UAAUpgB,EAAW,KAAK,MAAM,QAAQ,EAOzD,KAAK,aAAc,CACvB,CAQE,aAAa,WAAWmI,EAAOmY,EAAW,CACxC,MAAMF,EAAW,OAAOjY,GAAU,SAAW,KAAK,OAAO,IAAIA,CAAK,EAAIA,EACtE,GAAI,CAACiY,EAAU,CACb/e,EAAQ,MAAM,kBAAmB,CAAC8G,CAAK,CAAC,EACxC,MACN,CAEI9G,EAAQ,IAAI,6BAA8B,CAAC+e,EAAS,KAAME,CAAS,CAAC,EAEhEA,GAEF,MAAMF,EAAS,QAAQpgB,EAAW,KAAK,MAAM,QAAS,EAAI,EAC1D,MAAMogB,EAAS,UAAUpgB,EAAW,KAAK,MAAM,QAAQ,GAMvD,MAAMogB,EAAS,UAAUpgB,EAAW,KAAK,MAAM,OAAO,EAOxD,KAAK,aAAc,CACvB,CAOE,aAAa,eAAemI,EAAOoY,EAAc,CAC/C,MAAMF,EAAaE,EAAe,GAAO,CAAC,KAAK,WAAWpY,CAAK,EAC/D,MAAM,KAAK,YAAYA,EAAOkY,CAAU,CAC5C,CAOE,aAAa,cAAclY,EAAOqY,EAAa,CAC7C,MAAMF,EAAYE,EAAc,GAAO,CAAC,KAAK,UAAUrY,CAAK,EAC5D,MAAM,KAAK,WAAWA,EAAOmY,CAAS,CAC1C,CAOE,aAAa,WAAWnY,EAAO,CAC7B,MAAM,KAAK,WAAWA,EAAO,EAAI,CACrC,CAME,OAAO,mBAAoB,CACzB,OAAO,KAAK,OAAO,OAAOA,GAAS,KAAK,WAAWA,CAAK,CAAC,CAC7D,CAME,OAAO,kBAAmB,CACxB,OAAO,KAAK,OAAO,OAAOA,GAAS,KAAK,UAAUA,CAAK,CAAC,CAC5D,CAOE,OAAO,cAAcwK,EAAQ,CAC3B,OAAOA,EAAO,OAAOxK,GAAS,CAAC,KAAK,UAAUA,CAAK,CAAC,CACxD,CAOE,OAAO,eAAeA,EAAO,CAC3B,MAAO,CACL,WAAY,KAAK,WAAWA,CAAK,EACjC,UAAW,KAAK,UAAUA,CAAK,CAChC,CACL,CAOE,aAAa,iBAAiBA,EAAO,CACnC,MAAMiY,EAAW,OAAOjY,GAAU,SAAW,KAAK,OAAO,IAAIA,CAAK,EAAIA,EACjEiY,IAEL,MAAMA,EAAS,UAAUpgB,EAAW,KAAK,MAAM,QAAQ,EACvD,MAAMogB,EAAS,UAAUpgB,EAAW,KAAK,MAAM,OAAO,EAEtD,KAAK,aAAc,EACvB,CAME,OAAO,cAAe,CACpBoP,EAAiB,cAAe,CACpC,CAQE,OAAO,sBAAsBL,EAAM7N,EAAS,CAC1C,OAAK,KAAK,KAAK,OAEfA,EAAQ,KAAK,CACX,KAAM,yCACN,KAAM,8BACN,SAAUuf,GAAM,CACd,MAAM3P,EAAU2P,EAAG,KAAK,YAAY,GAAKA,EAAG,QAAQ,QAChD3P,GACF,KAAK,eAAeA,CAAO,CAE9B,EACD,UAAW2P,GAAM,KAAK,KAAK,IACjC,CAAK,EAEDvf,EAAQ,KAAK,CACX,KAAM,wCACN,KAAM,6BACN,SAAUuf,GAAM,CACd,MAAM3P,EAAU2P,EAAG,KAAK,YAAY,GAAKA,EAAG,QAAQ,QAChD3P,GACF,KAAK,cAAcA,CAAO,CAE7B,EACD,UAAW2P,GAAM,KAAK,KAAK,IACjC,CAAK,GAEMvf,CACX,CACA,CAhOEE,EAJW+e,EAIJ,QAAQ,CACb,SAAU,aACV,QAAS,WACV,GCRI,MAAMO,EAAc,CAKzB,OAAO,oBAAoB9B,EAAM,CACTA,EAAK,QAAQ,iBAAiB,mDAAmD,EAEzF,QAAQ+B,GAAgB,CACpCA,EAAa,iBAAiB,YAAcvI,GAAM,KAAK,gBAAgBA,EAAGwG,CAAI,CAAC,EAC/E+B,EAAa,iBAAiB,UAAYvI,GAAM,KAAK,cAAcA,EAAGwG,CAAI,CAAC,CACjF,CAAK,EAED,MAAMgC,EAAgBhC,EAAK,QAC3BgC,EAAc,iBAAiB,WAAaxI,GAAM,KAAK,eAAeA,CAAC,CAAC,EACxEwI,EAAc,iBAAiB,OAASxI,GAAM,KAAK,WAAWA,EAAGwG,CAAI,CAAC,EAEtE,SAAS,iBAAiB,WAAaxG,GAAM,KAAK,qBAAqBA,EAAGwG,CAAI,CAAC,EAC/E,SAAS,iBAAiB,OAASxG,GAAM,KAAK,iBAAiBA,EAAGwG,CAAI,CAAC,CAC3E,CAOE,OAAO,gBAAgBzS,EAAOyS,EAAM,CAClC,MAAM+B,EAAexU,EAAM,cACrB2E,EAAU6P,EAAa,QAAQ,QAC/BxY,EAAQ,KAAK,OAAO,IAAI2I,CAAO,EAErC,GAAI,CAAC3I,EAAO,CACVgE,EAAM,eAAgB,EACtB,MACN,CAEI9K,EAAQ,IAAI,gCAAiC,CAAC8G,EAAM,KAAM2I,CAAO,CAAC,EAElE3E,EAAM,aAAa,QAAQ,aAAc2E,CAAO,EAChD3E,EAAM,aAAa,QAAQ,mBAAoB,KAAK,UAAU,CAC5D,QAAS2E,EACT,UAAW3I,EAAM,KACjB,SAAUwY,EAAa,QAAQ,GAC/B,QAASA,EAAa,QAAQ,SAAW,IAC/C,CAAK,CAAC,EAEFxU,EAAM,aAAa,cAAgB,OACnCwU,EAAa,UAAU,IAAI,UAAU,EAErC,MAAME,EAAOF,EAAa,sBAAuB,EAC3CG,EAAYH,EAAa,UAAU,EAAI,EAC7CG,EAAU,MAAM,QAAU,MAC1BA,EAAU,MAAM,SAAW,WAC3BA,EAAU,MAAM,IAAM,UACtBA,EAAU,MAAM,KAAO,UACvBA,EAAU,MAAM,MAAQD,EAAK,MAAQ,KACrCC,EAAU,MAAM,cAAgB,OAChC,SAAS,KAAK,YAAYA,CAAS,EAEnC3U,EAAM,aAAa,aAAa2U,EAAWD,EAAK,MAAQ,EAAGA,EAAK,OAAS,CAAC,EAE1E,WAAW,IAAM,CACXC,EAAU,YACZA,EAAU,WAAW,YAAYA,CAAS,CAE7C,EAAE,CAAC,EAEJlC,EAAK,iBAAmB,CACtB,QAAS9N,EACT,aAAc6P,EACd,UAAW,KAAK,IAAG,CACpB,CACL,CAME,OAAO,eAAexU,EAAO,CAC3BA,EAAM,eAAgB,EACtBA,EAAM,aAAa,WAAa,MACpC,CAOE,OAAO,WAAWA,EAAOyS,EAAM,CAC7BzS,EAAM,eAAgB,EACtB9K,EAAQ,IAAI,kEAAkE,EAE9E,KAAK,YAAYud,CAAI,CACzB,CAOE,OAAO,qBAAqBzS,EAAOyS,EAAM,CACvC,GAAI,CAACA,EAAK,iBAAkB,OAE5B,MAAME,EAAWF,EAAK,QAAQ,sBAAuB,EAEnDzS,EAAM,SAAW2S,EAAS,MAC1B3S,EAAM,SAAW2S,EAAS,OAC1B3S,EAAM,SAAW2S,EAAS,KAC1B3S,EAAM,SAAW2S,EAAS,OAWtBF,EAAK,iBAAiB,cACxBA,EAAK,iBAAiB,aAAa,UAAU,OAAO,kBAAkB,GARxEzS,EAAM,eAAgB,EACtBA,EAAM,aAAa,WAAa,OAE5ByS,EAAK,iBAAiB,cACxBA,EAAK,iBAAiB,aAAa,UAAU,IAAI,kBAAkB,EAO3E,CAOE,OAAO,iBAAiBzS,EAAOyS,EAAM,CACnC,GAAI,CAACA,EAAK,iBAAkB,OAE5B,MAAME,EAAWF,EAAK,QAAQ,sBAAuB,EAQrD,GAAI,EANFzS,EAAM,SAAW2S,EAAS,MAC1B3S,EAAM,SAAW2S,EAAS,OAC1B3S,EAAM,SAAW2S,EAAS,KAC1B3S,EAAM,SAAW2S,EAAS,QAGX,CACf3S,EAAM,eAAgB,EAEtB,MAAMgT,EAAW,KAAK,MAAMhT,EAAM,aAAa,QAAQ,kBAAkB,CAAC,EAC1E9K,EAAQ,IAAI,kDAAmD,CAAC8d,EAAS,SAAS,CAAC,EAEnF,KAAK,WAAWA,EAAS,QAASP,CAAI,CAC5C,CAEI,KAAK,YAAYA,CAAI,CACzB,CAOE,OAAO,cAAczS,EAAOyS,EAAM,CAChCvd,EAAQ,IAAI,6BAA6B,EAEzC,WAAW,IAAM,CACf,KAAK,YAAYud,CAAI,CACtB,EAAE,GAAG,CACV,CAOE,aAAa,WAAW9N,EAAS8N,EAAM,CACrC,GAAI,CACF,MAAMuB,EAAgB,WAAWrP,CAAO,EAExC,MAAM6P,EAAe/B,EAAK,QAAQ,cAAc,mBAAmB9N,CAAO,IAAI,EAC9E,GAAI6P,EAAc,CAChB,MAAMjN,EAAWiN,EAAa,QAAQ,GACtC/B,EAAK,eAAe,OAAOlL,CAAQ,CAC3C,CAIK,OAAQpR,EAAO,CACdjB,EAAQ,MAAM,uBAAwB,CAACiB,CAAK,CAAC,EAC7C,GAAG,cAAc,MAAM,0BAA0BA,EAAM,OAAO,EAAE,CACtE,CACA,CAME,OAAO,YAAYsc,EAAM,C5BvMpB,IAAAzd,G4BwMCA,EAAAyd,EAAK,mBAAL,MAAAzd,EAAuB,cACzByd,EAAK,iBAAiB,aAAa,UAAU,OAAO,WAAY,kBAAkB,EAGpFA,EAAK,iBAAmB,IAC5B,CAME,OAAO,oBAAoBA,EAAM,CAC/B,SAAS,oBAAoB,WAAY,KAAK,oBAAoB,EAClE,SAAS,oBAAoB,OAAQ,KAAK,gBAAgB,CAC9D,CACA,CChNO,MAAMmC,EAAc,CAMzB,OAAO,QAAQ5d,EAAU,CACvB,OAAA9B,EAAQ,IAAI,wBAAyB,CAAC8B,CAAQ,CAAC,EACxC,KAAK,KAAK,IACrB,CAOE,OAAO,eAAegJ,EAAOyS,EAAM,CACjCvd,EAAQ,IAAI,+BAAgC,CAAC8K,EAAOA,EAAM,cAAeA,EAAM,MAAM,CAAC,EAEtFA,EAAM,eAAgB,EACtBA,EAAM,gBAAiB,EAEnBA,EAAM,eACRA,EAAM,aAAa,WAAa,OAChC9K,EAAQ,IAAI,qDAAsD,CAAC8K,EAAM,aAAa,KAAK,CAAC,GAG9F,MAAM6U,EAAW7U,EAAM,cAAc,QAAQ,sBAAsB,EACnE,OAAI6U,IACFA,EAAS,UAAU,IAAI,WAAW,EAClC3f,EAAQ,IAAI,sDAAsD,GAG7D,EACX,CAME,OAAO,gBAAgB8K,EAAO,CAC5B9K,EAAQ,IAAI,gCAAiC,CAAC8K,EAAOA,EAAM,cAAeA,EAAM,MAAM,CAAC,EAEvF,MAAM0U,EAAO1U,EAAM,cAAc,sBAAuB,EAQxD,GANEA,EAAM,QAAU0U,EAAK,MACrB1U,EAAM,QAAU0U,EAAK,OACrB1U,EAAM,QAAU0U,EAAK,KACrB1U,EAAM,QAAU0U,EAAK,OAGA,CACrB,MAAMG,EAAW7U,EAAM,cAAc,QAAQ,sBAAsB,EAC/D6U,IACFA,EAAS,UAAU,OAAO,WAAW,EACrC3f,EAAQ,IAAI,yDAAyD,EAE7E,CACA,CAOE,aAAa,WAAW8K,EAAOyS,EAAM,CACnCzS,EAAM,eAAgB,EACtBA,EAAM,gBAAe,EAErB,QAASjD,EAAI,EAAGA,EAAIiD,EAAM,aAAa,MAAM,OAAQjD,IAAK,CACxD,MAAM+I,EAAO9F,EAAM,aAAa,MAAMjD,CAAC,EACjCrI,EAAOsL,EAAM,aAAa,QAAQ8F,CAAI,EAC5C5Q,EAAQ,IAAI,8BAA8B4Q,CAAI,IAAK,CAACpR,CAAI,CAAC,CAC/D,CAEgC+d,EAAK,QAAQ,iBAAiB,YAAY,EAClD,QAAQxb,GAAW,CACrCA,EAAQ,UAAU,OAAO,WAAW,CAC1C,CAAK,EACD/B,EAAQ,IAAI,sEAAsE,EAElF,GAAI,CACF,MAAM8d,EAAW,KAAK,cAAchT,CAAK,EACzC,GAAI,CAACgT,GAAYA,EAAS,OAAS,QAAS,CAC1C9d,EAAQ,IAAI,+CAAgD,CAAC8d,CAAQ,CAAC,EACtE,MACR,CAEM,MAAMhX,EAAQ,MAAM,KAAK,qBAAqBgX,CAAQ,EACtD,GAAI,CAAChX,EAAO,CACV,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,yCAAyC,GAAK,iBAAiB,EACxG,MACR,CACM9G,EAAQ,IAAI,8CAA+C,CAAC8G,CAAK,CAAC,EAGlE,MAAM8Y,EADOvQ,GAAcvI,CAAK,EACP,KAAO,MAE5ByW,EAAK,aAAeqC,IACtB5f,EAAQ,IAAI,8CAA+C,CAAC4f,CAAS,CAAC,EACtErC,EAAK,WAAaqC,GAEpB,MAAM,KAAK,eAAe9Y,EAAOyW,CAAI,CAMtC,OAAQtc,EAAO,CACdjB,EAAQ,MAAM,mDAAoD,CAACiB,CAAK,CAAC,EACzE,GAAG,cAAc,MAAM,KAAK,KAAK,SAAS,qCAAqC,GAAK,4BAA4B,CACtH,CACA,CAOE,OAAO,cAAc6J,EAAO,CAC1B,GAAI,CACF9K,EAAQ,IAAI,iEAAkE,CAAC8K,EAAM,aAAa,KAAK,CAAC,EAExG,MAAM+U,EAAW/U,EAAM,aAAa,QAAQ,kBAAkB,EAE9D,GADA9K,EAAQ,IAAI,2CAA4C,CAAC6f,CAAQ,CAAC,EAC9DA,EAAU,CACZ,MAAMC,EAAS,KAAK,MAAMD,CAAQ,EAClC,OAAA7f,EAAQ,IAAI,6CAA8C,CAAC8f,CAAM,CAAC,EAC3DA,CACf,CAEM,MAAMC,EAAWjV,EAAM,aAAa,QAAQ,YAAY,EAGxD,GAFA9K,EAAQ,IAAI,2CAA4C,CAAC+f,CAAQ,CAAC,EAE9DA,EAAU,CACZ,GAAIA,EAAS,WAAW,QAAQ,EAAG,CACjC,MAAMjC,EAAW,CACf,KAAM,QACN,KAAMiC,CACP,EACD,OAAA/f,EAAQ,IAAI,mEAAoE,CAAC8d,CAAQ,CAAC,EACnFA,CACjB,CAEQ,GAAI,CACF,MAAMgC,EAAS,KAAK,MAAMC,CAAQ,EAClC,OAAA/f,EAAQ,IAAI,qDAAsD,CAAC8f,CAAM,CAAC,EACnEA,CACR,MAAW,CACV9f,EAAQ,IAAI,gDAAgD,CACtE,CACA,CAEM,OAAAA,EAAQ,IAAI,mDAAmD,EACxD,IACR,OAAQiB,EAAO,CACd,OAAAjB,EAAQ,MAAM,wDAAyD,CAACiB,CAAK,CAAC,EACvE,IACb,CACA,CAOE,aAAa,qBAAqB6c,EAAU,CAC1C,GAAI,CACF,OAAIA,EAAS,KACJ,MAAM,SAASA,EAAS,IAAI,EAC1BA,EAAS,GACX,KAAK,OAAO,IAAIA,EAAS,EAAE,EAE7B,IACR,OAAQ7c,EAAO,CACd,OAAAjB,EAAQ,MAAM,2DAA4D,CAACiB,CAAK,CAAC,EAC1E,IACb,CACA,CAOE,aAAa,eAAe6F,EAAOyW,EAAM,CACvCvd,EAAQ,IAAI,+BAAgC,CAAC8G,EAAM,KAAMA,EAAM,EAAE,CAAC,EAClE9G,EAAQ,IAAI,8CAA+C,CAACud,EAAK,UAAU,CAAC,EAG5E,MAAM0B,EAAYH,EAAgB,UAAUhY,CAAK,EAC3CkY,EAAaF,EAAgB,WAAWhY,CAAK,EAInD,GAFA9G,EAAQ,IAAI,+CAAgD,CAAC,CAAE,UAAAif,EAAW,WAAAD,CAAU,CAAE,CAAC,EAEnFA,GAAc,CAACC,EAAW,CAC5Bjf,EAAQ,IAAI,0DAA2D,CAAC8G,EAAM,IAAI,CAAC,EACnF,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,8CAA+C,CACpF,MAAOA,EAAM,IACd,CAAA,GAAK,GAAGA,EAAM,IAAI,yBAAyB,EAC5C,MACN,CAGI9G,EAAQ,IAAI,sDAAuD,CAAC8G,EAAM,EAAE,CAAC,EAC7E,MAAMgY,EAAgB,YAAYhY,EAAO,EAAI,EAK7C9G,EAAQ,IAAI,uEAAwE,CAAC8G,EAAM,KAAMA,EAAM,EAAE,CAAC,CAC9G,CACA,CCjMA,KAAM,CAAE,cAAAwB,GAAe,2BAAAC,EAA0B,EAAK,QAAQ,aAAa,I9B1BpE,IAAAyX,EAAAC,GAAAC,G8B2BQ,MAAMC,EAAN,MAAMA,UAAyB5X,GAA2BD,EAAa,CAAE,CAmBtF,YAAYzI,EAAU,GAAI,CACxBG,EAAQ,IAAI,+BAAgC,CAACH,CAAO,CAAC,EACrD,MAAMA,CAAO,EA+XfE,EAAA,uBAAmB+K,GAAU,CAE3B,GADA9K,EAAQ,IAAI,iBAAiB,EACzB,KAAK,SAAU,OACnB,MAAMud,EAAO,KAAK,QACbA,IACDzS,EAAM,OAAO,QAAQ,mBAAmB,GACxCyS,EAAK,SAASzS,EAAM,MAAM,GAC1BA,EAAM,OAAO,QAAQ,mBAAmB,GACxCA,EAAM,OAAO,QAAQ,4CAA4C,GACrE,KAAK,MAAO,EAChB,GAvYI,KAAK,eAAiB,IAAI,IAC1B,KAAK,WAAa,KAClB,KAAK,oBAAsB,KAC3B,KAAK,SAAW,GAChB,KAAK,gBAAkB,KAAK,KAAK,QAAQ7L,EAAO,GAAI,qBAAqB,GAAK,GAC9E,KAAK,gBAAkB,KAAK,KAAK,QAAQA,EAAO,GAAI,qBAAqB,GAAK,CAAE,EAEhF,KAAK,WAAa,GAClB,KAAK,iBAAmB,GACxB,KAAK,eAAiBqe,GAAiB,mBAAoB,EAE3D,KAAK,8BAA+B,CACxC,CAyBE,MAAM,gBAAgBzd,EAAS,C9BvF1B,IAAAC,E8BwFHE,EAAQ,IAAI,iBAAiB,EAC7B,MAAMkH,EAAWxI,EAAa,EACxBsK,EAAU,MAAM,MAAM,gBAAgBnJ,CAAO,EAC7CyR,EAAS,KAAK,OAAO,SACrBQ,EAAW,CAAE,EACbC,EAAY,CAAE,EACdxC,EAAe,KAAK,OAAO,OAEjC,UAAWzI,KAASwK,EAAQ,CAC1B,GAAIxK,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAO,SAExD,MAAMsZ,EAAkB,CAAChR,EAAQ,OAAS,CACxC,MAAMiR,GAAgBjR,GAAA,YAAAA,EAAO,QAAStI,EAChCwZ,EAASpG,GAAkB,eAAemG,CAAa,EAC7D,MAAO,CACL,GAAIvZ,EAAM,GACV,KAAMA,EAAM,KACZ,KAAMsI,EAAQA,EAAM,KAAOtI,EAAM,KACjC,IAAKA,EAAM,IACX,SAAU,KAAK,eAAe,KAAIsI,GAAA,YAAAA,EAAO,KAAMtI,EAAM,EAAE,EACvD,YAAaoT,GAAkB,cAAcmG,CAAa,EAC1D,UAAWC,EAAO,UAClB,QAASA,EAAO,QAChB,SAASlR,GAAA,YAAAA,EAAO,KAAM,KACtB,QAAS,CAAC,CAACA,EACX,UAAUA,GAAA,YAAAA,EAAO,KAAMtI,EAAM,EAC9B,CACF,EAQD,GANsB,OAAO,QAAQA,EAAM,SAAS,EACjD,KAAK,CAAC,CAAChG,EAAQkG,CAAK,IAAM,CACzB,MAAMzF,EAAO,KAAK,MAAM,IAAIT,CAAM,EAClC,OAAOS,GAAQ,CAACA,EAAK,MAAQyF,GAAS,MAAM,0BAA0B,KAChF,CAAS,EAEgB,CACjB,GAAI8X,EAAgB,UAAUhY,CAAK,EACjC,SAGF,MAAMyZ,EAAuBnZ,EAAa,KAAItH,EAAAoH,EAAS,uBAAT,YAAApH,EAA+B,GAAG,EAC1Ekf,EAAaF,EAAgB,WAAWhY,CAAK,EAE7C0Z,GAAgBjR,GAAA,YAAAA,EAAc,OAAO,OAAOH,GAASA,EAAM,UAAYtI,EAAM,MAAO,CAAE,EAE5F,GAAIkY,EACF,GAAIwB,EAAc,OAAS,EACzBA,EAAc,QAAQlO,GAAY,CAChC,MAAMmO,EAAYL,EAAgB9N,CAAQ,EAC1CmO,EAAU,WAAa,GACvB3O,EAAS,KAAK2O,CAAS,CACrC,CAAa,MACI,CACL,MAAMA,EAAYL,EAAiB,EACnCK,EAAU,WAAa,GACvB3O,EAAS,KAAK2O,CAAS,CACnC,SACmBF,EACLC,EAAc,OAAS,GACzBA,EAAc,QAAQlO,GAAY,CAChC,MAAMmO,EAAYL,EAAgB9N,CAAQ,EAC1CR,EAAS,KAAK2O,CAAS,CACrC,CAAa,UAGCD,EAAc,OAAS,EACzBA,EAAc,QAAQlO,GAAY,CAChC,MAAMmO,EAAYL,EAAgB9N,CAAQ,EAC1CR,EAAS,KAAK2O,CAAS,CACrC,CAAa,MACI,CACL,MAAMA,EAAYL,EAAiB,EACnCtO,EAAS,KAAK2O,CAAS,CACnC,CAEA,KAAa,CACL,GAAI3B,EAAgB,UAAUhY,CAAK,EACjC,SAGF,MAAMkY,EAAaF,EAAgB,WAAWhY,CAAK,EAC7C0Z,GAAgBjR,GAAA,YAAAA,EAAc,OAAO,OAAOH,GAASA,EAAM,UAAYtI,EAAM,MAAO,CAAE,EAE5F,GAAIkY,EACF,GAAIwB,EAAc,OAAS,EACzBA,EAAc,QAAQlO,GAAY,CAChC,MAAMmO,EAAYL,EAAgB9N,CAAQ,EAC1CmO,EAAU,WAAa,GACvB1O,EAAU,KAAK0O,CAAS,CACtC,CAAa,MACI,CACL,MAAMA,EAAYL,EAAiB,EACnCK,EAAU,WAAa,GACvB1O,EAAU,KAAK0O,CAAS,CACpC,MAEcD,EAAc,OAAS,GACzBA,EAAc,QAAQlO,GAAY,CAChC,MAAMmO,EAAYL,EAAgB9N,CAAQ,EAC1CP,EAAU,KAAK0O,CAAS,CACtC,CAAa,CAGb,CACA,CAEI,MAAM7S,EAAsBxG,EAAa,IAAIF,EAAS,oBAAoB,GAAG,EACvEmW,EAAiBjW,EAAa,IAAIF,EAAS,eAAe,GAAG,EAC7D0R,EAAuBxR,EAAa,IAAIF,EAAS,qBAAqB,GAAG,EAClDE,EAAa,IAAIF,EAAS,qBAAqB,GAAG,EAE/E,MAAMwZ,EAAgB,KAAK,aAAe,KAAO5O,EAAWC,EACtD4O,EAAcD,EAAc,OAAS,GACzCA,EAAc,MAAM5Z,GAAS,KAAK,eAAe,IAAIA,EAAM,QAAQ,CAAC,EAEhE8Z,EAAe,CAAE,EACvB,SAAW,CAACvV,EAAK9B,CAAM,IAAK,OAAO,QAAQtK,EAAO,oBAAoB,EAAG,CACvE,MAAM4hB,EAAc,CAClB,GAAIxV,EACJ,KAAM,KAAK,KAAK,SAAS,yBAAyB9B,EAAO,IAAI,EAAE,GAAKA,EAAO,MAC3E,SAAUA,EAAO,SAAW,KAC5B,WAAY,CAAC,CAACA,EAAO,QACrB,SAAU,KAAK,sBAAwB8B,EACvC,SAAU,KAAK,gBAAgBA,CAAG,GAAK,GACvC,SAAU,CAAA,CACX,EAEG9B,EAAO,UACTsX,EAAY,SAAWzQ,GAAe/E,EAAK,KAAK,cAAc,GAGhEuV,EAAa,KAAKC,CAAW,CACnC,CAEI,MAAMtQ,EAAYH,GAAe,KAAK,oBAAqB,KAAK,cAAc,EAExE0Q,EAAkB,CACtB,GAAG9X,EACH,OAAQ0X,EACR,WAAY,KAAK,WACjB,QAAS,KAAK,aAAe,KAC7B,SAAU,KAAK,aAAe,MAC9B,YAAa,KAAK,WAClB,oBAAA9S,EACA,eAAAyP,EACA,qBAAAzE,EACA,YAAA+H,EACA,kBAAmB,KAAK,eAAe,KAAO,EAC9C,aAAAC,EACA,UAAArQ,EACA,UAAW,GACX,aAAc,KAAK,SACnB,gBAAiB,KAAK,gBACtB,KAAM,KAAK,KAAK,KAChB,UAAWnJ,EAAa,IAAIF,EAAS,YAAY,GAAG,CACrD,EAED,YAAK,qBAAuB4Z,EAErBA,CACX,CAOE,MAAM,aAAajhB,EAAS,CAC1B,MAAMkhB,EAAQ,MAAM,MAAM,aAAalhB,CAAO,EAGxCmhB,EAAiB,KAAK,gBAAkB1D,GAAiB,mBAAoB,EAC/E0D,GAAA,MAAAA,EAAgB,WAClB,KAAK,iBAAmB,GACxB,KAAK,eAAiBA,GAIxB,MAAMzC,EAAoB,SAAS,cAAc,qBAAqB,EACtE,OAAIA,GAAqBwC,GACvBxC,EAAkB,aAAawC,EAAOxC,EAAkB,UAAU,EAG7DwC,CACX,CAME,UAAU/X,EAASnJ,EAAS,CAC1B,MAAM,UAAUmJ,EAASnJ,CAAO,EAEhC,MAAM0d,EAAO,SAAS,cAAc,mBAAmB,EACvD,GAAGA,EAAK,CACN,MAAMrW,EAAWxI,EAAa,EACR0I,EAAa,IAAIF,EAAS,YAAY,GAAG,EAE7DqW,EAAK,UAAU,IAAI,SAAS,EAE5BA,EAAK,UAAU,OAAO,SAAS,CAEvC,CAkDI,GAhDAvd,EAAQ,IAAI,iCAAkC,CAAC,KAAK,SAAS,CAAC,EAC9Dsd,GAAiB,oBAAoB,KAAM,KAAK,cAAc,EAC1D,KAAK,WAAa,KAAK,UAAU,OAAS,GAC5C,KAAK,UAAU,QAAQ,CAAC1c,EAAS2J,IAAU,CACzCvK,EAAQ,IAAI,gCAAgCuK,CAAK,IAAK,CAAC3J,EAASA,EAAQ,aAAcA,EAAQ,SAAS,CAAC,CAChH,CAAO,EAGH,KAAK,iBAAkB,EACL,KAAK,QAAQ,iBAAiB,aAAa,EAEnD,QAAQ,CAACqgB,EAAM1W,IAAU,CACjC0W,EAAK,oBAAoB,WAAY,KAAK,cAAc,EACxDA,EAAK,oBAAoB,OAAQ,KAAK,UAAU,EAChDA,EAAK,oBAAoB,YAAa,KAAK,eAAe,EAC1DA,EAAK,oBAAoB,YAAa,KAAK,eAAe,EAE1D,KAAK,eAAkBlK,GAAM,CAC3B/W,EAAQ,IAAI,kCAAmC,CAAC+W,CAAC,CAAC,EAClD,KAAK,YAAYA,CAAC,CACnB,EAED,KAAK,WAAcA,GAAM,CACvB/W,EAAQ,IAAI,8BAA+B,CAAC+W,CAAC,CAAC,EAC9C,KAAK,QAAQA,CAAC,CACf,EAED,KAAK,gBAAmBA,GAAM,CAC5B/W,EAAQ,IAAI,mCAAoC,CAAC+W,CAAC,CAAC,EACnDA,EAAE,eAAgB,CACnB,EAED,KAAK,gBAAmBA,GAAM,CAC5B/W,EAAQ,IAAI,mCAAoC,CAAC+W,CAAC,CAAC,EACnD2I,GAAc,gBAAgB3I,CAAC,CAChC,EAEDkK,EAAK,iBAAiB,WAAY,KAAK,cAAc,EACrDA,EAAK,iBAAiB,OAAQ,KAAK,UAAU,EAC7CA,EAAK,iBAAiB,YAAa,KAAK,eAAe,EACvDA,EAAK,iBAAiB,YAAa,KAAK,eAAe,CAC7D,CAAK,EAED9Q,GAAkB,EAElB/I,EAAa,kBAAmB,EAChC,KAAK,QAAQ,UAAU,IAAI,SAAWA,EAAa,eAAe,EAE9D,KAAK,gBAAiB,CACxB,MAAM8Z,EAAgB,KAAK,QAAQ,cAAc,iBAAiB,EAC5DC,EAAiB,KAAK,QAAQ,cAAc,YAAY,EAC5C,KAAK,QAAQ,cAAc,qBAAqB,EAElED,GAAA,MAAAA,EAAe,UAAU,IAAI,YAC7BC,GAAA,MAAAA,EAAgB,UAAU,IAAI,WACpC,CAEI,WAAW,IAAM,CACf,SAAS,iBAAiB,QAAS,KAAK,gBAAiB,EAAI,CAC9D,EAAE,GAAG,EAEN,KAAK,kBAAoB,MAAM,GAAGjiB,EAAW,cAAe,KAAK,sBAAsB,KAAK,IAAI,CAAC,EACjG,KAAK,gBAAkB,MAAM,GAAGA,EAAW,YAAa,KAAK,cAAc,KAAK,IAAI,CAAC,EACrF,KAAK,gBAAkB,MAAM,GAAGA,EAAW,YAAa,KAAK,cAAc,KAAK,IAAI,CAAC,EACrF,KAAK,gBAAkB,MAAM,GAAGA,EAAW,YAAa,KAAK,cAAc,KAAK,IAAI,CAAC,EAErFmgB,GAAc,oBAAoB,IAAI,EACtC,KAAK,sCAAuC,CAChD,CAKE,sBAAsBjQ,EAAOgS,EAAY,CACvCphB,EAAQ,IAAI,uBAAuB,EAC9B,KAAK,WAEN,KAAK,sBACL,KAAK,qBACP,aAAa,KAAK,mBAAmB,EAGvC,KAAK,oBAAsB,WAAW,IAAM,CAC1C,MAAMqhB,EAAoB,IAAI,IAAI,KAAK,cAAc,EAErD,KAAK,8BAA+B,EAEpC,MAAMC,EAAc,IAAI,IAAI,CAAC,GAAGD,EAAmB,GAAG,KAAK,cAAc,CAAC,EAC1E,UAAW5R,KAAW6R,EACpB,KAAK,wBAAwB7R,CAAO,EAGtC,KAAK,sBAAuB,EAC5B,KAAK,sCAAuC,EAE5C,KAAK,oBAAsB,IAC5B,EAAE,GAAG,GACV,CAME,cAAcxI,EAAMsa,EAAS1hB,EAASiB,EAAQ,C9B3YzC,IAAAhB,EAAAwB,E8BiZH,GALI,CAAC,KAAK,UAKN,EAHc2F,EAAK,OAAS,eACdnH,EAAAyhB,EAAQ,SAAR,YAAAzhB,EAAgB,YAAa,UAC7BwB,EAAAigB,EAAQ,SAAR,YAAAjgB,EAAgB,cAAe,QACjC,OAEhB,MAAMwF,EAAQG,EAAK,OACnB,GAAI,CAACH,GAASA,EAAM,eAAiB,QAAS,OAE9C,MAAM2T,EAAa,KAAK,WAClBpL,EAAgB,OAAO,QAAQvI,EAAM,SAAS,EACjD,KAAK,CAAC,CAAC0a,EAAKxa,CAAK,IAAM,CACtB,MAAMzF,EAAO,KAAK,MAAM,IAAIigB,CAAG,EAC/B,OAAOjgB,GAAQ,CAACA,EAAK,MAAQyF,GAAS,MAAM,0BAA0B,KAC9E,CAAO,GAEmByT,IAAe,MAAQpL,GACvBoL,IAAe,OAAS,CAACpL,GAAiBC,GAAgBxI,CAAK,KAG/E,KAAK,oBACP,aAAa,KAAK,kBAAkB,EAGtC,KAAK,mBAAqB,WAAW,IAAM,CACzC,KAAK,OAAQ,EACb,KAAK,mBAAqB,IAC3B,EAAE,GAAG,EAEZ,CAoBE,kBAAmB,C9B9bd,IAAAhH,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,E8B+bHzM,EAAQ,IAAI,kBAAkB,EAE9B,MAAM0N,EAAO,KAAK,SAElB5N,EAAA4N,EAAK,cAAc,qBAAqB,IAAxC,MAAA5N,EAA2C,iBAAiB,SAAU,KAAK,sBAAsB,KAAK,IAAI,IAC1GwB,EAAAoM,EAAK,cAAc,uBAAuB,IAA1C,MAAApM,EAA6C,iBAAiB,SAAU,KAAK,qBAAqB,KAAK,IAAI,IAC3GqI,EAAA+D,EAAK,cAAc,0BAA0B,IAA7C,MAAA/D,EAAgD,iBAAiB,SAAU,KAAK,uBAAuB,KAAK,IAAI,IAChH4C,EAAAmB,EAAK,cAAc,qBAAqB,IAAxC,MAAAnB,EAA2C,iBAAiB,SAAU,KAAK,mBAAmB,KAAK,IAAI,IACvGC,EAAAkB,EAAK,cAAc,sBAAsB,IAAzC,MAAAlB,EAA4C,iBAAiB,QAAS,KAAK,cAAc,KAAK,IAAI,IAClGC,EAAAiB,EAAK,cAAc,qBAAqB,IAAxC,MAAAjB,EAA2C,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,GAEpG,MAAM+Q,EAAa9P,EAAK,cAAc4P,GAAiB,oBAAoB,EACvEE,GAAc,CAACA,EAAW,aAAa,uBAAuB,IAChEA,EAAW,aAAa,wBAAyB,MAAM,EACvDA,EAAW,iBAAiB,YAAczG,GAAM,CAC9CuG,GAAiB,gBAAgBvG,EAAG,IAAI,CAChD,CAAO,GAGUrJ,EAAK,iBAAiB,YAAY,EAC1C,QAAQjE,GAAO,CAClBA,EAAI,iBAAiB,QAAS,KAAK,YAAY,KAAK,IAAI,CAAC,EACzDA,EAAI,iBAAiB,WAAY,KAAK,kBAAkB,KAAK,IAAI,CAAC,CACxE,CAAK,EAEDiE,EAAK,iBAAiB,qBAAqB,EAAE,QAAQgO,GAAW,CAC9DA,EAAQ,iBAAiB,QAAS,KAAK,cAAc,KAAK,IAAI,CAAC,CACrE,CAAK,EAED,MAAM+F,EAAc/T,EAAK,cAAc,eAAe,EAClD+T,GACFA,EAAY,iBAAiB,QAAS,KAAK,eAAe,KAAK,IAAI,CAAC,EAGtE,MAAMC,EAAYhU,EAAK,cAAc,0BAA0B,EAC3DgU,IACFhU,EAAK,iBAAiB,aAAc,IAAM,CACpC,KAAK,eAAe,KAAO,GAC7BgU,EAAU,UAAU,IAAI,eAAe,CAEjD,CAAO,EAEDhU,EAAK,iBAAiB,aAAc,IAAM,CACxCgU,EAAU,UAAU,OAAO,eAAe,CAClD,CAAO,GAGH,MAAMC,EAAwBjU,EAAK,cAAc,gBAAgB,EAC7DiU,GACFA,EAAsB,iBAAiB,QAAU7W,GAAU,CACzD,MAAM8W,EAAgB9W,EAAM,OAAO,QAAQ,sBAAsB,EAEjE,GAAI8W,EAAe,CACjB,MAAMC,EAAcD,EAAc,QAAQ,oBAAoB,EAE9D,GAAIA,EAAc,UAAU,SAAS,kBAAkB,EAAG,CACxD,KAAK,mBAAmB9W,CAAK,EAC7B,MACZ,CAEU,GAAI8W,EAAc,UAAU,SAAS,QAAQ,GAAKC,GAAeA,EAAY,UAAU,SAAS,UAAU,EAAG,CAC3G,MAAMC,EAAc,CAClB,GAAGhX,EACH,cAAe+W,CAChB,EACD,KAAK,oBAAoBC,CAAW,EACpC,MACZ,CACA,CAEQ,MAAMC,EAAUjX,EAAM,OAAO,QAAQ,WAAW,EAChD,GAAIiX,GAAWA,EAAQ,QAAQ,GAAI,CACjC,MAAMD,EAAc,CAClB,GAAGhX,EACH,cAAeiX,CAChB,EACD,KAAK,iBAAiBD,CAAW,CAC3C,CACA,CAAO,CAEP,CAKE,MAAM,sBAAsBhX,EAAO,CACjC9K,EAAQ,IAAI,uBAAuB,EACnC,MAAMkH,EAAWxI,EAAa,EACxBsP,EAAUlD,EAAM,OAAO,QAC7B,MAAM1D,EAAa,IAAIF,EAAS,oBAAoB,IAAK8G,CAAO,EAEhER,GAAY,uBAAuBQ,CAAO,CAE9C,CAKE,MAAM,qBAAqBlD,EAAO,CAChC9K,EAAQ,IAAI,sBAAsB,EAClC,MAAMkH,EAAWxI,EAAa,EACxBsjB,EAAOlX,EAAM,OAAO,QAC1B,MAAM1D,EAAa,IAAIF,EAAS,eAAe,IAAK8a,CAAI,CAC5D,CAKE,MAAM,uBAAuBlX,EAAO,CAClC9K,EAAQ,IAAI,wBAAwB,EACpC,MAAMkH,EAAWxI,EAAa,EACxBujB,EAAYnX,EAAM,OAAO,QAC/B,MAAM1D,EAAa,IAAIF,EAAS,qBAAqB,IAAK+a,CAAS,CACvE,CAKE,mBAAmBnX,EAAO,CACxB9K,EAAQ,IAAI,oBAAoB,EAChC,MAAMkiB,EAAYpX,EAAM,OAAO,QAC/B,KAAK,oBAAsB,KAEX,KAAK,sBAAwB,CAAE,GACjB,QAAU,CAAE,GAE5B,QAAQ2V,GAAa,CACjC,MAAMpO,EAAWoO,EAAU,SACvByB,GACF,KAAK,eAAe,IAAI7P,CAAQ,EAC5BoO,EAAU,QACZjR,GAA2BiR,EAAU,GAAI,GAAMA,EAAU,OAAO,EAEhEjR,GAA2BiR,EAAU,GAAI,EAAI,IAG/C,KAAK,eAAe,OAAOpO,CAAQ,EAC/BoO,EAAU,QACZjR,GAA2BiR,EAAU,GAAI,GAAOA,EAAU,OAAO,EAEjEjR,GAA2BiR,EAAU,GAAI,EAAK,EAGxD,CAAK,EAED,WAAW,IAAM,CACf,KAAK,oBAAsB,EAC5B,EAAE,GAAG,EAEN,KAAK,OAAQ,EACb,KAAK,8BAA+B,EAGpC,MAAMiB,EAAY,KAAK,QAAQ,cAAc,0BAA0B,EACnEA,IACE,KAAK,eAAe,KAAO,EAC7BA,EAAU,UAAU,IAAI,eAAe,EAEvCA,EAAU,UAAU,OAAO,eAAe,EAGlD,CAKE,cAAc5W,EAAO,CACnB9K,EAAQ,IAAI,eAAe,EAC3B8K,EAAM,eAAgB,EACtB,KAAK,SAAW,CAAC,KAAK,SAEtB,MAAMqX,EAAWrX,EAAM,cACvBqX,EAAS,UAAU,OAAO,kBAAmB,sBAAsB,EACnEA,EAAS,UAAU,IAAI,KAAK,SAAW,kBAAoB,sBAAsB,CACrF,CAKE,MAAM,iBAAiBrX,EAAO,CAC5B9K,EAAQ,IAAI,kBAAkB,EAC9B8K,EAAM,eAAgB,EACtBA,EAAM,gBAAiB,EAEvB,KAAK,gBAAkB,CAAC,KAAK,gBAC7B,MAAM,KAAK,KAAK,QAAQ7L,EAAO,GAAI,sBAAuB,KAAK,eAAe,EAE9E,MAAMmjB,EAAyB,KAAK,QAAQ,cAAc,iBAAiB,EACvEA,GACFA,EAAuB,UAAU,OAAO,WAAY,KAAK,eAAe,EAG1E,MAAMjB,EAAiB,KAAK,QAAQ,cAAc,YAAY,EAC1DA,GACFA,EAAe,UAAU,OAAO,WAAY,KAAK,eAAe,CAEtE,CAOE,aAAarf,EAAU,CACrB,MAAMugB,EAAU3C,GAAc,QAAQ5d,CAAQ,EAC9C,OAAA9B,EAAQ,IAAI,gCAAiC,CAAC8B,EAAUugB,CAAO,CAAC,EACzDA,CACX,CAME,YAAYvX,EAAO,CACjB9K,EAAQ,IAAI,sDAAuD,CAAC8K,CAAK,CAAC,EAC1E4U,GAAc,eAAe5U,EAAO,IAAI,CAC5C,CAME,MAAM,QAAQA,EAAO,CACnB9K,EAAQ,IAAI,6CAA8C,CAAC8K,CAAK,CAAC,EACjE,MAAM4U,GAAc,WAAW5U,EAAO,IAAI,CAC9C,CAKE,+BAAgC,C9BrqB3B,IAAAhL,E8BsqBHE,EAAQ,IAAI,+BAA+B,EAE3C,MAAMsiB,IAAmBxiB,EAAA,OAAO,SAAP,YAAAA,EAAe,aAAc,CAAE,EACxD,KAAK,eAAe,MAAO,EAE3B,UAAWsP,KAASkT,EAClB,GAAIlT,EAAM,MAAO,CACf,MAAMiD,EAAWjD,EAAM,GAGvB,GAFA,KAAK,eAAe,IAAIiD,CAAQ,EAE5B,KAAK,eAAe,OAAS,EAAG,CAClC,MAAMqI,EAAOrL,GAAcD,EAAM,KAAK,EACtC,KAAK,WAAasL,EAAO,KAAO,KAC1C,CACA,CAGI1a,EAAQ,IAAI,gCAAiC,CAAC,KAAK,cAAc,CAAC,CAEtE,CAKE,MAAM,YAAY8K,EAAO,CACvB,MAAMrB,EAAMqB,EAAM,cAAc,QAAQ,IACpCrB,IAAQ,KAAK,aAIjB,KAAK,oBAAsB,KAE3B,KAAK,WAAaA,EAClB,MAAM,KAAK,OAAQ,EACvB,CAKE,MAAM,kBAAkBqB,EAAO,C9B7sB1B,IAAAhL,E8B8sBHE,EAAQ,IAAI,mBAAmB,EAC/B8K,EAAM,eAAgB,EACtBA,EAAM,gBAAiB,EAEvB,KAAK,oBAAsB,GAC3B,KAAK,eAAe,MAAO,GAC3BhL,EAAA,OAAO,SAAP,MAAAA,EAAe,aACf,KAAK,oBAAsB,KAE3B,WAAW,IAAM,CACf,KAAK,oBAAsB,EAC5B,EAAE,GAAG,EAEN,MAAM,KAAK,OAAQ,EACnB,KAAK,8BAA+B,CACxC,CAKE,cAAcgL,EAAO,CACnB,GAAIA,EAAM,OAAO,QAAQ,eAAe,EAAG,OAE3C,MAAMyX,EAAiBzX,EAAM,cAEvBuH,EAAWkQ,EAAe,QAAQ,GAClC9S,EAAU8S,EAAe,QAAQ,QACjC5S,EAAU4S,EAAe,QAAQ,QACvC,KAAK,sBAAsBlQ,EAAU5C,EAASE,CAAO,CACzD,CAKE,sBAAsB0C,EAAU5C,EAASE,EAAS,CAChD3P,EAAQ,IAAI,uBAAuB,EACnC,KAAK,oBAAsB,GAEvB,KAAK,eAAe,IAAIqS,CAAQ,GAClC,KAAK,eAAe,OAAOA,CAAQ,EAC/B1C,EACFH,GAA2BC,EAAS,GAAOE,CAAO,EAElDH,GAA2BC,EAAS,EAAK,IAG3C,KAAK,eAAe,IAAI4C,CAAQ,EAC5B1C,EACFH,GAA2BC,EAAS,GAAME,CAAO,EAEjDH,GAA2BC,EAAS,EAAI,GAI5C,WAAW,IAAM,CACf,KAAK,oBAAsB,EAC5B,EAAE,GAAG,EAEN,KAAK,wBAAwB4C,CAAQ,EACrC,KAAK,sBAAuB,EAC5B,KAAK,sCAAuC,EAG5C,MAAMqP,EAAY,KAAK,QAAQ,cAAc,0BAA0B,EACnEA,IACE,KAAK,eAAe,KAAO,EAC7BA,EAAU,UAAU,IAAI,eAAe,EAEvCA,EAAU,UAAU,OAAO,eAAe,EAGlD,CAKE,wBAAwBjS,EAAS,CAC/B,MAAM8S,EAAiB,KAAK,QAAQ,cAAc,gCAAgC9S,CAAO,IAAI,EAC7F,GAAI,CAAC8S,EAAgB,OAErB,MAAMjD,EAAeiD,EAAe,QAAQ,QAAQ,EACpD,GAAI,CAACjD,EAAc,OAEnB,MAAMkD,EAAWlD,EAAa,cAAc,eAAe,EACrDmD,EAAa,KAAK,eAAe,IAAIhT,CAAO,EAE9C+S,IACFA,EAAS,QAAUC,GAGrBF,EAAe,UAAU,OAAO,WAAYE,CAAU,EACtDF,EAAe,QAAQ,SAAWE,EAAW,SAAU,CAC3D,CAKE,+BAAgC,CAC9BziB,EAAQ,IAAI,+BAA+B,EAC3C,KAAK,OAAQ,CACjB,CAKE,uCAAwC,CACtCA,EAAQ,IAAI,uCAAuC,EACnD,MAAM0iB,EAAe,KAAK,eAAe,KAAO,EAC1Cf,EAAwB,KAAK,QAAQ,cAAc,gBAAgB,EAEzE,GAAIA,EAAuB,CACzBA,EAAsB,UAAU,OAAO,WAAY,CAACe,CAAY,EAE3Cf,EAAsB,iBAAiB,oBAAoB,EACnE,QAAQ1a,GAAQ,CAC3BA,EAAK,UAAU,OAAO,WAAY,CAACyb,CAAY,CACvD,CAAO,EAED,MAAMC,EAAqB,MAAM,KAAK,KAAK,cAAc,EAAE,KAAKtQ,GAAY,CAC1E,MAAMvL,EAAQsL,GAAaC,CAAQ,EACnC,OAAOvL,GAAA,YAAAA,EAAO,QAAS,WAC/B,CAAO,EAEK8b,EAAajB,EAAsB,cAAc,qBAAqB,EACxEiB,IACFA,EAAW,MAAM,QAAUD,EAAqB,GAAK,OAE7D,CACA,CAKE,uBAAwB,CACtB3iB,EAAQ,IAAI,uBAAuB,EACnC,MAAM6iB,EAAoB,KAAK,QAAQ,cAAc,qBAAqB,EACpEnC,EAAgB,KAAK,aAAe,KAAO,KAAO,MAClDoC,EAAa,KAAK,QAAQ,iBAAiB,IAAIpC,CAAa,4CAA4C,EACxGqC,EAAe,MAAM,KAAKD,CAAU,EAAE,OAAOE,GAAMA,EAAG,OAAO,EAAE,OAErEH,EAAkB,QAAUE,EAAe,GAAKA,IAAiBD,EAAW,OAC5ED,EAAkB,cAAgBE,EAAe,GAAKA,EAAeD,EAAW,MACpF,CAKE,eAAehY,EAAO,CACpB9K,EAAQ,IAAI,gBAAgB,EAC5B,MAAMijB,EAAanY,EAAM,OAAO,MAAM,YAAa,EAAC,KAAM,EACpD6W,EAAwB,KAAK,QAAQ,cAAc,gBAAgB,EAEzE,GAAI,CAACA,EAAuB,OACPA,EAAsB,iBAAiB,oBAAoB,EAEnE,QAAQE,GAAe,C9Bz2BjC,IAAA/hB,E8B02BD,MAAMojB,IAAcpjB,EAAA+hB,EAAY,cAAc,oBAAoB,IAA9C,YAAA/hB,EAAiD,YAAY,gBAAiB,GAC5FqjB,EAAWtB,EAAY,iBAAiB,WAAW,EACzD,IAAIuB,EAAqB,GAEzB,GAAID,EAAS,OAAS,EAAG,CACvBA,EAAS,QAAQpB,GAAW,C9B/2B7B,IAAAjiB,E8Bi3BG,MAAMujB,KADcvjB,EAAAiiB,EAAQ,cAAc,gBAAgB,IAAtC,YAAAjiB,EAAyC,YAAY,gBAAiB,IAC5D,SAASmjB,CAAU,EACjDlB,EAAQ,UAAU,OAAO,SAAU,CAACsB,CAAS,EACzCA,IAAWD,EAAqB,GAC9C,CAAS,EAED,MAAME,EAAkBJ,EAAY,SAASD,CAAU,EACjDM,EAAqBN,IAAe,IAAMK,GAAmBF,EAGnE,GAFAvB,EAAY,UAAU,OAAO,SAAU,CAAC0B,CAAkB,EAEtDN,GAAcG,EAAoB,CACpC,MAAMI,EAAa3B,EAAY,cAAc,oBAAoB,EAC3D4B,EAAkB5B,EAAY,cAAc,mBAAmB,EACjE2B,GAAcC,IAChBD,EAAW,MAAM,QAAU,QAC3BC,EAAgB,UAAU,IAAI,UAAU,EAEpD,CACA,KAAa,CACL,MAAMJ,EAAYJ,IAAe,IAAMC,EAAY,SAASD,CAAU,EACtEpB,EAAY,UAAU,OAAO,SAAU,CAACwB,CAAS,CACzD,CACA,CAAK,CACL,CAKE,MAAM,mBAAmBvY,EAAO,CAC9BA,EAAM,gBAAiB,EAGvB,MAAM+W,EADgB/W,EAAM,OAAO,QAAQ,sBAAsB,EAC/B,QAAQ,oBAAoB,EACxD6N,EAAYkJ,EAAY,QAAQ,GAChC4B,EAAkB5B,EAAY,cAAc,mBAAmB,EAC/D2B,EAAa3B,EAAY,cAAc,oBAAoB,EAEjE,GAAI,CAAC2B,EAAY,OAEjB,MAAMtT,EAAauT,EAAgB,UAAU,SAAS,UAAU,EAChEA,EAAgB,UAAU,OAAO,WAAY,CAACvT,CAAU,EACxDsT,EAAW,MAAM,QAAUtT,EAAa,OAAS,QACjD,KAAK,gBAAgByI,CAAS,EAAI,CAACzI,EACnC,MAAM,KAAK,KAAK,QAAQjR,EAAO,GAAI,sBAAuB,KAAK,eAAe,CAClF,CAKE,MAAM,oBAAoB6L,EAAO,CAE/B,MAAM+V,EADc/V,EAAM,cACM,QAAQ,GAClC4Y,EAAazkB,EAAO,qBAAqB4hB,CAAW,EAE1D,GAAI,CAAC6C,EAAY,CACf1jB,EAAQ,MAAM,wBAAyB,CAAC6gB,CAAW,CAAC,EACpD,MACN,CAEQ,KAAK,sBAAwBA,EAC/B,KAAK,oBAAsB,KAE3B,KAAK,oBAAsBA,EAGzB6C,EAAW,QACb,MAAM,KAAK,OAAQ,EACV,KAAK,qBACd,KAAK,aAAa7C,EAAa,IAAI,CAEzC,CAKE,iBAAiB/V,EAAO,CACtB9K,EAAQ,IAAI,kBAAkB,EAC9B,MAAMmO,EAAUrD,EAAM,cAAc,QAAQ,GAEtC+V,EADa/V,EAAM,cAAc,QAAQ,QACb,KAAK,oBACvC,KAAK,aAAa+V,EAAa1S,CAAO,CAC1C,CAaE,MAAM,2BAA2B7B,EAAQwF,EAAUC,EAAWqL,EAAgBjP,EAASwV,EAAY,CACjG,MAAMzc,EAAWxI,EAAa,EACxBsS,EAAqB,CAAE,EACvB4S,EAAsB,CAAE,EACxBC,EAAqB,CAAE,EAC7B,IAAI1N,EAAc,QAAQ,MAAM,SAAU,EAG1CnW,EAAQ,IAAI,6BAA8B,CAACsM,EAAQwF,EAAUC,CAAS,CAAC,EAEvE,MAAM+R,EAAkB,CAAE,EACpBC,EAAY,CAAE,EAEpB,GAAIzX,EAAO,YAAa,CACtB,SAAW,CAAE,MAAAxF,EAAO,MAAAkL,CAAK,IAAMF,EACxBE,EAAM,OAQT6R,EAAmB,KAAK,CAAC,MAAA/c,EAAO,MAAAkL,CAAK,CAAC,GAPnC5K,EAAa,IAAIF,EAAS,yBAAyB,GAAG,GACvDkK,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,0CAA2C,CAC7F,OAAQY,EAAM,IAC5B,CAAa,CAAC,EAEJ4R,EAAoB,KAAK9c,CAAK,GAKlCid,EAAU,KAAK,GAAGF,EAAmB,IAAI,CAAC,CAAC,MAAA/c,CAAK,IAAMA,CAAK,CAAC,CAClE,MACMiL,EAAU,KAAK,GAAGD,EAAS,IAAI,CAAC,CAAE,MAAAhL,CAAK,IAAOA,CAAK,CAAC,EAGtDid,EAAU,KAAK,GAAGH,EAAqB,GAAG7R,CAAS,EACnD,MAAMuP,EAAcyC,EAAU,IAAIjd,GAASA,EAAM,EAAE,EAEnDgd,EAAgB,KAAK,GAAGH,EAAW,OAAO1c,GACxCA,GAAQA,EAAK,OAASqa,EAAY,SAASra,EAAK,MAAM,EAAE,CAC9D,CAAK,EAED,MAAM2R,EAAuBxR,EAAa,IAAIF,EAAS,qBAAqB,GAAG,EAkB/E,GAhBI0R,GAAwBmL,EAAU,OAAS,IAC7C/jB,EAAQ,IAAI,yDAA0D,CAACmW,CAAW,CAAC,EAEnF,MAAML,EAAiB,uBACrBgO,EACA1G,EACAjP,EACA7B,EACA6J,CACD,EAED,MAAMnU,GAAM,GAAG,GAKbob,IAAmBre,EAAW,QAAS,CACzCiB,EAAQ,IAAI,oFAAoF,EAEhG,MAAMgkB,EAAqB,CAAE,EAQ7B,GAPAH,EAAmB,QAAQ,CAAC,CAAC,MAAA/c,CAAK,IAAMkd,EAAmB,KAAKld,CAAK,CAAC,EACtE8c,EAAoB,QAAQ9c,GAASkd,EAAmB,KAAKld,CAAK,CAAC,EACnEiL,EAAU,QAAQjL,GAASkd,EAAmB,KAAKld,CAAK,CAAC,EAEzD9G,EAAQ,IAAI,+DAAgEgkB,EAAmB,OAAQ,QAAQ,EAG3G,CAFwB,MAAM,KAAK,oBAAoBA,CAAkB,EAEnD,CACxBhkB,EAAQ,IAAI,mEAAmE,EAC/E,MACR,CAEMA,EAAQ,IAAI,2EAA2E,CAC7F,CAII,SAAW,CAAE,MAAA8G,EAAO,MAAAkL,CAAK,IAAM6R,EAAoB,CACjD,MAAMI,EAAarL,GAAwBmL,EAAU,OAAS,EAAI5N,EAAc,KAEhF,IAAI+N,EAAiB/V,EACrB,GAAIiP,IAAmBre,EAAW,UAChCmlB,EAAiBpd,EAAM,OAAO,WAAW,GAAG,iBACxC,CAACod,GAAgB,CACnBlkB,EAAQ,KAAK,6BAA6B8G,EAAM,IAAI,uBAAuB,EAC3E,QACV,CAGM,MAAM,KAAK,yBAAyBA,EAAOkL,EAAOoL,EAAgB8G,EAAgB5X,EAAQ,GAAM2X,CAAU,EAC1GjT,EAAmB,KAAK,CAAE,MAAAlK,EAAO,MAAAkL,CAAK,CAAE,EACxC,MAAMhQ,GAAM,GAAG,CACrB,CACQgP,EAAmB,OAAS,GAC9B,KAAK,8BAA8BA,EAAoBoM,EAAgBjP,CAAO,EAKhF,IAAIgW,EAAiB,CAAE,EAIvB,GAHAA,EAAiBA,EAAe,OAAOP,CAAmB,EAC1DO,EAAiBA,EAAe,OAAOpS,CAAS,EAE5CoS,EAAe,OAAS,EAAG,CAC7B7X,EAAO,eAAiB,GACxBA,EAAO,YAAcsM,GAAwBmL,EAAU,OAAS,EAAI5N,EAAc,KAElF,MAAMiO,EAAaD,EAAe,IAAIrd,GAASA,EAAM,EAAE,EACjDud,EAAiBV,EAAW,OAAOrZ,GACvCA,GAASA,EAAM,OAAS8Z,EAAW,SAAS9Z,EAAM,MAAM,EAAE,CAC3D,EAED,MAAM,KAAK,yBAAyB+Z,EAAgBjH,EAAgBjP,EAAS7B,CAAM,CACzF,CACA,CAQE,MAAM,oBAAoBgY,EAAgB,CACxC,MAAMhT,EAAS,MAAM,QAAQgT,CAAc,EAAIA,EAAiB,CAACA,CAAc,EAC/EtkB,EAAQ,IAAI,2CAA4CsR,EAAO,IAAItG,GAAKA,EAAE,IAAI,CAAC,EAE/E,MAAMuZ,EAAsBjT,EAAO,OAAOxK,GAAS,CACjD,MAAM0d,EAAS1d,EAAM,OAAO,WAAW,GACjC2d,EAAcD,EAAO,QAAU,EACrC,OAAAxkB,EAAQ,IAAI,uCAAwC,CAAC8G,EAAM,KAAM,SAAU0d,EAAO,MAAO,gBAAiBC,CAAW,CAAC,EAC/GA,CACb,CAAK,EAID,GAFAzkB,EAAQ,IAAI,+CAAgDukB,EAAoB,OAAQ,CAACA,CAAmB,CAAC,EAEzGA,EAAoB,SAAW,EACjC,OAAAvkB,EAAQ,IAAI,yCAA0C,EAAE,EACjD,GAGT,MAAM+O,EAAawV,EAAoB,IAAIzd,GAASA,EAAM,IAAI,EAAE,KAAK,IAAI,EACzE9G,EAAQ,IAAI,mDAAoD+O,CAAU,EAG1E,MAAM2V,EAAe,MAAM,QAAQ,aAAa,IAAI,SAAS,QAAQ,CACnE,OAAQ,CACN,MAAO,KAAK,KAAK,SAAS,2CAA2C,GAAK,wBAC1E,QAAS,CAAC,wBAAwB,CACnC,EACD,SAAU,CACR,MAAO,GACR,EACD,QAAS,MAAM,KAAK,KAAK,OAAO,8CAA+C,CAC7E,OAAQ3V,CAChB,CAAO,GAAK,EAAE,OACR,MAAO,GACP,YAAa,GACb,IAAK,CACH,MAAO,KAAK,KAAK,SAAS,6CAA6C,GAAK,gBAC5E,KAAM,EACP,EACD,GAAI,CACF,MAAO,KAAK,KAAK,SAAS,QAAQ,GAAK,SACvC,KAAM,EACd,CACA,CAAK,EAID,GAFA/O,EAAQ,IAAI,uCAAwC0kB,CAAY,EAE5DA,EAAc,CAChB1kB,EAAQ,IAAI,2DAA4D+O,CAAU,EAClF,UAAWjI,KAASyd,EAClB,GAAI,CACFvkB,EAAQ,IAAI,yCAA0C,CAAC8G,EAAM,KAAM,WAAYA,EAAM,OAAO,CAAC,EAC7F,MAAM6d,EAAe,MAAMvO,EAAa,qBAAqBtP,CAAK,EAIlE,GAHA9G,EAAQ,IAAI,iCAAkC,CAAC2kB,CAAY,CAAC,EAGxD7d,EAAM,SAAWA,EAAM,OAAQ,CACjC9G,EAAQ,IAAI,qCAAsC,CAAC8G,EAAM,OAAO,IAAI,CAAC,EACrE,GAAI,CACF,MAAMsP,EAAa,qBAAqBtP,EAAM,MAAM,EACpD9G,EAAQ,IAAI,iCAAiC,CAC9C,OAAQ4kB,EAAgB,CACvB5kB,EAAQ,MAAM,6BAA8B,CAAC4kB,CAAc,CAAC,CAC1E,CACA,CACS,OAAQ3jB,EAAO,CACdjB,EAAQ,MAAM,sCAAuC,CAACiB,CAAK,CAAC,CACtE,CAGM,OAAAmQ,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,yCAA0C,CAC5F,MAAOrC,CACR,CAAA,GAAK,yBAAyBA,CAAU,EAAE,EAE3C/O,EAAQ,IAAI,wDAAwD,EAC7D,EACb,CAEI,OAAAA,EAAQ,IAAI,uDAAuD,EAC5D,EACX,CAOE,MAAM,aAAa6gB,EAAa1S,EAAS,C9B/pCpC,IAAArO,EAAAwB,EAAAqI,E8BgqCH3J,EAAQ,IAAI,eAAgB,CAAC6gB,EAAa1S,CAAO,CAAC,EAClD,MAAMjH,EAAWxI,EAAa,EACxBmmB,EAAoB,MAAM,KAAK,KAAK,cAAc,EAClDxH,EAAiBjW,EAAa,IAAIF,EAAS,eAAe,GAAG,EAGnE,IAAIyc,EAAakB,EACd,IAAIxS,GAAY,CACf,MAAMvL,EAAQsL,GAAaC,CAAQ,EACnC,GAAI,CAACvL,EAAO,OAAO,KAEnB,IAAI6I,EAAU,KACd,OAAI,KAAK,OAAO,IAAI0C,CAAQ,EAC1B1C,EAAU,KAEVA,EAAU0C,EAGL,CAAE,MAAAvL,EAAO,SAAAuL,EAAU,QAAA1C,CAAS,CACpC,CAAA,EACA,OAAO1I,GAAQA,CAAI,EAElBqK,EAASqS,EAAW,IAAI1c,GAAQA,EAAK,KAAK,EAE9C,MAAMyc,EAAazkB,EAAO,qBAAqB4hB,CAAW,EACpDzD,GAAkBtd,GAAA4jB,GAAA,YAAAA,EAAY,OAAQ7C,IAApB,YAAA/gB,EAAkC,cAE1D,OAAOsd,EAAc,CACnB,KAAKre,EAAW,OAEd,GADAoP,EAAU,MAAMgP,GAAmB,iBAAkB,EACjD,CAAChP,EAAS,OACd,MACF,KAAKpP,EAAW,WAChB,KAAKA,EAAW,kBAEd,GADoB,MAAM0a,GAA2B,EACpC,CACfzZ,EAAQ,IAAI,4BAA6B,CAAC6kB,CAAiB,CAAC,EAE5D,MAAMC,EAAsB,CAAE,EACxBC,EAAmB,CAAE,EAE3B,UAAW1S,KAAYwS,EAAmB,CACxC,MAAM/d,EAAQsL,GAAaC,CAAQ,EACnC,GAAI,CAACvL,EAAO,SAEZ,IAAI6I,EAAU,KAEd,GAAI,CAAC,KAAK,OAAO,IAAI0C,CAAQ,EAC3B1C,EAAU0C,EACV0S,EAAiB,KAAKje,EAAM,IAAI,MAC3B,CAEL,GADA6I,IAAUhG,GAAArI,EAAAwF,EAAM,gBAAe,IAArB,YAAAxF,EAA0B,KAA1B,YAAAqI,EAA8B,KAAM,KAC1C,CAACgG,EAAS,CACZmV,EAAoB,KAAKhe,EAAM,IAAI,EACnC,QAChB,CACcie,EAAiB,KAAKje,EAAM,IAAI,EAEN,KAAK,OAAO,WAAW,KAAKiT,IAAKA,GAAE,UAAYpK,CAAO,GAE9E,MAAM,KAAK,OAAO,wBAAwB,YAAa,CAAC,CACtD,QAAS7I,EAAM,GACf,QAAS6I,CAC3B,CAAiB,CAAC,CAElB,CACA,CAEU,GAAIoV,EAAiB,SAAW,EAAG,CACjC,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,iDAAiD,GACxF,+EAA+E,EACjF,MACZ,CAEcD,EAAoB,OAAS,GAC/B,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,oDAAqD,CAC1F,OAAQA,EAAoB,KAAK,IAAI,CACnD,CAAa,GAAK,iDAAiDA,EAAoB,KAAK,IAAI,CAAC,EAAE,EAGzF,MAAME,EAAoBrB,EAAW,OAAOrZ,GAAS,C9BhvCxD,IAAAxK,E8BivCK,OAAIwK,EAAM,QAAgB,GAEnB,CAAC,GADSxK,EAAAwK,EAAM,MAAM,gBAAe,IAA3B,YAAAxK,EAAgC,GAE7D,CAAW,EAED6jB,EAAW,OAAS,EACpBA,EAAW,KAAK,GAAGqB,CAAiB,EAEpC1T,EAAS0T,EAAkB,IAAI1a,GAASA,EAAM,KAAK,EACnD,MAAM2a,EAAiB,CAAC,GAAG,IAAI,IAAI3T,EAAO,IAAIxK,GAASA,EAAM,EAAE,CAAC,CAAC,EAC3Doe,EAAmB,MAAMxL,GAA0BuL,EAAgB,IAAI,EAE7E,GAAI,CAACC,EAAiB,OAAQ,OAE9B,MAAMC,EAAqBxB,EAAW,OAAO1c,GAC3CA,GAAQA,EAAK,OAASie,EAAiB,SAASje,EAAK,MAAM,EAAE,CAC9D,EAEDqK,EAAS4T,EACN,IAAIzhB,GAAM,KAAK,OAAO,IAAIA,CAAE,CAAC,EAC7B,OAAOqD,GAASA,CAAK,EAExB6c,EAAW,OAAS,EACpBA,EAAW,KAAK,GAAGwB,CAAkB,EAEd/d,EAAa,IAAIF,EAAS,wBAAwB,GAAG,GAE1E,KAAK,OAAO,YAAa,CAErC,CACQ,MACF,KAAKnI,EAAW,WACduS,EAAS,MAAMD,GAA0BC,CAAM,EAC/C,MACF,KAAKvS,EAAW,QAGd,GAFAuS,EAASA,EAAO,OAAOxK,GAASA,EAAM,OAAS,WAAW,EAC1D6c,EAAaA,EAAW,OAAO1c,GAAQA,EAAK,MAAM,OAAS,WAAW,EAClEqK,EAAO,SAAW,EAAG,CACvBF,EAAoB,OAAO,OAAQ,KAAK,KAAK,SAAS,iDAAiD,GACrG,8DAA8D,EAChE,MACV,CACQ,KAGR,CAEI,GAAI,CAACE,EAAO,OAAQ,CAClBF,EAAoB,OAAO,OAAQ,0BAA0B,EAC7D,MACN,CAEI,KAAM,CAAE,SAAAU,EAAU,UAAAC,GAAcF,GAA4BP,CAAM,EAC5DhF,EAAS,MAAM6Q,GAAmB,qBAAqB7L,EAAQ8L,EAAgBjP,EAASkP,EAAgBvL,CAAQ,EAEtH9R,EAAQ,IAAI,sBAAuB,CAACsM,CAAM,CAAC,EACtCA,IACL,MAAM,KAAK,2BAA2BA,EAAQwF,EAAUC,EAAWqL,EAAgBjP,EAASwV,CAAU,EAEjG,KAAK,UACR,WAAW,IAAM,KAAK,MAAK,EAAI,GAAG,EAExC,CAYE,MAAM,yBAAyB7c,EAAOkL,EAAO6O,EAAa1S,EAAS7B,EAAQ8Y,EAAuB,GAAOjP,EAAc,KAAM,C9B3zCxH,IAAArW,E8B4zCHE,EAAQ,IAAI,8BAA+B,CAAC6gB,EAAa1S,CAAO,CAAC,EACjE,MAAMjH,EAAWxI,EAAa,EAE9B,IAAIkN,EAAWiV,GAAA,YAAAA,EAAa,cAa5B,GAVIjV,IAAa7M,EAAW,cAC1B6M,EAAW7M,EAAW,QACb6M,IAAa7M,EAAW,aACjC6M,EAAW7M,EAAW,KACb6M,IAAa7M,EAAW,oBACjC6M,EAAW7M,EAAW,YAKpB6M,IAAa7M,EAAW,UAC1BoP,EAAUrH,EAAM,OAAO,WAAW,GAAG,iBACjC,CAACqH,GAAS,CACZnO,EAAQ,KAAK,6BAA6B8G,EAAM,IAAI,GAAG,EACvD,MACR,CAKI,MAAMue,EAAc,CAAE,GAAG/Y,CAAQ,EACjC,OAAO+Y,EAAY,QACnB,OAAOA,EAAY,SACnB,OAAOA,EAAY,KACnB,OAAOA,EAAY,SAEnB,MAAM5S,EAAc,CAClB,KAAM,cACN,YAAa0D,GAAe,QAAQ,MAAM,SAAU,EACpD,QAASrP,EAAM,QAAUA,EAAM,MAAM,GAAKA,EAAM,GAChD,aAAcA,EAAM,QACpB,YAAaA,EAAM,SAAUhH,EAAAgH,EAAM,SAAN,YAAAhH,EAAc,GAAKgH,EAAM,GACtD,SAAA8E,EACA,QAAAuC,EACA,WAAY,KACZ,kBAAmB,CACjB,GAAGkX,EACH,aAAc,KAAK,KAAK,IACzB,EACD,eAAgB,GAChB,eAAgB,MAAM,KAAK,KAAK,KAAK,OAAO,EAAE,IAAIlW,GAAKA,EAAE,EAAE,EAC3D,gBAAiB/H,EAAa,IAAIF,EAAS,kBAAkB,GAAG,CACjE,EAGDlH,EAAQ,IAAI,oDAAqD,EAAE,EACnEkB,GAAW,YAAY,oBAAqB8Q,EAAM,GAAIS,CAAW,EAE5D2S,GACHhU,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,4CAA6C,CAC/F,OAAQY,EAAM,KACd,MAAOlL,EAAM,IACrB,CAAO,CAAC,CAER,CAQE,8BAA8BkK,EAAoBoM,EAAgBjP,EAAS,C9Bh4CtE,IAAArO,EAAAwB,EAAAqI,EAAA4C,EAAAC,E8Bi4CHxM,EAAQ,IAAI,+BAA+B,EAE3C,MAAM8Q,EAAmB,CAAE,EAC3B,SAAW,CAAE,MAAAhK,EAAO,MAAAkL,CAAK,IAAMhB,EACxBF,EAAiBkB,EAAM,EAAE,IAC5BlB,EAAiBkB,EAAM,EAAE,EAAI,CAC3B,OAAQA,EACR,OAAQ,CAAA,CACT,GAEHlB,EAAiBkB,EAAM,EAAE,EAAE,OAAO,KAAKlL,CAAK,EAM9C,SAAW,CAACuE,EAAK9B,CAAM,IAAK,OAAO,QAAQtK,EAAO,oBAAoB,EACpE,GAAIsK,EAAO,OAAS6T,EAElB,MAIJ,MAAMkI,EAAclI,EACpB,IAAIrM,EAAe,KAAK,KAAK,SAAS,yBAAyBuU,CAAW,EAAE,GAAKA,EAEjF,GAAInX,EAAS,CACX,MAAMoX,EAAwBD,EAAY,YAAa,EACvD,GAAIC,IAA0BxmB,EAAW,MACvCgS,EAAe,GAAGA,CAAY,OAAKjR,EAAA,OAAO,MAAM,OAAOqO,CAAO,IAA3B,YAAArO,EAA8B,QAASqO,CAAO,YACxEoX,IAA0BxmB,EAAW,aAC9CgS,EAAe,GAAGA,CAAY,OAAKzP,EAAA,OAAO,MAAM,UAAU6M,CAAO,IAA9B,YAAA7M,EAAiC,QAAS6M,CAAO,YAC3EoX,IAA0BxmB,EAAW,cAC9CgS,EAAe,GAAGA,CAAY,OAAKpH,EAAA,OAAO,MAAM,UAAUwE,CAAO,IAA9B,YAAAxE,EAAiC,QAASwE,CAAO,YAC3EoX,IAA0BxmB,EAAW,KAAM,CACpD,MAAMsP,GAAW7B,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuC2B,GACxD,GAAIE,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAMC,EAAW,MAAM,UAAU,MAAM,YAAYD,EAAS,GAAI,CAAE,UAAW,GAAM,EACnF0C,EAAe,GAAGA,CAAY,MAAKzC,GAAA,YAAAA,EAAU,OAAQH,CAAO,GACtE,MACU4C,EAAe,GAAGA,CAAY,KAAK5C,CAAO,GAEpD,MAAiBoX,IAA0BxmB,EAAW,SAC9CgS,EAAe,GAAGA,CAAY,KAAK5C,CAAO,GAElD,CAGIiD,EAAoB,uBAAuBN,EAAkBC,CAAY,CAC7E,CASE,MAAM,eAAeO,EAAQuP,EAAa1S,EAASkF,EAAmB,CACpErT,EAAQ,IAAI,iBAAkB,CAACsR,EAAQuP,EAAa1S,EAASkF,CAAiB,CAAC,EAE/E,UAAWvM,KAASwK,EAClB,MAAM,KAAK,cAAcxK,EAAO+Z,EAAa1S,EAASkF,CAAiB,EACvE,MAAMrR,GAAM,GAAG,CAErB,CASE,MAAM,yBAAyBgV,EAAc6J,EAAa1S,EAASkF,EAAmB,C9B38CjF,IAAAvT,EAAAwB,E8B48CHtB,EAAQ,IAAI,2BAA4B,CAACgX,EAAc6J,EAAa1S,EAASkF,CAAiB,CAAC,EAE/F,UAAW/I,KAAS0M,EAAc,CAChC,GAAI1M,EAAM,QAAS,CACjB,MAAM8E,IAAQtP,EAAA,OAAO,SAAP,YAAAA,EAAe,IAAIwK,EAAM,aAAYhJ,EAAA,KAAK,OAAO,SAAZ,YAAAA,EAAoB,OAAO,IAAIgJ,EAAM,UACpF8E,EACF,MAAM,KAAK,sBAAsB9E,EAAM,MAAO8E,EAAOyR,EAAa1S,EAASkF,CAAiB,EAE5F,MAAM,KAAK,cAAc/I,EAAM,MAAOuW,EAAa1S,EAASkF,CAAiB,CAEvF,MACQ,MAAM,KAAK,cAAc/I,EAAM,MAAOuW,EAAa1S,EAASkF,CAAiB,EAE/E,MAAMrR,GAAM,GAAG,CACrB,CACA,CAUE,MAAM,sBAAsB8E,EAAOsI,EAAOyR,EAAa1S,EAASkF,EAAmB,CACjFrT,EAAQ,IAAI,wBAAyB,CAAC8G,EAAM,KAAMsI,EAAM,KAAMyR,EAAa1S,EAASkF,CAAiB,CAAC,EAEtG,MAAMmS,EAAgBpW,EAAM,WACvBoW,GACHpW,EAAM,QAAQ,CAAE,cAAe,EAAK,CAAE,EAGxC,GAAI,CACF,MAAM,KAAK,cAActI,EAAO+Z,EAAa1S,EAASkF,CAAiB,CAC7E,QAAc,CAEHmS,GACHpW,EAAM,QAAS,CAEvB,CACA,CASE,MAAM,cAActI,EAAO+Z,EAAa1S,EAASkF,EAAmB,C9B9/C/D,IAAAvT,EAAAwB,EAAAqI,EAAA4C,E8B+/CHvM,EAAQ,IAAI,gBAAiB,CAAC8G,EAAO+Z,EAAa1S,EAASkF,CAAiB,CAAC,EAC7E,GAAI,CACF,MAAMT,EAAiBiO,EAAY,YAAa,EAEhD,IAAI4E,EAAgBtX,EACpB,GAAIyE,IAAmB7T,EAAW,QAAS,CACzC,MAAMylB,EAAS1d,EAAM,OAAO,WAAW,GAIvC,GAHG0d,EAAO,MAAQ,IAChBiB,EAAgBjB,EAAO,kBAErB,CAACiB,EAAe,CAClBzlB,EAAQ,KAAK,mEAAoE,CAAC8G,EAAM,IAAI,CAAC,EAC7FsK,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,sCAAuC,CACzF,MAAOtK,EAAM,IACd,CAAA,GAAK,6BAA6BA,EAAM,IAAI,EAAE,EAC/C,MACV,CACA,CAEM,MAAM0L,IAAc7I,GAAArI,GAAAxB,EAAAuT,EAAkB,QAAlB,YAAAvT,EAA0B,KAA1B,YAAAwB,EAA8B,OAA9B,YAAAqI,EAAoC,cAAe,GACjE8I,EAAc,CAClB,QAASgT,EACT,YAAapS,EAAkB,YAC/B,OAAQ,CACN,GAAGA,EACH,YAAab,EACb,SAAUa,EAAkB,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC5E,UAAWA,EAAkB,WAAa,GAC1C,aAAcA,EAAkB,cAAgB,GAChD,OAAQA,EAAkB,MACpC,CACO,EAEK9N,EAAe,CACnB,UAAW,CAAC8N,EAAkB,aAAe,CAACA,EAAkB,eAChE,cAAe,EAChB,EAEKN,EAAgB,CACpB,SAAUM,EAAkB,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC5E,OAAQA,EAAkB,cAAgB,GAC1C,cAAe,EAChB,EAEKX,IAAanG,EAAA8G,EAAkB,QAAlB,YAAA9G,EAA0B,KAAM,CAAE,EAE/C3L,EAAUwV,EAAaxD,CAAc,EACvChS,EACF,MAAMA,EAAQkG,EAAO2L,EAAaC,EAAYnN,EAAcwN,CAAa,EAEzE3B,EAAoB,OAAO,OAAQ,sBAAsByP,CAAW,EAAE,CAEzE,OAAQ5f,EAAO,CACdjB,EAAQ,MAAM,mBAAoB,CAACiB,CAAK,CAAC,EACzCmQ,EAAoB,OAAO,QAAS,KAAK,KAAK,OAAO,sCAAuC,CAC1F,MAAOtK,EAAM,IACrB,CAAO,CAAC,CACR,CACA,CAKE,MAAM,SAASjH,EAAS,CAGtB,GAFAG,EAAQ,IAAI,WAAW,CAACH,CAAO,CAAC,EAE7B,EAAC,KAAK,QAET,IAAI,KAAK,kBAAoB,KAAK,QAAQ,gBAAkB,SAAS,KAAM,CACzE,MAAM0e,EAAoB,SAAS,cAAc,qBAAqB,EAClEA,GACFA,EAAkB,aAAa,KAAK,QAASA,EAAkB,UAAU,EAE3E,KAAK,QAAQ,MAAM,SAAW,GAC9B,KAAK,QAAQ,MAAM,MAAQ,GAC3B,KAAK,QAAQ,MAAM,IAAM,GACzB,KAAK,QAAQ,MAAM,KAAO,GAC1B,KAAK,QAAQ,MAAM,MAAQ,GAC3B,KAAK,QAAQ,MAAM,OAAS,GAC5B,KAAK,QAAQ,UAAU,OAAO,iBAAiB,CACrD,CAEI,MAAM,MAAM,SAAS1e,CAAO,EAE5B,KAAK,eAAe,MAAO,EAC3B,KAAK,oBAAsB,KAC3B,SAAS,oBAAoB,QAAS,KAAK,gBAAiB,EAAI,EAE5D,KAAK,oBACP,MAAM,IAAIX,EAAW,cAAe,KAAK,iBAAiB,EAC1D,KAAK,kBAAoB,MAGvB,KAAK,kBACP,MAAM,IAAIA,EAAW,YAAa,KAAK,eAAe,EACtD,KAAK,gBAAkB,MAGrB,KAAK,kBACP,MAAM,IAAIA,EAAW,YAAa,KAAK,eAAe,EACtD,KAAK,gBAAkB,MAGrB,KAAK,kBACP,MAAM,IAAIA,EAAW,YAAa,KAAK,eAAe,EACtD,KAAK,gBAAkB,MAGrB,KAAK,sBACP,aAAa,KAAK,mBAAmB,EACrC,KAAK,oBAAsB,MAGzB,KAAK,sBACP,aAAa,KAAK,mBAAmB,EACrC,KAAK,oBAAsB,MAGzB,KAAK,qBACP,aAAa,KAAK,kBAAkB,EACpC,KAAK,mBAAqB,MAGxBgK,EAAAiX,EAAiBH,KAAc,MACjC/W,GAAAkX,EAAiBH,EAAY,MAEnC,CAKE,YAAYhD,EAAS,GAAI,CACvB,OAAAhd,EAAQ,IAAI,aAAa,EAElB,IACX,CAOE,OAAO,QAAS,CACdA,EAAQ,IAAI,yBAAyB,EAGf,SAAS,iBAAiB,mBAAmB,EACrD,QAAQud,GAAQ,CAC5Bvd,EAAQ,IAAI,gCAAgC,EAC5Cud,EAAK,OAAQ,CACnB,CAAK,EAEIrU,EAAA,KAAK8W,GAIJ9W,EAAA,KAAK8W,GAAU,SACjB9W,EAAA,KAAK8W,GAAU,MAAO,GAEtB9W,EAAA,KAAK8W,GAAU,8BAA+B,EAC9C9W,EAAA,KAAK8W,GAAU,OAAO,EAAI,IAP5B/W,GAAA,KAAK+W,EAAY,IAAIG,GACrBjX,EAAA,KAAK8W,GAAU,OAAO,EAAI,EAShC,CAOE,OAAO,cAAc0F,EAAY,GAAO,CACtC,GAAI,GAACxc,EAAA,KAAK8W,IAAa,CAAC9W,EAAA,KAAK8W,GAAU,UAIvC,IAAI0F,EAAW,CACb,KAAK,gBAAiB,EACtB,MACN,CAEQxc,EAAA,KAAK+W,KACP,aAAa/W,EAAA,KAAK+W,GAAqB,EAGzChX,GAAA,KAAKgX,GAAwB,WAAW,IAAM,CAC5C,KAAK,gBAAiB,EACtBhX,GAAA,KAAKgX,GAAwB,KACnC,EAAO/W,EAAA,KAAKgX,GAAuB,GACnC,CAOE,OAAO,iBAAkB,CACnB,CAAChX,EAAA,KAAK8W,IAAa,CAAC9W,EAAA,KAAK8W,GAAU,WAIvChgB,EAAQ,IAAI,oDAAoD,EAChEkJ,EAAA,KAAK8W,GAAU,OAAQ,EACvB5Y,EAAa,kBAAmB,EAChC8B,EAAA,KAAK8W,GAAU,QAAQ,UAAU,IAAI,SAAW5Y,EAAa,eAAe,EAChF,CAOE,OAAO,qBAAsB,CAC3BpH,EAAQ,IAAI,sCAAsC,EAClD,MAAMkH,EAAWxI,EAAa,EACX0I,EAAa,IAAIF,EAAS,eAAe,GAAG,GAE7C,KAAK,KAAK,OACJ,SAAS,iBAAiB,mBAAmB,EACrD,QAAQqW,GAAQ,CAC5Bvd,EAAQ,IAAI,gCAAgC,EAC5Cud,EAAK,OAAQ,CACrB,CAAO,EAEIrU,EAAA,KAAK8W,GAIE9W,EAAA,KAAK8W,GAAU,WACzB9W,EAAA,KAAK8W,GAAU,8BAA+B,EAC9C9W,EAAA,KAAK8W,GAAU,OAAO,EAAI,EAC1B9W,EAAA,KAAK8W,GAAU,SAAW,KAN1B/W,GAAA,KAAK+W,EAAY,IAAIG,GACrBjX,EAAA,KAAK8W,GAAU,OAAO,EAAI,EAC1B9W,EAAA,KAAK8W,GAAU,SAAW,IAOlC,CACA,EAzsDSA,EAAA,YAMAC,GAAA,YAMAC,GAAA,YAZPhY,GALmBiY,EAKZH,EAAY,MAMnB9X,GAXmBiY,EAWZF,GAAwB,MAM/B/X,GAjBmBiY,EAiBZD,GAA0B,KAoBjCngB,EArCmBogB,EAqCZ,kBAAkB,CACvB,GAAI,mBACJ,QAAS,CAAC,mBAAoB,eAAe,EAC7C,IAAK,MACL,OAAQ,CACN,MAAO,GACP,UAAW,GACX,YAAa,EACd,EACD,SAAU,CAAE,EACZ,SAAU,CACR,CACE,aAAc,aACtB,CACA,CACG,GAEDpgB,EAtDmBogB,EAsDZ,QAAQ,CACb,KAAM,CACJ,SAAU,WAAWlhB,EAAO,EAAE,+BACpC,CACA,GA1De,IAAM8O,EAANoS,EClBR,MAAMwF,EAAN,MAAMA,CAAa,CAOxB,OAAO,kBAAmB,CACxB,MAAMze,EAAWxI,EAAa,EAC9B,IAAIknB,EAAYD,EAAa,IAAIze,EAAS,UAAU,GAAG,EACpD0e,IAAW,OAAO,MAAM,MAAQ,IAGd,OAAO,QAAQ1e,CAAQ,EAC/B,QAASoD,GAAU,CAC9B,MAAMub,EAAUvb,EAAM,CAAC,EAEjBwb,EAAa,CACjB,KAAMD,EAAQ,MACd,KAAMA,EAAQ,KACd,QAASA,EAAQ,QACjB,KAAMA,EAAQ,SACd,MAAOA,EAAQ,MACf,OAAQA,EAAQ,OAChB,eAAgBA,EAAQ,gBAAkB,GAC1C,WAAYA,EAAQ,QAAUpnB,EAAc,MAC5C,SAAUiC,GAASilB,EAAa,MAAME,EAAQ,IAAKnlB,CAAK,CAChE,EACSmlB,EAAQ,UACTC,EAAW,QAAUD,EAAQ,SAG/B7lB,EAAQ,IAAI,mBAAoB,CAAC8lB,EAAYA,EAAW,KAAK,EAAG,EAAI,EAEpE,GAAI,CACF,KAAK,SAAS,SAASnnB,EAAWknB,EAAQ,IAAKC,CAAU,CAC1D,OAAQ7kB,EAAO,CACdjB,EAAQ,IAAI,WAAW6lB,EAAQ,GAAG,gCAAiC5kB,CAAK,CAChF,CACA,CAAK,CAEL,CAME,OAAO,sBAAuB,C/BxDzB,IAAAnB,E+ByDH,MAAMimB,EAAe,OAAO,QAAQlc,GAAe,CAAE,EAErD,SAAW,CAACG,EAASgc,CAAQ,IAAKD,EAChC,GAAKC,EAAS,cAAclmB,EAAA,KAAK,OAAL,MAAAA,EAAW,OAAS,CAACkmB,EAAS,WAAY,CACpE,MAAMC,EAAU,CACd,KAAMD,EAAS,IACf,MAAOA,EAAS,MAChB,KAAMA,EAAS,KACf,KAAMA,EAAS,KACf,KAAMA,EAAS,SACf,WAAYA,EAAS,UACtB,EACD,KAAK,SAAS,aAAarnB,EAAWqnB,EAAS,IAAKC,CAAO,CACnE,CAGIN,EAAa,kBAAmB,CACpC,CAEE,OAAO,mBAAmB,C/B5ErB,IAAA7lB,E+B8EH,MAAMomB,EAAkB,KAAK,SAAS,IAAI,OAAO,UAAU,EAC3DP,EAAa,kBAAkB7lB,EAAAomB,GAAA,YAAAA,EAAiB,cAAjB,YAAApmB,EAA8B,YAAa,OAC1EE,EAAQ,IAAI,iCAAkC,CAACkmB,EAAiBP,EAAa,eAAe,CAAC,CACjG,CAQE,OAAO,IAAIQ,EAAaxkB,EAAWhD,EAAU,CAC3C,GAAG,CAACwnB,EAAc,OAAO,KAEzB,IAAIN,EAAU,GAEd,GAAI,CACF,GAAGlkB,IAAahD,EACdknB,EAAU,KAAK,SAAS,IAAIlkB,EAAYwkB,CAAW,MAChD,CAEH,IAAIC,EADW,KAAK,SAAS,QAAQ,IAAI,QAAQ,EACpB,GAAGzkB,CAAU,IAAIwkB,CAAW,EAAE,EAExDC,IAAkB,SAEnBA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGzkB,CAAU,IAAIwkB,CAAW,EAAE,EACjEN,EAAUO,GAAA,YAAAA,EAAiB,MAErC,CACK,MAAe,CAEd,OAAApmB,EAAQ,IAAI,WAAW2B,CAAU,IAAIwkB,CAAW,6BAA6B,EACtE,EACb,CAEI,OAAON,CACX,CASE,OAAO,IAAIM,EAAaE,EAAU1kB,EAAWhD,EAAU,CACrD,GAAG,CAACwnB,EAAc,MAAO,GAEzB,IAAIC,EAAkB,KAAK,SAAS,QAAQ,IAAI,QAAQ,EAAE,GAAGzkB,CAAU,IAAIwkB,CAAW,EAAE,EAEpFC,IAEFA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGzkB,CAAU,IAAIwkB,CAAW,EAAE,EACjEnmB,EAAQ,IAAI,oCAAqC,CAAComB,CAAe,CAAC,GAGpE,GAAG,CACD,KAAK,SAAS,IAAIzkB,EAAYwkB,EAAaE,CAAQ,EACnDrmB,EAAQ,IAAI,6BAA8B,CAAC2B,EAAYwkB,EAAaE,CAAQ,CAAC,CAC9E,OAAMtP,EAAE,CACP/W,EAAQ,MAAM,2BAA4B,CAAC+W,CAAC,CAAC,CACnD,CAEI,MAAO,EACX,CAEE,OAAO,MAAMoP,EAAaE,EAAS,CACjC,MAAMnf,EAAWxI,EAAa,EAC9B,OAAOynB,EAAW,CAChB,KAAKjf,EAAS,oBAAoB,IAChCye,EAAa,yBAAyBU,CAAQ,EAC9C,MACF,KAAKnf,EAAS,YAAY,IACxBye,EAAa,iBAAiBU,CAAQ,EACtC,KAGR,CACA,CAEE,OAAO,yBAAyBA,EAAS,CACvC,MAAMC,EAAe,SAAS,cAAc,kCAAkC,EAC1EA,IAEDD,EACDC,EAAa,UAAU,IAAI,QAAQ,EAGnCA,EAAa,UAAU,OAAO,QAAQ,EAG5C,CAEE,OAAO,iBAAiBD,EAAS,CAC/B,MAAMnf,EAAWxI,EAAa,EACxB6nB,EAAgBF,GAAYV,EAAa,IAAIze,EAAS,YAAY,GAAG,EAE3ElH,EAAQ,IAAI,mBAAoB,CAACumB,CAAa,CAAC,EAE/CxY,EAAiB,cAAe,CACpC,CACA,EAzKEhO,EADW4lB,EACJ,kBAAkB,QADpB,IAAMve,EAANue,ECKA,MAAMa,EAAgB,CAS3B,OAAO,YAAa,CAClBxmB,EAAQ,IAAI,4BAA4B,EACnC,KAAK,KAAK,MAEf,KAAK,cAAe,CACxB,CAKE,OAAO,eAAgB,CACrBA,EAAQ,IAAI,+BAA+B,EAC3C,KAAK,cAAcX,EAAY,uBAAwB,KAAK,eAAe,KAAK,KAAMN,EAAW,OAAO,CAAC,EACzG,KAAK,cAAcM,EAAY,sBAAuB,KAAK,eAAe,KAAK,KAAMN,EAAW,IAAI,CAAC,EACrG,KAAK,cAAcM,EAAY,kBAAmB,KAAK,eAAe,KAAK,KAAMN,EAAW,KAAK,CAAC,EAClG,KAAK,cAAcM,EAAY,iBAAkB,KAAK,eAAe,KAAK,KAAMN,EAAW,IAAI,CAAC,EAChG,KAAK,cAAcM,EAAY,mBAAoB,KAAK,eAAe,KAAK,KAAMN,EAAW,MAAM,CAAC,EACpG,KAAK,cAAcM,EAAY,mBAAoB,KAAK,eAAe,KAAK,KAAMN,EAAW,MAAM,CAAC,EACpG,KAAK,cAAcM,EAAY,uBAAwB,KAAK,eAAe,KAAK,KAAMN,EAAW,UAAU,CAAC,EAC5G,KAAK,cAAcM,EAAY,oBAAqB,KAAK,eAAe,KAAK,KAAMN,EAAW,OAAO,CAAC,EAEtG,KAAK,cAAcM,EAAY,oBAAqB,KAAK,yBAAyB,KAAK,KAAMN,EAAW,UAAU,CAAC,EACnH,KAAK,cAAcM,EAAY,2BAA4B,KAAK,yBAAyB,KAAK,KAAMN,EAAW,UAAU,CAAC,EAC1H,KAAK,cAAcM,EAAY,gBAAiB,KAAK,sBAAsB,KAAK,KAAMN,EAAW,UAAU,CAAC,CAChH,CAOE,OAAO,cAAc0nB,EAAU7lB,EAAS,CACtCZ,EAAQ,IAAI,+BAA+B,EAC3C,MAAM0mB,EAAS,MAAM,GAAGD,EAAU7lB,CAAO,EACzC,KAAK,gBAAgB,IAAI,CAAE,SAAA6lB,EAAU,OAAAC,CAAM,CAAE,CACjD,CAKE,OAAO,iBAAkB,CACvB1mB,EAAQ,IAAI,iCAAiC,EAC7C,SAAW,CAAE,SAAAymB,EAAU,OAAAC,CAAM,IAAM,KAAK,gBACtC,MAAM,IAAID,EAAUC,CAAM,EAE5B,KAAK,gBAAgB,MAAO,CAChC,CASE,OAAO,yBAAyB9a,EAAU9E,EAAOxG,EAAM,CAGzD,CAUE,OAAO,eAAesL,EAAUU,EAAQuJ,EAAQhF,EAAS,ChC3FpD,IAAA/Q,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EgC8FH,GAFA1M,EAAQ,IAAI,oBAAqB,CAAC4L,EAAUU,EAAQuJ,EAAQhF,CAAO,CAAC,EAEhE,CAAC,KAAK,KAAK,MAAQvE,EAAO,gBAAkB,GAAQ,OAClC5K,EAAY,WAAW/C,EAAW,UAAU,EAElE,MAAMgoB,GAAYra,GAAA,YAAAA,EAAQ,aAAauJ,GAAA,YAAAA,EAAQ,aAAahF,GAAA,YAAAA,EAAS,YAAa,CAAE,EAC9E+V,EAAmBD,EAAU,SAAS,kBAAkB,GAAKA,EAAU,SAAS,YAAY,EAElG,GAAG/a,IAAa7M,EAAW,OAAO,CAChC,MAAM8nB,GAAcvlB,GAAAxB,EAAAwM,EAAO,UAAP,YAAAxM,EAAgB,OAAhB,YAAAwB,EAAsB,QAAQ3C,EAAW,oBAE7D,GADAqB,EAAQ,IAAI,kCAAmC,EAAC2J,EAAA2C,EAAO,UAAP,YAAA3C,EAAgB,KAAMkd,CAAW,CAAC,EAC/EA,EAAY,CACb7mB,EAAQ,IAAI,6DAA8D,CAAC6mB,CAAW,CAAC,EACvF,MACR,CACA,CAkBI,GALID,GAAoBhb,IAAa7M,EAAW,UAC9CiB,EAAQ,IAAI,oEAAqE,CAAC2mB,CAAS,CAAC,EAC5F/a,EAAW7M,EAAW,YAGnBuN,GAAA,MAAAA,EAAQ,eAAiBA,EAAO,cAAc,IAC9CuJ,GAAA,MAAAA,EAAQ,eAAiBhF,GAAA,MAAAA,EAAS,cAAe,CACpD7Q,EAAQ,IAAI,wDAAyD,CAACsM,EAAQuJ,EAAQhF,CAAO,CAAC,EAC9F,MACN,CAEI,IAAI/J,EACJ,GAAI8E,IAAa7M,EAAW,YAAcuN,aAAkB,OAG1D,GAFAxF,EAAQwF,EACRtM,EAAQ,IAAI,8BAA+B,CAACsM,EAAQuJ,EAAQhF,CAAO,CAAC,GAChEgF,GAAA,YAAAA,EAAQ,iBAAkB,KAAShF,GAAA,YAAAA,EAAS,iBAAkB,GAChE,YAEOjF,IAAa7M,EAAW,QACjC+H,IAAQyF,EAAAsJ,GAAA,YAAAA,EAAQ,UAAR,YAAAtJ,EAAiB,SAASsJ,GAAA,YAAAA,EAAQ,WAAWA,GAAA,YAAAA,EAAQ,OACrDjK,IAAa7M,EAAW,QAAU6M,IAAa7M,EAAW,OAClE+H,GAAQ0F,EAAAF,EAAO,UAAP,YAAAE,EAAgB,MAExB1F,IAAQ2F,EAAAH,EAAO,UAAP,YAAAG,EAAgB,QAASH,EAAO,SAAWA,EAAO,MAG5D,MAAMpF,EAAWxI,EAAa,EAI9B,GAAG,CAH6B0I,EAAa,IAAIF,EAAS,wBAAwB,GAAG,GAInF,CAACJ,GAASA,EAAM,eAAiB,QACjC,OAGF,MAAMkL,EAAQtQ,EAAY,cAAcoF,CAAK,EAG7C,GAFA9G,EAAQ,IAAI,6BAA8B,CAACgS,CAAK,CAAC,EAE7C,CAACA,GAAS,CAACA,EAAM,QAAUA,EAAM,KAAO,KAAK,KAAK,GAAI,CACxDhS,EAAQ,IAAI,qDAAsD,CAACgS,GAAA,YAAAA,EAAO,KAAMA,GAAA,YAAAA,EAAO,MAAM,CAAC,EAC9F,MACN,MACM1F,EAAO,cAAgB,GAGrBV,IAAa7M,EAAW,SAC1B8R,EAAU,CACR,GAAGA,EACH,SAAU,MAAM,gBAAgB,MACjC,GAGH,MAAMjE,EAAeN,EAAO,cAAgB,MAAQA,EAAO,cAAgB,OAS3E,IARGI,EAAAJ,EAAO,cAAP,MAAAI,EAAoB,cACrBJ,EAAO,YAAc,CACnB,GAAGA,EAAO,YACV,QAAS,CACP,UAAW,EACrB,CACA,GAEOM,GAAgB,KAAK,KAAK,KAC3B,OAAA5M,EAAQ,IAAI,gCAAiC,CAAC4M,CAAY,CAAC,EAC3D,KAAK,oBAAoB9F,EAAOkL,EAAOpG,EAAUU,EAAQuJ,EAAQhF,CAAO,EACjE,GAGT,GAAIvE,EAAO,cAAc,GAAO,CAC9BtM,EAAQ,IAAI,yCAA0C,CAAC6V,EAAO,UAAWvJ,EAAO,WAAW,CAAC,EAC5F,MACN,CAEI,OAAAtM,EAAQ,IAAI,wCAAyC,CAACsM,EAAQuE,CAAO,CAAC,EACtE,KAAK,oBAAoB/J,EAAOkL,EAAOpG,EAAUU,EAAQuJ,EAAQhF,CAAO,EAEjE,EACX,CAEE,OAAO,sBAAsB7F,EAAEzH,EAAEwW,EAAG,CAGtC,CAOE,aAAa,2BAA2BjT,EAAO,CAC7C,MAAI,CAAC,KAAK,QAEJ,CADgB,MAAM2S,GAA2B,EAC5B,IAGF,MAAMC,GAA0B,CAAC5S,EAAM,EAAE,EAAG,IAAI,GACjD,OAAS,CACrC,CAOE,OAAO,gBAAgB8E,EAAU,CAC/B,MAAMmB,EAAqBnB,GAAA,YAAAA,EAAU,cAErC,MAAI,CAAC7M,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASgO,CAAkB,EAC1D2P,GACE3P,IAAuBhO,EAAW,QACpC0d,GACE1P,IAAuBhO,EAAW,OACpCme,GACEnQ,IAAuBhO,EAAW,OACpC6d,GAEAtB,EAEb,CAUE,OAAO,0BAA0B1P,EAAUU,EAAQuJ,EAAQ/O,EAAO,ChCvP7D,IAAAhH,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAiP,EAAAK,EAAAC,EgCwPH,MAAMnP,EAAqBnB,GAAA,YAAAA,EAAU,cACrC,IAAIuC,EAAU,KACd,MAAMuE,EAAa,CACjB,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACV,CAAA,CACF,EAED,OAAQ3F,EAAkB,CACxB,KAAKhO,EAAW,MACd2T,EAAW,MAAQpG,EAAO,MAC1BoG,EAAW,QAAUpG,EAAO,WAAWxM,EAAAwM,EAAO,UAAP,YAAAxM,EAAgB,SACvDqO,EAAUuE,EAAW,MACrB,MAEF,KAAK3T,EAAW,KACd2T,EAAW,KAAOpG,EAAO,KACzBoG,EAAW,QAAUpG,EAAO,WAAWhL,EAAAgL,EAAO,UAAP,YAAAhL,EAAgB,SACvD6M,EAAUuE,EAAW,KACrB,MAEF,KAAK3T,EAAW,QAChB,KAAKA,EAAW,KACd2T,EAAW,QAAUpG,EAAO,WAAW3C,EAAA2C,EAAO,UAAP,YAAA3C,EAAgB,SACvDwE,EAAUuE,EAAW,QACjBA,EAAW,UAAY,OAASpG,EAAO,cAAgB,SACzDV,EAAW7M,EAAW,eAExB,MAEF,KAAKA,EAAW,cACd2T,EAAW,QAAU,MACrBvE,EAAU,MACV,MAEF,KAAKpP,EAAW,WAChB,KAAKA,EAAW,kBACdoP,IAAU3B,GAAAD,EAAAzF,EAAM,OAAO,aAAb,YAAAyF,EAAyB,OAAzB,YAAAC,EAA+B,UAAW,MACpD,MAEF,KAAKzN,EAAW,QACd2T,EAAW,aAAe,OAAOpG,GAAW,SAC1CA,EAAUA,EAAO,gBAAgBG,EAAAH,EAAO,UAAP,YAAAG,EAAgB,cACnD0B,EAAUuE,EAAW,aACrB,MAEF,KAAK3T,EAAW,OACV8W,GAAA,MAAAA,EAAQ,UACVnD,EAAW,WAAamD,EAAO,QAAQ,WACvCnD,EAAW,WAAamD,EAAO,QAAQ,WACvCnD,EAAW,QAAUmD,EAAO,QAAQ,SAEtC1H,GAAUxB,GAAAD,EAAAJ,EAAO,UAAP,YAAAI,EAAgB,OAAhB,YAAAC,EAAsB,GAChC,MAEF,KAAK5N,EAAW,OACd2T,EAAW,MAAOkJ,EAAAtP,EAAO,UAAP,YAAAsP,EAAgB,KAClClJ,EAAW,QAAUpG,EAAO,QAC5BoG,EAAW,SAAWpG,EAAO,UAAY,CAAE,EAC3C6B,GAAU+N,GAAAD,EAAA3P,EAAO,UAAP,YAAA2P,EAAgB,OAAhB,YAAAC,EAAsB,GAChC,KACR,CAEI,MAAO,CAAE,QAAA/N,EAAS,WAAAuE,CAAY,CAClC,CAcE,aAAa,iBAAiBI,EAAahM,EAAO8E,EAAUuC,EAASkP,EAAgBzP,EAAqBtB,EAAQuJ,EAAQ,CACxH,MAAM9I,EAAqBnB,GAAA,YAAAA,EAAU,cAGrC,GADA5L,EAAQ,IAAI,mBAAoB,CAAC8G,EAAO8E,EAAUuC,EAAS7B,EAAQuJ,CAAM,CAAC,EACtEwH,EACF,MAAO,CACL,YAAa,GACb,UAAW,GACX,aAAc,GACd,YAAa,GACb,SAAU,KAAK,SAAS,IAAI,OAAQ,UAAU,CAC/C,EAGH,GAAI,CAACvK,EAAY,kBACf,MAAA9S,EAAQ,MAAM,0CAA2C,CAAC8S,EAAaA,EAAY,IAAI,CAAC,EAClF,IAAI,MAAM,eAAeA,EAAY,IAAI,yCAAyC,EAG1F,MAAME,EAAgB,CACpB,eAAgB,GAChB,YAAapF,CACd,EAED,OAAIb,IAAuBhO,EAAW,QAAUgO,IAAuBhO,EAAW,OACzE,MAAM+T,EAAY,kBAAkB,CAAChM,CAAK,EAAGiG,EAAoBoB,EAAS6E,EAAe1G,EAAQuJ,CAAM,EAEvG,MAAM/C,EAAY,kBAAkB,CAAChM,CAAK,EAAGiG,EAAoBoB,EAAS6E,CAAa,CAEpG,CAWE,aAAa,oBAAoBlM,EAAOkL,EAAOpG,EAAUU,EAAQuJ,EAAQhF,EAAS,CAChF7Q,EAAQ,IAAI,+BAAgC,CAAC4L,EAAUU,CAAM,CAAC,EAC9D,MAAMpF,EAAWxI,EAAa,EACxBkP,EAAsBxG,EAAa,IAAIF,EAAS,oBAAoB,GAAG,EACvEmW,EAAiBjW,EAAa,IAAIF,EAAS,eAAe,GAAG,EAEnE,GAAI,CAGF,IAF2B0E,GAAA,YAAAA,EAAU,iBAEV7M,EAAW,YAEhC,CADmB,MAAM,KAAK,2BAA2B+H,CAAK,EAC7C,OAGvB,MAAMgM,EAAc,KAAK,gBAAgBlH,CAAQ,EAC3C,CAAE,QAAAuC,EAAS,WAAAuE,CAAU,EAAK,KAAK,0BAA0B9G,EAAUU,EAAQuJ,EAAQ/O,CAAK,EAE9F9G,EAAQ,IAAI,mCAAoC,CAAC0S,EAAYvE,CAAO,CAAC,EAErE,MAAM/N,EAAS,MAAM,KAAK,iBACxB0S,EACAhM,EACA8E,EACAuC,EACAkP,EACAzP,EACAtB,EACAuJ,CACD,EAED,GAAI,CAACzV,EAAQ,CACXJ,EAAQ,IAAI,wCAAwC,EACpD,MACR,CAGM,GAAI,CAACI,EAAO,aAAe,CAACwN,EAAqB,CAC/C5N,EAAQ,IAAI,2DAA4D,CAAC4L,EAAUU,EAAQlM,CAAM,CAAC,EAClG,MAAM,KAAK,wBAAwB0G,EAAO8E,EAAUU,EAAQlM,CAAM,EAClE,MACR,CAKM,OAAOkM,EAAO,MACd,MAAMwa,EAAc,CAClB,GAAGxa,EACH,GAAGlM,EACH,MAAOA,EAAO,MACd,YAAa,KAAK,KAAK,KAEvB,GAAIwL,IAAa7M,EAAW,QAAU,CAAE,YAAa,EAAO,CAC7D,EAEDiB,EAAQ,IAAI,oDAAqD,CAAC4L,EAAUkb,CAAW,CAAC,EACxF,KAAK,iBAAiBhgB,EAAOkL,EAAOpG,EAAUkb,CAAW,CAE1D,OAAQ7lB,EAAO,CACdjB,EAAQ,MAAM,8CAA+C,CAACiB,CAAK,CAAC,CAG1E,CACA,CAUE,aAAa,wBAAwB6F,EAAO8E,EAAUkR,EAAgB4H,EAAc,ChCzb/E,IAAA5kB,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAiP,EAAAK,EAAAC,EAAAC,EAAAC,EAAA2K,EgC0bH/mB,EAAQ,IAAI,0CAA2C,CAAC8G,EAAO8E,EAAUkR,EAAgB4H,CAAY,CAAC,EACtG,MAAM3X,EAAqBnB,GAAA,YAAAA,EAAU,cAG/B8G,IAAa5S,EAAA4kB,EAAa,QAAb,YAAA5kB,EAAqB,KAAM,CAC5C,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACV,EACK0S,IAAclR,EAAAoR,EAAW,OAAX,YAAApR,EAAiB,cAAeojB,EAAa,aAAe,GAGhF,IAAIvW,EACJ,OAAQpB,EAAkB,CACxB,KAAKhO,EAAW,MACdoP,EAAU2O,EAAe,MACzB,MACF,KAAK/d,EAAW,KACdoP,EAAU2O,EAAe,KACzB,MACF,KAAK/d,EAAW,QAChB,KAAKA,EAAW,KACdoP,EAAU2O,EAAe,WAAWnT,EAAAmT,EAAe,UAAf,YAAAnT,EAAwB,SAC5D,MACF,KAAK5K,EAAW,QACdoP,EAAU2O,EAAe,aACzB,MACF,QACE3O,EAAU2O,EAAe,SAAWA,EAAe,OAASA,EAAe,MAAQA,EAAe,YAC1G,CAEI,MAAMrK,EAAc,CAClB,QAAStE,EACT,OAAQ,CACN,UAAWuW,EAAa,WAAa5H,EAAe,UACpD,aAAc4H,EAAa,cAAgB5H,EAAe,aAC1D,OAAQ4H,EAAa,QAAUA,EAAa,IAAM5H,EAAe,OACjE,SAAU4H,EAAa,UAAY5H,EAAe,SAClD,YAAatK,EACb,cAAe,GACf,QAASsK,EAAe,OAChC,CACK,EAED,GAAI/P,IAAuBhO,EAAW,OAAS,CAAC0T,EAAY,OAAO,QACjEA,EAAY,OAAO,UAAUjG,GAAAD,EAAAzF,EAAM,OAAO,SAAb,YAAAyF,EAAsBkG,EAAY,WAAlC,YAAAjG,EAA4C,YAC5CE,GAAAD,EAAA,OAAO,MAAM,SAAb,YAAAA,EAAsBgG,EAAY,WAAlC,YAAA/F,EAA4C,iBAChEK,IAAuBhO,EAAW,MAAQ,CAAC0T,EAAY,OAAO,QAAS,CAChF,MAAMsG,GAAapM,EAAA7F,EAAM,OAAO,QAAb,YAAA6F,EAAqB8F,EAAY,SACpDA,EAAY,OAAO,SAAUsG,GAAA,YAAAA,EAAY,YACZmD,GAAAD,GAAAL,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAK,EAAuCxJ,EAAY,WAAnD,YAAAyJ,EAA6D,UAC7D,KAC9B,MAAWnP,IAAuBhO,EAAW,SAAWgO,IAAuBhO,EAAW,OAAS,CAAC0T,EAAY,OAAO,UACtHA,EAAY,OAAO,QAAUA,EAAY,SAG3CzS,EAAQ,IAAI,wDAAyD,CAACyS,EAAaqK,EAAgB4H,CAAY,CAAC,EAEhH,MAAMnf,EAAe,CACnB,UAAW,GACX,cAAe,EAChB,EAEKwN,EAAgB,CACpB,SAAUN,EAAY,OAAO,SAC7B,OAAQ,GACR,cAAe,EAChB,EAED,GAAI,CACF,MAAMuU,EAAajoB,EAEb6B,EAAUwV,EAAarJ,CAAkB,EAE3CnM,IAEEmM,IAAuBhO,EAAW,QAAUgO,IAAuBhO,EAAW,QAAUgO,IAAuBhO,EAAW,QAC5H0T,EAAY,SAAU2J,GAAAD,EAAAW,EAAe,UAAf,YAAAX,EAAwB,OAAxB,YAAAC,EAA8B,GACpD3J,EAAY,YAAasU,EAAAjK,EAAe,UAAf,YAAAiK,EAAwB,IAGnD,MAAMnmB,EAAQkG,EAAO2L,EAAaC,EAAYnN,EAAcwN,CAAa,GAEzE/S,EAAQ,KAAK,mCAAmC+M,CAAkB,EAAE,CAEvE,OAAQ9L,EAAO,CACdjB,EAAQ,MAAM,0CAA2C,CAACiB,CAAK,CAAC,CACtE,CACA,CASE,aAAa,iBAAiB6F,EAAOkL,EAAOpG,EAAUU,EAAQ,ChC3hBzD,IAAAxM,EgC4hBHE,EAAQ,IAAI,mBAAoB,CAAC8G,EAAOkL,EAAOpG,EAAUU,CAAM,CAAC,EAChEtM,EAAQ,IAAI,kCAAmC,CAACsM,EAAO,KAAK,CAAC,EAC7D,MAAMpF,EAAWxI,EAAa,EACxB2e,EAAiBjW,EAAa,IAAIF,EAAS,eAAe,GAAG,EACnE,IAAI6F,EAAqBnB,GAAA,YAAAA,EAAU,cAG/BmB,IAAuBhO,EAAW,aACpCgO,EAAqBhO,EAAW,mBAIlC,IAAIoP,EAAU,KACV9B,EAAa,KACjB,OAAQU,EAAkB,CACxB,KAAKhO,EAAW,QAChB,KAAKA,EAAW,KACdoP,EAAU7B,EAAO,QACjB,MACF,KAAKvN,EAAW,MACdoP,EAAU7B,EAAO,MACjB,MACF,KAAKvN,EAAW,KACdoP,EAAU7B,EAAO,KACjB,MACF,KAAKvN,EAAW,OAChB,KAAKA,EAAW,OACdiB,EAAQ,IAAI,+CAAgD,CAAC4L,EAAUU,CAAM,CAAC,EAE9E6B,GAAUrO,EAAAwM,EAAO,QAAQ,OAAf,YAAAxM,EAAqB,GAC/BuM,EAAaC,EAAO,QAAQ,GAC5B,MACF,KAAKvN,EAAW,QACdoP,EAAU,OAAO7B,GAAW,SAAWA,EAASA,EAAO,aACvD,MACF,KAAKvN,EAAW,kBAChB,KAAKA,EAAW,WACdoP,EAAU,KACV,MACF,KAAKpP,EAAW,WACdoP,EAAU,KACV,MACF,QACEnO,EAAQ,KAAK,sBAAsB4L,CAAQ,EAAE,EAC7C,MACR,CAII,MAAMyZ,EAAc,CAAE,GAAG/Y,CAAQ,EAE9B+Y,EAAY,aAAeA,EAAY,UAAYA,EAAY,SAAS,OAASvmB,GAAe,SACjGkB,EAAQ,IAAI,qCAAsC,CAACqlB,CAAW,CAAC,EAC/DA,EAAY,YAAc,CACxB,GAAGA,EAAY,YACf,gBAAiB,CACf,GAAGA,EAAY,YAAY,gBAC3B,YAAa,GACb,kBAAmB,GACnB,kBAAmB,EAC7B,CACO,GAEH,OAAOA,EAAY,QACnB,OAAOA,EAAY,SACnB,OAAOA,EAAY,KACnB,OAAOA,EAAY,SAEnB,MAAM5S,EAAc,CAClB,KAAM,cACN,UAAW,QAAQ,MAAM,SAAU,EACnC,QAAS3L,EAAM,GACf,SAAUiG,EACV,QAAAoB,EACA,WAAA9B,EACA,kBAAmB,CACjB,GAAGgZ,EACH,aAAc,KAAK,KAAK,IACzB,EACD,eAAgBhI,EAChB,eAAgB,MAAM,KAAK,KAAK,KAAK,OAAO,EAAE,IAAIlO,GAAKA,EAAE,EAAE,EAC3D,gBAAiB/H,EAAa,IAAIF,EAAS,kBAAkB,GAAG,CACjE,EAKD,GAHAlH,EAAQ,IAAI,iCAAkC,CAACgS,EAAOS,CAAW,CAAC,EAG/D,CAACT,GAAS,CAACS,EAAY,CACxB,GAAG,cAAc,KAAK,yCAA2C3L,EAAM,IAAI,EAC3E,MACN,CAEI,GAAG,CAACkL,EAAM,OAAO,CACf,MAAM9K,EAAWxI,EAAa,EAC3B0I,EAAa,IAAIF,EAAS,yBAAyB,GAAG,GACvD,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,0CAA2C,CAChF,OAAQ8K,EAAM,IACxB,CAAS,CAAC,EAGJ,MAAM,KAAK,wBAAwBlL,EAAO8E,EAAUU,EAAQ,CAC1D,GAAGA,EACH,YAAa,EACrB,CAAO,EAED,WAAW,IAAM,ChCroBhB,IAAAxM,EgCsoBC4B,EAAY,uBAAsB5B,EAAAwM,EAAO,UAAP,YAAAxM,EAAgB,IAAI,CACvD,EAAE,GAAI,EACP,MACN,CAGIoB,GAAW,YAAY,oBAAqB8Q,EAAM,GAAIS,CAAW,EAGjE,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,4CAA6C,CAClF,QAAQT,GAAA,YAAAA,EAAO,OAAQ,UACvB,MAAOlL,EAAM,MAAQ,SAC3B,CAAK,CAAC,CAGN,CACA,CApoBE/G,EAJWymB,GAIJ,kBAAkB,IAAI,KCXxB,MAAMS,EAAuB,CAIlC,OAAO,YAAa,CAClBjnB,EAAQ,IAAI,mCAAmC,EAG/C,MAAM,GAAGd,EAAW,uBAAwB,KAAK,uBAAuB,KAAK,IAAI,CAAC,EAGlF,MAAM,GAAGA,EAAW,aAAc,KAAK,cAAc,KAAK,IAAI,CAAC,EAG/D,KAAK,wBAAyB,CAClC,CAKE,OAAO,yBAA0B,CAE/B,MAAMgoB,EAAiB,GAAG,OACtBA,GAAkBA,EAAe,UAAYA,EAAe,SAC9DlnB,EAAQ,IAAI,yFAAyF,EACrG,KAAK,uBAAuBknB,EAAgBA,EAAe,OAAO,GAElElnB,EAAQ,IAAI,8EAA8E,CAEhG,CAOE,OAAO,uBAAuByN,EAAKC,EAAM,CACvC1N,EAAQ,IAAI,gDAAiD,CAACyN,EAAKC,CAAI,CAAC,EAErDA,EAAK,iBAAiB,uBAAuB,EACrD,QAAS3L,GAAY,CAC9B,MAAM0N,EAAU1N,EAAQ,QAAQ,SAAWA,EAAQ,QAAQ,WACvD0N,GACF,KAAK,gBAAgB1N,EAAS0N,CAAO,CAE7C,CAAK,CACL,CAOE,OAAO,cAAc3I,EAAOya,EAAS,CjC5DhC,IAAAzhB,EiC6DH,MAAMqnB,GAAcrnB,EAAAyhB,EAAQ,QAAR,YAAAzhB,EAAgB,kBAChCqnB,IACFnnB,EAAQ,IAAI,mEAAoE,CAAC8G,EAAM,KAAMqgB,CAAW,CAAC,EACzG,KAAK,iBAAiBrgB,EAAM,EAAE,EAEpC,CAOE,OAAO,gBAAgBwY,EAAc7P,EAAS,CAC5C,MAAM2X,EAAe9H,EAAa,cAAc,0CAA0C,EACtF8H,GACFA,EAAa,OAAQ,EAGvB,MAAMtgB,EAAQ,KAAK,OAAO,IAAI2I,CAAO,EACrC,GAAI,CAAC3I,EAAO,OAEZ,MAAMkY,EAAaF,EAAgB,WAAWhY,CAAK,EAC7CmY,EAAYH,EAAgB,UAAUhY,CAAK,EAEjD,GAAI,CAACkY,GAAc,CAACC,EAAW,OAC/B,MAAMhR,EAAO,SAAS,cAAc,MAAM,EAEtCgR,GACFhR,EAAK,UAAY,oBACjBA,EAAK,MAAQ,iCACJ+Q,IACT/Q,EAAK,UAAY,cACjBA,EAAK,MAAQ,6BAEfqR,EAAa,YAAYrR,CAAI,CACjC,CAME,OAAO,iBAAiBwB,EAAS,CAC/B,MAAM6P,EAAe,SAAS,cAAc,wCAAwC7P,CAAO,+CAA+CA,CAAO,IAAI,EACjJ6P,GACF,KAAK,gBAAgBA,EAAc7P,CAAO,CAEhD,CAKE,OAAO,iBAAkB,CACvBzP,EAAQ,IAAI,wCAAwC,EAEjC,SAAS,iBAAiB,uBAAuB,EACzD,QAAQ+B,GAAW,CAC5B,MAAM0N,EAAU1N,EAAQ,QAAQ,SAAWA,EAAQ,QAAQ,WACvD0N,GACF,KAAK,gBAAgB1N,EAAS0N,CAAO,CAE7C,CAAK,CACL,CACA,CCxGO,MAAM4X,GAAN,MAAMA,EAAU,CAQrB,OAAO,YAAa,CAClB,MAAM,KAAKnoB,EAAW,KAAM,KAAK,QAAQ,KAAK,IAAI,CAAC,EACnD,MAAM,KAAKA,EAAW,MAAO,KAAK,SAAS,KAAK,IAAI,CAAC,EAErD,MAAM,KAAKA,EAAW,0BAA2B,CAACwO,EAAM4Z,IAAmB,CACzEtnB,EAAQ,IAAI,8BAA+B,CAAC0N,EAAM4Z,CAAc,CAAC,EAE5D,KAAK,KAAK,OAsCfA,EAAe,KAAK,CAClB,KAAM,KAAK,KAAK,SAAS,yCAAyC,EAClE,KAAM,8BACN,SAAUlI,GAAM,CACd,MAAM3P,EAAU2P,EAAG,QAAQ,QAC3B,OAAI3P,GACFqP,EAAgB,cAAcrP,EAAS,EAAK,EAEvCA,CACR,EACD,UAAW2P,GAAM,ClClFlB,IAAAtf,EkCmFG,MAAM2P,GAAU3P,EAAAsf,GAAA,YAAAA,EAAI,UAAJ,YAAAtf,EAAa,QAE7B,OADkBgf,EAAgB,UAAUrP,CAAO,CAE7D,CACA,CAAO,EAED6X,EAAe,KAAK,CAClB,KAAM,KAAK,KAAK,SAAS,uCAAuC,EAChE,KAAM,oCACN,SAAUlI,GAAM,CACd,MAAM3P,EAAU2P,EAAG,QAAQ,QAC3B,OAAI3P,GACFqP,EAAgB,cAAcrP,EAAS,EAAI,EAEtCA,CACR,EACD,UAAW2P,GAAM,ClCnGlB,IAAAtf,EkCoGG,MAAM2P,GAAU3P,EAAAsf,GAAA,YAAAA,EAAI,UAAJ,YAAAtf,EAAa,QAE7B,MAAO,CADWgf,EAAgB,UAAUrP,CAAO,CAE7D,CACA,CAAO,EACP,CAAK,CACL,CAKE,OAAO,SAAU,CACE/Q,EAAW,EAC5B,SAAS,KAAK,UAAU,IAAI,SAAS,EACrC0I,EAAa,iBAAkB,EAC/BjG,GAAe,WAAY,EAE3B,KAAK,eAAgB,CACzB,CAKE,OAAO,UAAW,ClC3Hb,IAAArB,EkC4HHsH,EAAa,qBAAsB,EACnC6f,GAAuB,WAAY,EACnCzZ,GAAY,mBAAmB,GAAG,SAAS1N,EAAA,GAAG,UAAH,YAAAA,EAAY,OAAO,EAC3D2L,GAAc,eAAe,UAAU,GACxCzL,EAAQ,IAAI,uBAAwB,CAAC,oDAAoD,CAAC,EAC1F,MAAM,KAAKZ,GAAe,MAAO,KAAK,YAAY,KAAK,IAAI,CAAC,IAE5DY,EAAQ,IAAI,uBAAwB,CAAC,qCAAqC,CAAC,EAC3E,KAAK,YAAa,EAExB,CAEE,aAAa,aAAc,CACzB,MAAMkH,EAAWxI,EAAa,EACZ0I,EAAa,IAAIF,EAAS,UAAU,GAAG,IAEvD,OAAO,MAAM,MAAQ,IAGvB,MAAM4O,EAAiB,WAAY,EAE/B,KAAK,KAAK,MACZ0Q,GAAgB,WAAY,EAC5B,KAAK,iBAAkB,EACvBzY,EAAiB,oBAAqB,IAEtC5M,GAAe,cAAe,EAC9B,KAAK,qBAAsB,GAE7B8O,GAAmBD,GAAiB,CAAE,CAC1C,CAKE,OAAO,gBAAiB,CACtB,KAAK,cAAc9Q,EAAW,eAAgB,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAC9E,KAAK,cAAcA,EAAW,wBAAyB,KAAK,wBAAwB,KAAK,IAAI,CAAC,EAC9F,KAAK,cAAcA,EAAW,wBAAyB,KAAK,8BAA8B,KAAK,IAAI,CAAC,EACpG,KAAK,cAAcA,EAAW,oBAAqB,KAAK,yBAAyB,KAAK,IAAI,CAAC,EAC3F,KAAK,cAAcA,EAAW,mBAAoB,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAClF,KAAK,cAAcA,EAAW,kBAAmB,KAAK,iBAAiB,KAAK,IAAI,CAAC,EACjF,KAAK,cAAcA,EAAW,0BAA2B,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAC1F,KAAK,cAAcG,EAAY,iCAAkC,KAAK,0BAA0B,KAAK,IAAI,CAAC,EAC1G,KAAK,cAAcA,EAAY,8BAA+B,KAAK,yBAAyB,KAAK,IAAI,CAAC,EACtG,KAAK,cAAcA,EAAY,iBAAkB,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAClF,KAAK,cAAcA,EAAY,kBAAmB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACpF,KAAK,cAAcA,EAAY,oBAAqB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACtF,KAAK,cAAcA,EAAY,iBAAkB,KAAK,kBAAkB,KAAK,IAAI,CAAC,CAEtF,CAKE,OAAO,kBAAmB,CACxB,KAAK,cAAcH,EAAW,eAAgB,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAC9E,KAAK,cAAcA,EAAW,wBAAyB,KAAK,0BAA0B,KAAK,IAAI,CAAC,EAChG,KAAK,cAAcG,EAAY,YAAa,KAAK,WAAW,KAAK,IAAI,CAAC,EAGtE,KAAK,cAAcH,EAAW,aAAc,KAAK,eAAe,KAAK,IAAI,CAAC,EAC1E,KAAK,cAAcA,EAAW,aAAc,KAAK,eAAe,KAAK,IAAI,CAAC,EAG1E,KAAK,cAAcA,EAAW,eAAgB,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAC9E,KAAK,cAAcA,EAAW,aAAc,KAAK,eAAe,KAAK,IAAI,CAAC,EAC1E,KAAK,cAAcA,EAAW,aAAc,KAAK,eAAe,KAAK,IAAI,CAAC,EAE1E,KAAK,MAAM,QAAQqC,GAAQ,CACzB,KAAK,iBAAiBA,CAAI,CAChC,CAAK,CACL,CAEE,OAAO,sBAAuB,CAC5B,KAAK,cAAclC,EAAY,2BAA4B,KAAK,2BAA2B,KAAK,IAAI,CAAC,EAGrG,KAAK,cAAcA,EAAY,mBAAoB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACrF,KAAK,cAAcA,EAAY,mBAAoB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACrF,MAAM,GAAGA,EAAY,uBAAwB,CAACiN,EAAQuJ,EAAQhF,IAAY,CACxE7Q,EAAQ,IAAI,2BAA4B,CAACsM,EAAQuJ,EAAQhF,CAAO,CAAC,EAC7DvE,EAAO,gBACTuJ,EAAO,UAAY,GAE3B,CAAK,CAGL,CAEE,OAAO,iBAAiBpM,EAAK,CAC3BzJ,EAAQ,IAAI,mBAAoB,CAACyJ,CAAG,CAAC,EACrCwG,GAAmBD,GAAiB,CAAE,CAC1C,CAKE,OAAO,kBAAkB3P,EAAOiM,EAAQuJ,EAAQhF,EAAS,CACnDvE,EAAO,kBAAoBjM,EAAM,OAAS,IAC5CwQ,EAAQ,KAAOA,EAAQ,MAAQ,CAAE,EACjCA,EAAQ,KAAK,iBAAmB,GAChCA,EAAQ,KAAK,aAAevE,EAAO,aAEzC,CAYE,OAAO,wBAAwBib,EAAa/nB,EAAMK,EAASiB,EAAQ,ClChP9D,IAAAhB,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAiP,EAAAK,EkCiPH,GAAIzc,EAAK,oBAAoBM,EAAAN,EAAK,QAAL,YAAAM,EAAY,QAAS,EAAG,CACnD,MAAM0nB,EAAchoB,EAAK,cAAgB,KACnCioB,EAAgB,KAAK,KAAK,OAAO,+BAAgC,CAAE,GAAID,EAAa,EAEpFE,EAAgBloB,EAAK,QAAU,GACrCA,EAAK,OAASkoB,EAAgB,GAAGA,CAAa,IAAID,CAAa,GAAKA,CAC1E,CAMI,IAJI9d,GAAArI,EAAA9B,EAAK,QAAL,YAAA8B,EAAa3C,KAAb,MAAAgL,EAAyB,aAC3B3J,EAAQ,IAAI,4DAA6D,CAACR,CAAI,CAAC,IAG7E+M,EAAA/M,EAAK,QAAL,YAAA+M,EAAY,QAAS,IAAKE,GAAAD,EAAAhN,EAAK,QAAL,YAAAgN,EAAY,OAAZ,MAAAC,EAAkB,eAAgB,CAC9D,MAAMkb,EAAUnoB,EAAK,QACfiQ,EAAUkY,GAAA,YAAAA,EAAS,MAEzB,GAAIlY,EAAS,CACX,IAAI3I,EAAQ,KAAK,OAAO,IAAI2I,CAAO,EAEnC,GAAI,CAAC3I,IAAS6gB,GAAA,MAAAA,EAAS,OAAO,CAC5B,MAAMvY,EAAQ,OAAO,OAAO,IAAIuY,EAAQ,KAAK,EACzCvY,GAAA,MAAAA,EAAO,QACTtI,EAAQsI,EAAM,MACdpP,EAAQ,IAAI,2DAA4D,CAAC8G,EAAM,KAAMA,EAAM,EAAE,CAAC,EAE1G,CAEQ,GAAI,CAACA,EAAO,CACV9G,EAAQ,IAAI,2CAA4C,CAACyP,EAASkY,CAAO,CAAC,EAC1E,MACV,CAEQ,GAAI,KAAK,KAAK,KAAM,CAClB,MAAMC,EAAc9gB,EAAM,SAAU4F,EAAA5F,EAAM,QAAN,YAAA4F,EAAa,GAAK5F,EAAM,GACtD+gB,EAAW,CAACpY,EAASmY,CAAW,EAAE,OAAOnkB,GAAMA,CAAE,EAEvD,SAAW,CAAC0S,EAAa8B,CAAW,IAAKnC,EAAiB,aAAa,UAAW,CAChF,MAAMkB,EAAeiB,EAAY,eAAiBA,EAAY,OAASA,EAAY,OAAO,IAAIxU,IAAO,CAAE,QAASA,CAAE,EAAG,EAAI,CAAA,GACzH,GAAIokB,EAAS,KAAKpkB,GAAMuT,EAAa,KAAK1M,GAASA,EAAM,UAAY7G,CAAE,CAAC,EAAG,CAEzEjE,EAAK,MAAQA,EAAK,OAAS,CAAE,EAC7BA,EAAK,MAAMb,CAAS,EAAIa,EAAK,MAAMb,CAAS,GAAK,CAAE,EACnDa,EAAK,MAAMb,CAAS,EAAE,YAAcwX,EACpCnW,EAAQ,IAAI,wDAAyD,CAACmW,EAAa1G,CAAO,CAAC,EAC3F,KACd,CACA,CACA,KAAe,CACL,IAAIqY,EAAoBhhB,EAAM,QAAQnI,EAAW,iBAAiB,EAClE,GAAI,CAACmpB,GAAqBhhB,EAAM,QAAS,CACvC,MAAMihB,EAAY,KAAK,OAAO,KAAIpb,EAAA7F,EAAM,QAAN,YAAA6F,EAAa,EAAE,EAC7Cob,IACFD,EAAoBC,EAAU,QAAQppB,EAAW,iBAAiB,EAClEqB,EAAQ,IAAI,oEAAqE,CAAC+nB,EAAU,GAAID,CAAiB,CAAC,EAEhI,CAEU,GAAIA,IACFhhB,EAAM,UAAUnI,EAAW,iBAAiB,EACxCmI,EAAM,SAAS,CACjB,MAAMihB,EAAY,KAAK,OAAO,KAAInM,EAAA9U,EAAM,QAAN,YAAA8U,EAAa,EAAE,EAC7CmM,GACFA,EAAU,UAAUppB,EAAW,iBAAiB,CAEhE,CAGU,IAAIqpB,EAAmBlhB,EAAM,QAAQnI,EAAW,sBAAsB,EAEtE,GAAI,CAACqpB,GAAoBlhB,EAAM,QAAS,CACtC,MAAMihB,EAAY,KAAK,OAAO,KAAI9L,EAAAnV,EAAM,QAAN,YAAAmV,EAAa,EAAE,EAC7C8L,IACFC,EAAmBD,EAAU,QAAQppB,EAAW,sBAAsB,EAEpF,EAEcqpB,GAAA,MAAAA,EAAkB,aAAeF,KACnCtoB,EAAK,MAAQA,EAAK,OAAS,CAAE,EAC7BA,EAAK,MAAMb,CAAS,EAAIa,EAAK,MAAMb,CAAS,GAAK,CAAE,EACnDa,EAAK,MAAMb,CAAS,EAAE,YAAcmpB,IAAqBE,GAAA,YAAAA,EAAkB,cAAe,GAEtG,CACA,CACA,CACA,CAKE,OAAO,8BAA8BnX,EAASrR,EAAMK,EAASiB,EAAQ,ClC1UhE,IAAAhB,EAAAwB,EkC2UH,KAAIxB,EAAAN,EAAK,QAAL,YAAAM,EAAY,QAAS,GAAKN,EAAK,MAAM,CAAC,EACxC,GAAI,CACF,MAAMyoB,EAAWzoB,EAAK,MAAM,CAAC,GACzB8B,EAAA2mB,EAAS,UAAT,MAAA3mB,EAAkB,gBACpB9B,EAAK,OAASyoB,EAAS,QAAQ,cAElC,OAAQhnB,EAAO,CACdjB,EAAQ,MAAM,gCAAiC,CAACiB,CAAK,CAAC,CAC9D,CAEA,CAME,OAAO,0BAA0BwM,EAAKC,EAAMlO,EAAM,ClC3V7C,IAAAM,EAAAwB,EAAAqI,EAAA4C,EAAAC,EkC6VH,GADA,QAAQ,MAAM,6CAA8C,CAAEiB,EAAKjO,CAAI,CAAE,EACrEiO,EAAI,mBAAoB,OAS5B,KAHyBnM,GAAAxB,EAAA2N,EAAI,SAAJ,YAAA3N,EAAY,YAAZ,YAAAwB,EAAuB,SAAS,wBAClCiL,GAAA5C,EAAA8D,EAAI,UAAJ,YAAA9D,EAAa,KAAb,YAAA4C,EAAiB,SAAS,eAE3B,CACpB,MAAMzF,GAAQ0F,EAAAiB,EAAI,SAAJ,YAAAjB,EAAY,QAC1B,GAAI,CAAC1F,EAAO,OAGZ,GADqBA,EAAM,QAAQnI,EAAW,sBAAsB,EAClD,CAChB8O,EAAI,mBAAqB,GACzB,MAAMya,EAAmBxa,EAAK,cAAc,4BAA4B,EACxE,WAAW,IAAM,CACfwa,EAAiB,cAAc,IAAI,MAAM,SAAU,CACjD,QAAS,GACT,WAAY,EACxB,CAAW,CAAC,CACH,EAAE,EAAE,CACb,CAEM,MACN,KAAS,CACH,MAAMC,EAAoBza,EAAK,iBAAiB,4BAA4B,EAC5E1N,EAAQ,IAAI,uDAAwD,CAACmoB,EAAkB,MAAM,CAAC,EAE9FA,EAAkB,QAAQ,CAACC,EAAO7d,IAAU,ClC3X3C,IAAAzK,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EkC4XC1M,EAAQ,IAAI,+CAAgD,CAACuK,EAAO6d,EAAM,KAAMA,EAAM,KAAK,CAAC,EACxF,CAACA,EAAM,SAAS7b,GAAA5C,GAAArI,GAAAxB,EAAA2N,EAAI,SAAJ,YAAA3N,EAAY,QAAZ,YAAAwB,EAAoB,KAApB,YAAAqI,EAAwB,OAAxB,MAAA4C,EAA8B,eAChD6b,EAAM,MAAQ3a,EAAI,OAAO,MAAM,CAAC,EAAE,KAAK,aAEzCzN,EAAQ,IAAI,+BAAgC,CAACooB,EAAM,MAAO3a,EAAI,OAAO,KAAK,CAAC,EAGvE2a,EAAM,QACR3a,EAAI,mBAAqB,IAErBf,GAAAD,GAAAD,EAAAiB,EAAI,SAAJ,YAAAjB,EAAY,QAAZ,YAAAC,EAAoB,KAApB,MAAAC,EAAwB,MAC1B,OAAOe,EAAI,OAAO,MAAM,CAAC,EAAE,KAAK,YAGlC,WAAW,IAAM,CAEf2a,EAAM,cAAc,IAAI,MAAM,SAAU,CACtC,QAAS,GACT,WAAY,EAC1B,CAAa,CAAC,EACFpoB,EAAQ,IAAI,yDAA0D,EAAE,CACzE,EAAE,GAAG,EAEhB,CAAO,CACP,CAEA,CAKE,OAAO,0BAA0B6Q,EAASrR,EAAMK,EAASiB,EAAQ,CAEnE,CAKE,OAAO,yBAAyB+P,EAASnD,EAAM1E,EAAS,ClClanD,IAAAlJ,EkCwaH,GALAE,EAAQ,IAAI,2BAA4B,CAAC6Q,EAASnD,EAAM1E,CAAO,CAAC,EAChE8M,EAAiB,qBAAqBjF,EAASnD,EAAM1E,CAAO,EAE5D,KAAK,wBAAwB6H,EAASnD,CAAI,EAEvC,KAAK,KAAK,KAAK,CAChB,MAAMzG,GAAOnH,EAAAkJ,EAAQ,UAAR,YAAAlJ,EAAiB,KAC9B,GAAI,CAACmH,EAAM,OACX,WAAW,IAAM,CACfvF,EAAY,sBAAsBuF,CAAI,CACvC,EAAE,GAAI,CACb,CAEA,CAOE,OAAO,wBAAwB4J,EAASnD,EAAM,ClCvbzC,IAAA5N,EAAAwB,EAAAqI,EkC0bH,GAFG,CAAC,KAAK,KAAK,OACd3J,EAAQ,IAAI,6BAA8B,CAAC6Q,EAASnD,EAAMA,EAAK,cAAc,kBAAkB,CAAC,CAAC,IAC7F/D,GAAArI,GAAAxB,EAAA+Q,EAAQ,QAAR,YAAA/Q,EAAe,QAAf,YAAAwB,EAAsB,OAAtB,YAAAqI,EAA4B,QAAS,UAAY+D,EAAK,cAAc,kBAAkB,GAAG,OAE7F,MAAMiO,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,UAAY,kBACnBA,EAAO,KAAO,SACdA,EAAO,aAAa,yBAA0B,MAAM,EACpDA,EAAO,aAAa,eAAgB,iBAAiB,EACrDA,EAAO,UAAY,oCAEnBA,EAAO,iBAAiB,QAAU7Q,GAAU,CAC1CA,EAAM,eAAgB,EACtB,KAAK,sBAAsBA,CAAK,CACtC,CAAK,EAED4C,EAAK,cAAc,kBAAkB,EAAE,YAAYiO,CAAM,EACzD9K,EAAQ,OAAO,CACb,QAASnD,CACf,CAAK,CACL,CAME,OAAO,sBAAsB5C,EAAO,CAClC,MAAM+F,EAAU/F,EAAM,cAAc,QAAQ,eAAe,EACrDud,EAAUxX,EAAQ,iBAAiB,oBAAoB,EAE7D,GAAIwX,EAAQ,SAAW,EAAG,CACxB,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,4CAA4C,CAAC,EACtF,MACN,CAEIroB,EAAQ,IAAI,wBAAyB,CAAC6Q,EAASwX,EAAS,OAAO,OAAO,WAAY,KAAK,OAAO,MAAM,CAAC,EACrG,QAAUxgB,EAAE,EAAGA,EAAIwgB,EAAQ,OAAQxgB,IAAM,CAEvC,MAAM4H,EADS4Y,EAAQxgB,CAAC,EACD,QAAQ,WAAW,MAAM,QAAQ,EAAE,CAAC,EACrDuH,EAAQ,OAAO,OAAO,WAAW,KAAKD,GACnCA,EAAE,SAAS,UAAYM,CAC/B,EACDL,GAAA,MAAAA,EAAO,QAAQ,CAAE,cAAevH,IAAI,CAAC,EAC3C,CACA,CAKE,OAAO,iBAAiBtG,EAAM,CACxBA,EAAK,QAAUA,EAAK,KAAO,KAAK,KAAK,IACvCJ,GAAe,0BAA0BI,EAAK,EAAE,CAEtD,CAQE,OAAO,eAAe6N,EAAOvP,EAASiB,EAAQ,CAC5Cd,EAAQ,IAAI,uFAAuF,EACnG+N,EAAiB,cAAe,CACpC,CAEE,OAAO,iBAAiB8X,EAASnlB,EAAOb,EAASiB,EAAQ,CACvD,MAAMoG,EAAWxI,EAAa,EACxBO,EAAS,CAAE,GAAI,gBAAkB,EAEnC4mB,EAAQ,MAAQ,GAAG5mB,EAAO,EAAE,IAAIiI,EAAS,qBAAqB,GAAG,IAEnElH,EAAQ,IAAI,qFAAsF,CAAC6lB,EAAQ,GAAG,CAAC,EAC/G9X,EAAiB,cAAe,GACzB8X,EAAQ,MAAQ,kBACvBze,EAAa,kBAAmB,EAChC2G,EAAiB,cAAe,EAEtC,CAEE,OAAO,eAAeua,EAAO/G,EAAS1hB,EAASiB,EAAQ,CACjDygB,EAAQ,SAAW,KACrBvhB,EAAQ,IAAI,uFAAuF,EACnG+N,EAAiB,cAAe,EAEtC,CAEE,OAAO,eAAejH,EAAOya,EAAS1hB,EAASiB,EAAQ,ClC/gBlD,IAAAhB,EAAAwB,EAAAqI,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAiP,EAAAK,EAAAC,EAAAC,EkCghBHnc,EAAQ,IAAI,2BAA4B,CAAC8G,EAAOya,CAAO,CAAC,EACxD,MAAMgH,EAAmBhH,EAAQ,aAAa,IAAM,OAQhD,GAPiBjgB,GAAAxB,EAAAyhB,EAAQ,SAAR,YAAAzhB,EAAgB,aAAhB,MAAAwB,EAA4B,KAC7BiL,GAAA5C,EAAA4X,EAAQ,SAAR,YAAA5X,EAAgB,aAAhB,MAAA4C,EAA4B,KAC5BG,GAAAD,GAAAD,EAAA+U,EAAQ,SAAR,YAAA/U,EAAgB,aAAhB,YAAAC,EAA4B,QAA5B,MAAAC,EAAmC,KACnCkP,GAAAjP,EAAA4U,EAAQ,SAAR,YAAA5U,EAAgB,SAAhB,MAAAiP,EAAwB,MACxBK,EAAAsF,EAAQ,SAAR,MAAAtF,EAAgB,YAChBE,GAAAD,EAAAqF,EAAQ,SAAR,YAAArF,EAAgB,aAAhB,MAAAC,EAA4B,OAE3B,CAACoM,IAEtBvoB,EAAQ,IAAI,iFAAkF,CAAC8G,EAAOya,CAAO,CAAC,EAC9GxT,EAAiB,cAAe,EACpC,CAKE,OAAO,uBAAuBN,EAAKC,EAAM7N,EAAS,CAChDG,EAAQ,IAAI,yBAA0B,CAACyN,EAAKC,EAAM7N,CAAO,CAAC,CAC9D,CAKE,OAAO,iBAAiB4N,EAAKC,EAAM7N,EAAS,CAC1CG,EAAQ,IAAI,mBAAoB,CAACyN,EAAKC,CAAI,CAAC,EACxC,KAAK,OACNF,GAAY,mBAAmBC,EAAKC,CAAI,CAE9C,CAQE,OAAO,cAAc+Y,EAAU7lB,EAAS,CACtC,MAAM8lB,EAAS,MAAM,GAAGD,EAAU7lB,CAAO,EACzC,YAAK,gBAAgB,IAAI,GAAG6lB,CAAQ,IAAIC,CAAM,GAAIA,CAAM,EACjDA,CACX,CAKE,OAAO,eAAgB,CACrB,KAAK,gBAAgB,QAAQ,CAACA,EAAQrb,IAAQ,CAC5C,MAAMob,EAAWpb,EAAI,MAAM,GAAG,EAAE,CAAC,EACjC,MAAM,IAAIob,EAAUC,CAAM,CAChC,CAAK,EACD,KAAK,gBAAgB,MAAO,CAChC,CAOE,OAAO,aAAaD,EAAU,CAC5B,UAAWpb,KAAO,KAAK,gBAAgB,KAAI,EACzC,GAAIA,EAAI,WAAW,GAAGob,CAAQ,GAAG,EAC/B,MAAO,GAGX,MAAO,EACX,CAQE,OAAO,WAAWna,EAAQ0G,EAAewV,EAAgBC,EAAG,CAC1DzoB,EAAQ,IAAI,gBAAiB,CAACsM,EAAQ0G,EAAewV,EAAgBC,CAAC,CAAC,CAE3E,CAME,OAAO,mBAAmBnc,EAAQ0G,EAAewV,EAAgB,CAG/D,GAFAxoB,EAAQ,IAAI,+BAAgC,CAACsM,EAAQ0G,EAAewV,CAAc,CAAC,EAE/Elc,EAAO,OAASA,EAAO,MAAM,OAAS,EAAG,CAC3C,MAAMoc,EAAwB,CAAE,EAEhC,QAAQ,EAAI,EAAG,EAAIpc,EAAO,MAAM,OAAQ,IAAI,CAC1C,MAAMhM,EAAOgM,EAAO,MAAM,CAAC,EACvBhM,GAAQA,EAAK,MAAQA,EAAK,KAAK,aACjCooB,EAAsB,KAAKpoB,EAAK,KAAK,WAAW,CAE1D,CAEM,GAAIooB,EAAsB,OAAS,EAAG,CAC/Bpc,EAAO,MAAM,CAAC,EAAE,OACnBA,EAAO,MAAM,CAAC,EAAE,KAAO,CAAE,GAG3B,MAAMqc,EAAgB,CAAC,GAAG,IAAI,IAAID,CAAqB,CAAC,EAExDpc,EAAO,MAAM,CAAC,EAAE,KAAK,YAAcqc,EAAc,IAAIC,GAAS,CAC5D,MAAMC,EAAeD,EAAM,SAAQ,EAAG,KAAM,EAC5C,OAAIC,EAAa,WAAW,GAAG,EACtB,IAAIA,CAAY,IACdA,EAAa,WAAW,GAAG,EAC7B,GAAGA,EAAa,UAAU,CAAC,CAAC,GAE5B,GAAGA,CAAY,EAElC,CAAS,EAAE,KAAK,KAAK,EAEV,KAAK,KAAK,MAAQ,CAACvc,EAAO,MAAM,CAAC,EAAE,MAAM,KAAKlD,GAAKA,EAAE,SAAS,cAAc,CAAC,GAC9EkD,EAAO,MAAM,CAAC,EAAE,MAAM,KAAK,cAAc,CAEnD,CAEMA,EAAO,MAAQA,EAAO,MAAM,MAAM,EAAG,CAAC,EACtCtM,EAAQ,IAAI,2BAA4BsM,EAAO,KAAK,CAC1D,CACA,CAKE,OAAO,2BAA2BA,EAAQ0G,EAAewV,EAAgB,ClChpBpE,IAAA1oB,EAAAwB,EAAAqI,EAAA4C,EAAAC,EkCkpBH,MAAMsc,EADQxc,EAAO,QACM,QAAQ3N,EAAW,sBAAsB,EAEpEqB,EAAQ,IAAI,uCAAwC,CAACsM,EAAQwc,EAAc9V,EAAewV,CAAc,CAAC,EACzGlc,EAAO,WAAYwc,GAAA,YAAAA,EAAc,YAAaxc,EAAO,WAAa,GAClEA,EAAO,cAAewc,GAAA,YAAAA,EAAc,eAAgBxc,EAAO,cAAgB,GAE3EA,EAAO,UAAWwc,GAAA,YAAAA,EAAc,WAAYxc,EAAO,UAAY,MAAM,gBAAgB,OACrFkc,EAAe,UAAWM,GAAA,YAAAA,EAAc,WAAYN,EAAe,UAAY,MAAM,gBAAgB,QAEjG7e,GAAArI,GAAAxB,EAAAgpB,EAAa,QAAb,YAAAhpB,EAAqB,KAArB,YAAAwB,EAAyB,OAAzB,MAAAqI,EAA+B,eAAe6C,GAAAD,EAAAD,EAAO,QAAP,YAAAC,EAAe,KAAf,MAAAC,EAAmB,QACnEF,EAAO,MAAM,CAAC,EAAE,KAAK,YAAcwc,EAAa,MAAM,CAAC,EAAE,KAAK,YAGpE,CAKE,OAAO,mBAAmBxc,EAAQ0G,EAAewV,EAAgB,ClCpqB5D,IAAA1oB,EAAAwB,EkCqqBHtB,EAAQ,IAAI,+BAAgC,CAACsM,EAAQ0G,EAAewV,CAAc,CAAC,EAEnF,MAAMO,GAASznB,GAAAxB,EAAAwM,EAAO,UAAP,YAAAxM,EAAgB,OAAhB,YAAAwB,EAAsB,QAAQ3C,EAAW,oBACxD,GAAIoqB,EAAQ,CAGV,GAFA/oB,EAAQ,IAAI,6DAA8D,CAAC+oB,CAAM,CAAC,EAE/EA,EAAO,gBAAkB,IAASA,EAAO,iBAAmB,IAAQA,EAAO,cAAgB,GAAO,CACnG/oB,EAAQ,IAAI,oDAAqD,CAAC+oB,CAAM,CAAC,EACzE,MACR,CAEUA,EAAO,aAAYzc,EAAO,WAAayc,EAAO,YAC9CA,EAAO,aAAYzc,EAAO,WAAayc,EAAO,YAC9CA,EAAO,UAAY,SAAWzc,EAAO,QAAUyc,EAAO,SAC1Dzc,EAAO,UAAYyc,EAAO,WAAa,GACvCzc,EAAO,aAAeyc,EAAO,cAAgB,GAC7CP,EAAe,SAAWO,EAAO,UAAYP,EAAe,UAAY,MAAM,gBAAgB,OAE1FO,EAAO,eACL,CAACzc,EAAO,OAASA,EAAO,MAAM,SAAW,KAC3CA,EAAO,MAAQ,CAAC,CACd,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACrB,CAAW,GAGEA,EAAO,MAAM,CAAC,EAAE,OACnBA,EAAO,MAAM,CAAC,EAAE,KAAO,CAAE,GAE3BA,EAAO,MAAM,CAAC,EAAE,KAAK,YAAcyc,EAAO,aAE5C/oB,EAAQ,IAAI,mEAAoE,CAACsM,EAAQkc,CAAc,CAAC,CAC9G,CACA,CAKE,OAAO,mBAAmBlc,EAAQ0G,EAAewV,EAAgB,ClC5sB5D,IAAA1oB,EAAAwB,EAAAqI,EkC8sBH,MAAMof,GAASznB,GAAAxB,EAAAwM,EAAO,UAAP,YAAAxM,EAAgB,OAAhB,YAAAwB,EAAsB,QAAQ3C,EAAW,oBAmBxD,GAlBAqB,EAAQ,IAAI,kCAAmC,CAACsM,EAAQ0G,EAAewV,CAAc,CAAC,EAEnFlc,EAAO,aAAe,CAAC,KAAK,KAAK,QAC/B3C,EAAA2C,EAAO,UAAP,YAAA3C,EAAgB,QAAS7K,GAAe,SAE3CkU,EAAc,UAAY,IAaxB+V,EAAQ,CAGV,GAFA/oB,EAAQ,IAAI,6DAA8D,CAAC+oB,EAAQA,EAAO,WAAW,CAAC,EAEnGA,EAAO,gBAAkB,IAASA,EAAO,iBAAmB,IAAQA,EAAO,cAAgB,GAAO,CACnG/oB,EAAQ,IAAI,oDAAqD,CAAC+oB,CAAM,CAAC,EACzE,MACR,CAEM/oB,EAAQ,IAAI,kCAAmC,CAACsM,EAAQ0G,EAAewV,CAAc,CAAC,EAElFO,EAAO,WAAUzc,EAAO,SAAWyc,EAAO,UAC9CP,EAAe,SAAWO,EAAO,UAAYP,EAAe,UAAY,MAAM,gBAAgB,OAE1FO,EAAO,eACL,CAACzc,EAAO,OAASA,EAAO,MAAM,SAAW,KAC3CA,EAAO,MAAQ,CAAC,CACd,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACrB,CAAW,GAGEA,EAAO,MAAM,CAAC,EAAE,OACnBA,EAAO,MAAM,CAAC,EAAE,KAAO,CAAE,GAE3BA,EAAO,MAAM,CAAC,EAAE,KAAK,YAAcyc,EAAO,YAG1Czc,EAAO,uBAAyByc,EAAO,aAEzC/oB,EAAQ,IAAI,mEAAoE,CAACsM,EAAQkc,CAAc,CAAC,CAC9G,CACA,CAKE,OAAO,kBAAkB3b,EAAUP,EAAQuJ,EAAQhF,EAAS,CAE1D7Q,EAAQ,IAAI,uBAAwB,CAAC6M,EAAUP,EAAQuJ,EAAQhF,CAAO,CAAC,EACvE,MAAM3J,EAAWxI,EAAa,EACxBsqB,EAAkB5hB,EAAa,IAAIF,EAAS,oBAAoB,GAAG,EACnE+hB,EAA0B7hB,EAAa,IAAIF,EAAS,wBAAwB,GAAG,EACrF,GAAI,CAAC8hB,GAAmB,CAACC,EAAyB,OAClDpc,EAAS,KAAK,UAAUlO,EAAW,kBAAkB,EACrDkO,EAAS,KAAK,UAAUlO,EAAW,kBAAkB,EACrDkO,EAAS,KAAK,UAAUlO,EAAW,gBAAgB,EAEnD,MAAMmI,EAAQ+F,EAAS,MACvB,GAAI,CAAC/F,EAAO,OACZ9G,EAAQ,IAAI,uBAAwB,CAAC6M,EAAUP,EAAQuJ,EAAQhF,CAAO,CAAC,EAKvE,MAAMqY,EAAwB9hB,EAAa,IAAIF,EAAS,sBAAsB,GAAG,EAIjF,OAFAlH,EAAQ,IAAI,uBAAwB,CAAC6M,EAAUP,EAAQuJ,EAAQhF,CAAO,CAAC,EAE/DqY,EAAqB,CAC3B,IAAK,GACHrT,EAAO,UAAY,GACnB,MACF,IAAK,GACHA,EAAO,UAAY,KAAK,KAAK,KAC7B,MACF,IAAK,GACHA,EAAO,UAAY,CAAC,KAAK,KAAK,KAC9B,MACF,QACEA,EAAO,UAAY,GACnB,KACR,CAqCI,GAnCG,KAAK,KAAK,OACXvJ,EAAO,QAAU,CACf,OAAQ,GACR,UAAW,CAAE,EACb,UAAW,EACnB,GAEOA,EAAO,cACPO,EAAS,OAAS/N,GAAe,QAAU+N,EAAS,OAAS/N,GAAe,QAC7E+W,EAAO,UAAY,GACnBhJ,EAAS,YAAc,CACrB,GAAGP,EAAO,YACV,kBAAmB,GACnB,gBAAiB,CAEf,kBAAmB,GACnB,eAAgB,GAChB,eAAgB,GAChB,gBAAiB,EAC3B,CACA,EACMA,EAAO,YAAc,CACnB,GAAGA,EAAO,YACV,kBAAmB,GACnB,gBAAiB,CACf,GAAGA,EAAO,YAAY,gBACtB,kBAAmB,GACnB,eAAgB,GAChB,eAAgB,EAC1B,CACA,EAEMtM,EAAQ,IAAI,+BAAgC,CAAC6M,CAAQ,CAAC,GAGrD,CAAC,KAAK,KAAK,KAAM,OAEpB,MAAMsc,EAAaznB,EAAY,cAAcoF,CAAK,EAE9CqiB,GAAcA,EAAW,QAAU,CAACA,EAAW,OACjDnpB,EAAQ,IAAI,kDAAmD,CAAC8G,EAAM,IAAI,CAAC,EAC3E+J,EAAQ,OAAS,GAEvB,CAEE,OAAO,mBAAmBhE,EAAUP,EAAQuJ,EAAQhF,EAAS,CAC3D,MAAM3J,EAAWxI,EAAa,EACP0I,EAAa,IAAIF,EAAS,eAAe,GAAG,EACnE,MAAM8hB,EAAkB5hB,EAAa,IAAIF,EAAS,oBAAoB,GAAG,EACnE+hB,EAA0B7hB,EAAa,IAAIF,EAAS,wBAAwB,GAAG,EAmBrF,GAlBa,KAAK,KAAK,KAEvBlH,EAAQ,IAAI,wBAAyB,CAAC6M,EAAUP,EAAQuJ,EAAQhF,CAAO,CAAC,EAErE,CAAC,KAAK,KAAK,MAAQvE,EAAO,cAC3BA,EAAO,YAAc,CACnB,GAAGA,EAAO,YACV,kBAAmB,GACnB,gBAAiB,CACf,GAAGA,EAAO,YAAY,gBACtB,kBAAmB,GACnB,eAAgB,GAChB,eAAgB,GAChB,gBAAiB,EAC3B,CACA,GAGO,CAAC0c,GAAmB,CAACC,EAAyB,OACjD,MAAME,EAAaznB,EAAY,cAAcmL,EAAS,KAAK,EAC3D,GAAI,EAACsc,GAAA,MAAAA,EAAY,SAAUA,EAAW,KAAM,CAC1CnpB,EAAQ,IAAI,wDAAyD,CAAC6M,EAAS,KAAK,CAAC,EACrF,MACN,CAEO,KAAK,KAAK,OAASA,EAAS,OAAS/N,GAAe,MAAQ+N,EAAS,OAAS/N,GAAe,UACxEqqB,GAAcA,EAAW,QAAWA,EAAW,KACrE7c,EAAO,QAAU,GAWvB,CAKE,OAAO,yBAAyBmB,EAAKC,EAAMlO,EAAM,ClCx4B5C,IAAAM,EAAAwB,EkC04BH,GADAtB,EAAQ,IAAI,qCAAsC,CAACyN,CAAG,CAAC,EACnDA,EAAI,oBAAqB,OAE7B,MAAM2b,EAAgB1b,EAAK,cAAc,wBAAwB,EACjE,GAAK0b,IAEDtpB,EAAA2N,EAAI,SAAJ,MAAA3N,EAAY,gBAAiBwB,EAAAmM,EAAI,SAAJ,MAAAnM,EAAY,QAAS,CACpD,MAAM+nB,EAAkBD,EAAc,MAChCE,EAAgB7b,EAAI,OAAO,QAE7B4b,IAAoBC,IACtB7b,EAAI,oBAAsB,GAE1B,WAAW,IAAM,CACf,MAAM8b,EAAc,IAAI,MAAM,SAAU,CACtC,QAAS,GACT,WAAY,EACxB,CAAW,EACDH,EAAc,cAAcG,CAAW,CACxC,EAAE,EAAE,EAEb,CACA,CAKE,OAAO,kBAAkB9N,EAAU5b,EAAS,CAC1C,GAAG,CAAC4b,EAAS,QAAU,OACvB,MAAM+N,EAAc,oBAAoB/N,EAAS,EAAE,GAC7CvU,EAAWxI,EAAa,EACxB+qB,EAAoBriB,EAAa,IAAIF,EAAS,mBAAmB,GAAG,EAEtEmgB,GAAU,eAAemC,CAAW,GACtC,aAAanC,GAAU,eAAemC,CAAW,CAAC,EAGpDnC,GAAU,eAAemC,CAAW,EAAI,WAAW,IAAM,CACvD,IAAIE,EAAiB,EAErB,OAAOD,EAAiB,CACtB,IAAK,GACHC,EAAiB,EAAG,MACtB,IAAK,GACHA,EAAiB,EAAG,MACtB,QACE,MACV,CAEM,KAAK,KAAK,QAAQ,QAAQva,GAAKA,EAAE,UAAU,GAAO,CAAE,cAAe,EAAO,CAAA,CAAC,EAE3E,MAAMwa,EAAiB,CAAE,EACzB,QAAQva,KAAS,OAAO,OAAO,WAC1BA,EAAM,SAAS,aAAesa,GAAkBjO,EAAS,MAAM,SAASrM,EAAM,OAAO,EAAEqM,EAAS,EAAErM,EAAM,OAAO,EAAEqM,EAAS,CAAC,GAC5HkO,EAAe,KAAKva,CAAK,EAI7Bua,EAAe,QAAQ,CAACva,EAAOvH,IAAM,CACnCuH,EAAM,UAAU,GAAM,CACpB,cAAevH,IAAM,EACrB,eAAgB,EAC1B,CAAS,CACT,CAAO,EAEG8hB,EAAe,OAAS,GAC1B,KAAK,KAAK,kBAAkB,CAAE,QAAS,KAAK,KAAK,QAAQ,IAAK,EAGhE,OAAOtC,GAAU,eAAemC,CAAW,CAC5C,EAAE,EAAE,CACT,CACA,EA77BEzpB,EADWsnB,GACJ,kBAAkB,IAAI,KAC7BtnB,EAFWsnB,GAEJ,cAAc,MACrBtnB,EAHWsnB,GAGJ,iBAAiB,CAAE,GAHrB,IAAMuC,GAANvC,GCMA,MAAMwC,EAAgB,CAiB3B,aAAa,cAAcpX,EAAa,CnC1CnC,IAAA3S,EAAAwB,EmC2CH,MAAMwoB,EAAgBpoB,EAAY,WAAW/C,EAAW,UAAU,EAElE,GADAqB,EAAQ,IAAI,gBAAiB,CAACyS,CAAW,CAAC,EACtC,KAAK,KAAK,KAAM,OAEpB,IAAI3L,EACJ,GAAI2L,EAAY,aAAc,CAC5B,MAAMH,GAAWxS,EAAA,KAAK,OAAO,SAAZ,YAAAA,EAAoB,OAAO,IAAI2S,EAAY,SAE5D,GADA3L,EAAQwL,GAAA,YAAAA,EAAU,MACd,CAACxL,EAAO,CACV9G,EAAQ,KAAK,yBAA0ByS,EAAY,OAAO,EAC1D,MACR,CACA,MACM3L,EAAQ,KAAK,OAAO,IAAI2L,EAAY,OAAO,EAGzC,CAAC3L,GAAS,CAACA,EAAM,UAIjB2L,EAAY,mBACdnR,EAAAmR,EAAY,iBAAZ,YAAAnR,EAA4B,QAAS,IAGrCtB,EAAQ,IAAI,oCAAqC,CAACyS,CAAW,CAAC,EAC9DxD,GAAkBwD,EAAY,cAAc,GAG3CqX,GAAiBrX,EAAY,kBAAkB,cAChDA,EAAY,kBAAkB,YAAc,CAC1C,GAAGA,EAAY,kBAAkB,YACjC,YAAa,GACb,kBAAmB,GACnB,cAAe,CACb,GAAGA,EAAY,kBAAkB,YAAY,cAC7C,YAAa,GACb,kBAAmB,EACpB,EACD,gBAAiB,CACf,GAAGA,EAAY,kBAAkB,YAAY,gBAC7C,YAAa,GACb,kBAAmB,EAC7B,CACO,GAGHrB,EAAoB,OAAO,OAAQ,GAAI,CACrC,MAAO,GACP,UAAW,CACT,MAAOtK,EAAM,KACb,SAAU2L,EAAY,SACtB,QAASA,EAAY,QACrB,GAAIA,EAAY,kBAAkB,cAAgB,IAC1D,CACA,CAAK,EAED,KAAK,UAAU,KAAK,CAAE,MAAA3L,EAAO,YAAA2L,CAAW,CAAE,EAC1CzS,EAAQ,IAAI,iCAAkC,CAAC,KAAK,UAAU,OAAQ,KAAK,gBAAgB,CAAC,EAEvF,KAAK,kBACR,KAAK,gBAAiB,EAE5B,CAKE,aAAa,iBAAkB,CAC7B,GAAI,KAAK,UAAU,SAAW,EAAG,CAC/B,KAAK,iBAAmB,GACxB,MACN,CAEI,KAAK,iBAAmB,GACxB,KAAM,CAAE,MAAA8G,EAAO,YAAA2L,CAAW,EAAK,KAAK,UAAU,MAAO,EAErDzS,EAAQ,IAAI,+BAAgC,CAAC8G,EAAM,KAAM,KAAK,UAAU,OAAQ,WAAW,CAAC,EAE5F,GAAI,CACF,MAAM,KAAK,yBAAyBA,EAAO2L,CAAW,CACvD,OAAQxR,EAAO,CACdjB,EAAQ,MAAM,iCAAkC,CAACiB,CAAK,CAAC,CAC7D,CAEI,WAAW,IAAM,CACf,KAAK,gBAAiB,CACvB,EAAE,GAAG,CACV,CAOE,aAAa,yBAAyB6F,EAAO2L,EAAa,CnCzIrD,IAAA3S,EAAAwB,EmC0IH,MAAM4F,EAAWxI,EAAa,EACJ0I,EAAa,IAAIF,EAAS,kBAAkB,GAAG,EAEzElH,EAAQ,IAAI,2BAA4B,CAAC8G,EAAO2L,CAAW,CAAC,EAC5DzS,EAAQ,IAAI,+CAAgD,CAACyS,EAAY,YAAa,OAAOA,EAAY,WAAW,CAAC,EAErH,GAAI,CACF,MAAM1F,GAAqBjN,EAAA2S,EAAY,WAAZ,YAAA3S,EAAsB,cAC3C4S,IAAapR,EAAAmR,EAAY,kBAAkB,QAA9B,YAAAnR,EAAsC,KAAM,CAC7D,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACV,EAGKiE,EAAe,CACnB,UAAW,EAFY,KAAK,KAAK,KAAOkN,EAAY,eAAiB,GAGtE,EAEKsX,EAAiBtX,EAAY,kBAAkB,SAC/CuX,EAAkB,KAAK,SAAS,IAAI,OAAQ,UAAU,EAGtDjX,EAAgB,CACpB,SAHoBgX,GAAkBC,EAItC,OAAQvX,EAAY,kBAAkB,cAAgB,EACvD,EAEKwX,EAAqB,CACzB,QAASxX,EAAY,QACrB,WAAYA,EAAY,WACxB,OAAQA,EAAY,kBACpB,YAAaA,EAAY,WAC1B,EAEK7R,EAAUwV,EAAarJ,CAAkB,EAC3CnM,EACF,MAAMA,EAAQkG,EAAOmjB,EAAoBvX,EAAYnN,EAAcwN,CAAa,GAEhF/S,EAAQ,KAAK,mCAAmC+M,CAAkB,EAAE,EACpEqE,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,sCAAuC,CACzF,MAAOtK,EAAM,MAAQ,eAC/B,CAAS,CAAC,EAEL,OAAQ7F,EAAO,CACdjB,EAAQ,MAAM,gCAAiC,CAACiB,CAAK,CAAC,EACtDmQ,EAAoB,OAAO,QAAS,KAAK,KAAK,OAAO,sCAAuC,CAC1F,MAAOtK,EAAM,MAAQ,eAC7B,CAAO,CAAC,CACR,CACA,CACA,CA/JE/G,EALW8pB,GAKJ,YAAY,CAAE,GAMrB9pB,EAXW8pB,GAWJ,mBAAmB,ICjBrB,MAAMK,EAAK,CAKhB,OAAO,MAAM,CACXhpB,GAAW,WAAWgpB,GAAK,mBAAmB,EAC9CN,GAAU,WAAY,CAC1B,CAGE,OAAO,eAAgB,CACrB,OAAOzoB,GAAe,cAAe,CACzC,CAEE,OAAO,kBAAkBL,EAAQO,EAAY,CAC3CF,GAAe,kBAAkBL,EAAQO,CAAU,CACvD,CAME,aAAa,kBAAkBoR,EAAa,CAC1C,OAAAzS,EAAQ,IAAI,yBAA0ByS,CAAW,EAC1CoX,GAAgB,cAAcpX,CAAW,CACpD,CAKE,OAAO,qBAAsB,CAC3BvR,GAAW,aAAarC,GAAa,cAAeqrB,GAAK,aAAa,EACtEhpB,GAAW,aAAarC,GAAa,kBAAmBqrB,GAAK,iBAAiB,EAC9EhpB,GAAW,aAAarC,GAAa,kBAAmBqrB,GAAK,iBAAiB,CAClF,CACA,CC/CAA,GAAK,KAAM"}