{"version":3,"file":"flash-rolls-5e.js","sources":["../../src/constants/Settings.mjs","../../src/constants/General.mjs","../../src/constants/Hooks.mjs","../../src/components/LogUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/DiceConfigUtil.mjs","../../src/components/helpers/GeneralUtil.mjs","../../src/components/dialogs/ModuleSettingsMenu.mjs","../../src/constants/SettingMenus.mjs","../../src/components/SettingsUtil.mjs","../../src/components/dialogs/gm-dialogs/GMRollConfigMixin.mjs","../../src/components/helpers/Helpers.mjs","../../src/components/helpers/RollHelpers.mjs","../../src/components/dialogs/gm-dialogs/GMRollConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMHitDieConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMSkillToolConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMDamageConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMAttackConfigDialog.mjs","../../src/components/helpers/ModuleHelpers.mjs","../../src/components/ActivityUtil.mjs","../../src/components/dialogs/CustomRollDialog.mjs","../../src/components/ChatMessageUtils.mjs","../../src/components/RollHandlers.mjs","../../src/components/helpers/RollValidationHelpers.mjs","../../src/components/RollInterceptor.mjs","../../src/components/utils/RollMenuActorUtil.mjs","../../src/components/utils/RollMenuConfigUtil.mjs","../../src/components/utils/RollMenuDragUtil.mjs","../../src/components/FavoriteActorsUtil.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/SidebarUtil.mjs","../../src/components/HooksUtil.mjs","../../src/components/RollRequestUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    generalSettings: {\n      tag: \"flash5e-general-settings\", \n      label: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.label\"),\n      title: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.title\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.hint\"),\n      propType: Object,\n      fields: [\n        'showMenuOnLoad',\n        'rollInterceptionEnabled',\n        'useGMTargetTokens',\n        'templateAutoTarget',\n        'showOfflineNotifications',\n        'initiateCombatOnRequest',\n        'showOnlyPCsWithToken'\n      ],\n      default: {\n        showMenuOnLoad: false,\n        rollInterceptionEnabled: true,\n        useGMTargetTokens: true,\n        templateAutoTarget: 1,\n        showOfflineNotifications: true,\n        initiateCombatOnRequest: true,\n        showOnlyPCsWithToken: true\n      },\n      scope: SETTING_SCOPE.world,\n      config: false, \n      requiresReload: false \n    },\n\n    groupRollsSettings: {\n      tag: \"flash5e-group-rolls-settings\", \n      label: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.label\"),\n      title: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.title\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.hint\"),\n      propType: Object,\n      fields: [\n        'groupRollsMsgEnabled',\n        'groupRollResultMode',\n        'showGroupDCToPlayers'\n      ],\n      default: {\n        groupRollsMsgEnabled: true,\n        groupRollResultMode: 1,\n        showGroupDCToPlayers: false\n      },\n      scope: SETTING_SCOPE.world,\n      config: false, \n      requiresReload: false \n    },\n\n    showGroupDCToPlayers: {\n      tag: \"show-group-dc-to-players\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.showGroupDCToPlayers.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.showGroupDCToPlayers.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n    \n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    \n    groupRollsMsgEnabled: {\n      tag: \"group-roll-enabled\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollsMsgEnabled.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollsMsgEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    groupRollResultMode: {\n      tag: \"group-roll-result-mode\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.hint\"),\n      propType: Number, \n      inputType: SETTING_INPUT.select,\n      choices: {\n        1: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.choices.1\"),\n        2: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.choices.2\"),\n        3: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.choices.3\"),\n        4: game.i18n.localize(\"FLASH_ROLLS.settings.groupRollResultMode.choices.4\")\n      },\n      default: 1,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    consumptionConfigMode: {\n      tag: \"consumption-config-mode\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.hint\"),\n      propType: Number, \n      inputType: SETTING_INPUT.select,\n      choices: {\n        1: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.choices.1\"),\n        2: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.choices.2\"),\n        3: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.choices.3\"),\n        4: game.i18n.localize(\"FLASH_ROLLS.settings.consumptionConfigMode.choices.4\")\n      },\n      default: 4,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n\n    skipRollDialog: {\n      tag: \"skip-roll-dialog\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.skipRollDialog.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.skipRollDialog.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n    rollInterceptionEnabled: {\n      tag: \"roll-interception-enabled\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.rollInterceptionEnabled.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.rollInterceptionEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n    publicPlayerRolls: {\n      tag: \"public-player-rolls\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.publicPlayerRolls.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.publicPlayerRolls.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n\n    showOfflineNotifications: {\n      tag: \"show-offline-notifications\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.showOfflineNotifications.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.showOfflineNotifications.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    showRequestNotifications: {\n      tag: \"show-request-notifications\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.showRequestNotifications.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.showRequestNotifications.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    initiateCombatOnRequest: {\n      tag: \"initiate-combat-on-request\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.initiateCombatOnRequest.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.initiateCombatOnRequest.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    showOnlyPCsWithToken: {\n      tag: \"show-only-pcs-with-token\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.showOnlyPCsWithToken.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.showOnlyPCsWithToken.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    favoriteActorsList: {\n      tag: \"favorite-actors-list\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.favoriteActorsList.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.favoriteActorsList.hint\"),\n      propType: Array,\n      inputType: SETTING_INPUT.text,\n      default: [],\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    templateAutoTarget: { \n      tag: \"template-auto-target\", \n      label: game.i18n.localize(\"FLASH_ROLLS.settings.templateAutoTarget.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.templateAutoTarget.hint\"),\n      propType: Number,\n      choices: {\n        1: game.i18n.localize(\"FLASH_ROLLS.settings.templateAutoTarget.choices.all.label\"),\n        2: game.i18n.localize(\"FLASH_ROLLS.settings.templateAutoTarget.choices.notFriendly.label\"),\n        3: game.i18n.localize(\"FLASH_ROLLS.settings.templateAutoTarget.choices.none.label\"),\n      },\n      inputType: SETTING_INPUT.select,\n      default: 1,\n      scope: SETTING_SCOPE.world,\n      config: false\n    },\n\n    debugMode: {\n      tag: \"debug-mode-on\", \n      label: game.i18n.localize(\"FLASH_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n\n    showMenuOnLoad: {\n      tag: \"show-menu-on-load\",\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.showMenuOnLoad.label\"),\n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.showMenuOnLoad.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.client,\n      config: true\n    }\n  };\n};\n","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"flash-rolls-5e\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cFlash Rolls 5e`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const SOCKET_CALLS = {\n  receiveDiceConfig: \"receiveDiceConfig\",\n  getDiceConfig: \"getDiceConfig\",\n  handleRollRequest: \"handleRollRequest\"\n};\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", requestType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", requestType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", requestType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", requestType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", requestType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", requestType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" }, // Recharge rolls\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" }, // D20 test\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" }, // Short rest\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" }, // Long rest\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\n/**\n * Roll types used throughout the module\n * @constant\n * @type {Object}\n */\nexport const ROLL_TYPES = {\n  ABILITY: \"ability\",\n  ABILITY_CHECK: \"abilitycheck\",\n  ATTACK: \"attack\",\n  CONCENTRATION: \"concentration\",\n  CUSTOM: \"custom\",\n  DEATH_SAVE: \"deathsave\",\n  FORMULA: \"formula\",\n  DAMAGE: \"damage\",\n  HEALING: \"healing\",\n  HIT_DIE: \"hitdie\",\n  INITIATIVE: \"initiative\",\n  INITIATIVE_DIALOG: \"initiativedialog\",\n  ITEM_SAVE: \"itemsave\",\n  SAVE: \"save\",\n  SAVING_THROW: \"savingthrow\",\n  SKILL: \"skill\",\n  TOOL: \"tool\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: ROLL_TYPES.ABILITY_CHECK, label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: ROLL_TYPES.SAVING_THROW, label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SKILL: { name: ROLL_TYPES.SKILL, label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: ROLL_TYPES.TOOL, label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: ROLL_TYPES.CONCENTRATION, label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: ROLL_TYPES.INITIATIVE, label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: ROLL_TYPES.DEATH_SAVE, label: \"Death Save\", subList: null, actorPath: '' },\n  // ITEM_SAVE: { name: ROLL_TYPES.ITEM_SAVE, label: \"Item Save\", subList: null, actorPath: '' },\n  HIT_DIE: { name: ROLL_TYPES.HIT_DIE, label: \"Hit Die\", subList: null, actorPath: '' },\n  CUSTOM: { name: ROLL_TYPES.CUSTOM, label: \"Custom Roll\", subList: null, actorPath: '' },\n}\n\n/**\n * Module configuration object\n * @constant\n * @type {Object}\n */\nexport const MODULE = {\n  ID: MODULE_ID,\n  ROLL_REQUEST_OPTIONS: ROLL_REQUEST_OPTIONS\n}\n","/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessageHTML\",\n  RENDER_CHAT_LOG: \"renderChatLog\",\n  RENDER_CHAT_INPUT: \"renderChatInput\",\n  // RENDER_SIDEBAR_TAB: \"renderSidebarTab\",\n  CHANGE_SIDEBAR_TAB: \"changeSidebarTab\", \n  RENDER_SIDEBAR: \"renderSidebar\",\n  RENDER_APPLICATION_V2: \"renderApplicationV2\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\",\n  REFRESH_MEASURED_TEMPLATE: \"refreshMeasuredTemplate\",\n  CONTROL_TOKEN: \"controlToken\",\n  UPDATE_TOKEN: \"updateToken\",\n  DELETE_TOKEN: \"deleteToken\",\n  CREATE_TOKEN: \"createToken\",\n  UPDATE_ACTOR: \"updateActor\",\n  UPDATE_ITEM: \"updateItem\",\n  CREATE_ITEM: \"createItem\",\n  DELETE_ITEM: \"deleteItem\",\n  UPDATE_SETTING: \"updateSetting\",\n  GET_ACTOR_CONTEXT_OPTIONS: \"getActorContextOptions\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * Midi-QOL hooks\n */\nexport const HOOKS_MIDI_QOL = {\n  READY: \"midi-qol.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheckV2\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrowV2\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheckV2\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrowV2\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_CONFIGURE_INITIATIVE: \"dnd5e.preConfigureInitiative\",\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  // PRE_ROLL_INITIATIVE_DIALOG_V2: \"dnd5e.preRollInitiativeDialogV2\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_BUILD_ROLL_CONFIG: \"dnd5e.postBuildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {Array|*} data - array of items to log on console, or a single item that will be wrapped in an array\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debug-mode-on\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      \n      // Ensure data is an array\n      const dataArray = Array.isArray(data) ? data : [data];\n      console.log(...DEBUG_TAG, ref, ...dataArray);\n    } catch(e) {\n      // If settings aren't available yet, check bypassSettings\n      if (bypassSettings || LogUtil.debugOn) {\n        // Ensure data is an array\n        const dataArray = Array.isArray(data) ? data : [data];\n        console.log(...DEBUG_TAG, ref, ...dataArray);\n      }\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {Array|*} data - array of items to log on console, or a single item that will be wrapped in an array\n   */\n  static warn(ref=\"\", data=[]) {\n    // Ensure data is an array\n    const dataArray = Array.isArray(data) ? data : [data];\n    console.warn(...DEBUG_TAG, ref, ...dataArray);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {Array|*} data - array of items to log on console, or a single item that will be wrapped in an array\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, data=[], options = { ui: false, console: true, permanent: false }) {\n    // Ensure data is an array\n    const dataArray = Array.isArray(data) ? data : [data];\n    \n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef, ...dataArray);\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    LogUtil.log('initialize', [callbackFunc]);\n\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"FLASH_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n      } catch (e) {\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    LogUtil.log('registerCall', [name]);\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n    } else {\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log('sendMessage', [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    LogUtil.log('execForGMs', [handler, ...parameters]);\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function|string} handler - The function to execute or the name of a registered function.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    LogUtil.log('execForUser #0', [handler, userId, ...parameters]);\n    if (!SocketUtil.socket) {\n        return;\n    }\n\n    LogUtil.log('execForUser #1', [userId === game.user.id]);\n    if(userId === game.user.id){\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    LogUtil.log('execForUser #2', [SocketUtil._activeExecutions.has(executionKey)]);\n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n      const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n      LogUtil.log('execForUser #3 - response', [resp]);\n      return resp;\n    } catch (error) {\n      LogUtil.error('execForUser #4 - error', [error]);\n      return null;\n    } finally {\n      LogUtil.log('execForUser #5 - success', []);\n      // Always clean up, even if there was an error\n      SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    LogUtil.log('serializeForTransport', [data, hasRolls]);\n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    LogUtil.log('deserializeFromTransport', [data, hasRolls]);\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { SocketUtil } from './SocketUtil.mjs';\n\n/**\n * Utility class for managing dice configurations across users\n */\nexport class DiceConfigUtil {\n  /**\n   * @type {Object} Current user's dice configuration\n   */\n  static diceConfig = {};\n  \n  /**\n   * @type {Object} All player dice configurations (GM only)\n   */\n  static playerDiceConfigs = {};\n  \n  /**\n   * Initialize the dice configuration for current user\n   */\n  static initialize() {\n    this.setDiceConfig();\n  }\n  \n  /**\n   * Set dice configuration from client settings\n   * @returns {Object} The dice configuration\n   */\n  static setDiceConfig() {\n    if (!game.user) return {};\n    \n    const clientSettings = game.settings.storage.get(\"client\");\n    this.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Get the current user's dice configuration\n   * @returns {Object} The dice configuration\n   */\n  static getDiceConfig() {\n    if (!game.user) return {};\n    \n    // Ensure we have the latest configuration\n    this.setDiceConfig();\n    \n    // If GM, send config to GMs via socket\n    if (game.user.isGM) {\n      this._sendDiceConfigToGMs();\n    }\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Send dice configuration to all GMs\n   * @private\n   */\n  static _sendDiceConfigToGMs() {\n    SocketUtil.execForGMs('receiveDiceConfig', game.user.id, this.diceConfig);\n  }\n  \n  /**\n   * Receive and store dice configuration from a player\n   * @param {string} userId - The user ID\n   * @param {string} diceConfig - The serialized dice configuration\n   */\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId === game.user?.id) {\n      this.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n    }\n  }\n  \n  /**\n   * Get dice configuration for a specific user\n   * @param {string} userId - The user ID\n   * @returns {Object} The user's dice configuration\n   */\n  static getUserDiceConfig(userId) {\n    if (userId === game.user?.id) {\n      return this.diceConfig;\n    }\n    \n    return this.playerDiceConfigs[userId] || {};\n  }\n  \n  /**\n   * Request dice configuration from a specific user\n   * @param {string} userId - The user ID to request from\n   */\n  static requestDiceConfigFromUser(userId) {\n    SocketUtil.execForUser('getDiceConfig', userId);\n  }\n  \n  /**\n   * Request dice configuration from all active non-GM users\n   */\n  static requestDiceConfigFromAllPlayers() {\n    if (!game.user?.isGM) return;\n    \n    game.users.forEach(user => {\n      if (user.active && !user.isGM && user.id !== game.user.id) {\n        this.requestDiceConfigFromUser(user.id);\n      }\n    });\n  }\n  \n  /**\n   * Clear all stored player dice configurations\n   */\n  static clearPlayerConfigs() {\n    this.playerDiceConfigs = {};\n  }\n  \n  /**\n   * Check if a user has dice configuration stored\n   * @param {string} userId - The user ID\n   * @returns {boolean} True if configuration exists\n   */\n  static hasUserConfig(userId) {\n    if (userId === game.user?.id) {\n      return !!this.diceConfig;\n    }\n    \n    return !!this.playerDiceConfigs[userId];\n  }\n}","import { LogUtil } from \"../LogUtil.mjs\";\nimport { SettingsUtil } from \"../SettingsUtil.mjs\";\n\n/**\n * Utility class providing general-purpose functionality for the module */\nexport class GeneralUtil {\n  /**\n   * Checks if module is currently installed and active\n   * @param {string} moduleName \n   * @returns {boolean}\n   */\n  static isModuleOn(moduleName){\n    const module = game.modules?.get(moduleName);\n    return Boolean(module?.active);\n  }\n\n  /**\n   * Finds and returns the first element matching the selector within the parent element\n   * @param {HTMLElement} parent - The parent element to search within\n   * @param {string} selector - CSS selector string\n   * @returns {HTMLElement|null} The first matching element or null if not found\n   */\n  static html(parent, selector) {\n    return parent.querySelector(selector);\n  }\n\n  /**\n   * Gets the full width of an element including margins and borders\n   * @param {HTMLElement} element - The element to measure\n   * @returns {number} The full width in pixels\n   */\n  static getFullWidth(element) {\n    const style = window.getComputedStyle(element);\n    if (style.width === '0px') {\n      return 0;\n    }\n    return element.offsetWidth;\n  }\n\n  /**\n   * Prevents dialog flicker by applying opacity transition\n   * @param {HTMLElement} element - The dialog element to apply the transition to\n   * @param {number} delay - Delay in milliseconds before fading in (default: 100)\n   */\n  static preventDialogFlicker(element, delay = 100) {\n    if (!element) return;\n    \n    element.style.opacity = '0';\n    element.style.transition = 'opacity 0.15s ease-in';\n    \n    setTimeout(() => {\n      if (element) {\n        element.style.opacity = '1';\n      }\n    }, delay);\n  }\n\n  /**\n   * Adds CSS variables to a style element\n   * @param {string} varName \n   * @param {string} varValue \n   */\n  static addCSSVars(varName, varValue) {\n    let bodyStyle = document.querySelector('#flash5e-vars');\n    \n    if (!bodyStyle) {\n      const body = document.querySelector('body.flash5e');\n      if(!body){return}\n      bodyStyle = document.createElement('style');\n      bodyStyle.id = 'flash5e-vars';\n      bodyStyle.textContent = 'body.flash5e {\\n}\\n';\n      body.prepend(bodyStyle);\n    }\n    \n    let cssText = bodyStyle.textContent;\n    \n    let ruleStart = cssText.indexOf('body.flash5e {');\n    let ruleEnd = cssText.indexOf('}', ruleStart);\n    \n    if (ruleStart === -1) {\n      cssText = 'body.flash5e {\\n}\\n';\n      ruleStart = 0;\n      ruleEnd = cssText.indexOf('}');\n    }\n    \n    const rulePart = cssText.substring(ruleStart + 'body.flash5e {'.length, ruleEnd);\n    \n    const declarations = rulePart.split(';')\n      .map(decl => decl.trim())\n      .filter(decl => decl !== '');\n    \n    const varsMap = {};\n    declarations.forEach(decl => {\n      const parts = decl.split(':');\n      if (parts.length >= 2) {\n        const name = parts[0].trim();\n        const value = parts.slice(1).join(':').trim(); // Handle values that might contain colons\n        if (name) varsMap[name] = value;\n      }\n    });\n    \n    if (varName.includes('i18n') && \n        typeof varValue === 'string' && \n        !varValue.startsWith('\"') && \n        !varValue.startsWith(\"'\") && \n        !varValue.match(/^url\\(|^rgba?\\(|^hsla?\\(/)) {\n      varValue = `\"${varValue}\"`;\n    }\n    \n    varsMap[varName] = varValue;\n    \n    const newRuleContent = Object.entries(varsMap)\n      .map(([name, value]) => `  ${name}: ${value};`)\n      .join('\\n');\n    \n    const newCss = \n      cssText.substring(0, ruleStart) + \n      'body.flash5e {\\n' + \n      newRuleContent + \n      '\\n}' + \n      cssText.substring(ruleEnd + 1);\n    \n    bodyStyle.textContent = newCss;\n  }\n  \n  /**\n   * Gets the offset bottom of an element\n   * @param {HTMLElement} element \n   * @returns {number}\n   */\n  static getOffsetBottom(element) {\n    const offsetTop = element.offsetTop;\n    const elementHeight = element.offsetHeight;\n    return window.innerHeight - (offsetTop + elementHeight);\n  }\n\n  /**\n   * Retrieves a list of all available fonts\n   * @returns {Promise<string[]>}\n   */\n  static async getAllFonts() {\n    const foundryFonts = new Set(Object.keys(CONFIG.fontDefinitions));\n    const customFontsObj = game.settings.get(\"core\", \"fonts\") || {};\n    const customFonts = Object.entries(customFontsObj).map(([fontFamily]) => fontFamily);\n  \n    const cssImportedFonts = await this.processStyleSheets();\n  \n    const allFonts = Array.from(new Set([\n      ...foundryFonts,\n      ...customFonts,\n      ...cssImportedFonts\n    ]))\n    .filter(f => !/FontAwesome|Font Awesome|FoundryVTT/.test(f))\n    .map(f => f.replace(/['\"]/g, '').trim())\n    .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n\n    return allFonts || [];\n  }\n\n  // Helper function to format font names\n  /**\n   * Formats a font name by cleaning it and wrapping it in quotes if it contains spaces\n   * @param {string} fontName - The font name to format\n   * @returns {string} The formatted font name\n   */\n  static wrapFontName = (fontName) => {\n    const cleanName = fontName.replace(/['\"`]/g, '');\n    return cleanName.includes(' ') ? `\"${cleanName}\"` : cleanName;\n  }\n\n  /**\n   * Adds custom CSS to a style element\n   * @param {string} content - CSS content to add\n   * @param {string} [id='flash5e-custom-css'] - ID for the style element\n   * @param {boolean} [checkForDuplicates=true] - Whether to check for duplicate rules\n   */\n  static addCustomCSS(content, id = 'flash5e-custom-css', checkForDuplicates = true) {\n    if (!content) {\n      return;\n    }\n    \n    let customStyle = document.querySelector('#' + id);\n    \n    if (!customStyle) {\n      customStyle = document.createElement('style');\n      customStyle.id = id;\n      customStyle.textContent = '';\n      document.head.appendChild(customStyle);\n    }\n\n    const importRegex = /@import\\s+(?:url\\()?\\s*['\"]?[^'\")]+['\"]?\\s*\\)?\\s*;/g;\n    const imports = [];\n    let contentWithoutImports = content;\n    let match;\n    while ((match = importRegex.exec(content)) !== null) {\n      imports.push(match[0]);\n    }\n    \n    contentWithoutImports = content.replace(importRegex, '').trim();\n    \n    if (!checkForDuplicates) {\n      customStyle.textContent = imports.join('\\n') + (imports.length ? '\\n\\n' : '') + contentWithoutImports;\n      return;\n    }\n    \n    if (!customStyle.textContent.includes(contentWithoutImports)) {\n      const currentContent = customStyle.textContent;\n      const existingImports = [];\n      let currentMatch;\n      while ((currentMatch = importRegex.exec(currentContent)) !== null) {\n        existingImports.push(currentMatch[0]);\n      }\n      \n      const currentContentWithoutImports = currentContent.replace(importRegex, '').trim();\n      const newImports = imports.filter(imp => !existingImports.includes(imp));\n      const allImports = [...existingImports, ...newImports];\n      customStyle.textContent = allImports.join('\\n') + \n                               (allImports.length ? '\\n\\n' : '') + \n                               currentContentWithoutImports +\n                               (currentContentWithoutImports && contentWithoutImports ? '\\n\\n' : '') +\n                               contentWithoutImports;\n    }\n  }\n  \n  /**\n   * Performs a smooth scroll with custom duration\n   * @param {HTMLElement} element - The element to scroll\n   * @param {number} to - The target scroll position\n   * @param {string} [direction=\"horizontal\"] - The scroll direction (\"horizontal\" or \"vertical\")\n   * @param {number} [duration=300] - Duration of the animation in milliseconds\n   * @param {Function} [onComplete] - Optional callback to run when animation completes\n   * @returns {number} Animation ID that can be used to cancel the animation\n   */\n  static smoothScrollTo(element, to, direction = \"horizontal\", duration = 300, onComplete = null) {\n    // Cancel any existing animation if it has the same ID as the element\n    const animationId = element.dataset.scrollAnimationId;\n    if (animationId) {\n      cancelAnimationFrame(Number(animationId));\n    }\n    \n    // Determine if we're scrolling horizontally or vertically\n    const isHorizontal = direction === \"horizontal\";\n    const start = isHorizontal ? element.scrollLeft : element.scrollTop;\n    const change = to - start;\n    \n    // If there's no change or the element isn't scrollable, exit early\n    if (change === 0) {\n      if (onComplete) onComplete();\n      return null;\n    }\n    \n    const startTime = performance.now();\n    \n    const animateScroll = (currentTime) => {\n      const elapsedTime = currentTime - startTime;\n      \n      if (elapsedTime >= duration) {\n        if (isHorizontal) {\n          element.scrollLeft = to;\n        } else {\n          element.scrollTop = to;\n        }\n        \n        delete element.dataset.scrollAnimationId;\n        if (onComplete) onComplete();\n        return;\n      }\n      \n      const progress = elapsedTime / duration;\n      const easeProgress = progress < 0.5 \n        ? 2 * progress * progress \n        : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n      \n      if (isHorizontal) {\n        element.scrollLeft = start + change * easeProgress;\n      } else {\n        element.scrollTop = start + change * easeProgress;\n      }\n      \n      const newAnimationId = requestAnimationFrame(animateScroll);\n      element.dataset.scrollAnimationId = newAnimationId;\n      return newAnimationId;\n    };\n    \n    const newAnimationId = requestAnimationFrame(animateScroll);\n    element.dataset.scrollAnimationId = newAnimationId;\n    return newAnimationId;\n  }\n\n  /**\n   * Opens a confirmation dialog to reload the page using DialogV2\n   * @param {string} [title=\"\"] - The title of the confirmation dialog\n   * @param {string} [content=\"\"] - The content message\n   * @param {Object} [options={}] - Additional dialog options\n   * @returns {Promise<boolean>} Resolves to true if confirmed, false otherwise\n   */\n  static confirmReload(\n    title = game.i18n.localize(\"FLASH_ROLLS.ui.reloadRequiredTitle\"), \n    content = game.i18n.localize(\"FLASH_ROLLS.ui.reloadRequiredLabel\"),\n    options = {}) {\n    \n    const dialogConfig = {\n      window: {\n        title\n      },\n      position: {\n        width: 420,\n        height: \"auto\"\n      },\n      content,\n      yes: {\n        label: game.i18n.localize(\"FLASH_ROLLS.ui.reloadButton\"),\n        callback: () => {\n          LogUtil.log(\"Reloading page after confirmation\");\n          window.location.reload();\n          return true;\n        }\n      },\n      no: {\n        label: game.i18n.localize(\"FLASH_ROLLS.ui.cancelButton\"),\n        callback: () => false\n      },\n      defaultYes: false,\n      rejectClose: false\n    };\n    \n    mergeObject(dialogConfig, options);\n    return foundry.applications.api.DialogV2.confirm(dialogConfig);\n  }\n\n  /**\n   * Alias for Foundry's method to render Handlebars template\n   * @param {string} templatePath \n   * @param {Object} data \n   * @returns {Promise<string>} Rendered template HTML\n   */\n  static renderTemplate(templatePath, data){\n    return foundry.applications.handlebars.renderTemplate(templatePath, data);\n  }\n\n  /**\n   * Alias for Foundry's method to load Handlebars template\n   * @param {string} templatePath \n   * @returns {Promise<HandlebarsTemplate>} Loaded template object\n   */\n  static loadTemplate(templatePath){\n    return foundry.applications.handlebars.loadTemplate(templatePath);\n  }\n\n  /**\n   * Alias for Foundry's method to load Handlebars template\n   * @param {string[]} templatePaths \n   * @returns {Promise<HandlebarsTemplate>} Loaded template object\n   */\n  static loadTemplates(templatePaths){\n    if(!Array.isArray(templatePaths)) templatePaths = [templatePaths];\n    return foundry.applications.handlebars.loadTemplates(templatePaths);\n  }\n\n  /**\n   * Validates if a string is a valid CSS rule or selector\n   * @param {string} cssString - CSS rule or selector to validate\n   * @return {boolean} Whether the CSS is valid\n   */\n  static isValidCSSRule(cssString) {\n    if (!cssString || typeof cssString !== \"string\") return false;\n    const trimmedCSS = cssString.trim();\n    if (!trimmedCSS) return false;\n    try {\n      const style = document.createElement(\"style\");\n      const testCSS = `${trimmedCSS} { color: inherit; }`;\n      style.textContent = testCSS;\n      document.head.appendChild(style);\n      const isValid = Boolean(style.sheet && style.sheet.cssRules && style.sheet.cssRules.length > 0);\n      document.head.removeChild(style);\n      return isValid;\n    } catch (error) {\n      LogUtil.log(\"CSS validation error:\", [error, cssString]);\n      return false;\n    }\n  }\n\n  /**\n   * Processes CSS rules with nested selectors to create valid CSS for multiple target selectors\n   * @param {string} cssRules - CSS rules that may contain nested selectors\n   * @param {string} targetSelectors - Comma-separated list of selectors to apply the rules to\n   * @return {string} Valid CSS with properly combined selectors\n   */\n  static processCSSRules(cssRules, targetSelectors) {\n    if (!cssRules || !targetSelectors) return \"\";\n    const parsedCSS = this.#parseCSS(cssRules);\n    const mainStyle = targetSelectors + \" {\\n\" + parsedCSS.baseProperties.join(\"\\n\") + \"\\n}\";\n    const processedRules = [];\n    const rulesByContent = new Map();\n    \n    parsedCSS.nestedRules.forEach(rule => {\n      const { selector, content } = rule;\n      \n      if (selector.startsWith(\"&\")) {\n        const pseudoSelector = selector.substring(1);\n        const combinedSelectors = targetSelectors.split(\",\")\n          .map(s => s.trim())\n          .filter(Boolean)\n          .map(s => s + pseudoSelector)\n          .join(\", \");\n        \n        processedRules.push(`${combinedSelectors} {\\n${content}\\n}`);\n        return;\n      }\n      \n      if (!rulesByContent.has(content)) {\n        rulesByContent.set(content, []);\n      }\n      \n      const selectors = selector.split(\",\").map(s => s.trim());\n      const targetList = targetSelectors.split(\",\").map(s => s.trim()).filter(Boolean);\n      \n      selectors.forEach(nestedSelector => {\n        targetList.forEach(targetSelector => {\n          rulesByContent.get(content).push(`${targetSelector} ${nestedSelector}`);\n        });\n      });\n    });\n    \n    rulesByContent.forEach((selectors, content) => {\n      processedRules.push(`${selectors.join(\", \")} {\\n${content}\\n}`);\n    });\n    \n    return mainStyle + \"\\n\\n\" + processedRules.join(\"\\n\\n\");\n  }\n  \n  /**\n   * Parses CSS string into a structured format with base properties and nested rules\n   * @param {string} css - CSS string to parse\n   * @return {Object} Object with baseProperties array and nestedRules array\n   * @private\n   */\n  static #parseCSS(css) {\n    const baseProperties = [];\n    const nestedRules = [];\n    const lines = css.split(\"\\n\");\n    \n    let currentNested = null;\n    let braceCount = 0;\n    \n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (!line) continue;\n      \n      const openBraces = (line.match(/{/g) || []).length;\n      const closeBraces = (line.match(/}/g) || []).length;\n      \n      if (line.includes(\"{\") && !currentNested) {\n        const selector = line.substring(0, line.indexOf(\"{\")).trim();\n        currentNested = { selector, content: \"\", startLine: i };\n        braceCount = 1;\n        \n        const contentAfterBrace = line.substring(line.indexOf(\"{\") + 1).trim();\n        if (contentAfterBrace && !contentAfterBrace.includes(\"}\")) {\n          currentNested.content += contentAfterBrace + \"\\n\";\n        }\n      } else if (currentNested) {\n        braceCount += openBraces - closeBraces;\n        \n        if (braceCount > 0) {\n          currentNested.content += line + \"\\n\";\n        } \n        else {\n          currentNested.content = currentNested.content.replace(/}\\s*$/, \"\").trim();\n          nestedRules.push(currentNested);\n          currentNested = null;\n        }\n      } else if (!line.includes(\"{\") && !line.includes(\"}\")) {\n        baseProperties.push(line);\n      }\n    }\n    \n    return { baseProperties, nestedRules };\n  }\n\n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  static getActorOwner(actor) {\n    const ownership = actor.ownership || {};\n\n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n\n    if(ownership?.default >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){\n      const user = game.users.filter(user => !user.isGM)[0];\n      if (user) {\n        return user;\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Opens a confirmation dialog to reload the page using DialogV2\n   * @param {string} [title=\"\"] - The title of the confirmation dialog\n   * @param {string} [content=\"\"] - The content message\n   * @param {Object} [options={}] - Additional dialog options\n   * @returns {Promise<boolean>} Resolves to true if confirmed, false otherwise\n   */\n  static confirmReload(\n    title = game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.reloadRequiredTitle\"), \n    content = game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.reloadRequiredLabel\"),\n    options = {}) {\n    \n    const dialogConfig = {\n      window: {\n        title\n      },\n      position: {\n        width: 420,\n        height: \"auto\"\n      },\n      content,\n      yes: {\n        label: game.i18n.localize(\"FLASH_ROLLS.ui.buttons.reloadButton\"),\n        callback: () => {\n          LogUtil.log(\"Reloading page after confirmation\");\n          window.location.reload();\n          return true;\n        }\n      },\n      no: {\n        label: game.i18n.localize(\"FLASH_ROLLS.ui.buttons.cancelButton\"),\n        callback: () => false\n      },\n      defaultYes: false,\n      rejectClose: false\n    };\n    \n    mergeObject(dialogConfig, options);\n    return foundry.applications.api.DialogV2.confirm(dialogConfig);\n  }\n}\n","import { getSettings } from \"../../constants/Settings.mjs\";\nimport { getSettingMenus } from \"../../constants/SettingMenus.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\nimport { SettingsUtil } from \"../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../helpers/GeneralUtil.mjs\";\n\nconst { FormDataExtended } = foundry.utils;\n\nconst { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api;\n\n/**\n * Tabbed Settings Menu application for managing all module settings in a unified interface.\n * Provides a tabbed form interface for accessing all settings categories in one place.\n * @extends {HandlebarsApplicationMixin(ApplicationV2)}\n */ \nexport class ModuleSettingsMenu extends HandlebarsApplicationMixin(ApplicationV2) {\n  static #element;\n  static #activeTab;\n  static #requireReload;\n  static selectedTheme;\n\n  /**\n   * Default application options\n   * @static\n   */\n  static DEFAULT_OPTIONS = {\n    id: \"flash-rolls-settings\",\n    tag: \"form\",\n    window: {\n      icon: \"fas fa-cog\",\n      title: \"FLASH_ROLLS.settings.moduleSettingsMenu.title\",\n      contentClasses: [\"standard-form\", \"crlngn\", \"tabbed-settings\"],\n      resizable: true\n    },\n    position: {\n      width: 700,\n      height: \"auto\"\n    },\n    actions: {\n      redefine: ModuleSettingsMenu.#onReset\n    },\n    form: {\n      handler: ModuleSettingsMenu.#onSubmit,\n      closeOnSubmit: true\n    }\n  }\n\n  /**\n   * Template parts used for rendering the application\n   * @static\n   */\n  static PARTS = {\n    tabs: {\n      template: \"templates/generic/tab-navigation.hbs\",\n      isGMOnly: false\n    },\n    generalSettings: {\n      menuKey: \"generalSettings\",\n      template: \"modules/flash-rolls-5e/templates/settings-general.hbs\",\n      isGMOnly: true\n    },\n    groupRolls: {\n      menuKey: \"groupRollsSettings\",\n      template: \"modules/flash-rolls-5e/templates/settings-group-rolls.hbs\",\n      isGMOnly: true\n    },\n    footer: {\n      template: \"templates/generic/form-footer.hbs\",\n      isGMOnly: false\n    }\n  };\n\n  /**\n   * Tab configuration for the application\n   * @static\n   */\n  static TABS = {\n    primary: {\n      initial: \"generalSettings\",\n      tabs: ModuleSettingsMenu.#getTabs(),\n      labelPrefix: \"\"\n    }\n  };\n\n  /** @inheritDoc */\n  _configureRenderParts(options) {\n    const parts = super._configureRenderParts(options);\n    const restrictedTabs = ModuleSettingsMenu.getRestrictedTabs();\n\n    if(!game.user.isGM){\n      restrictedTabs.forEach(tab => {\n        delete parts[tab];\n      })\n    }\n\n    return parts;\n  }\n\n  /** @inheritDoc */\n  async _prepareContext(options) {\n    const context = await super._prepareContext(options);\n    context.activeTab = options.activeTab || Object.keys(context.tabs)[0];\n    context.isGM = game.user.isGM;\n    \n    return context;\n  }\n\n   /** @inheritDoc */\n   async _preparePartContext(partId, context, options) {\n    const partContext = await super._preparePartContext(partId, context, options);\n    if ( partId in context.tabs ) partContext.tab = partContext.tabs[partId];\n    const SETTINGS = getSettings();\n    const SETTINGS_MENUS = getSettingMenus();\n    const restrictedTabs = ModuleSettingsMenu.getRestrictedTabs();\n\n    if(!game.user.isGM){\n      restrictedTabs.forEach(tab => {\n        delete partContext.tabs[tab];\n      })\n    }\n    switch ( partId ) {\n      case \"tabs\": {\n        break;\n      }\n      case \"footer\": {\n        partContext.buttons = [\n          { type: \"button\", icon: \"\", label: \"FLASH_ROLLS.ui.buttons.reset\", action: 'redefine' },\n          { type: \"submit\", icon: \"\", label: \"FLASH_ROLLS.ui.buttons.save\" }\n        ];\n        break;\n      }\n      default: {\n        partContext.tab = partContext.tabs[partId];\n        const partKey = ModuleSettingsMenu.PARTS[partId]?.menuKey || null;\n        if(partKey){\n          const menuContext = ModuleSettingsMenu.getMenuContext(partKey);\n          \n          if (menuContext.fields) {\n            partContext.fields = {\n              ...partContext.fields,\n              ...menuContext.fields\n            }\n          }\n\n          if (menuContext.fieldDefaults) {\n            partContext.fieldDefaults = {\n              ...partContext.fieldDefaults,\n              ...menuContext.fieldDefaults\n            }\n          }\n\n          if (menuContext.fieldValues) {\n            Object.assign(partContext, menuContext.fieldValues);\n          }\n\n          partContext.sidebarTabs = Object.values(foundry.applications?.sidebar?.tabs || {}).map(tab => ({\n            tabName: tab.tabName,\n            name: tab.name,\n            hideForGM: false,\n            hideForPlayer: false,\n            localizedName: `FLASH_ROLLS.settings.sidebarTabs.${tab.name}`\n          }));\n        }\n        break;\n      }\n    }\n    LogUtil.log(\"_preparePartContext\", [partContext, partId]);\n    return partContext;\n  }\n\n  /**\n   * Retrieves the context object containing fields, field values, and field defaults for a specific menu\n   * @param {string} menuKey - The key of the setting menu\n   * @returns {object} The context object containing fields, field values, and field defaults\n   */\n  static getMenuContext(menuKey){\n    const SETTINGS = getSettings();\n    const fieldNames = SETTINGS[menuKey]?.fields || null;\n    if(!fieldNames) return {};\n    const fields = {};\n    const fieldValues = {};\n    const fieldDefaults = {};\n\n    fieldNames.forEach((fieldName) => {\n      if(SETTINGS[fieldName]) {\n        const value = SettingsUtil.get(SETTINGS[fieldName].tag);\n        fields[fieldName] = SETTINGS[fieldName];\n        fieldValues[fieldName] = value!== undefined ? value : SETTINGS[fieldName].default;\n        fieldDefaults[fieldName] = SETTINGS[fieldName].default;\n      }\n    });\n\n    return {fields: fields, fieldValues: fieldValues, fieldDefaults: fieldDefaults};\n  }\n\n  /**\n   * Retrieves the keys of setting menus that are restricted to GMs\n   * @returns {string[]} Array of setting menu keys\n   */\n  static getRestrictedTabs(){\n    const restrictedTabs = [];\n    Object.entries(ModuleSettingsMenu.PARTS).forEach((entry, index) => {\n      if(entry[0]!==\"tabs\" && entry[0]!==\"footer\" && entry[1].isGMOnly){\n        restrictedTabs.push(entry[0]);\n      }\n    });\n    return restrictedTabs;\n  }\n\n  /**\n   * Handles post-render operations\n   * @protected\n   * @param {object} context - The render context\n   * @param {object} options - The render options\n   */\n  _onRender = (context, options) => {\n    const SETTINGS = getSettings();\n    ModuleSettingsMenu.#element = this.element;\n\n    const hintToggles = ModuleSettingsMenu.#element.querySelectorAll('.toggle-hint');\n    hintToggles.forEach(toggle => {\n      toggle.addEventListener('click', () => {\n        ModuleSettingsMenu.#element.querySelectorAll('p.hint').forEach(p => p.classList.toggle('shown'));\n      });\n    });\n    \n    const selects = ModuleSettingsMenu.#element.querySelectorAll('select[data-current-value]');\n    selects.forEach(select => {\n      const currentValue = String(select.dataset.currentValue);\n      const option = select.querySelector(`option[value=\"${currentValue}\"]`);\n      if (option) {\n        option.selected = true;\n      }\n    });\n  }\n\n  /**\n   * Handles form submission and updates left controls settings\n   * @private\n   * @static\n   * @param {Event} event - The form submission event\n   * @param {HTMLFormElement} form - The form element\n   * @param {FormData} formData - The form data object\n   * @returns {Promise<void>}\n   */\n  static async #onSubmit(event, form, formData) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    let confirmReload = ModuleSettingsMenu.updateSettings(formData);\n\n    if(confirmReload){\n      GeneralUtil.confirmReload();\n    }\n  }\n\n  static updateSettings(formData){\n    let confirmReload = false;\n    const SETTINGS = getSettings();\n    const html = ModuleSettingsMenu.#element;\n    const activeContent = html.querySelector(\".form-content.active\");\n    const activeTab = activeContent.dataset.tab;\n    ModuleSettingsMenu.#activeTab = activeTab;\n\n    if(!formData){\n      return;\n    }\n\n    // Convert FormData into an object with proper keys\n    let settings;\n    if (formData.object) {\n      settings = foundry.utils.expandObject(formData.object);\n    } \n\n    let fieldNames = [];\n\n    Object.entries(settings).forEach(([fieldName, value]) => {\n      // Skip auxiliary form fields like range value inputs\n      if(fieldName.endsWith('_value')) return;\n      \n      LogUtil.log(\"updateSettings #1\", [SETTINGS, SETTINGS[fieldName]]);\n      if(settings[fieldName] !== undefined && SETTINGS[fieldName]) {\n        const currSetting = SettingsUtil.get(SETTINGS[fieldName].tag);\n        SettingsUtil.set(SETTINGS[fieldName].tag, settings[fieldName]);\n        \n        if(SETTINGS[fieldName]?.requiresReload && currSetting !== settings[fieldName]){\n          confirmReload = true;\n        }\n      }\n    });\n\n    ui.notifications.info(game.i18n.localize('FLASH_ROLLS.notifications.settingsUpdated'));\n    return confirmReload;\n  }\n\n  /** @inheritDoc */\n  changeTab(tab, group, options) {\n    super.changeTab(tab, group, options);\n    ModuleSettingsMenu.#activeTab = tab;\n  }\n\n  /**\n   * Resets form fields to their default values\n   * @private\n   * @static\n   * @param {Event} a - The reset event\n   * @param {HTMLElement} b - The form element\n   * @returns {Promise<void>}\n   */\n  static async #onReset(a, b){\n    const SETTINGS = getSettings();\n    const html = ModuleSettingsMenu.#element;\n    const activeContent = html.querySelector(\".form-content.active\");\n    const activeTab = activeContent.dataset.tab;\n    const menuKey = ModuleSettingsMenu.PARTS[activeTab].menuKey;\n    const defaults = SETTINGS[menuKey].default;\n\n    const inputs = activeContent.querySelectorAll(\"input, select\");\n    inputs.forEach(inputField => {\n      inputField.value = defaults[inputField.name];\n      if(inputField.type==='checkbox'){\n        inputField.checked = defaults[inputField.name];\n      }\n    });\n\n    LogUtil.log(\"#onReset\", [ModuleSettingsMenu.#activeTab, activeTab, a, b]);\n  }\n\n  static #getTabs() {\n    const tabList = [];\n    Object.entries(ModuleSettingsMenu.PARTS).forEach(([key, value]) => {\n      if(value.menuKey) {\n        tabList.push({\n          id: key,\n          icon: '',\n          group: 'primary-tabs',\n          label: `FLASH_ROLLS.settings.moduleSettingsMenu.tabs.${key}`\n        })\n      }\n    })\n    return tabList;\n  }\n\n}\n","import { ModuleSettingsMenu } from '../components/dialogs/ModuleSettingsMenu.mjs';\n\nexport function getSettingMenus() {\n  return {\n    moduleSettingsMenu: {\n      tab: '',\n      tag: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.title\"),\n      name: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.title\"),\n      label: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.label\"), \n      hint: game.i18n.localize(\"FLASH_ROLLS.settings.moduleSettingsMenu.hint\"),\n      icon: \"fas fa-cog\",  \n      propType: ModuleSettingsMenu,\n      restricted: true\n    }\n  };\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings, SETTING_SCOPE } from \"../constants/Settings.mjs\";\nimport { getSettingMenus } from \"../constants/SettingMenus.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    var isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n    if(isDebugOn){CONFIG.debug.hooks = true};\n\n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach((entry) => {\n      const setting = entry[1]; \n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        restricted: setting.scope === SETTING_SCOPE.world,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      LogUtil.log('registerSettings', [settingObj, settingObj.scope], true);\n\n      try {\n        game.settings.register(MODULE_ID, setting.tag, settingObj);\n      } catch (error) {\n        LogUtil.log(`Setting ${setting.tag} already registered or error:`, error);\n      }\n    });\n  }\n\n  /**\n   * Register the settings menu - should be called during ready hook\n   * @static\n   */\n  static registerSettingsMenu() {\n    const settingMenus = Object.entries(getSettingMenus());\n    const tabbedMenu = settingMenus.find(entry => entry[0] === 'moduleSettingsMenu');\n    if (tabbedMenu) {\n      const tabbedMenuData = tabbedMenu[1];\n      if ((tabbedMenuData.restricted && game.user?.isGM) || !tabbedMenuData.restricted) {\n        const tabbedMenuObj = {\n          name: tabbedMenuData.tag,\n          label: tabbedMenuData.label, \n          hint: tabbedMenuData.hint,\n          icon: tabbedMenuData.icon, \n          type: tabbedMenuData.propType,\n          restricted: tabbedMenuData.restricted\n        };\n        game.settings.registerMenu(MODULE_ID, tabbedMenuData.tag, tabbedMenuObj);\n      }\n    }\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    try {\n      if(moduleName===MODULE_ID){\n        setting = game.settings.get(moduleName, settingName);\n      }else{\n        const client = game.settings.storage.get(\"client\");\n        let selectedSetting = client[`${moduleName}.${settingName}`];\n        //\n        if(selectedSetting===undefined){\n          const world = game.settings.storage.get(\"world\");\n          selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n          setting = selectedSetting?.value;\n        }\n      }\n    } catch (error) {\n      // Setting not registered yet, return default\n      LogUtil.log(`Setting ${moduleName}.${settingName} not found, returning false`);\n      return false;\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n      LogUtil.log('SettingsUtil.set - world Setting?', [selectedSetting]);\n    } \n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n      LogUtil.log('SettingsUtil.set - success', [moduleName, settingName, newValue]);\n    }catch(e){\n      LogUtil.error('SettingsUtil.set - error', [e]);\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsEnabled(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsEnabled(newValue){\n    const requestsIcon = document.querySelector(\".chat-controls .flash-rolls-icon\");\n    if(!requestsIcon){ return; }\n    \n    if(newValue){\n      requestsIcon.classList.add(\"active\");\n      // requestsIcon.setAttribute(\"aria-pressed\", \"true\");\n    }else{\n      requestsIcon.classList.remove(\"active\");\n      // requestsIcon.setAttribute(\"aria-pressed\", \"false\");\n    }\n  }\n}\n","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID } from \"../../../constants/General.mjs\";\nimport { HOOKS_CORE } from \"../../../constants/Hooks.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\n\n// Check if required D&D5e classes exist\nHooks.once(HOOKS_CORE.READY, () => {\n  if (!dnd5e.applications.dice.DamageRollConfigurationDialog) {\n    LogUtil.warn(\"DamageRollConfigurationDialog not found in dnd5e.applications.dice\");\n  }\n});\n\n/**\n * Mixin that provides GM-specific functionality for roll configuration dialogs\n * @param {Class} Base - The base dialog class to extend\n * @returns {Class} The extended class with GM functionality\n */\nexport function GMRollConfigMixin(Base) {\n  return class extends Base {\n    constructor(config = {}, message = {}, options = {}) {\n      super(config, message, options);\n      \n      this.actors = options.actors || [];\n      this.sendRequest = options.sendRequest ?? options.sendRequest ?? true;\n      this.showDC = options.showDC || false;\n      this.dcValue = options.dcValue || null;\n      \n      this.rollKey = options.rollKey || config.skill || config.ability || null;\n      this.rollTypeString = options.rollTypeString || null;\n      \n      this.windowTitle = options.window?.title || \"\";\n      this.windowSubtitle = options.window?.subtitle || \"\";\n    }\n    \n    /**\n     * Build a roll configuration from form data.\n     * Handles situational bonuses, ability selection, and DC values.\n     * @param {BasicRollConfiguration} config - Individual roll configuration from the rolls array\n     * @param {FormDataExtended} formData - Data from the dialog form\n     * @param {number} index - Index of this roll in the rolls array\n     * @returns {BasicRollConfiguration} The modified individual roll configuration\n     * @protected\n     * @override\n     */\n    _buildConfig(config, formData, index) {\n      const abilityFromForm = formData?.get(\"ability\");\n      const dcFromForm = formData?.get(\"dc\");\n      \n      const situational = formData?.get(`rolls.${index}.situational`);\n      LogUtil.log('_buildConfig', [situational, formData, config]);\n      if (situational) {\n        if (!config.parts) config.parts = [];\n        config.parts.push(\"@situational\");\n        if (!config.data) config.data = {};\n        config.data.situational = situational;\n      }else if (config.parts) {\n        const idx = config.parts.indexOf(\"@situational\");\n        if (idx !== -1) config.parts.splice(idx, 1);\n      }\n      \n      if (abilityFromForm) {\n        config.ability = abilityFromForm;\n        this.config.ability = abilityFromForm;\n      }\n      \n      const result = super._buildConfig(config, formData, index);\n      \n      if (dcFromForm) {\n        const dcValue = parseInt(dcFromForm);\n        if (!isNaN(dcValue)) {\n          result.options = result.options || {};\n          result.options.target = dcValue;\n        }\n      } else if (this.dcValue !== undefined && this.dcValue !== null) {\n        result.options = result.options || {};\n        result.options.target = this.dcValue;\n      }\n      \n      LogUtil.log(`${this.constructor.name}._buildConfig`, [this.config, formData, result]);\n      return result;\n    }\n    \n    /**\n     * Handle form changes to capture GM-specific fields.\n     * @param {Object} formConfig - The form configuration object\n     * @param {Event} event - The change event\n     * @protected\n     * @override\n     */\n    _onChangeForm(formConfig, event) {\n      LogUtil.log(`_onChangeForm`, [event.target.value]);\n      super._onChangeForm(formConfig, event);\n\n      const sendRequestCheckbox = this.element.querySelector('input[name=\"flash5e-send-request\"]');\n      if (sendRequestCheckbox) {\n        this.sendRequest = sendRequestCheckbox.checked;\n      }\n      \n      const dcInput = this.element.querySelector('input[name=\"dc\"]');\n      if (dcInput && dcInput.value) {\n        this.dcValue = parseInt(dcInput.value) || null;\n      }\n      \n    }\n    \n    /**\n     * Finalize rolls based on the action button clicked.\n     * @param {string} action - The action button that was clicked\n     * @returns {D20Roll[]} Array of finalized rolls ready for execution\n     * @protected\n     * @override\n     */\n    _finalizeRolls(action) {\n      const finalizedRolls = super._finalizeRolls(action);\n      LogUtil.log(`_finalizeRolls #1`, [finalizedRolls, this.sendRequest]);\n      \n      if (this.dcValue !== undefined && this.dcValue !== null) {\n        for (const roll of finalizedRolls) {\n          roll.options.target = this.dcValue;\n        }\n      }\n      \n      this.config.sendRequest = this.sendRequest;\n      \n      return finalizedRolls;\n    }\n    \n    /**\n     * Handle post-render actions for the dialog.\n     * Triggers initial formula rebuild if there's a situational bonus.\n     * @param {ApplicationRenderContext} context - The render context.\n     * @param {HandlebarsRenderOptions} options - Rendering options.\n     * @returns {Promise<void>}\n     * @protected\n     * @override\n     */\n    async _onRender(context, options) {\n      await super._onRender(context, options);\n      \n      if (this.config.rolls?.[0]?.data?.situational || this.config.situational) {\n        LogUtil.log(`${this.constructor.name}._onRender`, ['Triggering rebuild for initial situational bonus']);\n        setTimeout(() => {\n          this.rebuild();\n        }, 100);\n      }\n    }\n  };\n}","/**\n * Helper functions for the Flash Rolls 5e module\n */\nimport { MODULE, ROLL_TYPES } from '../../constants/General.mjs';\nimport { GeneralUtil } from './GeneralUtil.mjs';\n\n/**\n * Get display name for roll type with optional details\n * @param {string} rollType - The type of roll\n * @param {string} rollKey - Optional key for the specific roll (ability, skill, etc.)\n * @returns {string} Formatted display string\n */\nexport function getRollTypeDisplay(rollType, rollKey) {\n  let display = game.i18n.localize(`FLASH_ROLLS.rollTypes.${rollType}`) || rollType;\n  \n  // Normalize rollType to lowercase for consistent comparisons\n  const normalizedRollType = rollType?.toLowerCase();\n  \n  if (rollKey) {\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        display += ` (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.SAVE:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.ABILITY:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          display += ` (${toolItem?.name || rollKey})`;\n        } else {\n          display += ` (${rollKey})`;\n        }\n        break;\n      case ROLL_TYPES.CUSTOM:\n        display = `${display}: ${rollKey}`;\n        break;\n    }\n  }\n  \n  return display;\n}\n\n/**\n * Show batched notifications to player\n * @param {Array} pendingNotifications - Array of notification objects\n * @param {Function} getRollTypeDisplayFn - Function to get roll type display (default: getRollTypeDisplay)\n */\nexport function showBatchedNotifications(pendingNotifications, getRollTypeDisplayFn = getRollTypeDisplay) {\n  if (pendingNotifications.length === 0) return;\n  \n  // Group by roll type\n  const notificationsByType = {};\n  for (const notif of pendingNotifications) {\n    const key = `${notif.rollType}_${notif.rollKey || ''}`;\n    if (!notificationsByType[key]) {\n      notificationsByType[key] = {\n        rollType: notif.rollType,\n        rollKey: notif.rollKey,\n        actors: [],\n        gm: notif.gm\n      };\n    }\n    notificationsByType[key].actors.push(notif.actor);\n  }\n  \n  const entries = Object.values(notificationsByType);\n  if (entries.length === 1 && entries[0].actors.length === 1) {\n    // Single roll request - use original format\n    const entry = entries[0];\n    ui.notifications.info(game.i18n.format('FLASH_ROLLS.notifications.rollRequestReceived', {\n      gm: entry.gm,\n      rollType: getRollTypeDisplayFn(entry.rollType, entry.rollKey)\n    }));\n  } else {\n    // Multiple requests - create consolidated message\n    const messages = [];\n    for (const entry of entries) {\n      const rollTypeDisplay = getRollTypeDisplayFn(entry.rollType, entry.rollKey);\n      const actorNames = entry.actors.join(\", \");\n      messages.push(`${rollTypeDisplay} (${actorNames})`);\n    }\n    \n    ui.notifications.info(game.i18n.format('FLASH_ROLLS.notifications.rollRequestsReceivedMultiple', {\n      gm: entries[0].gm,\n      requests: messages.join(\"; \")\n    }));\n  }\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {User|null} The player owner, or null if not player-owned\n */\nexport function getPlayerOwner(actor) {\n  const ownership = actor.ownership || {};\n  \n  for (const [userId, level] of Object.entries(ownership)) {\n    if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n      const user = game.users.get(userId);\n      if (user && !user.isGM) {\n        return user;\n      }\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Get actor stats for display (ability scores and modifiers)\n * @param {Actor} actor - The actor to get stats for\n * @returns {Array} Array of stat objects with name, value, and modifier\n */\nexport function getActorStats(actor) {\n  if (!actor?.system?.abilities) return [];\n  \n  return Object.entries(actor.system.abilities).map(([key, ability]) => ({\n    name: key.toUpperCase(),\n    value: ability.value || 10,\n    modifier: ability.mod >= 0 ? `+${ability.mod}` : `${ability.mod}`\n  }));\n}\n\n/**\n * Apply target tokens to user\n * @param {Array<string>} tokenIds - Array of token IDs to target\n * @param {User} user - User to apply targets for (default: game.user)\n */\nexport function applyTargetTokens(tokenIds, user = game.user) {\n  if (!tokenIds?.length) return;\n  \n  const tokens = tokenIds\n    .map(id => canvas.tokens.get(id))\n    .filter(t => t);\n    \n  tokens.forEach(t => t.setTarget(true, { user }));\n}\n\n/**\n * Clear all target tokens for user\n * @param {User} user - User to clear targets for (default: game.user)\n */\nexport function clearTargetTokens(user = game.user) {\n  user.targets.forEach(t => t.setTarget(false, { user }));\n}\n\n/**\n * Format a notification message for multiple actors\n * @param {Array<string>} actorNames - Array of actor names\n * @param {string} action - The action being performed\n * @returns {string} Formatted message\n */\nexport function formatMultiActorNotification(actorNames, action) {\n  if (actorNames.length === 0) return \"\";\n  if (actorNames.length === 1) return `${actorNames[0]} ${action}`;\n  \n  const and = game.i18n.localize(\"FLASH_ROLLS.common.and\");\n  \n  if (actorNames.length === 2) return `${actorNames[0]} ${and} ${actorNames[1]} ${action}`;\n  \n  const lastActor = actorNames[actorNames.length - 1];\n  const otherActors = actorNames.slice(0, -1).join(\", \");\n  return `${otherActors}, ${and} ${lastActor} ${action}`;\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if owned by a player\n */\nexport function isPlayerOwned(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  return Object.entries(actor.ownership)\n    .some(([userId, level]) => {\n      const user = game.users.get(userId);\n      return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n    });\n}\n\n/**\n * Check if actor has token in current scene\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if actor has token in current scene\n */\nexport function hasTokenInScene(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  const currentScene = game.scenes.active;\n  return currentScene && currentScene.tokens.some(token => token.actorId === actor.id);\n}\n\n/**\n * Update token selection on canvas based on actor selection\n * @param {string} actorId - The actor ID\n * @param {boolean} selected - Whether to select or deselect\n */\nexport function updateCanvasTokenSelection(actorId, selected) {\n  const scene = game.scenes.active;\n  if (!scene) return;\n  \n  // Find all tokens for this actor in the current scene\n  const tokens = canvas.tokens.placeables.filter(t => t.actor?.id === actorId);\n  \n  for (const token of tokens) {\n    if (selected) {\n      // Add to selection without clearing others\n      token.control({ releaseOthers: false });\n    } else {\n      // Release this token\n      token.release();\n    }\n  }\n}\n\n/**\n * Delay execution for a specified time\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise} Promise that resolves after the delay\n */\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Check if the sidebar is expanded\n * @returns {boolean} True if sidebar is expanded\n */\nexport function isSidebarExpanded() {\n  return ui?.sidebar?.expanded || false;\n}\n\n/**\n * Update body class based on sidebar state\n * @param {boolean} isExpanded - Whether sidebar is expanded\n */\nexport function updateSidebarClass(isExpanded) {\n  const body = document.querySelector(\"body\"); \n  if (isExpanded) {\n    body.classList.add(\"flash5e-sidebar-expanded\"); \n  } else {\n    body.classList.remove(\"flash5e-sidebar-expanded\"); \n  }\n  adjustMenuOffset();\n}\n\n/**\n * Build roll types array for a selected request type\n * @param {string} selectedRequestType - The type of roll request\n * @param {Set} selectedActors - Set of selected actor IDs\n * @returns {Array} Array of roll type objects with id, name, and rollable properties\n */\nexport function buildRollTypes(selectedRequestType, selectedActors) {\n  const rollTypes = [];\n  \n  if (!selectedRequestType || selectedActors.size === 0) {\n    return rollTypes;\n  }\n  \n  const selectedOption = MODULE.ROLL_REQUEST_OPTIONS[selectedRequestType];\n  if (!selectedOption || !selectedOption.subList) {\n    return rollTypes;\n  }\n  \n  // Get first selected actor as reference for available options\n  const firstActorId = Array.from(selectedActors)[0];\n  const actor = game.actors.get(firstActorId);\n  \n  // Special handling for tools - show all available tools\n  if (selectedOption.subList === 'tools') {\n    // Get all tools from CONFIG.DND5E.tools or enrichmentLookup\n    const allTools = CONFIG.DND5E.enrichmentLookup?.tools || CONFIG.DND5E.tools || {};\n    \n    for (const [key, toolData] of Object.entries(allTools)) {\n      let label = key;\n      \n      // Use enrichmentLookup to get tool UUID and then fetch the name\n      if (toolData?.id) {\n        // Get the tool name using Trait.getBaseItem\n        const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n        label = toolItem?.name || key;\n      }\n      // Fallback - format the key\n      else {\n        label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n      }\n      \n      rollTypes.push({\n        id: key,\n        name: label,\n        rollable: true\n      });\n    }\n    \n    // Sort tools alphabetically by name\n    rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n  }\n  // For other types, use actor data\n  else if (actor && selectedOption.actorPath) {\n    const rollData = foundry.utils.getProperty(actor, selectedOption.actorPath) || {};\n    \n    // Check if we should use CONFIG.DND5E for enrichment\n    const configData = CONFIG.DND5E[selectedOption.subList];\n    \n    for (const [key, data] of Object.entries(rollData)) {\n      let label = '';\n      \n      // For skills, use CONFIG.DND5E.skills for full names\n      if (selectedOption.subList === 'skills' && configData?.[key]) {\n        label = configData[key].label;\n      }\n      // For abilities (saving throws), use the label from data\n      else if (selectedOption.subList === 'abilities' && configData?.[key]) {\n        label = configData[key].label;\n      }\n      // Default fallback\n      else {\n        label = data.label || game.i18n.localize(data.name || key) || key;\n      }\n      \n      rollTypes.push({\n        id: key,\n        name: label,\n        rollable: true\n      });\n    }\n    \n    // Sort skills alphabetically by name\n    if (selectedOption.subList === 'skills') {\n      rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n    }\n  }\n  \n  return rollTypes;\n}\n\n/**\n * Unified notification system with batching support\n */\nexport class NotificationManager {\n  static pendingNotifications = [];\n  static notificationTimer = null;\n  static NOTIFICATION_BATCH_DELAY = 500; // ms to wait for additional notifications\n  \n  /**\n   * Show a notification with optional batching for roll requests\n   * @param {string} type - Notification type (info, warn, error)\n   * @param {string} message - Message to display\n   * @param {Object} options - Options for the notification\n   * @param {boolean} options.batch - Whether to batch this notification\n   * @param {Object} options.batchData - Data for batched notifications\n   */\n  static notify(type, message, options = {}) {\n    // If not batching, show immediately\n    if (!options.batch) {\n      ui.notifications[type](message);\n      return;\n    }\n    \n    // Add to pending notifications for batching\n    if (options.batchData) {\n      NotificationManager.pendingNotifications.push(options.batchData);\n      \n      // Clear existing timer and set new one\n      if (NotificationManager.notificationTimer) {\n        clearTimeout(NotificationManager.notificationTimer);\n      }\n      \n      NotificationManager.notificationTimer = setTimeout(() => {\n        showBatchedNotifications(NotificationManager.pendingNotifications);\n        NotificationManager.pendingNotifications = [];\n        NotificationManager.notificationTimer = null;\n      }, NotificationManager.NOTIFICATION_BATCH_DELAY);\n    }\n  }\n  \n  /**\n   * Show roll request sent notifications (GM side)\n   * @param {Object} requestsByPlayer - Grouped requests by player\n   * @param {string} rollTypeName - Display name of the roll type\n   */\n  static notifyRollRequestsSent(requestsByPlayer, rollTypeName) {\n    const successfulRequests = Object.entries(requestsByPlayer);\n    \n    if (successfulRequests.length === 0) return;\n    \n    // Single player, single actor\n    if (successfulRequests.length === 1) {\n      const playerData = Object.values(requestsByPlayer)[0];\n      const actorNames = playerData.actors.map(a => a.name).join(\", \");\n      ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.rollRequestsSentSingle\", { \n        rollType: rollTypeName,\n        actors: actorNames,\n        player: playerData.player.name\n      }));\n    } else {\n      // Multiple players\n      const playerSummaries = successfulRequests.map(([playerId, data]) => {\n        const actorNames = data.actors.map(a => a.name).join(\", \");\n        return `${data.player.name} (${actorNames})`;\n      });\n      ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.rollRequestsSentMultiple\", { \n        rollType: rollTypeName,\n        count: successfulRequests.length,\n        players: playerSummaries.join(\"; \")\n      }));\n    }\n  }\n  \n  /**\n   * Clear any pending notifications\n   */\n  static clearPending() {\n    if (NotificationManager.notificationTimer) {\n      clearTimeout(NotificationManager.notificationTimer);\n      NotificationManager.notificationTimer = null;\n    }\n    NotificationManager.pendingNotifications = [];\n  }\n}\n\n/**\n * Filter actors based on death save requirements\n * @param {Actor[]} actors - Array of actors to filter\n * @returns {Actor[]} Array of actors that need death saves\n */\nexport function filterActorsForDeathSaves(actors) {\n  const actorsNeedingDeathSaves = [];\n  const actorsSkippingDeathSaves = [];\n  \n  for (const actor of actors) {\n    const hp = actor.system.attributes.hp?.value || 0;\n    const deathSaves = actor.system.attributes.death || {};\n    const successes = deathSaves.success || 0;\n    const failures = deathSaves.failure || 0;\n    \n    // Check if actor needs a death save\n    if (hp <= 0 && successes < 3 && failures < 3) {\n      actorsNeedingDeathSaves.push(actor);\n    } else {\n      actorsSkippingDeathSaves.push(actor.name);\n    }\n  }\n  \n  // Notify about actors that don't need death saves\n  if (actorsSkippingDeathSaves.length > 0) {\n    NotificationManager.notify('info', game.i18n.format(\"FLASH_ROLLS.notifications.actorsSkippingDeathSave\", {\n      actors: actorsSkippingDeathSaves.join(\", \")\n    }));\n  }\n  \n  return actorsNeedingDeathSaves;\n}\n\n/**\n * Categorize actors by ownership (PC vs NPC)\n * @param {Actor[]} actors - Array of actors to categorize\n * @returns {{pcActors: Array, npcActors: Actor[]}} Object with categorized actors\n */\nexport function categorizeActorsByOwnership(actors) {\n  const pcActors = [];\n  const npcActors = [];\n  \n  for (const actor of actors) {\n    const owner = getPlayerOwner(actor);\n    if (owner) {\n      pcActors.push({ actor, owner });\n    } else {\n      npcActors.push(actor);\n    }\n  }\n  \n  return { pcActors, npcActors };\n}\n\nexport function addHDUpdate(updates, newUpdate){\n  const existingIndex = updates.findIndex(update => update._id === newUpdate._id);\n  if(existingIndex > -1){\n    updates[existingIndex] = foundry.utils.mergeObject(\n      updates[existingIndex],\n      newUpdate\n    )\n  }else{\n    updates.push(newUpdate);\n  }\n}\n\n/**\n * Adjust the offset vars for the roll menu based on the state of the roll privacy controls\n */\nexport function adjustMenuOffset(isExpanded=true){\n  const rollPrivacyVertical = document.querySelector('#chat-notifications #roll-privacy');\n  const controlsWidth = rollPrivacyVertical ? GeneralUtil.getFullWidth(rollPrivacyVertical) : 36;\n  const isCrlngnUIOn = document.querySelector('body.crlngn-tabs') ? true : false;\n  \n  GeneralUtil.addCSSVars('--flash-rolls-menu-offset', (isCrlngnUIOn ? controlsWidth : controlsWidth + 16) + 'px');\n}","import { LogUtil } from \"../LogUtil.mjs\";\nimport { ROLL_TYPES } from \"../../constants/General.mjs\";\nimport { getSettings } from \"../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../SettingsUtil.mjs\";\nimport { getPlayerOwner } from \"./Helpers.mjs\";\n\n/**\n * Helper functions for roll handling\n */\nexport const RollHelpers = {\n  /**\n   * Add situational bonus to a roll configuration\n   * @param {BasicRollProcessConfiguration} config - The process configuration with rolls array\n   * @param {string} situational - The situational bonus formula\n   * @returns {BasicRollProcessConfiguration} The modified config\n   */\n  addSituationalBonus(config, situational) {\n    LogUtil.log(\"Config before adding bonus:\", [situational, config]);\n    if (situational && config.rolls?.[0]) {\n      // Ensure the roll has proper structure\n      if (!config.rolls[0].parts) config.rolls[0].parts = [];\n      if (!config.rolls[0].data) config.rolls[0].data = {};\n      \n      config.rolls[0].data.situational = situational;\n      \n      // Only add @situational if it's not already in parts\n      if (!config.rolls[0].parts.includes(\"@situational\")) {\n        config.rolls[0].parts.push(\"@situational\");\n      }\n      LogUtil.log(\"Config after adding bonus:\", [config]);\n    }\n    // config.situational = situational;\n    return config;\n  },\n\n  /**\n   * Build base configuration for all roll types\n   * @param {Object} requestData - The roll request data\n   * @param {Object} requestData.config - Configuration from the request\n   * @param {boolean} [requestData.config.advantage] - Roll with advantage\n   * @param {boolean} [requestData.config.disadvantage] - Roll with disadvantage\n   * @param {string} [requestData.config.situational] - Situational bonus formula\n   * @param {number} [requestData.config.target] - DC value\n   * @param {string} [requestData.config.requestedBy] - Name of requester\n   * @param {BasicRollConfiguration} rollConfig - Individual roll configuration with parts[], data{}, options{}\n   * @param {string[]} [rollConfig.parts=[]] - Roll formula parts\n   * @param {Object} [rollConfig.data={}] - Roll data for formula resolution\n   * @param {Object} [rollConfig.options={}] - Roll options\n   * @param {Object} [additionalConfig={}] - Additional configuration specific to the roll type\n   * @returns {BasicRollProcessConfiguration} The process configuration for D&D5e actor roll methods\n   */\n  buildRollConfig(requestData, rollConfig, additionalConfig = {}) {\n    // Build BasicRollProcessConfiguration\n    const config = {\n      rolls: [{\n        parts: rollConfig.parts || [],\n        data: rollConfig.data || {},\n        options: {\n          ...rollConfig.options || {},\n          // Preserve the _fromFlashRolls flag if it exists\n          ...(rollConfig.options?._fromFlashRolls && { _fromFlashRolls: true })\n        }\n      }],\n      advantage: requestData.config.advantage || false,\n      disadvantage: requestData.config.disadvantage || false,\n      target: requestData.config.target,\n      subject: null,\n      chatMessage: true,\n      legacy: false,\n      // Include rollMode if it's in the config\n      ...(requestData.config.rollMode && { rollMode: requestData.config.rollMode }),\n      ...additionalConfig\n    };\n    \n    const situational = requestData.config.situational;\n    if (situational) {\n      this.addSituationalBonus(config, situational);\n    }\n    \n    return this.ensureRollFlags(config, requestData);\n  },\n\n  /**\n   * Ensure roll config has the required flags to prevent re-interception\n   * @param {BasicRollProcessConfiguration} config - The process configuration\n   * @param {Object} requestData - The roll request data\n   * @param {Object} requestData.config - Configuration object\n   * @param {string} [requestData.config.requestedBy] - Name of requester\n   * @returns {BasicRollProcessConfiguration} The updated config with required flags\n   */\n  ensureRollFlags(config, requestData) {\n    config.isRollRequest = game.user.isGM ? false : true;\n    config._showRequestedBy = true;\n    config._requestedBy = requestData.config.requestedBy || 'GM';\n\n    return config;\n  },\n\n  /**\n   * Validate and normalize actors array\n   * @param {Actor[]|string[]} actors - Array of Actor documents or actor IDs\n   * @returns {Actor[]|null} Array of valid actors or null if no valid actors\n   */\n  validateActors(actors) {\n    if (!actors || actors.length === 0) return null;\n    \n    // Convert actor IDs to Actor documents if needed\n    if (typeof actors[0] === 'string') {\n      actors = actors.map(actorId => game.actors.get(actorId)).filter(a => a);\n    }\n    \n    return actors.length > 0 ? actors : null;\n  },\n\n  /**\n   * Determine the appropriate roll class based on roll type\n   * @param {string} rollType - The type of roll\n   * @returns {typeof BasicRoll} The appropriate roll class\n   */\n  getRollClass(rollType) {\n    const normalizedType = rollType?.toLowerCase();\n    \n    if ([ROLL_TYPES.DAMAGE, ROLL_TYPES.HEALING].includes(normalizedType)) {\n      return CONFIG.Dice.DamageRoll || CONFIG.Dice.BasicRoll;\n    } else if ([ROLL_TYPES.FORMULA, ROLL_TYPES.CUSTOM, ROLL_TYPES.HIT_DIE].includes(normalizedType)) {\n      return CONFIG.Dice.BasicRoll;\n    }\n    \n    return CONFIG.Dice.D20Roll;\n  },\n\n  /**\n   * Check if DC field should be shown for a roll type\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} Whether to show DC field\n   */\n  shouldShowDC(rollType) {\n    const normalizedType = rollType?.toLowerCase();\n    return [\n      ROLL_TYPES.SAVE,\n      ROLL_TYPES.SAVING_THROW,\n      ROLL_TYPES.ABILITY,\n      ROLL_TYPES.ABILITY_CHECK,\n      ROLL_TYPES.CONCENTRATION,\n      ROLL_TYPES.SKILL,\n      ROLL_TYPES.TOOL\n    ].includes(normalizedType);\n  },\n\n  /**\n   * Create base roll configuration for dialog\n   * @param {Actor} actor - The actor to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @returns {Object} Base roll configuration\n   */\n  createBaseRollConfig(actor, rollType, rollKey) {\n    const normalizedType = rollType?.toLowerCase();\n    \n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add roll-specific data\n    switch (normalizedType) {\n      case ROLL_TYPES.SKILL:\n        rollConfig.skill = rollKey;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollConfig.tool = rollKey;\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        rollConfig.ability = rollKey;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        rollConfig.rolls[0].options.flavor = \"Hit Die\";\n        break;\n    }\n    \n    return rollConfig;\n  },\n\n  /**\n   * Create standard message configuration\n   * @param {Actor} actor - The actor creating the message\n   * @param {string} [rollMode] - Optional roll mode to set\n   * @returns {Object} Message configuration\n   */\n  createMessageConfig(actor, rollMode = null) {\n    const config = {\n      create: false,\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    if (rollMode) {\n      config.rollMode = rollMode;\n    }\n    \n    return config;\n  },\n\n  /**\n   * Execute a roll dialog and return the result\n   * @param {Class} DialogClass - The dialog class to instantiate\n   * @param {Object} rollConfig - Roll configuration\n   * @param {Object} messageConfig - Message configuration\n   * @param {Object} dialogOptions - Dialog options\n   * @returns {Promise<Object|null>} Dialog result or null if cancelled\n   */\n  async triggerRollDialog(DialogClass, rollConfig, messageConfig, dialogOptions) {\n    const app = new DialogClass(rollConfig, messageConfig, dialogOptions);\n    \n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest,\n          critical: app.config.critical,\n          isCritical: app.config.isCritical\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    return result;\n  },\n\n  /**\n   * Process dialog result into final roll configuration\n   * @param {Object} result - Result from dialog\n   * @param {Actor[]} actors - Array of actors\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {Object} options - Additional options\n   * @returns {Object|null} Final roll process configuration or null if cancelled\n   */\n  processDialogResult(result, actors, rollType, rollKey, options = {}) {\n    // If no rolls or user cancelled\n    if (!result?.rolls || result.rolls.length === 0) return null;\n    \n    const normalizedType = rollType?.toLowerCase();\n    const firstRoll = result.rolls[0];\n    \n    // Extract advantage mode\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Extract roll data\n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    // Build roll process configuration\n    const rollProcessConfig = {\n      rolls: [{\n        parts: firstRoll?.parts?.slice() || [],\n        data: situational ? { situational } : {},\n        options: target ? { target } : {}\n      }],\n      subject: actors[0],\n      advantage,\n      disadvantage,\n      target,\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipRollDialog: options.skipRollDialog || false,\n      chatMessage: true\n    };\n    \n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = this.determineRollMode(isPublicRollsOn, result.message?.rollMode);\n    rollProcessConfig.rollMode = rollMode;\n    \n    if (result.config?.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedType)) {\n      rollProcessConfig.ability = result.config.ability;\n    }\n    \n    return rollProcessConfig;\n  },\n\n  /**\n   * Determine the final roll mode\n   * @param {boolean} isPublicRollsOn - Whether public rolls setting is enabled\n   * @param {string} messageRollMode - Roll mode from message (user's selection in dialog)\n   * @returns {string} Final roll mode\n   */\n  determineRollMode(isPublicRollsOn, messageRollMode) {\n    // If user explicitly selected a roll mode in the dialog, use it\n    if (messageRollMode) {\n      return messageRollMode;\n    }\n    \n    // Otherwise, use the default based on settings\n    return isPublicRollsOn ? \n      CONST.DICE_ROLL_MODES.PUBLIC : \n      game.settings.get(\"core\", \"rollMode\");\n  },\n\n  /**\n   * Check if actor is player owned\n   * @param {Actor} actor - The actor to check\n   * @returns {boolean} Whether the actor is player owned\n   */\n  isPlayerOwned(actor) {\n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  },\n\n  /**\n   * Check if actor is player owned\n   * @param {Actor} actor - The actor to check\n   * @returns {boolean} Whether the actor is player owned\n   */\n  isPlayerOwnerActive(actor) {\n    const playerOwner = getPlayerOwner(actor);\n    return playerOwner && playerOwner.active;\n  },\n\n  /* -------------------------------------------- */\n  /*  Group Roll Calculation Methods              */\n  /* -------------------------------------------- */\n\n  /**\n   * Calculate group roll result using Standard Rule - At least half the group must succeed\n   * @param {Object[]} rollResults - Array of roll results with { actorId, total, success, failure }\n   * @param {number} dc - The DC to check against\n   * @returns {Object} Result object with { finalResult, successes, failures, summary }\n   */\n  calculateStandardRule(rollResults, dc) {\n    const successes = rollResults.filter(r => r.total >= dc).length;\n    const failures = rollResults.length - successes;\n    const halfThreshold = Math.ceil(rollResults.length / 2);\n    \n    return {\n      finalResult: successes >= halfThreshold,\n      successes,\n      failures,\n      summary: game.i18n.format(\"FLASH_ROLLS.groupRoll.standardRule.summary\", {\n        successes,\n        total: rollResults.length,\n        threshold: halfThreshold\n      }),\n      method: 'Standard Rule'\n    };\n  },\n\n  /**\n   * Calculate group roll result using Group Average - Simple average of all rolls, rounded down\n   * @param {Object[]} rollResults - Array of roll results with { actorId, total }\n   * @param {number} dc - The DC to check against\n   * @returns {Object} Result object with { finalResult, average, success, summary }\n   */\n  calculateGroupAverage(rollResults, dc) {\n    const sum = rollResults.reduce((acc, r) => acc + r.total, 0);\n    const average = Math.floor(sum / rollResults.length);\n    \n    return {\n      finalResult: average,\n      average,\n      success: average >= dc,\n      summary: game.i18n.format(\"FLASH_ROLLS.groupRoll.groupAverage.summary\", {\n        average,\n        dc\n      }),\n      method: 'Group Average'\n    };\n  },\n\n  /**\n   * Calculate group roll result using Leader with Help - Result from actor with highest bonus, plus successes minus failures\n   * @param {Object[]} rollResults - Array of roll results with { actorId, total, modifier }\n   * @param {number} dc - The DC to check against\n   * @param {Actor[]} actors - Array of actors to get modifiers from\n   * @param {string} rollType - Type of roll (skill, save, ability)\n   * @param {string} rollKey - The specific roll key (e.g., 'ath', 'dex')\n   * @returns {Object} Result object with { finalResult, leaderRoll, bonus, penalty, success, summary }\n   */\n  calculateLeaderWithHelp(rollResults, dc, actors, rollType, rollKey) {\n    let highestModifier = -999;\n    let leaderActorId = null;\n    let leaderModifier = 0;\n    \n    for (const actor of actors) {\n      const modifier = this._getActorModifier(actor, rollType, rollKey);\n      if (modifier > highestModifier) {\n        highestModifier = modifier;\n        leaderActorId = actor.id;\n        leaderModifier = modifier;\n      }\n    }\n    \n    const leaderResult = rollResults.find(r => r.actorId === leaderActorId);\n    if (!leaderResult) {\n      return {\n        finalResult: 0,\n        error: 'Leader actor did not roll',\n        method: 'Leader with Help'\n      };\n    }\n    \n    // Count successes and failures (excluding the leader)\n    const otherResults = rollResults.filter(r => r.actorId !== leaderActorId);\n    const successes = otherResults.filter(r => r.total >= dc).length;\n    const failures = otherResults.filter(r => r.total < dc).length;\n    const adjustedResult = leaderResult.total + successes - failures;\n    \n    return {\n      finalResult: adjustedResult,\n      leaderRoll: leaderResult.total,\n      leaderName: actors.find(a => a.id === leaderActorId)?.name,\n      leaderModifier,\n      bonus: successes,\n      penalty: failures,\n      success: adjustedResult >= dc,\n      summary: game.i18n.format(\"FLASH_ROLLS.groupRoll.leaderWithHelp.summary\", {\n        leaderRoll: leaderResult.total,\n        bonus: successes,\n        penalty: failures,\n        adjustedResult,\n        dc\n      }),\n      method: 'Leader with Help'\n    };\n  },\n\n  /**\n   * Calculate group roll result using Weakest Link - Result from actor with lowest modifier, plus number of group successes\n   * @param {Object[]} rollResults - Array of roll results with { actorId, total }\n   * @param {number} dc - The DC to check against\n   * @param {Actor[]} actors - Array of actors to get modifiers from\n   * @param {string} rollType - Type of roll (skill, save, ability)\n   * @param {string} rollKey - The specific roll key (e.g., 'ath', 'dex')\n   * @returns {Object} Result object with { finalResult, weakestRoll, bonus, success, summary }\n   */\n  calculateWeakestLink(rollResults, dc, actors, rollType, rollKey) {\n    let lowestModifier = 999;\n    let weakestActorId = null;\n    let weakestModifierValue = 0;\n    \n    for (const actor of actors) {\n      const modifier = this._getActorModifier(actor, rollType, rollKey);\n      if (modifier < lowestModifier) {\n        lowestModifier = modifier;\n        weakestActorId = actor.id;\n        weakestModifierValue = modifier;\n      }\n    }\n    \n    const weakestResult = rollResults.find(r => r.actorId === weakestActorId);\n    if (!weakestResult) {\n      return {\n        finalResult: 0,\n        error: 'Weakest link actor did not roll',\n        method: 'Weakest Link'\n      };\n    }\n    \n    // Count successes excluding the weakest actor\n    const successes = rollResults.filter(r => r.actorId !== weakestActorId && r.total >= dc).length;\n    const adjustedResult = weakestResult.total + successes;\n    \n    const successWord = successes === 1 ? \n      game.i18n.localize(\"FLASH_ROLLS.groupRoll.weakestLink.successSingular\") : \n      game.i18n.localize(\"FLASH_ROLLS.groupRoll.weakestLink.successPlural\");\n    \n    return {\n      finalResult: adjustedResult,\n      weakestRoll: weakestResult.total,\n      weakestName: actors.find(a => a.id === weakestActorId)?.name,\n      weakestModifier: weakestModifierValue,\n      bonus: successes,\n      success: adjustedResult >= dc,\n      summary: game.i18n.format(\"FLASH_ROLLS.groupRoll.weakestLink.summary\", {\n        weakestRoll: weakestResult.total,\n        bonus: successes,\n        successWord,\n        adjustedResult,\n        dc\n      }),\n      method: 'Weakest Link'\n    };\n  },\n\n  /**\n   * Get the modifier for a specific roll type and key from an actor\n   * @private\n   * @param {Actor} actor - The actor to get the modifier from\n   * @param {string} rollType - Type of roll (skill, save, ability)\n   * @param {string} rollKey - The specific roll key\n   * @returns {number} The modifier value\n   */\n  _getActorModifier(actor, rollType, rollKey) {\n    const normalizedType = rollType?.toLowerCase();\n    \n    switch (normalizedType) {\n      case ROLL_TYPES.SKILL:\n        return actor.system.skills[rollKey]?.total || \n               actor.system.skills[rollKey]?.mod || 0;\n      \n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        // Support both old and new D&D 5e data structure\n        return actor.system.abilities[rollKey]?.save?.value || \n               actor.system.abilities[rollKey]?.save || 0;\n      \n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        return actor.system.abilities[rollKey]?.mod || 0;\n      \n      case ROLL_TYPES.TOOL:\n        if (actor.system.tools?.[rollKey]) {\n          return actor.system.tools[rollKey].total || \n                 actor.system.tools[rollKey].mod || 0;\n        }\n        const tool = actor.items.find(i => \n          i.type === 'tool' && \n          i.system.toolType === rollKey\n        );\n        return tool?.system.bonus || 0;\n      \n      default:\n        return 0;\n    }\n  },\n\n  /**\n   * Get the group roll result based on the selected calculation method\n   * @param {Object[]} rollResults - Array of roll results with { actorId, total }\n   * @param {number} dc - The DC to check against\n   * @param {Actor[]} actors - Array of actors (needed for some methods)\n   * @param {string} rollType - Type of roll (needed for modifier calculation)\n   * @param {string} rollKey - The specific roll key (needed for modifier calculation)\n   * @returns {Object} Result object with { complete, success, result }\n   */\n  getGroupResult(rollResults, dc, actors, rollType, rollKey) {\n    const complete = rollResults.every(r => r.total !== null && r.total !== undefined);\n    \n    if (!complete) {\n      return {\n        complete: false,\n        success: false,\n        result: 0\n      };\n    }\n\n    const SETTINGS = getSettings();\n    const resultMode = SettingsUtil.get(SETTINGS.groupRollResultMode.tag) || 1;\n    \n    let calculationResult;\n    \n    switch (resultMode) {\n      case 1: // Standard Rule\n        calculationResult = this.calculateStandardRule(rollResults, dc);\n        return {\n          complete: true,\n          success: calculationResult.finalResult,\n          result: calculationResult.finalResult ? 1 : 0,\n          details: calculationResult\n        };\n        \n      case 2: // Group Average\n        calculationResult = this.calculateGroupAverage(rollResults, dc);\n        return {\n          complete: true,\n          success: calculationResult.success,\n          result: calculationResult.finalResult,\n          details: calculationResult\n        };\n        \n      case 3: // Leader with Help\n        calculationResult = this.calculateLeaderWithHelp(rollResults, dc, actors, rollType, rollKey);\n        return {\n          complete: true,\n          success: calculationResult.success,\n          result: calculationResult.finalResult,\n          details: calculationResult\n        };\n        \n      case 4: // Weakest Link\n        calculationResult = this.calculateWeakestLink(rollResults, dc, actors, rollType, rollKey);\n        return {\n          complete: true,\n          success: calculationResult.success,\n          result: calculationResult.finalResult,\n          details: calculationResult\n        };\n        \n      default:\n        calculationResult = this.calculateStandardRule(rollResults, dc);\n        return {\n          complete: true,\n          success: calculationResult.finalResult,\n          result: calculationResult.finalResult ? 1 : 0,\n          details: calculationResult\n        };\n    }\n  }\n};\n\n","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID, ROLL_TYPES } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\n\n/**\n * GM Roll Configuration Dialog\n * Extends the standard D&D5e roll configuration dialogs to add DC field and send request toggle\n */\nexport class GMRollConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.D20RollConfigurationDialog) {\n  /**\n   * Create a new GM Roll Configuration Dialog.\n   * @param {BasicRollProcessConfiguration} [config={}] - Process configuration containing rolls array of BasicRollConfiguration objects.\n   * @param {BasicRollMessageConfiguration} [message={}] - Message configuration for chat output.\n   * @param {BasicRollConfigurationDialogOptions} [options={}] - Dialog rendering options.\n   * @param {Actor[]} [options.actors] - Array of actors this roll is being made for.\n   * @param {boolean} [options.sendRequest] - Whether to send this as a roll request to players.\n   * @param {boolean} [options.showDC] - Whether to show the DC input field.\n   * @param {string} [options.rollKey] - The specific roll key (e.g., \"str\" for strength save).\n   * @param {typeof BasicRoll} [options.rollType] - The roll class to use (D20Roll, DamageRoll, etc.).\n   * @param {string} [options.rollTypeString] - The roll type as a string for identification.\n   * @param {object} [options.window] - Window configuration options.\n   * @param {string} [options.window.title] - The window title.\n   * @param {string} [options.window.subtitle] - The window subtitle.\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    super(config, message, options);\n    \n    LogUtil.log('constructor - initializing GM Dialog', [config, message, options]);\n  }\n  \n  /**\n   * Default rendering options for the GM roll configuration dialog.\n   * Extends the parent's default options to add custom CSS classes.\n   * @returns {object} The default options object.\n   * @override\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Get the window title for the dialog.\n   * Uses the window title from options if provided, otherwise falls back to parent implementation.\n   * The parent class constructs the title from options.window.title or uses a default localized string.\n   * @returns {string} The localized window title\n   * @override\n   */\n  get title() {\n    return this.windowTitle || super.title;\n  }\n  \n  /**\n   * Prepare the configuration data for rendering the dialog.\n   * This method is called internally by the parent class during rendering.\n   * Extends parent to add DC and send request options. The parent method prepares\n   * advantage/disadvantage toggles, roll mode selector, and situational bonus field.\n   * @param {BasicRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration containing rolls array\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration with rendering options\n   * @param {BasicRollMessageConfiguration} message - Message configuration for chat output\n   * @returns {Object} The prepared configuration data for rendering with added fields:\n   *   - showDC: Whether to display the DC input field\n   *   - dcValue: The current DC value if set\n   *   - sendRequest: Whether rolls should be sent to players\n   *   - actorCount: Number of actors this roll applies to\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare the rendering context for a specific dialog part.\n   * Adds GM-specific data like DC value and send request option to the configuration part.\n   * The parent method builds the base context for each part (\"configuration\", \"formulas\", \"buttons\").\n   * @param {string} partId - The ID of the part being prepared (\"configuration\", \"formulas\", \"buttons\")\n   * @param {ApplicationRenderContext} context - The rendering context to modify\n   * @param {HandlebarsRenderOptions} options - Options which configure application rendering behavior\n   * @returns {Promise<ApplicationRenderContext>} The modified context with GM-specific data added to configuration part:\n   *   - showDC: Whether to display the DC input field\n   *   - dcValue: The current DC value if set\n   *   - sendRequest: Whether rolls should be sent to players\n   *   - actorCount: Number of actors this roll applies to\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    LogUtil.log('_preparePartContext', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render actions for the dialog.\n   * Injects custom GM fields (DC input, send request checkbox) into the dialog after rendering.\n   * Also attaches event listeners and triggers initial formula rebuild if needed.\n   * @param {ApplicationRenderContext} context - The render context.\n   * @param {HandlebarsRenderOptions} options - Rendering options.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    LogUtil.log('_onRender', [context, options]);\n    super._onRender(context, options);\n    \n    GeneralUtil.preventDialogFlicker(this.element);\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    let configSection = this.element.querySelector('.rolls .formulas');\n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons.\n   * Sets up click handlers for the advantage mode toggle buttons.\n   * Currently logs the action but does not implement custom behavior.\n   * @private\n   */\n  _attachButtonListeners() {\n    LogUtil.log('_attachButtonListeners', [this.element]);\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  \n  /**\n   * Static method to create and display the GM roll configuration dialog.\n   * Creates a BasicRollProcessConfiguration and shows dialog for user configuration.\n   * @param {Actor[]|string[]} actors - Array of Actor documents or actor IDs to roll for\n   * @param {string} rollType - The type of roll (e.g., \"save\", \"ability\", \"skill\", \"tool\")\n   * @param {string} rollKey - The specific roll key (e.g., \"str\" for strength, \"athletics\" for skill)\n   * @param {Object} options - Additional options for dialog configuration\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {number} [options.dcValue] - Initial DC value\n   * @param {boolean} [options.advantage] - Whether to roll with advantage\n   * @param {boolean} [options.disadvantage] - Whether to roll with disadvantage\n   * @param {string} [options.rollMode] - Roll visibility mode\n   * @param {string} [options.situational] - Situational bonus formula\n   * @returns {Promise<BasicRollProcessConfiguration|null>} Process configuration with rolls array, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}) {\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMRollConfigDialog, initConfiguration', []);\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    \n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    const showDC = RollHelpers.shouldShowDC(normalizedRollType);\n    const rollClass = RollHelpers.getRollClass(normalizedRollType);\n    const rollConfig = RollHelpers.createBaseRollConfig(actor, rollType, rollKey);\n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        rollTypeString: normalizedRollType,  // Store the roll type string\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        position: {\n          width: 420,\n          height: \"auto\"\n        },\n        ...options\n      }\n    };\n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    \n    const rollProcessConfig = RollHelpers.processDialogResult(result, actors, rollType, rollKey, options);\n    if (!rollProcessConfig) return null;\n    \n    if (result.config?.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      const defaultAbility = actor.system.skills?.[rollKey]?.ability || CONFIG.DND5E.skills?.[rollKey]?.ability;\n      if (result.config.ability !== defaultAbility) {\n        rollProcessConfig.ability = result.config.ability;\n      }\n    }\n    \n    let finalTitle = dialogConfig.options.window.title;\n    if (result.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      const selectedAbilityLabel = CONFIG.DND5E.abilities[result.config.ability]?.label || result.config.ability;\n      if (normalizedRollType === ROLL_TYPES.SKILL) {\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        finalTitle = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: selectedAbilityLabel \n        });\n      } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        finalTitle = game.i18n.format(\"DND5E.ToolPromptTitle\", { \n          tool: toolLabel,\n          ability: selectedAbilityLabel \n        });\n      }\n    }\n    \n    rollProcessConfig.rollTitle = finalTitle;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    return rollProcessConfig;\n  }\n  \n  /**\n   * Get a formatted title for the roll type\n   * @private\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {Actor} actor - The actor (used to get default ability for skills)\n   * @returns {string} The formatted title\n   */\n  static _getRollTitle(rollType, rollKey, actor) {\n    let title = \"\";\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    \n    if ([ROLL_TYPES.SAVE, ROLL_TYPES.ABILITY, ROLL_TYPES.ABILITY_CHECK].includes(normalizedRollType) && !rollKey) {\n      LogUtil.warn('Missing rollKey for roll type', [normalizedRollType, rollKey]);\n    }\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        const skill = actor?.system.skills?.[rollKey];\n        const defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n        const abilityLabel = CONFIG.DND5E.abilities[defaultAbility]?.label || defaultAbility;\n        title = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: abilityLabel \n        });\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        const saveAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.SavePromptTitle\", { ability: saveAbility });\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        const checkAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.AbilityPromptTitle\", { ability: checkAbility });\n        break;\n      case ROLL_TYPES.CONCENTRATION:\n        title = game.i18n.localize(\"DND5E.Concentration\");\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        const tool = actor?.system.tools?.[rollKey];\n        const toolDefaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n        const toolAbilityLabel = CONFIG.DND5E.abilities[toolDefaultAbility]?.label || toolDefaultAbility;\n        title = game.i18n.format(\"DND5E.ToolPromptTitle\", { \n          tool: toolLabel,\n          ability: toolAbilityLabel\n        });\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        title = game.i18n.localize(\"DND5E.DeathSave\");\n        break;\n      case ROLL_TYPES.INITIATIVE: \n      case ROLL_TYPES.INITIATIVE_DIALOG: // Handle alternate case\n        title = game.i18n.localize(\"DND5E.Initiative\");\n        break;\n      default:\n        title = game.i18n.localize(\"DND5E.Roll\");\n    }\n    LogUtil.log('_getRollTitle', [normalizedRollType, title]);\n    \n    return title;\n  }\n\n  static _getSubtitle(actors = []) {\n    if (actors.length === 1) {\n      return actors[0].name;\n    } else if (actors.length > 1) {\n      return game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.multipleActors\");\n    } else {\n      return \"\";\n    }\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Hit Die Configuration Dialog\n * Extends base RollConfigurationDialog for hit die rolls\n * @extends {dnd5e.applications.dice.RollConfigurationDialog}\n */\nexport class GMHitDieConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.RollConfigurationDialog) {\n  /**\n   * Creates an instance of GMHitDieConfigDialog.\n   * Configures the dialog for hit die rolls with GM-specific options.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration\n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    options.rollType = CONFIG.Dice.BasicRoll || Roll;\n    options.showDC = false;\n    \n    super(config, message, options);\n    \n    LogUtil.log('constructor', [config, message, options]);\n  }\n  \n  /**\n   * Get default options for the hit die dialog.\n   * Extends parent options to add hit die specific CSS classes.\n   * @returns {Object} Default dialog options with \"hit-die-config\" class added\n   * @static\n   * @override\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\", \"hit-die-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * Overrides the formula display to show \"Hit Die (varies by actor)\" since\n   * different actors may have different hit die sizes.\n   * @param {BasicRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with custom formula display\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    LogUtil.log('GMHitDieConfigDialog._prepareConfigurationData', [data]);\n    \n    data.formula = \"Hit Die (varies by actor)\";\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * Adds send request toggle and actor count to the configuration part.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n      context.formula = \"Hit Die (varies by actor)\";\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * Injects the send request toggle field for GM control.\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    super._onRender(context, options);\n    \n    GeneralUtil.preventDialogFlicker(this.element);\n    \n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    let configSection = this.element.querySelector('.rolls .formulas');\n    \n    if (configSection && this.actors.length > 0) {\n      const templateData = {\n        showDC: false,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n  }\n  \n  /**\n   * Process form submission data.\n   * Extracts and stores send request preference from the form.\n   * @param {SubmitEvent} event - The submission event\n   * @param {HTMLFormElement} form - The form element\n   * @param {FormDataExtended} formData - Processed form data\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _processSubmitData(event, form, formData) {\n    await super._processSubmitData(event, form, formData);\n    this.sendRequest = formData.get(\"flash5e-send-request\") !== \"false\";\n    \n    LogUtil.log('_processSubmitData', [formData, this.config]);\n  }\n  \n  /**\n   * Finalize rolls based on the action button clicked.\n   * Stores the send request flag in the configuration.\n   * For hit die rolls, merge situational bonuses into the main formula.\n   * @param {string} action - The action button clicked\n   * @returns {BasicRoll[]} Array of finalized rolls\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    const finalizedRolls = super._finalizeRolls(action);\n    this.config.sendRequest = this.sendRequest;\n\n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the hit die configuration dialog.\n   * Creates appropriate hit die formulas based on each actor's available hit dice.\n   * @param {Actor[]} actors - Array of actors to roll hit dice for\n   * @param {string} rollType - The roll type (should be \"hitdie\")\n   * @param {string} rollKey - Not used for hit die rolls\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @returns {Promise<Object|null>} Configuration with rolls array and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}) {\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMHitDieConfigDialog, initConfiguration', []);\n    \n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {\n          flavor: \"Hit Die Roll\"\n        }\n      }]\n    };\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.BasicRoll || Roll,\n        window: {\n          title: game.i18n.localize(\"DND5E.HitDice\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        position: {\n          width: 420,\n          height: \"auto\"\n        },\n        ...options\n      }\n    };\n    \n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    if (!result?.rolls || result.rolls.length === 0) return null;\n    \n    LogUtil.log('GMHitDieConfigDialog - dialog result', [result.rolls]);\n    \n    const rollProcessConfig = RollHelpers.processDialogResult(result, actors, rollType, rollKey, options);\n    if (!rollProcessConfig) return null;\n    \n    if (result.config?.ability) {\n      rollProcessConfig.ability = result.config.ability;\n    }\n    \n    return rollProcessConfig;\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID, ROLL_TYPES } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Skill/Tool Configuration Dialog\n * Extends SkillToolRollConfigurationDialog for ability selection\n * @extends {dnd5e.applications.dice.SkillToolRollConfigurationDialog}\n */\nexport class GMSkillToolConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.SkillToolRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMSkillToolConfigDialog.\n   * Forces ability selection and adds GM-specific options.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   *   @param {boolean} [options.showDC=false] - Whether to show DC field\n   *   @param {number} [options.dcValue] - Initial DC value\n   *   @param {string} [options.rollKey] - The skill/tool key being rolled\n   *   @param {string} [options.rollTypeString] - Display name for the roll type\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    const skillConfig = foundry.utils.mergeObject(config, {\n      chooseAbility: true\n    });\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    super(skillConfig, message, options);\n    \n    LogUtil.log('constructor', [config, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * Extends parent to add DC and send request options.\n   * The parent handles ability selection UI for skills and tools.\n   * @param {D20Roll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * Adds GM-specific context data to the configuration part.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    LogUtil.log('_preparePartContext', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * Injects GM-specific form fields (DC and send request toggle).\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    LogUtil.log('_onRender', [context, options]);\n    super._onRender(context, options);\n    \n    GeneralUtil.preventDialogFlicker(this.element);\n\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    let configSection = this.element.querySelector('.rolls .formulas');\n\n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons.\n   * Sets up click handlers for the advantage mode toggle buttons.\n   * Currently logs the action but does not implement custom behavior.\n   * @private\n   */\n  _attachButtonListeners() {\n    LogUtil.log('_attachButtonListeners', []);\n\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  /**\n   * Static method to create and display the skill/tool configuration dialog.\n   * Handles ability selection for skills and tools with GM-specific options.\n   * @param {Actor[]} actors - Array of actors to roll for\n   * @param {string} rollType - The roll type (\"skill\" or \"tool\")\n   * @param {string} rollKey - The specific skill/tool key (e.g., \"athletics\", \"thieves\")\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {number} [options.dcValue] - Initial DC value\n   * @param {string} [options.ability] - Override ability selection\n   * @returns {Promise<Object|null>} Configuration with rolls array, ability selection, and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}) {\n    // Validate and normalize actors\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMSkillToolConfigDialog, initConfiguration', []);\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    const showDC = RollHelpers.shouldShowDC(normalizedRollType);\n    const rollClass = CONFIG.Dice.D20Roll;\n    \n    let defaultAbility = null;\n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      const skill = actor.system.skills[rollKey];\n      defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      const tool = actor.system.tools?.[rollKey];\n      defaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n    }\n    \n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      ability: defaultAbility,\n      chooseAbility: true,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      rollConfig.skill = rollKey;\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      rollConfig.tool = rollKey;\n    }\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        rollTypeString: normalizedRollType,\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        position: {\n          width: 420,\n          height: \"auto\"\n        },\n        ...options\n      }\n    };\n    \n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    \n    const rollProcessConfig = RollHelpers.processDialogResult(result, actors, rollType, rollKey, options);\n    if (!rollProcessConfig) return null;\n    \n    if (result.config?.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      rollProcessConfig.ability = result.config.ability;\n    }\n    \n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    return rollProcessConfig;\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Damage Roll Configuration Dialog\n * Extends DamageRollConfigurationDialog to add send request toggle\n * @extends {dnd5e.applications.dice.DamageRollConfigurationDialog}\n */\nexport class GMDamageConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.DamageRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMDamageConfigDialog.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    // Ensure the dialog is configured to show\n    const dialogConfig = foundry.utils.mergeObject({\n      configure: true\n    }, config);\n    \n    super(dialogConfig, message, options);\n    \n    LogUtil.log('GMDamageConfigDialog.constructor', [dialogConfig, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"damage-roll\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * @param {DamageRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('GMDamageConfigDialog._prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  \n  /**\n   * Handle initial rendering of the dialog.\n   * @param {ApplicationRenderContext} context - The render context.\n   * @param {HandlebarsRenderOptions} options - Rendering options.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    await super._onRender(context, options);\n    \n    // Prevent dialog flicker\n    GeneralUtil.preventDialogFlicker(this.element);\n    \n    // Inject send request checkbox if we have actors\n    if (this.actors.length > 0) {\n      const buttonGroup = this.element.querySelector('.rolls + .dialog-buttons');\n      if (buttonGroup && !this.element.querySelector('.gm-roll-config-fields')) {\n        const wrapper = document.createElement('div');\n        wrapper.className = 'gm-roll-config-fields';\n        wrapper.innerHTML = `\n          <div class=\"form-group\">\n            <label class=\"checkbox\">\n              <input type=\"checkbox\" name=\"flash5e-send-request\" ${this.sendRequest ? 'checked' : ''}>\n              ${game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.sendRequestToPlayers\")}\n            </label>\n          </div>\n        `;\n        buttonGroup.insertAdjacentElement('beforebegin', wrapper);\n      }\n    }\n  }\n\n  /**\n   * Static method to create and display the attack configuration dialog.\n   * SIMPLIFIED VERSION: Matches ability check pattern without attack-specific configs\n   * @param {Actor[]} actors - Array of actors to roll for\n   * @param {string} rollType - The roll type (\"attack\")\n   * @param {string} rollKey - The item ID for the attack\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {Object} originalConfig - The original roll configuration from the intercepted roll\n   * @param {Object} originalDialog - The original dialog configuration from the intercepted roll\n   * @returns {Promise<Object|null>} Configuration with rolls array and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}, originalConfig = {}, originalDialog = {}) {\n    actors = RollHelpers.validateActors(actors);\n    LogUtil.log('GMDamageConfigDialog, initConfiguration actors', [actors]);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn, originalConfig.rollMode);\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    \n    const rollConfig = {\n      subject: originalConfig.subject || actor, \n      data: actor.getRollData(),\n      critical: originalConfig.critical || {},\n      rolls: originalConfig.rolls || [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #1', [rollConfig]);\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #2', [messageConfig]);\n    \n    const { position, ...dialogOptions } = originalDialog?.options || {}; \n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.DamageRoll,\n        rollTypeString: normalizedRollType,\n        window: {\n          title: game.i18n.localize(\"DND5E.DamageRoll\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...dialogOptions,\n        ...options\n      }\n    };\n    \n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    \n    if (!result?.rolls || result.rolls.length === 0) return null;\n    \n    const firstRoll = result.rolls[0];\n    \n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    const rollProcessConfig = {\n      rolls: [{\n        parts: [],\n        data: situational ? { situational } : {},\n        options: {\n          ...(target && { target }),\n          isCritical: firstRoll?.options?.isCritical || firstRoll?.isCritical || false\n        }\n      }],\n      subject: originalConfig.subject || actor,\n      target,\n      isCritical: firstRoll?.options?.isCritical || firstRoll?.isCritical || false,\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipRollDialog: options.skipRollDialog || false,\n      chatMessage: true\n    };\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #6', [rollProcessConfig]); \n    \n    const finalRollMode = RollHelpers.determineRollMode(isPublicRollsOn, result.message?.rollMode);\n    rollProcessConfig.rollMode = finalRollMode;\n    \n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    LogUtil.log('GMDamageConfigDialog, initConfiguration - result', [rollProcessConfig]);\n    \n    return rollProcessConfig;\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Attack Roll Configuration Dialog\n * Extends AttackRollConfigurationDialog to add send request toggle\n * @extends {dnd5e.applications.dice.AttackRollConfigurationDialog}\n */\nexport class GMAttackConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.AttackRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMAttackConfigDialog.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    super(config, message, options);\n    \n    LogUtil.log('GMAttackConfigDialog.constructor', [config, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * @param {D20Roll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('GMAttackConfigDialog._prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    await super._onRender(context, options);\n    \n    GeneralUtil.preventDialogFlicker(this.element);\n    \n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    let configSection = this.element.querySelector('.rolls .formulas');\n    \n    if (configSection && this.actors.length > 0) {\n      const templateData = {\n        showDC: false,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n  }\n  \n  /**\n   * Override _finalizeRolls to prevent re-rendering when sendRequest is toggled off\n   * @param {string} action - The action button clicked\n   * @returns {BasicRoll[]} Array of finalized rolls\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    this.config.sendRequest = this.sendRequest;\n    \n    if (!this.sendRequest && this.config.isRollRequest) {\n      this.config.isRollRequest = false;\n    }\n    \n    return super._finalizeRolls(action);\n  }\n  \n  /**\n   * Static method to create and display the attack configuration dialog.\n   * SIMPLIFIED VERSION: Matches ability check pattern without attack-specific configs\n   * @param {Actor[]} actors - Array of actors to roll for\n   * @param {string} rollType - The roll type (\"attack\")\n   * @param {string} rollKey - The item ID for the attack\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {Object} originalConfig - The original roll configuration from the intercepted roll\n   * @param {Object} originalDialog - The original dialog configuration from the intercepted roll\n   * @returns {Promise<Object|null>} Configuration with rolls array and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}, originalConfig = {}, originalDialog = {}) {\n    // Validate and normalize actors\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMAttackConfigDialog, initConfiguration', []);\n    \n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    \n    const rollConfig = {\n      subject: originalConfig.subject || actor,\n      data: actor.getRollData(),\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    const { position, ...dialogOptions } = originalDialog?.options || {};\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.D20Roll,\n        rollTypeString: normalizedRollType,\n        window: {\n          title: game.i18n.localize(\"DND5E.Attack\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...dialogOptions,\n        ...options\n      }\n    };\n    \n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    LogUtil.log('GMAttackConfigDialog, initConfiguration', [result?.sendRequest]);\n    \n    if (!result?.rolls || result.rolls.length === 0) return null;\n    \n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    const rollProcessConfig = {\n      rolls: [{\n        parts: [],\n        data: situational ? { situational } : {},\n        options: {\n          ...(target && { target }),\n          // Include attack-specific options from the roll\n          ...(firstRoll?.options?.ammunition && { ammunition: firstRoll.options.ammunition }),\n          ...(firstRoll?.options?.attackMode && { attackMode: firstRoll.options.attackMode }),\n          ...(firstRoll?.options?.mastery !== undefined && { mastery: firstRoll.options.mastery })\n        }\n      }],\n      subject: originalConfig.subject || actor,\n      advantage,\n      disadvantage,\n      target,\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipDialog: options.skipDialogs || false,\n      chatMessage: !GeneralUtil.isModuleOn('midi-qol') || true\n    };\n    \n    const finalRollMode = RollHelpers.determineRollMode(isPublicRollsOn, result.message?.rollMode);\n    rollProcessConfig.rollMode = finalRollMode;\n    \n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    LogUtil.log('GMAttackConfigDialog, initConfiguration - SIMPLIFIED result', [rollProcessConfig]);\n    \n    return rollProcessConfig;\n  }\n}","import { MODULE_ID } from \"../../constants/General.mjs\";\nimport { HooksUtil } from \"../HooksUtil.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\nimport { SettingsUtil } from \"../SettingsUtil.mjs\";\n\n/**\n * Helper functions for module management\n */\nexport class ModuleHelpers {\n  static midiTimeout = null;\n\n  /**\n   * Check if a module is installed and active\n   * @param {string} moduleId - The module ID to check\n   * @returns {boolean} - True if the module is installed and active\n   */\n  static isModuleActive(moduleId) {\n    const module = game.modules.get(moduleId);\n    return module && module.active;\n  }\n\n  /**\n   * Get the MidiQOL API if available\n   * @returns {Object|null} - The MidiQOL API or null if not available\n   */\n  static getMidiQOL() {\n    if (this.isModuleActive('midi-qol') && typeof MidiQOL !== 'undefined') {\n      return MidiQOL;\n    }\n    return null;\n  }\n\n  /**\n   * Set MidiQOL settings temporarily\n   * These settings are available as per MidiQOL docs\n   * lateTargeting: boolean to force enable/disable target confirmation for the items workflow\n   * autoRollAttack: boolean force enable/disable auto rolling of the attack,\n   * autoFastAttack: boolean force enable/disable fast forwarding of the attack\n   * autoRollDamage: string (always, onHit, none)\n   * autoFastDamage: boolean force enable/disable fastForward of the damage roll.\n   */\n  static async prepareMidiQOLSettings(){\n    let previousSettings = null;\n    LogUtil.log(\"prepareMidiQOLSettings #0\", [game.settings]);\n    \n    if(ModuleHelpers.isModuleActive(\"midi-qol\")){\n      LogUtil.log(\"prepareMidiQOLSettings #1\", [MidiQOL]);\n      previousSettings = {\n        autoFastForwardAbilityRolls: SettingsUtil.get(\"AutoFastForwardAbilityRolls\", \"midi-qol\"),\n        // configSettings: SettingsUtil.get(\"ConfigSettings\", \"midi-qol\")\n      }\n\n      clearTimeout(ModuleHelpers.midiTimeout);\n      ModuleHelpers.midiTimeout = setTimeout(() => {\n        if(previousSettings){\n          SettingsUtil.set(\"AutoFastForwardAbilityRolls\", previousSettings.autoFastForwardAbilityRolls, \"midi-qol\");\n          // SettingsUtil.set(\"ConfigSettings\", previousSettings.configSettings, \"midi-qol\");\n        }\n\n        LogUtil.log(\"prepareMidiQOLSettings #timeout 1\", [game.user.getFlag(MODULE_ID, 'savedMidiQOLSettings')]);\n        game.user.unsetFlag(MODULE_ID, 'savedMidiQOLSettings');\n        LogUtil.log(\"prepareMidiQOLSettings #timeout 2\", [game.user.getFlag(MODULE_ID, 'savedMidiQOLSettings')]);\n      }, 4000);\n\n      try{\n        LogUtil.log(\"prepareMidiQOLSettings #before\", [SettingsUtil.get(\"AutoFastForwardAbilityRolls\", \"midi-qol\")]);\n        await game.user.setFlag(MODULE_ID, 'savedMidiQOLSettings', previousSettings);\n        await SettingsUtil.set(\"AutoFastForwardAbilityRolls\", false, \"midi-qol\");\n        LogUtil.log(\"prepareMidiQOLSettings #after\", [SettingsUtil.get(\"AutoFastForwardAbilityRolls\", \"midi-qol\"), MidiQOL]);\n        // await SettingsUtil.set(\"ConfigSettings\", {\n        //   ...previousSettings.configSettings,\n        //   autoRollAttack: false,\n        //   autoRollDamage: false\n        // }, \"midi-qol\");\n      } catch(error){\n        LogUtil.error(\"prepareMidiQOLSettings\", [error]);\n      } finally {\n        LogUtil.log(\"prepareMidiQOLSettings - saved temporary settings for MidiQOL\", []);\n      }\n    }\n    return;\n  }\n\n\n}","import { LogUtil } from './LogUtil.mjs';\nimport { ROLL_TYPES, MODULE_ID, ACTIVITY_TYPES } from '../constants/General.mjs';\nimport { ModuleHelpers } from './helpers/ModuleHelpers.mjs';\n\n/**\n * @typedef {Object} ActivityUseConfiguration\n * @property {object|false} create\n * @property {boolean} create.measuredTemplate - Should this item create a template?\n * @property {object} concentration\n * @property {boolean} concentration.begin - Should this usage initiate concentration?\n * @property {string|null} concentration.end - ID of an active effect to end concentration on.\n * @property {object|false} consume\n * @property {boolean} consume.action - Should action economy be tracked? Currently only handles legendary actions.\n * @property {boolean|number[]} consume.resources - Set to `true` or `false` to enable or disable all resource\n *                                                   consumption or provide a list of consumption target indexes\n *                                                   to only enable those targets.\n * @property {boolean} consume.spellSlot - Should this spell consume a spell slot?\n * @property {Event} event - The browser event which triggered the item usage, if any.\n * @property {boolean|number} scaling - Number of steps above baseline to scale this usage, or `false` if\n *                                      scaling is not allowed.\n * @property {object} spell\n * @property {number} spell.slot - The spell slot to consume.\n * @property {boolean} [subsequentActions=true] - Trigger subsequent actions defined by this activity.\n * @property {object} [cause]\n * @property {string} [cause.activity] - Relative UUID to the activity that caused this one to be used.\n *                                       Activity must be on the same actor as this one.\n * @property {boolean|number[]} [cause.resources] - Control resource consumption on linked item.\n * @property {BasicRollConfiguration[]} [rolls] - Roll configurations for this activity\n */\n\n/**\n * Utility class for handling D&D5e 4.x activities\n */\nexport class ActivityUtil {\n  \n  /**\n   * Find the appropriate activity for a given roll type on an item\n   * @param {Item5e} item - The item to search for activities\n   * @param {string} rollType - The type of roll (attack, damage, itemSave)\n   * @returns {Activity5e|null} - The found activity or null\n   */\n  static findActivityForRoll(item, rollType) {\n    if (!item?.system?.activities) return null;\n    \n    const activities = item.system.activities;\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.ATTACK:\n        const attackActivities = activities.getByType(\"attack\");\n        return attackActivities?.[0] || null;\n        \n      case ROLL_TYPES.DAMAGE:\n        const damageAttackActivities = activities.getByType(\"attack\");\n        if (damageAttackActivities?.length > 0) return damageAttackActivities[0];\n        \n        const damageActivities = activities.getByType(\"damage\");\n        if (damageActivities?.length > 0) return damageActivities[0];\n        \n        const saveActivities = activities.getByType(\"save\");\n        if (saveActivities?.length > 0) return saveActivities[0];\n        \n        return null;\n        \n      case ROLL_TYPES.ITEM_SAVE:\n        const itemSaveActivities = activities.getByType(\"save\");\n        return itemSaveActivities?.[0] || null;\n        \n      default:\n        return null;\n    }\n  }\n  \n  /**\n   * Get all activities of a specific type from an item\n   * @param {Item5e} item - The item to search\n   * @param {string} activityType - The activity type (attack, damage, save, etc.)\n   * @returns {Activity5e[]} - Array of activities\n   */\n  static getActivitiesByType(item, activityType) {\n    if (!item?.system?.activities) return [];\n    return item.system.activities.getByType(activityType);\n  }\n  \n  /**\n   * Check if an item has activities suitable for a given roll type\n   * @param {Item5e} item - The item to check\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} - Whether the item has suitable activities\n   */\n  static hasActivityForRoll(item, rollType) {\n    LogUtil.log('hasActivityForRoll', [item, rollType]);\n    return !!this.findActivityForRoll(item, rollType);\n  }\n  \n  /**\n   * Execute a roll using the appropriate activity method\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {string} itemId - The item ID\n   * @param {string} activityId - The activity ID (optional)\n   * @param {Object} config - Roll configuration\n   * @param {ActivityUseConfiguration} config.usage - Activity usage configuration\n   * @param {BasicRollDialogConfiguration} config.dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} config.message - Message configuration\n   */\n  static async executeActivityRoll(actor, rollType, itemId, activityId, config) {\n    LogUtil.log('executeActivityRoll', [actor, rollType, itemId, activityId, config]);\n    const isMidiActive = ModuleHelpers.isModuleActive('midi-qol');\n    const item = actor.items.get(itemId);\n    if (!item) {\n      throw new Error(`Item ${itemId} not found on actor ${actor.name}`);\n    }\n    \n    let activity = null;\n    let damageConfig = null;\n    \n    // If activity ID provided, use it directly\n    if (activityId) {\n      activity = item.system.activities?.get(activityId);\n    }\n    activity = activity || this.findActivityForRoll(item, rollType);\n\n    if (!activity) {\n      throw new Error(`Activity not found on item ${item.name}`);\n    }\n    LogUtil.log('executeActivityRoll - activity', [activity, rollType]);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Execute the roll based on type\n    if (activity) {\n      switch (normalizedRollType) {\n        case ROLL_TYPES.ATTACK:\n          LogUtil.log('executeActivityRoll - is attack activity', [config]);\n          \n          // Workaround for _triggerSubsequentActions stripping off usage config\n          // Store request configuration in flags and retrieve in the preRollAttackV2 hook\n          const rollRequestConfig = {\n            attackMode: config.usage.attackMode,\n            ammunition: config.usage.ammunition,\n            mastery: config.usage.mastery,\n            situational: config.usage.rolls?.[0]?.data?.situational,\n            advantage: config.usage.advantage,\n            disadvantage: config.usage.disadvantage,\n            rollMode: config.message?.rollMode\n          };\n          await activity.item.setFlag(MODULE_ID, 'tempAttackConfig', rollRequestConfig);\n          \n          LogUtil.log('executeActivityRoll - stored temp config as flag', [rollRequestConfig]);\n          \n          try {\n            config.message.create = true;\n            await activity.use(config.usage, config.dialog, config.message);\n            LogUtil.log('FLASH_ROLLS TEST', [config]);\n            if(isMidiActive) {\n              const MidiQOL = ModuleHelpers.getMidiQOL();\n              if (MidiQOL) {\n                // const workflow = await ActivityUtil.syntheticItemRoll(item, {\n                //   ...config,\n                //   midiOptions: {\n                //     autoFastAttack: false,\n                //     autoFastDamage: false,\n                //     autoRollAttack: false,\n                //     autoRollDamage: false\n                //   }\n                // });\n                return\n              }\n            }\n          } catch (error) {\n            LogUtil.error('executeActivityRoll - attack roll error', [error]);\n          } finally {\n            // Only clean up the flag if we set it\n            await activity.item.unsetFlag(MODULE_ID, 'tempAttackConfig');\n          }\n          return;\n        case ROLL_TYPES.DAMAGE:\n          LogUtil.log('executeActivityRoll - damage roll', [activity, config]);\n          if(!isMidiActive) {\n            config.message.create = true;\n          }\n          // Extract the roll configuration from the usage config\n          damageConfig = {\n            critical: config.usage.critical || {},\n            situational: config.usage.rolls[0].data.situational || \"\",\n            rollMode: config.message?.rollMode,\n            create: config.message?.create !== false\n          };\n\n          if(activity.type === ACTIVITY_TYPES.SAVE || activity?.damageOnly){\n            await activity.use(config.usage, config.dialog, config.message);\n          }\n          await activity.item.setFlag(MODULE_ID, 'tempDamageConfig', damageConfig);\n          LogUtil.log('executeActivityRoll - damage config with situational', [damageConfig]);\n          \n          try {\n            if(isMidiActive) {\n              const MidiQOL = ModuleHelpers.getMidiQOL();\n              if (MidiQOL) {\n                const workflow = MidiQOL.Workflow?.getWorkflow(activity.uuid);\n                LogUtil.log('executeActivityRoll - workflow', [workflow]);\n                if(workflow){\n                  const damageRoll = await workflow.activity.rollDamage({\n                    ...config,\n                    workflow: workflow,\n                    // autoFastAttack: false,\n                    // autoFastDamage: false,\n                    // autoRollAttack: false,\n                    // autoRollDamage: false\n                  });\n                }\n                \n                // await activity.rollDamage(damageConfig, config.dialog, config.message);\n                return;\n              }\n            }else{\n              LogUtil.log('executeActivityRoll - damage roll', [activity, damageConfig, config]);\n              // if(activity?.previousAttack || activity?.damageOnly) {\n              await activity.rollDamage(damageConfig, config.dialog, config.message);\n              // }\n            }\n          } catch (error) {\n            LogUtil.error(['executeActivityRoll - damage roll error', error]);\n          } finally {\n            await activity.item.unsetFlag(MODULE_ID, 'tempDamageConfig');\n          }\n          return;\n        // case ROLL_TYPES.ITEM_SAVE:\n        //   // if(ModuleHelpers.isModuleActive('midi-qol')) {\n        //   //   const MidiQOL = ModuleHelpers.getMidiQOL();\n        //   //   if (MidiQOL) {\n        //   //     const workflow = MidiQOL.Workflow?.getWorkflow(activity.uuid);\n        //   //     const damageRoll = await workflow.activity.rollDamage({\n        //   //       ...config,\n        //   //       workflow: workflow\n        //   //     });\n        //   //     return;\n        //   //   }\n        //   // }\n\n        //   // we need to check if the activity has a previous attack\n        //   // or if it is a damage only roll, like from a spell with save\n        //   LogUtil.log('executeActivityRoll - save damage roll', [activity, config]);\n          \n        //   // Extract the roll configuration from the usage config\n        //   damageConfig = {\n        //     critical: config.usage.critical || {},\n        //     situational: config.usage.rolls[0].data.situational || \"\",\n        //     rollMode: config.message?.rollMode,\n        //     create: config.message?.create !== false\n        //   };\n\n        //   await activity.item.setFlag(MODULE_ID, 'tempDamageConfig', damageConfig);\n        //   LogUtil.log('executeActivityRoll - savedamage config with situational', [damageConfig]);\n        //   try {\n        //     await activity.use(config.usage, config.dialog, {\n        //       ...config.message,\n        //       create: true\n        //     });\n        //     await activity.rollDamage(damageConfig, config.dialog, config.message);\n        //   } catch (error) {\n        //     LogUtil.error(['executeActivityRoll - save damage roll error', error]);\n        //   } finally {\n        //     await activity.item.unsetFlag(MODULE_ID, 'tempDamageConfig');\n        //   }\n        //   return;\n        //   // // For save activities, use the item's use() method to show the save card\n        //   // return await item.use({ activity: activity.id }, { skipRollDialog: config.fastForward });\n        default:\n          LogUtil.log('executeActivityRoll - unknown roll type', [normalizedRollType]);\n          await activity.use(config.usage, config.dialog, config.message);\n          return;\n      }\n    }\n      \n    throw new Error(`No suitable method found for ${normalizedRollType} on item ${item.name}`);\n  }\n  \n  /**\n   * Get display information for an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {Object} - Display information\n   */\n  static getActivityDisplayInfo(activity) {\n    LogUtil.log('getActivityDisplayInfo', [activity]);\n    if (!activity) return null;\n    \n    return {\n      name: activity.name || activity.constructor.metadata.label,\n      type: activity.type,\n      icon: activity.constructor.metadata.icon,\n      canAttack: activity.type === 'attack',\n      canDamage: ['attack', 'damage', 'save'].includes(activity.type),\n      canSave: activity.type === 'save'\n    };\n  }\n  \n  /**\n   * Get damage formula string from an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {string|null} - Combined damage formula or null\n   */\n  static getDamageFormula(activity) {\n    LogUtil.log('getDamageFormula', [activity]);\n    if (!activity?.damage?.parts?.length) return null;\n    \n    // Extract all damage formulas and combine them\n    const formulas = activity.damage.parts.map(part => part.formula).filter(f => f);\n    return formulas.length > 0 ? formulas.join(' + ') : null;\n  }\n\n  static async syntheticItemRoll(item, config = {}) {\n    LogUtil.log('syntheticItemRoll', [item, config]);\n    \n    const MidiQOL = ModuleHelpers.getMidiQOL();\n    if (!MidiQOL) {\n      LogUtil.warn('MidiQOL is not active');\n      return;\n    }\n    \n    let defaultConfig = {\n        consumeUsage: false,\n        consumeSpellSlot: false\n    };\n    let defaultOptions = {\n      fastForward: false,\n      fastForwardAttack: false,\n      dialogOptions: {\n        fastForward: false,\n        fastForwardAttack: false,\n        // fastForwardDamage: false\n      },\n      // targetUuids: targets.map(i => i.document.uuid),\n      configureDialog: true,\n      // ignoreUserTargets: true,\n      workflowOptions: {\n        // autoRollAttack: false,\n        // autoFastAttack: false,\n        // autoRollDamage: 'none',\n        // autoFastDamage: false,\n        fastForward: false,\n        fastForwardAttack: false,\n        // fastForwardDamage: false\n      }\n    };\n\n    // options = genericUtils.mergeObject(defaultOptions, options);\n    config = {...defaultConfig, ...config};\n    return await MidiQOL.completeItemUse(item, config, defaultOptions);\n  }\n\n}","import { MODULE } from \"../../constants/General.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\n\n/**\n * Custom Roll Dialog - ApplicationV2 component for custom roll formulas\n */\nconst { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api;\nexport class CustomRollDialog extends HandlebarsApplicationMixin(ApplicationV2) {\n  constructor(options = {}) {\n    super(options);\n    this.formula = options.formula || \"\";\n    this.readonly = options.readonly || false;\n    this.actor = options.actor;\n    this.callback = options.callback;\n    this.diceCounts = {};\n  }\n\n  /**\n   * Default application configuration\n   */\n  static get DEFAULT_OPTIONS() {\n    return foundry.utils.mergeObject(super.DEFAULT_OPTIONS, {\n      id: \"flash5e-custom-roll-dialog\",\n      classes: [\"flash5e-dialog\", \"flash5e-custom-roll-dialog\"],\n      tag: \"div\",\n      window: {\n        title: \"FLASH_ROLLS.ui.dialogs.customRollTitle\",\n        icon: \"fas fa-dice-d20\",\n        resizable: false,\n        positioned: true,\n        frame: true\n      },\n      position: {\n        width: 420,\n        height: \"auto\"\n      }\n    });\n  }\n  \n  /**\n   * Override to handle action clicks\n   */\n  _onClickAction(event, target) {\n    const action = target.dataset.action;\n    switch (action) {\n      case \"rollDice\":\n        return this.rollDice(event, target);\n      case \"addDie\":\n        return this.addDie(event, target);\n      case \"cancel\":\n        return this.cancel(event, target);\n    }\n  }\n\n  /**\n   * Prepare application rendering context\n   */\n  async _prepareContext(options = {}) {\n    const context = await super._prepareContext(options);\n    return {\n      ...context,\n      formula: this.formula,\n      readonly: this.readonly\n    };\n  }\n\n  /**\n   * Define template parts\n   */\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/custom-roll-dialog.hbs`\n    },\n    footer: {\n      template: `modules/${MODULE.ID}/templates/custom-roll-dialog-footer.hbs`\n    }\n  };\n\n  /**\n   * Add event listeners\n   */\n  _attachPartListeners(partId, htmlElement, options) {\n    super._attachPartListeners(partId, htmlElement, options);\n    \n    const formulaInput = htmlElement.querySelector('#custom-roll-formula');\n    const validationMessage = htmlElement.querySelector('#formula-validation-message');\n    \n    if (formulaInput && !this.readonly) {\n      formulaInput.addEventListener('input', (event) => {\n        this.formula = event.target.value.trim();\n        this.updateValidationMessage(validationMessage);\n      });\n      \n      if (this.formula) {\n        this.updateValidationMessage(validationMessage);\n      }\n    }\n  }\n  \n  /**\n   * Update the validation message based on formula validity\n   * @param {HTMLElement} messageElement - The validation message element\n   */\n  updateValidationMessage(messageElement) {\n    if (!messageElement) return;\n    \n    if (!this.formula) {\n      messageElement.textContent = '&nbsp;';\n      messageElement.classList.remove('error', 'success');\n      return;\n    }\n    \n    const isValid = this.validateFormula(this.formula);\n    \n    if (isValid) {\n      messageElement.textContent = game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.formulaValid\");\n      messageElement.classList.remove('error');\n      messageElement.classList.add('success');\n    } else {\n      messageElement.textContent = game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.formulaInvalid\");\n      messageElement.classList.remove('success');\n      messageElement.classList.add('error');\n    }\n  }\n\n  /**\n   * Handle dice button click\n   * @param {Event} event\n   * @param {HTMLElement} target\n   */\n  addDie(event, target) {\n    const die = target.dataset.die;\n    \n    const formulaInput = this.element.querySelector('#custom-roll-formula');\n    if (!formulaInput) return;\n    \n    const currentFormula = formulaInput.value.trim();\n    \n    if (currentFormula) {\n      const diceRegex = /(\\d*)d(\\d+)/g;\n      const diceMap = new Map();\n      \n      let remainingFormula = currentFormula;\n      let match;\n      \n      while ((match = diceRegex.exec(currentFormula)) !== null) {\n        const count = parseInt(match[1] || '1');\n        const dieType = match[2];\n        diceMap.set(dieType, (diceMap.get(dieType) || 0) + count);\n        remainingFormula = remainingFormula.replace(match[0], '').trim();\n      }\n      \n      // Add the new die\n      const newDieType = die.substring(1); // Remove 'd' prefix\n      diceMap.set(newDieType, (diceMap.get(newDieType) || 0) + 1);\n      \n      // Rebuild the formula\n      const diceParts = [];\n      for (const [dieType, count] of diceMap) {\n        diceParts.push(`${count}d${dieType}`);\n      }\n      \n      remainingFormula = remainingFormula.replace(/^\\+\\s*|\\s*\\+\\s*$|\\s*\\+\\s*\\+/g, '').trim();\n      \n      if (remainingFormula && remainingFormula !== '+') {\n        this.formula = `${diceParts.join(' + ')} + ${remainingFormula}`;\n      } else {\n        this.formula = diceParts.join(' + ');\n      }\n    } else {\n      this.formula = `1${die}`;\n    }\n    formulaInput.value = this.formula;\n    \n    formulaInput.dispatchEvent(new Event('input'));\n  }\n\n  /**\n   * Validate the formula using Roll.validate\n   * @param {string} formula\n   * @returns {boolean}\n   */\n  validateFormula(formula) {\n    if (!formula || formula.trim() === \"\") return false;\n    \n    try {\n      return Roll.validate(formula);\n    } catch (error) {\n      try {\n        new Roll(formula, this.actor?.getRollData() || {});\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Handle roll button click\n   */\n  async rollDice() {\n    LogUtil.log('rollDice');\n    if (!this.validateFormula(this.formula)) {\n      ui.notifications.error(game.i18n.format(\"FLASH_ROLLS.notifications.invalidFormula\", {\n        formula: this.formula || \"empty\"\n      }));\n      return;\n    }\n    \n    if (this.callback) {\n      await this.callback(this.formula);\n    }\n    \n    this.close();\n  }\n\n  /**\n   * Handle cancel button click\n   */\n  cancel() {\n    this.close();\n  }\n\n  /**\n   * Show the dialog and return a promise for the formula\n   * @param {Object} options\n   * @returns {Promise<string|null>}\n   */\n  static async prompt(options = {}) {\n    return new Promise((resolve) => {\n      const dialog = new this({\n        ...options,\n        callback: (formula) => resolve(formula)\n      });\n      \n      dialog.addEventListener(\"close\", () => {\n        if (!dialog._resolved) {\n          resolve(null);\n        }\n      });\n      \n      dialog.render(true);\n    });\n  }\n\n  /**\n   * Override close to track resolution\n   */\n  async close(options = {}) {\n    this._resolved = true;\n    return super.close(options);\n  }\n}","import { HOOKS_CORE } from \"../constants/Hooks.mjs\";\nimport { MODULE_ID, ROLL_TYPES } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { GeneralUtil } from \"./helpers/GeneralUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { RollHelpers } from \"./helpers/RollHelpers.mjs\";\nimport { RollHandlers } from \"./RollHandlers.mjs\";\n\n/**\n * Utility class for managing group roll chat messages\n */\nexport class ChatMessageUtils {\n  /**\n   * Map of requestId to chat message document\n   * @type {Map<string, ChatMessage>}\n   */\n  static groupRollMessages = new Map();\n  \n  /**\n   * Map of requestId to pending roll data\n   * @type {Map<string, Object>}\n   */\n  static pendingRolls = new Map();\n  \n  /**\n   * Set of message IDs that are scheduled for deletion\n   * @type {Set<string>}\n   */\n  static messagesScheduledForDeletion = new Set();\n  \n  /**\n   * Path to the group roll template\n   * @type {string}\n   */\n  static templatePath = 'modules/flash-rolls-5e/templates/chat-msg-group-roll.hbs';\n  \n  /**\n   * Initialize the ChatMessageUtils\n   */\n  static async initialize() {\n    LogUtil.log('ChatMessageUtils.initialize');\n    await this.preloadTemplate();\n    this.registerEventListeners();\n  }\n  \n  /**\n   * Register event listeners for group roll messages\n   */\n  static registerEventListeners() {\n    const attachGroupRollListeners = (html, message) => {\n      html.querySelectorAll('.actor-result').forEach(element => {\n        element.addEventListener('click', (event) => {\n          if (event.target.closest('.dice-btn.rollable')) {\n            return;\n          }\n          \n          event.preventDefault();\n          event.stopPropagation();\n          \n          const actorResult = element;\n          \n          LogUtil.log('actor-result click', [element]);\n\n          if (actorResult.classList.contains('expanded')) {\n            actorResult.classList.remove('expanded');\n          } else {\n            actorResult.classList.add('expanded');\n          }\n        });\n      });\n      \n      html.querySelectorAll('.dice-btn.rollable').forEach(diceBtn => {\n        diceBtn.addEventListener('click', async (event) => {\n          event.preventDefault();\n          event.stopPropagation();\n          event.stopImmediatePropagation();\n          \n          const dataset = diceBtn.dataset;\n          const actorId = dataset.actorId;\n          const actor = game.actors.get(actorId);\n          \n          if (!actor) {\n            ui.notifications.warn(`Actor not found`);\n            return;\n          }\n          \n          const canRoll = game.user.isGM || actor.isOwner;\n          if (!canRoll) {\n            ui.notifications.warn(`You don't have permission to roll for ${actor.name}`);\n            return;\n          }\n          \n          const rollType = dataset.type?.toLowerCase();\n          const rollKey = dataset.rollKey;\n          const groupRollId = dataset.groupRollId;\n          const dc = dataset.dc ? parseInt(dataset.dc) : null;\n          \n          LogUtil.log('Rollable dice clicked', [rollType, rollKey, actorId, groupRollId]);\n          \n          const requestData = {\n            rollKey: rollKey,\n            groupRollId: groupRollId,\n            config: {\n              advantage: false,\n              disadvantage: false,\n              target: dc,\n              rollMode: game.settings.get(\"core\", \"rollMode\")\n            }\n          };\n          \n          // Dialog configuration - show dialog for rolls\n          const dialogConfig = {\n            configure: true,\n            isRollRequest: true\n          };\n          \n          const messageConfig = {\n            rollMode: game.settings.get(\"core\", \"rollMode\"),\n            create: true,\n            isRollRequest: true\n          };\n          \n          const rollConfig = {\n            parts: [],\n            data: {},\n            options: {}\n          };\n          \n          try {\n            const handler = RollHandlers[rollType];\n            if (handler) {\n              await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n            } else {\n              let rollMethod;\n              switch(rollType) {\n                case ROLL_TYPES.SKILL:\n                  rollMethod = 'rollSkill';\n                  break;\n                case ROLL_TYPES.ABILITY:\n                case ROLL_TYPES.ABILITY_CHECK:\n                  rollMethod = 'rollAbilityTest';\n                  break;\n                case ROLL_TYPES.SAVE:\n                case ROLL_TYPES.SAVING_THROW:\n                  rollMethod = 'rollAbilitySave';\n                  break;\n                case ROLL_TYPES.TOOL:\n                  rollMethod = 'rollToolCheck';\n                  break;\n                default:\n                  ui.notifications.warn(`Unknown roll type: ${rollType}`);\n                  return;\n              }\n              \n              if (rollMethod && actor[rollMethod]) {\n                await actor[rollMethod](rollKey, {\n                  ...requestData.config,\n                  messageOptions: { \"flags.flash-rolls-5e.groupRollId\": groupRollId }\n                });\n              }\n            }\n          } catch (error) {\n            LogUtil.error('Error executing roll from chat', error);\n            ui.notifications.error(`Failed to execute roll: ${error.message}`);\n          }\n        });\n      });\n      \n      // Handle DC control visibility and input\n      const dcControl = html.querySelector('.group-roll-dc-control');\n      const dcInput = html.querySelector('.dc-input');\n      \n      if (dcControl) {\n        const showToPlayers = dcControl.dataset.showToPlayers === 'true';\n        if (!game.user.isGM) {\n          dcControl.style.display = 'none';\n        }\n        if (!game.user.isGM && !showToPlayers) {\n          const groupFooterDetails = html.querySelector('.group-roll-footer .group-result-details');\n          if (groupFooterDetails) {\n            groupFooterDetails.style.display = 'none';\n          }\n        }\n      }\n      \n      if (dcInput) {\n        if (!game.user.isGM) {\n          dcInput.readOnly = true;\n          dcInput.style.cursor = 'not-allowed';\n        } else {\n          let debounceTimer = null;\n          \n          const handleDCChange = async () => {\n            const newDC = parseInt(dcInput.value);\n            \n            if (!dcInput.value) return;\n            \n            if (isNaN(newDC) || newDC < 1 || newDC > 99) {\n              dcInput.value = '';\n              return;\n            }\n            \n            const messageId = dcInput.dataset.messageId;\n            const targetMessage = game.messages.get(messageId);\n            \n            if (targetMessage) {\n              await this.updateGroupRollDC(targetMessage, newDC);\n            }\n          };\n          \n          dcInput.addEventListener('input', (e) => {\n            if (debounceTimer) {\n              clearTimeout(debounceTimer);\n            }\n            \n            debounceTimer = setTimeout(() => {\n              handleDCChange();\n            }, 750);\n          });\n          \n          dcInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n              if (debounceTimer) {\n                clearTimeout(debounceTimer);\n              }\n              handleDCChange();\n            }\n          });\n        }\n      }\n    };\n    \n    Hooks.on(HOOKS_CORE.RENDER_CHAT_MESSAGE, (message, html) => {\n      if (!message.getFlag(MODULE_ID, 'isGroupRoll')) return;\n      attachGroupRollListeners(html, message);\n    });\n    \n    Hooks.on(HOOKS_CORE.RENDER_CHAT_LOG, (app, html) => {\n      const groupRollElements = html.querySelectorAll('.flash5e-group-roll');\n      groupRollElements.forEach(element => {\n        const messageElement = element.closest('.chat-message');\n        if (messageElement) {\n          const messageId = messageElement.dataset.messageId;\n          const message = game.messages.get(messageId);\n          if (message && message.getFlag(MODULE_ID, 'isGroupRoll')) {\n            attachGroupRollListeners(element, message);\n          }\n        }\n      });\n    });\n  }\n  \n  /**\n   * Preload the Handlebars template\n   */\n  static async preloadTemplate() {\n    LogUtil.log('ChatMessageUtils.preloadTemplate');\n    try {\n      await GeneralUtil.loadTemplates([this.templatePath]);\n    } catch (error) {\n      LogUtil.error('Failed to preload template', error);\n    }\n  }\n  \n  /**\n   * Create a group roll message for multiple actors\n   * @param {Array<{actor: Actor, uniqueId: string, tokenId: string|null}>} actorEntries - Array of actor entries with unique identifiers\n   * @param {string} rollType - Type of roll\n   * @param {string} rollKey - Specific roll key\n   * @param {Object} config - Roll configuration\n   * @param {string} groupRollId - Unique group roll identifier\n   * @returns {Promise<ChatMessage>} The created chat message\n   */\n  static async createGroupRollMessage(actorEntries, rollType, rollKey, config, groupRollId) {\n    LogUtil.log('ChatMessageUtils.createGroupRollMessage', [actorEntries.length, rollType, rollKey, groupRollId]);\n    \n    const data = this.buildGroupRollData(actorEntries, rollType, rollKey, config);\n    if (!data) {\n      LogUtil.error('createGroupRollMessage - Failed to build group roll data');\n      return null;\n    }\n    data.groupRollId = groupRollId;\n    const validEntries = actorEntries.filter(entry => entry && entry.actor);\n    const hasPlayerOwnedActor = validEntries.some(entry => RollHelpers.isPlayerOwnerActive(entry.actor));\n    const rollMode = hasPlayerOwnedActor ? \n      CONST.DICE_ROLL_MODES.PUBLIC : \n      game.settings.get(\"core\", \"rollMode\");\n    \n    this.pendingRolls.set(groupRollId, {\n      actorEntries: validEntries.map(entry => ({ actorId: entry.actor.id, uniqueId: entry.uniqueId, tokenId: entry.tokenId })),\n      rollType,\n      rollKey,\n      config,\n      results: new Map()\n    });\n    \n    const message = await this.postGroupMessage(data, rollMode);    \n    return message;\n  }\n  \n  /**\n   * Build the data object for the group roll template\n   * @param {Array<{actor: Actor, uniqueId: string, tokenId: string|null}>} actorEntries - Array of actor entries with unique identifiers\n   * @param {string} rollType - Type of roll\n   * @param {string} rollKey - Specific roll key\n   * @param {Object} config - Roll configuration\n   * @returns {Object} Template data\n   */\n  static buildGroupRollData(actorEntries, rollType, rollKey, config) {\n    LogUtil.log('ChatMessageUtils.buildGroupRollData', [actorEntries.length, rollType, rollKey, config]);\n    LogUtil.log('ChatMessageUtils.buildGroupRollData - actorEntries structure', actorEntries.map(entry => ({\n      hasEntry: !!entry,\n      hasActor: !!(entry && entry.actor),\n      entryKeys: entry ? Object.keys(entry) : 'null',\n      actorType: entry?.actor?.constructor?.name || 'undefined'\n    })));\n    \n    const validEntries = actorEntries.filter(entry => entry && entry.actor);\n    if (validEntries.length === 0) {\n      LogUtil.error('buildGroupRollData - No valid actor entries found', [actorEntries]);\n      return null;\n    }\n    \n    let flavor = this._buildFlavorText(rollType, rollKey, config);\n    const dc = config?.dc || config?.target;\n    const results = validEntries.map(entry => ({\n      actorId: entry.actor.id,\n      uniqueId: entry.uniqueId,\n      tokenId: entry.tokenId,\n      actorImg: entry.actor.img || entry.actor.prototypeToken?.texture?.src || 'icons/svg/mystery-man.svg',\n      actorName: entry.tokenId ? \n        (canvas.tokens?.get(entry.tokenId)?.name || entry.actor.name) : \n        entry.actor.name,\n      rolled: false,\n      showDice: true,\n      total: null,\n      success: false,\n      failure: false\n    }));\n    \n    const supportsDC = RollHelpers.shouldShowDC(rollType);\n    const SETTINGS = getSettings();\n    const showDCToPlayers = SettingsUtil.get(SETTINGS.showGroupDCToPlayers.tag);\n    \n    return {\n      flavor,\n      results,\n      showDC: dc !== undefined && dc !== null,\n      dc,\n      rollType,\n      rollKey,\n      supportsDC,\n      showDCToPlayers,\n      actorEntries: validEntries.map(entry => ({ actorId: entry.actor.id, uniqueId: entry.uniqueId, tokenId: entry.tokenId })),\n      moduleId: MODULE_ID\n    };\n  }\n  \n  /**\n   * Build flavor text for the roll\n   * @private\n   */\n  static _buildFlavorText(rollType, rollKey, config) {\n    let flavor = '';\n    \n    switch(rollType?.toLowerCase()) {\n      case 'ability':\n      case 'abilitycheck':\n        const abilityLabel = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        flavor = game.i18n.format(\"DND5E.AbilityPromptTitle\", { ability: abilityLabel });\n        break;\n      case 'save':\n      case 'savingthrow':\n        const saveLabel = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        flavor = game.i18n.format(\"DND5E.SavePromptTitle\", { ability: saveLabel });\n        break;\n      case 'skill':\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        const skillAbility = config?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n        const skillAbilityLabel = CONFIG.DND5E.abilities[skillAbility]?.label || skillAbility;\n        flavor = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: skillAbilityLabel\n        });\n        break;\n      case 'tool':\n        flavor = `Tool Check: ${rollKey}`;\n        break;\n      case 'initiative':\n        flavor = game.i18n.localize(\"DND5E.Initiative\");\n        break;\n      case 'attack':\n        flavor = config?.flavor || \"Attack Roll\";\n        break;\n      case 'damage':\n        flavor = config?.flavor || \"Damage Roll\";\n        break;\n      default:\n        flavor = config?.flavor || \"Roll Request\";\n    }\n    \n    return flavor;\n  }\n  \n  /**\n   * Post a group message to chat\n   * @param {Object} data - Message data\n   * @param {string} [rollMode] - The roll mode for the message\n   * @returns {Promise<ChatMessage>} The created message\n   */\n  static async postGroupMessage(data, rollMode = null) {\n    LogUtil.log('postGroupMessage - groupRollId', [data.groupRollId, rollMode]);\n    \n    try {\n      const content = await GeneralUtil.renderTemplate(this.templatePath, data);\n      const messageData = {\n        content,\n        speaker: {\n          alias: \"Group Roll\"\n        },\n        flags: {\n          [MODULE_ID]: {\n            isGroupRoll: true,\n            groupRollId: data.groupRollId,\n            rollData: data\n          }\n        }\n      };\n      if (rollMode) {\n        ChatMessage.applyRollMode(messageData, rollMode);\n      }\n      \n      const msg = await ChatMessage.create(messageData);\n      this.groupRollMessages.set(data.groupRollId, msg);\n      return msg;\n    } catch (error) {\n      LogUtil.error('Failed to post group message', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Update a group roll message with a completed roll result\n   * @param {string} groupRollId - The group roll identifier\n   * @param {string} uniqueId - The unique identifier (token ID or actor ID) who rolled\n   * @param {Roll} roll - The completed roll\n   */\n  static async updateGroupRollMessage(groupRollId, uniqueId, roll) {\n    LogUtil.log('ChatMessageUtils.updateGroupRollMessage', [groupRollId, uniqueId, roll ]);\n    \n    if (!game.user.isGM) {\n      return;\n    }\n    \n    let message = this.groupRollMessages.get(groupRollId);\n    let pendingData = this.pendingRolls.get(groupRollId);\n    \n    if (!message) {\n      const messages = game.messages.contents;\n      message = messages.find(m => \n        m.getFlag(MODULE_ID, 'groupRollId') === groupRollId &&\n        m.getFlag(MODULE_ID, 'isGroupRoll')\n      );\n      \n      if (message) {\n        this.groupRollMessages.set(groupRollId, message);\n        LogUtil.log('updateGroupRollMessage - Found and registered group message', [groupRollId]);\n        \n        if (!pendingData) {\n          const flagData = message.getFlag(MODULE_ID, 'rollData');\n          pendingData = {\n            actorEntries: flagData.actorEntries || flagData.results.map(r => ({ actorId: r.actorId, uniqueId: r.uniqueId, tokenId: r.tokenId })),\n            results: new Map()\n          };\n          this.pendingRolls.set(groupRollId, pendingData);\n        }\n      }\n    }\n    \n    if (!message) {\n      LogUtil.log('No group message found for groupRollId', groupRollId);\n      return;\n    }\n    \n    // Store the result if pendingData exists\n    if (pendingData && pendingData.results) {\n      pendingData.results.set(uniqueId, {\n        total: roll.total,\n        roll: roll\n      });\n    }\n    \n    const flagData = message.getFlag(MODULE_ID, 'rollData');\n    \n    const resultIndex = flagData.results.findIndex(r => r.uniqueId === uniqueId);\n    if (resultIndex !== -1) {\n      flagData.results[resultIndex].rolled = true;\n      flagData.results[resultIndex].showDice = false;\n      flagData.results[resultIndex].total = roll.total;\n      \n      try {\n        flagData.results[resultIndex].rollBreakdown = await roll.render();\n      } catch (error) {\n        LogUtil.error('Error rendering roll breakdown', error);\n        flagData.results[resultIndex].rollBreakdown = null;\n      }\n      \n      if (flagData.showDC && flagData.dc) {\n        flagData.results[resultIndex].success = roll.total >= flagData.dc;\n        flagData.results[resultIndex].failure = roll.total < flagData.dc;\n      }\n    }\n    \n    flagData.allRolled = flagData.results.every(r => r.rolled);\n    flagData.messageId = message.id;\n    \n    flagData.supportsDC = RollHelpers.shouldShowDC(flagData.rollType);\n    \n    const SETTINGS = getSettings();\n    flagData.showDCToPlayers = SettingsUtil.get(SETTINGS.showGroupDCToPlayers.tag);\n    \n    // Calculate group result if DC is set and roll type supports it\n    if (flagData.supportsDC && flagData.showDC && flagData.dc) {\n      const actors = flagData.actorEntries?.map(entry => game.actors.get(entry.actorId)).filter(a => a) || \n                     flagData.actors?.map(id => game.actors.get(id)).filter(a => a) || [];\n      \n      const groupResult = RollHelpers.getGroupResult(\n        flagData.results,\n        flagData.dc,\n        actors,\n        flagData.rollType,\n        flagData.rollKey\n      );\n      \n      flagData.groupResult = groupResult;\n      LogUtil.log('updateGroupRollMessage - COMPLETE?', [groupResult.complete]);\n      \n      if (groupResult.complete && groupResult.details) {\n        flagData.groupSummary = groupResult.details.summary;\n      }\n    }\n    \n    const newContent = await GeneralUtil.renderTemplate(this.templatePath, flagData);\n    await message.update({\n      content: newContent,\n      flags: {\n        [MODULE_ID]: {\n          rollData: flagData\n        }\n      }\n    });\n    \n    if (pendingData?.results && pendingData?.actorEntries) {\n      if (pendingData.results.size === pendingData.actorEntries.length) {\n        this.pendingRolls.delete(groupRollId);\n        setTimeout(() => {\n          this.groupRollMessages.delete(groupRollId);\n        }, 60000); // Clean up after 1 minute\n      }\n    }\n  }\n  \n  /**\n   * Update group roll message with new DC value\n   * @param {ChatMessage} message - The chat message to update\n   * @param {number} newDC - The new DC value\n   */\n  static async updateGroupRollDC(message, newDC) {\n    const flagData = message.getFlag(MODULE_ID, 'rollData');\n    if (!flagData) return;\n    \n    flagData.supportsDC = RollHelpers.shouldShowDC(flagData.rollType);\n    if (!flagData.supportsDC) return;\n    \n    flagData.dc = newDC;\n    flagData.showDC = true;\n    flagData.results.forEach(result => {\n      if (result.rolled && result.total !== null) {\n        result.success = result.total >= newDC;\n        result.failure = result.total < newDC;\n      }\n    });\n    \n    const actors = flagData.actorEntries?.map(entry => game.actors.get(entry.actorId)).filter(a => a) || \n                   flagData.actors?.map(id => game.actors.get(id)).filter(a => a) || [];\n    \n    const groupResult = RollHelpers.getGroupResult(\n      flagData.results,\n      newDC,\n      actors,\n      flagData.rollType,\n      flagData.rollKey\n    );\n    \n    flagData.groupResult = groupResult;\n    \n    if (groupResult.complete && groupResult.details) {\n      flagData.groupSummary = groupResult.details.summary;\n    }\n    \n    flagData.allRolled = flagData.results.every(r => r.rolled);\n    flagData.messageId = message.id;\n    \n    const SETTINGS = getSettings();\n    flagData.showDCToPlayers = SettingsUtil.get(SETTINGS.showGroupDCToPlayers.tag);\n    \n    const newContent = await GeneralUtil.renderTemplate(this.templatePath, flagData);\n    await message.update({\n      content: newContent,\n      flags: {\n        [MODULE_ID]: {\n          rollData: flagData\n        }\n      }\n    });\n  }\n  \n  /**\n   * Intercept individual roll messages and update group message instead\n   * @param {ChatMessage} message - The chat message document\n   * @param {HTMLElement} html - The rendered HTML element\n   * @param {Object} context - Rendering context\n   * @returns {boolean} Return false to prevent rendering\n   */\n  static interceptRollMessage(message, html, context) {\n    const SETTINGS = getSettings();\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    if (!groupRollsMsgEnabled) return;\n    \n    const actorId = message.speaker?.actor;\n    const tokenId = message.speaker?.token;\n    \n    // For unlinked tokens, we need to get the synthetic actor from the token\n    // because flags are set on the synthetic actor, not the base actor\n    let actor;\n    if (tokenId) {\n      const token = canvas.tokens?.get(tokenId) || game.scenes.active?.tokens?.get(tokenId);\n      actor = token?.actor;  // This gets the synthetic actor for unlinked tokens\n    }\n    if (!actor) {\n      actor = game.actors.get(actorId);\n    }\n\n    if (!actor) return;\n    \n    const uniqueId = tokenId || actorId;\n    const groupRollId = message.getFlag(MODULE_ID, 'groupRollId') || actor.getFlag(MODULE_ID, 'tempInitiativeConfig')?.groupRollId;\n\n    LogUtil.log('interceptRollMessage #1', [actor, message.getFlag(MODULE_ID, 'groupRollId'), actor.getFlag(MODULE_ID, 'tempInitiativeConfig')?.groupRollId]);\n    if (!groupRollId) {\n      LogUtil.log('interceptRollMessage #2 - no groupRollId in flag', [actor.name]);\n      return;\n    }\n    \n    if (!game.user.isGM && !this.groupRollMessages.has(groupRollId)) {\n      const messages = game.messages.contents;\n      const groupMessage = messages.find(m => \n        m.getFlag(MODULE_ID, 'groupRollId') === groupRollId &&\n        m.getFlag(MODULE_ID, 'isGroupRoll')\n      );\n      \n      if (groupMessage) {\n        this.groupRollMessages.set(groupRollId, groupMessage);\n        LogUtil.log('interceptRollMessage - Registered group roll message', [actor.name,groupRollId]);\n      }\n    }\n    \n    if (!this.groupRollMessages.has(groupRollId)) {\n      LogUtil.log('interceptRollMessage - groupRollId not in map', [actor.name, groupRollId, Array.from(this.groupRollMessages.keys())]);\n      LogUtil.log('interceptRollMessage - All group messages in chat:', [\n        game.messages.contents,\n        game.messages.contents\n          .filter(m => m.getFlag(MODULE_ID, 'isGroupRoll'))\n          .map(m => ({ id: m.id, groupRollId: m.getFlag(MODULE_ID, 'groupRollId') }))\n      ]);\n      \n      const messages = game.messages.contents;\n      const groupMessage = messages.find(m => \n        m.getFlag(MODULE_ID, 'groupRollId') === groupRollId &&\n        m.getFlag(MODULE_ID, 'isGroupRoll')\n      );\n      \n      if (groupMessage) {\n        LogUtil.log('interceptRollMessage - Found group message in chat log, registering', [groupRollId]);\n        this.groupRollMessages.set(groupRollId, groupMessage);\n      } else {\n        LogUtil.log('interceptRollMessage - No group message found in chat log either', [groupRollId]);\n        return;\n      }\n    }\n    \n    const roll = message.rolls?.[0];\n    if (!roll) return;\n    \n    if (html && html instanceof HTMLElement && html.style) {\n      html.style.display = 'none';\n    }\n    \n    if (game.user.isGM) {\n      this.updateGroupRollMessage(groupRollId, uniqueId, roll);\n      \n      const msgId = message.id;\n      if (this.messagesScheduledForDeletion.has(msgId)) {\n        return;\n      }\n      this.messagesScheduledForDeletion.add(msgId);\n      \n      if (msgId) {\n        setTimeout(async () => {\n          LogUtil.log('interceptRollMessage - deletion', [msgId]);\n          try {\n            const msgExists = game.messages.get(msgId);\n            if (msgExists) {\n              await message.delete();\n              LogUtil.log('interceptRollMessage - Deleted individual message', [msgId]);\n            } else {\n              LogUtil.log('interceptRollMessage - Message already deleted', [msgId]);\n            }\n          } catch (error) {\n            LogUtil.log('interceptRollMessage - Error deleting message', [msgId, error.message]);\n          } finally {\n            this.messagesScheduledForDeletion.delete(msgId);\n          }\n        }, 500);\n      }\n    } else {\n      // Player side - don't try to update the message (no permission)\n      LogUtil.log('interceptRollMessage - Player roll intercepted, GM will handle update', [groupRollId]);\n    }\n    \n    return;\n  }\n  \n  /**\n   * Check if a request should use group messaging\n   * @param {string} requestId - Request identifier\n   * @returns {boolean} True if this is a group roll\n   */\n  static isGroupRoll(requestId) {\n    return this.pendingRolls.has(requestId) || this.groupRollMessages.has(requestId);\n  }\n  \n  /**\n   * Add groupRollId to message flags if it's a group roll\n   * @param {Object} messageConfig - The message configuration object\n   * @param {Object} requestData - The request data containing the groupRollId\n   * @param {Actor} actor - The actor performing the roll (optional, for player flag storage)\n   */\n  static async addGroupRollFlag(messageConfig, requestData, actor = null) {\n    const SETTINGS = getSettings();\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    \n    LogUtil.log('addGroupRollFlag called', [messageConfig, requestData.groupRollId, this.isGroupRoll(requestData.groupRollId)]);\n    \n    if (!game.user.isGM && requestData.groupRollId && actor) {\n      await actor.setFlag(MODULE_ID, 'tempGroupRollId', requestData.groupRollId);\n      LogUtil.log('addGroupRollFlag - Stored tempGroupRollId on actor for player', [requestData.groupRollId, actor.id]);\n      \n      if (!this.groupRollMessages.has(requestData.groupRollId)) {\n        const messages = game.messages.contents;\n        const groupMessage = messages.find(m => \n          m.getFlag(MODULE_ID, 'groupRollId') === requestData.groupRollId &&\n          m.getFlag(MODULE_ID, 'isGroupRoll')\n        );\n        \n        if (groupMessage) {\n          this.groupRollMessages.set(requestData.groupRollId, groupMessage);\n          LogUtil.log('addGroupRollFlag - Registered group roll message on player side', [requestData.groupRollId]);\n        }\n      }\n    }\n    \n    // Add groupRollId for any multi-actor roll when setting is enabled\n    if (groupRollsMsgEnabled && requestData.groupRollId) {\n      const shouldAddFlag = game.user.isGM ? this.isGroupRoll(requestData.groupRollId) : true;\n      \n      if (shouldAddFlag) {\n        messageConfig.data = messageConfig.data || {};\n        messageConfig.data.flags = messageConfig.data.flags || {};\n        messageConfig.data.flags[MODULE_ID] = messageConfig.data.flags[MODULE_ID] || {};\n        messageConfig.data.flags[MODULE_ID].groupRollId = requestData.groupRollId;\n        \n        LogUtil.log('addGroupRollFlag - Added flag to messageConfig', [messageConfig]);\n      }\n    }\n  }\n  \n  /**\n   * Clean up old messages and data\n   */\n  static cleanup() {\n    const fiveMinutesAgo = Date.now() - (5 * 60 * 1000);\n    \n    for (const [requestId, message] of this.groupRollMessages.entries()) {\n      if (message.timestamp < fiveMinutesAgo) {\n        this.groupRollMessages.delete(requestId);\n        this.pendingRolls.delete(requestId);\n      }\n    }\n  }\n}","import { ROLL_TYPES, MODULE_ID } from \"../constants/General.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\nimport { RollHelpers } from \"./helpers/RollHelpers.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { CustomRollDialog } from \"./dialogs/CustomRollDialog.mjs\";\nimport { NotificationManager } from \"./helpers/Helpers.mjs\";\nimport { ChatMessageUtils } from \"./ChatMessageUtils.mjs\";\n\nexport const RollHandlers = {\n  ability: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    LogUtil.log('RollHandlers.ability #1', [rollConfig]);\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      ability: requestData.rollKey\n    });\n    LogUtil.log('RollHandlers.ability #2', [config.rolls?.[0]]);\n    LogUtil.log('RollHandlers.ability - messageConfig', messageConfig);\n    \n    // Add groupRollId to message flags if it's a group roll\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    \n    await actor.rollAbilityCheck(config, dialogConfig, messageConfig);\n  },\n  \n  abilitycheck: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.ability(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  save: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      ability: requestData.config?.ability || requestData.rollKey\n    });\n    \n    // Add groupRollId to message flags if it's a group roll\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    \n    await actor.rollSavingThrow(config, dialogConfig, messageConfig);\n  },\n  \n  savingthrow: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.save(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  skill: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    LogUtil.log('RollHandlers.skill #1', [requestData, rollConfig, dialogConfig]);\n\n    // Get the default ability for this skill from the actor\n    const defaultAbility = actor.system.skills?.[requestData.rollKey]?.ability || \n                          CONFIG.DND5E.skills?.[requestData.rollKey]?.ability || \n                          undefined;\n\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      skill: requestData.rollKey, \n      chooseAbility: dialogConfig.configure !== false, \n      ability: requestData.config.ability || defaultAbility \n    });\n    \n    // If we have a custom ability, set the flavor in the message config\n    if (requestData.config.ability && dialogConfig.configure === false) {\n      const skillLabel = CONFIG.DND5E.skills[requestData.rollKey]?.label || requestData.rollKey;\n      const abilityLabel = CONFIG.DND5E.abilities[requestData.config.ability]?.label || requestData.config.ability;\n      const flavor = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n        skill: skillLabel, \n        ability: abilityLabel \n      });\n      messageConfig.data = messageConfig.data || {};\n      messageConfig.data.flavor = flavor;\n    }\n    LogUtil.log('RollHandlers.skill #2', [config, dialogConfig, messageConfig]);\n    \n    // Add groupRollId to message flags if it's a group roll\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    \n    await actor.rollSkill(config, dialogConfig, messageConfig);\n  },\n\n  tool: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    LogUtil.log('RollHandlers.tool #1', [requestData, rollConfig]);\n\n    // Get the default ability for this tool from the actor\n    // Tools can have custom abilities set per actor, or use the system default\n    const toolConfig = actor.system.tools?.[requestData.rollKey];\n    const defaultAbility = toolConfig?.ability || \n                          CONFIG.DND5E.enrichmentLookup?.tools?.[requestData.rollKey]?.ability ||\n                          'int';\n\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      tool: requestData.rollKey,\n      chooseAbility: dialogConfig.configure !== false, \n      ability: requestData.config.ability || defaultAbility\n    });\n    \n    // If we have a custom ability, set the flavor in the message config\n    if (requestData.config.ability && dialogConfig.configure === false) {\n      const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[requestData.rollKey];\n      let toolLabel = requestData.rollKey;\n      if (toolData?.id) {\n        const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n        toolLabel = toolItem?.name || requestData.rollKey;\n      }\n      const abilityLabel = CONFIG.DND5E.abilities[requestData.config.ability]?.label || requestData.config.ability;\n      const flavor = game.i18n.format(\"DND5E.ToolPromptTitle\", { \n        tool: toolLabel, \n        ability: abilityLabel \n      });\n      messageConfig.data = messageConfig.data || {};\n      messageConfig.data.flavor = flavor;\n    }\n    LogUtil.log('RollHandlers.tool #2', [config, dialogConfig, messageConfig]);\n    \n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollToolCheck(config, dialogConfig, messageConfig);\n  },\n\n  concentration: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig);\n    \n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollConcentration(config, dialogConfig, messageConfig);\n  },\n\n  attack: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.ATTACK, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  damage: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.DAMAGE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  itemsave: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.ITEM_SAVE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  initiative: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    if (!game.combat) {\n      ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n      return;\n    }\n    const situational = requestData.config.situational || rollConfig.data?.situational || '';\n    const groupRollId = requestData.groupRollId;\n\n    let tokenActor = actor;\n    if (!actor.isToken) {\n      // Find a token for this actor in the current scene\n      const token = canvas.tokens.placeables.find(t => t.actor?.id === actor.id);\n      if (token) {\n        tokenActor = token.actor;\n      } else {\n        ui.notifications.error(game.i18n.format(\"COMBAT.NoneActive\"));\n        return;\n      }\n    }\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n\n    LogUtil.log('RollHandlers.initiative - START', [\n      actor, requestData, rollConfig, dialogConfig\n    ]);\n    \n    try {\n      if (dialogConfig.configure) {\n        LogUtil.log('RollHandlers.initiative - Dialog', []);\n        \n        if (requestData.config) {\n          const initiativeConfig = RollHelpers.buildRollConfig(requestData, rollConfig, {\n            ability: actor.system.attributes?.init?.ability || 'dex'\n          });\n          \n          const tempConfig = {\n            advantage: requestData.config.advantage || false,\n            disadvantage: requestData.config.disadvantage || false,\n            rollMode: requestData.config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n            rolls: initiativeConfig.rolls,\n            groupRollId: requestData.groupRollId\n          };\n          LogUtil.log('RollHandlers.initiative - Setting tempConfig with groupRollId', [requestData.groupRollId, actor.name, tokenActor.name]);\n          await actor.setFlag(MODULE_ID, 'tempInitiativeConfig', tempConfig);\n          await tokenActor.setFlag(MODULE_ID, 'tempInitiativeConfig', tempConfig);\n        }\n        await tokenActor.rollInitiativeDialog();\n        await tokenActor.unsetFlag(MODULE_ID, 'tempInitiativeConfig');\n        await actor.unsetFlag(MODULE_ID, 'tempInitiativeConfig');\n\n      } else {\n        LogUtil.log('RollHandlers.initiative - Not dialog');\n        const tempConfig = {\n          rollMode: requestData.config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n          groupRollId: requestData.groupRollId\n        };\n        LogUtil.log('RollHandlers.initiative - Setting tempConfig (no dialog) with groupRollId', [requestData.groupRollId, actor.name, tokenActor.name]);\n        await actor.setFlag(MODULE_ID, 'tempInitiativeConfig', tempConfig);\n        await tokenActor.setFlag(MODULE_ID, 'tempInitiativeConfig', tempConfig);\n\n        const rollOptions = {\n          createCombatants: true,\n          rerollInitiative: true\n        };\n        await tokenActor.rollInitiative(rollOptions);\n        await tokenActor.unsetFlag(MODULE_ID, 'tempInitiativeConfig');\n        await actor.unsetFlag(MODULE_ID, 'tempInitiativeConfig');\n      }\n      \n      LogUtil.log('RollHandlers.initiative - COMPLETE');\n    } catch (error) {\n      LogUtil.error('RollHandlers.initiative - Error', [error]);\n      NotificationManager.notify('error', `Initiative roll failed: ${error.message}`);\n    }\n  },\n  \n  // Alias for INITIATIVE_DIALOG\n  initiativedialog: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.initiative(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  deathsave: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig);\n    \n    // Add groupRollId to message flags if it's a group roll\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollDeathSave(config, dialogConfig, messageConfig);\n  },\n\n  hitdie: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    dialogConfig.configure = game.user.isGM ? dialogConfig.configure : true;\n    \n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      denomination: requestData.rollKey // The hit die denomination (d6, d8, etc.)\n    });\n    LogUtil.log('RollHandlers.hitdie', [config, dialogConfig, messageConfig]);\n    await actor.rollHitDie(config, dialogConfig, messageConfig);\n  },\n\n  custom: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleCustomRoll(actor, requestData, dialogConfig, messageConfig);\n  },\n\n\n  /**\n   * Handle activity-based rolls (attack, damage, item save)\n   * SIMPLIFIED VERSION: No attack-specific options\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll from ROLL_TYPES\n   * @param {Object} requestData - The roll request data\n   * @param {string} requestData.rollKey - The item ID\n   * @param {string} requestData.activityId - The activity ID\n   * @param {Object} requestData.config - Configuration\n   * @param {string} [requestData.config.situational] - Situational bonus formula\n   * @param {BasicRollConfiguration} rollConfig - Individual roll configuration\n   * @param {BasicRollDialogConfiguration} dialogConfig - Dialog configuration\n   * @param {BasicRollMessageConfiguration} messageConfig - Message configuration\n   * @returns {Promise<void>}\n   */\n  async handleActivityRoll(actor, rollType, requestData, rollConfig, dialogConfig, messageConfig) {\n    LogUtil.log('RollHandlers.handleActivityRoll', [rollType, requestData, rollConfig]);\n    if (requestData.rollKey) {\n      const processConfig = RollHelpers.buildRollConfig(requestData, rollConfig);\n      \n      const rollOptions = processConfig.rolls?.[0]?.options || {};\n      const activityConfig = {\n        usage: {\n          ...requestData.config,\n          rolls: processConfig.rolls,\n          ...(rollOptions.attackMode && { attackMode: rollOptions.attackMode }),\n          ...(rollOptions.ammunition && { ammunition: rollOptions.ammunition }),\n          ...(rollOptions.mastery !== undefined && { mastery: rollOptions.mastery })\n        },\n        dialog: dialogConfig,\n        message: messageConfig\n      };\n      \n      LogUtil.log('handleActivityRoll - final activity config', [activityConfig]);\n      \n      await ActivityUtil.executeActivityRoll(\n        actor, \n        rollType, \n        requestData.rollKey, \n        requestData.activityId, \n        activityConfig\n      );\n    }\n  },\n\n  /**\n   * Handle a custom roll, creating a custom dialog\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {Object} requestData - The roll request data\n   * @param {string} requestData.rollKey - The roll formula\n   * @param {Object} requestData.config - Configuration object\n   * @param {string} [requestData.config.rollMode] - Roll visibility mode\n   * @param {string} [requestData.config.requestedBy] - Name of the requester\n   * @param {BasicRollDialogConfiguration} dialogConfig - Dialog configuration\n   * @param {BasicRollMessageConfiguration} messageConfig - Message configuration\n   * @returns {Promise<void>}\n   */\n  async handleCustomRoll(actor, requestData, dialogConfig, messageConfig) {\n    const formula = requestData.rollKey;\n    \n    if (dialogConfig?.configure === false) {\n      try {\n        const roll = new Roll(formula, actor.getRollData());\n        \n        roll.options = roll.options || {};\n        roll.options.isRollRequest = requestData.config?.isRollRequest !== false;\n        \n        await roll.evaluate({async: true});\n        await roll.toMessage({\n          speaker: ChatMessage.getSpeaker({actor}),\n          flavor: game.i18n.localize(`FLASH_ROLLS.rollTypes.${ROLL_TYPES.CUSTOM}`),\n          rollMode: messageConfig?.rollMode || requestData.config?.rollMode || game.settings.get(\"core\", \"rollMode\"),\n          isRollRequest: requestData.config?.isRollRequest !== false,\n          create: messageConfig?.create !== false\n        });\n      } catch (error) {\n        ui.notifications.error(game.i18n.format(\"FLASH_ROLLS.ui.notifications.invalidFormula\", {formula: formula}));\n      }\n      return;\n    }\n    \n    const dialog = new CustomRollDialog({\n      formula: formula,\n      readonly: true,\n      actor: actor,\n      callback: async (confirmedFormula) => {\n        try {\n          const roll = new Roll(confirmedFormula, actor.getRollData());\n          \n          roll.options = roll.options || {};\n          roll.options.isRollRequest = true;\n          \n          await roll.evaluate({async: true});\n          await roll.toMessage({\n            speaker: ChatMessage.getSpeaker({actor}),\n            flavor: game.i18n.localize(`FLASH_ROLLS.rollTypes.${ROLL_TYPES.CUSTOM}`),\n            rollMode: requestData.config.rollMode,\n            isRollRequest: true,\n            _showRequestedBy: true,\n            _requestedBy: requestData.config.requestedBy || 'GM'\n          });\n        } catch (error) {\n          ui.notifications.error(game.i18n.format(\"FLASH_ROLLS.ui.notifications.invalidFormula\", {formula: confirmedFormula}));\n        }\n      }\n    });\n    \n    dialog.render(true);\n  },\n\n  /**\n   * Handle hit die recovery (used for refilling hit dice)\n   * @param {Actor5e} actor - The actor to recover hit dice for\n   * @returns {Promise<Object>} Result object with recovery details\n   */\n  async handleHitDieRecovery(actor) {\n    const result = foundry.utils.mergeObject({\n      type: \"long\",\n      deltas: {\n        hitDice: 0\n      },\n      newDay: false,\n      rolls: [],\n      updateData: {},\n      updateItems: []\n    }, {});\n    \n    if ( \"dhd\" in result ) result.deltas.hitDice = result.dhd;\n\n    actor._getRestHitDiceRecovery({ maxHitDice: actor.system.attributes.hd.max, type: \"long\" }, result);\n\n    result.dhd = result.deltas.hitDice;\n    result.longRest = true;\n\n    try {\n      if (result.updateData && Object.keys(result.updateData).length > 0) {\n        const updateResult = await actor.update(result.updateData, { isRest: false });\n      } else {\n        LogUtil.log('No actor updates to perform', []);\n      }\n      \n      if (result.updateItems && result.updateItems.length > 0) {\n        const itemUpdateResult = await actor.updateEmbeddedDocuments(\"Item\", result.updateItems, { isRest: false });\n      } else {\n        LogUtil.log('No item updates to perform', []);\n      }\n    } catch (error) {\n      LogUtil.error('Error during updates in handleHitDieRecovery:', [error]);\n      throw error;\n    }\n\n    LogUtil.log('handleHitDieRecovery #3', [result]);\n    // Return data summarizing the rest effects\n    return result;\n  }\n};","import { LogUtil } from '../LogUtil.mjs';\nimport { NotificationManager } from './Helpers.mjs';\n\n/**\n * Ensure combat exists for initiative rolls\n * @returns {Promise<boolean>} True if combat is ready, false if cancelled\n */\nexport async function ensureCombatForInitiative() {\n  if (!game.combat) {\n    const combat = await Combat.create({scene: game.scenes.active.id});\n    await combat.activate();\n    NotificationManager.notify('info', game.i18n.localize(\"FLASH_ROLLS.notifications.combatCreated\"));\n  }\n  return game.combat;\n}\n\n/**\n * Filter actors for initiative rolls, handling re-rolls\n * @param {string[]} actorIds - Array of actor IDs to filter\n * @param {Game} game - The game instance\n * @returns {Promise<string[]>} Filtered array of actor IDs\n */\nexport async function filterActorsForInitiative(actorIds, game) {\n  if (!game.combat) return actorIds;\n  \n  const actors = actorIds\n    .map(id => game.actors.get(id))\n    .filter(actor => actor);\n  \n  const actorsNamesWithInitiative = [];\n  const actorIdsWithInitiative = new Set();\n  \n  for (const actor of actors) {\n    const combatants = game.combat.getCombatantsByActor(actor.id);\n    const hasInitiative = combatants.some(c => c.initiative !== null);\n    if (hasInitiative) {\n      actorsNamesWithInitiative.push(actor.name);\n      actorIdsWithInitiative.add(actor.id);\n    }\n  };\n  LogUtil.log('filterActorsForInitiative', [actorsNamesWithInitiative]);\n  \n  // If any actors already have initiative, confirm re-roll\n  if (actorsNamesWithInitiative.length > 0) {\n    const reroll = await foundry.applications.api.DialogV2.confirm({\n      window: {\n        title: game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.rerollInitiativeTitle\"),\n        classes: [\"flash5e-dialog\"]\n      },\n      position: {\n        width: 420,\n        height: \"auto\"\n      },\n      content: \"<p>\" + game.i18n.format(\"FLASH_ROLLS.ui.dialogs.rerollInitiative\", {\n        actors: actorsNamesWithInitiative.join(\", \")\n      }) + \"</p>\",\n      rejectClose: false,\n      modal: true\n    });\n    \n    if (!reroll) { \n      const filteredIds = actorIds.filter(id => !actorIdsWithInitiative.has(id));\n      if (filteredIds.length === 0) {\n        NotificationManager.notify('info', game.i18n.localize(\"FLASH_ROLLS.notifications.allActorsHaveInitiative\"));\n      }\n      \n      return filteredIds;\n    } else {\n      if (game.user.isGM) {\n        for (const actorId of actorIdsWithInitiative) {\n          const combatants = game.combat.getCombatantsByActor(actorId);\n          LogUtil.log('filterActorsForInitiative - resetting initiative for combatants', [combatants]);\n          for (const c of combatants) {\n            await c.update({ initiative: null });\n          }\n        }\n      } else {\n        LogUtil.log('filterActorsForInitiative - Player cannot reset initiative, will let system handle re-roll');\n      }\n      \n      return actorIds;\n    }\n  }\n  \n  return actorIds;\n}","import { HOOKS_DND5E } from '../constants/Hooks.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { MODULE_ID, DEBUG_TAG, ROLL_TYPES } from '../constants/General.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog, GMHitDieConfigDialog, GMDamageConfigDialog, GMAttackConfigDialog } from './dialogs/gm-dialogs/index.mjs';\nimport { RollHandlers } from './RollHandlers.mjs';\nimport { ensureCombatForInitiative, filterActorsForInitiative } from './helpers/RollValidationHelpers.mjs';\nimport { GeneralUtil } from './helpers/GeneralUtil.mjs';\nimport { ModuleHelpers } from './helpers/ModuleHelpers.mjs';\n/**\n * Handles intercepting D&D5e rolls on the GM side and redirecting them to players\n */\nexport class RollInterceptor {  \n  /**\n   * @type {Set<string>} - Set of registered hook IDs for cleanup\n   */\n  static registeredHooks = new Set();\n  \n  /**\n   * Initialize the roll interceptor\n   */\n  static initialize() {\n    LogUtil.log('RollInterceptor.initialize');\n    if (!game.user.isGM) return;\n    \n    this.registerHooks();\n  }\n  \n  /**\n   * Register all necessary hooks for roll interception\n   */\n  static registerHooks() {\n    LogUtil.log('RollInterceptor.registerHooks');\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, this._handlePreRoll.bind(this, ROLL_TYPES.ABILITY));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, this._handlePreRoll.bind(this, ROLL_TYPES.SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SKILL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.SKILL));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_TOOL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.TOOL));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._handlePreRoll.bind(this, ROLL_TYPES.ATTACK));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DAMAGE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DEATH_SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.HIT_DIE));\n\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE, this._handlePreRollInitiative.bind(this, ROLL_TYPES.INITIATIVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG, this._handlePreRollInitiative.bind(this, ROLL_TYPES.INITIATIVE));\n    this._registerHook(HOOKS_DND5E.ROLL_INITIATIVE, this._handleRollInitiative.bind(this, ROLL_TYPES.INITIATIVE));\n  }\n  \n  /**\n   * Helper to register a hook and track it for cleanup\n   * @param {string} hookName \n   * @param {Function} handler \n   */\n  static _registerHook(hookName, handler) {\n    LogUtil.log('RollInterceptor._registerHook');\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.add({ hookName, hookId });\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterHooks() {\n    LogUtil.log('RollInterceptor.unregisterHooks');\n    for (const { hookName, hookId } of this.registeredHooks) {\n      Hooks.off(hookName, hookId);\n    }\n    this.registeredHooks.clear();\n  }\n\n   /**\n   * Handle pre-roll initiative to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Actor5e} actor - Actor for initiative\n   * @param {D20Roll} roll - Roll configuration object\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRollInitiative(rollType, actor, roll) {\n    // LogUtil.log('_handlePreRollInitiative', [rollType, actor, roll]);\n    return;\n  }\n\n  /**\n   * Handle pre-roll hooks to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Object} config - Roll configuration object (or Actor for initiative)\n   * @param {Object} dialog - Dialog options\n   * @param {Object} message - Message options\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRoll(rollType, config, dialog, message) {\n    LogUtil.log('_handlePreRoll #0', [rollType, config, dialog, message]);\n    // Only intercept on GM side\n    if (!game.user.isGM || config.isRollRequest === false) return;\n    const isMidiRequest = GeneralUtil.isModuleOn(MODULE_ID, 'midi-qol');\n\n    const hookNames = config?.hookNames || dialog?.hookNames || message?.hookNames || [];\n    const isInitiativeRoll = hookNames.includes('initiativeDialog') || hookNames.includes('initiative');\n    \n    if(rollType === ROLL_TYPES.ATTACK){\n      const moduleFlags = config.subject?.item?.getFlag(MODULE_ID, 'tempAttackConfig');\n      LogUtil.log('_handlePreRoll - is Attack roll', [config.subject?.item, moduleFlags]);\n      if(moduleFlags){\n        LogUtil.log('_handlePreRoll - found module flags, skipping interception', [moduleFlags]);\n        return;\n      }\n    }\n    \n    if(rollType === ROLL_TYPES.DAMAGE){\n      // Check if this damage roll is from a local execution\n      const moduleFlags = config.subject?.item?.getFlag(MODULE_ID, 'tempDamageConfig');\n      LogUtil.log('RollInterceptor._handlePreRoll - is Damage roll', [config.subject?.item, moduleFlags]);\n      if(moduleFlags){\n        LogUtil.log('RollInterceptor._handlePreRoll - found module flags, skipping interception', [moduleFlags]);\n        return;\n      }\n    }\n    // Override rollType if this is actually an initiative roll\n    if (isInitiativeRoll && rollType === ROLL_TYPES.ABILITY) {\n      LogUtil.log('RollInterceptor._handlePreRoll - Overriding ability to initiative', [hookNames]);\n      rollType = ROLL_TYPES.INITIATIVE;\n    }\n    \n    if ( config?.isRollRequest || config.sendRequest===false || \n         dialog?.isRollRequest || message?.isRollRequest) {\n      LogUtil.log('_handlePreRoll - skipping interception (roll request)', [config, dialog, message]);\n      return;\n    }\n\n    let actor;\n    if (rollType === ROLL_TYPES.INITIATIVE && config instanceof Actor) {\n      actor = config;\n      // For initiative, check if this is from our own dialog execution\n      LogUtil.log('_handlePreRoll - Initiative', [config, dialog, message]);\n      if (dialog?.isRollRequest === false || message?.isRollRequest === false) {\n        return;\n      }\n    } else if (rollType === ROLL_TYPES.HIT_DIE) {\n      actor = dialog?.subject?.actor || dialog?.subject || dialog?.actor;\n    } else if(rollType === ROLL_TYPES.ATTACK || rollType === ROLL_TYPES.DAMAGE){\n      actor = config.subject?.actor;\n    } else {\n      actor = config.subject?.actor || config.subject || config.actor;\n    }\n\n    // Check if roll interception and requests are enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    // const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n\n    if(!rollInterceptionEnabled || //!rollRequestsEnabled ||\n      !actor || actor.documentName !== 'Actor') {\n      return;\n    }\n\n    const owner = GeneralUtil.getActorOwner(actor);   \n    LogUtil.log('_handlePreRoll - ownership', [owner]);\n    \n    if (!owner || !owner.active || owner.id === game.user.id) {\n      LogUtil.log('_handlePreRoll - skipping interception (owner unavailable)', [owner?.name, owner?.active]);\n      return;\n    }\n\n    // For attack rolls, if a usage message is created, ensure it's public\n    if (rollType === ROLL_TYPES.ATTACK) {\n      message = {\n        ...message,\n        rollMode: CONST.DICE_ROLL_MODES.PUBLIC\n      };\n    }\n\n    const isMidiActive = config.midiOptions !== null && config.midiOptions !== undefined;\n    if(isMidiActive && game.user.isGM){\n      LogUtil.log('_handlePreRoll - isMidiActive', [isMidiActive]);\n      this._showGMConfigDialog(actor, owner, rollType, config, dialog, message); \n      return false;\n    }\n    \n    if (dialog.configure===false || config.isRollRequest===false || config.skipRollDialog===true || config.fastForward===true) {\n      LogUtil.log('_handlePreRoll - skipping interception (config flags)', [dialog.configure, config]);\n      return;\n    }\n    \n    LogUtil.log('_handlePreRoll - intercepting roll #1', [config, message]);\n    this._showGMConfigDialog(actor, owner, rollType, config, dialog, message); \n    \n    return false;\n  }\n\n  static _handleRollInitiative(a,b,c,d,e) {\n    LogUtil.log('_handleRollInitiative', [a,b,c,d,e]);\n    return;\n  }\n  \n  /**\n   * Handle initiative-specific pre-roll checks\n   * @param {Actor} actor\n   * @returns {Promise<boolean>} true if should continue with roll\n   */\n  static async _handleInitiativePreChecks(actor) {\n    if (!game.combat) {\n      const combatReady = await ensureCombatForInitiative();\n      if (!combatReady) return false;\n    }\n    \n    const filteredActorIds = await filterActorsForInitiative([actor.id], game);\n    return filteredActorIds.length > 0;\n  }\n\n  /**\n   * Get the appropriate dialog class for a roll type\n   * @param {string} rollType\n   * @returns {Class} The dialog class to use\n   */\n  static _getDialogClass(rollType) {\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      return GMSkillToolConfigDialog;\n    } else if (normalizedRollType === ROLL_TYPES.HIT_DIE) {\n      return GMHitDieConfigDialog;\n    } else if (normalizedRollType === ROLL_TYPES.ATTACK) {\n      return GMAttackConfigDialog;\n    } else if (normalizedRollType === ROLL_TYPES.DAMAGE) {\n      return GMDamageConfigDialog;\n    } else {\n      return GMRollConfigDialog;\n    }\n  }\n\n  /**\n   * Extract roll key and build roll config based on roll type\n   * @param {string} rollType\n   * @param {Object} config\n   * @param {Object} dialog\n   * @param {Actor} actor\n   * @returns {Object} {rollKey, rollConfig}\n   */\n  static _extractRollConfiguration(rollType, config, dialog, actor) {\n    const normalizedRollType = rollType?.toLowerCase();\n    let rollKey = null;\n    const rollConfig = {\n      rolls: [{\n        parts: [],\n        data: {},\n        options: {}\n      }]\n    };\n\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        rollConfig.skill = config.skill;\n        rollConfig.ability = config.ability || config.subject?.ability;\n        rollKey = rollConfig.skill;\n        break;\n        \n      case ROLL_TYPES.TOOL:\n        rollConfig.tool = config.tool;\n        rollConfig.ability = config.ability || config.subject?.ability;\n        rollKey = rollConfig.tool;\n        break;\n        \n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.SAVE:\n        rollConfig.ability = config.ability || config.subject?.ability;\n        rollKey = rollConfig.ability;\n        if (rollConfig.ability === 'con' && config.targetValue !== undefined) {\n          rollType = ROLL_TYPES.CONCENTRATION;\n        }\n        break;\n        \n      case ROLL_TYPES.CONCENTRATION:\n        rollConfig.ability = 'con';\n        rollKey = 'con';\n        break;\n        \n      case ROLL_TYPES.INITIATIVE:\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n        rollKey = actor.system.attributes?.init?.ability || 'dex';\n        break;\n        \n      case ROLL_TYPES.HIT_DIE:\n        rollConfig.denomination = typeof config === 'string' ? \n          config : (config.denomination || config.subject?.denomination);\n        rollKey = rollConfig.denomination;\n        break;\n        \n      case ROLL_TYPES.ATTACK:\n        if (dialog?.options) {\n          rollConfig.ammunition = dialog.options.ammunition;\n          rollConfig.attackMode = dialog.options.attackMode;\n          rollConfig.mastery = dialog.options.mastery;\n        }\n        rollKey = config.subject?.item?.id;\n        break;\n        \n      case ROLL_TYPES.DAMAGE:\n        rollConfig.item = config.subject?.item;\n        rollConfig.subject = config.subject;\n        rollConfig.critical = config.critical || {};\n        rollKey = config.subject?.item?.id;\n        break;\n    }\n\n    return { rollKey, rollConfig };\n  }\n\n  /**\n   * Show dialog and get configuration from user\n   * @param {Class} DialogClass\n   * @param {Actor} actor\n   * @param {string} rollType\n   * @param {string} rollKey\n   * @param {boolean} skipRollDialog\n   * @param {boolean} rollRequestsEnabled\n   * @param {Object} config\n   * @param {Object} dialog\n   * @returns {Promise<Object>} Dialog result or default config\n   */\n  static async _getDialogResult(DialogClass, actor, rollType, rollKey, skipRollDialog, rollRequestsEnabled, config, dialog) {\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    if (skipRollDialog) {\n      return {\n        sendRequest: true,\n        advantage: false,\n        disadvantage: false,\n        situational: \"\",\n        rollMode: game.settings.get(\"core\", \"rollMode\")\n      };\n    }\n\n    if (!DialogClass.initConfiguration) {\n      LogUtil.error('DialogClass.initConfiguration not found', [DialogClass, DialogClass.name]);\n      throw new Error(`DialogClass ${DialogClass.name} does not have initConfiguration method`);\n    }\n    \n    const dialogOptions = {\n      skipRollDialog: false,\n      sendRequest: rollRequestsEnabled\n    };\n\n    if (normalizedRollType === ROLL_TYPES.ATTACK || normalizedRollType === ROLL_TYPES.DAMAGE) {\n      return await DialogClass.initConfiguration([actor], normalizedRollType, rollKey, dialogOptions, config, dialog);\n    } else {\n      return await DialogClass.initConfiguration([actor], normalizedRollType, rollKey, dialogOptions);\n    }\n  }\n\n  /**\n   * Show GM configuration dialog before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showGMConfigDialog(actor, owner, rollType, config, dialog, message) {\n    LogUtil.log('_showGMConfigDialog - config', [rollType, config]);\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n\n    try {\n      const normalizedRollType = rollType?.toLowerCase();\n      \n      // Handle initiative-specific checks\n      if (normalizedRollType === ROLL_TYPES.INITIATIVE) {\n        const shouldContinue = await this._handleInitiativePreChecks(actor);\n        if (!shouldContinue) return;\n      }\n      \n      // Get appropriate dialog class\n      const DialogClass = this._getDialogClass(rollType);\n      \n      // Extract roll configuration\n      const { rollKey, rollConfig } = this._extractRollConfiguration(rollType, config, dialog, actor);\n      \n      LogUtil.log('_showGMConfigDialog - rollConfig', [rollConfig, rollKey]);\n      \n      // Get dialog result or default configuration\n      const result = await this._getDialogResult(\n        DialogClass, \n        actor, \n        rollType, \n        rollKey, \n        skipRollDialog, \n        rollRequestsEnabled, \n        config, \n        dialog\n      );\n      \n      if (!result) {\n        LogUtil.log('_showGMConfigDialog - Dialog cancelled');\n        return;\n      }\n      \n      // If sendRequest is false, execute local roll\n      if (!result.sendRequest || !rollRequestsEnabled) {\n        LogUtil.log('_showGMConfigDialog - triggering _executeInterceptedRoll', [rollType, config, result]);\n        await this._executeInterceptedRoll(actor, rollType, config, result);\n        return;\n      }\n      \n      // Send the roll request to the player with the configured settings\n      // Exclude the event object as it can't be serialized\n      // const { event, ...configWithoutEvent } = config;\n      delete config.event;\n      const finalConfig = {\n        ...config,\n        ...result,\n        rolls: result.rolls,\n        requestedBy: game.user.name,\n        // For attack activity rolls, prevent the usage message from being created\n        ...(rollType === ROLL_TYPES.ATTACK && { chatMessage: false })\n      };\n      \n      LogUtil.log('_showGMConfigDialog - triggering _sendRollRequest', [rollType, finalConfig]);\n      this._sendRollRequest(actor, owner, rollType, finalConfig);\n      \n    } catch (error) {\n      LogUtil.error('RollInterceptor._showGMConfigDialog - Error', [error]);\n      // Fallback: send request without configuration\n      // this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n  \n  /**\n   * Called when an intercepted roll should be executed \n   * locally on the GM side instead of sent to player\n   * @param {Actor} actor \n   * @param {string} rollType \n   * @param {Object} originalConfig\n   * @param {Object} dialogResult\n   */\n  static async _executeInterceptedRoll(actor, rollType, originalConfig, dialogResult) {\n    LogUtil.log('RollInterceptor._executeInterceptedRoll', [actor, rollType, originalConfig, dialogResult]);\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Ensure we have a proper roll configuration structure\n    const rollConfig = dialogResult.rolls?.[0] || {\n      parts: [],\n      data: {},\n      options: {}\n    };\n    const situational = rollConfig.data?.situational || dialogResult.situational || \"\";\n    \n    // Determine the correct rollKey based on the roll type\n    let rollKey;\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        rollKey = originalConfig.skill;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollKey = originalConfig.tool;\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.SAVE:\n        rollKey = originalConfig.ability || originalConfig.subject?.ability;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        rollKey = originalConfig.denomination;\n        break;\n      default:\n        rollKey = originalConfig.ability || originalConfig.skill || originalConfig.tool || originalConfig.denomination;\n    }\n    \n    const requestData = {\n      rollKey: rollKey,\n      config: {\n        advantage: dialogResult.advantage || originalConfig.advantage,\n        disadvantage: dialogResult.disadvantage || originalConfig.disadvantage,\n        target: dialogResult.target || dialogResult.dc || originalConfig.target,\n        rollMode: dialogResult.rollMode || originalConfig.rollMode,\n        situational: situational,\n        isRollRequest: false,\n        ability: originalConfig.ability // Pass the ability from original config\n      }\n    };\n    \n    // For skills and tools, ensure we have the ability if not choosing\n    if (normalizedRollType === ROLL_TYPES.SKILL && !requestData.config.ability) {\n      requestData.config.ability = actor.system.skills?.[requestData.rollKey]?.ability || \n                                   CONFIG.DND5E.skills?.[requestData.rollKey]?.ability;\n    } else if (normalizedRollType === ROLL_TYPES.TOOL && !requestData.config.ability) {\n      const toolConfig = actor.system.tools?.[requestData.rollKey];\n      requestData.config.ability = toolConfig?.ability || \n                                   CONFIG.DND5E.enrichmentLookup?.tools?.[requestData.rollKey]?.ability ||\n                                   'int';\n    } else if ((normalizedRollType === ROLL_TYPES.ABILITY || normalizedRollType === ROLL_TYPES.SAVE) && !requestData.config.ability) {\n      // For ability checks and saves, the rollKey IS the ability\n      requestData.config.ability = requestData.rollKey;\n    }\n    \n    LogUtil.log('RollInterceptor._executeInterceptedRoll - requestData', [requestData, originalConfig, dialogResult]);\n    \n    const dialogConfig = {\n      configure: false, // Skip dialog\n      isRollRequest: false\n    };\n    \n    const messageConfig = {\n      rollMode: requestData.config.rollMode,\n      create: true,\n      isRollRequest: false\n    };\n    \n    try {\n      const handlerMap = ROLL_TYPES;\n      \n      const handler = RollHandlers[normalizedRollType];\n      LogUtil.log('RollInterceptor._executeInterceptedRoll - handler 1', [handler, normalizedRollType, RollHandlers[normalizedRollType]]);\n      \n      if (handler) {\n        // Special handling for attack and damage rolls\n        if (normalizedRollType === ROLL_TYPES.ATTACK || normalizedRollType === ROLL_TYPES.DAMAGE || normalizedRollType === ROLL_TYPES.SAVE) {\n          requestData.rollKey = originalConfig.subject?.item?.id;\n          requestData.activityId = originalConfig.subject?.id;\n        }\n        \n        LogUtil.log('RollInterceptor._executeInterceptedRoll - handler 2', [requestData, rollConfig, dialogConfig, messageConfig]);\n        await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        LogUtil.warn(`No handler found for roll type: ${normalizedRollType}`);\n      }\n    } catch (error) {\n      LogUtil.error(\"RollInterceptor._executeInterceptedRoll\", [error]);\n    }\n  }\n  \n  // /**\n  //  * Show configuration dialog to GM before sending roll request\n  //  * @param {Actor} actor \n  //  * @param {User} owner \n  //  * @param {string} rollType \n  //  * @param {Object} config \n  //  * @param {Object} dialog \n  //  * @param {Object} message \n  //  */\n  // static async _showConfigurationDialog(actor, owner, rollType, config, dialog, message) {\n  //   LogUtil.log('RollInterceptor._showConfigurationDialog', [actor, owner, rollType, config, dialog, message]);\n\n  //   try {\n  //     const rollWrapper = async (finalConfig) => {\n  //       this._sendRollRequest(actor, owner, rollType, finalConfig);\n  //       return new Roll(\"1d20\").evaluate({async: false}); // Return a dummy roll\n  //     };\n      \n  //     // Replace the roll method in config with our wrapper\n  //     const modifiedConfig = {\n  //       ...config,\n  //       _rollMethod: rollWrapper,\n  //       configured: false\n  //     };\n      \n  //     const DialogClass = dialog.cls;\n  //     const rollDialog = new DialogClass(modifiedConfig, dialog.options);\n  //     const result = await rollDialog.render(true);\n  //   } catch (error) {\n  //     LogUtil.error(\"RollInterceptor._showConfigurationDialog - error\", [error]);\n  //     this._sendRollRequest(actor, owner, rollType, config);\n  //   }\n  // }\n  \n  /**\n   * Send a roll request to the player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {BasicRollProcessConfiguration} config - The roll process configuration\n   */\n  static async _sendRollRequest(actor, owner, rollType, config) {\n    LogUtil.log('_sendRollRequest', [actor, owner, rollType, config]);\n    LogUtil.log('_sendRollRequest - config.rolls', [config.rolls]);\n    const SETTINGS = getSettings();\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n    let normalizedRollType = rollType?.toLowerCase();\n    \n    // Convert INITIATIVE to INITIATIVE_DIALOG for player requests\n    if (normalizedRollType === ROLL_TYPES.INITIATIVE) {\n      normalizedRollType = ROLL_TYPES.INITIATIVE_DIALOG;\n    }\n    \n    // Extract the roll key based on roll type\n    let rollKey = null;\n    let activityId = null;\n    switch (normalizedRollType) {\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.SAVE:\n        rollKey = config.ability;\n        break;\n      case ROLL_TYPES.SKILL:\n        rollKey = config.skill;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollKey = config.tool;\n        break;\n      case ROLL_TYPES.ATTACK:\n      case ROLL_TYPES.DAMAGE:\n        LogUtil.log('_sendRollRequest - Attack/Damage roll config', [rollType, config]);\n        // for activities, config.subject is the activity itself\n        rollKey = config.subject.item?.id;\n        activityId = config.subject.id;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        rollKey = typeof config === 'string' ? config : config.denomination;\n        break;\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n      case ROLL_TYPES.INITIATIVE:\n        rollKey = null;\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        rollKey = null;\n        break;\n      default:\n        LogUtil.warn(`Unknown roll type: ${rollType}`);\n        return;\n    }\n    \n    // Build the request data with proper rollProcessConfig\n    // Filter out circular references that midi-qol adds\n    const cleanConfig = { ...config };\n    delete cleanConfig.subject;\n    delete cleanConfig.workflow;\n    delete cleanConfig.item;\n    delete cleanConfig.activity;\n    \n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType: normalizedRollType,\n      rollKey,\n      activityId,\n      rollProcessConfig: {\n        ...cleanConfig,\n        _requestedBy: game.user.name  // Add who requested the roll\n      },\n      skipRollDialog: skipRollDialog,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n\n    LogUtil.log('_sendRollRequest - requestData', [owner, requestData]);\n    \n    // Check if owner exists and is active\n    if(!owner || !requestData){\n      ui.notifications.warn('Flash Rolls: No owner found for actor ' + actor.name);\n      return;\n    }\n    \n    if(!owner.active){\n      const SETTINGS = getSettings();\n      if(SettingsUtil.get(SETTINGS.showOfflineNotifications.tag)) {\n        ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.playerOffline\", { \n          player: owner.name \n        }));\n      }\n      // Execute the roll locally instead\n      await this._executeInterceptedRoll(actor, rollType, config, { \n        ...config,\n        sendRequest: false \n      });\n      return;\n    }\n    \n    // Owner is active, send the request\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n\n    // Show notification to GM\n    ui.notifications.info(game.i18n.format('FLASH_ROLLS.notifications.rollRequestSent', { \n      player: owner?.name || 'Unknown',\n      actor: actor.name || 'Unknown' \n    }));\n    \n    \n  }\n}","import { isPlayerOwned, hasTokenInScene } from '../helpers/Helpers.mjs';\n\n/**\n * Utility class for actor-related operations in the Roll Requests Menu\n */\nexport class RollMenuActorUtil {\n  /**\n   * Get formatted stats for an actor\n   * @param {Actor} actor - The actor to get stats for\n   * @returns {Array<{abbrev: string, value: number}>} Array of stat objects\n   */\n  static getActorStats(actor) {\n    const system = actor.system;\n    const stats = [];\n    \n    // HP\n    if (system.attributes?.hp) {\n      stats.push({\n        abbrev: 'HP',\n        value: system.attributes.hp.value\n      });\n    }\n    \n    // AC\n    if (system.attributes?.ac) {\n      stats.push({\n        abbrev: 'AC',\n        value: system.attributes.ac.value\n      });\n    }\n    \n    const spellDC = system.attributes?.spell?.dc;\n    if (spellDC) {\n      stats.push({\n        abbrev: 'DC',\n        value: spellDC\n      });\n    }\n    \n    if (system.skills?.prc?.passive) {\n      stats.push({\n        abbrev: 'PRC',\n        value: system.skills.prc.passive\n      });\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Get valid actor IDs based on current tab\n   * @param {Array<string>} selectedActorIds - Array of selected actor IDs\n   * @param {string} currentTab - Current tab ('pc' or 'npc')\n   * @returns {Array<string>} Filtered array of valid actor IDs\n   */\n  static getValidActorIds(selectedActorIds, currentTab) {\n    return selectedActorIds.filter(actorId => {\n      const actor = game.actors.get(actorId);\n      if (!actor) return false;\n      const isPC = isPlayerOwned(actor);\n      const isNPC = !isPC && hasTokenInScene(actor);\n      \n      return (currentTab === 'pc' && isPC) || (currentTab === 'npc' && isNPC);\n    });\n  }\n}","import { ROLL_TYPES } from '../../constants/General.mjs';\nimport { getSettings } from '../../constants/Settings.mjs';\nimport { SettingsUtil } from '../SettingsUtil.mjs';\nimport { LogUtil } from '../LogUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog, GMHitDieConfigDialog } from '../dialogs/gm-dialogs/index.mjs';\nimport { CustomRollDialog } from '../dialogs/CustomRollDialog.mjs';\n\n/**\n * Utility class for roll configuration operations in the Roll Requests Menu\n */\nexport class RollMenuConfigUtil {\n  /**\n   * Get roll configuration from dialog or create default\n   * @param {Actor[]} actors - Actors being rolled for\n   * @param {string} rollMethodName - The roll method name\n   * @param {string} rollKey - The roll key\n   * @param {boolean} skipRollDialog - Whether to skip dialogs\n   * @param {Array} pcActors - PC actors with owners\n   * @returns {Promise<BasicRollProcessConfiguration|null>} Process configuration or null if cancelled\n   */\n  static async getRollConfiguration(actors, rollMethodName, rollKey, skipRollDialog, pcActors) {\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Show GM configuration dialog (unless skip dialogs is enabled or it's a custom roll)\n    if (!skipRollDialog && rollMethodName !== ROLL_TYPES.CUSTOM) {\n      // Use appropriate dialog based on roll type\n      let DialogClass;\n      if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(rollMethodName)) {\n        DialogClass = GMSkillToolConfigDialog;\n      } else if (rollMethodName === ROLL_TYPES.HIT_DIE) {\n        DialogClass = GMHitDieConfigDialog;\n      } else {\n        DialogClass = GMRollConfigDialog;\n      }\n      const config = await DialogClass.initConfiguration(actors, rollMethodName, rollKey, { \n        skipRollDialog,\n        sendRequest: rollRequestsEnabled || false \n      });\n      LogUtil.log('getRollConfiguration', [config]);\n      \n      return config; // Will be null if cancelled\n    } else {\n      // Use default BasicRollProcessConfiguration when skipping dialogs\n      const config = {\n        rolls: [{\n          parts: [],\n          data: {},\n          options: {}\n        }],\n        advantage: false,\n        disadvantage: false,\n        rollMode: game.settings.get(\"core\", \"rollMode\"),\n        chatMessage: true,\n        isRollRequest: false,\n        skipRollDialog: true,\n        sendRequest: rollRequestsEnabled && pcActors.length > 0\n      };\n      \n      // Death saves always have DC 10\n      if (rollMethodName === ROLL_TYPES.DEATH_SAVE) {\n        config.target = 10;\n      }\n      \n      return config;\n    }\n  }\n\n  /**\n   * Handle custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  static async handleCustomRoll() {\n    const formula = await this.showCustomRollDialog();\n    return formula; // Will be null if cancelled\n  }\n\n  /**\n   * Show custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  static async showCustomRollDialog() {\n    LogUtil.log('showCustomRollDialog');\n    return CustomRollDialog.prompt({\n      formula: \"\",\n      readonly: false\n    });\n  }\n}","import { MODULE } from '../../constants/General.mjs';\nimport { LogUtil } from '../LogUtil.mjs';\nimport { adjustMenuOffset } from '../helpers/Helpers.mjs';\nimport { GeneralUtil } from '../helpers/GeneralUtil.mjs';\n\n/**\n * Utility class for drag and position handling in the Roll Requests Menu\n */\nexport class RollMenuDragUtil {\n  static SNAP_DISTANCE = 50; // pixels\n  static DRAG_HANDLE_SELECTOR = '.drag-handle';\n  static LIGHTNING_BOLT_SELECTOR = '#flash-rolls-icon';\n  \n  /**\n   * Initialize drag functionality for the menu\n   * @param {RollRequestsMenu} menu - The menu instance\n   * @deprecated Use direct event listener attachment in _onRender instead\n   */\n  static initializeDrag(menu) {\n    const dragHandle = menu.element.querySelector(this.DRAG_HANDLE_SELECTOR);\n    \n    if (!dragHandle) {\n      LogUtil.error('RollMenuDragUtil.initializeDrag - No drag handle found!');\n      return;\n    }\n    \n    dragHandle.addEventListener('mousedown', (e) => {\n      this.handleDragStart(e, menu);\n    });\n  }\n  \n  /**\n   * Handle drag start\n   * @param {MouseEvent} event \n   * @param {RollRequestsMenu} menu \n   */\n  static handleDragStart(event, menu) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    menu.isDragging = true;\n    if(!menu.element){return}\n    menu.element.classList.add('dragging');\n    \n    menu.element.classList.remove('docked-right');\n    \n    const menuRect = menu.element.getBoundingClientRect();\n    const startX = event.clientX;\n    const startY = event.clientY;\n    const initialLeft = menuRect.left;\n    const initialTop = menuRect.top;\n    \n    const parent = menu.element.parentElement;\n\n    document.body.appendChild(menu.element);\n    menu.element.style.position = 'fixed';\n    menu.element.style.inset = '';  // Clear inset first\n    menu.element.style.top = `${initialTop}px`;\n    menu.element.style.left = `${initialLeft}px`;\n    menu.element.style.right = 'auto';\n    menu.element.style.bottom = 'auto';\n    menu.element.style.zIndex = 'var(--z-index-app)'; // Ensure it's on top while dragging\n    \n    menu.element.offsetHeight;\n    \n    const dragData = {\n      startX,\n      startY,\n      initialLeft,\n      initialTop,\n      currentLeft: initialLeft,\n      currentTop: initialTop\n    };\n    \n    const handleMove = (e) => this.handleDragMove(e, menu, dragData);\n    const handleUp = (e) => this.handleDragEnd(e, menu, dragData, handleMove, handleUp);\n    \n    document.addEventListener('mousemove', handleMove);\n    document.addEventListener('mouseup', handleUp);\n  }\n  \n  /**\n   * Handle drag move\n   * @param {MouseEvent} event \n   * @param {RollRequestsMenu} menu \n   * @param {Object} dragData \n   */\n  static handleDragMove(event, menu, dragData) {\n    if (!menu.isDragging) return;\n    const deltaX = event.clientX - dragData.startX;\n    const deltaY = event.clientY - dragData.startY;\n    \n    dragData.currentLeft = dragData.initialLeft + deltaX;\n    dragData.currentTop = dragData.initialTop + deltaY;\n    \n    menu.element.style.inset = '';\n    menu.element.style.right = 'auto';\n    menu.element.style.bottom = 'auto';\n    \n    menu.element.style.position = 'fixed';\n    menu.element.style.top = `${dragData.currentTop}px`;\n    menu.element.style.left = `${dragData.currentLeft}px`;\n    \n    const remInPixels = parseFloat(getComputedStyle(document.documentElement).fontSize) * 15;\n    if (dragData.currentLeft < remInPixels) {\n      menu.element.classList.add('left-edge');\n    } else {\n      menu.element.classList.remove('left-edge');\n    }\n    \n    const computed = window.getComputedStyle(menu.element);\n\n    const snapInfo = this.calculateSnapDistance(menu);\n    if (snapInfo.type !== 'none') {\n      menu.element.classList.add('near-snap');\n    } else {\n      menu.element.classList.remove('near-snap');\n    }\n  }\n  \n  /**\n   * Handle drag end\n   * @param {MouseEvent} event \n   * @param {RollRequestsMenu} menu \n   * @param {Object} dragData \n   * @param {Function} moveHandler \n   * @param {Function} upHandler \n   */\n  static async handleDragEnd(event, menu, dragData, moveHandler, upHandler) {\n    LogUtil.log('RollMenuDragUtil.handleDragEnd');\n    \n    document.removeEventListener('mousemove', moveHandler);\n    document.removeEventListener('mouseup', upHandler);\n    \n    menu.isDragging = false;\n    menu.element.classList.remove('dragging');\n    menu.element.classList.remove('near-snap');\n    \n    menu.element.style.zIndex = '';\n    \n    const snapInfo = this.calculateSnapDistance(menu);\n    \n    if (snapInfo.type === 'both-edges') {\n      const chatNotifications = document.querySelector('#chat-notifications');\n      if (chatNotifications) {\n        chatNotifications.insertBefore(menu.element, chatNotifications.firstChild);\n      }\n      await this.snapToDefault(menu);\n    } else if (snapInfo.type === 'right-edge') {\n      const chatNotifications = document.querySelector('#chat-notifications');\n      if (chatNotifications) {\n        chatNotifications.insertBefore(menu.element, chatNotifications.firstChild);\n      }\n      await this.snapToRightEdge(menu, dragData.currentTop);\n    } else {\n      menu.isCustomPosition = true;\n      menu.customPosition = {\n        x: dragData.currentLeft,\n        y: dragData.currentTop,\n        isCustom: true,\n        dockedRight: false\n      };\n      const isCrlngnUIOn = document.querySelector('body.crlngn-tabs') ? true : false;\n      GeneralUtil.addCSSVars('--flash-rolls-menu-offset', isCrlngnUIOn ? '0px' : '16px');\n      \n      await this.saveCustomPosition(menu.customPosition);\n      menu.element.classList.add('custom-position');\n      \n      const remInPixels = parseFloat(getComputedStyle(document.documentElement).fontSize) * 15;\n      if (dragData.currentLeft < remInPixels) {\n        menu.element.classList.add('left-edge');\n      }\n    }\n  }\n  \n  /**\n   * Check if menu should snap and determine snap type\n   * @param {RollRequestsMenu} menu \n   * @returns {{type: string, distance: number}} Snap information\n   */\n  static calculateSnapDistance(menu) {\n    const lightningBolt = document.querySelector(this.LIGHTNING_BOLT_SELECTOR);\n    if (!lightningBolt) return { type: 'none', distance: Infinity };\n    \n    const menuRect = menu.element.getBoundingClientRect();\n    const boltRect = lightningBolt.getBoundingClientRect();\n    \n    const horizontalDistance = Math.abs(boltRect.left - menuRect.right);\n    const verticalDistance = window.innerHeight - menuRect.bottom;\n    \n    if (horizontalDistance <= this.SNAP_DISTANCE) {\n      if (verticalDistance <= this.SNAP_DISTANCE) {\n        return { type: 'both-edges', distance: 0 };\n      }\n      return { type: 'right-edge', distance: 0 };\n    }\n    \n    return { type: 'none', distance: Infinity };\n  }\n  \n  /**\n   * Snap menu to right edge with custom vertical position\n   * @param {RollRequestsMenu} menu \n   * @param {number} currentTop - The vertical position to maintain\n   */\n  static async snapToRightEdge(menu, currentTop) {\n    LogUtil.log('RollMenuDragUtil.snapToRightEdge', [currentTop]);\n    \n    menu.isCustomPosition = true;\n    menu.customPosition = {\n      y: currentTop,\n      isCustom: true,\n      dockedRight: true\n    };\n    \n    menu.element.classList.remove('custom-position', 'left-edge');\n    menu.element.classList.add('docked-right', 'snapping');\n    \n    menu.element.style.position = 'fixed';\n    menu.element.style.inset = '';\n    menu.element.style.left = '';\n    menu.element.style.right = '';\n    menu.element.style.bottom = '';\n    menu.element.style.top = `${currentTop}px`;\n    menu.element.style.zIndex = '';\n    \n    adjustMenuOffset();\n    \n    await this.saveCustomPosition(menu.customPosition);\n    \n    setTimeout(() => {\n      menu.element.classList.remove('snapping');\n    }, 300);\n  }\n  \n  /**\n   * Snap menu back to default position\n   * @param {RollRequestsMenu} menu \n   */\n  static async snapToDefault(menu) {\n    LogUtil.log('RollMenuDragUtil.snapToDefault');\n    \n    menu.isCustomPosition = false;\n    menu.customPosition = null;\n    \n    menu.element.classList.remove('custom-position');\n    menu.element.classList.remove('left-edge');\n    menu.element.classList.add('snapping');\n    \n    menu.element.style.position = '';\n    menu.element.style.inset = '';\n    menu.element.style.left = '';\n    menu.element.style.top = '';\n    menu.element.style.right = '';\n    menu.element.style.bottom = '';\n    menu.element.style.zIndex = '';  \n    \n    adjustMenuOffset();\n    \n    await this.saveCustomPosition(null);\n    \n    setTimeout(() => {\n      menu.element.classList.remove('snapping');\n    }, 300);\n  }\n  \n  /**\n   * Apply custom position to menu\n   * @param {RollRequestsMenu} menu \n   * @param {Object} position \n   */\n  static applyCustomPosition(menu, position) {\n    if (!position || !position.isCustom) return;\n    \n    LogUtil.log('RollMenuDragUtil.applyCustomPosition', [position]);\n    \n    menu.isCustomPosition = true;\n    menu.customPosition = position;\n    \n    if (position.dockedRight) {\n      const chatNotifications = document.querySelector('#chat-notifications');\n      if (chatNotifications) {\n        chatNotifications.insertBefore(menu.element, chatNotifications.firstChild);\n      }\n      \n      menu.element.style.position = 'fixed';\n      menu.element.style.inset = '';\n      menu.element.style.top = `${position.y}px`;\n      menu.element.style.left = '';\n      menu.element.style.right = '';\n      menu.element.style.bottom = '';\n      \n      menu.element.classList.add('docked-right');\n      menu.element.classList.remove('custom-position', 'left-edge');\n      \n      adjustMenuOffset();\n    } else {\n      document.body.appendChild(menu.element);\n      \n      menu.element.style.position = 'fixed';\n      menu.element.style.inset = '';\n      menu.element.style.top = `${position.y}px`;\n      menu.element.style.left = `${position.x}px`;\n      menu.element.style.right = 'auto';\n      menu.element.style.bottom = 'auto';\n      \n      const isCrlngnUIOn = document.querySelector('body.crlngn-tabs') ? true : false;\n      GeneralUtil.addCSSVars('--flash-rolls-menu-offset', isCrlngnUIOn ? '0px' : '16px');\n      \n      menu.element.classList.add('custom-position');\n      menu.element.classList.remove('docked-right');\n      \n      const remInPixels = parseFloat(getComputedStyle(document.documentElement).fontSize) * 15;\n      if (position.x < remInPixels) {\n        menu.element.classList.add('left-edge');\n      }\n    }\n  }\n  \n  /**\n   * Save custom position to user flag\n   * @param {Object|null} position \n   */\n  static async saveCustomPosition(position) {\n    await game.user.setFlag(MODULE.ID, 'menuCustomPosition', position);\n  }\n  \n  /**\n   * Load custom position from user flag\n   * @returns {Object|null} Position object or null\n   */\n  static loadCustomPosition() {\n    return game.user.getFlag(MODULE.ID, 'menuCustomPosition') || null;\n  }\n  \n  /**\n   * Reset menu to default position\n   * @param {RollRequestsMenu} menu \n   */\n  static async resetPosition(menu) {\n    await this.snapToDefault(menu);\n  }\n}","import { MODULE } from '../constants/General.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport RollRequestsMenu from './RollRequestsMenu.mjs';\n\n/**\n * Utility class for managing favorite actors in the Flash Rolls menu\n */\nexport class FavoriteActorsUtil {\n  /**\n   * Get the list of favorite actors\n   * @returns {Array<{actorId: string, tokenId?: string}>} Array of favorite actor data\n   */\n  static getFavoriteActors() {\n    const SETTINGS = getSettings();\n    return SettingsUtil.get(SETTINGS.favoriteActorsList.tag) || [];\n  }\n\n  /**\n   * Check if an actor is in the favorites list\n   * @param {string} actorId - The actor ID to check\n   * @returns {boolean} Whether the actor is favorited\n   */\n  static isFavorite(actorId) {\n    const favorites = this.getFavoriteActors();\n    return favorites.some(fav => fav.actorId === actorId);\n  }\n\n  /**\n   * Add an actor to the favorites list\n   * @param {string} actorId - The actor ID to add\n   * @returns {Promise<void>}\n   */\n  static async addToFavorites(actorId) {\n    LogUtil.log('FavoriteActorsUtil.addToFavorites', [actorId]);\n    \n    const SETTINGS = getSettings();\n    const favorites = this.getFavoriteActors();\n    \n    if (favorites.some(fav => fav.actorId === actorId)) {\n      LogUtil.log('Actor already in favorites', [actorId]);\n      return;\n    }\n    \n    const actor = game.actors.get(actorId);\n    if (!actor) {\n      LogUtil.error('Actor not found', [actorId]);\n      return;\n    }\n    \n    const currentScene = game.scenes.active;\n    const token = currentScene?.tokens.find(t => t.actorId === actorId);\n    \n    const favoriteData = {\n      actorId: actorId,\n      tokenId: token?.id || null\n    };\n    \n    favorites.push(favoriteData);\n    await SettingsUtil.set(SETTINGS.favoriteActorsList.tag, favorites);\n    \n    ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.actorAddedToFavorites\", {\n      actor: actor.name\n    }) || `${actor.name} added to Flash Rolls favorites`);\n    \n    this._refreshMenu();\n  }\n\n  /**\n   * Remove an actor from the favorites list\n   * @param {string} actorId - The actor ID to remove\n   * @returns {Promise<void>}\n   */\n  static async removeFromFavorites(actorId) {\n    LogUtil.log('FavoriteActorsUtil.removeFromFavorites', [actorId]);\n    \n    const SETTINGS = getSettings();\n    const favorites = this.getFavoriteActors();\n    \n    const updatedFavorites = favorites.filter(fav => fav.actorId !== actorId);\n    \n    if (updatedFavorites.length === favorites.length) {\n      LogUtil.log('Actor not in favorites', [actorId]);\n      return;\n    }\n    \n    await SettingsUtil.set(SETTINGS.favoriteActorsList.tag, updatedFavorites);\n    \n    const actor = game.actors.get(actorId);\n    ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.actorRemovedFromFavorites\", {\n      actor: actor?.name || 'Unknown'\n    }) || `${actor?.name || 'Unknown'} removed from Flash Rolls favorites`);\n    \n    this._refreshMenu();\n  }\n\n  /**\n   * Update token ID for a favorited actor\n   * @param {string} actorId - The actor ID\n   * @param {string|null} tokenId - The new token ID or null\n   * @returns {Promise<void>}\n   */\n  static async updateTokenId(actorId, tokenId) {\n    LogUtil.log('FavoriteActorsUtil.updateTokenId', [actorId, tokenId]);\n    \n    const SETTINGS = getSettings();\n    const favorites = this.getFavoriteActors();\n    \n    const favorite = favorites.find(fav => fav.actorId === actorId);\n    if (!favorite) {\n      LogUtil.log('Actor not in favorites', [actorId]);\n      return;\n    }\n    \n    favorite.tokenId = tokenId;\n    await SettingsUtil.set(SETTINGS.favoriteActorsList.tag, favorites);\n  }\n\n  /**\n   * Get context menu options for the actor directory\n   * @param {jQuery} html - The HTML element\n   * @param {Array} options - The existing context menu options\n   * @returns {Array} Updated context menu options\n   */\n  static getContextMenuOptions(html, options) {\n    LogUtil.log('FavoriteActorsUtil.getContextMenuOptions');\n    \n    options.push({\n      name: \"FLASH_ROLLS.contextMenu.toggleFavorite\",\n      icon: '<i class=\"fas fa-bolt\"></i>',\n      condition: li => {\n        return game.user.isGM;\n      },\n      callback: li => {\n        const actorId = li.data('documentId');\n        this.toggleFavorite(actorId);\n      }\n    });\n    \n    return options;\n  }\n\n  /**\n   * Toggle favorite status for an actor\n   * @param {string} actorId - The actor ID\n   */\n  static async toggleFavorite(actorId) {\n    if (this.isFavorite(actorId)) {\n      await this.removeFromFavorites(actorId);\n    } else {\n      await this.addToFavorites(actorId);\n    }\n  }\n\n  /**\n   * Refresh the Roll Requests Menu if it's open\n   * @private\n   */\n  static _refreshMenu() {\n    RollRequestsMenu.refreshIfOpen();\n  }\n\n  /**\n   * Clean up favorites list by removing actors that no longer exist\n   * @returns {Promise<void>}\n   */\n  static async cleanupFavorites() {\n    LogUtil.log('FavoriteActorsUtil.cleanupFavorites');\n    \n    const SETTINGS = getSettings();\n    const favorites = this.getFavoriteActors();\n    \n    const validFavorites = favorites.filter(fav => {\n      const actor = game.actors.get(fav.actorId);\n      if (!actor) {\n        LogUtil.log('Removing non-existent actor from favorites', [fav.actorId]);\n        return false;\n      }\n      return true;\n    });\n    \n    if (validFavorites.length !== favorites.length) {\n      await SettingsUtil.set(SETTINGS.favoriteActorsList.tag, validFavorites);\n      LogUtil.log('Cleaned up favorites list', [favorites.length - validFavorites.length, 'removed']);\n    }\n  }\n}","import { MODULE, ROLL_TYPES } from '../constants/General.mjs';\nimport { HOOKS_CORE } from '../constants/Hooks.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog, GMHitDieConfigDialog } from './dialogs/gm-dialogs/index.mjs';\nimport { SidebarUtil } from './SidebarUtil.mjs';\nimport { getPlayerOwner, isPlayerOwned, hasTokenInScene, updateCanvasTokenSelection, delay, buildRollTypes, NotificationManager, filterActorsForDeathSaves, categorizeActorsByOwnership, adjustMenuOffset } from './helpers/Helpers.mjs';\nimport { RollHandlers } from './RollHandlers.mjs';\nimport { RollHelpers } from './helpers/RollHelpers.mjs';\nimport { CustomRollDialog } from './dialogs/CustomRollDialog.mjs';\nimport { ensureCombatForInitiative, filterActorsForInitiative } from './helpers/RollValidationHelpers.mjs';\nimport { GeneralUtil } from './helpers/GeneralUtil.mjs';\nimport { ModuleHelpers } from './helpers/ModuleHelpers.mjs';\nimport { ChatMessageUtils } from './ChatMessageUtils.mjs';\nimport { RollMenuActorUtil } from './utils/RollMenuActorUtil.mjs';\nimport { RollMenuConfigUtil } from './utils/RollMenuConfigUtil.mjs';\nimport { RollMenuOrchestrationUtil } from './utils/RollMenuOrchestrationUtil.mjs';\nimport { RollMenuDragUtil } from './utils/RollMenuDragUtil.mjs';\nimport { FavoriteActorsUtil } from './FavoriteActorsUtil.mjs';\n\n/**\n * Roll Requests Menu Application\n * Extends Foundry's ApplicationV2 with Handlebars support to provide a menu interface for GMs to request rolls from players\n */\nconst { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api;\nexport default class RollRequestsMenu extends HandlebarsApplicationMixin(ApplicationV2) {\n  /**\n   * Singleton instance of the menu\n   * @type {RollRequestsMenu|null}\n   */\n  static #instance = null;\n\n  constructor(options = {}) {\n    LogUtil.log('RollRequestsMenu.constructor', [options]);\n    super(options);\n    \n    // Track selected actors and current state\n    this.selectedActors = new Set();\n    this.currentTab = 'pc';\n    this.selectedRequestType = null;\n    this.isLocked = false; \n    this.optionsExpanded = game.user.getFlag(MODULE.ID, 'menuOptionsExpanded') ?? false;\n    this.accordionStates = game.user.getFlag(MODULE.ID, 'menuAccordionStates') ?? {};\n    \n    // Drag state\n    this.isDragging = false;\n    this.isCustomPosition = false;\n    this.customPosition = RollMenuDragUtil.loadCustomPosition();\n    \n    // Initialize with actors from selected tokens\n    this._initializeFromSelectedTokens();\n  }\n\n  static DEFAULT_OPTIONS = {\n    id: 'flash-rolls-menu',\n    classes: ['flash-rolls-menu'],\n    tag: 'div',\n    window: {\n      frame: false,\n      resizable: false,\n      minimizable: false\n    },\n    position: {}\n  };\n\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/requests-menus.hbs`\n    }\n  };  \n  \n  async _prepareContext(options) {\n    LogUtil.log('_prepareContext');\n    const SETTINGS = getSettings();\n    const context = await super._prepareContext(options);\n    const actors = game.actors.contents;\n    const pcActors = [];\n    const npcActors = [];\n    const currentScene = game.scenes.active;\n    \n    for (const actor of actors) {\n      if (actor.type !== 'character' && actor.type !== 'npc') continue;\n      \n      const createActorData = (token = null) => ({\n        id: actor.id,\n        uuid: actor.uuid,\n        name: token ? token.name : actor.name,\n        img: actor.img,\n        selected: this.selectedActors.has(token?.id || actor.id),\n        crlngnStats: RollMenuActorUtil.getActorStats(actor),\n        tokenId: token?.id || null,\n        isToken: !!token,\n        uniqueId: token?.id || actor.id\n      });\n      \n      // Check if owned by a player (not GM)\n      const isPlayerOwned = Object.entries(actor.ownership)\n        .some(([userId, level]) => {\n          const user = game.users.get(userId);\n          return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        });\n      \n      if (isPlayerOwned) {\n        const showOnlyPCsWithToken = SettingsUtil.get(SETTINGS.showOnlyPCsWithToken?.tag);\n        const favoriteActorsList = SettingsUtil.get(SETTINGS.favoriteActorsList?.tag) || [];\n        const favorite = favoriteActorsList.find(fav => fav.actorId === actor.id);\n        const isFavorite = !!favorite;\n        \n        const tokensInScene = currentScene?.tokens.filter(token => token.actorId === actor.id) || [];\n        \n        if (isFavorite) {\n          if (tokensInScene.length > 0) {\n            tokensInScene.forEach(tokenDoc => {\n              const actorData = createActorData(tokenDoc);\n              actorData.isFavorite = true;\n              pcActors.push(actorData);\n            });\n          } else {\n            const actorData = createActorData();\n            actorData.isFavorite = true;\n            actorData.tokenId = favorite.tokenId || null;\n            pcActors.push(actorData);\n          }\n        } else if (showOnlyPCsWithToken) {\n          if (tokensInScene.length > 0) {\n            tokensInScene.forEach(tokenDoc => {\n              const actorData = createActorData(tokenDoc);\n              pcActors.push(actorData);\n            });\n          }\n        } else {\n          if (tokensInScene.length > 0) {\n            tokensInScene.forEach(tokenDoc => {\n              const actorData = createActorData(tokenDoc);\n              pcActors.push(actorData);\n            });\n          } else {\n            const actorData = createActorData();\n            pcActors.push(actorData);\n          }\n        }\n      } else {\n        const favoriteActorsList = SettingsUtil.get(SETTINGS.favoriteActorsList?.tag) || [];\n        const favorite = favoriteActorsList.find(fav => fav.actorId === actor.id);\n        const isFavorite = !!favorite;\n        \n        const tokensInScene = currentScene?.tokens.filter(token => token.actorId === actor.id) || [];\n        \n        if (isFavorite) {\n          if (tokensInScene.length > 0) {\n            tokensInScene.forEach(tokenDoc => {\n              const actorData = createActorData(tokenDoc);\n              actorData.isFavorite = true;\n              npcActors.push(actorData);\n            });\n          } else {\n            const actorData = createActorData();\n            actorData.isFavorite = true;\n            actorData.tokenId = favorite.tokenId || null;\n            npcActors.push(actorData);\n          }\n        } else {\n          if (tokensInScene.length > 0) {\n            tokensInScene.forEach(tokenDoc => {\n              const actorData = createActorData(tokenDoc);\n              npcActors.push(actorData);\n            });\n          }\n        }\n      }\n    }\n    \n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    const showOnlyPCsWithToken = SettingsUtil.get(SETTINGS.showOnlyPCsWithToken.tag);\n    \n    // Check if all actors in current tab are selected\n    const currentActors = this.currentTab === 'pc' ? pcActors : npcActors;\n    const selectAllOn = currentActors.length > 0 && \n      currentActors.every(actor => this.selectedActors.has(actor.uniqueId));\n    \n    // Always prepare request types, they're just disabled when no actors are selected\n    const requestTypes = [];\n    for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n      const requestType = {\n        id: key,\n        name: game.i18n.localize(`FLASH_ROLLS.rollTypes.${option.name}`) || option.label,\n        rollable: option.subList == null,\n        hasSubList: !!option.subList,\n        selected: this.selectedRequestType === key, \n        expanded: this.accordionStates[key] ?? false,\n        subItems: []\n      };\n      \n      // Build sub-items for accordion\n      if (option.subList) {\n        requestType.subItems = buildRollTypes(key, this.selectedActors);\n      }\n      \n      requestTypes.push(requestType);\n    }\n\n    const rollTypes = buildRollTypes(this.selectedRequestType, this.selectedActors);\n    \n    const preparedContext = {\n      ...context,\n      actors: currentActors,\n      currentTab: this.currentTab,\n      isPCTab: this.currentTab === 'pc',\n      isNPCTab: this.currentTab === 'npc',\n      selectedTab: this.currentTab,\n      rollRequestsEnabled,\n      skipRollDialog,\n      groupRollsMsgEnabled,\n      selectAllOn,\n      hasSelectedActors: this.selectedActors.size > 0,\n      requestTypes,\n      rollTypes,\n      showNames: true,\n      actorsLocked: this.isLocked,\n      optionsExpanded: this.optionsExpanded\n    };\n    \n    // Store the context for use in select all\n    this._lastPreparedContext = preparedContext;\n    \n    return preparedContext;\n  }\n\n\n  /**\n   * Override _renderFrame to control where the element is inserted in the DOM\n   * @override\n   */\n  async _renderFrame(options) {\n    const frame = await super._renderFrame(options);\n    \n    // Apply custom position BEFORE inserting into DOM to prevent flicker\n    const customPosition = this.customPosition || RollMenuDragUtil.loadCustomPosition();\n    if (customPosition?.isCustom && frame) {\n      if (customPosition.dockedRight) {\n        frame.style.position = 'fixed';\n        frame.style.top = `${customPosition.y}px`;\n        frame.style.left = '';\n        frame.style.right = '';\n        frame.style.bottom = '';\n        frame.classList.add('docked-right');\n        \n        const chatNotifications = document.querySelector('#chat-notifications');\n        if (chatNotifications) {\n          chatNotifications.insertBefore(frame, chatNotifications.firstChild);\n        }\n        \n        adjustMenuOffset();\n        this.isCustomPosition = true;\n        this.customPosition = customPosition;\n      } else {\n        frame.style.position = 'fixed';\n        frame.style.top = `${customPosition.y}px`;\n        frame.style.left = `${customPosition.x}px`;\n        frame.style.right = 'auto';\n        frame.style.bottom = 'auto';\n        frame.classList.add('custom-position');\n        \n        // Check if close to left edge\n        const remInPixels = parseFloat(getComputedStyle(document.documentElement).fontSize) * 15;\n        if (customPosition.x < remInPixels) {\n          frame.classList.add('left-edge');\n        }\n        \n        document.body.appendChild(frame);\n        const isCrlngnUIOn = document.querySelector('body.crlngn-tabs') ? true : false;\n        \n        GeneralUtil.addCSSVars('--flash-rolls-menu-offset', isCrlngnUIOn ? '0px' : '16px');\n        this.isCustomPosition = true;\n        this.customPosition = customPosition;\n      }\n    } else {\n      // Default position - insert into chat notifications\n      const chatNotifications = document.querySelector('#chat-notifications');\n      if (chatNotifications && frame) {\n        chatNotifications.insertBefore(frame, chatNotifications.firstChild);\n      }\n    }\n    \n    return frame;\n  }\n\n  /**\n   * Called after the application is rendered\n   * Verifies if roll controls are visible and adjusts the offset of the menu\n   */\n  _onRender(context, options) {\n    LogUtil.log('_onRender');\n    super._onRender(context, options);\n    this._attachListeners();\n\n    adjustMenuOffset();\n    \n    if (this.optionsExpanded) {\n      const optionsToggle = this.element.querySelector('.options-toggle');\n      const optionsElement = this.element.querySelector('li.options');\n      const toggleBtn = this.element.querySelector('.options-toggle-btn');\n      \n      optionsToggle?.classList.add('expanded');\n      optionsElement?.classList.add('expanded');\n    }\n    \n    setTimeout(() => {\n      document.addEventListener('click', this._onClickOutside, true);\n    }, 100);\n    \n    this._tokenControlHook = Hooks.on(HOOKS_CORE.CONTROL_TOKEN, this._onTokenControlChange.bind(this));\n    this._updateItemHook = Hooks.on(HOOKS_CORE.UPDATE_ITEM, this._onItemUpdate.bind(this));\n    this._createItemHook = Hooks.on(HOOKS_CORE.CREATE_ITEM, this._onItemUpdate.bind(this));\n    this._deleteItemHook = Hooks.on(HOOKS_CORE.DELETE_ITEM, this._onItemUpdate.bind(this));\n    \n    const dragHandle = this.element.querySelector(RollMenuDragUtil.DRAG_HANDLE_SELECTOR);\n    if (dragHandle) {\n      dragHandle.addEventListener('mousedown', (e) => {\n        RollMenuDragUtil.handleDragStart(e, this);\n      });\n    }\n  }\n  \n  /**\n   * Handle token control changes\n   */\n  _onTokenControlChange(token, controlled) {\n    LogUtil.log('_onTokenControlChange');\n    if (!this.rendered) return;\n    \n    if (this._ignoreTokenControl) return;\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n    }\n    \n    this._tokenUpdateTimeout = setTimeout(() => {\n      const previousSelection = new Set(this.selectedActors);\n      \n      this._initializeFromSelectedTokens();\n      \n      const allActorIds = new Set([...previousSelection, ...this.selectedActors]);\n      for (const actorId of allActorIds) {\n        this._updateActorSelectionUI(actorId);\n      }\n      \n      this._updateSelectAllState();\n      this._updateRequestTypesVisibilityNoRender();\n      \n      this._tokenUpdateTimeout = null;\n    }, 100);\n  }\n  \n  // Note: _onActorUpdate method removed - now handled by HooksUtil\n  \n  /**\n   * Handle item updates on actors\n   * Re-renders the menu if the item affects character AC\n   */\n  _onItemUpdate(item, changes, options, userId) {\n    if (!this.rendered) return;\n    \n    const affectsAC = item.type === 'equipment' || \n                      changes.system?.equipped !== undefined ||\n                      changes.system?.attunement !== undefined;\n    if (!affectsAC) return;\n\n    const actor = item.parent;\n    if (!actor || actor.documentName !== 'Actor') return;\n    \n    const currentTab = this.currentTab;\n    const isPlayerOwned = Object.entries(actor.ownership)\n      .some(([uid, level]) => {\n        const user = game.users.get(uid);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n    \n    const shouldUpdate = (currentTab === 'pc' && isPlayerOwned) || \n                         (currentTab === 'npc' && !isPlayerOwned && hasTokenInScene(actor));\n    \n    if (shouldUpdate) {\n      if (this._itemUpdateTimeout) {\n        clearTimeout(this._itemUpdateTimeout);\n      }\n      \n      this._itemUpdateTimeout = setTimeout(() => {\n        this.render();\n        this._itemUpdateTimeout = null;\n      }, 500);\n    }\n  }\n  \n  // Note: _onSettingUpdate method removed - now handled by HooksUtil\n  \n  // Note: _onSceneUpdate method removed - now handled by HooksUtil\n\n  /**\n   * Handle clicks outside the menu\n   */\n  _onClickOutside = (event) => {\n    LogUtil.log('_onClickOutside');\n    if (this.isLocked) return;\n    const menu = this.element;\n    if (!menu) return;\n    if (event.target.closest('.flash-rolls-menu')) return;\n    if (menu.contains(event.target)) return;\n    if (event.target.closest('#flash-rolls-icon')) return;\n    if (event.target.closest('.dialog, .app, .notification, .application')) return;\n    this.close();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachListeners() {\n    LogUtil.log('_attachListeners');\n    \n    const html = this.element;\n    \n    html.querySelector('#flash-rolls-toggle')?.addEventListener('change', this._onToggleRollRequests.bind(this));\n    html.querySelector('#flash5e-skip-dialogs')?.addEventListener('change', this._onToggleSkipDialogs.bind(this));\n    html.querySelector('#flash5e-group-rolls-msg')?.addEventListener('change', this._onToggleGroupRollsMsg.bind(this));\n    html.querySelector('#flash5e-actors-all')?.addEventListener('change', this._onToggleSelectAll.bind(this));\n    html.querySelector('#flash5e-actors-lock')?.addEventListener('click', this._onToggleLock.bind(this));\n    html.querySelector('.options-toggle-btn')?.addEventListener('click', this._onToggleOptions.bind(this));\n    \n    const tabs = html.querySelectorAll('.actor-tab');\n    tabs.forEach(tab => {\n      tab.addEventListener('click', this._onTabClick.bind(this));\n      tab.addEventListener('dblclick', this._onTabDoubleClick.bind(this));\n    });\n    \n    html.querySelectorAll('.actor').forEach(actor => {\n      actor.addEventListener('click', this._onActorClick.bind(this));\n    });\n    \n    const searchInput = html.querySelector('.search-input');\n    if (searchInput) {\n      searchInput.addEventListener('input', this._onSearchInput.bind(this));\n    }\n    \n    const accordion = html.querySelector('.request-types-accordion');\n    if (accordion) {\n      html.addEventListener('mouseenter', () => {\n        if (this.selectedActors.size > 0) {\n          accordion.classList.add('hover-visible');\n        }\n      });\n      \n      html.addEventListener('mouseleave', () => {\n        accordion.classList.remove('hover-visible');\n      });\n    }\n    \n    const requestTypesContainer = html.querySelector('.request-types');\n    if (requestTypesContainer) {\n      requestTypesContainer.addEventListener('click', (event) => {\n        const requestHeader = event.target.closest('.request-type-header');\n        if (requestHeader) {\n          const requestItem = requestHeader.closest('.request-type-item');\n          \n          if (requestHeader.classList.contains('accordion-header')) {\n            this._onAccordionToggle(event);\n            return;\n          }\n          \n          if (requestHeader.classList.contains('toggle') && requestItem && requestItem.classList.contains('rollable')) {\n            const customEvent = {\n              ...event,\n              currentTarget: requestItem\n            };\n            this._onRequestTypeClick(customEvent);\n            return;\n          }\n        }\n        \n        const subItem = event.target.closest('.sub-item');\n        if (subItem && subItem.dataset.id) {\n          const customEvent = {\n            ...event,\n            currentTarget: subItem\n          };\n          this._onRollTypeClick(customEvent);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle roll requests toggle\n   */\n  async _onToggleRollRequests(event) {\n    LogUtil.log('_onToggleRollRequests');\n    const SETTINGS = getSettings();\n    const enabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, enabled);\n    \n    SidebarUtil.updateRollRequestsIcon(enabled);\n    \n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleSkipDialogs(event) {\n    LogUtil.log('_onToggleSkipDialogs');\n    const SETTINGS = getSettings();\n    const skip = event.target.checked;\n    await SettingsUtil.set(SETTINGS.skipRollDialog.tag, skip);\n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleGroupRollsMsg(event) {\n    LogUtil.log('_onToggleGroupRollsMsg');\n    const SETTINGS = getSettings();\n    const isEnabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.groupRollsMsgEnabled.tag, isEnabled);\n  }\n\n  /**\n   * Handle select all toggle\n   */\n  _onToggleSelectAll(event) {\n    LogUtil.log('_onToggleSelectAll');\n    const selectAll = event.target.checked;\n    this._ignoreTokenControl = true;\n    \n    const context = this._lastPreparedContext || {};\n    const currentActors = context.actors || [];\n    \n    currentActors.forEach(actorData => {\n      const uniqueId = actorData.uniqueId;\n      if (selectAll) {\n        this.selectedActors.add(uniqueId);\n        if (actorData.tokenId) {\n          updateCanvasTokenSelection(actorData.id, true, actorData.tokenId);\n        } else {\n          updateCanvasTokenSelection(actorData.id, true);\n        }\n      } else {\n        this.selectedActors.delete(uniqueId);\n        if (actorData.tokenId) {\n          updateCanvasTokenSelection(actorData.id, false, actorData.tokenId);\n        } else {\n          updateCanvasTokenSelection(actorData.id, false);\n        }\n      }\n    });\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 200);\n    \n    this.render();\n    this._updateRequestTypesVisibility();\n  }\n  \n  /**\n   * Handle lock toggle\n   */\n  _onToggleLock(event) {\n    LogUtil.log('_onToggleLock');\n    event.preventDefault();\n    this.isLocked = !this.isLocked;\n    \n    const lockIcon = event.currentTarget;\n    lockIcon.classList.remove('fa-lock-keyhole', 'fa-lock-keyhole-open');\n    lockIcon.classList.add(this.isLocked ? 'fa-lock-keyhole' : 'fa-lock-keyhole-open');\n  }\n  \n  /**\n   * Handle options toggle\n   */\n  async _onToggleOptions(event) {\n    LogUtil.log('_onToggleOptions');\n    event.preventDefault();\n    event.stopPropagation();\n    \n    this.optionsExpanded = !this.optionsExpanded;\n    await game.user.setFlag(MODULE.ID, 'menuOptionsExpanded', this.optionsExpanded);\n    \n    const optionsToggleContainer = this.element.querySelector('.options-toggle');\n    if (optionsToggleContainer) {\n      optionsToggleContainer.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n    const optionsElement = this.element.querySelector('li.options');\n    if (optionsElement) {\n      optionsElement.classList.toggle('expanded', this.optionsExpanded);\n    }\n  }\n  \n  /**\n   * Initialize selected actors from currently selected tokens\n   */\n  _initializeFromSelectedTokens() {\n    LogUtil.log('_initializeFromSelectedTokens');\n    \n    const controlledTokens = canvas.tokens?.controlled || [];\n    this.selectedActors.clear();\n    \n    for (const token of controlledTokens) {\n      if (token.actor) {\n        // For tokens on the scene, we need to use the token ID as the unique ID\n        // This matches how the actor list is rendered with uniqueId\n        const uniqueId = token.id;\n        this.selectedActors.add(uniqueId);\n        \n        if (this.selectedActors.size === 1) {\n          const isPC = isPlayerOwned(token.actor);\n          this.currentTab = isPC ? 'pc' : 'npc';\n        }\n      }\n    }\n\n    LogUtil.log('_initializeFromSelectedTokens', [this.selectedActors]);\n\n  }\n  \n  /**\n   * Handle tab click\n   */\n  async _onTabClick(event) {\n    const tab = event.currentTarget.dataset.tab;\n    if (tab === this.currentTab) return;\n    \n    // this.selectedActors.clear();\n    // canvas.tokens?.releaseAll();\n    this.selectedRequestType = null;\n    \n    this.currentTab = tab;\n    await this.render();\n  }\n\n  /**\n   * Handle tab double-click to clear all selections\n   */\n  async _onTabDoubleClick(event) {\n    LogUtil.log('_onTabDoubleClick');\n    event.preventDefault();\n    event.stopPropagation();\n    \n    this._ignoreTokenControl = true;\n    this.selectedActors.clear();\n    canvas.tokens?.releaseAll();\n    this.selectedRequestType = null;\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 200);\n    \n    await this.render();\n    this._updateRequestTypesVisibility();\n  }\n\n  /**\n   * Handle click on actor row\n   */\n  _onActorClick(event) {\n    if (event.target.closest('.actor-select')) return;\n    \n    const actorElement = event.currentTarget;\n    const actorId = actorElement.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Toggle actor selection state\n   */\n  _toggleActorSelection(actorId) {\n    LogUtil.log('_toggleActorSelection');\n    this._ignoreTokenControl = true;\n    \n    if (this.selectedActors.has(actorId)) {\n      this.selectedActors.delete(actorId);\n      updateCanvasTokenSelection(actorId, false);\n    } else {\n      this.selectedActors.add(actorId);\n      updateCanvasTokenSelection(actorId, true);\n    }\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 100);\n    \n    this._updateActorSelectionUI(actorId);\n    this._updateSelectAllState();\n    this._updateRequestTypesVisibilityNoRender();\n  }\n  \n  /**\n   * Update the visual state of an actor element without re-rendering\n   */\n  _updateActorSelectionUI(actorId) {\n    const actorElement = this.element.querySelector(`.actor[data-id=\"${actorId}\"]`);\n    if (!actorElement) return;\n    \n    const checkbox = actorElement.querySelector('.actor-select');\n    const isSelected = this.selectedActors.has(actorId);\n    \n    if (checkbox) {\n      checkbox.checked = isSelected;\n    }\n    \n    // Update both the class and the data-selected attribute\n    actorElement.classList.toggle('selected', isSelected);\n    actorElement.dataset.selected = isSelected.toString();\n  }\n  \n\n  /**\n   * Update request types visibility based on actor selection\n   */\n  _updateRequestTypesVisibility() {\n    LogUtil.log('_updateRequestTypesVisibility');\n    this.render();\n  }\n  \n  /**\n   * Update request types visibility without re-rendering\n   */\n  _updateRequestTypesVisibilityNoRender() {\n    LogUtil.log('_updateRequestTypesVisibilityNoRender');\n    const hasSelection = this.selectedActors.size > 0;\n    const requestTypesContainer = this.element.querySelector('.request-types');\n    \n    if (requestTypesContainer) {\n      requestTypesContainer.classList.toggle('disabled', !hasSelection);\n      \n      // Update the visual state of request items\n      const requestItems = requestTypesContainer.querySelectorAll('.request-type-item');\n      requestItems.forEach(item => {\n        item.classList.toggle('disabled', !hasSelection);\n      });\n    }\n  }\n\n  /**\n   * Update select all checkbox state\n   */\n  _updateSelectAllState() {\n    LogUtil.log('_updateSelectAllState');\n    const selectAllCheckbox = this.element.querySelector('#flash5e-actors-all');\n    const currentActors = this.currentTab === 'pc' ? 'pc' : 'npc';\n    const checkboxes = this.element.querySelectorAll(`.${currentActors}-actors .actor-item input[type=\"checkbox\"]`);\n    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;\n    \n    selectAllCheckbox.checked = checkedCount > 0 && checkedCount === checkboxes.length;\n    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n  }\n\n  /**\n   * Handle search input\n   */\n  _onSearchInput(event) {\n    LogUtil.log('_onSearchInput');\n    const searchTerm = event.target.value.toLowerCase().trim();\n    const requestTypesContainer = this.element.querySelector('.request-types');\n    \n    if (!requestTypesContainer) return;\n    const requestItems = requestTypesContainer.querySelectorAll('.request-type-item');\n    \n    requestItems.forEach(requestItem => {\n      const requestName = requestItem.querySelector('.request-type-name')?.textContent.toLowerCase() || '';\n      const subItems = requestItem.querySelectorAll('.sub-item');\n      let hasVisibleSubItems = false;\n      \n      if (subItems.length > 0) {\n        subItems.forEach(subItem => {\n          const subItemName = subItem.querySelector('.sub-item-name')?.textContent.toLowerCase() || '';\n          const isVisible = subItemName.includes(searchTerm);\n          subItem.classList.toggle('hidden', !isVisible);\n          if (isVisible) hasVisibleSubItems = true;\n        });\n        \n        const categoryMatches = requestName.includes(searchTerm);\n        const shouldShowCategory = searchTerm === '' || categoryMatches || hasVisibleSubItems;\n        requestItem.classList.toggle('hidden', !shouldShowCategory);\n        \n        if (searchTerm && hasVisibleSubItems) {\n          const nestedList = requestItem.querySelector('.roll-types-nested');\n          const accordionToggle = requestItem.querySelector('.accordion-toggle');\n          if (nestedList && accordionToggle) {\n            nestedList.style.display = 'block';\n            accordionToggle.classList.add('expanded');\n          }\n        }\n      } else {\n        const isVisible = searchTerm === '' || requestName.includes(searchTerm);\n        requestItem.classList.toggle('hidden', !isVisible);\n      }\n    });\n  }\n\n  /**\n   * Handle accordion toggle\n   */\n  async _onAccordionToggle(event) {\n    event.stopPropagation();\n    \n    const requestHeader = event.target.closest('.request-type-header');\n    const requestItem = requestHeader.closest('.request-type-item');\n    const requestId = requestItem.dataset.id;\n    const accordionToggle = requestItem.querySelector('.accordion-toggle');\n    const nestedList = requestItem.querySelector('.roll-types-nested');\n    \n    if (!nestedList) return;\n    \n    const isExpanded = accordionToggle.classList.contains('expanded');\n    accordionToggle.classList.toggle('expanded', !isExpanded);\n    nestedList.style.display = isExpanded ? 'none' : 'block';\n    this.accordionStates[requestId] = !isExpanded;\n    await game.user.setFlag(MODULE.ID, 'menuAccordionStates', this.accordionStates);\n  }\n\n  /**\n   * Handle request type click\n   */\n  async _onRequestTypeClick(event) {\n    const requestItem = event.currentTarget;\n    const requestType = requestItem.dataset.id;\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    \n    if (!rollOption) {\n      LogUtil.error('Unknown request type:', [requestType]);\n      return;\n    }\n    \n    if (this.selectedRequestType === requestType) {\n      this.selectedRequestType = null;\n    } else {\n      this.selectedRequestType = requestType;\n    }\n    \n    if (rollOption.subList) {\n      await this.render();\n    } else if (this.selectedRequestType) {\n      this._triggerRoll(requestType, null);\n    }\n  }\n\n  /**\n   * Handle roll type click (sub-item in accordion)\n   */\n  _onRollTypeClick(event) {\n    LogUtil.log('_onRollTypeClick');\n    const rollKey = event.currentTarget.dataset.id;\n    const parentType = event.currentTarget.dataset.parent;\n    const requestType = parentType || this.selectedRequestType;\n    this._triggerRoll(requestType, rollKey);\n  }\n\n\n\n  /**\n   * Get roll configuration from dialog or create default\n   * @param {Actor[]} actors - Actors being rolled for\n   * @param {string} rollMethodName - The roll method name\n   * @param {string} rollKey - The roll key\n   * @param {boolean} skipRollDialog - Whether to skip dialogs\n   * @param {Array} pcActors - PC actors with owners\n   * @returns {Promise<BasicRollProcessConfiguration|null>} Process configuration or null if cancelled\n   */\n  async _getRollConfiguration(actors, rollMethodName, rollKey, skipRollDialog, pcActors) {\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    if (!skipRollDialog && rollMethodName !== ROLL_TYPES.CUSTOM) {\n      let DialogClass;\n      if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(rollMethodName)) {\n        DialogClass = GMSkillToolConfigDialog;\n      } else if (rollMethodName === ROLL_TYPES.HIT_DIE) {\n        DialogClass = GMHitDieConfigDialog;\n      } else {\n        DialogClass = GMRollConfigDialog;\n      }\n      const config = await DialogClass.initConfiguration(actors, rollMethodName, rollKey, { \n        skipRollDialog,\n        sendRequest: rollRequestsEnabled || false \n      });\n      LogUtil.log('_getRollConfiguration', [config]);\n      \n      return config;\n    } else {\n      const config = {\n        rolls: [{\n          parts: [],\n          data: {},\n          options: {}\n        }],\n        advantage: false,\n        disadvantage: false,\n        rollMode: game.settings.get(\"core\", \"rollMode\"),\n        chatMessage: true,\n        isRollRequest: false,\n        skipRollDialog: true,\n        sendRequest: rollRequestsEnabled && pcActors.length > 0\n      };\n      \n      if (rollMethodName === ROLL_TYPES.DEATH_SAVE) {\n        config.target = 10;\n      }\n      \n      return config;\n    }\n  }\n\n  /**\n   * Defines who rolls for each selected actor (GM or player)\n   * Orchestrates the roll actions accordingly\n   * @param {Object} config - Roll configuration\n   * @param {Array} pcActors - PC actors with owners\n   * @param {Actor[]} npcActors - NPC actors\n   * @param {string} rollMethodName - The roll method name\n   * @param {string} rollKey - The roll key\n   * @param {Array} actorsWithIds - Array of actor entries with unique IDs\n   */\n  async _orchestrateRollsForActors(config, pcActors, npcActors, rollMethodName, rollKey, actorsWithIds) {\n    const SETTINGS = getSettings();\n    const successfulRequests = [];\n    const offlinePlayerActors = [];\n    const onlinePlayerActors = [];\n    let groupRollId = foundry.utils.randomID();\n    // config.groupRollId = groupRollId;\n    \n    LogUtil.log('_orchestrateRollsForActors', [config, pcActors, npcActors]);\n    \n    const allActorEntries = [];\n    const allActors = [];\n\n    if (config.sendRequest) {\n      for (const { actor, owner } of pcActors) {\n        if (!owner.active) {\n          if(SettingsUtil.get(SETTINGS.showOfflineNotifications.tag)) {\n            NotificationManager.notify('info', game.i18n.format(\"FLASH_ROLLS.notifications.playerOffline\", { \n              player: owner.name \n            }));\n          }\n          offlinePlayerActors.push(actor);\n        }else{\n          onlinePlayerActors.push({actor, owner});\n        }\n      }\n      allActors.push(...onlinePlayerActors.map(({actor}) => actor));\n    } else {\n      npcActors.push(...pcActors.map(({ actor }) => actor));\n    }\n    \n    allActors.push(...offlinePlayerActors, ...npcActors);\n    const allActorIds = allActors.map(actor => actor.id);\n    \n    allActorEntries.push(...actorsWithIds.filter(item => \n      item && item.actor && allActorIds.includes(item.actor.id)\n    ));\n\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    \n    if (groupRollsMsgEnabled && allActors.length > 1) {\n      LogUtil.log('_orchestrateRollsForActors - generated new groupRollId', [groupRollId]);\n      \n      await ChatMessageUtils.createGroupRollMessage(\n        allActorEntries,\n        rollMethodName,\n        rollKey,\n        config,\n        groupRollId\n      );\n    }\n\n    /////////////////////////////////\n    // Player Rolls: Actors owned by active players\n    for (const { actor, owner } of onlinePlayerActors) {\n      const useGroupId = groupRollsMsgEnabled && allActors.length > 1 ? groupRollId : null;\n      await this._sendRollRequestToPlayer(actor, owner, rollMethodName, rollKey, config, true, useGroupId);\n      successfulRequests.push({ actor, owner });\n      await delay(100);\n    }\n    if (successfulRequests.length > 0) {\n      this._showConsolidatedNotification(successfulRequests, rollMethodName, rollKey);\n    }\n    \n    /////////////////////////////////\n    // GM Rolls: Actors owned by offline players or NPC actors\n    const gmRolledActors = [...offlinePlayerActors, ...npcActors];\n    if (gmRolledActors.length > 0) {\n      config.skipRollDialog = true;\n      config.groupRollId = groupRollsMsgEnabled && allActors.length > 1 ? groupRollId : null;\n      \n      // For GM rolls, we need to use actorsWithIds to preserve token information\n      const gmActorIds = gmRolledActors.map(actor => actor.id);\n      const gmActorEntries = actorsWithIds.filter(entry => \n        entry && entry.actor && gmActorIds.includes(entry.actor.id)\n      );\n      \n      await this._handleGMRollsWithTokens(gmActorEntries, rollMethodName, rollKey, config);\n    }\n  }\n\n  /**\n   * Method called from menu items to trigger the roll for selected actors\n   * @param {string} requestType - The type of roll request (e.g., 'skill', 'ability')\n   * @param {string} rollKey - The specific roll key (e.g., 'acr' for Acrobatics)\n   */\n  async _triggerRoll(requestType, rollKey) {\n    LogUtil.log('_triggerRoll', [requestType, rollKey]);\n    const SETTINGS = getSettings();\n    const selectedUniqueIds = Array.from(this.selectedActors);\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n    \n    // Convert selected unique IDs back to actors with their unique identifiers\n    // Some IDs might be token IDs, others might be actor IDs\n    let actorsWithIds = selectedUniqueIds\n      .map(uniqueId => {\n        let actor = game.actors.get(uniqueId);\n        if (actor) {\n          return { actor, uniqueId, tokenId: null };\n        }\n        const token = canvas.tokens?.get(uniqueId);\n        if (token?.actor) {\n          return { actor: token.actor, uniqueId, tokenId: uniqueId };\n        }\n        const tokenDoc = game.scenes.active?.tokens.get(uniqueId);\n        if (tokenDoc?.actor) {\n          return { actor: tokenDoc.actor, uniqueId, tokenId: uniqueId };\n        }\n        \n        return null;\n      })\n      .filter(item => item);\n    \n    let actors = actorsWithIds.map(item => item.actor);\n    \n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    const rollMethodName = (rollOption?.name || requestType)?.toLowerCase();\n    \n    switch(rollMethodName) {\n      case ROLL_TYPES.CUSTOM:\n        rollKey = await RollMenuConfigUtil.handleCustomRoll();\n        if (!rollKey) return;\n        break;\n      case ROLL_TYPES.INITIATIVE:\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n        const combatReady = await ensureCombatForInitiative();\n        if (combatReady) {\n          LogUtil.log(\"_triggerRoll - initiative\", [selectedUniqueIds]);\n          \n          const actorsWithoutTokens = [];\n          const actorsWithTokens = [];\n          \n          for (const uniqueId of selectedUniqueIds) {\n            let actor = game.actors.get(uniqueId);\n            let tokenId = null;\n            \n            if (!actor) {\n              const token = canvas.tokens?.get(uniqueId) || game.scenes.active?.tokens.get(uniqueId);\n              if (token?.actor) {\n                actor = token.actor;\n                tokenId = uniqueId;\n                actorsWithTokens.push(actor.name);\n              }\n              LogUtil.log(\"_triggerRoll - actor from token\", [actor.name, actor, tokenId]);\n            } else {\n              tokenId = actor.getActiveTokens()?.[0]?.id || null;\n              if (!tokenId) {\n                actorsWithoutTokens.push(actor.name);\n                continue;\n              }\n              actorsWithTokens.push(actor.name);\n              LogUtil.log(\"_triggerRoll - actor\", [actor.name, actor, tokenId]);\n              \n              // Check if this specific token is already a combatant\n              const existingCombatant = game.combat.combatants.find(c => c.tokenId === tokenId);\n              if (!existingCombatant) {\n                LogUtil.log(\"_triggerRoll - adding token to combat\", [actor.name, tokenId]);\n                await game.combat.createEmbeddedDocuments(\"Combatant\", [{\n                  actorId: actor.id,\n                  tokenId: tokenId\n                }]);\n              }\n            }\n          }\n          \n          // Check if no actors have tokens on the scene\n          if (actorsWithTokens.length === 0) {\n            ui.notifications.warn(game.i18n.localize(\"FLASH_ROLLS.notifications.noTokensForInitiative\") || \n              \"Cannot roll initiative: None of the selected actors have tokens on the scene.\");\n            return;\n          }\n          \n          if (actorsWithoutTokens.length > 0) {\n            ui.notifications.info(game.i18n.format(\"FLASH_ROLLS.notifications.actorsSkippedInitiative\", {\n              actors: actorsWithoutTokens.join(\", \")\n            }) || `Initiative skipped for actors without tokens: ${actorsWithoutTokens.join(\", \")}`);\n          }\n          \n          // For initiative, filter out actors without tokens first\n          // Only keep entries that have tokens (either token-based entries or actors with tokens)\n          const entriesWithTokens = actorsWithIds.filter(entry => {\n            if (entry.tokenId) return true;  // Token-based entry\n            // Check if actor has a token on scene\n            const hasToken = entry.actor.getActiveTokens()?.[0];\n            return !!hasToken;\n          });\n          \n          // Update actorsWithIds to only include those with tokens\n          actorsWithIds.length = 0;\n          actorsWithIds.push(...entriesWithTokens);\n          \n          // Update actors list based on filtered entries\n          actors = entriesWithTokens.map(entry => entry.actor);\n          \n          // Now apply initiative filtering on the remaining actors\n          const uniqueActorIds = [...new Set(actors.map(actor => actor.id))];\n          const filteredActorIds = await filterActorsForInitiative(uniqueActorIds, game);\n\n          LogUtil.log(\"_triggerRoll filteredActorIds\", [filteredActorIds, !filteredActorIds.length]);\n          if (!filteredActorIds.length) return;\n\n          // Filter actorsWithIds to only include those that passed initiative filtering\n          const filteredActorsWithIds = actorsWithIds.filter(item => \n            item && item.actor && filteredActorIds.includes(item.actor.id)\n          );\n          \n          // Final update of both arrays\n          actors = filteredActorIds\n            .map(id => game.actors.get(id))\n            .filter(actor => actor);\n          \n          actorsWithIds.length = 0;\n          actorsWithIds.push(...filteredActorsWithIds);\n          \n          const initiateCombat = SettingsUtil.get(SETTINGS.initiateCombatOnRequest.tag);\n          if (initiateCombat) {\n            game.combat.startCombat();\n          }\n        }\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        actors = await filterActorsForDeathSaves(actors);\n        break;\n      default:\n        break;\n    }\n    \n    if (!actors.length) {\n      NotificationManager.notify('warn', \"No valid actors selected\");\n      return;\n    }\n    \n    const { pcActors, npcActors } = categorizeActorsByOwnership(actors);\n    const config = await RollMenuConfigUtil.getRollConfiguration(actors, rollMethodName, rollKey, skipRollDialog, pcActors);\n    \n    LogUtil.log(\"_triggerRoll config\", [config]);\n    if (!config) return;\n    await this._orchestrateRollsForActors(config, pcActors, npcActors, rollMethodName, rollKey, actorsWithIds);\n    \n    if (!this.isLocked) {\n      setTimeout(() => this.close(), 500);\n    }\n  }\n  \n  /**\n   * Send a roll request to a player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config - Roll configuration from dialog\n   * @param {boolean} suppressNotification - If true, don't show individual notification\n   * @param {string} groupRollId - Optional group roll ID for multi-actor rolls\n   */\n  async _sendRollRequestToPlayer(actor, owner, requestType, rollKey, config, suppressNotification = false, groupRollId = null) {\n    LogUtil.log('_sendRollRequestToPlayer #A', [requestType, rollKey]);\n    const SETTINGS = getSettings();\n    \n    let rollType = requestType?.toLowerCase();\n    \n    // Mapping for compound types\n    if (rollType === ROLL_TYPES.ABILITY_CHECK) {\n      rollType = ROLL_TYPES.ABILITY;\n    } else if (rollType === ROLL_TYPES.SAVING_THROW) {\n      rollType = ROLL_TYPES.SAVE;\n    } else if (rollType === ROLL_TYPES.INITIATIVE_DIALOG) {\n      rollType = ROLL_TYPES.INITIATIVE;\n    }\n    \n    if (rollType === ROLL_TYPES.HIT_DIE) {\n      const hdData = actor.system.attributes.hd; // First available hit die denomination\n      \n      if (hdData.value > 0) {\n        rollKey = hdData.largestAvailable;\n      } else {\n        // No hit dice available - show dialog to GM\n        const dialogResult = await foundry.applications.api.DialogV2.confirm({\n          window: {\n            title: game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.hitDie.refillTitle\") || \"No Hit Dice Available\",\n            classes: [\"flash5e-hit-die-dialog\"]\n          },\n          position: {\n            width: 420\n          },\n          content: `<p>${game.i18n.format(\"FLASH_ROLLS.ui.dialogs.hitDie.refillMessage\", { \n            actors: actor.name \n          }) || \"\"}</p>`,\n          modal: true,\n          rejectClose: false,\n          yes: {\n            label: game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.hitDie.refillAndSend\") || \"Refill & Send\",\n            icon: \"\"\n          },\n          no: {\n            label: game.i18n.localize(\"Cancel\") || \"Cancel\",\n            icon: \"\"\n          }\n        });\n        \n        if (dialogResult) {\n          try {\n            LogUtil.log('About to call handleHitDieRecovery for', [actor.name]);\n            const hitDieResult = await RollHandlers.handleHitDieRecovery(actor);\n            LogUtil.log('handleHitDieRecovery completed', [hitDieResult]);\n          } catch (error) {\n            LogUtil.error('Error calling handleHitDieRecovery:', [error]);\n          }\n          \n          // Get the largest available hit die after refill\n          rollKey = actor.system.attributes.hd.largestAvailable;\n          \n          NotificationManager.notify('info', game.i18n.format(\"FLASH_ROLLS.ui.dialogs.hitDie.refilled\", { \n            actor: actor.name \n          }) || `Hit dice refilled for ${actor.name}`);\n        } else {\n          // User cancelled - don't send the request\n          return;\n        }\n      }\n    }\n    \n    // Build the request data with proper rollProcessConfig\n    // Filter out circular references that midi-qol might add\n    const cleanConfig = { ...config };\n    delete cleanConfig.subject;\n    delete cleanConfig.workflow;\n    delete cleanConfig.item;\n    delete cleanConfig.activity;\n    \n    const requestData = {\n      type: \"rollRequest\",\n      groupRollId: groupRollId || foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      activityId: null,  // Menu-initiated rolls don't use activities\n      rollProcessConfig: {\n        ...cleanConfig,\n        _requestedBy: game.user.name  // Add who requested the roll\n      },\n      skipRollDialog: false, // Never skip to player when it's a request\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    // await ModuleHelpers.prepareMidiQOLSettings();\n    LogUtil.log('_sendRollRequestToPlayer - prepareMidiQOLSettings', []);\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    if (!suppressNotification) {\n      NotificationManager.notify('info', game.i18n.format(\"FLASH_ROLLS.notifications.rollRequestSent\", { \n        player: owner.name,\n        actor: actor.name \n      }));\n    }\n  }\n  \n  /**\n   * Send a consolidated notification for multiple roll requests\n   * @param {Array} successfulRequests - Array of {actor, owner} objects\n   * @param {string} rollMethodName - The type of roll being requested\n   * @param {string} rollKey - The specific roll key (if applicable)\n   */\n  _showConsolidatedNotification(successfulRequests, rollMethodName, rollKey) {\n    LogUtil.log('_showConsolidatedNotification');\n    // Group requests by player\n    const requestsByPlayer = {};\n    for (const { actor, owner } of successfulRequests) {\n      if (!requestsByPlayer[owner.id]) {\n        requestsByPlayer[owner.id] = {\n          player: owner,\n          actors: []\n        };\n      }\n      requestsByPlayer[owner.id].actors.push(actor);\n    }\n    \n    // Get roll type name for display\n    // Find the option key that matches this rollMethodName\n    let rollOptionKey = null;\n    for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n      if (option.name === rollMethodName) {\n        rollOptionKey = key;\n        break;\n      }\n    }\n    \n    const rollTypeKey = rollMethodName;\n    let rollTypeName = game.i18n.localize(`FLASH_ROLLS.rollTypes.${rollTypeKey}`) || rollTypeKey;\n    \n    // Add specific roll details if applicable\n    if (rollKey) {\n      const normalizedRollTypeKey = rollTypeKey.toLowerCase();\n      if (normalizedRollTypeKey === ROLL_TYPES.SKILL) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.SAVING_THROW) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.ABILITY_CHECK) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.TOOL) {\n        // Try to get tool name from enrichmentLookup\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          rollTypeName = `${rollTypeName} (${toolItem?.name || rollKey})`;\n        } else {\n          rollTypeName = `${rollTypeName} (${rollKey})`;\n        }\n      } else if (normalizedRollTypeKey === ROLL_TYPES.CUSTOM) {\n        rollTypeName = `${rollTypeName}: ${rollKey}`;\n      }\n    }\n    \n    // Use NotificationManager for consolidated roll request notifications\n    NotificationManager.notifyRollRequestsSent(requestsByPlayer, rollTypeName);\n  }\n  \n  /**\n   * Handle rolling for NPC actors locally\n   * @param {Actor[]} actors \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {BasicRollProcessConfiguration} rollProcessConfig - Process configuration from GM dialog\n   */\n  async _handleGMRolls(actors, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_handleGMRolls', [actors, requestType, rollKey, rollProcessConfig]);\n    \n    for (const actor of actors) {\n      await this._initiateRoll(actor, requestType, rollKey, rollProcessConfig);\n      await delay(100);\n    }\n  }\n\n  /**\n   * Handle GM rolls with token information preserved\n   * @param {Array} actorEntries - Array of actor entries with unique IDs\n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} rollProcessConfig \n   */\n  async _handleGMRollsWithTokens(actorEntries, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_handleGMRollsWithTokens', [actorEntries.length, requestType, rollKey, rollProcessConfig]);\n    \n    for (const entry of actorEntries) {\n      // Set the token context for the roll if we have a token ID\n      if (entry.tokenId) {\n        const token = canvas.tokens?.get(entry.tokenId) || game.scenes.active?.tokens.get(entry.tokenId);\n        if (token) {\n          // Set the token as the controlled token for this roll\n          LogUtil.log('_handleGMRollsWithTokens - Rolling for token', [entry.actor, entry.tokenId]);\n          await this._initiateRollForToken(entry.actor, token, requestType, rollKey, rollProcessConfig);\n        } else {\n          LogUtil.log('_handleGMRollsWithTokens - Token not found, rolling for actor', [entry.actor, entry.tokenId]);\n          await this._initiateRoll(entry.actor, requestType, rollKey, rollProcessConfig);\n        }\n      } else {\n        LogUtil.log('_handleGMRollsWithTokens - No token, rolling for actor', [entry.actor]);\n        await this._initiateRoll(entry.actor, requestType, rollKey, rollProcessConfig);\n      }\n      // await delay(100);\n    }\n  }\n  \n  /**\n   * Execute local roll for a GM actor with token context\n   * @param {Actor} actor \n   * @param {Token} token \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {BasicRollProcessConfiguration} rollProcessConfig - Process configuration from GM dialog\n   */\n  async _initiateRollForToken(actor, token, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_initiateRollForToken', [actor.name, token.name, requestType, rollKey, rollProcessConfig]);\n    \n    const wasControlled = token.controlled;\n    if (!wasControlled) {\n      token.control({ releaseOthers: false });\n    }\n    \n    try {\n      await this._initiateRoll(actor, requestType, rollKey, rollProcessConfig);\n    } finally {\n      // Restore original control state\n      if (!wasControlled) {\n        token.release();\n      }\n    }\n  }\n\n  /**\n   * Execute local roll for a GM actor\n   * @param {Actor} actor \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {BasicRollProcessConfiguration} rollProcessConfig - Process configuration from GM dialog\n   */\n  async _initiateRoll(actor, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_initiateRoll', [actor.name, requestType, rollKey, rollProcessConfig]);\n    try {\n      const normalizedType = requestType.toLowerCase();\n      let actualRollKey = rollKey;\n      if (normalizedType === ROLL_TYPES.HIT_DIE) {\n        const hdData = actor.system.attributes.hd;\n        if (hdData) {\n          const denominations = ['d6', 'd8', 'd10', 'd12', 'd20'];\n          for (const denom of denominations) {\n            const available = hdData[denom]?.value || 0;\n            if (available > 0) {\n              actualRollKey = denom;\n              break;\n            }\n          }\n        }\n        if (!actualRollKey) {\n          LogUtil.log('_initiateRoll - No hit dice available', [actor.name]);\n          \n          const dialogResult = await foundry.applications.api.DialogV2.confirm({\n            window: {\n              title: game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.hitDie.refillTitle\") || \"No Hit Dice Available\",\n              classes: [\"flash5e-hit-die-dialog\"]\n            },\n            position: {\n              width: 420\n            },\n            content: `<p>${game.i18n.format(\"FLASH_ROLLS.ui.dialogs.hitDie.refillMessageLocal\", { \n              actors: actor.name \n            }) || \"\"}</p>`,\n            modal: true,\n            rejectClose: false,\n            yes: {\n              label: game.i18n.localize(\"FLASH_ROLLS.ui.dialogs.hitDie.refillAndRoll\") || \"Refill & Roll\",\n              icon: \"\"\n            },\n            no: {\n              label: game.i18n.localize(\"Cancel\") || \"Cancel\",\n              icon: \"\"\n            }\n          });\n          \n          if (dialogResult) {\n            const result = await RollHandlers.handleHitDieRecovery(actor);\n            LogUtil.log('Hit die recovery result', [result]);\n            \n            NotificationManager.notify('info', game.i18n.format(\"FLASH_ROLLS.ui.dialogs.hitDie.refilled\", { \n              actor: actor.name \n            }));\n            \n            const hdDataAfterRefill = actor.system.attributes.hd;\n            actualRollKey = hdDataAfterRefill.largestAvailable;\n            \n            if (!actualRollKey) {\n              NotificationManager.notify('warn', game.i18n.format(\"DND5E.HitDiceWarn\", { name: actor.name }));\n              return;\n            }\n          } else {\n            return;\n          }\n        }\n      }\n      \n      const situational = rollProcessConfig.rolls?.[0]?.data?.situational || \"\";\n      const requestData = {\n        rollKey: actualRollKey,\n        groupRollId: rollProcessConfig.groupRollId,\n        config: {\n          ...rollProcessConfig,\n          situational: situational,\n          rollMode: rollProcessConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n          advantage: rollProcessConfig.advantage || false,\n          disadvantage: rollProcessConfig.disadvantage || false,\n          target: rollProcessConfig.target\n        }\n      };\n      \n      const dialogConfig = {\n        configure: !rollProcessConfig.fastForward && !rollProcessConfig.skipRollDialog,\n        isRollRequest: true\n      };\n      \n      const messageConfig = {\n        rollMode: rollProcessConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        create: rollProcessConfig.chatMessage !== false,\n        isRollRequest: true  // Mark this as a roll request to prevent re-interception\n      };\n      \n      const rollConfig = rollProcessConfig.rolls?.[0] || {};\n      \n      const handler = RollHandlers[normalizedType];\n      if (handler) {\n        await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        NotificationManager.notify('warn', `Unknown roll type: ${requestType}`);\n      }\n    } catch (error) {\n      LogUtil.error('executeActorRoll', [error]);\n      NotificationManager.notify('error', game.i18n.format(\"FLASH_ROLLS.notifications.rollError\", { \n        actor: actor.name \n      }));\n    }\n  }\n\n  /**\n   * Clean up when closing\n   */\n  async _onClose(options) {\n    LogUtil.log('_onClose',[options]);\n\n    if(!this.element) { return; }\n    \n    if (this.isCustomPosition && this.element.parentElement === document.body) {\n      const chatNotifications = document.querySelector('#chat-notifications');\n      if (chatNotifications) {\n        chatNotifications.insertBefore(this.element, chatNotifications.firstChild);\n      }\n      this.element.style.position = '';\n      this.element.style.inset = '';\n      this.element.style.top = '';\n      this.element.style.left = '';\n      this.element.style.right = '';\n      this.element.style.bottom = '';\n      this.element.classList.remove('custom-position');\n    }\n    \n    await super._onClose(options);\n    \n    this.selectedActors.clear();\n    this.selectedRequestType = null;\n    document.removeEventListener('click', this._onClickOutside, true);\n    \n    if (this._tokenControlHook) {\n      Hooks.off(HOOKS_CORE.CONTROL_TOKEN, this._tokenControlHook);\n      this._tokenControlHook = null;\n    }\n    \n    if (this._updateItemHook) {\n      Hooks.off(HOOKS_CORE.UPDATE_ITEM, this._updateItemHook);\n      this._updateItemHook = null;\n    }\n    \n    if (this._createItemHook) {\n      Hooks.off(HOOKS_CORE.CREATE_ITEM, this._createItemHook);\n      this._createItemHook = null;\n    }\n    \n    if (this._deleteItemHook) {\n      Hooks.off(HOOKS_CORE.DELETE_ITEM, this._deleteItemHook);\n      this._deleteItemHook = null;\n    }\n    \n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n      this._tokenUpdateTimeout = null;\n    }\n    \n    if (this._actorUpdateTimeout) {\n      clearTimeout(this._actorUpdateTimeout);\n      this._actorUpdateTimeout = null;\n    }\n    \n    if (this._itemUpdateTimeout) {\n      clearTimeout(this._itemUpdateTimeout);\n      this._itemUpdateTimeout = null;\n    }\n    \n    if (RollRequestsMenu.#instance === this) {\n      RollRequestsMenu.#instance = null;\n    }\n  }\n\n  /**\n   * Override render positioning to use CSS instead of inline styles\n   */\n  setPosition(position={}) {\n    LogUtil.log('setPosition');\n    // Don't set any inline position styles - let CSS handle it\n    return this;\n  }\n  \n  /**\n   * Show custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  async _showCustomRollDialog() {\n    LogUtil.log('_showCustomRollDialog');\n    return CustomRollDialog.prompt({\n      formula: \"\",\n      readonly: false\n    });\n  }\n\n  /**\n   * Toggle the roll requests menu open/closed\n   * @static\n   */\n  static toggle() {\n    LogUtil.log('RollRequestsMenu.toggle');\n    \n    // Clean up orphaned menu, if present\n    const existingMenus = document.querySelectorAll('#flash-rolls-menu');\n    existingMenus.forEach(menu => {\n      LogUtil.log('Removing orphaned menu element');\n      menu.remove();\n    });\n    \n    if (!this.#instance) {\n      this.#instance = new RollRequestsMenu();\n      this.#instance.render(true);\n    } else {\n      if (this.#instance.rendered) {\n        this.#instance.close();\n      } else {\n        this.#instance._initializeFromSelectedTokens();\n        this.#instance.render(true);\n      }\n    }\n  }\n\n  /**\n   * Refresh the menu if it's currently open\n   * @static\n   */\n  static refreshIfOpen() {\n    if (this.#instance && this.#instance.rendered) {\n      LogUtil.log('RollRequestsMenu.refreshIfOpen - refreshing menu');\n      this.#instance.render();\n    }\n  }\n\n  /**\n   * Show the menu automatically if setting is enabled\n   * Called during module initialization\n   * @static\n   */\n  static showOnLoadIfEnabled() {\n    LogUtil.log('RollRequestsMenu.showOnLoadIfEnabled');\n    const SETTINGS = getSettings();\n    const showOnLoad = SettingsUtil.get(SETTINGS.showMenuOnLoad.tag);\n    \n    if (showOnLoad && game.user.isGM) {\n      const existingMenus = document.querySelectorAll('#flash-rolls-menu');\n      existingMenus.forEach(menu => {\n        LogUtil.log('Removing orphaned menu element');\n        menu.remove();\n      });\n      \n      if (!this.#instance) {\n        this.#instance = new RollRequestsMenu();\n        this.#instance.render(true);\n        this.#instance.isLocked = true;\n      } else if (!this.#instance.rendered) {\n        this.#instance._initializeFromSelectedTokens();\n        this.#instance.render(true);\n        this.#instance.isLocked = true;\n      }\n    }\n  }\n}\n","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing sidebar controls\n */\nexport class SidebarUtil {\n  /**\n   * Add the roll request bolt icon to sidebar\n   * @param {SidebarTab} app - The sidebar tab application\n   * @param {jQuery} html - The rendered HTML\n   */\n  static addSidebarControls(app, html) {\n    LogUtil.log(\"addSidebarControls\",[app, html]);\n    if (!game.user.isGM || !app || app.id !== \"sidebar\") return;\n    \n    // Find the chat controls container\n    const chatControls = document.querySelector(\"#roll-privacy\");\n    LogUtil.log(\"addSidebarControls\",[chatControls]);\n\n    if (!chatControls || chatControls.querySelector('.flash-rolls-icon')) {\n      return;\n    }\n    \n    // Get current settings to determine initial state\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Create the roll request icon\n    const rollRequestIcon = document.createElement('button');\n    rollRequestIcon.id = \"flash-rolls-icon\"; \n    rollRequestIcon.setAttribute(\"data-tooltip-direction\", \"RIGHT\");\n    rollRequestIcon.className = `ui-control icon chat-control-icon flash-rolls-icon${rollRequestsEnabled ? ' active' : ''}`;\n    rollRequestIcon.title = game.i18n.localize('FLASH_ROLLS.ui.menus.rollRequestsTitle');\n    rollRequestIcon.innerHTML = `<i class=\"fas fa-bolt${rollRequestsEnabled ? '' : '-slash'}\"></i>`;\n    \n    // Insert before the d20 dice icon\n    const firstChatControlIcon = chatControls.firstChild;\n    if (firstChatControlIcon) {\n      firstChatControlIcon.parentNode.insertBefore(rollRequestIcon, firstChatControlIcon);\n    } else {\n      chatControls.insertBefore(rollRequestIcon, chatControls.firstChild);\n    }\n\n    LogUtil.log(\"addSidebarControls\",[firstChatControlIcon, rollRequestIcon]);\n    \n    rollRequestIcon.addEventListener(\"click\", (event) => {\n      event.stopPropagation();\n      event.preventDefault();\n      RollRequestsMenu.toggle();\n    });\n  }\n  \n  /**\n   * Update the roll requests icon based on enabled state\n   * @param {boolean} enabled - Whether roll requests are enabled\n   */\n  static updateRollRequestsIcon(enabled) {\n    const icon = document.querySelector('#flash-rolls-icon i');\n    if (icon) {\n      icon.className = `fas fa-bolt${enabled ? '' : '-slash'}`;\n    }\n  }\n}","import { HOOKS_CORE, HOOKS_DND5E, HOOKS_MIDI_QOL } from \"../constants/Hooks.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { RollInterceptor } from \"./RollInterceptor.mjs\";\nimport { updateSidebarClass, isSidebarExpanded } from \"./helpers/Helpers.mjs\";\nimport { SidebarUtil } from \"./SidebarUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { ACTIVITY_TYPES, MODULE_ID } from \"../constants/General.mjs\";\nimport { GeneralUtil } from \"./helpers/GeneralUtil.mjs\";\nimport { ModuleHelpers } from \"./helpers/ModuleHelpers.mjs\";\nimport { ChatMessageUtils } from \"./ChatMessageUtils.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\nimport { FavoriteActorsUtil } from \"./FavoriteActorsUtil.mjs\";\n\n/**\n * Utility class for managing all module hooks in one place\n */\nexport class HooksUtil {\n  static registeredHooks = new Map();\n  static midiTimeout = null;\n  static throttleTimers = {};\n  \n  /**\n   * Initialize main module hooks\n   */\n  static initialize() {\n    Hooks.once(HOOKS_CORE.INIT, this._onInit.bind(this));\n    Hooks.once(HOOKS_CORE.READY, this._onReady.bind(this));\n    \n    Hooks.once(HOOKS_CORE.GET_ACTOR_CONTEXT_OPTIONS, (html, contextOptions) => {\n      LogUtil.log(\"getActorContextOptions hook\", [html, contextOptions]);\n      \n      if (!game.user.isGM) return;\n      \n      contextOptions.push({\n        name: \"FLASH_ROLLS.contextMenu.toggleFavorite\",\n        icon: '<i class=\"fas fa-bolt\"></i>',\n        callback: li => {\n          LogUtil.log(\"Context menu callback li:\", [li]);\n          const data = li.dataset;\n          const actorId = data.entryId;\n          LogUtil.log(\"Actor ID from context menu:\", [actorId]);\n          if (actorId) {\n            FavoriteActorsUtil.toggleFavorite(actorId);\n          }\n        },\n        condition: li => game.user.isGM\n      });\n    });\n  }\n  \n  /**\n   * Triggered when Foundry initializes\n   */\n  static _onInit() {\n    const SETTINGS = getSettings();\n    document.body.classList.add(\"flash5e\");\n    SettingsUtil.registerSettings();\n    DiceConfigUtil.initialize();\n    \n    this._registerHooks();\n  }\n  \n  /**\n   * Triggered when Foundry is ready (fully loaded)\n   */\n  static _onReady() {\n\n    SettingsUtil.registerSettingsMenu();\n    SidebarUtil.addSidebarControls(ui.sidebar, ui.sidebar?.element);\n    if(ModuleHelpers.isModuleActive(\"midi-qol\")){\n      LogUtil.log(\"HooksUtil.initialize\", [\"midi-qol is active. Awaiting for it to be ready...\"]);\n      Hooks.once(HOOKS_MIDI_QOL.READY, this._initModule.bind(this));\n    }else{\n      LogUtil.log(\"HooksUtil.initialize\", [\"midi-qol is NOT active. Starting...\"]);\n      this._initModule();\n    }\n  }\n\n  static async _initModule() {\n    const SETTINGS = getSettings();\n    const isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n    if (isDebugOn) {\n      CONFIG.debug.hooks = true;\n    }\n    \n    await ChatMessageUtils.initialize();\n\n    if (game.user.isGM) {\n      RollInterceptor.initialize();\n      this._registerGMHooks();\n      RollRequestsMenu.showOnLoadIfEnabled();\n    }else{\n      DiceConfigUtil.getDiceConfig();\n      this._registerPlayerHooks();\n    }\n    updateSidebarClass(isSidebarExpanded());\n  }\n  \n  /**\n   * Register D&D5e specific hooks\n   */\n  static _registerHooks() {\n    this._registerHook(HOOKS_CORE.RENDER_SIDEBAR, this._onRenderSidebar.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessage.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessageFlavor.bind(this));\n    this._registerHook(HOOKS_CORE.RENDER_CHAT_MESSAGE, this._onRenderChatMessageHTML.bind(this));\n    this._registerHook(HOOKS_CORE.CHANGE_SIDEBAR_TAB, this._onSidebarUpdate.bind(this));\n    this._registerHook(HOOKS_CORE.COLLAPSE_SIDE_BAR, this._onSidebarUpdate.bind(this));\n    this._registerHook(HOOKS_CORE.REFRESH_MEASURED_TEMPLATE, this.onRefreshTemplate.bind(this)); \n    this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderRollConfigDialog.bind(this));\n    this._registerHook(HOOKS_DND5E.RENDER_SKILL_TOOL_ROLL_DIALOG, this._onRenderSkillToolDialog.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_USE_ACTIVITY, this._onPreUseActivity.bind(this));\n    this._registerHook(HOOKS_DND5E.POST_USE_ACTIVITY, this._onPostUseActivity.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._onPreRollHitDieV2.bind(this));\n    this._registerHook(HOOKS_DND5E.POST_ROLL_CONFIG, this._onPostRollConfig.bind(this));\n  }\n  \n  /**\n   * Register GM-specific hooks\n   */\n  static _registerGMHooks() {\n    this._registerHook(HOOKS_CORE.USER_CONNECTED, this._onUserConnected.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessageGM.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_V2, this._onPreRoll.bind(this));\n    \n    // Token hooks for updating roll requests menu\n    this._registerHook(HOOKS_CORE.CREATE_TOKEN, this._onTokenChange.bind(this));\n    this._registerHook(HOOKS_CORE.DELETE_TOKEN, this._onTokenChange.bind(this));\n    \n    // Hooks for updating roll requests menu when data changes\n    this._registerHook(HOOKS_CORE.UPDATE_SETTING, this._onSettingUpdate.bind(this));\n    this._registerHook(HOOKS_CORE.UPDATE_SCENE, this._onSceneUpdate.bind(this));\n    this._registerHook(HOOKS_CORE.UPDATE_ACTOR, this._onActorUpdate.bind(this));\n\n    game.users.forEach(user => {\n      this._onUserConnected(user);\n    });\n  }\n\n  static _registerPlayerHooks() {\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG, this._onPreRollInitiativeDialog.bind(this));\n    // this._registerHook(HOOKS_DND5E.PRE_CONFIGURE_INITIATIVE, this._onPreConfigureInitiative.bind(this));\n    \n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._onPreRollAttackV2.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._onPreRollDamageV2.bind(this));\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, (config, dialog, message) => {\n      LogUtil.log(\"_onPreRollAbilityCheckV2\", [config, dialog, message]);\n      if (config.isRollRequest) {\n        dialog.configure = true;\n      }\n    });\n    \n    // this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderRollConfigDialog.bind(this));\n  }\n\n  static _onSidebarUpdate(tab) {\n    LogUtil.log(\"_onSidebarUpdate\", [tab]);\n    updateSidebarClass(isSidebarExpanded());\n  }\n  \n  /**\n   * Handle data after roll configuration\n   */\n  static _onPostRollConfig(rolls, config, dialog, message) {\n    if (config._showRequestedBy && rolls.length > 0) {\n      message.data = message.data || {};\n      message.data._showRequestedBy = true;\n      message.data._requestedBy = config._requestedBy;\n    }\n  }\n  \n  /**\n   * Handle data before creating chat message for requested rolls\n   */\n  static _onPreCreateChatMessage(chatMessage, data, options, userId) {\n    if (data._showRequestedBy && data.rolls?.length > 0) {\n      const requestedBy = data._requestedBy || 'GM';\n      const requestedText = game.i18n.format('FLASH_ROLLS.chat.requestedBy', { gm: requestedBy });\n      \n      const currentFlavor = data.flavor || '';\n      data.flavor = currentFlavor ? `${currentFlavor} ${requestedText}` : requestedText;\n    }\n    \n    if (data.flags?.[MODULE_ID]?.groupRollId) {\n      LogUtil.log('_onPreCreateChatMessage - Found groupRollId in data flags', [data]);\n    }\n    \n    if (data.rolls?.length > 0 || data.flags?.core?.initiativeRoll) {\n      const speaker = data.speaker;\n      const actorId = speaker?.actor;\n      \n      if (actorId) {\n        let actor = game.actors.get(actorId);\n        \n        if (!actor && speaker?.token) {\n          const token = canvas.tokens.get(speaker.token);\n          if (token?.actor) {\n            actor = token.actor;\n            LogUtil.log('_onPreCreateChatMessage - Using token actor from speaker', [actor.name, actor.id]);\n          }\n        }\n        \n        if (!actor) {\n          LogUtil.log('_onPreCreateChatMessage - No actor found', [actorId, speaker]);\n          return;\n        }\n        \n        if (game.user.isGM) {\n          const baseActorId = actor.isToken ? actor.actor?.id : actor.id;\n          const checkIds = [actorId, baseActorId].filter(id => id);\n          \n          for (const [groupRollId, pendingData] of ChatMessageUtils.pendingRolls.entries()) {\n            const actorEntries = pendingData.actorEntries || (pendingData.actors ? pendingData.actors.map(id => ({ actorId: id })) : []);\n            if (checkIds.some(id => actorEntries.some(entry => entry.actorId === id))) {\n              // This actor is part of a group roll, add the flag\n              data.flags = data.flags || {};\n              data.flags[MODULE_ID] = data.flags[MODULE_ID] || {};\n              data.flags[MODULE_ID].groupRollId = groupRollId;\n              LogUtil.log('_onPreCreateChatMessage - Added groupRollId flag (GM)', [groupRollId, actorId]);\n              break;\n            }\n          }\n        } else {\n          let storedGroupRollId = actor.getFlag(MODULE_ID, 'tempGroupRollId');\n          if (!storedGroupRollId && actor.isToken) {\n            const baseActor = game.actors.get(actor.actor?.id);\n            if (baseActor) {\n              storedGroupRollId = baseActor.getFlag(MODULE_ID, 'tempGroupRollId');\n              LogUtil.log('_onPreCreateChatMessage - Checking base actor for tempGroupRollId', [baseActor.id, storedGroupRollId]);\n            }\n          }\n          \n          if (storedGroupRollId) {\n            actor.unsetFlag(MODULE_ID, 'tempGroupRollId');\n            if (actor.isToken) {\n              const baseActor = game.actors.get(actor.actor?.id);\n              if (baseActor) {\n                baseActor.unsetFlag(MODULE_ID, 'tempGroupRollId');\n              }\n            }\n          }\n          \n          let storedInitConfig = actor.getFlag(MODULE_ID, 'tempInitiativeConfig');\n          \n          if (!storedInitConfig && actor.isToken) {\n            const baseActor = game.actors.get(actor.actor?.id);\n            if (baseActor) {\n              storedInitConfig = baseActor.getFlag(MODULE_ID, 'tempInitiativeConfig');\n              LogUtil.log('_onPreCreateChatMessage - Checking base actor for tempInitiativeConfig', [baseActor.id, storedInitConfig]);\n            }\n          }\n          \n          if (storedInitConfig?.groupRollId || storedGroupRollId) {\n            data.flags = data.flags || {};\n            data.flags[MODULE_ID] = data.flags[MODULE_ID] || {};\n            data.flags[MODULE_ID].groupRollId = storedGroupRollId || storedInitConfig.groupRollId;\n            LogUtil.log('_onPreCreateChatMessage - Added groupRollId flag from initiative config', [storedInitConfig.groupRollId, actorId]);\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Handle flavor data before creating chat message\n   */\n  static _onPreCreateChatMessageFlavor(message, data, options, userId) {\n    if (data.rolls?.length > 0 && data.rolls[0]) {\n      try {\n        const rollData = data.rolls[0];\n        if (rollData.options?._customFlavor) {\n          data.flavor = rollData.options._customFlavor;\n        }\n      } catch (error) {\n        LogUtil.error(\"_onPreCreateChatMessageFlavor\", [error]);\n      }\n    }\n  }\n  \n  /**\n   * Triggered whenever roll configuration dialog is rendered. \n   * Used to add custom situational bonus from data, since the default DnD5e dialog does not seem to handle that\n   */\n  static _onRenderRollConfigDialog(app, html, data) {\n    LogUtil.log(\"_onRenderRollConfigDialog #0\", [ app, data ]);\n    if (app._flashRollsApplied) return;\n    \n    // Check if this is an initiative roll\n    const isInitiativeRoll = app.config?.hookNames?.includes('initiativeDialog') || \n                           app.element?.id?.includes('initiative');\n    \n    if (isInitiativeRoll) {\n      const actor = app.config?.subject;\n      if (!actor) return;\n      \n      const storedConfig = actor.getFlag(MODULE_ID, 'tempInitiativeConfig');      \n      if (storedConfig) {\n        app._flashRollsApplied = true;\n\n        // Trigger change event after a short delay\n        const situationalInput = html.querySelector('input[name*=\"situational\"]');\n        setTimeout(() => {\n          situationalInput.dispatchEvent(new Event('change', {\n            bubbles: true,\n            cancelable: false\n          }));\n        }, 50);\n      }\n      \n      return;\n    }else{\n      const situationalInputs = html.querySelectorAll('input[name*=\"situational\"]');\n      \n      situationalInputs.forEach((input, index) => { \n        if (!input.value && app.config?.rolls?.[0]?.data?.situational) {\n          input.value = app.config.rolls[0].data.situational;\n        }\n        LogUtil.log(\"_onRenderRollConfigDialog #1\", [input.value, app.config.rolls[0]]);\n        \n        if (input.value) {\n          app._flashRollsApplied = true;\n          \n          setTimeout(() => {\n            input.dispatchEvent(new Event('change', {\n              bubbles: true,\n              cancelable: false\n            }));\n\n            if (app.config?.rolls?.[0]?.data) {\n              delete app.config.rolls[0].data.situational;\n            }\n          }, 50);\n        }\n      });\n    }\n    \n  }\n  \n  /**\n   * Intercept group roll message creation (GM only) - currently unused\n   */\n  static _onPreCreateChatMessageGM(message, data, options, userId) {\n    // LogUtil.log(\"_onPreCreateChatMessageGM\", [message, data, options, userId]);\n  }\n  \n  /**\n   * Intercept rendered chat messages to handle group rolls\n   */\n  static _onRenderChatMessageHTML(message, html, context) {\n    // LogUtil.log(\"_onRenderChatMessageHTML\", [message, html, context]);\n    ChatMessageUtils.interceptRollMessage(message, html, context);\n    \n    this._addSelectTargetsButton(message, html);\n  }\n  \n  /**\n   * Add \"Select Targeted\" button to damage roll messages with saves\n   * @param {ChatMessage} message - The chat message\n   * @param {jQuery} html - The rendered HTML\n   */\n  static _addSelectTargetsButton(message, html) {\n    LogUtil.log(\"_addSelectTargetsButton #0\", [message, html, html.querySelector('.message-content')]);\n    // const content = html.querySelector('.message-content');\n    if (message.flags?.dnd5e?.roll?.type !== 'damage' || html.querySelector('.select-targeted')) return;\n    \n    const button = document.createElement('button');\n    button.className = 'select-targeted';\n    button.type = 'button';\n    button.setAttribute(\"data-tooltip-direction\", \"LEFT\");\n    button.setAttribute(\"data-tooltip\", \"Select Targeted\");\n    button.innerHTML = '<i class=\"fas fa-crosshairs\"></i>';\n    \n    button.addEventListener('click', (event) => {\n      event.preventDefault();\n      this._selectTargetedTokens(event);\n    });\n    \n    html.querySelector('.message-content').appendChild(button);\n    message.update({\n      content: html\n    });\n  }\n  \n  /**\n   * Select all currently targeted tokens as damage targets\n   * @param {ChatMessage} message - The chat message\n   */\n  static _selectTargetedTokens(event) {\n    const message = event.currentTarget.closest('.chat-message');\n    const targets = message.querySelectorAll(\"[data-target-uuid]\");\n    \n    if (targets.length === 0) {\n      ui.notifications.warn(game.i18n.localize(\"FLASH_ROLLS.notifications.noTargetedTokens\"));\n      return;\n    }\n\n    LogUtil.log(\"_selectTargetedTokens\", [message, targets, canvas.tokens.placeables, game.scenes.active]);\n    for ( let i=0; i < targets.length; i++ ) {\n      const target = targets[i];\n      const actorId = target.dataset.targetUuid.split('Actor.')[1];\n      const token = canvas.tokens.placeables.find(t => {\n        return t.document.actorId === actorId;\n      });\n      token?.control({ releaseOthers: i===0 });\n    }\n  }\n  \n  /**\n   * Request dice configuration from the connected user\n   */\n  static _onUserConnected(user) {\n    if (user.active && user.id !== game.user.id) {\n      DiceConfigUtil.requestDiceConfigFromUser(user.id);\n    }\n  }\n\n  /**\n   * Handle token create/delete events to refresh roll requests menu\n   * @param {Token} token - The token document\n   * @param {Object} options - Creation/deletion options  \n   * @param {string} userId - The user ID who performed the action\n   */\n  static _onTokenChange(token, options, userId) {\n    if (this._tokenChangeTimeout) {\n      clearTimeout(this._tokenChangeTimeout);\n    }\n    \n    this._tokenChangeTimeout = setTimeout(() => {\n      LogUtil.log('HooksUtil._onTokenChange - Re-rendering roll requests menu due to token create/delete');\n      RollRequestsMenu.refreshIfOpen();\n      this._tokenChangeTimeout = null;\n    }, 200);\n  }\n\n  static _onSettingUpdate(setting, value, options, userId) {\n    const SETTINGS = getSettings();\n    const MODULE = { ID: 'flash-rolls-5e' };\n    \n    if (setting.key === `${MODULE.ID}.${SETTINGS.showOnlyPCsWithToken.tag}` ||\n        setting.key === `${MODULE.ID}.${SETTINGS.favoriteActorsList.tag}`) {\n      \n      LogUtil.log('HooksUtil._onSettingUpdate - Re-rendering roll requests menu due to setting change', [setting.key]);\n      RollRequestsMenu.refreshIfOpen();\n    }\n  }\n\n  static _onSceneUpdate(scene, changes, options, userId) {\n    if (changes.active === true) {\n      LogUtil.log('HooksUtil._onSceneUpdate - Re-rendering roll requests menu due to active scene change');\n      RollRequestsMenu.refreshIfOpen();\n    }\n  }\n\n  static _onActorUpdate(actor, changes, options, userId) {\n    const ownershipChanged = changes['==ownership'] !== undefined;\n    const statsChanged = changes.system?.attributes?.hp || \n                        changes.system?.attributes?.ac || \n                        changes.system?.attributes?.spell?.dc ||\n                        changes.system?.skills?.prc ||\n                        changes.system?.abilities ||\n                        changes.system?.attributes?.prof;\n\n    if (!statsChanged && !ownershipChanged) return;\n    if (this._actorUpdateTimeout) {\n      clearTimeout(this._actorUpdateTimeout);\n    }\n    this._actorUpdateTimeout = setTimeout(() => {\n      RollRequestsMenu.refreshIfOpen();\n      this._actorUpdateTimeout = null;\n    }, 100);\n  }\n\n  /**\n   * Handle render ApplicationV2\n   */\n  static _onRenderApplicationV2(app, html, options) {\n    LogUtil.log(\"_onRenderApplicationV2\", [app, html, options]);\n  }\n  \n  /**\n   * Handle render Sidebar\n   */\n  static _onRenderSidebar(app, html, options) {\n    LogUtil.log(\"_onRenderSidebar\", [app, html]);\n    if(game.ready){\n      SidebarUtil.addSidebarControls(app, html);\n    }\n  }\n  \n  /**\n   * Register a hook and track it\n   * @param {string} hookName - The hook name\n   * @param {Function} handler - The handler function\n   * @private\n   */\n  static _registerHook(hookName, handler) {\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.set(`${hookName}_${hookId}`, hookId);\n    return hookId;\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterAll() {\n    this.registeredHooks.forEach((hookId, key) => {\n      const hookName = key.split('_')[0];\n      Hooks.off(hookName, hookId);\n    });\n    this.registeredHooks.clear();\n  }\n  \n  /**\n   * Check if a hook is registered\n   * @param {string} hookName - The hook name to check\n   * @returns {boolean}\n   */\n  static isRegistered(hookName) {\n    for (const key of this.registeredHooks.keys()) {\n      if (key.startsWith(`${hookName}_`)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Triggered before a roll is made\n   * @param {*} config \n   * @param {*} dialogOptions \n   * @param {*} messageOptions \n   */\n  static _onPreRoll(config, dialogOptions, messageOptions, d) {\n    LogUtil.log(\"_onPreRoll #0\", [config, dialogOptions, messageOptions, d]);\n    \n  }\n  \n  /**\n   * Actor5e.rollHitDie concatenates our roll data with its own roll data, creating two rolls.\n   * We fix this behavior here so situational bonus is added correctly without duplicating rolls\n   */\n  static _onPreRollHitDieV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollHitDieV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    if (config.rolls && config.rolls.length > 1) {\n      const allSituationalBonuses = [];\n      \n      for(let i = 0; i < config.rolls.length; i++){\n        const roll = config.rolls[i];\n        if (roll && roll.data && roll.data.situational) {\n          allSituationalBonuses.push(roll.data.situational);\n        }\n      }\n      \n      if (allSituationalBonuses.length > 0) {\n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        \n        const uniqueBonuses = [...new Set(allSituationalBonuses)];\n        \n        config.rolls[0].data.situational = uniqueBonuses.map(bonus => {\n          const trimmedBonus = bonus.toString().trim();\n          if (trimmedBonus.startsWith('-')) {\n            return `(${trimmedBonus})`;\n          } else if (trimmedBonus.startsWith('+')) {\n            return `${trimmedBonus.substring(1)}`;\n          } else {\n            return `${trimmedBonus}`;\n          }\n        }).join(' + ');\n        \n        if(game.user.isGM && !config.rolls[0].parts.find(p => p.includes(\"@situational\"))){\n          config.rolls[0].parts.push(\"@situational\");\n        }\n      }\n      \n      config.rolls = config.rolls.slice(0, 1);\n      LogUtil.log(\"Cleaned up hit die rolls\", config.rolls);\n    }\n  }\n  \n  /**\n   * Handle pre-roll initiative dialog hook to add situational bonus\n   */\n  static _onPreRollInitiativeDialog(config, dialogOptions, messageOptions) {\n    const actor = config.subject;\n    const storedConfig = actor.getFlag(MODULE_ID, 'tempInitiativeConfig');\n\n    LogUtil.log(\"_onPreRollInitiativeDialog triggered\", [config, storedConfig, dialogOptions, messageOptions]);\n    config.advantage = storedConfig?.advantage || config.advantage || false;\n    config.disadvantage = storedConfig?.disadvantage || config.disadvantage || false;\n    \n    config.rollMode = storedConfig?.rollMode || config.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n    messageOptions.rollMode = storedConfig?.rollMode || messageOptions.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n    \n    if (storedConfig.rolls?.[0]?.data?.situational && config.rolls?.[0]?.data) {\n      config.rolls[0].data.situational = storedConfig.rolls[0].data.situational;\n    }\n\n    // // Apply the situational bonus from stored rolls\n    // if (storedConfig.rolls?.[0]?.data?.situational) {\n    //   const situationalInputs = html.querySelectorAll('input[name*=\"situational\"]');\n    //   situationalInputs.forEach(input => {\n    //     if (!input.value) {\n    //       input.value = storedConfig.rolls[0].data.situational;\n    //     }\n    //   });\n    // }\n    \n    // if (actor && actor._initiativeSituationalBonus) {\n    //   if (!config.rolls || config.rolls.length === 0) {\n    //     const initiativeConfig = actor.getInitiativeRollConfig({});\n    //     config.rolls = initiativeConfig.rolls || [];\n    //   }\n      \n    //   // Add situational bonus\n    //   if (config.rolls.length > 0) {\n    //     if (!config.rolls[0].data) {\n    //       config.rolls[0].data = {};\n    //     }\n    //     config.rolls[0].data.situational = actor._initiativeSituationalBonus;\n        \n    //     LogUtil.log(\"Added situational bonus to initiative dialog\", [{\n    //       bonus: actor._initiativeSituationalBonus,\n    //       rolls: config.rolls\n    //     }]);\n        \n    //     // Clean up the temporary storage\n    //     delete actor._initiativeSituationalBonus;\n    //   }\n    // }\n  \n  }\n  \n  /**\n   * Handle pre-roll attack hook to restore GM-configured options\n   */\n  static _onPreRollAttackV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollAttackV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    const stored = config.subject?.item?.getFlag(MODULE_ID, 'tempAttackConfig');\n    if (stored) {\n      LogUtil.log(\"_onPreRollAttackV2 - Found stored request config from flag\", [stored]);\n      \n      if(stored.isRollRequest === false || stored.skipRollDialog === true || stored.sendRequest === false) {\n        LogUtil.log(\"_onPreRollAttackV2 - Not a roll request, skipping\", [stored]);\n        return;\n      }\n\n      // Merge attack options\n      if (stored.attackMode) config.attackMode = stored.attackMode;\n      if (stored.ammunition) config.ammunition = stored.ammunition;\n      if (stored.mastery !== undefined) config.mastery = stored.mastery;\n      config.advantage = stored.advantage || false;\n      config.disadvantage = stored.disadvantage || false;\n      messageOptions.rollMode = stored.rollMode || messageOptions.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n      \n      // Set situational bonus\n      if (stored.situational) {\n        if (!config.rolls || config.rolls.length === 0) {\n          config.rolls = [{\n            parts: [],\n            data: {},\n            options: {}\n          }];\n        }\n        \n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        config.rolls[0].data.situational = stored.situational;\n      }\n      LogUtil.log(\"_onPreRollAttackV2 - Applied stored configuration to attack roll\", [config, messageOptions]);\n    }\n  }\n\n  /**\n   * Handle pre-roll damage hook to restore GM-configured options\n   */\n  static _onPreRollDamageV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollDamageV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    const stored = config.subject?.item?.getFlag(MODULE_ID, 'tempDamageConfig');\n    if (stored) {\n      LogUtil.log(\"_onPreRollDamageV2 - Found stored request config from flag\", [stored, stored.situational]);\n      \n      if(stored.isRollRequest === false || stored.skipRollDialog === true || stored.sendRequest === false) {\n        LogUtil.log(\"_onPreRollDamageV2 - Not a roll request, skipping\", [stored]);\n        return;\n      }\n\n      // Merge damage options\n      if (stored.critical) config.critical = stored.critical;\n      messageOptions.rollMode = stored.rollMode || messageOptions.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n      \n      // Set situational bonus\n      if (stored.situational) {\n        if (!config.rolls || config.rolls.length === 0) {\n          config.rolls = [{\n            parts: [],\n            data: {},\n            options: {}\n          }];\n        }\n        \n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        config.rolls[0].data.situational = stored.situational;\n      }\n      LogUtil.log(\"_onPreRollDamageV2 - Applied stored configuration to damage roll\", [config, messageOptions]);\n    }\n  }\n  \n  /**\n   * Handle pre-use activity hook to prevent usage messages when GM intercepts rolls\n   */\n  static _onPreUseActivity(activity, config, dialog, message) {\n    LogUtil.log(\"_onPreUseActivity triggered\", [activity, config, dialog, message]);\n    const SETTINGS = getSettings();\n    const requestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n\n    LogUtil.log(\"_onPreUseActivity - Settings\", [requestsEnabled, rollInterceptionEnabled]);\n    activity.item.unsetFlag(MODULE_ID, 'tempAttackConfig'); \n    activity.item.unsetFlag(MODULE_ID, 'tempDamageConfig'); \n    activity.item.unsetFlag(MODULE_ID, 'tempSaveConfig'); \n\n    if(GeneralUtil.isModuleOn(MODULE_ID, 'midi-qol')){\n      // message.create = false;\n    }\n    if (!game.user.isGM || !requestsEnabled || !rollInterceptionEnabled) return; \n    \n    // Check if the actor has player ownership\n    const actor = activity.actor;\n    if (!actor) return;\n\n    const consumptionConfigMode = SettingsUtil.get(SETTINGS.consumptionConfigMode.tag);\n\n    switch (consumptionConfigMode) {\n      case 1:\n        dialog.configure = false;\n        break;\n      case 2:\n        dialog.configure = game.user.isGM;\n        break;\n      case 3:\n        dialog.configure = !game.user.isGM;\n        break;\n      default:\n        dialog.configure = true;\n        break;\n    }\n    \n    // const hasPlayerOwner = Object.entries(actor.ownership).some(([userId, level]) => {\n    //   const user = game.users.get(userId);\n    //   return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n    // });\n\n    // if(activity.type === ACTIVITY_TYPES.SAVE){\n    //   config.create = { measuredTemplate: true };\n    //   config.hasConsumption = false;\n    //   config.consume = {\n    //     action: false,\n    //     resources: [],\n    //     spellSlot: false\n    //   };\n    // }\n\n    const actorOwner = GeneralUtil.getActorOwner(actor);\n    \n    if (actorOwner && actorOwner.active && !actorOwner.isGM) {\n      LogUtil.log(\"Preventing usage message for player-owned actor\", [actor.name]);\n      message.create = false;\n    }\n  }\n\n  static _onPostUseActivity(activity, config, dialog, message) {\n    if(game.user.isGM && activity.type === ACTIVITY_TYPES.SAVE){\n      LogUtil.log(\"_onPostUseActivity triggered\", [activity.damage]);\n      const SETTINGS = getSettings();\n      const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n      if(activity.damage && activity.damage.parts?.length > 0){\n        activity.rollDamage(config, {\n          ...dialog,\n          configure: !skipRollDialog\n        }, message)\n      }\n      \n    }\n  }\n  \n  /**\n   * Handle rendering of skill/tool configuration dialog to fix message flavor\n   */\n  static _onRenderSkillToolDialog(app, html, data) {\n    LogUtil.log(\"_onRenderSkillToolDialog triggered\", [app]);\n    if (app._abilityFlavorFixed) return;\n    \n    const abilitySelect = html.querySelector('select[name=\"ability\"]');\n    if (!abilitySelect) return;\n    \n    if (app.config?.isRollRequest && app.config?.ability) {\n      const selectedAbility = abilitySelect.value;\n      const configAbility = app.config.ability;\n\n      if (selectedAbility === configAbility) {\n        app._abilityFlavorFixed = true;\n        \n        // Force flavor to update\n        setTimeout(() => {\n          const changeEvent = new Event('change', {\n            bubbles: true,\n            cancelable: true\n          });\n          abilitySelect.dispatchEvent(changeEvent);\n        }, 50);\n      }\n    }\n  }\n\n  /**\n   * TEMPLATES\n   */\n  static onRefreshTemplate(template, options) {\n    if(!template.isOwner){ return; }\n    const throttleKey = `refresh-template-${template.id}`;\n    const SETTINGS = getSettings();\n    const targettingSetting = SettingsUtil.get(SETTINGS.templateAutoTarget.tag);\n    \n    if (HooksUtil.throttleTimers[throttleKey]) {\n      clearTimeout(HooksUtil.throttleTimers[throttleKey]);\n    }\n\n    HooksUtil.throttleTimers[throttleKey] = setTimeout(() => {\n      let maxDisposition = 3;\n\n      switch(targettingSetting){\n        case 1:\n          maxDisposition = 3; break;\n        case 2: \n          maxDisposition = 0; break;\n        default: \n          return;\n      }\n\n      game.user.targets.forEach(t => t.setTarget(false, { releaseOthers: false }));\n      \n      const tokensToTarget = [];\n      for(let token of canvas.tokens.placeables){\n        if(token.document.disposition <= maxDisposition && template.shape.contains(token.center.x-template.x,token.center.y-template.y)){\n          tokensToTarget.push(token);\n        }\n      }\n      \n      tokensToTarget.forEach((token, i) => {\n        token.setTarget(true, { \n          releaseOthers: i === 0,  // Only release others on first token\n          groupSelection: true \n        });\n      });\n      \n      if (tokensToTarget.length > 0) {\n        game.user.broadcastActivity({ targets: game.user.targets.ids });\n      }\n      \n      delete HooksUtil.throttleTimers[throttleKey];\n    }, 50);\n  }\n  \n}","import { MODULE_ID, ROLL_TYPES } from \"../constants/General.mjs\";\nimport { getRollTypeDisplay, applyTargetTokens, NotificationManager } from \"./helpers/Helpers.mjs\";\nimport { RollHandlers } from \"./RollHandlers.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { GeneralUtil } from \"./helpers/GeneralUtil.mjs\";\n\n/**\n * @typedef {Object} RollRequestData\n * @property {string} type - \"rollRequest\"\n * @property {string} requestId - Unique identifier for this request\n * @property {string} actorId - ID of the actor to roll for\n * @property {string} rollType - Type of roll (ability, save, skill, etc.) from ROLL_TYPES\n * @property {string} rollKey - Specific roll key (e.g., \"str\", \"acr\", \"perception\")\n * @property {string|null} activityId - Activity ID for item-based rolls\n * @property {BasicRollProcessConfiguration} rollProcessConfig - D&D5e roll process configuration\n * @property {boolean} skipRollDialog - Whether to skip the roll configuration dialog\n * @property {string[]} targetTokenIds - Array of targeted token IDs\n * @property {boolean} preserveTargets - Whether to apply GM's targets to the player\n */\n\n/**\n * Utility class for handling roll requests from GM to players\n */\nexport class RollRequestUtil {\n  /**\n   * Handle roll request from GM on player side\n   * @param {RollRequestData} requestData - The roll request data\n   */\n  static async handleRequest(requestData) {\n    const isMidiRequest = GeneralUtil.isModuleOn(MODULE_ID, 'midi-qol');\n    LogUtil.log('handleRequest', [requestData]);\n    if (game.user.isGM) return;\n    \n    const actor = game.actors.get(requestData.actorId);\n    if (!actor || !actor.isOwner) {\n      return;\n    }\n\n    if(isMidiRequest && requestData.rollProcessConfig.midiOptions){\n      requestData.rollProcessConfig.midiOptions = {\n        ...requestData.rollProcessConfig.midiOptions,\n        fastForward: false,\n        fastForwardAttack: false,\n        dialogOptions: {\n          ...requestData.rollProcessConfig.midiOptions.dialogOptions,\n          fastForward: false,\n          fastForwardAttack: false,\n          // fastForwardDamage: false\n        },\n        workflowOptions: {\n          ...requestData.rollProcessConfig.midiOptions.workflowOptions,\n          // autoRollAttack: false,\n          // autoRollDamage: \"none\",\n          fastForward: false,\n          fastForwardAttack: false,\n          // fastForwardDamage: false\n        }\n      };\n    }\n    \n    \n    if (requestData.preserveTargets && \n      requestData.targetTokenIds?.length > 0 && \n      game.user.targets.size === 0) {\n      applyTargetTokens(requestData.targetTokenIds);\n    }\n    \n    NotificationManager.notify('info', '', {\n      batch: true,\n      batchData: {\n        actor: actor.name,\n        rollType: requestData.rollType,\n        rollKey: requestData.rollKey,\n        gm: requestData.rollProcessConfig._requestedBy || 'GM'\n      }\n    });\n    \n    RollRequestUtil.executePlayerRollRequest(actor, requestData);\n  }\n  \n  /**\n   * Execute a roll request received by a player\n   * @param {Actor} actor - The actor performing the roll\n   * @param {RollRequestData} requestData - The roll request data from GM\n   */\n  static async executePlayerRollRequest(actor, requestData) {\n    const SETTINGS = getSettings();\n    const publicPlayerRolls = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag);\n\n    LogUtil.log('executePlayerRollRequest', [actor, requestData]);\n    \n    try {\n      const normalizedRollType = requestData.rollType?.toLowerCase();\n      const rollConfig = requestData.rollProcessConfig.rolls?.[0] || {\n        parts: [],\n        data: {},\n        options: {}\n      };\n      \n      const shouldSkipDialog = game.user.isGM ? requestData.skipRollDialog : false;\n      const dialogConfig = {\n        configure: !shouldSkipDialog\n      };\n      \n      // Determine the roll mode - respect what was sent from GM\n      const rollModeFromGM = requestData.rollProcessConfig.rollMode;\n      const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n      const finalRollMode = rollModeFromGM || defaultRollMode;\n      \n      const messageConfig = {\n        rollMode: finalRollMode,\n        create: requestData.rollProcessConfig.chatMessage !== false\n      };\n      \n      // Build requestData structure expected by handlers\n      const handlerRequestData = {\n        rollKey: requestData.rollKey,\n        activityId: requestData.activityId, // For attack/damage rolls\n        config: requestData.rollProcessConfig,\n        groupRollId: requestData.groupRollId // Pass through for group rolls\n      };\n\n      // Use the roll handler for the requested roll type\n      const handler = RollHandlers[normalizedRollType];\n      if (handler) {\n        await handler(actor, handlerRequestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        LogUtil.warn(`No handler found for roll type: ${normalizedRollType}`);\n        NotificationManager.notify('warn', game.i18n.format('FLASH_ROLLS.notifications.rollError', { \n          actor: actor.name || 'Unknown Actor'\n        }));\n      }\n    } catch (error) {\n      LogUtil.error('Error executing roll request:', [error]);\n      NotificationManager.notify('error', game.i18n.format('FLASH_ROLLS.notifications.rollError', { \n        actor: actor.name || 'Unknown Actor'\n      }));\n    }\n  }\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SOCKET_CALLS } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { HooksUtil } from \"./HooksUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { RollRequestUtil } from \"./RollRequestUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { HOOKS_CORE } from \"../constants/Hooks.mjs\";\n\n/**\n * @typedef {import(\"./RollRequestUtil.mjs\").RollRequestData} RollRequestData\n */\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    SocketUtil.initialize(Main.registerSocketCalls);\n    HooksUtil.initialize();\n  }\n\n  // Wrapper methods for socket calls to DiceConfigUtil\n  static getDiceConfig() {\n    return DiceConfigUtil.getDiceConfig();\n  }\n  \n  static receiveDiceConfig(userId, diceConfig) {\n    DiceConfigUtil.receiveDiceConfig(userId, diceConfig);\n  }\n\n  /**\n   * Handle roll request from GM on player side\n   * @param {RollRequestData} requestData - The roll request data\n   */\n  static async handleRollRequest(requestData) {\n    LogUtil.log('Main.handleRollRequest', requestData);\n    return RollRequestUtil.handleRequest(requestData);\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.handleRollRequest, Main.handleRollRequest);\n  }\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\nimport \"./styles/chat-messages.css\";\nimport \"./styles/flash-rolls-menu.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\n// Initialize the module\nMain.init();\n"],"names":["SETTING_INPUT","SETTING_SCOPE","getSettings","MODULE_ID","DEBUG_TAG","SOCKET_CALLS","ACTIVITY_TYPES","ROLL_TYPES","ROLL_REQUEST_OPTIONS","MODULE","HOOKS_CORE","HOOKS_SOCKET","HOOKS_MIDI_QOL","HOOKS_DND5E","_LogUtil","ref","data","bypassSettings","debugSetting","dataArray","strRef","options","_a","__publicField","LogUtil","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","name","func","value","callback","handler","parameters","userId","executionKey","resp","error","SocketUtil","DiceConfigUtil","clientSettings","diceConfig","_b","user","_GeneralUtil_static","parseCSS_fn","GeneralUtil","moduleName","module","parent","selector","element","delay","varName","varValue","bodyStyle","body","cssText","ruleStart","ruleEnd","declarations","decl","varsMap","parts","newRuleContent","newCss","offsetTop","elementHeight","foundryFonts","customFontsObj","customFonts","fontFamily","cssImportedFonts","f","a","b","content","id","checkForDuplicates","customStyle","importRegex","imports","contentWithoutImports","match","currentContent","existingImports","currentMatch","currentContentWithoutImports","newImports","imp","allImports","to","direction","duration","onComplete","animationId","isHorizontal","start","change","startTime","animateScroll","currentTime","elapsedTime","progress","easeProgress","newAnimationId","title","dialogConfig","templatePath","templatePaths","cssString","trimmedCSS","style","testCSS","isValid","cssRules","targetSelectors","parsedCSS","__privateMethod","mainStyle","processedRules","rulesByContent","rule","pseudoSelector","combinedSelectors","s","selectors","targetList","nestedSelector","targetSelector","actor","ownership","level","css","baseProperties","nestedRules","lines","currentNested","braceCount","i","line","openBraces","closeBraces","contentAfterBrace","__privateAdd","fontName","cleanName","FormDataExtended","ApplicationV2","HandlebarsApplicationMixin","_element","_activeTab","_requireReload","_ModuleSettingsMenu_static","onSubmit_fn","onReset_fn","getTabs_fn","_ModuleSettingsMenu","context","__privateSet","__privateGet","toggle","p","select","currentValue","option","restrictedTabs","tab","partId","_c","partContext","getSettingMenus","partKey","menuContext","menuKey","SETTINGS","fieldNames","fields","fieldValues","fieldDefaults","fieldName","SettingsUtil","entry","index","formData","confirmReload","activeTab","settings","currSetting","group","event","form","activeContent","defaults","inputField","tabList","key","ModuleSettingsMenu","isDebugOn","setting","settingObj","tabbedMenu","tabbedMenuData","tabbedMenuObj","settingName","selectedSetting","newValue","e","requestsIcon","GMRollConfigMixin","Base","config","message","abilityFromForm","dcFromForm","situational","idx","dcValue","formConfig","sendRequestCheckbox","dcInput","action","finalizedRolls","getRollTypeDisplay","rollType","rollKey","_d","_e","display","normalizedRollType","toolData","toolItem","showBatchedNotifications","pendingNotifications","getRollTypeDisplayFn","notificationsByType","notif","entries","messages","rollTypeDisplay","actorNames","getPlayerOwner","applyTargetTokens","tokenIds","t","isPlayerOwned","hasTokenInScene","currentScene","token","updateCanvasTokenSelection","actorId","selected","tokens","ms","resolve","isSidebarExpanded","updateSidebarClass","isExpanded","adjustMenuOffset","buildRollTypes","selectedRequestType","selectedActors","rollTypes","selectedOption","firstActorId","allTools","label","str","rollData","configData","_NotificationManager","type","requestsByPlayer","rollTypeName","successfulRequests","playerData","playerSummaries","playerId","NotificationManager","filterActorsForDeathSaves","actors","actorsNeedingDeathSaves","actorsSkippingDeathSaves","hp","deathSaves","successes","failures","categorizeActorsByOwnership","pcActors","npcActors","owner","rollPrivacyVertical","controlsWidth","isCrlngnUIOn","RollHelpers","requestData","rollConfig","additionalConfig","normalizedType","rollMode","DialogClass","messageConfig","dialogOptions","app","_f","firstRoll","advantage","disadvantage","target","rollProcessConfig","isPublicRollsOn","messageRollMode","playerOwner","rollResults","dc","halfThreshold","sum","acc","average","highestModifier","leaderActorId","leaderModifier","modifier","leaderResult","otherResults","adjustedResult","lowestModifier","weakestActorId","weakestModifierValue","weakestResult","successWord","_g","tool","resultMode","calculationResult","GMRollConfigDialog","dialog","configSection","templateData","template","wrapper","button","_h","_i","showDC","rollClass","defaultAbility","finalTitle","selectedAbilityLabel","skillLabel","toolLabel","_j","_k","_l","_m","skill","abilityLabel","saveAbility","checkAbility","toolDefaultAbility","toolAbilityLabel","GMHitDieConfigDialog","GMSkillToolConfigDialog","skillConfig","GMDamageConfigDialog","buttonGroup","originalConfig","originalDialog","position","finalRollMode","GMAttackConfigDialog","_ModuleHelpers","moduleId","previousSettings","ModuleHelpers","ActivityUtil","item","activities","attackActivities","damageAttackActivities","damageActivities","saveActivities","itemSaveActivities","activityType","itemId","activityId","isMidiActive","activity","damageConfig","rollRequestConfig","MidiQOL","workflow","damageRoll","formulas","part","defaultConfig","defaultOptions","CustomRollDialog","htmlElement","formulaInput","validationMessage","messageElement","die","currentFormula","diceRegex","diceMap","remainingFormula","count","dieType","newDieType","diceParts","formula","ChatMessageUtils","attachGroupRollListeners","html","actorResult","diceBtn","dataset","groupRollId","RollHandlers","rollMethod","dcControl","showToPlayers","groupFooterDetails","debounceTimer","handleDCChange","newDC","messageId","targetMessage","actorEntries","validEntries","flavor","results","supportsDC","showDCToPlayers","saveLabel","skillAbility","skillAbilityLabel","messageData","msg","uniqueId","pendingData","m","flagData","resultIndex","groupResult","newContent","tokenId","groupMessage","msgId","requestId","groupRollsMsgEnabled","fiveMinutesAgo","toolConfig","tokenActor","initiativeConfig","tempConfig","rollOptions","processConfig","activityConfig","confirmedFormula","updateResult","itemUpdateResult","ensureCombatForInitiative","filterActorsForInitiative","actorIds","game","actorsNamesWithInitiative","actorIdsWithInitiative","c","combatants","filteredIds","RollInterceptor","hookName","hookId","hookNames","isInitiativeRoll","moduleFlags","d","skipRollDialog","rollRequestsEnabled","finalConfig","dialogResult","_n","handlerMap","cleanConfig","RollMenuActorUtil","system","stats","spellDC","selectedActorIds","currentTab","isPC","isNPC","RollMenuConfigUtil","rollMethodName","RollMenuDragUtil","menu","dragHandle","menuRect","startX","startY","initialLeft","initialTop","dragData","handleMove","handleUp","deltaX","deltaY","remInPixels","moveHandler","upHandler","snapInfo","chatNotifications","lightningBolt","boltRect","horizontalDistance","verticalDistance","currentTop","FavoriteActorsUtil","fav","favorites","favoriteData","updatedFavorites","favorite","li","RollRequestsMenu","validFavorites","_instance","_RollRequestsMenu","createActorData","showOnlyPCsWithToken","isFavorite","tokensInScene","tokenDoc","actorData","currentActors","selectAllOn","requestTypes","requestType","preparedContext","frame","customPosition","optionsToggle","optionsElement","controlled","previousSelection","allActorIds","changes","uid","searchInput","accordion","requestTypesContainer","requestHeader","requestItem","customEvent","subItem","enabled","SidebarUtil","skip","isEnabled","selectAll","lockIcon","optionsToggleContainer","controlledTokens","actorElement","checkbox","isSelected","hasSelection","selectAllCheckbox","checkboxes","checkedCount","cb","searchTerm","requestName","subItems","hasVisibleSubItems","isVisible","categoryMatches","shouldShowCategory","nestedList","accordionToggle","rollOption","actorsWithIds","offlinePlayerActors","onlinePlayerActors","allActorEntries","allActors","useGroupId","gmRolledActors","gmActorIds","gmActorEntries","selectedUniqueIds","actorsWithoutTokens","actorsWithTokens","entriesWithTokens","uniqueActorIds","filteredActorIds","filteredActorsWithIds","suppressNotification","hdData","hitDieResult","rollTypeKey","normalizedRollTypeKey","wasControlled","actualRollKey","denominations","denom","chatControls","rollRequestIcon","firstChatControlIcon","icon","_HooksUtil","contextOptions","chatMessage","requestedBy","requestedText","currentFlavor","speaker","baseActorId","checkIds","storedGroupRollId","baseActor","storedInitConfig","situationalInput","input","targets","scene","ownershipChanged","messageOptions","allSituationalBonuses","uniqueBonuses","bonus","trimmedBonus","storedConfig","stored","requestsEnabled","rollInterceptionEnabled","actorOwner","abilitySelect","selectedAbility","configAbility","changeEvent","throttleKey","targettingSetting","maxDisposition","tokensToTarget","HooksUtil","RollRequestUtil","isMidiRequest","rollModeFromGM","defaultRollMode","handlerRequestData","Main"],"mappings":"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"}