{"version":3,"file":"flash-rolls-5e.js","sources":["../../src/constants/Settings.mjs","../../src/constants/General.mjs","../../src/constants/Hooks.mjs","../../src/components/LogUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/DiceConfigUtil.mjs","../../src/components/SettingsUtil.mjs","../../src/components/helpers/GeneralUtil.mjs","../../src/components/dialogs/gm-dialogs/GMRollConfigMixin.mjs","../../src/components/helpers/RollHelpers.mjs","../../src/components/dialogs/gm-dialogs/GMRollConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMHitDieConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMSkillToolConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMDamageConfigDialog.mjs","../../src/components/dialogs/gm-dialogs/GMAttackConfigDialog.mjs","../../src/components/helpers/ModuleHelpers.mjs","../../src/components/ActivityUtil.mjs","../../src/components/dialogs/CustomRollDialog.mjs","../../src/components/helpers/Helpers.mjs","../../src/components/ChatMessageUtils.mjs","../../src/components/RollHandlers.mjs","../../src/components/helpers/RollValidationHelpers.mjs","../../src/components/RollInterceptor.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/SidebarUtil.mjs","../../src/components/HooksUtil.mjs","../../src/components/RollRequestUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"flash-rolls-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    \n    groupRollsMsgEnabled: {\n      tag: \"group-roll-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.groupRollsMsgEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.groupRollsMsgEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n\n    consumptionConfigMode: {\n      tag: \"consumption-config-mode\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.consumptionConfigMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.consumptionConfigMode.hint\"),\n      propType: Number, \n      inputType: SETTING_INPUT.select,\n      choices: {\n        1: \"Skip dialog for player and GM\",\n        2: \"Skip dialog for player\",\n        3: \"Skip dialog for GM\",\n        4: \"Do not skip dialog\"\n      },\n      default: 1,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n\n    skipRollDialog: {\n      tag: \"skip-roll-dialog\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipRollDialog.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipRollDialog.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    rollInterceptionEnabled: {\n      tag: \"roll-interception-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    publicPlayerRolls: {\n      tag: \"public-player-rolls\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.publicPlayerRolls.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.publicPlayerRolls.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n\n    showOfflineNotifications: {\n      tag: \"show-offline-notifications\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n  };\n};\n","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"flash-rolls-5e\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cFlash Rolls 5e`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const SOCKET_CALLS = {\n  receiveDiceConfig: \"receiveDiceConfig\",\n  getDiceConfig: \"getDiceConfig\",\n  handleRollRequest: \"handleRollRequest\"\n};\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", requestType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", requestType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", requestType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", requestType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", requestType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", requestType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" }, // Recharge rolls\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" }, // D20 test\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" }, // Short rest\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" }, // Long rest\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\n/**\n * Roll types used throughout the module\n * @constant\n * @type {Object}\n */\nexport const ROLL_TYPES = {\n  ABILITY: \"ability\",\n  ABILITY_CHECK: \"abilitycheck\",\n  ATTACK: \"attack\",\n  CONCENTRATION: \"concentration\",\n  CUSTOM: \"custom\",\n  DEATH_SAVE: \"deathsave\",\n  FORMULA: \"formula\",\n  DAMAGE: \"damage\",\n  HEALING: \"healing\",\n  HIT_DIE: \"hitdie\",\n  INITIATIVE: \"initiative\",\n  INITIATIVE_DIALOG: \"initiativedialog\",\n  ITEM_SAVE: \"itemsave\",\n  SAVE: \"save\",\n  SAVING_THROW: \"savingthrow\",\n  SKILL: \"skill\",\n  TOOL: \"tool\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: ROLL_TYPES.ABILITY_CHECK, label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: ROLL_TYPES.SAVING_THROW, label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SKILL: { name: ROLL_TYPES.SKILL, label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: ROLL_TYPES.TOOL, label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: ROLL_TYPES.CONCENTRATION, label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: ROLL_TYPES.INITIATIVE, label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: ROLL_TYPES.DEATH_SAVE, label: \"Death Save\", subList: null, actorPath: '' },\n  // ITEM_SAVE: { name: ROLL_TYPES.ITEM_SAVE, label: \"Item Save\", subList: null, actorPath: '' },\n  HIT_DIE: { name: ROLL_TYPES.HIT_DIE, label: \"Hit Die\", subList: null, actorPath: '' },\n  CUSTOM: { name: ROLL_TYPES.CUSTOM, label: \"Custom Roll\", subList: null, actorPath: '' },\n}\n\n/**\n * Module configuration object\n * @constant\n * @type {Object}\n */\nexport const MODULE = {\n  ID: MODULE_ID,\n  ROLL_REQUEST_OPTIONS: ROLL_REQUEST_OPTIONS\n}\n","/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessageHTML\",\n  RENDER_CHAT_LOG: \"renderChatLog\",\n  RENDER_CHAT_INPUT: \"renderChatInput\",\n  // RENDER_SIDEBAR_TAB: \"renderSidebarTab\",\n  CHANGE_SIDEBAR_TAB: \"changeSidebarTab\", \n  RENDER_SIDEBAR: \"renderSidebar\",\n  RENDER_APPLICATION_V2: \"renderApplicationV2\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheckV2\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrowV2\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheckV2\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrowV2\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_CONFIGURE_INITIATIVE: \"dnd5e.preConfigureInitiative\",\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  // PRE_ROLL_INITIATIVE_DIALOG_V2: \"dnd5e.preRollInitiativeDialogV2\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_BUILD_ROLL_CONFIG: \"dnd5e.postBuildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {Array|*} data - array of items to log on console, or a single item that will be wrapped in an array\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debug-mode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      \n      // Ensure data is an array\n      const dataArray = Array.isArray(data) ? data : [data];\n      console.log(...DEBUG_TAG, ref, ...dataArray);\n    } catch(e) {\n      // If settings aren't available yet, check bypassSettings\n      if (bypassSettings || LogUtil.debugOn) {\n        // Ensure data is an array\n        const dataArray = Array.isArray(data) ? data : [data];\n        console.log(...DEBUG_TAG, ref, ...dataArray);\n      }\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {Array|*} data - array of items to log on console, or a single item that will be wrapped in an array\n   */\n  static warn(ref=\"\", data=[]) {\n    // Ensure data is an array\n    const dataArray = Array.isArray(data) ? data : [data];\n    console.warn(...DEBUG_TAG, ref, ...dataArray);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {Array|*} data - array of items to log on console, or a single item that will be wrapped in an array\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, data=[], options = { ui: false, console: true, permanent: false }) {\n    // Ensure data is an array\n    const dataArray = Array.isArray(data) ? data : [data];\n    \n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef, ...dataArray);\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    LogUtil.log('initialize', [callbackFunc]);\n\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n      } catch (e) {\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    LogUtil.log('registerCall', [name]);\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n    } else {\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log('sendMessage', [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    LogUtil.log('execForGMs', [handler, ...parameters]);\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function|string} handler - The function to execute or the name of a registered function.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    LogUtil.log('execForUser #0', [handler, userId, ...parameters]);\n    if (!SocketUtil.socket) {\n        return;\n    }\n\n    LogUtil.log('execForUser #1', [userId === game.user.id]);\n    if(userId === game.user.id){\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    LogUtil.log('execForUser #2', [SocketUtil._activeExecutions.has(executionKey)]);\n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n      const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n      LogUtil.log('execForUser #3 - response', [resp]);\n      return resp;\n    } catch (error) {\n      LogUtil.error('execForUser #4 - error', [error]);\n      return null;\n    } finally {\n      LogUtil.log('execForUser #5 - success', []);\n      // Always clean up, even if there was an error\n      SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    LogUtil.log('serializeForTransport', [data, hasRolls]);\n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    LogUtil.log('deserializeFromTransport', [data, hasRolls]);\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { SocketUtil } from './SocketUtil.mjs';\n\n/**\n * Utility class for managing dice configurations across users\n */\nexport class DiceConfigUtil {\n  /**\n   * @type {Object} Current user's dice configuration\n   */\n  static diceConfig = {};\n  \n  /**\n   * @type {Object} All player dice configurations (GM only)\n   */\n  static playerDiceConfigs = {};\n  \n  /**\n   * Initialize the dice configuration for current user\n   */\n  static initialize() {\n    this.setDiceConfig();\n  }\n  \n  /**\n   * Set dice configuration from client settings\n   * @returns {Object} The dice configuration\n   */\n  static setDiceConfig() {\n    if (!game.user) return {};\n    \n    const clientSettings = game.settings.storage.get(\"client\");\n    this.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Get the current user's dice configuration\n   * @returns {Object} The dice configuration\n   */\n  static getDiceConfig() {\n    if (!game.user) return {};\n    \n    // Ensure we have the latest configuration\n    this.setDiceConfig();\n    \n    // If GM, send config to GMs via socket\n    if (game.user.isGM) {\n      this._sendDiceConfigToGMs();\n    }\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Send dice configuration to all GMs\n   * @private\n   */\n  static _sendDiceConfigToGMs() {\n    SocketUtil.execForGMs('receiveDiceConfig', game.user.id, this.diceConfig);\n  }\n  \n  /**\n   * Receive and store dice configuration from a player\n   * @param {string} userId - The user ID\n   * @param {string} diceConfig - The serialized dice configuration\n   */\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId === game.user?.id) {\n      this.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n    }\n  }\n  \n  /**\n   * Get dice configuration for a specific user\n   * @param {string} userId - The user ID\n   * @returns {Object} The user's dice configuration\n   */\n  static getUserDiceConfig(userId) {\n    if (userId === game.user?.id) {\n      return this.diceConfig;\n    }\n    \n    return this.playerDiceConfigs[userId] || {};\n  }\n  \n  /**\n   * Request dice configuration from a specific user\n   * @param {string} userId - The user ID to request from\n   */\n  static requestDiceConfigFromUser(userId) {\n    SocketUtil.execForUser('getDiceConfig', userId);\n  }\n  \n  /**\n   * Request dice configuration from all active non-GM users\n   */\n  static requestDiceConfigFromAllPlayers() {\n    if (!game.user?.isGM) return;\n    \n    game.users.forEach(user => {\n      if (user.active && !user.isGM && user.id !== game.user.id) {\n        this.requestDiceConfigFromUser(user.id);\n      }\n    });\n  }\n  \n  /**\n   * Clear all stored player dice configurations\n   */\n  static clearPlayerConfigs() {\n    this.playerDiceConfigs = {};\n  }\n  \n  /**\n   * Check if a user has dice configuration stored\n   * @param {string} userId - The user ID\n   * @returns {boolean} True if configuration exists\n   */\n  static hasUserConfig(userId) {\n    if (userId === game.user?.id) {\n      return !!this.diceConfig;\n    }\n    \n    return !!this.playerDiceConfigs[userId];\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach((entry) => {\n      const setting = entry[1]; \n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      try {\n        game.settings.register(MODULE_ID, setting.tag, settingObj);\n      } catch (error) {\n        // Setting might already be registered, that's ok\n        LogUtil.log(`Setting ${setting.tag} already registered or error:`, error);\n      }\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    try {\n      if(moduleName===MODULE_ID){\n        setting = game.settings.get(moduleName, settingName);\n      }else{\n        const client = game.settings.storage.get(\"client\");\n        let selectedSetting = client[`${moduleName}.${settingName}`];\n        //\n        if(selectedSetting===undefined){\n          const world = game.settings.storage.get(\"world\");\n          selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n          setting = selectedSetting?.value;\n        }\n      }\n    } catch (error) {\n      // Setting not registered yet, return default\n      LogUtil.log(`Setting ${moduleName}.${settingName} not found, returning false`);\n      return false;\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n      LogUtil.log('SettingsUtil.set - world Setting?', [selectedSetting]);\n    } \n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n      LogUtil.log('SettingsUtil.set - success', [moduleName, settingName, newValue]);\n    }catch(e){\n      LogUtil.error('SettingsUtil.set - error', [e]);\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsEnabled(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsEnabled(newValue){\n    const requestsIcon = document.querySelector(\".chat-controls .flash-rolls-icon\");\n    if(!requestsIcon){ return; }\n    \n    if(newValue){\n      requestsIcon.classList.add(\"active\");\n      // requestsIcon.setAttribute(\"aria-pressed\", \"true\");\n    }else{\n      requestsIcon.classList.remove(\"active\");\n      // requestsIcon.setAttribute(\"aria-pressed\", \"false\");\n    }\n  }\n}\n","import { LogUtil } from \"../LogUtil.mjs\";\nimport { SettingsUtil } from \"../SettingsUtil.mjs\";\n\n/**\n * Utility class providing general-purpose functionality for the module */\nexport class GeneralUtil {\n  /**\n   * Checks if module is currently installed and active\n   * @param {string} moduleName \n   * @returns {boolean}\n   */\n  static isModuleOn(moduleName){\n    const module = game.modules?.get(moduleName);\n    return Boolean(module?.active);\n  }\n\n  /**\n   * Finds and returns the first element matching the selector within the parent element\n   * @param {HTMLElement} parent - The parent element to search within\n   * @param {string} selector - CSS selector string\n   * @returns {HTMLElement|null} The first matching element or null if not found\n   */\n  static html(parent, selector) {\n    return parent.querySelector(selector);\n  }\n\n  /**\n   * Gets the full width of an element including margins and borders\n   * @param {HTMLElement} element - The element to measure\n   * @returns {number} The full width in pixels\n   */\n  static getFullWidth(element) {\n    const style = window.getComputedStyle(element);\n    if (style.width === '0px') {\n      return 0;\n    }\n    return element.offsetWidth;\n  }\n\n\n  /**\n   * Process stylesheets to extract font families\n   * @returns {Promise<string[]>} Array of font family names from stylesheets\n   * @private\n   */\n  static processStyleSheets = async () => {\n    const foundryFonts = new Set(Object.keys(CONFIG.fontDefinitions));\n    const customFontsObj = game.settings.get(\"core\", \"fonts\") || {};\n    const customFonts = Object.entries(customFontsObj).map(([fontFamily]) => fontFamily);\n    const cssImportedFonts = new Set();\n    \n    for (const sheet of document.styleSheets) {\n      try {\n        if (sheet.ownerNode) {\n          const href = sheet.href || '';\n          const isFoundryCore = href.includes('css/') || href.includes('styles/');\n          const isCrlngnUI = href.includes('modules/flash-rolls-5e/');\n          const isSystem = href.includes('systems/');\n          \n          if (href && !isFoundryCore && !isCrlngnUI && !isSystem) {\n            continue;\n          }\n          \n          await this.processStyleSheetRules(sheet, cssImportedFonts);\n        }\n      } catch (e) {\n        LogUtil.warn('Error processing stylesheet:', [e]);\n      }\n    }\n\n    // Log what we found for debugging\n    LogUtil.log('Found fonts:', [{\n      foundry: Array.from(foundryFonts),\n      custom: customFonts,\n      cssImported: Array.from(cssImportedFonts)\n    }]);\n\n    const allFonts = Array.from(new Set([\n      ...foundryFonts,\n      ...customFonts,\n      ...cssImportedFonts\n    ]))\n    .filter(f => !/FontAwesome|Font Awesome|FoundryVTT/.test(f))\n    .map(f => f.replace(/['\"]/g, '').trim())\n    .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n\n    return allFonts;\n  }\n\n  /**\n   * Adds CSS variables to a style element\n   * @param {string} varName \n   * @param {string} varValue \n   */\n  static addCSSVars(varName, varValue) {\n    let bodyStyle = document.querySelector('#flash5e-vars');\n    \n    if (!bodyStyle) {\n      const body = document.querySelector('body.flash5e');\n      if(!body){return}\n      bodyStyle = document.createElement('style');\n      bodyStyle.id = 'flash5e-vars';\n      bodyStyle.textContent = 'body.flash5e {\\n}\\n';\n      body.prepend(bodyStyle);\n    }\n    \n    let cssText = bodyStyle.textContent;\n    \n    let ruleStart = cssText.indexOf('body.flash5e {');\n    let ruleEnd = cssText.indexOf('}', ruleStart);\n    \n    if (ruleStart === -1) {\n      cssText = 'body.flash5e {\\n}\\n';\n      ruleStart = 0;\n      ruleEnd = cssText.indexOf('}');\n    }\n    \n    const rulePart = cssText.substring(ruleStart + 'body.flash5e {'.length, ruleEnd);\n    \n    const declarations = rulePart.split(';')\n      .map(decl => decl.trim())\n      .filter(decl => decl !== '');\n    \n    const varsMap = {};\n    declarations.forEach(decl => {\n      const parts = decl.split(':');\n      if (parts.length >= 2) {\n        const name = parts[0].trim();\n        const value = parts.slice(1).join(':').trim(); // Handle values that might contain colons\n        if (name) varsMap[name] = value;\n      }\n    });\n    \n    if (varName.includes('i18n') && \n        typeof varValue === 'string' && \n        !varValue.startsWith('\"') && \n        !varValue.startsWith(\"'\") && \n        !varValue.match(/^url\\(|^rgba?\\(|^hsla?\\(/)) {\n      varValue = `\"${varValue}\"`;\n    }\n    \n    varsMap[varName] = varValue;\n    \n    const newRuleContent = Object.entries(varsMap)\n      .map(([name, value]) => `  ${name}: ${value};`)\n      .join('\\n');\n    \n    const newCss = \n      cssText.substring(0, ruleStart) + \n      'body.flash5e {\\n' + \n      newRuleContent + \n      '\\n}' + \n      cssText.substring(ruleEnd + 1);\n    \n    bodyStyle.textContent = newCss;\n  }\n\n  /**\n   * Process CSS rules from a stylesheet to extract font families\n   * @param {CSSStyleSheet} sheet - The stylesheet to process\n   * @param {Set<string>} cssImportedFonts - Set to collect found font families\n   * @private\n   */\n  static async processStyleSheetRules(sheet, cssImportedFonts) {\n    try {\n      if (sheet.ownerNode?.tagName === 'STYLE') {\n        const cssText = sheet.ownerNode.textContent;\n        this.extractFontsFromCSSText(cssText, cssImportedFonts);\n      }\n      \n      try {\n        const rules = sheet.cssRules || sheet.rules;\n        if (!rules) return;\n        \n        for (let i = 0; i < rules.length; i++) {\n          const rule = rules[i];\n          \n          if (rule instanceof CSSFontFaceRule) {\n            const fontFamily = rule.style.getPropertyValue('font-family');\n            if (fontFamily) {\n              cssImportedFonts.add(fontFamily);\n              LogUtil.log('Found font-face rule:', [fontFamily]);\n            }\n          }\n          else if (rule instanceof CSSImportRule) {\n            LogUtil.log('Found import rule:', [rule.href]);\n            \n            if (rule.styleSheet) {\n              await this.processStyleSheetRules(rule.styleSheet, cssImportedFonts);\n            } else {\n              if (rule.href) {\n                try {\n                  const response = await fetch(rule.href);\n                  const cssText = await response.text();\n                  this.extractFontsFromCSSText(cssText, cssImportedFonts);\n                } catch (e) {\n                  LogUtil.warn('Error fetching imported CSS:', [e]);\n                }\n              }\n            }\n          }\n        }\n      } catch (e) {\n        if (e.name === 'SecurityError' && sheet.href) {\n          LogUtil.log('Security restriction on stylesheet, trying to fetch directly:', [sheet.href]);\n          try {\n            const response = await fetch(sheet.href);\n            const cssText = await response.text();\n            this.extractFontsFromCSSText(cssText, cssImportedFonts);\n          } catch (fetchError) {\n            LogUtil.warn('Error fetching cross-origin stylesheet:', [fetchError]);\n          }\n        } else {\n          LogUtil.warn('Error accessing CSS rules:', [e]);\n        }\n      }\n    } catch (e) {\n      LogUtil.warn('Error in processStyleSheetRules:', [e]);\n    }\n  }\n\n  /**\n   * Extract font families from CSS text\n   * @param {string} cssText - CSS text to process\n   * @param {Set<string>} cssImportedFonts - Set to collect found font families\n   * @private\n   */\n  static extractFontsFromCSSText(cssText, cssImportedFonts) {\n    if (!cssText) return;\n    \n    const fontFaceRegex = /@font-face\\s*{[^}]*font-family\\s*:\\s*(['\"])(.+?)\\1[^}]*}/gs;\n    const fontFaceMatches = cssText.match(fontFaceRegex) || [];\n    \n    fontFaceMatches.forEach(match => {\n      const fontFamilyRegex = /font-family\\s*:\\s*(['\"])(.+?)\\1/;\n      const fontFamilyMatch = match.match(fontFamilyRegex);\n      \n      if (fontFamilyMatch && fontFamilyMatch[2]) {\n        const fontName = fontFamilyMatch[2].trim();\n        cssImportedFonts.add(fontName);\n      }\n    });\n  }\n  \n\n  /**\n   * Gets the offset bottom of an element\n   * @param {HTMLElement} element \n   * @returns {number}\n   */\n  static getOffsetBottom(element) {\n    const offsetTop = element.offsetTop;\n    const elementHeight = element.offsetHeight;\n    return window.innerHeight - (offsetTop + elementHeight);\n  }\n\n  /**\n   * Retrieves a list of all available fonts\n   * @returns {Promise<string[]>}\n   */\n  static async getAllFonts() {\n    const foundryFonts = new Set(Object.keys(CONFIG.fontDefinitions));\n    const customFontsObj = game.settings.get(\"core\", \"fonts\") || {};\n    const customFonts = Object.entries(customFontsObj).map(([fontFamily]) => fontFamily);\n  \n    const cssImportedFonts = await this.processStyleSheets();\n  \n    const allFonts = Array.from(new Set([\n      ...foundryFonts,\n      ...customFonts,\n      ...cssImportedFonts\n    ]))\n    .filter(f => !/FontAwesome|Font Awesome|FoundryVTT/.test(f))\n    .map(f => f.replace(/['\"]/g, '').trim())\n    .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n\n    return allFonts || [];\n  }\n\n  // Helper function to format font names\n  /**\n   * Formats a font name by cleaning it and wrapping it in quotes if it contains spaces\n   * @param {string} fontName - The font name to format\n   * @returns {string} The formatted font name\n   */\n  static wrapFontName = (fontName) => {\n    const cleanName = fontName.replace(/['\"`]/g, '');\n    return cleanName.includes(' ') ? `\"${cleanName}\"` : cleanName;\n  }\n\n  /**\n   * Adds custom CSS to a style element\n   * @param {string} content - CSS content to add\n   * @param {string} [id='flash5e-custom-css'] - ID for the style element\n   * @param {boolean} [checkForDuplicates=true] - Whether to check for duplicate rules\n   */\n  static addCustomCSS(content, id = 'flash5e-custom-css', checkForDuplicates = true) {\n    if (!content) {\n      return;\n    }\n    \n    let customStyle = document.querySelector('#' + id);\n    \n    if (!customStyle) {\n      customStyle = document.createElement('style');\n      customStyle.id = id;\n      customStyle.textContent = '';\n      document.head.appendChild(customStyle);\n    }\n\n    const importRegex = /@import\\s+(?:url\\()?\\s*['\"]?[^'\")]+['\"]?\\s*\\)?\\s*;/g;\n    const imports = [];\n    let contentWithoutImports = content;\n    let match;\n    while ((match = importRegex.exec(content)) !== null) {\n      imports.push(match[0]);\n    }\n    \n    contentWithoutImports = content.replace(importRegex, '').trim();\n    \n    if (!checkForDuplicates) {\n      customStyle.textContent = imports.join('\\n') + (imports.length ? '\\n\\n' : '') + contentWithoutImports;\n      return;\n    }\n    \n    if (!customStyle.textContent.includes(contentWithoutImports)) {\n      const currentContent = customStyle.textContent;\n      const existingImports = [];\n      let currentMatch;\n      while ((currentMatch = importRegex.exec(currentContent)) !== null) {\n        existingImports.push(currentMatch[0]);\n      }\n      \n      const currentContentWithoutImports = currentContent.replace(importRegex, '').trim();\n      const newImports = imports.filter(imp => !existingImports.includes(imp));\n      const allImports = [...existingImports, ...newImports];\n      customStyle.textContent = allImports.join('\\n') + \n                               (allImports.length ? '\\n\\n' : '') + \n                               currentContentWithoutImports +\n                               (currentContentWithoutImports && contentWithoutImports ? '\\n\\n' : '') +\n                               contentWithoutImports;\n    }\n  }\n  \n  /**\n   * Performs a smooth scroll with custom duration\n   * @param {HTMLElement} element - The element to scroll\n   * @param {number} to - The target scroll position\n   * @param {string} [direction=\"horizontal\"] - The scroll direction (\"horizontal\" or \"vertical\")\n   * @param {number} [duration=300] - Duration of the animation in milliseconds\n   * @param {Function} [onComplete] - Optional callback to run when animation completes\n   * @returns {number} Animation ID that can be used to cancel the animation\n   */\n  static smoothScrollTo(element, to, direction = \"horizontal\", duration = 300, onComplete = null) {\n    // Cancel any existing animation if it has the same ID as the element\n    const animationId = element.dataset.scrollAnimationId;\n    if (animationId) {\n      cancelAnimationFrame(Number(animationId));\n    }\n    \n    // Determine if we're scrolling horizontally or vertically\n    const isHorizontal = direction === \"horizontal\";\n    const start = isHorizontal ? element.scrollLeft : element.scrollTop;\n    const change = to - start;\n    \n    // If there's no change or the element isn't scrollable, exit early\n    if (change === 0) {\n      if (onComplete) onComplete();\n      return null;\n    }\n    \n    const startTime = performance.now();\n    \n    const animateScroll = (currentTime) => {\n      const elapsedTime = currentTime - startTime;\n      \n      if (elapsedTime >= duration) {\n        if (isHorizontal) {\n          element.scrollLeft = to;\n        } else {\n          element.scrollTop = to;\n        }\n        \n        delete element.dataset.scrollAnimationId;\n        if (onComplete) onComplete();\n        return;\n      }\n      \n      const progress = elapsedTime / duration;\n      const easeProgress = progress < 0.5 \n        ? 2 * progress * progress \n        : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n      \n      if (isHorizontal) {\n        element.scrollLeft = start + change * easeProgress;\n      } else {\n        element.scrollTop = start + change * easeProgress;\n      }\n      \n      const newAnimationId = requestAnimationFrame(animateScroll);\n      element.dataset.scrollAnimationId = newAnimationId;\n      return newAnimationId;\n    };\n    \n    const newAnimationId = requestAnimationFrame(animateScroll);\n    element.dataset.scrollAnimationId = newAnimationId;\n    return newAnimationId;\n  }\n\n  /**\n   * Opens a confirmation dialog to reload the page using DialogV2\n   * @param {string} [title=\"\"] - The title of the confirmation dialog\n   * @param {string} [content=\"\"] - The content message\n   * @param {Object} [options={}] - Additional dialog options\n   * @returns {Promise<boolean>} Resolves to true if confirmed, false otherwise\n   */\n  static confirmReload(\n    title = game.i18n.localize(\"CRLNGN_UI.ui.reloadRequiredTitle\"), \n    content = game.i18n.localize(\"CRLNGN_UI.ui.reloadRequiredLabel\"),\n    options = {}) {\n    \n    const dialogConfig = {\n      title,\n      content,\n      yes: {\n        label: game.i18n.localize(\"CRLNGN_UI.ui.reloadButton\"),\n        callback: () => {\n          LogUtil.log(\"Reloading page after confirmation\");\n          window.location.reload();\n          return true;\n        }\n      },\n      no: {\n        label: game.i18n.localize(\"CRLNGN_UI.ui.cancelButton\"),\n        callback: () => false\n      },\n      defaultYes: false,\n      rejectClose: false\n    };\n    \n    mergeObject(dialogConfig, options);\n    return foundry.applications.api.DialogV2.confirm(dialogConfig);\n  }\n\n  /**\n   * Alias for Foundry's method to render Handlebars template\n   * @param {string} templatePath \n   * @param {Object} data \n   * @returns {Promise<string>} Rendered template HTML\n   */\n  static renderTemplate(templatePath, data){\n    return foundry.applications.handlebars.renderTemplate(templatePath, data);\n  }\n\n  /**\n   * Alias for Foundry's method to load Handlebars template\n   * @param {string} templatePath \n   * @returns {Promise<HandlebarsTemplate>} Loaded template object\n   */\n  static loadTemplate(templatePath){\n    return foundry.applications.handlebars.loadTemplate(templatePath);\n  }\n\n  /**\n   * Alias for Foundry's method to load Handlebars template\n   * @param {string[]} templatePaths \n   * @returns {Promise<HandlebarsTemplate>} Loaded template object\n   */\n  static loadTemplates(templatePaths){\n    if(!Array.isArray(templatePaths)) templatePaths = [templatePaths];\n    return foundry.applications.handlebars.loadTemplates(templatePaths);\n  }\n\n  /**\n   * Validates if a string is a valid CSS rule or selector\n   * @param {string} cssString - CSS rule or selector to validate\n   * @return {boolean} Whether the CSS is valid\n   */\n  static isValidCSSRule(cssString) {\n    if (!cssString || typeof cssString !== \"string\") return false;\n    const trimmedCSS = cssString.trim();\n    if (!trimmedCSS) return false;\n    try {\n      const style = document.createElement(\"style\");\n      const testCSS = `${trimmedCSS} { color: inherit; }`;\n      style.textContent = testCSS;\n      document.head.appendChild(style);\n      const isValid = Boolean(style.sheet && style.sheet.cssRules && style.sheet.cssRules.length > 0);\n      document.head.removeChild(style);\n      return isValid;\n    } catch (error) {\n      LogUtil.log(\"CSS validation error:\", [error, cssString]);\n      return false;\n    }\n  }\n\n  /**\n   * Processes CSS rules with nested selectors to create valid CSS for multiple target selectors\n   * @param {string} cssRules - CSS rules that may contain nested selectors\n   * @param {string} targetSelectors - Comma-separated list of selectors to apply the rules to\n   * @return {string} Valid CSS with properly combined selectors\n   */\n  static processCSSRules(cssRules, targetSelectors) {\n    if (!cssRules || !targetSelectors) return \"\";\n    const parsedCSS = this.#parseCSS(cssRules);\n    const mainStyle = targetSelectors + \" {\\n\" + parsedCSS.baseProperties.join(\"\\n\") + \"\\n}\";\n    const processedRules = [];\n    const rulesByContent = new Map();\n    \n    parsedCSS.nestedRules.forEach(rule => {\n      const { selector, content } = rule;\n      \n      if (selector.startsWith(\"&\")) {\n        const pseudoSelector = selector.substring(1);\n        const combinedSelectors = targetSelectors.split(\",\")\n          .map(s => s.trim())\n          .filter(Boolean)\n          .map(s => s + pseudoSelector)\n          .join(\", \");\n        \n        processedRules.push(`${combinedSelectors} {\\n${content}\\n}`);\n        return;\n      }\n      \n      if (!rulesByContent.has(content)) {\n        rulesByContent.set(content, []);\n      }\n      \n      const selectors = selector.split(\",\").map(s => s.trim());\n      const targetList = targetSelectors.split(\",\").map(s => s.trim()).filter(Boolean);\n      \n      selectors.forEach(nestedSelector => {\n        targetList.forEach(targetSelector => {\n          rulesByContent.get(content).push(`${targetSelector} ${nestedSelector}`);\n        });\n      });\n    });\n    \n    rulesByContent.forEach((selectors, content) => {\n      processedRules.push(`${selectors.join(\", \")} {\\n${content}\\n}`);\n    });\n    \n    return mainStyle + \"\\n\\n\" + processedRules.join(\"\\n\\n\");\n  }\n  \n  /**\n   * Parses CSS string into a structured format with base properties and nested rules\n   * @param {string} css - CSS string to parse\n   * @return {Object} Object with baseProperties array and nestedRules array\n   * @private\n   */\n  static #parseCSS(css) {\n    const baseProperties = [];\n    const nestedRules = [];\n    const lines = css.split(\"\\n\");\n    \n    let currentNested = null;\n    let braceCount = 0;\n    \n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (!line) continue;\n      \n      const openBraces = (line.match(/{/g) || []).length;\n      const closeBraces = (line.match(/}/g) || []).length;\n      \n      if (line.includes(\"{\") && !currentNested) {\n        const selector = line.substring(0, line.indexOf(\"{\")).trim();\n        currentNested = { selector, content: \"\", startLine: i };\n        braceCount = 1;\n        \n        const contentAfterBrace = line.substring(line.indexOf(\"{\") + 1).trim();\n        if (contentAfterBrace && !contentAfterBrace.includes(\"}\")) {\n          currentNested.content += contentAfterBrace + \"\\n\";\n        }\n      } else if (currentNested) {\n        braceCount += openBraces - closeBraces;\n        \n        if (braceCount > 0) {\n          currentNested.content += line + \"\\n\";\n        } \n        else {\n          currentNested.content = currentNested.content.replace(/}\\s*$/, \"\").trim();\n          nestedRules.push(currentNested);\n          currentNested = null;\n        }\n      } else if (!line.includes(\"{\") && !line.includes(\"}\")) {\n        baseProperties.push(line);\n      }\n    }\n    \n    return { baseProperties, nestedRules };\n  }\n\n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  static getActorOwner(actor) {\n    const ownership = actor.ownership || {};\n\n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n\n    if(ownership?.default >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){\n      const user = game.users.filter(user => !user.isGM)[0];\n      if (user) {\n        return user;\n      }\n    }\n    \n    return null;\n  }\n}\n","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID } from \"../../../constants/General.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\n\n// Check if required D&D5e classes exist\nHooks.once(\"ready\", () => {\n  if (!dnd5e.applications.dice.DamageRollConfigurationDialog) {\n    LogUtil.warn(\"DamageRollConfigurationDialog not found in dnd5e.applications.dice\");\n  }\n});\n\n/**\n * Mixin that provides GM-specific functionality for roll configuration dialogs\n * @param {Class} Base - The base dialog class to extend\n * @returns {Class} The extended class with GM functionality\n */\nexport function GMRollConfigMixin(Base) {\n  return class extends Base {\n    constructor(config = {}, message = {}, options = {}) {\n      super(config, message, options);\n      \n      // Store GM-specific options\n      this.actors = options.actors || [];\n      this.sendRequest = options.sendRequest ?? options.sendRequest ?? true;\n      this.showDC = options.showDC || false;\n      this.dcValue = options.dcValue || null;\n      \n      // Store roll type and key for re-renders\n      this.rollKey = options.rollKey || config.skill || config.ability || null;\n      this.rollTypeString = options.rollTypeString || null;\n      \n      // Store original window title and subtitle\n      this.windowTitle = options.window?.title || \"\";\n      this.windowSubtitle = options.window?.subtitle || \"\";\n    }\n    \n    /**\n     * Build a roll configuration from form data.\n     * Handles situational bonuses, ability selection, and DC values.\n     * @param {BasicRollConfiguration} config - Individual roll configuration from the rolls array\n     * @param {FormDataExtended} formData - Data from the dialog form\n     * @param {number} index - Index of this roll in the rolls array\n     * @returns {BasicRollConfiguration} The modified individual roll configuration\n     * @protected\n     * @override\n     */\n    _buildConfig(config, formData, index) {\n      const abilityFromForm = formData?.get(\"ability\");\n      const dcFromForm = formData?.get(\"dc\");\n      \n      const situational = formData?.get(`rolls.${index}.situational`);\n      LogUtil.log('_buildConfig', [situational, formData, config]);\n      if (situational) {\n        if (!config.parts) config.parts = [];\n        config.parts.push(\"@situational\");\n        if (!config.data) config.data = {};\n        config.data.situational = situational;\n      }else if (config.parts) {\n        const idx = config.parts.indexOf(\"@situational\");\n        if (idx !== -1) config.parts.splice(idx, 1);\n      }\n      \n      if (abilityFromForm) {\n        config.ability = abilityFromForm;\n        this.config.ability = abilityFromForm;\n      }\n      \n      const result = super._buildConfig(config, formData, index);\n      \n      // Apply DC if we have one\n      if (dcFromForm) {\n        const dcValue = parseInt(dcFromForm);\n        if (!isNaN(dcValue)) {\n          result.options = result.options || {};\n          result.options.target = dcValue;\n        }\n      } else if (this.dcValue !== undefined && this.dcValue !== null) {\n        result.options = result.options || {};\n        result.options.target = this.dcValue;\n      }\n      \n      LogUtil.log(`${this.constructor.name}._buildConfig`, [this.config, formData, result]);\n      return result;\n    }\n    \n    /**\n     * Handle form changes to capture GM-specific fields.\n     * @param {Object} formConfig - The form configuration object\n     * @param {Event} event - The change event\n     * @protected\n     * @override\n     */\n    _onChangeForm(formConfig, event) {\n      LogUtil.log(`_onChangeForm`, [event.target.value]);\n      super._onChangeForm(formConfig, event);\n\n      \n      // Capture the current state of our custom fields before re-render\n      const sendRequestCheckbox = this.element.querySelector('input[name=\"flash5e-send-request\"]');\n      if (sendRequestCheckbox) {\n        this.sendRequest = sendRequestCheckbox.checked;\n      }\n      \n      const dcInput = this.element.querySelector('input[name=\"dc\"]');\n      if (dcInput && dcInput.value) {\n        this.dcValue = parseInt(dcInput.value) || null;\n      }\n      \n    }\n    \n    /**\n     * Finalize rolls based on the action button clicked.\n     * @param {string} action - The action button that was clicked\n     * @returns {D20Roll[]} Array of finalized rolls ready for execution\n     * @protected\n     * @override\n     */\n    _finalizeRolls(action) {\n      const finalizedRolls = super._finalizeRolls(action);\n      LogUtil.log(`_finalizeRolls #1`, [finalizedRolls, this.sendRequest]);\n      \n      // Apply DC if we have one stored\n      if (this.dcValue !== undefined && this.dcValue !== null) {\n        for (const roll of finalizedRolls) {\n          roll.options.target = this.dcValue;\n        }\n      }\n      \n      // Store our custom properties\n      this.config.sendRequest = this.sendRequest;\n      \n      return finalizedRolls;\n    }\n    \n    /**\n     * Handle post-render actions for the dialog.\n     * Triggers initial formula rebuild if there's a situational bonus.\n     * @param {ApplicationRenderContext} context - The render context.\n     * @param {HandlebarsRenderOptions} options - Rendering options.\n     * @returns {Promise<void>}\n     * @protected\n     * @override\n     */\n    async _onRender(context, options) {\n      await super._onRender(context, options);\n      \n      // If we have initial situational bonus, trigger a rebuild to update the formula\n      if (this.config.rolls?.[0]?.data?.situational || this.config.situational) {\n        LogUtil.log(`${this.constructor.name}._onRender`, ['Triggering rebuild for initial situational bonus']);\n        // Use a small delay to ensure the form is fully rendered\n        setTimeout(() => {\n          this.rebuild();\n        }, 100);\n      }\n    }\n  };\n}","import { LogUtil } from \"../LogUtil.mjs\";\nimport { ROLL_TYPES } from \"../../constants/General.mjs\";\nimport { getSettings } from \"../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../SettingsUtil.mjs\";\n\n/**\n * Helper functions for roll handling\n */\nexport const RollHelpers = {\n  /**\n   * Add situational bonus to a roll configuration\n   * @param {BasicRollProcessConfiguration} config - The process configuration with rolls array\n   * @param {string} situational - The situational bonus formula\n   * @returns {BasicRollProcessConfiguration} The modified config\n   */\n  addSituationalBonus(config, situational) {\n    LogUtil.log(\"Config before adding bonus:\", [situational, config]);\n    if (situational && config.rolls?.[0]) {\n      // Ensure the roll has proper structure\n      if (!config.rolls[0].parts) config.rolls[0].parts = [];\n      if (!config.rolls[0].data) config.rolls[0].data = {};\n      \n      config.rolls[0].data.situational = situational;\n      \n      // Only add @situational if it's not already in parts\n      if (!config.rolls[0].parts.includes(\"@situational\")) {\n        config.rolls[0].parts.push(\"@situational\");\n      }\n      LogUtil.log(\"Config after adding bonus:\", [config]);\n    }\n    // config.situational = situational;\n    return config;\n  },\n\n  /**\n   * Build base configuration for all roll types\n   * @param {Object} requestData - The roll request data\n   * @param {Object} requestData.config - Configuration from the request\n   * @param {boolean} [requestData.config.advantage] - Roll with advantage\n   * @param {boolean} [requestData.config.disadvantage] - Roll with disadvantage\n   * @param {string} [requestData.config.situational] - Situational bonus formula\n   * @param {number} [requestData.config.target] - DC value\n   * @param {string} [requestData.config.requestedBy] - Name of requester\n   * @param {BasicRollConfiguration} rollConfig - Individual roll configuration with parts[], data{}, options{}\n   * @param {string[]} [rollConfig.parts=[]] - Roll formula parts\n   * @param {Object} [rollConfig.data={}] - Roll data for formula resolution\n   * @param {Object} [rollConfig.options={}] - Roll options\n   * @param {Object} [additionalConfig={}] - Additional configuration specific to the roll type\n   * @returns {BasicRollProcessConfiguration} The process configuration for D&D5e actor roll methods\n   */\n  buildRollConfig(requestData, rollConfig, additionalConfig = {}) {\n    // Build BasicRollProcessConfiguration\n    const config = {\n      rolls: [{\n        parts: rollConfig.parts || [],\n        data: rollConfig.data || {},\n        options: {\n          ...rollConfig.options || {},\n          // Preserve the _fromFlashRolls flag if it exists\n          ...(rollConfig.options?._fromFlashRolls && { _fromFlashRolls: true })\n        }\n      }],\n      advantage: requestData.config.advantage || false,\n      disadvantage: requestData.config.disadvantage || false,\n      target: requestData.config.target,\n      subject: null,\n      chatMessage: true,\n      legacy: false,\n      // Include rollMode if it's in the config\n      ...(requestData.config.rollMode && { rollMode: requestData.config.rollMode }),\n      ...additionalConfig\n    };\n    \n    const situational = requestData.config.situational;\n    if (situational) {\n      this.addSituationalBonus(config, situational);\n    }\n    \n    return this.ensureRollFlags(config, requestData);\n  },\n\n  /**\n   * Ensure roll config has the required flags to prevent re-interception\n   * @param {BasicRollProcessConfiguration} config - The process configuration\n   * @param {Object} requestData - The roll request data\n   * @param {Object} requestData.config - Configuration object\n   * @param {string} [requestData.config.requestedBy] - Name of requester\n   * @returns {BasicRollProcessConfiguration} The updated config with required flags\n   */\n  ensureRollFlags(config, requestData) {\n    config.isRollRequest = game.user.isGM ? false : true;\n    config._showRequestedBy = true;\n    config._requestedBy = requestData.config.requestedBy || 'GM';\n\n    return config;\n  },\n\n  /**\n   * Validate and normalize actors array\n   * @param {Actor[]|string[]} actors - Array of Actor documents or actor IDs\n   * @returns {Actor[]|null} Array of valid actors or null if no valid actors\n   */\n  validateActors(actors) {\n    if (!actors || actors.length === 0) return null;\n    \n    // Convert actor IDs to Actor documents if needed\n    if (typeof actors[0] === 'string') {\n      actors = actors.map(actorId => game.actors.get(actorId)).filter(a => a);\n    }\n    \n    return actors.length > 0 ? actors : null;\n  },\n\n  /**\n   * Determine the appropriate roll class based on roll type\n   * @param {string} rollType - The type of roll\n   * @returns {typeof BasicRoll} The appropriate roll class\n   */\n  getRollClass(rollType) {\n    const normalizedType = rollType?.toLowerCase();\n    \n    if ([ROLL_TYPES.DAMAGE, ROLL_TYPES.HEALING].includes(normalizedType)) {\n      return CONFIG.Dice.DamageRoll || CONFIG.Dice.BasicRoll;\n    } else if ([ROLL_TYPES.FORMULA, ROLL_TYPES.CUSTOM, ROLL_TYPES.HIT_DIE].includes(normalizedType)) {\n      return CONFIG.Dice.BasicRoll;\n    }\n    \n    return CONFIG.Dice.D20Roll;\n  },\n\n  /**\n   * Check if DC field should be shown for a roll type\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} Whether to show DC field\n   */\n  shouldShowDC(rollType) {\n    const normalizedType = rollType?.toLowerCase();\n    return [\n      ROLL_TYPES.SAVE,\n      ROLL_TYPES.SAVING_THROW,\n      ROLL_TYPES.ABILITY,\n      ROLL_TYPES.ABILITY_CHECK,\n      ROLL_TYPES.CONCENTRATION,\n      ROLL_TYPES.SKILL,\n      ROLL_TYPES.TOOL\n    ].includes(normalizedType);\n  },\n\n  /**\n   * Create base roll configuration for dialog\n   * @param {Actor} actor - The actor to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @returns {Object} Base roll configuration\n   */\n  createBaseRollConfig(actor, rollType, rollKey) {\n    const normalizedType = rollType?.toLowerCase();\n    \n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add roll-specific data\n    switch (normalizedType) {\n      case ROLL_TYPES.SKILL:\n        rollConfig.skill = rollKey;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollConfig.tool = rollKey;\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        rollConfig.ability = rollKey;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        rollConfig.rolls[0].options.flavor = \"Hit Die\";\n        break;\n    }\n    \n    return rollConfig;\n  },\n\n  /**\n   * Create standard message configuration\n   * @param {Actor} actor - The actor creating the message\n   * @param {string} [rollMode] - Optional roll mode to set\n   * @returns {Object} Message configuration\n   */\n  createMessageConfig(actor, rollMode = null) {\n    const config = {\n      create: false,\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    if (rollMode) {\n      config.rollMode = rollMode;\n    }\n    \n    return config;\n  },\n\n  /**\n   * Execute a roll dialog and return the result\n   * @param {Class} DialogClass - The dialog class to instantiate\n   * @param {Object} rollConfig - Roll configuration\n   * @param {Object} messageConfig - Message configuration\n   * @param {Object} dialogOptions - Dialog options\n   * @returns {Promise<Object|null>} Dialog result or null if cancelled\n   */\n  async triggerRollDialog(DialogClass, rollConfig, messageConfig, dialogOptions) {\n    const app = new DialogClass(rollConfig, messageConfig, dialogOptions);\n    \n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest,\n          critical: app.config.critical,\n          isCritical: app.config.isCritical\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    return result;\n  },\n\n  /**\n   * Process dialog result into final roll configuration\n   * @param {Object} result - Result from dialog\n   * @param {Actor[]} actors - Array of actors\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {Object} options - Additional options\n   * @returns {Object|null} Final roll process configuration or null if cancelled\n   */\n  processDialogResult(result, actors, rollType, rollKey, options = {}) {\n    // If no rolls or user cancelled\n    if (!result?.rolls || result.rolls.length === 0) return null;\n    \n    const normalizedType = rollType?.toLowerCase();\n    const firstRoll = result.rolls[0];\n    \n    // Extract advantage mode\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Extract roll data\n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    // Build roll process configuration\n    const rollProcessConfig = {\n      rolls: [{\n        parts: firstRoll?.parts?.slice() || [],\n        data: situational ? { situational } : {},\n        options: target ? { target } : {}\n      }],\n      subject: actors[0],\n      advantage,\n      disadvantage,\n      target,\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipRollDialog: options.skipRollDialog || false,\n      chatMessage: true\n    };\n    \n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = this.determineRollMode(isPublicRollsOn, result.message?.rollMode);\n    rollProcessConfig.rollMode = rollMode;\n    \n    if (result.config?.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedType)) {\n      rollProcessConfig.ability = result.config.ability;\n    }\n    \n    return rollProcessConfig;\n  },\n\n  /**\n   * Determine the final roll mode\n   * @param {boolean} isPublicRollsOn - Whether public rolls setting is enabled\n   * @param {string} messageRollMode - Roll mode from message (user's selection in dialog)\n   * @returns {string} Final roll mode\n   */\n  determineRollMode(isPublicRollsOn, messageRollMode) {\n    // If user explicitly selected a roll mode in the dialog, use it\n    if (messageRollMode) {\n      return messageRollMode;\n    }\n    \n    // Otherwise, use the default based on settings\n    return isPublicRollsOn ? \n      CONST.DICE_ROLL_MODES.PUBLIC : \n      game.settings.get(\"core\", \"rollMode\");\n  },\n\n  /**\n   * Check if actor is player owned\n   * @param {Actor} actor - The actor to check\n   * @returns {boolean} Whether the actor is player owned\n   */\n  isPlayerOwned(actor) {\n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n};\n\n","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID, ROLL_TYPES } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\n\n/**\n * GM Roll Configuration Dialog\n * Extends the standard D&D5e roll configuration dialogs to add DC field and send request toggle\n */\nexport class GMRollConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.D20RollConfigurationDialog) {\n  /**\n   * Create a new GM Roll Configuration Dialog.\n   * @param {BasicRollProcessConfiguration} [config={}] - Process configuration containing rolls array of BasicRollConfiguration objects.\n   * @param {BasicRollMessageConfiguration} [message={}] - Message configuration for chat output.\n   * @param {BasicRollConfigurationDialogOptions} [options={}] - Dialog rendering options.\n   * @param {Actor[]} [options.actors] - Array of actors this roll is being made for.\n   * @param {boolean} [options.sendRequest] - Whether to send this as a roll request to players.\n   * @param {boolean} [options.showDC] - Whether to show the DC input field.\n   * @param {string} [options.rollKey] - The specific roll key (e.g., \"str\" for strength save).\n   * @param {typeof BasicRoll} [options.rollType] - The roll class to use (D20Roll, DamageRoll, etc.).\n   * @param {string} [options.rollTypeString] - The roll type as a string for identification.\n   * @param {object} [options.window] - Window configuration options.\n   * @param {string} [options.window.title] - The window title.\n   * @param {string} [options.window.subtitle] - The window subtitle.\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    super(config, message, options);\n    \n    LogUtil.log('constructor - initializing GM Dialog', [config, message, options]);\n  }\n  \n  /**\n   * Default rendering options for the GM roll configuration dialog.\n   * Extends the parent's default options to add custom CSS classes.\n   * @returns {object} The default options object.\n   * @override\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Get the window title for the dialog.\n   * Uses the window title from options if provided, otherwise falls back to parent implementation.\n   * The parent class constructs the title from options.window.title or uses a default localized string.\n   * @returns {string} The localized window title\n   * @override\n   */\n  get title() {\n    return this.windowTitle || super.title;\n  }\n  \n  /**\n   * Prepare the configuration data for rendering the dialog.\n   * This method is called internally by the parent class during rendering.\n   * Extends parent to add DC and send request options. The parent method prepares\n   * advantage/disadvantage toggles, roll mode selector, and situational bonus field.\n   * @param {BasicRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration containing rolls array\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration with rendering options\n   * @param {BasicRollMessageConfiguration} message - Message configuration for chat output\n   * @returns {Object} The prepared configuration data for rendering with added fields:\n   *   - showDC: Whether to display the DC input field\n   *   - dcValue: The current DC value if set\n   *   - sendRequest: Whether rolls should be sent to players\n   *   - actorCount: Number of actors this roll applies to\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare the rendering context for a specific dialog part.\n   * Adds GM-specific data like DC value and send request option to the configuration part.\n   * The parent method builds the base context for each part (\"configuration\", \"formulas\", \"buttons\").\n   * @param {string} partId - The ID of the part being prepared (\"configuration\", \"formulas\", \"buttons\")\n   * @param {ApplicationRenderContext} context - The rendering context to modify\n   * @param {HandlebarsRenderOptions} options - Options which configure application rendering behavior\n   * @returns {Promise<ApplicationRenderContext>} The modified context with GM-specific data added to configuration part:\n   *   - showDC: Whether to display the DC input field\n   *   - dcValue: The current DC value if set\n   *   - sendRequest: Whether rolls should be sent to players\n   *   - actorCount: Number of actors this roll applies to\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    LogUtil.log('_preparePartContext', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render actions for the dialog.\n   * Injects custom GM fields (DC input, send request checkbox) into the dialog after rendering.\n   * Also attaches event listeners and triggers initial formula rebuild if needed.\n   * @param {ApplicationRenderContext} context - The render context.\n   * @param {HandlebarsRenderOptions} options - Rendering options.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    LogUtil.log('_onRender', [context, options]);\n    super._onRender(context, options);\n    \n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas').parentNode;\n    // }\n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons.\n   * Sets up click handlers for the advantage mode toggle buttons.\n   * Currently logs the action but does not implement custom behavior.\n   * @private\n   */\n  _attachButtonListeners() {\n    LogUtil.log('_attachButtonListeners', [this.element]);\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  \n  /**\n   * Static method to create and display the GM roll configuration dialog.\n   * Creates a BasicRollProcessConfiguration and shows dialog for user configuration.\n   * @param {Actor[]|string[]} actors - Array of Actor documents or actor IDs to roll for\n   * @param {string} rollType - The type of roll (e.g., \"save\", \"ability\", \"skill\", \"tool\")\n   * @param {string} rollKey - The specific roll key (e.g., \"str\" for strength, \"athletics\" for skill)\n   * @param {Object} options - Additional options for dialog configuration\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {number} [options.dcValue] - Initial DC value\n   * @param {boolean} [options.advantage] - Whether to roll with advantage\n   * @param {boolean} [options.disadvantage] - Whether to roll with disadvantage\n   * @param {string} [options.rollMode] - Roll visibility mode\n   * @param {string} [options.situational] - Situational bonus formula\n   * @returns {Promise<BasicRollProcessConfiguration|null>} Process configuration with rolls array, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}) {\n    // Validate and normalize actors\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMRollConfigDialog, initConfiguration', []);\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Determine roll mode based on settings\n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    const showDC = RollHelpers.shouldShowDC(normalizedRollType);\n    const rollClass = RollHelpers.getRollClass(normalizedRollType);\n    const rollConfig = RollHelpers.createBaseRollConfig(actor, rollType, rollKey);\n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        rollTypeString: normalizedRollType,  // Store the roll type string\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...options\n      }\n    };\n    // Execute the dialog\n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    \n    // Process the dialog result\n    const rollProcessConfig = RollHelpers.processDialogResult(result, actors, rollType, rollKey, options);\n    if (!rollProcessConfig) return null;\n    \n    // Handle special case for skills/tools ability selection\n    if (result.config?.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      const defaultAbility = actor.system.skills?.[rollKey]?.ability || CONFIG.DND5E.skills?.[rollKey]?.ability;\n      if (result.config.ability !== defaultAbility) {\n        rollProcessConfig.ability = result.config.ability;\n      }\n    }\n    \n    // Store additional metadata that handlers might need\n    // For skills/tools, regenerate the title with the selected ability\n    let finalTitle = dialogConfig.options.window.title;\n    if (result.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      const selectedAbilityLabel = CONFIG.DND5E.abilities[result.config.ability]?.label || result.config.ability;\n      if (normalizedRollType === ROLL_TYPES.SKILL) {\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        finalTitle = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: selectedAbilityLabel \n        });\n      } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        finalTitle = game.i18n.format(\"DND5E.ToolPromptTitle\", { \n          tool: toolLabel,\n          ability: selectedAbilityLabel \n        });\n      }\n    }\n    \n    rollProcessConfig.rollTitle = finalTitle;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    return rollProcessConfig;\n  }\n  \n  /**\n   * Get a formatted title for the roll type\n   * @private\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {Actor} actor - The actor (used to get default ability for skills)\n   * @returns {string} The formatted title\n   */\n  static _getRollTitle(rollType, rollKey, actor) {\n    LogUtil.log('GMRollConfigDialog._getRollTitle', [rollType, rollKey, actor]);\n    \n    // Log detailed information about title generation\n    LogUtil.log('GMRollConfigDialog._getRollTitle - Detailed', {\n      rollType,\n      rollKey,\n      actorName: actor?.name,\n      actorAbilities: actor?.system?.abilities ? Object.keys(actor.system.abilities) : [],\n      actorSkills: actor?.system?.skills ? Object.keys(actor.system.skills) : [],\n      actorInitAbility: actor?.system?.attributes?.init?.ability\n    });\n    \n    let title = \"\";\n    \n    // Convert rollType to lowercase for comparison\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Log if rollKey is missing for certain types\n    if ([ROLL_TYPES.SAVE, ROLL_TYPES.ABILITY, ROLL_TYPES.ABILITY_CHECK].includes(normalizedRollType) && !rollKey) {\n      LogUtil.warn('Missing rollKey for roll type', [normalizedRollType, rollKey]);\n    }\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        // Get the default ability for this skill\n        const skill = actor?.system.skills?.[rollKey];\n        const defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n        const abilityLabel = CONFIG.DND5E.abilities[defaultAbility]?.label || defaultAbility;\n        // D&D5e format: \"Wisdom (Arcana) Check\"\n        title = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: abilityLabel \n        });\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        const saveAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.SavePromptTitle\", { ability: saveAbility });\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        const checkAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.AbilityPromptTitle\", { ability: checkAbility });\n        break;\n      case ROLL_TYPES.CONCENTRATION:\n        title = game.i18n.localize(\"DND5E.Concentration\");\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        // Get the default ability for this tool\n        const tool = actor?.system.tools?.[rollKey];\n        const toolDefaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n        const toolAbilityLabel = CONFIG.DND5E.abilities[toolDefaultAbility]?.label || toolDefaultAbility;\n        title = game.i18n.format(\"DND5E.ToolPromptTitle\", { \n          tool: toolLabel,\n          ability: toolAbilityLabel\n        });\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        title = game.i18n.localize(\"DND5E.DeathSave\");\n        break;\n      case ROLL_TYPES.INITIATIVE: \n      case ROLL_TYPES.INITIATIVE_DIALOG: // Handle alternate case\n        title = game.i18n.localize(\"DND5E.Initiative\");\n        break;\n      default:\n        title = game.i18n.localize(\"DND5E.Roll\");\n    }\n    LogUtil.log('_getRollTitle', [normalizedRollType, title]);\n    \n    return title;\n  }\n\n  static _getSubtitle(actors = []) {\n    if (actors.length === 1) {\n      return actors[0].name;\n    } else if (actors.length > 1) {\n      return game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.multipleActors\");\n    } else {\n      return \"\";\n    }\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Hit Die Configuration Dialog\n * Extends base RollConfigurationDialog for hit die rolls\n * @extends {dnd5e.applications.dice.RollConfigurationDialog}\n */\nexport class GMHitDieConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.RollConfigurationDialog) {\n  /**\n   * Creates an instance of GMHitDieConfigDialog.\n   * Configures the dialog for hit die rolls with GM-specific options.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration\n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    // Ensure rollType is set to BasicRoll for hit die\n    options.rollType = CONFIG.Dice.BasicRoll || Roll;\n    options.showDC = false; // No DC for hit die rolls\n    \n    super(config, message, options);\n    \n    LogUtil.log('constructor', [config, message, options]);\n  }\n  \n  /**\n   * Get default options for the hit die dialog.\n   * Extends parent options to add hit die specific CSS classes.\n   * @returns {Object} Default dialog options with \"hit-die-config\" class added\n   * @static\n   * @override\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\", \"hit-die-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * Overrides the formula display to show \"Hit Die (varies by actor)\" since\n   * different actors may have different hit die sizes.\n   * @param {BasicRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with custom formula display\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    LogUtil.log('GMHitDieConfigDialog._prepareConfigurationData', [data]);\n    \n    // Override the formula display for hit die\n    data.formula = \"Hit Die (varies by actor)\";\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * Adds send request toggle and actor count to the configuration part.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n      // Override formula display\n      context.formula = \"Hit Die (varies by actor)\";\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * Injects the send request toggle field for GM control.\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    super._onRender(context, options);\n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject send request toggle\n    let configSection = this.element.querySelector('.rolls .formulas');\n    \n    if (configSection && this.actors.length > 0) {\n      const templateData = {\n        showDC: false,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n  }\n  \n  /**\n   * Process form submission data.\n   * Extracts and stores send request preference from the form.\n   * @param {SubmitEvent} event - The submission event\n   * @param {HTMLFormElement} form - The form element\n   * @param {FormDataExtended} formData - Processed form data\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _processSubmitData(event, form, formData) {\n    await super._processSubmitData(event, form, formData);\n    // Store send request preference\n    this.sendRequest = formData.get(\"flash5e-send-request\") !== \"false\";\n    \n    LogUtil.log('_processSubmitData', [formData, this.config]);\n  }\n  \n  /**\n   * Finalize rolls based on the action button clicked.\n   * Stores the send request flag in the configuration.\n   * For hit die rolls, merge situational bonuses into the main formula.\n   * @param {string} action - The action button clicked\n   * @returns {BasicRoll[]} Array of finalized rolls\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    const finalizedRolls = super._finalizeRolls(action);\n    this.config.sendRequest = this.sendRequest;\n    \n    LogUtil.log('GMHitDieConfigDialog._finalizeRolls - before merge', [finalizedRolls]);\n    \n    // // Check if we have multiple rolls (main roll + situational bonus roll)\n    // if (finalizedRolls.length > 1) {\n    //   // Look for a roll that only contains @situational\n    //   const situationalRollIndex = finalizedRolls.findIndex(roll => {\n    //     const parts = roll.terms || roll._formula?.split(/[\\+\\-]/) || [];\n    //     return parts.length === 1 && parts[0]?.toString().trim() === '@situational';\n    //   });\n      \n    //   if (situationalRollIndex !== -1) {\n    //     // Extract the situational value\n    //     const situationalRoll = finalizedRolls[situationalRollIndex];\n    //     const situationalValue = situationalRoll.data?.situational;\n        \n    //     if (situationalValue && finalizedRolls[0]) {\n    //       // Get the base roll formula\n    //       const baseRoll = finalizedRolls[0];\n    //       let baseFormula = baseRoll._formula || baseRoll.formula;\n          \n    //       LogUtil.log('GMHitDieConfigDialog._finalizeRolls - merging', [baseFormula, situationalValue]);\n          \n    //       // Append the situational bonus to the end of the formula\n    //       // This will result in \"max(0, 1d10 + 4) + 3\" format\n    //       baseFormula = `${baseFormula} + ${situationalValue}`;\n          \n    //       // Update the base roll's formula\n    //       baseRoll._formula = baseFormula;\n    //       if (baseRoll.terms) {\n    //         // Re-parse the formula to update terms\n    //         const newRoll = new Roll(baseFormula, baseRoll.data);\n    //         baseRoll.terms = newRoll.terms;\n    //       }\n          \n    //       LogUtil.log('GMHitDieConfigDialog._finalizeRolls - merged formula', [baseFormula]);\n          \n    //       // Remove the separate situational roll\n    //       finalizedRolls.splice(situationalRollIndex, 1);\n    //     }\n    //   }\n    // }\n    \n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the hit die configuration dialog.\n   * Creates appropriate hit die formulas based on each actor's available hit dice.\n   * @param {Actor[]} actors - Array of actors to roll hit dice for\n   * @param {string} rollType - The roll type (should be \"hitdie\")\n   * @param {string} rollKey - Not used for hit die rolls\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @returns {Promise<Object|null>} Configuration with rolls array and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}) {\n    // Validate and normalize actors\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMHitDieConfigDialog, initConfiguration', []);\n    \n    // Determine roll mode based on settings\n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    // Build basic roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {\n          flavor: \"Hit Die Roll\"\n        }\n      }]\n    };\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.BasicRoll || Roll,\n        window: {\n          title: game.i18n.localize(\"DND5E.HitDice\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...options\n      }\n    };\n    \n    // Execute the dialog\n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    \n    if (!result?.rolls || result.rolls.length === 0) return null;\n    \n    LogUtil.log('GMHitDieConfigDialog - dialog result', [result.rolls]);\n    \n    // Process the dialog result\n    const rollProcessConfig = RollHelpers.processDialogResult(result, actors, rollType, rollKey, options);\n    if (!rollProcessConfig) return null;\n    \n    // Add ability if it was selected\n    if (result.config?.ability) {\n      rollProcessConfig.ability = result.config.ability;\n    }\n    \n    return rollProcessConfig;\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID, ROLL_TYPES } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Skill/Tool Configuration Dialog\n * Extends SkillToolRollConfigurationDialog for ability selection\n * @extends {dnd5e.applications.dice.SkillToolRollConfigurationDialog}\n */\nexport class GMSkillToolConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.SkillToolRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMSkillToolConfigDialog.\n   * Forces ability selection and adds GM-specific options.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   *   @param {boolean} [options.showDC=false] - Whether to show DC field\n   *   @param {number} [options.dcValue] - Initial DC value\n   *   @param {string} [options.rollKey] - The skill/tool key being rolled\n   *   @param {string} [options.rollTypeString] - Display name for the roll type\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    const skillConfig = foundry.utils.mergeObject(config, {\n      chooseAbility: true\n    });\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    super(skillConfig, message, options);\n    \n    LogUtil.log('constructor', [config, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * Extends parent to add DC and send request options.\n   * The parent handles ability selection UI for skills and tools.\n   * @param {D20Roll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * Adds GM-specific context data to the configuration part.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    LogUtil.log('_preparePartContext', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * Injects GM-specific form fields (DC and send request toggle).\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    LogUtil.log('_onRender', [context, options]);\n    super._onRender(context, options);\n    \n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    // Try multiple selectors to find the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas fieldset');\n    // }\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('fieldset').parentNode;\n    // }\n    \n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons.\n   * Sets up click handlers for the advantage mode toggle buttons.\n   * Currently logs the action but does not implement custom behavior.\n   * @private\n   */\n  _attachButtonListeners() {\n    LogUtil.log('_attachButtonListeners', []);\n\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  /**\n   * Static method to create and display the skill/tool configuration dialog.\n   * Handles ability selection for skills and tools with GM-specific options.\n   * @param {Actor[]} actors - Array of actors to roll for\n   * @param {string} rollType - The roll type (\"skill\" or \"tool\")\n   * @param {string} rollKey - The specific skill/tool key (e.g., \"athletics\", \"thieves\")\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {number} [options.dcValue] - Initial DC value\n   * @param {string} [options.ability] - Override ability selection\n   * @returns {Promise<Object|null>} Configuration with rolls array, ability selection, and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}) {\n    // Validate and normalize actors\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMSkillToolConfigDialog, initConfiguration', []);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Determine roll mode based on settings\n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    // Determine if we should show DC field\n    const showDC = RollHelpers.shouldShowDC(normalizedRollType);\n    \n    // Skills and tools always use D20Roll\n    const rollClass = CONFIG.Dice.D20Roll;\n    \n    // Get the default ability for the skill or tool\n    let defaultAbility = null;\n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      const skill = actor.system.skills[rollKey];\n      defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      // For tools, check if the actor has a specific ability set for this tool\n      const tool = actor.system.tools?.[rollKey];\n      defaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n    }\n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      ability: defaultAbility,\n      chooseAbility: true,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      rollConfig.skill = rollKey;\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      rollConfig.tool = rollKey;\n    }\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        rollTypeString: normalizedRollType,\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...options\n      }\n    };\n    \n    // Execute the dialog\n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    \n    // Process the dialog result\n    const rollProcessConfig = RollHelpers.processDialogResult(result, actors, rollType, rollKey, options);\n    if (!rollProcessConfig) return null;\n    \n    // Add ability if it was selected\n    if (result.config?.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      rollProcessConfig.ability = result.config.ability;\n    }\n    \n    // Store additional metadata that handlers might need\n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    return rollProcessConfig;\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Damage Roll Configuration Dialog\n * Extends DamageRollConfigurationDialog to add send request toggle\n * @extends {dnd5e.applications.dice.DamageRollConfigurationDialog}\n */\nexport class GMDamageConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.DamageRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMDamageConfigDialog.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    // Ensure the dialog is configured to show\n    const dialogConfig = foundry.utils.mergeObject({\n      configure: true\n    }, config);\n    \n    super(dialogConfig, message, options);\n    \n    LogUtil.log('GMDamageConfigDialog.constructor', [dialogConfig, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"damage-roll\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * @param {DamageRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('GMDamageConfigDialog._prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  \n  /**\n   * Handle initial rendering of the dialog.\n   * @param {ApplicationRenderContext} context - The render context.\n   * @param {HandlebarsRenderOptions} options - Rendering options.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    await super._onRender(context, options);\n    \n    // Inject send request checkbox if we have actors\n    if (this.actors.length > 0) {\n      const buttonGroup = this.element.querySelector('.rolls + .dialog-buttons');\n      if (buttonGroup && !this.element.querySelector('.gm-roll-config-fields')) {\n        const wrapper = document.createElement('div');\n        wrapper.className = 'gm-roll-config-fields';\n        wrapper.innerHTML = `\n          <div class=\"form-group\">\n            <label class=\"checkbox\">\n              <input type=\"checkbox\" name=\"flash5e-send-request\" ${this.sendRequest ? 'checked' : ''}>\n              ${game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.ui.dialogs.sendRequestToPlayers\")}\n            </label>\n          </div>\n        `;\n        buttonGroup.insertAdjacentElement('beforebegin', wrapper);\n      }\n    }\n  }\n\n  /**\n   * Static method to create and display the attack configuration dialog.\n   * SIMPLIFIED VERSION: Matches ability check pattern without attack-specific configs\n   * @param {Actor[]} actors - Array of actors to roll for\n   * @param {string} rollType - The roll type (\"attack\")\n   * @param {string} rollKey - The item ID for the attack\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {Object} originalConfig - The original roll configuration from the intercepted roll\n   * @param {Object} originalDialog - The original dialog configuration from the intercepted roll\n   * @returns {Promise<Object|null>} Configuration with rolls array and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}, originalConfig = {}, originalDialog = {}) {\n    // Validate and normalize actors\n    actors = RollHelpers.validateActors(actors);\n    LogUtil.log('GMDamageConfigDialog, initConfiguration actors', [actors]);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #0', [originalConfig]);\n    \n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn, originalConfig.rollMode);\n    \n    const normalizedRollType = rollType?.toLowerCase();\n    \n    const rollConfig = {\n      subject: originalConfig.subject || actor, \n      data: actor.getRollData(),\n      critical: originalConfig.critical || {},\n      rolls: originalConfig.rolls || [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #1', [rollConfig]);\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #2', [messageConfig]);\n    \n    const { position, ...dialogOptions } = originalDialog?.options || {}; \n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.DamageRoll,\n        rollTypeString: normalizedRollType,\n        window: {\n          title: game.i18n.localize(\"DND5E.DamageRoll\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...dialogOptions,\n        ...options\n      }\n    };\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #3', [dialogConfig]);\n    \n    // Execute the dialog\n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #4', [result]); \n    \n    if (!result?.rolls || result.rolls.length === 0) return null;\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #5', [result]); \n    \n    const firstRoll = result.rolls[0];\n    \n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    const rollProcessConfig = {\n      rolls: [{\n        parts: [],\n        data: situational ? { situational } : {},\n        options: {\n          ...(target && { target }),\n          isCritical: firstRoll?.options?.isCritical || firstRoll?.isCritical || false\n        }\n      }],\n      subject: originalConfig.subject || actor, // Preserve the original activity\n      target,\n      isCritical: firstRoll?.options?.isCritical || firstRoll?.isCritical || false,\n      // Custom flags for the module\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipRollDialog: options.skipRollDialog || false,\n      chatMessage: true\n    };\n    LogUtil.log('GMDamageConfigDialog, initConfiguration #6', [rollProcessConfig]); \n    \n    // Add roll mode - use the one from dialog result to respect user changes\n    const finalRollMode = RollHelpers.determineRollMode(isPublicRollsOn, result.message?.rollMode);\n    rollProcessConfig.rollMode = finalRollMode;\n    \n    // Store additional metadata that handlers might need\n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    LogUtil.log('GMDamageConfigDialog, initConfiguration - result', [rollProcessConfig]);\n    \n    return rollProcessConfig;\n  }\n}","import { LogUtil } from \"../../LogUtil.mjs\";\nimport { MODULE_ID } from \"../../../constants/General.mjs\";\nimport { getSettings } from \"../../../constants/Settings.mjs\";\nimport { SettingsUtil } from \"../../SettingsUtil.mjs\";\nimport { GeneralUtil } from \"../../helpers/GeneralUtil.mjs\";\nimport { RollHelpers } from \"../../helpers/RollHelpers.mjs\";\nimport { GMRollConfigMixin } from \"./GMRollConfigMixin.mjs\";\nimport { GMRollConfigDialog } from \"./GMRollConfigDialog.mjs\";\n\n/**\n * GM Attack Roll Configuration Dialog\n * Extends AttackRollConfigurationDialog to add send request toggle\n * @extends {dnd5e.applications.dice.AttackRollConfigurationDialog}\n */\nexport class GMAttackConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.AttackRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMAttackConfigDialog.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.sendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    super(config, message, options);\n    \n    LogUtil.log('GMAttackConfigDialog.constructor', [config, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * @param {D20Roll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('GMAttackConfigDialog._prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    await super._onRender(context, options);\n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Find the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    \n    if (configSection && this.actors.length > 0) {\n      const templateData = {\n        showDC: false, // Attack rolls don't use DC\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await GeneralUtil.renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n  }\n  \n  /**\n   * Override _finalizeRolls to prevent re-rendering when sendRequest is toggled off\n   * @param {string} action - The action button clicked\n   * @returns {BasicRoll[]} Array of finalized rolls\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    // Store send request preference before calling parent\n    this.config.sendRequest = this.sendRequest;\n    \n    // For attack dialogs, we need to ensure we handle the case properly\n    // when sendRequest is false to prevent re-rendering\n    if (!this.sendRequest && this.config.isRollRequest) {\n      // Reset isRollRequest to prevent interception\n      this.config.isRollRequest = false;\n    }\n    \n    return super._finalizeRolls(action);\n  }\n  \n  /**\n   * Static method to create and display the attack configuration dialog.\n   * SIMPLIFIED VERSION: Matches ability check pattern without attack-specific configs\n   * @param {Actor[]} actors - Array of actors to roll for\n   * @param {string} rollType - The roll type (\"attack\")\n   * @param {string} rollKey - The item ID for the attack\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.sendRequest=true] - Default state for send request toggle\n   * @param {Object} originalConfig - The original roll configuration from the intercepted roll\n   * @param {Object} originalDialog - The original dialog configuration from the intercepted roll\n   * @returns {Promise<Object|null>} Configuration with rolls array and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async initConfiguration(actors, rollType, rollKey, options = {}, originalConfig = {}, originalDialog = {}) {\n    // Validate and normalize actors\n    actors = RollHelpers.validateActors(actors);\n    if (!actors) return null;\n    \n    const actor = actors[0];\n    LogUtil.log('GMAttackConfigDialog, initConfiguration', []);\n    \n    const SETTINGS = getSettings();\n    const isPublicRollsOn = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag) === true;\n    \n    // Normalize rollType\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Build roll configuration - only include what we need\n    const rollConfig = {\n      subject: originalConfig.subject || actor, // Preserve the activity reference\n      data: actor.getRollData(),\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}  // Let the dialog handle attack options\n      }]\n    };\n\n    const rollMode = RollHelpers.determineRollMode(isPublicRollsOn);\n    \n    const messageConfig = RollHelpers.createMessageConfig(actor, rollMode);\n    \n    const { position, ...dialogOptions } = originalDialog?.options || {};\n    // Dialog configuration - merge with original dialog options to preserve attack-specific options\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => RollHelpers.isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.D20Roll,  // Attack rolls use D20\n        rollTypeString: normalizedRollType,\n        window: {\n          title: game.i18n.localize(\"DND5E.Attack\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...dialogOptions,\n        ...options\n      }\n    };\n    \n    // Execute the dialog\n    const result = await RollHelpers.triggerRollDialog(this, rollConfig, messageConfig, dialogConfig.options);\n    LogUtil.log('GMAttackConfigDialog, initConfiguration', [result?.sendRequest]);\n    \n    // If no rolls or user cancelled\n    if (!result?.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Extract roll configuration from the first roll\n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    // Build a proper BasicRollProcessConfiguration (matching ability check pattern)\n    const rollProcessConfig = {\n      rolls: [{\n        parts: [],\n        data: situational ? { situational } : {},\n        options: {\n          ...(target && { target }),\n          // Include attack-specific options from the roll\n          ...(firstRoll?.options?.ammunition && { ammunition: firstRoll.options.ammunition }),\n          ...(firstRoll?.options?.attackMode && { attackMode: firstRoll.options.attackMode }),\n          ...(firstRoll?.options?.mastery !== undefined && { mastery: firstRoll.options.mastery })\n        }\n      }],\n      subject: originalConfig.subject || actor, // Preserve the original activity\n      advantage,\n      disadvantage,\n      target,\n      // Custom flags for our module\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipDialog: options.skipDialogs || false,\n      chatMessage: !GeneralUtil.isModuleOn('midi-qol') || true\n    };\n    \n    // Add roll mode - use the one from dialog result to respect user changes\n    const finalRollMode = RollHelpers.determineRollMode(isPublicRollsOn, result.message?.rollMode);\n    rollProcessConfig.rollMode = finalRollMode;\n    \n    // Store additional metadata that handlers might need\n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    LogUtil.log('GMAttackConfigDialog, initConfiguration - SIMPLIFIED result', [rollProcessConfig]);\n    \n    return rollProcessConfig;\n  }\n}","import { MODULE_ID } from \"../../constants/General.mjs\";\nimport { HooksUtil } from \"../HooksUtil.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\nimport { SettingsUtil } from \"../SettingsUtil.mjs\";\n\n/**\n * Helper functions for module management\n */\nexport class ModuleHelpers {\n  static midiTimeout = null;\n\n  /**\n   * Check if a module is installed and active\n   * @param {string} moduleId - The module ID to check\n   * @returns {boolean} - True if the module is installed and active\n   */\n  static isModuleActive(moduleId) {\n    const module = game.modules.get(moduleId);\n    return module && module.active;\n  }\n\n  /**\n   * Get the MidiQOL API if available\n   * @returns {Object|null} - The MidiQOL API or null if not available\n   */\n  static getMidiQOL() {\n    if (this.isModuleActive('midi-qol') && typeof MidiQOL !== 'undefined') {\n      return MidiQOL;\n    }\n    return null;\n  }\n\n  /**\n   * Set MidiQOL settings temporarily\n   * These settings are available as per MidiQOL docs\n   * lateTargeting: boolean to force enable/disable target confirmation for the items workflow\n   * autoRollAttack: boolean force enable/disable auto rolling of the attack,\n   * autoFastAttack: boolean force enable/disable fast forwarding of the attack\n   * autoRollDamage: string (always, onHit, none)\n   * autoFastDamage: boolean force enable/disable fastForward of the damage roll.\n   */\n  static async prepareMidiQOLSettings(){\n    let previousSettings = null;\n    LogUtil.log(\"prepareMidiQOLSettings #0\", [game.settings]);\n    \n    if(ModuleHelpers.isModuleActive(\"midi-qol\")){\n      LogUtil.log(\"prepareMidiQOLSettings #1\", [MidiQOL]);\n      previousSettings = {\n        autoFastForwardAbilityRolls: SettingsUtil.get(\"AutoFastForwardAbilityRolls\", \"midi-qol\"),\n        // configSettings: SettingsUtil.get(\"ConfigSettings\", \"midi-qol\")\n      }\n\n      clearTimeout(ModuleHelpers.midiTimeout);\n      ModuleHelpers.midiTimeout = setTimeout(() => {\n        if(previousSettings){\n          SettingsUtil.set(\"AutoFastForwardAbilityRolls\", previousSettings.autoFastForwardAbilityRolls, \"midi-qol\");\n          // SettingsUtil.set(\"ConfigSettings\", previousSettings.configSettings, \"midi-qol\");\n        }\n\n        LogUtil.log(\"prepareMidiQOLSettings #timeout 1\", [game.user.getFlag(MODULE_ID, 'savedMidiQOLSettings')]);\n        game.user.unsetFlag(MODULE_ID, 'savedMidiQOLSettings');\n        LogUtil.log(\"prepareMidiQOLSettings #timeout 2\", [game.user.getFlag(MODULE_ID, 'savedMidiQOLSettings')]);\n      }, 4000);\n\n      try{\n        LogUtil.log(\"prepareMidiQOLSettings #before\", [SettingsUtil.get(\"AutoFastForwardAbilityRolls\", \"midi-qol\")]);\n        await game.user.setFlag(MODULE_ID, 'savedMidiQOLSettings', previousSettings);\n        await SettingsUtil.set(\"AutoFastForwardAbilityRolls\", false, \"midi-qol\");\n        LogUtil.log(\"prepareMidiQOLSettings #after\", [SettingsUtil.get(\"AutoFastForwardAbilityRolls\", \"midi-qol\"), MidiQOL]);\n        // await SettingsUtil.set(\"ConfigSettings\", {\n        //   ...previousSettings.configSettings,\n        //   autoRollAttack: false,\n        //   autoRollDamage: false\n        // }, \"midi-qol\");\n      } catch(error){\n        LogUtil.error(\"prepareMidiQOLSettings\", [error]);\n      } finally {\n        LogUtil.log(\"prepareMidiQOLSettings - saved temporary settings for MidiQOL\", []);\n      }\n    }\n    return;\n  }\n\n\n}","import { LogUtil } from './LogUtil.mjs';\nimport { ROLL_TYPES, MODULE_ID, ACTIVITY_TYPES } from '../constants/General.mjs';\nimport { ModuleHelpers } from './helpers/ModuleHelpers.mjs';\n\n/**\n * @typedef {Object} ActivityUseConfiguration\n * @property {object|false} create\n * @property {boolean} create.measuredTemplate - Should this item create a template?\n * @property {object} concentration\n * @property {boolean} concentration.begin - Should this usage initiate concentration?\n * @property {string|null} concentration.end - ID of an active effect to end concentration on.\n * @property {object|false} consume\n * @property {boolean} consume.action - Should action economy be tracked? Currently only handles legendary actions.\n * @property {boolean|number[]} consume.resources - Set to `true` or `false` to enable or disable all resource\n *                                                   consumption or provide a list of consumption target indexes\n *                                                   to only enable those targets.\n * @property {boolean} consume.spellSlot - Should this spell consume a spell slot?\n * @property {Event} event - The browser event which triggered the item usage, if any.\n * @property {boolean|number} scaling - Number of steps above baseline to scale this usage, or `false` if\n *                                      scaling is not allowed.\n * @property {object} spell\n * @property {number} spell.slot - The spell slot to consume.\n * @property {boolean} [subsequentActions=true] - Trigger subsequent actions defined by this activity.\n * @property {object} [cause]\n * @property {string} [cause.activity] - Relative UUID to the activity that caused this one to be used.\n *                                       Activity must be on the same actor as this one.\n * @property {boolean|number[]} [cause.resources] - Control resource consumption on linked item.\n * @property {BasicRollConfiguration[]} [rolls] - Roll configurations for this activity\n */\n\n/**\n * Utility class for handling D&D5e 4.x activities\n */\nexport class ActivityUtil {\n  \n  /**\n   * Find the appropriate activity for a given roll type on an item\n   * @param {Item5e} item - The item to search for activities\n   * @param {string} rollType - The type of roll (attack, damage, itemSave)\n   * @returns {Activity5e|null} - The found activity or null\n   */\n  static findActivityForRoll(item, rollType) {\n    if (!item?.system?.activities) return null;\n    \n    const activities = item.system.activities;\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.ATTACK:\n        const attackActivities = activities.getByType(\"attack\");\n        return attackActivities?.[0] || null;\n        \n      case ROLL_TYPES.DAMAGE:\n        const damageAttackActivities = activities.getByType(\"attack\");\n        if (damageAttackActivities?.length > 0) return damageAttackActivities[0];\n        \n        const damageActivities = activities.getByType(\"damage\");\n        if (damageActivities?.length > 0) return damageActivities[0];\n        \n        const saveActivities = activities.getByType(\"save\");\n        if (saveActivities?.length > 0) return saveActivities[0];\n        \n        return null;\n        \n      case ROLL_TYPES.ITEM_SAVE:\n        const itemSaveActivities = activities.getByType(\"save\");\n        return itemSaveActivities?.[0] || null;\n        \n      default:\n        return null;\n    }\n  }\n  \n  /**\n   * Get all activities of a specific type from an item\n   * @param {Item5e} item - The item to search\n   * @param {string} activityType - The activity type (attack, damage, save, etc.)\n   * @returns {Activity5e[]} - Array of activities\n   */\n  static getActivitiesByType(item, activityType) {\n    if (!item?.system?.activities) return [];\n    return item.system.activities.getByType(activityType);\n  }\n  \n  /**\n   * Check if an item has activities suitable for a given roll type\n   * @param {Item5e} item - The item to check\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} - Whether the item has suitable activities\n   */\n  static hasActivityForRoll(item, rollType) {\n    LogUtil.log('hasActivityForRoll', [item, rollType]);\n    return !!this.findActivityForRoll(item, rollType);\n  }\n  \n  /**\n   * Execute a roll using the appropriate activity method\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {string} itemId - The item ID\n   * @param {string} activityId - The activity ID (optional)\n   * @param {Object} config - Roll configuration\n   * @param {ActivityUseConfiguration} config.usage - Activity usage configuration\n   * @param {BasicRollDialogConfiguration} config.dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} config.message - Message configuration\n   */\n  static async executeActivityRoll(actor, rollType, itemId, activityId, config) {\n    LogUtil.log('executeActivityRoll', [actor, rollType, itemId, activityId, config]);\n    const isMidiActive = ModuleHelpers.isModuleActive('midi-qol');\n    const item = actor.items.get(itemId);\n    if (!item) {\n      throw new Error(`Item ${itemId} not found on actor ${actor.name}`);\n    }\n    \n    let activity = null;\n    let damageConfig = null;\n    \n    // If activity ID provided, use it directly\n    if (activityId) {\n      activity = item.system.activities?.get(activityId);\n    }\n    activity = activity || this.findActivityForRoll(item, rollType);\n\n    if (!activity) {\n      throw new Error(`Activity not found on item ${item.name}`);\n    }\n    LogUtil.log('executeActivityRoll - activity', [activity, rollType]);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Execute the roll based on type\n    if (activity) {\n      // if(!isMidiActive) {\n      //   config.message.create = true;\n      // }\n      switch (normalizedRollType) {\n        case ROLL_TYPES.ATTACK:\n          LogUtil.log('executeActivityRoll - is attack activity', [config]);\n          \n          // Workaround for _triggerSubsequentActions stripping off usage config\n          // Store request configuration in flags and retrieve in the preRollAttackV2 hook\n          const rollRequestConfig = {\n            attackMode: config.usage.attackMode,\n            ammunition: config.usage.ammunition,\n            mastery: config.usage.mastery,\n            situational: config.usage.rolls?.[0]?.data?.situational,\n            advantage: config.usage.advantage,\n            disadvantage: config.usage.disadvantage,\n            rollMode: config.message?.rollMode\n          };\n          await activity.item.setFlag(MODULE_ID, 'tempAttackConfig', rollRequestConfig);\n          \n          LogUtil.log('executeActivityRoll - stored temp config as flag', [rollRequestConfig]);\n          \n          try {\n            config.message.create = true;\n            await activity.use(config.usage, config.dialog, config.message);\n            LogUtil.log('CRLNGN TEST', [config]);\n            if(isMidiActive) {\n              const MidiQOL = ModuleHelpers.getMidiQOL();\n              if (MidiQOL) {\n                // const workflow = await ActivityUtil.syntheticItemRoll(item, {\n                //   ...config,\n                //   midiOptions: {\n                //     autoFastAttack: false,\n                //     autoFastDamage: false,\n                //     autoRollAttack: false,\n                //     autoRollDamage: false\n                //   }\n                // });\n                return\n              }\n            }\n          } catch (error) {\n            LogUtil.error('executeActivityRoll - attack roll error', [error]);\n          } finally {\n            // Only clean up the flag if we set it\n            await activity.item.unsetFlag(MODULE_ID, 'tempAttackConfig');\n          }\n          return;\n        case ROLL_TYPES.DAMAGE:\n          LogUtil.log('executeActivityRoll - damage roll', [activity, config]);\n          if(!isMidiActive) {\n            config.message.create = true;\n          }\n          // Extract the roll configuration from the usage config\n          damageConfig = {\n            critical: config.usage.critical || {},\n            situational: config.usage.rolls[0].data.situational || \"\",\n            rollMode: config.message?.rollMode,\n            create: config.message?.create !== false\n          };\n\n          if(activity.type === ACTIVITY_TYPES.SAVE || activity?.damageOnly){\n            await activity.use(config.usage, config.dialog, config.message);\n          }\n          await activity.item.setFlag(MODULE_ID, 'tempDamageConfig', damageConfig);\n          LogUtil.log('executeActivityRoll - damage config with situational', [damageConfig]);\n          \n          try {\n            if(isMidiActive) {\n              const MidiQOL = ModuleHelpers.getMidiQOL();\n              if (MidiQOL) {\n                const workflow = MidiQOL.Workflow?.getWorkflow(activity.uuid);\n                const damageRoll = await workflow.activity.rollDamage({\n                  ...config,\n                  workflow: workflow,\n                  // autoFastAttack: false,\n                  // autoFastDamage: false,\n                  // autoRollAttack: false,\n                  // autoRollDamage: false\n                });\n                // await activity.rollDamage(damageConfig, config.dialog, config.message);\n\n                return;\n              }\n            }else{\n              // if(activity?.previousAttack || activity?.damageOnly) {\n              await activity.rollDamage(damageConfig, config.dialog, config.message);\n              // }\n            }\n          } catch (error) {\n            LogUtil.error(['executeActivityRoll - damage roll error', error]);\n          } finally {\n            await activity.item.unsetFlag(MODULE_ID, 'tempDamageConfig');\n          }\n          return;\n        // case ROLL_TYPES.ITEM_SAVE:\n        //   // if(ModuleHelpers.isModuleActive('midi-qol')) {\n        //   //   const MidiQOL = ModuleHelpers.getMidiQOL();\n        //   //   if (MidiQOL) {\n        //   //     const workflow = MidiQOL.Workflow?.getWorkflow(activity.uuid);\n        //   //     const damageRoll = await workflow.activity.rollDamage({\n        //   //       ...config,\n        //   //       workflow: workflow\n        //   //     });\n        //   //     return;\n        //   //   }\n        //   // }\n\n        //   // we need to check if the activity has a previous attack\n        //   // or if it is a damage only roll, like from a spell with save\n        //   LogUtil.log('executeActivityRoll - save damage roll', [activity, config]);\n          \n        //   // Extract the roll configuration from the usage config\n        //   damageConfig = {\n        //     critical: config.usage.critical || {},\n        //     situational: config.usage.rolls[0].data.situational || \"\",\n        //     rollMode: config.message?.rollMode,\n        //     create: config.message?.create !== false\n        //   };\n\n        //   await activity.item.setFlag(MODULE_ID, 'tempDamageConfig', damageConfig);\n        //   LogUtil.log('executeActivityRoll - savedamage config with situational', [damageConfig]);\n        //   try {\n        //     await activity.use(config.usage, config.dialog, {\n        //       ...config.message,\n        //       create: true\n        //     });\n        //     await activity.rollDamage(damageConfig, config.dialog, config.message);\n        //   } catch (error) {\n        //     LogUtil.error(['executeActivityRoll - save damage roll error', error]);\n        //   } finally {\n        //     await activity.item.unsetFlag(MODULE_ID, 'tempDamageConfig');\n        //   }\n        //   return;\n        //   // // For save activities, use the item's use() method to show the save card\n        //   // return await item.use({ activity: activity.id }, { skipRollDialog: config.fastForward });\n        default:\n          LogUtil.log('executeActivityRoll - unknown roll type', [normalizedRollType]);\n          return;\n      }\n    }\n      \n    throw new Error(`No suitable method found for ${normalizedRollType} on item ${item.name}`);\n  }\n  \n  /**\n   * Get display information for an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {Object} - Display information\n   */\n  static getActivityDisplayInfo(activity) {\n    LogUtil.log('getActivityDisplayInfo', [activity]);\n    if (!activity) return null;\n    \n    return {\n      name: activity.name || activity.constructor.metadata.label,\n      type: activity.type,\n      icon: activity.constructor.metadata.icon,\n      canAttack: activity.type === 'attack',\n      canDamage: ['attack', 'damage', 'save'].includes(activity.type),\n      canSave: activity.type === 'save'\n    };\n  }\n  \n  /**\n   * Get damage formula string from an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {string|null} - Combined damage formula or null\n   */\n  static getDamageFormula(activity) {\n    LogUtil.log('getDamageFormula', [activity]);\n    if (!activity?.damage?.parts?.length) return null;\n    \n    // Extract all damage formulas and combine them\n    const formulas = activity.damage.parts.map(part => part.formula).filter(f => f);\n    return formulas.length > 0 ? formulas.join(' + ') : null;\n  }\n\n  static async syntheticItemRoll(item, config = {}) {\n    LogUtil.log('syntheticItemRoll', [item, config]);\n    \n    const MidiQOL = ModuleHelpers.getMidiQOL();\n    if (!MidiQOL) {\n      LogUtil.warn('MidiQOL is not active');\n      return;\n    }\n    \n    let defaultConfig = {\n        consumeUsage: false,\n        consumeSpellSlot: false\n    };\n    let defaultOptions = {\n      fastForward: false,\n      fastForwardAttack: false,\n      dialogOptions: {\n        fastForward: false,\n        fastForwardAttack: false,\n        // fastForwardDamage: false\n      },\n      // targetUuids: targets.map(i => i.document.uuid),\n      configureDialog: true,\n      // ignoreUserTargets: true,\n      workflowOptions: {\n        // autoRollAttack: false,\n        // autoFastAttack: false,\n        // autoRollDamage: 'none',\n        // autoFastDamage: false,\n        fastForward: false,\n        fastForwardAttack: false,\n        // fastForwardDamage: false\n      }\n    };\n\n    // options = genericUtils.mergeObject(defaultOptions, options);\n    config = {...defaultConfig, ...config};\n    return await MidiQOL.completeItemUse(item, config, defaultOptions);\n  }\n\n  // static async replaceDamage(workflow, formula, {ignoreCrit = false, damageType} = {}) {\n  //   formula = String(formula);\n  //   if (workflow.isCritical && !ignoreCrit) formula = await rollUtils.getCriticalFormula(formula, workflow.item.getRollData());\n  //   let roll = await new CONFIG.Dice.DamageRoll(formula).evaluate();\n\n  //   await workflow.setDamageRolls([roll]);\n    \n  //   return roll;\n  // }\n}","import { MODULE } from \"../../constants/General.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\n\n/**\n * Custom Roll Dialog - ApplicationV2 component for custom roll formulas\n */\nconst { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api;\nexport class CustomRollDialog extends HandlebarsApplicationMixin(ApplicationV2) {\n  constructor(options = {}) {\n    super(options);\n    this.formula = options.formula || \"\";\n    this.readonly = options.readonly || false;\n    this.actor = options.actor;\n    this.callback = options.callback;\n    this.diceCounts = {};\n  }\n\n  /**\n   * Default application configuration\n   */\n  static get DEFAULT_OPTIONS() {\n    return foundry.utils.mergeObject(super.DEFAULT_OPTIONS, {\n      id: \"flash5e-custom-roll-dialog\",\n      classes: [\"flash5e-dialog\", \"flash5e-custom-roll-dialog\"],\n      tag: \"div\",\n      window: {\n        title: \"CRLNGN_ROLLS.ui.dialogs.customRollTitle\",\n        icon: \"fas fa-dice-d20\",\n        resizable: false,\n        positioned: true,\n        frame: true\n      },\n      position: {\n        width: 420,\n        height: \"auto\"\n      }\n    });\n  }\n  \n  /**\n   * Override to handle action clicks\n   */\n  _onClickAction(event, target) {\n    const action = target.dataset.action;\n    switch (action) {\n      case \"rollDice\":\n        return this.rollDice(event, target);\n      case \"addDie\":\n        return this.addDie(event, target);\n      case \"cancel\":\n        return this.cancel(event, target);\n    }\n  }\n\n  /**\n   * Prepare application rendering context\n   */\n  async _prepareContext(options = {}) {\n    const context = await super._prepareContext(options);\n    return {\n      ...context,\n      formula: this.formula,\n      readonly: this.readonly\n    };\n  }\n\n  /**\n   * Define template parts\n   */\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/custom-roll-dialog.hbs`\n    },\n    footer: {\n      template: `modules/${MODULE.ID}/templates/custom-roll-dialog-footer.hbs`\n    }\n  };\n\n  /**\n   * Add event listeners\n   */\n  _attachPartListeners(partId, htmlElement, options) {\n    super._attachPartListeners(partId, htmlElement, options);\n    \n    const formulaInput = htmlElement.querySelector('#custom-roll-formula');\n    const validationMessage = htmlElement.querySelector('#formula-validation-message');\n    \n    if (formulaInput && !this.readonly) {\n      // Update internal formula on input change and validate\n      formulaInput.addEventListener('input', (event) => {\n        this.formula = event.target.value.trim();\n        this.updateValidationMessage(validationMessage);\n      });\n      \n      // Validate on initial load if there's a formula\n      if (this.formula) {\n        this.updateValidationMessage(validationMessage);\n      }\n    }\n  }\n  \n  /**\n   * Update the validation message based on formula validity\n   * @param {HTMLElement} messageElement - The validation message element\n   */\n  updateValidationMessage(messageElement) {\n    if (!messageElement) return;\n    \n    if (!this.formula) {\n      messageElement.textContent = '&nbsp;';\n      messageElement.classList.remove('error', 'success');\n      return;\n    }\n    \n    const isValid = this.validateFormula(this.formula);\n    \n    if (isValid) {\n      messageElement.textContent = game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.formulaValid\");\n      messageElement.classList.remove('error');\n      messageElement.classList.add('success');\n    } else {\n      messageElement.textContent = game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.formulaInvalid\");\n      messageElement.classList.remove('success');\n      messageElement.classList.add('error');\n    }\n  }\n\n  /**\n   * Handle dice button click\n   * @param {Event} event\n   * @param {HTMLElement} target\n   */\n  addDie(event, target) {\n    const die = target.dataset.die;\n    \n    // Get current formula from input field\n    const formulaInput = this.element.querySelector('#custom-roll-formula');\n    if (!formulaInput) return;\n    \n    const currentFormula = formulaInput.value.trim();\n    \n    // Parse the current formula to consolidate dice\n    if (currentFormula) {\n      // Regular expression to find dice expressions (e.g., 2d6, d8, 1d20)\n      const diceRegex = /(\\d*)d(\\d+)/g;\n      const diceMap = new Map();\n      \n      // Parse existing dice in the formula\n      let remainingFormula = currentFormula;\n      let match;\n      \n      while ((match = diceRegex.exec(currentFormula)) !== null) {\n        const count = parseInt(match[1] || '1');\n        const dieType = match[2];\n        diceMap.set(dieType, (diceMap.get(dieType) || 0) + count);\n        remainingFormula = remainingFormula.replace(match[0], '').trim();\n      }\n      \n      // Add the new die\n      const newDieType = die.substring(1); // Remove 'd' prefix\n      diceMap.set(newDieType, (diceMap.get(newDieType) || 0) + 1);\n      \n      // Rebuild the formula\n      const diceParts = [];\n      for (const [dieType, count] of diceMap) {\n        diceParts.push(`${count}d${dieType}`);\n      }\n      \n      // Clean up remaining formula (remove extra + signs)\n      remainingFormula = remainingFormula.replace(/^\\+\\s*|\\s*\\+\\s*$|\\s*\\+\\s*\\+/g, '').trim();\n      \n      // Combine dice and remaining formula\n      if (remainingFormula && remainingFormula !== '+') {\n        this.formula = `${diceParts.join(' + ')} + ${remainingFormula}`;\n      } else {\n        this.formula = diceParts.join(' + ');\n      }\n    } else {\n      // If empty, just add the die\n      this.formula = `1${die}`;\n    }\n    \n    // Update the input field\n    formulaInput.value = this.formula;\n    \n    // Trigger input event to update validation\n    formulaInput.dispatchEvent(new Event('input'));\n  }\n\n  /**\n   * Validate the formula using Roll.validate\n   * @param {string} formula\n   * @returns {boolean}\n   */\n  validateFormula(formula) {\n    if (!formula || formula.trim() === \"\") return false;\n    \n    try {\n      // Use Roll.validate to check if the formula is valid\n      return Roll.validate(formula);\n    } catch (error) {\n      // If Roll.validate doesn't exist or throws, try creating a roll\n      try {\n        new Roll(formula, this.actor?.getRollData() || {});\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Handle roll button click\n   */\n  async rollDice() {\n    LogUtil.log('rollDice');\n    \n    // Validate the formula\n    if (!this.validateFormula(this.formula)) {\n      ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {\n        formula: this.formula || \"empty\"\n      }));\n      return;\n    }\n    \n    // Call the callback if provided\n    if (this.callback) {\n      await this.callback(this.formula);\n    }\n    \n    this.close();\n  }\n\n  /**\n   * Handle cancel button click\n   */\n  cancel() {\n    this.close();\n  }\n\n  /**\n   * Show the dialog and return a promise for the formula\n   * @param {Object} options\n   * @returns {Promise<string|null>}\n   */\n  static async prompt(options = {}) {\n    return new Promise((resolve) => {\n      const dialog = new this({\n        ...options,\n        callback: (formula) => resolve(formula)\n      });\n      \n      dialog.addEventListener(\"close\", () => {\n        // If closed without a formula, resolve with null\n        if (!dialog._resolved) {\n          resolve(null);\n        }\n      });\n      \n      dialog.render(true);\n    });\n  }\n\n  /**\n   * Override close to track resolution\n   */\n  async close(options = {}) {\n    this._resolved = true;\n    return super.close(options);\n  }\n}","/**\n * Helper functions for the Flash Rolls 5e module\n */\nimport { MODULE, ROLL_TYPES } from '../../constants/General.mjs';\nimport { GeneralUtil } from './GeneralUtil.mjs';\n\n/**\n * Get display name for roll type with optional details\n * @param {string} rollType - The type of roll\n * @param {string} rollKey - Optional key for the specific roll (ability, skill, etc.)\n * @returns {string} Formatted display string\n */\nexport function getRollTypeDisplay(rollType, rollKey) {\n  let display = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollType}`) || rollType;\n  \n  // Normalize rollType to lowercase for consistent comparisons\n  const normalizedRollType = rollType?.toLowerCase();\n  \n  if (rollKey) {\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        display += ` (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.SAVE:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.ABILITY:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          display += ` (${toolItem?.name || rollKey})`;\n        } else {\n          display += ` (${rollKey})`;\n        }\n        break;\n      case ROLL_TYPES.CUSTOM:\n        display = `${display}: ${rollKey}`;\n        break;\n    }\n  }\n  \n  return display;\n}\n\n/**\n * Show batched notifications to player\n * @param {Array} pendingNotifications - Array of notification objects\n * @param {Function} getRollTypeDisplayFn - Function to get roll type display (default: getRollTypeDisplay)\n */\nexport function showBatchedNotifications(pendingNotifications, getRollTypeDisplayFn = getRollTypeDisplay) {\n  if (pendingNotifications.length === 0) return;\n  \n  // Group by roll type\n  const notificationsByType = {};\n  for (const notif of pendingNotifications) {\n    const key = `${notif.rollType}_${notif.rollKey || ''}`;\n    if (!notificationsByType[key]) {\n      notificationsByType[key] = {\n        rollType: notif.rollType,\n        rollKey: notif.rollKey,\n        actors: [],\n        gm: notif.gm\n      };\n    }\n    notificationsByType[key].actors.push(notif.actor);\n  }\n  \n  const entries = Object.values(notificationsByType);\n  if (entries.length === 1 && entries[0].actors.length === 1) {\n    // Single roll request - use original format\n    const entry = entries[0];\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived', {\n      gm: entry.gm,\n      rollType: getRollTypeDisplayFn(entry.rollType, entry.rollKey)\n    }));\n  } else {\n    // Multiple requests - create consolidated message\n    const messages = [];\n    for (const entry of entries) {\n      const rollTypeDisplay = getRollTypeDisplayFn(entry.rollType, entry.rollKey);\n      const actorNames = entry.actors.join(\", \");\n      messages.push(`${rollTypeDisplay} (${actorNames})`);\n    }\n    \n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestsReceivedMultiple', {\n      gm: entries[0].gm,\n      requests: messages.join(\"; \")\n    }));\n  }\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {User|null} The player owner, or null if not player-owned\n */\nexport function getPlayerOwner(actor) {\n  const ownership = actor.ownership || {};\n  \n  for (const [userId, level] of Object.entries(ownership)) {\n    if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n      const user = game.users.get(userId);\n      if (user && !user.isGM) {\n        return user;\n      }\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Get actor stats for display (ability scores and modifiers)\n * @param {Actor} actor - The actor to get stats for\n * @returns {Array} Array of stat objects with name, value, and modifier\n */\nexport function getActorStats(actor) {\n  if (!actor?.system?.abilities) return [];\n  \n  return Object.entries(actor.system.abilities).map(([key, ability]) => ({\n    name: key.toUpperCase(),\n    value: ability.value || 10,\n    modifier: ability.mod >= 0 ? `+${ability.mod}` : `${ability.mod}`\n  }));\n}\n\n/**\n * Apply target tokens to user\n * @param {Array<string>} tokenIds - Array of token IDs to target\n * @param {User} user - User to apply targets for (default: game.user)\n */\nexport function applyTargetTokens(tokenIds, user = game.user) {\n  if (!tokenIds?.length) return;\n  \n  const tokens = tokenIds\n    .map(id => canvas.tokens.get(id))\n    .filter(t => t);\n    \n  tokens.forEach(t => t.setTarget(true, { user }));\n}\n\n/**\n * Clear all target tokens for user\n * @param {User} user - User to clear targets for (default: game.user)\n */\nexport function clearTargetTokens(user = game.user) {\n  user.targets.forEach(t => t.setTarget(false, { user }));\n}\n\n/**\n * Format a notification message for multiple actors\n * @param {Array<string>} actorNames - Array of actor names\n * @param {string} action - The action being performed\n * @returns {string} Formatted message\n */\nexport function formatMultiActorNotification(actorNames, action) {\n  if (actorNames.length === 0) return \"\";\n  if (actorNames.length === 1) return `${actorNames[0]} ${action}`;\n  \n  const and = game.i18n.localize(\"CRLNGN_ROLLS.common.and\");\n  \n  if (actorNames.length === 2) return `${actorNames[0]} ${and} ${actorNames[1]} ${action}`;\n  \n  const lastActor = actorNames[actorNames.length - 1];\n  const otherActors = actorNames.slice(0, -1).join(\", \");\n  return `${otherActors}, ${and} ${lastActor} ${action}`;\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if owned by a player\n */\nexport function isPlayerOwned(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  return Object.entries(actor.ownership)\n    .some(([userId, level]) => {\n      const user = game.users.get(userId);\n      return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n    });\n}\n\n/**\n * Check if actor has token in current scene\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if actor has token in current scene\n */\nexport function hasTokenInScene(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  const currentScene = game.scenes.active;\n  return currentScene && currentScene.tokens.some(token => token.actorId === actor.id);\n}\n\n/**\n * Update token selection on canvas based on actor selection\n * @param {string} actorId - The actor ID\n * @param {boolean} selected - Whether to select or deselect\n */\nexport function updateCanvasTokenSelection(actorId, selected) {\n  const scene = game.scenes.active;\n  if (!scene) return;\n  \n  // Find all tokens for this actor in the current scene\n  const tokens = canvas.tokens.placeables.filter(t => t.actor?.id === actorId);\n  \n  for (const token of tokens) {\n    if (selected) {\n      // Add to selection without clearing others\n      token.control({ releaseOthers: false });\n    } else {\n      // Release this token\n      token.release();\n    }\n  }\n}\n\n/**\n * Delay execution for a specified time\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise} Promise that resolves after the delay\n */\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Check if the sidebar is expanded\n * @returns {boolean} True if sidebar is expanded\n */\nexport function isSidebarExpanded() {\n  return ui?.sidebar?.expanded || false;\n}\n\n/**\n * Update body class based on sidebar state\n * @param {boolean} isExpanded - Whether sidebar is expanded\n */\nexport function updateSidebarClass(isExpanded) {\n  const body = document.querySelector(\"body\"); \n  if (isExpanded) {\n    body.classList.add(\"flash5e-sidebar-expanded\"); \n  } else {\n    body.classList.remove(\"flash5e-sidebar-expanded\"); \n  }\n  adjustMenuOffset();\n}\n\n/**\n * Build roll types array for a selected request type\n * @param {string} selectedRequestType - The type of roll request\n * @param {Set} selectedActors - Set of selected actor IDs\n * @returns {Array} Array of roll type objects with id, name, and rollable properties\n */\nexport function buildRollTypes(selectedRequestType, selectedActors) {\n  const rollTypes = [];\n  \n  if (!selectedRequestType || selectedActors.size === 0) {\n    return rollTypes;\n  }\n  \n  const selectedOption = MODULE.ROLL_REQUEST_OPTIONS[selectedRequestType];\n  if (!selectedOption || !selectedOption.subList) {\n    return rollTypes;\n  }\n  \n  // Get first selected actor as reference for available options\n  const firstActorId = Array.from(selectedActors)[0];\n  const actor = game.actors.get(firstActorId);\n  \n  // Special handling for tools - show all available tools\n  if (selectedOption.subList === 'tools') {\n    // Get all tools from CONFIG.DND5E.tools or enrichmentLookup\n    const allTools = CONFIG.DND5E.enrichmentLookup?.tools || CONFIG.DND5E.tools || {};\n    \n    for (const [key, toolData] of Object.entries(allTools)) {\n      let label = key;\n      \n      // Use enrichmentLookup to get tool UUID and then fetch the name\n      if (toolData?.id) {\n        // Get the tool name using Trait.getBaseItem\n        const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n        label = toolItem?.name || key;\n      }\n      // Fallback - format the key\n      else {\n        label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n      }\n      \n      rollTypes.push({\n        id: key,\n        name: label,\n        rollable: true\n      });\n    }\n    \n    // Sort tools alphabetically by name\n    rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n  }\n  // For other types, use actor data\n  else if (actor && selectedOption.actorPath) {\n    const rollData = foundry.utils.getProperty(actor, selectedOption.actorPath) || {};\n    \n    // Check if we should use CONFIG.DND5E for enrichment\n    const configData = CONFIG.DND5E[selectedOption.subList];\n    \n    for (const [key, data] of Object.entries(rollData)) {\n      let label = '';\n      \n      // For skills, use CONFIG.DND5E.skills for full names\n      if (selectedOption.subList === 'skills' && configData?.[key]) {\n        label = configData[key].label;\n      }\n      // For abilities (saving throws), use the label from data\n      else if (selectedOption.subList === 'abilities' && configData?.[key]) {\n        label = configData[key].label;\n      }\n      // Default fallback\n      else {\n        label = data.label || game.i18n.localize(data.name || key) || key;\n      }\n      \n      rollTypes.push({\n        id: key,\n        name: label,\n        rollable: true\n      });\n    }\n    \n    // Sort skills alphabetically by name\n    if (selectedOption.subList === 'skills') {\n      rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n    }\n  }\n  \n  return rollTypes;\n}\n\n/**\n * Unified notification system with batching support\n */\nexport class NotificationManager {\n  static pendingNotifications = [];\n  static notificationTimer = null;\n  static NOTIFICATION_BATCH_DELAY = 500; // ms to wait for additional notifications\n  \n  /**\n   * Show a notification with optional batching for roll requests\n   * @param {string} type - Notification type (info, warn, error)\n   * @param {string} message - Message to display\n   * @param {Object} options - Options for the notification\n   * @param {boolean} options.batch - Whether to batch this notification\n   * @param {Object} options.batchData - Data for batched notifications\n   */\n  static notify(type, message, options = {}) {\n    // If not batching, show immediately\n    if (!options.batch) {\n      ui.notifications[type](message);\n      return;\n    }\n    \n    // Add to pending notifications for batching\n    if (options.batchData) {\n      NotificationManager.pendingNotifications.push(options.batchData);\n      \n      // Clear existing timer and set new one\n      if (NotificationManager.notificationTimer) {\n        clearTimeout(NotificationManager.notificationTimer);\n      }\n      \n      NotificationManager.notificationTimer = setTimeout(() => {\n        showBatchedNotifications(NotificationManager.pendingNotifications);\n        NotificationManager.pendingNotifications = [];\n        NotificationManager.notificationTimer = null;\n      }, NotificationManager.NOTIFICATION_BATCH_DELAY);\n    }\n  }\n  \n  /**\n   * Show roll request sent notifications (GM side)\n   * @param {Object} requestsByPlayer - Grouped requests by player\n   * @param {string} rollTypeName - Display name of the roll type\n   */\n  static notifyRollRequestsSent(requestsByPlayer, rollTypeName) {\n    const successfulRequests = Object.entries(requestsByPlayer);\n    \n    if (successfulRequests.length === 0) return;\n    \n    // Single player, single actor\n    if (successfulRequests.length === 1) {\n      const playerData = Object.values(requestsByPlayer)[0];\n      const actorNames = playerData.actors.map(a => a.name).join(\", \");\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentSingle\", { \n        rollType: rollTypeName,\n        actors: actorNames,\n        player: playerData.player.name\n      }));\n    } else {\n      // Multiple players\n      const playerSummaries = successfulRequests.map(([playerId, data]) => {\n        const actorNames = data.actors.map(a => a.name).join(\", \");\n        return `${data.player.name} (${actorNames})`;\n      });\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentMultiple\", { \n        rollType: rollTypeName,\n        count: successfulRequests.length,\n        players: playerSummaries.join(\"; \")\n      }));\n    }\n  }\n  \n  /**\n   * Clear any pending notifications\n   */\n  static clearPending() {\n    if (NotificationManager.notificationTimer) {\n      clearTimeout(NotificationManager.notificationTimer);\n      NotificationManager.notificationTimer = null;\n    }\n    NotificationManager.pendingNotifications = [];\n  }\n}\n\n/**\n * Filter actors based on death save requirements\n * @param {Actor[]} actors - Array of actors to filter\n * @returns {Actor[]} Array of actors that need death saves\n */\nexport function filterActorsForDeathSaves(actors) {\n  const actorsNeedingDeathSaves = [];\n  const actorsSkippingDeathSaves = [];\n  \n  for (const actor of actors) {\n    const hp = actor.system.attributes.hp?.value || 0;\n    const deathSaves = actor.system.attributes.death || {};\n    const successes = deathSaves.success || 0;\n    const failures = deathSaves.failure || 0;\n    \n    // Check if actor needs a death save\n    if (hp <= 0 && successes < 3 && failures < 3) {\n      actorsNeedingDeathSaves.push(actor);\n    } else {\n      actorsSkippingDeathSaves.push(actor.name);\n    }\n  }\n  \n  // Notify about actors that don't need death saves\n  if (actorsSkippingDeathSaves.length > 0) {\n    NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.actorsSkippingDeathSave\", {\n      actors: actorsSkippingDeathSaves.join(\", \")\n    }));\n  }\n  \n  return actorsNeedingDeathSaves;\n}\n\n/**\n * Categorize actors by ownership (PC vs NPC)\n * @param {Actor[]} actors - Array of actors to categorize\n * @returns {{pcActors: Array, npcActors: Actor[]}} Object with categorized actors\n */\nexport function categorizeActorsByOwnership(actors) {\n  const pcActors = [];\n  const npcActors = [];\n  \n  for (const actor of actors) {\n    const owner = getPlayerOwner(actor);\n    if (owner) {\n      pcActors.push({ actor, owner });\n    } else {\n      npcActors.push(actor);\n    }\n  }\n  \n  return { pcActors, npcActors };\n}\n\nexport function addHDUpdate(updates, newUpdate){\n  const existingIndex = updates.findIndex(update => update._id === newUpdate._id);\n  if(existingIndex > -1){\n    updates[existingIndex] = foundry.utils.mergeObject(\n      updates[existingIndex],\n      newUpdate\n    )\n  }else{\n    updates.push(newUpdate);\n  }\n}\n\n/**\n * Adjust the offset vars for the roll menu based on the state of the roll privacy controls\n */\nexport function adjustMenuOffset(isExpanded=true){\n  const rollPrivacyVertical = document.querySelector('#chat-notifications #roll-privacy');\n  const controlsWidth = rollPrivacyVertical ? GeneralUtil.getFullWidth(rollPrivacyVertical) : 0;\n  GeneralUtil.addCSSVars('--flash-rolls-menu-offset', controlsWidth + 'px');\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { GeneralUtil } from \"./helpers/GeneralUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\n\n/**\n * Utility class for managing group roll chat messages\n */\nexport class ChatMessageUtils {\n  /**\n   * Map of requestId to chat message document\n   * @type {Map<string, ChatMessage>}\n   */\n  static groupRollMessages = new Map();\n  \n  /**\n   * Map of requestId to pending roll data\n   * @type {Map<string, Object>}\n   */\n  static pendingRolls = new Map();\n  \n  /**\n   * Set of message IDs that are scheduled for deletion\n   * @type {Set<string>}\n   */\n  static messagesScheduledForDeletion = new Set();\n  \n  /**\n   * Path to the group roll template\n   * @type {string}\n   */\n  static templatePath = 'modules/flash-rolls-5e/templates/chat-msg-group-roll.hbs';\n  \n  /**\n   * Initialize the ChatMessageUtils\n   */\n  static async initialize() {\n    LogUtil.log('ChatMessageUtils.initialize');\n    await this.preloadTemplate();\n  }\n  \n  /**\n   * Preload the Handlebars template\n   */\n  static async preloadTemplate() {\n    LogUtil.log('ChatMessageUtils.preloadTemplate');\n    try {\n      await GeneralUtil.loadTemplates([this.templatePath]);\n    } catch (error) {\n      LogUtil.error('Failed to preload template', error);\n    }\n  }\n  \n  /**\n   * Create a group roll message for multiple actors\n   * @param {Actor[]} actors - Array of actors\n   * @param {string} rollType - Type of roll\n   * @param {string} rollKey - Specific roll key\n   * @param {Object} config - Roll configuration\n   * @param {string} groupRollId - Unique group roll identifier\n   * @returns {Promise<ChatMessage>} The created chat message\n   */\n  static async createGroupRollMessage(actors, rollType, rollKey, config, groupRollId) {\n    LogUtil.log('ChatMessageUtils.createGroupRollMessage', [actors.length, rollType, rollKey, groupRollId]);\n    \n    const data = this.buildGroupRollData(actors, rollType, rollKey, config);\n    data.groupRollId = groupRollId;\n    \n    // Store pending roll data\n    this.pendingRolls.set(groupRollId, {\n      actors: actors.map(a => a.id),\n      rollType,\n      rollKey,\n      config,\n      results: new Map()\n    });\n    \n    const message = await this.postGroupMessage(data);\n    \n    if (message) {\n      this.groupRollMessages.set(groupRollId, message);\n    }\n    \n    return message;\n  }\n  \n  /**\n   * Build the data object for the group roll template\n   * @param {Actor[]} actors - Array of actors\n   * @param {string} rollType - Type of roll\n   * @param {string} rollKey - Specific roll key\n   * @param {Object} config - Roll configuration\n   * @returns {Object} Template data\n   */\n  static buildGroupRollData(actors, rollType, rollKey, config) {\n    LogUtil.log('ChatMessageUtils.buildGroupRollData', [actors.length, rollType, rollKey]);\n    \n    // Build flavor text\n    let flavor = this._buildFlavorText(rollType, rollKey, config);\n    \n    // Build results array for each actor\n    const results = actors.map(actor => ({\n      actorId: actor.id,\n      actorImg: actor.img || actor.prototypeToken?.texture?.src || 'icons/svg/mystery-man.svg',\n      actorName: actor.name,\n      rolled: false,\n      showDice: true,\n      total: null,\n      success: false,\n      failure: false\n    }));\n    \n    return {\n      flavor,\n      results,\n      showDC: config?.dc !== undefined && config.dc !== null,\n      dc: config?.dc,\n      moduleId: MODULE_ID\n    };\n  }\n  \n  /**\n   * Build flavor text for the roll\n   * @private\n   */\n  static _buildFlavorText(rollType, rollKey, config) {\n    let flavor = '';\n    \n    switch(rollType?.toLowerCase()) {\n      case 'ability':\n      case 'abilitycheck':\n        const abilityLabel = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        flavor = game.i18n.format(\"DND5E.AbilityPromptTitle\", { ability: abilityLabel });\n        break;\n      case 'save':\n      case 'savingthrow':\n        const saveLabel = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        flavor = game.i18n.format(\"DND5E.SavePromptTitle\", { ability: saveLabel });\n        break;\n      case 'skill':\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        flavor = game.i18n.format(\"DND5E.SkillPromptTitle\", { skill: skillLabel });\n        break;\n      case 'tool':\n        flavor = `Tool Check: ${rollKey}`;\n        break;\n      case 'initiative':\n        flavor = game.i18n.localize(\"DND5E.Initiative\");\n        break;\n      case 'attack':\n        flavor = config?.flavor || \"Attack Roll\";\n        break;\n      case 'damage':\n        flavor = config?.flavor || \"Damage Roll\";\n        break;\n      default:\n        flavor = config?.flavor || \"Roll Request\";\n    }\n    \n    return flavor;\n  }\n  \n  /**\n   * Post a group message to chat\n   * @param {Object} data - Message data\n   * @returns {Promise<ChatMessage>} The created message\n   */\n  static async postGroupMessage(data) {\n    LogUtil.log('ChatMessageUtils.postGroupMessage', [data]);\n    \n    try {\n      const content = await GeneralUtil.renderTemplate(this.templatePath, data);\n      \n      const messageData = {\n        content,\n        speaker: ChatMessage.getSpeaker({ alias: \"Flash Rolls\" }),\n        flags: {\n          [MODULE_ID]: {\n            isGroupRoll: true,\n            groupRollId: data.groupRollId,\n            rollData: data\n          }\n        }\n      };\n      \n      return await ChatMessage.create(messageData);\n    } catch (error) {\n      LogUtil.error('Failed to post group message', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Update a group roll message with a completed roll result\n   * @param {string} groupRollId - The group roll identifier\n   * @param {string} actorId - The actor who rolled\n   * @param {Roll} roll - The completed roll\n   */\n  static async updateGroupRollMessage(groupRollId, actorId, roll) {\n    LogUtil.log('ChatMessageUtils.updateGroupRollMessage', [groupRollId, actorId, roll.total]);\n    \n    let message = this.groupRollMessages.get(groupRollId);\n    let pendingData = this.pendingRolls.get(groupRollId);\n    \n    // If message not in map (player side), try to find it in chat messages\n    if (!message) {\n      const messages = game.messages.contents;\n      message = messages.find(m => \n        m.getFlag(MODULE_ID, 'groupRollId') === groupRollId &&\n        m.getFlag(MODULE_ID, 'isGroupRoll')\n      );\n      \n      if (message) {\n        this.groupRollMessages.set(groupRollId, message);\n        LogUtil.log('updateGroupRollMessage - Found and registered group message', [groupRollId]);\n        \n        // Create a minimal pendingData structure if it doesn't exist (player side)\n        if (!pendingData) {\n          const flagData = message.getFlag(MODULE_ID, 'rollData');\n          pendingData = {\n            actors: flagData.results.map(r => r.actorId),\n            results: new Map()\n          };\n          this.pendingRolls.set(groupRollId, pendingData);\n        }\n      }\n    }\n    \n    if (!message) {\n      LogUtil.log('No group message found for groupRollId', groupRollId);\n      return;\n    }\n    \n    // Store the result if pendingData exists\n    if (pendingData && pendingData.results) {\n      pendingData.results.set(actorId, {\n        total: roll.total,\n        roll: roll\n      });\n    }\n    \n    // Get current message data\n    const flagData = message.getFlag(MODULE_ID, 'rollData');\n    \n    // Update the specific actor's result\n    const resultIndex = flagData.results.findIndex(r => r.actorId === actorId);\n    if (resultIndex !== -1) {\n      flagData.results[resultIndex].rolled = true;\n      flagData.results[resultIndex].showDice = false;\n      flagData.results[resultIndex].total = roll.total;\n      \n      // Check success/failure if DC is set\n      if (flagData.showDC && flagData.dc) {\n        flagData.results[resultIndex].success = roll.total >= flagData.dc;\n        flagData.results[resultIndex].failure = roll.total < flagData.dc;\n      }\n    }\n    \n    // Re-render the message content\n    const newContent = await renderTemplate(this.templatePath, flagData);\n    \n    // Update the message\n    await message.update({\n      content: newContent,\n      flags: {\n        [MODULE_ID]: {\n          rollData: flagData\n        }\n      }\n    });\n    \n    // Clean up if all actors have rolled\n    if (pendingData?.results && pendingData?.actors) {\n      if (pendingData.results.size === pendingData.actors.length) {\n        this.pendingRolls.delete(groupRollId);\n        // Keep the message reference for a while in case we need it\n        setTimeout(() => {\n          this.groupRollMessages.delete(groupRollId);\n        }, 60000); // Clean up after 1 minute\n      }\n    }\n  }\n  \n  /**\n   * Intercept individual roll messages and update group message instead\n   * @param {ChatMessage} message - The chat message document\n   * @param {HTMLElement} html - The rendered HTML element\n   * @param {Object} context - Rendering context\n   * @returns {boolean} Return false to prevent rendering\n   */\n  static interceptRollMessage(message, html, context) {\n    LogUtil.log('ChatMessageUtils.interceptRollMessage #0', [message, context]);\n    const SETTINGS = getSettings();\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    if (!groupRollsMsgEnabled) return;\n    LogUtil.log('interceptRollMessage #1', [groupRollsMsgEnabled]);\n    \n    // Log all flags to debug\n    LogUtil.log('interceptRollMessage - message flags', [message.flags]);\n    \n    // Check if this is a roll message with groupRollId flag\n    const groupRollId = message.getFlag(MODULE_ID, 'groupRollId');\n    LogUtil.log('interceptRollMessage - groupRollId from flag', [groupRollId, this.groupRollMessages]);\n    \n    if (!groupRollId) {\n      LogUtil.log('interceptRollMessage - no groupRollId in flag');\n      return;\n    }\n    \n    // For non-GM users, check if the group message exists and register it\n    if (!game.user.isGM && !this.groupRollMessages.has(groupRollId)) {\n      const messages = game.messages.contents;\n      const groupMessage = messages.find(m => \n        m.getFlag(MODULE_ID, 'groupRollId') === groupRollId &&\n        m.getFlag(MODULE_ID, 'isGroupRoll')\n      );\n      \n      if (groupMessage) {\n        this.groupRollMessages.set(groupRollId, groupMessage);\n        LogUtil.log('interceptRollMessage - Registered group roll message', [groupRollId]);\n      }\n    }\n    \n    if (!this.groupRollMessages.has(groupRollId)) {\n      LogUtil.log('interceptRollMessage - groupRollId not in map', [groupRollId, Array.from(this.groupRollMessages.keys())]);\n      return;\n    }\n    LogUtil.log('interceptRollMessage #2', [groupRollId]);\n    \n    const roll = message.rolls?.[0];\n    if (!roll) return;\n    LogUtil.log('interceptRollMessage #3', [roll]);\n    \n    const actorId = message.speaker?.actor;\n    if (!actorId) return;\n    LogUtil.log('interceptRollMessage #4', [actorId]);\n    if (html instanceof HTMLElement) {\n      html.style.display = 'none';\n    }\n    \n    if (game.user.isGM) {\n      this.updateGroupRollMessage(groupRollId, actorId, roll);\n      \n      const msgId = message.id;\n      if (this.messagesScheduledForDeletion.has(msgId)) {\n        return;\n      }\n      this.messagesScheduledForDeletion.add(msgId);\n      \n      if (html instanceof HTMLElement) {\n        setTimeout(async () => {\n          LogUtil.log('interceptRollMessage - deletion', [msgId]);\n          try {\n            const msgExists = game.messages.get(msgId);\n            if (msgExists) {\n              await message.delete();\n              LogUtil.log('interceptRollMessage - Deleted individual message', [msgId]);\n            } else {\n              LogUtil.log('interceptRollMessage - Message already deleted', [msgId]);\n            }\n          } catch (error) {\n            console.trace(\"ERROR!\", error.message);\n            LogUtil.log('interceptRollMessage - Error deleting message', [msgId, error.message]);\n          } finally {\n            this.messagesScheduledForDeletion.delete(msgId);\n          }\n        }, 1000);\n      }\n    } else {\n      if (html instanceof HTMLElement) {\n        html.style.display = 'none';\n      }\n      LogUtil.log('interceptRollMessage - Player hiding message, GM will handle update', [groupRollId]);\n    }\n    \n    return;\n  }\n  \n  /**\n   * Handle roll completion from a player\n   * @param {string} requestId - Request identifier\n   * @param {string} actorId - Actor ID\n   * @param {Roll} roll - The completed roll\n   */\n  static async handleRollCompletion(requestId, actorId, roll) {\n    LogUtil.log('ChatMessageUtils.handleRollCompletion', [requestId, actorId, roll.total]);\n    \n    await this.updateGroupRollMessage(requestId, actorId, roll);\n  }\n  \n  /**\n   * Check if a request should use group messaging\n   * @param {string} requestId - Request identifier\n   * @returns {boolean} True if this is a group roll\n   */\n  static isGroupRoll(requestId) {\n    return this.pendingRolls.has(requestId) || this.groupRollMessages.has(requestId);\n  }\n  \n  /**\n   * Add groupRollId to message flags if it's a group roll\n   * @param {Object} messageConfig - The message configuration object\n   * @param {Object} requestData - The request data containing the groupRollId\n   * @param {Actor} actor - The actor performing the roll (optional, for player flag storage)\n   */\n  static async addGroupRollFlag(messageConfig, requestData, actor = null) {\n    const SETTINGS = getSettings();\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    \n    LogUtil.log('addGroupRollFlag called', [messageConfig, requestData.groupRollId, this.isGroupRoll(requestData.groupRollId)]);\n    \n    // For players, store the groupRollId temporarily on the actor\n    // This will be picked up by the preCreateChatMessage hook\n    if (!game.user.isGM && requestData.groupRollId && actor) {\n      await actor.setFlag(MODULE_ID, 'tempGroupRollId', requestData.groupRollId);\n      LogUtil.log('addGroupRollFlag - Stored tempGroupRollId on actor for player', [requestData.groupRollId, actor.id]);\n      \n      if (!this.groupRollMessages.has(requestData.groupRollId)) {\n        const messages = game.messages.contents;\n        const groupMessage = messages.find(m => \n          m.getFlag(MODULE_ID, 'groupRollId') === requestData.groupRollId &&\n          m.getFlag(MODULE_ID, 'isGroupRoll')\n        );\n        \n        if (groupMessage) {\n          this.groupRollMessages.set(requestData.groupRollId, groupMessage);\n          LogUtil.log('addGroupRollFlag - Registered group roll message on player side', [requestData.groupRollId]);\n        }\n      }\n    }\n    \n    // Add groupRollId for any multi-actor roll when setting is enabled\n    if (groupRollsMsgEnabled && requestData.groupRollId) {\n      const shouldAddFlag = game.user.isGM ? this.isGroupRoll(requestData.groupRollId) : true;\n      \n      if (shouldAddFlag) {\n        messageConfig.data = messageConfig.data || {};\n        messageConfig.data.flags = messageConfig.data.flags || {};\n        messageConfig.data.flags[MODULE_ID] = messageConfig.data.flags[MODULE_ID] || {};\n        messageConfig.data.flags[MODULE_ID].groupRollId = requestData.groupRollId;\n        \n        LogUtil.log('addGroupRollFlag - Added flag to messageConfig', [messageConfig]);\n      }\n    }\n  }\n  \n  /**\n   * Clean up old messages and data\n   */\n  static cleanup() {\n    // Clean up messages older than 5 minutes\n    const fiveMinutesAgo = Date.now() - (5 * 60 * 1000);\n    \n    for (const [requestId, message] of this.groupRollMessages.entries()) {\n      if (message.timestamp < fiveMinutesAgo) {\n        this.groupRollMessages.delete(requestId);\n        this.pendingRolls.delete(requestId);\n      }\n    }\n  }\n}","import { ROLL_TYPES, MODULE_ID } from \"../constants/General.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\nimport { RollHelpers } from \"./helpers/RollHelpers.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { CustomRollDialog } from \"./dialogs/CustomRollDialog.mjs\";\nimport { NotificationManager } from \"./helpers/Helpers.mjs\";\nimport { ChatMessageUtils } from \"./ChatMessageUtils.mjs\";\n\nexport const RollHandlers = {\n  ability: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    LogUtil.log('RollHandlers.ability #1', [rollConfig]);\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      ability: requestData.rollKey\n    });\n    LogUtil.log('RollHandlers.ability #2', [config.rolls?.[0]]);\n    LogUtil.log('RollHandlers.ability - messageConfig', messageConfig);\n    \n    // Add groupRollId to message flags if it's a group roll\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    \n    await actor.rollAbilityCheck(config, dialogConfig, messageConfig);\n  },\n  \n  abilitycheck: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.ability(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  save: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      ability: requestData.config?.ability || requestData.rollKey\n    });\n    \n    // Add groupRollId to message flags if it's a group roll\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    \n    await actor.rollSavingThrow(config, dialogConfig, messageConfig);\n  },\n  \n  savingthrow: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.save(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  skill: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    LogUtil.log('RollHandlers.skill #1', [requestData, rollConfig, dialogConfig]);\n\n    // Get the default ability for this skill from the actor\n    const defaultAbility = actor.system.skills?.[requestData.rollKey]?.ability || \n                          CONFIG.DND5E.skills?.[requestData.rollKey]?.ability || \n                          undefined;\n\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      skill: requestData.rollKey, \n      chooseAbility: dialogConfig.configure !== false, \n      ability: requestData.config.ability || defaultAbility \n    });\n    \n    // If we have a custom ability, set the flavor in the message config\n    if (requestData.config.ability && dialogConfig.configure === false) {\n      const skillLabel = CONFIG.DND5E.skills[requestData.rollKey]?.label || requestData.rollKey;\n      const abilityLabel = CONFIG.DND5E.abilities[requestData.config.ability]?.label || requestData.config.ability;\n      const flavor = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n        skill: skillLabel, \n        ability: abilityLabel \n      });\n      messageConfig.data = messageConfig.data || {};\n      messageConfig.data.flavor = flavor;\n    }\n    LogUtil.log('RollHandlers.skill #2', [config, dialogConfig, messageConfig]);\n    \n    // Add groupRollId to message flags if it's a group roll\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    \n    await actor.rollSkill(config, dialogConfig, messageConfig);\n  },\n\n  tool: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    LogUtil.log('RollHandlers.tool #1', [requestData, rollConfig]);\n\n    // Get the default ability for this tool from the actor\n    // Tools can have custom abilities set per actor, or use the system default\n    const toolConfig = actor.system.tools?.[requestData.rollKey];\n    const defaultAbility = toolConfig?.ability || \n                          CONFIG.DND5E.enrichmentLookup?.tools?.[requestData.rollKey]?.ability ||\n                          'int';\n\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      tool: requestData.rollKey,\n      chooseAbility: dialogConfig.configure !== false, \n      ability: requestData.config.ability || defaultAbility\n    });\n    \n    // If we have a custom ability, set the flavor in the message config\n    if (requestData.config.ability && dialogConfig.configure === false) {\n      const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[requestData.rollKey];\n      let toolLabel = requestData.rollKey;\n      if (toolData?.id) {\n        const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n        toolLabel = toolItem?.name || requestData.rollKey;\n      }\n      const abilityLabel = CONFIG.DND5E.abilities[requestData.config.ability]?.label || requestData.config.ability;\n      const flavor = game.i18n.format(\"DND5E.ToolPromptTitle\", { \n        tool: toolLabel, \n        ability: abilityLabel \n      });\n      messageConfig.data = messageConfig.data || {};\n      messageConfig.data.flavor = flavor;\n    }\n    LogUtil.log('RollHandlers.tool #2', [config, dialogConfig, messageConfig]);\n    \n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollToolCheck(config, dialogConfig, messageConfig);\n  },\n\n  concentration: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig);\n    \n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollConcentration(config, dialogConfig, messageConfig);\n  },\n\n  attack: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.ATTACK, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  damage: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.DAMAGE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  itemsave: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.ITEM_SAVE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  initiative: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    if (!game.combat) {\n      ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n      return;\n    }\n    const situational = requestData.config.situational || rollConfig.data?.situational || '';\n    const groupRollId = requestData.groupRollId;\n\n    let tokenActor = actor;\n    if (!actor.isToken) {\n      // Find a token for this actor in the current scene\n      const token = canvas.tokens.placeables.find(t => t.actor?.id === actor.id);\n      if (token) {\n        tokenActor = token.actor;\n      } else {\n        ui.notifications.error(game.i18n.format(\"COMBAT.NoneActive\"));\n        return;\n      }\n    }\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n\n    LogUtil.log('RollHandlers.initiative - START', [\n      actor, requestData, rollConfig, dialogConfig\n    ]);\n    \n    try {\n      if (dialogConfig.configure) {\n        LogUtil.log('RollHandlers.initiative - Dialog', []);\n        \n        if (requestData.config) {\n          const initiativeConfig = RollHelpers.buildRollConfig(requestData, rollConfig, {\n            ability: actor.system.attributes?.init?.ability || 'dex'\n          });\n          \n          const tempConfig = {\n            advantage: requestData.config.advantage || false,\n            disadvantage: requestData.config.disadvantage || false,\n            rollMode: requestData.config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n            rolls: initiativeConfig.rolls,\n            groupRollId: requestData.groupRollId\n          };\n          await actor.setFlag(MODULE_ID, 'tempInitiativeConfig', tempConfig);\n        }\n        \n        await tokenActor.rollInitiativeDialog();\n        await tokenActor.unsetFlag(MODULE_ID, 'tempInitiativeConfig');\n\n      } else {\n        LogUtil.log('RollHandlers.initiative - Not dialog');\n        const tempConfig = {\n          groupRollId: requestData.groupRollId\n        };\n        await actor.setFlag(MODULE_ID, 'tempInitiativeConfig', tempConfig);\n\n        const rollOptions = {\n          createCombatants: true,\n          rerollInitiative: true\n        };\n        await tokenActor.rollInitiative(rollOptions);\n      }\n      \n      LogUtil.log('RollHandlers.initiative - COMPLETE');\n    } catch (error) {\n      LogUtil.error('RollHandlers.initiative - Error', [error]);\n      NotificationManager.notify('error', `Initiative roll failed: ${error.message}`);\n    }\n  },\n  \n  // Alias for INITIATIVE_DIALOG\n  initiativedialog: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.initiative(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  deathsave: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig);\n    \n    // Add groupRollId to message flags if it's a group roll\n    await ChatMessageUtils.addGroupRollFlag(messageConfig, requestData, actor);\n    await actor.rollDeathSave(config, dialogConfig, messageConfig);\n  },\n\n  hitdie: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    dialogConfig.configure = game.user.isGM ? dialogConfig.configure : true;\n    \n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      denomination: requestData.rollKey // The hit die denomination (d6, d8, etc.)\n    });\n    LogUtil.log('RollHandlers.hitdie', [config, dialogConfig, messageConfig]);\n    await actor.rollHitDie(config, dialogConfig, messageConfig);\n  },\n\n  custom: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleCustomRoll(actor, requestData, dialogConfig, messageConfig);\n  },\n\n\n  /**\n   * Handle activity-based rolls (attack, damage, item save)\n   * SIMPLIFIED VERSION: No attack-specific options\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll from ROLL_TYPES\n   * @param {Object} requestData - The roll request data\n   * @param {string} requestData.rollKey - The item ID\n   * @param {string} requestData.activityId - The activity ID\n   * @param {Object} requestData.config - Configuration\n   * @param {string} [requestData.config.situational] - Situational bonus formula\n   * @param {BasicRollConfiguration} rollConfig - Individual roll configuration\n   * @param {BasicRollDialogConfiguration} dialogConfig - Dialog configuration\n   * @param {BasicRollMessageConfiguration} messageConfig - Message configuration\n   * @returns {Promise<void>}\n   */\n  async handleActivityRoll(actor, rollType, requestData, rollConfig, dialogConfig, messageConfig) {\n    LogUtil.log('RollHandlers.handleActivityRoll', [rollType, requestData, rollConfig]);\n    if (requestData.rollKey) {\n      const processConfig = RollHelpers.buildRollConfig(requestData, rollConfig);\n      \n      const rollOptions = processConfig.rolls?.[0]?.options || {};\n      const activityConfig = {\n        usage: {\n          ...requestData.config,\n          rolls: processConfig.rolls,\n          ...(rollOptions.attackMode && { attackMode: rollOptions.attackMode }),\n          ...(rollOptions.ammunition && { ammunition: rollOptions.ammunition }),\n          ...(rollOptions.mastery !== undefined && { mastery: rollOptions.mastery })\n        },\n        dialog: dialogConfig,\n        message: messageConfig\n      };\n      \n      LogUtil.log('handleActivityRoll - final activity config', [activityConfig]);\n      \n      await ActivityUtil.executeActivityRoll(\n        actor, \n        rollType, \n        requestData.rollKey, \n        requestData.activityId, \n        activityConfig\n      );\n    }\n  },\n\n  /**\n   * Handle a custom roll, creating a custom dialog\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {Object} requestData - The roll request data\n   * @param {string} requestData.rollKey - The roll formula\n   * @param {Object} requestData.config - Configuration object\n   * @param {string} [requestData.config.rollMode] - Roll visibility mode\n   * @param {string} [requestData.config.requestedBy] - Name of the requester\n   * @param {BasicRollDialogConfiguration} dialogConfig - Dialog configuration\n   * @param {BasicRollMessageConfiguration} messageConfig - Message configuration\n   * @returns {Promise<void>}\n   */\n  async handleCustomRoll(actor, requestData, dialogConfig, messageConfig) {\n    const formula = requestData.rollKey;\n    \n    if (dialogConfig?.configure === false) {\n      try {\n        const roll = new Roll(formula, actor.getRollData());\n        \n        roll.options = roll.options || {};\n        roll.options.isRollRequest = requestData.config?.isRollRequest !== false;\n        \n        await roll.evaluate({async: true});\n        await roll.toMessage({\n          speaker: ChatMessage.getSpeaker({actor}),\n          flavor: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${ROLL_TYPES.CUSTOM}`),\n          rollMode: messageConfig?.rollMode || requestData.config?.rollMode || game.settings.get(\"core\", \"rollMode\"),\n          isRollRequest: requestData.config?.isRollRequest !== false,\n          create: messageConfig?.create !== false\n        });\n      } catch (error) {\n        ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula: formula}));\n      }\n      return;\n    }\n    \n    const dialog = new CustomRollDialog({\n      formula: formula,\n      readonly: true,\n      actor: actor,\n      callback: async (confirmedFormula) => {\n        try {\n          const roll = new Roll(confirmedFormula, actor.getRollData());\n          \n          roll.options = roll.options || {};\n          roll.options.isRollRequest = true;\n          \n          await roll.evaluate({async: true});\n          await roll.toMessage({\n            speaker: ChatMessage.getSpeaker({actor}),\n            flavor: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${ROLL_TYPES.CUSTOM}`),\n            rollMode: requestData.config.rollMode,\n            isRollRequest: true,\n            _showRequestedBy: true,\n            _requestedBy: requestData.config.requestedBy || 'GM'\n          });\n        } catch (error) {\n          ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula: confirmedFormula}));\n        }\n      }\n    });\n    \n    dialog.render(true);\n  },\n\n  /**\n   * Handle hit die recovery (used for refilling hit dice)\n   * @param {Actor5e} actor - The actor to recover hit dice for\n   * @returns {Promise<Object>} Result object with recovery details\n   */\n  async handleHitDieRecovery(actor) {\n    const result = foundry.utils.mergeObject({\n      type: \"long\",\n      deltas: {\n        hitDice: 0\n      },\n      newDay: false,\n      rolls: [],\n      updateData: {},\n      updateItems: []\n    }, {});\n    \n    if ( \"dhd\" in result ) result.deltas.hitDice = result.dhd;\n\n    actor._getRestHitDiceRecovery({ maxHitDice: actor.system.attributes.hd.max, type: \"long\" }, result);\n\n    result.dhd = result.deltas.hitDice;\n    result.longRest = true;\n\n    try {\n      if (result.updateData && Object.keys(result.updateData).length > 0) {\n        const updateResult = await actor.update(result.updateData, { isRest: false });\n      } else {\n        LogUtil.log('No actor updates to perform', []);\n      }\n      \n      if (result.updateItems && result.updateItems.length > 0) {\n        const itemUpdateResult = await actor.updateEmbeddedDocuments(\"Item\", result.updateItems, { isRest: false });\n      } else {\n        LogUtil.log('No item updates to perform', []);\n      }\n    } catch (error) {\n      LogUtil.error('Error during updates in handleHitDieRecovery:', [error]);\n      throw error;\n    }\n\n    LogUtil.log('handleHitDieRecovery #3', [result]);\n    // Return data summarizing the rest effects\n    return result;\n  }\n};","/**\n * Helper functions for roll validation and preparation\n */\n\nimport { LogUtil } from '../LogUtil.mjs';\nimport { NotificationManager } from './Helpers.mjs';\n\n/**\n * Ensure combat exists for initiative rolls\n * @returns {Promise<boolean>} True if combat is ready, false if cancelled\n */\nexport async function ensureCombatForInitiative() {\n  if (!game.combat) {\n    // const createCombat = await foundry.applications.api.DialogV2.confirm({\n    //   window: {\n    //     title: game.i18n.localize(\"COMBAT.Create\"),\n    //     classes: [\"flash5e-dialog\"]\n    //   },\n    //   content: \"<p>\" + game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.noCombatActive\") + \"</p>\",\n    //   rejectClose: false,\n    //   modal: true\n    // });\n    \n    // if (createCombat) {\n      // const combat = await game.combats.documentClass.create({scene: game.scenes.active.id});\n      const combat = await Combat.create({scene: game.scenes.active.id});\n      await combat.activate();\n      NotificationManager.notify('info', game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.combatCreated\"));\n      // return combat;\n    // } else {\n    //   return false;\n    // }\n  }\n  \n  return game.combat;\n}\n\n/**\n * Filter actors for initiative rolls, handling re-rolls\n * @param {string[]} actorIds - Array of actor IDs to filter\n * @param {Game} game - The game instance\n * @returns {Promise<string[]>} Filtered array of actor IDs\n */\nexport async function filterActorsForInitiative(actorIds, game) {\n  if (!game.combat) return actorIds;\n  \n  const actors = actorIds\n    .map(id => game.actors.get(id))\n    .filter(actor => actor);\n  \n  // Check which actors already have initiative\n  const actorsNamesWithInitiative = [];\n  const actorIdsWithInitiative = new Set();\n  \n  for (const actor of actors) {\n    const combatants = game.combat.getCombatantsByActor(actor.id);\n    // Check if any combatant for this actor has initiative\n    const hasInitiative = combatants.some(c => c.initiative !== null);\n    if (hasInitiative) {\n      actorsNamesWithInitiative.push(actor.name);\n      actorIdsWithInitiative.add(actor.id);\n    }\n  };\n  LogUtil.log('filterActorsForInitiative', [actorsNamesWithInitiative]);\n  \n  // If any actors already have initiative, confirm re-roll\n  if (actorsNamesWithInitiative.length > 0) {\n    const reroll = await foundry.applications.api.DialogV2.confirm({\n      window: {\n        title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiativeTitle\"),\n        classes: [\"flash5e-dialog\"]\n      },\n      content: \"<p>\" + game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiative\", {\n        actors: actorsNamesWithInitiative.join(\", \")\n      }) + \"</p>\",\n      rejectClose: false,\n      modal: true\n    });\n    \n    if (!reroll) { // User chose not to re-roll\n      const filteredIds = actorIds.filter(id => !actorIdsWithInitiative.has(id));\n      \n      if (filteredIds.length === 0) {\n        NotificationManager.notify('info', game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.allActorsHaveInitiative\"));\n      }\n      \n      return filteredIds;\n    } else { // User chose to re-roll\n      // Only GM can reset initiative\n      if (game.user.isGM) {\n        for (const actorId of actorIdsWithInitiative) {\n          const combatants = game.combat.getCombatantsByActor(actorId);\n          LogUtil.log('filterActorsForInitiative - resetting initiative for combatants', [combatants]);\n          for (const c of combatants) {\n            await c.update({ initiative: null });\n          }\n        }\n      } else {\n        LogUtil.log('filterActorsForInitiative - Player cannot reset initiative, will let system handle re-roll');\n      }\n      \n      return actorIds;\n    }\n  }\n  \n  return actorIds;\n}","import { HOOKS_DND5E } from '../constants/Hooks.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { MODULE_ID, DEBUG_TAG, ROLL_TYPES } from '../constants/General.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog, GMHitDieConfigDialog, GMDamageConfigDialog, GMAttackConfigDialog } from './dialogs/gm-dialogs/index.mjs';\nimport { RollHandlers } from './RollHandlers.mjs';\nimport { ensureCombatForInitiative, filterActorsForInitiative } from './helpers/RollValidationHelpers.mjs';\nimport { GeneralUtil } from './helpers/GeneralUtil.mjs';\nimport { ModuleHelpers } from './helpers/ModuleHelpers.mjs';\n/**\n * Handles intercepting D&D5e rolls on the GM side and redirecting them to players\n */\nexport class RollInterceptor {  \n  /**\n   * @type {Set<string>} - Set of registered hook IDs for cleanup\n   */\n  static registeredHooks = new Set();\n  \n  /**\n   * Initialize the roll interceptor\n   */\n  static initialize() {\n    LogUtil.log('RollInterceptor.initialize');\n    if (!game.user.isGM) return;\n    \n    this.registerHooks();\n  }\n  \n  /**\n   * Register all necessary hooks for roll interception\n   */\n  static registerHooks() {\n    LogUtil.log('RollInterceptor.registerHooks');\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, this._handlePreRoll.bind(this, ROLL_TYPES.ABILITY));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, this._handlePreRoll.bind(this, ROLL_TYPES.SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SKILL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.SKILL));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_TOOL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.TOOL));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._handlePreRoll.bind(this, ROLL_TYPES.ATTACK));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DAMAGE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DEATH_SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.HIT_DIE));\n\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE, this._handlePreRollInitiative.bind(this, ROLL_TYPES.INITIATIVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG, this._handlePreRollInitiative.bind(this, ROLL_TYPES.INITIATIVE));\n    this._registerHook(HOOKS_DND5E.ROLL_INITIATIVE, this._handleRollInitiative.bind(this, ROLL_TYPES.INITIATIVE));\n  }\n  \n  /**\n   * Helper to register a hook and track it for cleanup\n   * @param {string} hookName \n   * @param {Function} handler \n   */\n  static _registerHook(hookName, handler) {\n    LogUtil.log('RollInterceptor._registerHook');\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.add({ hookName, hookId });\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterHooks() {\n    LogUtil.log('RollInterceptor.unregisterHooks');\n    for (const { hookName, hookId } of this.registeredHooks) {\n      Hooks.off(hookName, hookId);\n    }\n    this.registeredHooks.clear();\n  }\n\n   /**\n   * Handle pre-roll initiative to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Actor5e} actor - Actor for initiative\n   * @param {D20Roll} roll - Roll configuration object\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRollInitiative(rollType, actor, roll) {\n    LogUtil.log('_handlePreRollInitiative', [rollType, actor, roll]);\n    return;\n  }\n\n  /**\n   * Handle pre-roll hooks to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Object} config - Roll configuration object (or Actor for initiative)\n   * @param {Object} dialog - Dialog options\n   * @param {Object} message - Message options\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRoll(rollType, config, dialog, message) {\n    LogUtil.log('_handlePreRoll #0', [rollType, config, dialog, message]);\n    // Only intercept on GM side\n    if (!game.user.isGM || config.isRollRequest === false) return;\n    const isMidiRequest = GeneralUtil.isModuleOn(MODULE_ID, 'midi-qol');\n\n    const hookNames = config?.hookNames || dialog?.hookNames || message?.hookNames || [];\n    const isInitiativeRoll = hookNames.includes('initiativeDialog') || hookNames.includes('initiative');\n    \n    if(rollType === ROLL_TYPES.ATTACK){\n      const moduleFlags = config.subject?.item?.getFlag(MODULE_ID, 'tempAttackConfig');\n      LogUtil.log('_handlePreRoll - is Attack roll', [config.subject?.item, moduleFlags]);\n      if(moduleFlags){\n        LogUtil.log('_handlePreRoll - found module flags, skipping interception', [moduleFlags]);\n        return;\n      }\n    }\n    \n    if(rollType === ROLL_TYPES.DAMAGE){\n      // Check if this damage roll is from a local execution\n      const moduleFlags = config.subject?.item?.getFlag(MODULE_ID, 'tempDamageConfig');\n      LogUtil.log('RollInterceptor._handlePreRoll - is Damage roll', [config.subject?.item, moduleFlags]);\n      if(moduleFlags){\n        LogUtil.log('RollInterceptor._handlePreRoll - found module flags, skipping interception', [moduleFlags]);\n        return;\n      }\n    }\n    // Override rollType if this is actually an initiative roll\n    if (isInitiativeRoll && rollType === ROLL_TYPES.ABILITY) {\n      LogUtil.log('RollInterceptor._handlePreRoll - Overriding ability to initiative', [hookNames]);\n      rollType = ROLL_TYPES.INITIATIVE;\n    }\n    \n    if ( config?.isRollRequest || config.sendRequest===false || \n         dialog?.isRollRequest || message?.isRollRequest) {\n      return;\n    }\n\n    let actor;\n    if (rollType === ROLL_TYPES.INITIATIVE && config instanceof Actor) {\n      actor = config;\n      // For initiative, check if this is from our own dialog execution\n      LogUtil.log('_handlePreRoll - Initiative', [config, dialog, message]);\n      if (dialog?.isRollRequest === false || message?.isRollRequest === false) {\n        return;\n      }\n    } else if (rollType === ROLL_TYPES.HIT_DIE) {\n      actor = dialog?.subject?.actor || dialog?.subject || dialog?.actor;\n    } else if(rollType === ROLL_TYPES.ATTACK || rollType === ROLL_TYPES.DAMAGE){\n      actor = config.subject?.actor;\n    } else {\n      actor = config.subject?.actor || config.subject || config.actor;\n    }\n\n    // Check if roll interception and requests are enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    // const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n\n    if(!rollInterceptionEnabled || //!rollRequestsEnabled ||\n      !actor || actor.documentName !== 'Actor') {\n      return;\n    }\n\n    const owner = GeneralUtil.getActorOwner(actor);   \n    LogUtil.log('_handlePreRoll - ownership', [owner]);\n    if (!owner || !owner.active || owner.id === game.user.id || // player owner inexistent or not active \n      dialog.configure===false || config.isRollRequest===false || config.skipRollDialog===true || config.fastForward===true) { // config skips the dialog\n      \n      LogUtil.log('_handlePreRoll - skipping interception', [dialog.configure, config.midiOptions]);\n\n      if(!isMidiRequest){ \n        return;\n      }\n    }\n    \n    LogUtil.log('_handlePreRoll - intercepting roll #1', [config, message]);\n    \n    // For attack rolls, if a usage message is created, ensure it's public\n    if (rollType === ROLL_TYPES.ATTACK) {\n      message = {\n        ...message,\n        rollMode: CONST.DICE_ROLL_MODES.PUBLIC\n      };\n    }\n\n    LogUtil.log('_handlePreRoll - intercepting roll #2', [config, message]); \n    this._showGMConfigDialog(actor, owner, rollType, config, dialog, message); \n    \n    return false;\n  }\n\n  static _handleRollInitiative(a,b,c,d,e) {\n    LogUtil.log('_handleRollInitiative', [a,b,c,d,e]);\n    return;\n  }\n  \n  /**\n   * Show GM configuration dialog before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showGMConfigDialog(actor, owner, rollType, config, dialog, message) {\n    LogUtil.log('_showGMConfigDialog - config', [rollType, config]);\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n\n    try {\n      const normalizedRollType = rollType?.toLowerCase();\n      \n      // For initiative, check if combat exists and handle re-rolls\n      if (normalizedRollType === ROLL_TYPES.INITIATIVE) {\n        if (!game.combat) {\n          const combatReady = await ensureCombatForInitiative();\n          if (!combatReady) { return; } // User chose not to create combat, cancel the roll\n        }\n        \n        // Check if actor already has initiative\n        const filteredActorIds = await filterActorsForInitiative([actor.id], game);\n        if (filteredActorIds.length === 0) { return; } // No actors to roll or re-roll for\n      }\n      \n      let DialogClass;\n      if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n        DialogClass = GMSkillToolConfigDialog;\n      } else if (normalizedRollType === ROLL_TYPES.HIT_DIE) {\n        DialogClass = GMHitDieConfigDialog;\n      } else if (normalizedRollType === ROLL_TYPES.ATTACK) {\n        DialogClass = GMAttackConfigDialog;\n      } else if (normalizedRollType === ROLL_TYPES.DAMAGE) {\n        DialogClass = GMDamageConfigDialog;\n      } else {\n        DialogClass = GMRollConfigDialog;\n      }\n      \n      let rollConfig = {\n        rolls: [{\n          parts: [],\n          data: {},\n          options: {}\n        }]\n      };\n      \n      // Check if we should skip dialogs\n      const SETTINGS = getSettings();\n      const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n      \n      const options = {\n        actors: [actor],\n        rollType: normalizedRollType,\n        showDC: true,\n        sendRequest: true,\n        skipRollDialog: skipRollDialog\n      };\n\n      LogUtil.log('_showGMConfigDialog #3', [rollConfig, options]);\n      \n      let result;\n      if (!skipRollDialog) {\n        // Extract roll key based on roll type\n        let rollKey = null;\n        switch (normalizedRollType) {\n          case ROLL_TYPES.SKILL:\n            rollConfig.skill = config.skill;\n            rollConfig.ability = config.ability || config.subject?.ability;\n            rollKey = rollConfig.skill;\n            break;\n          case ROLL_TYPES.TOOL:\n            rollConfig.tool = config.tool;\n            rollConfig.ability = config.ability || config.subject?.ability;\n            rollKey = rollConfig.tool;\n            break;\n          case ROLL_TYPES.ABILITY:\n          case ROLL_TYPES.SAVE:\n            rollConfig.ability = config.ability || config.subject?.ability;\n            rollKey = rollConfig.ability;\n            if (rollConfig.ability === 'con' && config.targetValue !== undefined) {\n              rollType = ROLL_TYPES.CONCENTRATION;\n            }\n            break;\n          case ROLL_TYPES.CONCENTRATION:\n            rollConfig.ability = 'con';\n            rollKey = 'con';\n            break;\n          case ROLL_TYPES.INITIATIVE:\n          case ROLL_TYPES.INITIATIVE_DIALOG:\n            rollKey = actor.system.attributes?.init?.ability || 'dex'; // Default to dexterity\n            break;\n          case ROLL_TYPES.HIT_DIE:\n            rollConfig.denomination = typeof config === 'string' ? config : (config.denomination || config.subject?.denomination);\n            rollKey = rollConfig.denomination;\n            break;\n          case ROLL_TYPES.ATTACK:\n            if (dialog?.options) {\n              rollConfig.ammunition = dialog.options.ammunition;\n              rollConfig.attackMode = dialog.options.attackMode;\n              rollConfig.mastery = dialog.options.mastery;\n            }\n            rollKey = config.subject?.item?.id;\n            break;\n          case ROLL_TYPES.DAMAGE:\n            rollConfig.item = config.subject?.item;\n            rollConfig.subject = config.subject;\n            rollConfig.critical = config.critical || {};\n            rollKey = config.subject?.item?.id;\n            break;\n          default:\n            break;\n        }\n        LogUtil.log('_showGMConfigDialog #4', [rollConfig, rollRequestsEnabled]);\n\n        // Use the static initConfiguration method which properly waits for dialog result\n        if (!DialogClass.initConfiguration) {\n          LogUtil.error('DialogClass.initConfiguration not found', [DialogClass, DialogClass.name]);\n          throw new Error(`DialogClass ${DialogClass.name} does not have initConfiguration method`);\n        }\n        \n        if (normalizedRollType === ROLL_TYPES.ATTACK || normalizedRollType === ROLL_TYPES.DAMAGE) {\n          result = await DialogClass.initConfiguration([actor], normalizedRollType, rollKey, {\n            skipRollDialog: false,\n            sendRequest: rollRequestsEnabled\n          }, config, dialog);\n        } else {\n          result = await DialogClass.initConfiguration([actor], normalizedRollType, rollKey, {\n            skipRollDialog: false,\n            sendRequest: rollRequestsEnabled\n          });\n        }\n        LogUtil.log('_showGMConfigDialog #4', [rollConfig]);\n      } else {\n        // Skip dialog and use default config\n        result = {\n          sendRequest: true,\n          advantage: false,\n          disadvantage: false,\n          situational: \"\",\n          rollMode: game.settings.get(\"core\", \"rollMode\")\n        }\n      }\n      \n      if (!result) {\n        LogUtil.log('_showGMConfigDialog - Dialog cancelled');\n        return;\n      }\n      \n      // If sendRequest is false, execute local roll\n      LogUtil.log('_showGMConfigDialog - sending _executeInterceptedRoll', [rollType, config, result]);\n      if (!result.sendRequest || !rollRequestsEnabled) {\n        await this._executeInterceptedRoll(actor, rollType, config, result);\n        return;\n      }\n      \n      // Send the roll request to the player with the configured settings\n      // Exclude the event object as it can't be serialized\n      const { event, ...configWithoutEvent } = config;\n      const finalConfig = {\n        ...configWithoutEvent,\n        ...result,\n        rolls: result.rolls,\n        requestedBy: game.user.name,\n        // For attack activity rolls, prevent the usage message from being created\n        ...(rollType === ROLL_TYPES.ATTACK && { chatMessage: false })\n      };\n      \n      this._sendRollRequest(actor, owner, rollType, finalConfig);\n      \n    } catch (error) {\n      LogUtil.error('RollInterceptor._showGMConfigDialog - Error', [error]);\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n  \n  /**\n   * Called when an intercepted roll should be executed \n   * locally on the GM side instead of sent to player\n   * @param {Actor} actor \n   * @param {string} rollType \n   * @param {Object} originalConfig\n   * @param {Object} dialogResult\n   */\n  static async _executeInterceptedRoll(actor, rollType, originalConfig, dialogResult) {\n    LogUtil.log('RollInterceptor._executeInterceptedRoll', [actor, rollType, originalConfig, dialogResult]);\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Ensure we have a proper roll configuration structure\n    const rollConfig = dialogResult.rolls?.[0] || {\n      parts: [],\n      data: {},\n      options: {}\n    };\n    const situational = rollConfig.data?.situational || dialogResult.situational || \"\";\n    \n    // Determine the correct rollKey based on the roll type\n    let rollKey;\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        rollKey = originalConfig.skill;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollKey = originalConfig.tool;\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.SAVE:\n        rollKey = originalConfig.ability || originalConfig.subject?.ability;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        rollKey = originalConfig.denomination;\n        break;\n      default:\n        rollKey = originalConfig.ability || originalConfig.skill || originalConfig.tool || originalConfig.denomination;\n    }\n    \n    const requestData = {\n      rollKey: rollKey,\n      config: {\n        advantage: dialogResult.advantage || originalConfig.advantage,\n        disadvantage: dialogResult.disadvantage || originalConfig.disadvantage,\n        target: dialogResult.target || dialogResult.dc || originalConfig.target,\n        rollMode: dialogResult.rollMode || originalConfig.rollMode,\n        situational: situational,\n        isRollRequest: false,\n        ability: originalConfig.ability // Pass the ability from original config\n      }\n    };\n    \n    // For skills and tools, ensure we have the ability if not choosing\n    if (normalizedRollType === ROLL_TYPES.SKILL && !requestData.config.ability) {\n      requestData.config.ability = actor.system.skills?.[requestData.rollKey]?.ability || \n                                   CONFIG.DND5E.skills?.[requestData.rollKey]?.ability;\n    } else if (normalizedRollType === ROLL_TYPES.TOOL && !requestData.config.ability) {\n      const toolConfig = actor.system.tools?.[requestData.rollKey];\n      requestData.config.ability = toolConfig?.ability || \n                                   CONFIG.DND5E.enrichmentLookup?.tools?.[requestData.rollKey]?.ability ||\n                                   'int';\n    } else if ((normalizedRollType === ROLL_TYPES.ABILITY || normalizedRollType === ROLL_TYPES.SAVE) && !requestData.config.ability) {\n      // For ability checks and saves, the rollKey IS the ability\n      requestData.config.ability = requestData.rollKey;\n    }\n    \n    LogUtil.log('RollInterceptor._executeInterceptedRoll - requestData', [requestData, originalConfig, dialogResult]);\n    \n    const dialogConfig = {\n      configure: false, // Skip dialog\n      isRollRequest: false\n    };\n    \n    const messageConfig = {\n      rollMode: requestData.config.rollMode,\n      create: true,\n      isRollRequest: false\n    };\n    \n    try {\n      const handlerMap = ROLL_TYPES;\n      \n      const handler = RollHandlers[normalizedRollType];\n      LogUtil.log('RollInterceptor._executeInterceptedRoll - handler 1', [handler, normalizedRollType, RollHandlers[normalizedRollType]]);\n      \n      if (handler) {\n        // Special handling for attack and damage rolls\n        if (normalizedRollType === ROLL_TYPES.ATTACK || normalizedRollType === ROLL_TYPES.DAMAGE || normalizedRollType === ROLL_TYPES.SAVE) {\n          requestData.rollKey = originalConfig.subject?.item?.id;\n          requestData.activityId = originalConfig.subject?.id;\n        }\n        \n        LogUtil.log('RollInterceptor._executeInterceptedRoll - handler 2', [requestData, rollConfig, dialogConfig, messageConfig]);\n        await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        LogUtil.warn(`No handler found for roll type: ${normalizedRollType}`);\n      }\n    } catch (error) {\n      LogUtil.error(\"RollInterceptor._executeInterceptedRoll\", [error]);\n    }\n  }\n  \n  // /**\n  //  * Show configuration dialog to GM before sending roll request\n  //  * @param {Actor} actor \n  //  * @param {User} owner \n  //  * @param {string} rollType \n  //  * @param {Object} config \n  //  * @param {Object} dialog \n  //  * @param {Object} message \n  //  */\n  // static async _showConfigurationDialog(actor, owner, rollType, config, dialog, message) {\n  //   LogUtil.log('RollInterceptor._showConfigurationDialog', [actor, owner, rollType, config, dialog, message]);\n\n  //   try {\n  //     const rollWrapper = async (finalConfig) => {\n  //       this._sendRollRequest(actor, owner, rollType, finalConfig);\n  //       return new Roll(\"1d20\").evaluate({async: false}); // Return a dummy roll\n  //     };\n      \n  //     // Replace the roll method in config with our wrapper\n  //     const modifiedConfig = {\n  //       ...config,\n  //       _rollMethod: rollWrapper,\n  //       configured: false\n  //     };\n      \n  //     const DialogClass = dialog.cls;\n  //     const rollDialog = new DialogClass(modifiedConfig, dialog.options);\n  //     const result = await rollDialog.render(true);\n  //   } catch (error) {\n  //     LogUtil.error(\"RollInterceptor._showConfigurationDialog - error\", [error]);\n  //     this._sendRollRequest(actor, owner, rollType, config);\n  //   }\n  // }\n  \n  /**\n   * Send a roll request to the player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {BasicRollProcessConfiguration} config - The roll process configuration\n   */\n  static async _sendRollRequest(actor, owner, rollType, config) {\n    LogUtil.log('_sendRollRequest', [actor, owner, rollType, config]);\n    LogUtil.log('_sendRollRequest - config.rolls check', [config.rolls]);\n    const SETTINGS = getSettings();\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog);\n    let normalizedRollType = rollType?.toLowerCase();\n    \n    // Convert INITIATIVE to INITIATIVE_DIALOG for player requests\n    if (normalizedRollType === ROLL_TYPES.INITIATIVE) {\n      normalizedRollType = ROLL_TYPES.INITIATIVE_DIALOG;\n    }\n    \n    // Extract the roll key based on roll type\n    let rollKey = null;\n    let activityId = null;\n    switch (normalizedRollType) {\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.SAVE:\n        rollKey = config.ability;\n        break;\n      case ROLL_TYPES.SKILL:\n        rollKey = config.skill;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollKey = config.tool;\n        break;\n      case ROLL_TYPES.ATTACK:\n      case ROLL_TYPES.DAMAGE:\n        LogUtil.log('_sendRollRequest - Attack/Damage roll config', [rollType, config]);\n        // for activities, config.subject is the activity itself\n        rollKey = config.subject.item?.id;\n        activityId = config.subject.id;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        rollKey = typeof config === 'string' ? config : config.denomination;\n        break;\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n      case ROLL_TYPES.INITIATIVE:\n        rollKey = null;\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        rollKey = null;\n        break;\n      default:\n        LogUtil.warn(`Unknown roll type: ${rollType}`);\n        return;\n    }\n    \n    // Build the request data with proper rollProcessConfig\n    // Filter out circular references that midi-qol adds\n    const cleanConfig = { ...config };\n    delete cleanConfig.subject;\n    delete cleanConfig.workflow;\n    delete cleanConfig.item;\n    delete cleanConfig.activity;\n    \n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType: normalizedRollType,\n      rollKey,\n      activityId,\n      rollProcessConfig: {\n        ...cleanConfig,\n        _requestedBy: game.user.name  // Add who requested the roll\n      },\n      skipRollDialog: skipRollDialog,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    if(owner && requestData){\n      SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    }\n    \n    // Show notification to GM\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent', { \n      player: owner.name,\n      actor: actor.name \n    }));\n  }\n}","import { MODULE, ROLL_TYPES } from '../constants/General.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog, GMHitDieConfigDialog } from './dialogs/gm-dialogs/index.mjs';\nimport { SidebarUtil } from './SidebarUtil.mjs';\nimport { getPlayerOwner, isPlayerOwned, hasTokenInScene, updateCanvasTokenSelection, delay, buildRollTypes, NotificationManager, filterActorsForDeathSaves, categorizeActorsByOwnership, adjustMenuOffset } from './helpers/Helpers.mjs';\nimport { RollHandlers } from './RollHandlers.mjs';\nimport { RollHelpers } from './helpers/RollHelpers.mjs';\nimport { CustomRollDialog } from './dialogs/CustomRollDialog.mjs';\nimport { ensureCombatForInitiative, filterActorsForInitiative } from './helpers/RollValidationHelpers.mjs';\nimport { GeneralUtil } from './helpers/GeneralUtil.mjs';\nimport { ModuleHelpers } from './helpers/ModuleHelpers.mjs';\nimport { ChatMessageUtils } from './ChatMessageUtils.mjs';\n\n/**\n * Roll Requests Menu Application\n * Extends Foundry's ApplicationV2 with Handlebars support to provide a menu interface for GMs to request rolls from players\n */\nconst { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api;\nexport default class RollRequestsMenu extends HandlebarsApplicationMixin(ApplicationV2) {\n  /**\n   * Singleton instance of the menu\n   * @type {RollRequestsMenu|null}\n   */\n  static #instance = null;\n\n  constructor(options = {}) {\n    LogUtil.log('RollRequestsMenu.constructor', [options]);\n    super(options);\n    \n    // Track selected actors and current state\n    this.selectedActors = new Set();\n    this.currentTab = 'pc';\n    this.selectedRequestType = null;\n    this.isLocked = false; \n    this.optionsExpanded = game.user.getFlag(MODULE.ID, 'menuOptionsExpanded') ?? false;\n    \n    // Initialize with actors from selected tokens\n    this._initializeFromSelectedTokens();\n  }\n\n  static DEFAULT_OPTIONS = {\n    id: 'flash-rolls-menu',\n    classes: ['flash-rolls-menu'],\n    tag: 'div',\n    window: {\n      frame: false,\n      resizable: false,\n      minimizable: false\n    },\n    position: {}\n  };\n\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/requests-menus.hbs`\n    }\n  };  \n  \n  async _prepareContext(options) {\n    LogUtil.log('_prepareContext');\n    const context = await super._prepareContext(options);\n    const actors = game.actors.contents;\n    const pcActors = [];\n    const npcActors = [];\n    const currentScene = game.scenes.active;\n    \n    for (const actor of actors) {\n      if (actor.type !== 'character' && actor.type !== 'npc') continue;\n      \n      const actorData = {\n        id: actor.id,\n        uuid: actor.uuid,\n        name: actor.name,\n        img: actor.img,\n        selected: this.selectedActors.has(actor.id),\n        crlngnStats: this._getActorStats(actor)\n      };\n      \n      // Check if owned by a player (not GM)\n      const isPlayerOwned = Object.entries(actor.ownership)\n        .some(([userId, level]) => {\n          const user = game.users.get(userId);\n          return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        });\n      \n      if (isPlayerOwned) {\n        pcActors.push(actorData);\n      } else {\n        const hasTokenInScene = currentScene?.tokens.some(token => token.actorId === actor.id) || false;\n        if (hasTokenInScene) {// Only include NPCs if they have a token in the current scene\n          npcActors.push(actorData);\n        }\n      }\n    }\n    \n    // Get current settings\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    \n    // Check if all actors in current tab are selected\n    const currentActors = this.currentTab === 'pc' ? pcActors : npcActors;\n    const selectAllOn = currentActors.length > 0 && \n      currentActors.every(actor => this.selectedActors.has(actor.id));\n    \n    const requestTypes = [];\n    if (this.selectedActors.size > 0) {\n      for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n        requestTypes.push({\n          id: key,\n          name: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${option.name}`) || option.label,\n          rollable: option.subList == null,\n          hasSubList: !!option.subList,\n          selected: this.selectedRequestType === key\n        });\n      }\n    }\n\n    const rollTypes = buildRollTypes(this.selectedRequestType, this.selectedActors);\n    \n    return {\n      ...context,\n      actors: currentActors,\n      currentTab: this.currentTab,\n      isPCTab: this.currentTab === 'pc',\n      isNPCTab: this.currentTab === 'npc',\n      selectedTab: this.currentTab,\n      rollRequestsEnabled,\n      skipRollDialog,\n      groupRollsMsg: groupRollsMsgEnabled,\n      selectAllOn,\n      hasSelectedActors: this.selectedActors.size > 0,\n      requestTypes,\n      rollTypes,\n      showNames: true, // You can make this configurable later\n      actorsLocked: this.isLocked,\n      optionsExpanded: this.optionsExpanded\n    };\n  }\n\n  /**\n   * Get formatted stats for an actor\n   */\n  _getActorStats(actor) {\n    LogUtil.log('_getActorStats');\n    const system = actor.system;\n    const stats = [];\n    \n    // HP\n    if (system.attributes?.hp) {\n      stats.push({\n        abbrev: 'HP',\n        value: system.attributes.hp.value\n      });\n    }\n    \n    // AC\n    if (system.attributes?.ac) {\n      stats.push({\n        abbrev: 'AC',\n        value: system.attributes.ac.value\n      });\n    }\n    \n    const spellDC = system.attributes?.spell?.dc;\n    if (spellDC) {\n      stats.push({\n        abbrev: 'DC',\n        value: spellDC\n      });\n    }\n    \n    if (system.skills?.prc?.passive) {\n      stats.push({\n        abbrev: 'PRC',\n        value: system.skills.prc.passive\n      });\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Override _renderFrame to control where the element is inserted in the DOM\n   * @override\n   */\n  async _renderFrame(options) {\n    const frame = await super._renderFrame(options);\n    \n    const chatNotifications = document.querySelector('#chat-notifications');\n    if (chatNotifications && frame) {\n      chatNotifications.insertBefore(frame, chatNotifications.firstChild);\n    }\n    \n    return frame;\n  }\n\n  /**\n   * Called after the application is rendered\n   * Verifies if roll controls are visible and adjusts the offset of the menu\n   */\n  _onRender(context, options) {\n    LogUtil.log('_onRender');\n    super._onRender(context, options);\n    this._attachListeners();\n\n    adjustMenuOffset();\n    \n    // Expand options if applicable\n    if (this.optionsExpanded) {\n      const optionsToggle = this.element.querySelector('.options-toggle');\n      const optionsElement = this.element.querySelector('li.options');\n      optionsToggle?.classList.add('expanded');\n      optionsElement?.classList.add('expanded');\n    }\n    \n    setTimeout(() => {\n      document.addEventListener('click', this._onClickOutside, true);\n    }, 100);\n    \n    this._tokenControlHook = Hooks.on('controlToken', this._onTokenControlChange.bind(this));\n  }\n  \n  /**\n   * Handle token control changes\n   */\n  _onTokenControlChange(token, controlled) {\n    LogUtil.log('_onTokenControlChange');\n    if (!this.rendered) return;\n    \n    if (this._ignoreTokenControl) return;\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n    }\n    \n    this._tokenUpdateTimeout = setTimeout(() => {\n      this._initializeFromSelectedTokens();\n      this.render();\n      \n      this._tokenUpdateTimeout = null;\n    }, 100); // 100ms debounce\n  }\n  \n  /**\n   * Handle clicks outside the menu\n   */\n  _onClickOutside = (event) => {\n    LogUtil.log('_onClickOutside');\n    if (this.isLocked) return;\n    const menu = this.element;\n    if (!menu) return;\n    if (event.target.closest('.flash-rolls-menu')) return;\n    if (menu.contains(event.target)) return;\n    if (event.target.closest('#flash-rolls-icon')) return;\n    if (event.target.closest('.dialog, .app, .notification, .application')) return;\n    this.close();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachListeners() {\n    LogUtil.log('_attachListeners');\n    \n    const html = this.element;\n    \n    // Settings toggles\n    html.querySelector('#flash-rolls-toggle')?.addEventListener('change', this._onToggleRollRequests.bind(this));\n    html.querySelector('#flash5e-skip-dialogs')?.addEventListener('change', this._onToggleSkipDialogs.bind(this));\n    html.querySelector('#flash5e-actors-all')?.addEventListener('change', this._onToggleSelectAll.bind(this));\n    \n    // Lock toggle\n    html.querySelector('#flash5e-actors-lock')?.addEventListener('click', this._onToggleLock.bind(this));\n    \n    // Options toggle\n    html.querySelector('.options-toggle')?.addEventListener('click', this._onToggleOptions.bind(this));\n    \n    // Tab switching\n    const tabs = html.querySelectorAll('.actor-tab');\n    tabs.forEach(tab => {\n      tab.addEventListener('click', this._onTabClick.bind(this));\n    });\n    \n    // Actor selection - handle clicks on actor rows or select buttons\n    html.querySelectorAll('.actor').forEach(actor => {\n      actor.addEventListener('click', this._onActorClick.bind(this));\n    });\n    \n    html.querySelectorAll('.actor-select').forEach(selectBtn => {\n      selectBtn.addEventListener('click', this._onActorSelectClick.bind(this));\n    });\n    \n    // Request type selection - use event delegation for dynamic content\n    const requestTypesContainer = html.querySelector('.request-types');\n    if (requestTypesContainer) {\n      requestTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRequestTypeClick(customEvent);\n        }\n      });\n    }\n    \n    // Roll type selection - use event delegation for dynamic content\n    const rollTypesContainer = html.querySelector('.roll-types');\n    if (rollTypesContainer) {\n      rollTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRollTypeClick(customEvent);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle roll requests toggle\n   */\n  async _onToggleRollRequests(event) {\n    LogUtil.log('_onToggleRollRequests');\n    const SETTINGS = getSettings();\n    const enabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, enabled);\n    \n    // Update the icon in the chat controls\n    SidebarUtil.updateRollRequestsIcon(enabled);\n    \n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleSkipDialogs(event) {\n    LogUtil.log('_onToggleSkipDialogs');\n    const SETTINGS = getSettings();\n    const skip = event.target.checked;\n    await SettingsUtil.set(SETTINGS.skipRollDialog.tag, skip);\n  }\n\n  /**\n   * Handle select all toggle\n   */\n  _onToggleSelectAll(event) {\n    LogUtil.log('_onToggleSelectAll');\n    const selectAll = event.target.checked;\n    this._ignoreTokenControl = true; // To avoid loop\n    \n    const actors = this.currentTab === 'pc' ? \n      game.actors.contents.filter(a => isPlayerOwned(a)) :\n      game.actors.contents.filter(a => !isPlayerOwned(a) && hasTokenInScene(a));\n    \n    actors.forEach(actor => {\n      if (selectAll) {\n        this.selectedActors.add(actor.id);\n        updateCanvasTokenSelection(actor.id, true);\n      } else {\n        this.selectedActors.delete(actor.id);\n        updateCanvasTokenSelection(actor.id, false);\n      }\n    });\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 200);\n    \n    this.render();\n    this._updateRequestTypesVisibility();\n  }\n  \n  /**\n   * Handle lock toggle\n   */\n  _onToggleLock(event) {\n    LogUtil.log('_onToggleLock');\n    event.preventDefault();\n    this.isLocked = !this.isLocked;\n    \n    // Update the icon - the currentTarget IS the icon element\n    const lockIcon = event.currentTarget;\n    lockIcon.classList.remove('fa-lock-keyhole', 'fa-lock-keyhole-open');\n    lockIcon.classList.add(this.isLocked ? 'fa-lock-keyhole' : 'fa-lock-keyhole-open');\n  }\n  \n  /**\n   * Handle options toggle\n   */\n  async _onToggleOptions(event) {\n    LogUtil.log('_onToggleOptions');\n    event.preventDefault();\n    \n    // Toggle the state\n    this.optionsExpanded = !this.optionsExpanded;\n    \n    // Save state to user flag\n    await game.user.setFlag(MODULE.ID, 'menuOptionsExpanded', this.optionsExpanded);\n    \n    // Toggle expanded class on the clicked element\n    const optionsToggle = event.currentTarget || event.target.closest('.options-toggle');\n    if (optionsToggle) {\n      optionsToggle.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n    // Find the li.options sibling and toggle expanded class on it\n    const optionsElement = this.element.querySelector('li.options');\n    if (optionsElement) {\n      optionsElement.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n  }\n  \n  /**\n   * Initialize selected actors from currently selected tokens\n   */\n  _initializeFromSelectedTokens() {\n    LogUtil.log('_initializeFromSelectedTokens');\n    const controlledTokens = canvas.tokens?.controlled || [];\n    this.selectedActors.clear();\n    \n    for (const token of controlledTokens) {\n      if (token.actor) {\n        this.selectedActors.add(token.actor.id);\n        \n        if (this.selectedActors.size === 1) {\n          const isPC = isPlayerOwned(token.actor);\n          this.currentTab = isPC ? 'pc' : 'npc';\n        }\n      }\n    }\n    \n  }\n  \n\n  /**\n   * Handle tab click\n   */\n  async _onTabClick(event) {\n    LogUtil.log('_onTabClick');\n    const tab = event.currentTarget.dataset.tab;\n    if (tab === this.currentTab) return;\n    \n    this.selectedActors.clear();\n    canvas.tokens?.releaseAll();\n    this.selectedRequestType = null;\n    \n    this.currentTab = tab;\n    await this.render();\n  }\n\n  /**\n   * Handle click on actor row\n   */\n  _onActorClick(event) {\n    LogUtil.log('_onActorClick');\n    if (event.target.closest('.actor-select')) return;\n    \n    const actorElement = event.currentTarget;\n    const actorId = actorElement.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Handle click on actor select button\n   */\n  _onActorSelectClick(event) {\n    LogUtil.log('_onActorSelectClick');\n    event.stopPropagation();\n    const actorId = event.currentTarget.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Toggle actor selection state\n   */\n  _toggleActorSelection(actorId) {\n    LogUtil.log('_toggleActorSelection');\n    // Temporarily disable token control hook to avoid feedback loop\n    this._ignoreTokenControl = true;\n    \n    if (this.selectedActors.has(actorId)) {\n      this.selectedActors.delete(actorId);\n      updateCanvasTokenSelection(actorId, false);\n    } else {\n      this.selectedActors.add(actorId);\n      updateCanvasTokenSelection(actorId, true);\n    }\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 100);\n    \n    // Re-render to update the UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    this._updateSelectAllState();\n  }\n  \n\n  /**\n   * Update request types visibility based on actor selection\n   */\n  _updateRequestTypesVisibility() {\n    LogUtil.log('_updateRequestTypesVisibility');\n    // re-render when actor selection changes\n    this.render();\n  }\n\n  /**\n   * Update select all checkbox state\n   */\n  _updateSelectAllState() {\n    LogUtil.log('_updateSelectAllState');\n    const selectAllCheckbox = this.element.querySelector('#flash5e-actors-all');\n    const currentActors = this.currentTab === 'pc' ? 'pc' : 'npc';\n    const checkboxes = this.element.querySelectorAll(`.${currentActors}-actors .actor-item input[type=\"checkbox\"]`);\n    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;\n    \n    selectAllCheckbox.checked = checkedCount > 0 && checkedCount === checkboxes.length;\n    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n  }\n\n  /**\n   * Handle request type click\n   */\n  async _onRequestTypeClick(event) {\n    const requestItem = event.currentTarget;\n    const requestType = requestItem.dataset.id;\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    LogUtil.log('_onRequestTypeClick', [requestType, requestItem.dataset, rollOption]);\n    \n    if (!rollOption) {\n      LogUtil.error('Unknown request type:', [requestType]);\n      return;\n    }\n    \n    if (this.selectedRequestType === requestType) {\n      this.selectedRequestType = null;\n    } else {\n      this.selectedRequestType = requestType;\n    }\n    \n    if (rollOption.subList) {\n      await this.render();\n    } else if (this.selectedRequestType) {\n      this._triggerRoll(requestType, null);\n    }\n  }\n\n  /**\n   * Handle roll type click\n   */\n  _onRollTypeClick(event) {\n    LogUtil.log('_onRollTypeClick');\n    const rollKey = event.currentTarget.dataset.id;\n    // Pass the event through for local rolls\n    this._triggerRoll(this.selectedRequestType, rollKey);\n  }\n\n  /**\n   * Get valid actor IDs based on current tab\n   * @param {Array<string>} selectedActorIds - Array of selected actor IDs\n   * @returns {Array<string>} Filtered array of valid actor IDs\n   */\n  _getValidActorIds(selectedActorIds) {\n    return selectedActorIds.filter(actorId => {\n      const actor = game.actors.get(actorId);\n      if (!actor) return false;\n      const isPC = isPlayerOwned(actor);\n      const isNPC = !isPC && hasTokenInScene(actor);\n      \n      return (this.currentTab === 'pc' && isPC) || (this.currentTab === 'npc' && isNPC);\n    });\n  }\n\n  /**\n   * Handle custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  async _handleCustomRoll() {\n    const formula = await this._showCustomRollDialog();\n    return formula; // Will be null if cancelled\n  }\n\n  /**\n   * Get roll configuration from dialog or create default\n   * @param {Actor[]} actors - Actors being rolled for\n   * @param {string} rollMethodName - The roll method name\n   * @param {string} rollKey - The roll key\n   * @param {boolean} skipRollDialog - Whether to skip dialogs\n   * @param {Array} pcActors - PC actors with owners\n   * @returns {Promise<BasicRollProcessConfiguration|null>} Process configuration or null if cancelled\n   */\n  async _getRollConfiguration(actors, rollMethodName, rollKey, skipRollDialog, pcActors) {\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Show GM configuration dialog (unless skip dialogs is enabled or it's a custom roll)\n    if (!skipRollDialog && rollMethodName !== ROLL_TYPES.CUSTOM) {\n      // Use appropriate dialog based on roll type\n      let DialogClass;\n      if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(rollMethodName)) {\n        DialogClass = GMSkillToolConfigDialog;\n      } else if (rollMethodName === ROLL_TYPES.HIT_DIE) {\n        DialogClass = GMHitDieConfigDialog;\n      } else {\n        DialogClass = GMRollConfigDialog;\n      }\n      const config = await DialogClass.initConfiguration(actors, rollMethodName, rollKey, { \n        skipRollDialog,\n        sendRequest: rollRequestsEnabled || false \n      });\n      LogUtil.log('_getRollConfiguration', [config]);\n      \n      return config; // Will be null if cancelled\n    } else {\n      // Use default BasicRollProcessConfiguration when skipping dialogs\n      const config = {\n        rolls: [{\n          parts: [],\n          data: {},\n          options: {}\n        }],\n        advantage: false,\n        disadvantage: false,\n        rollMode: game.settings.get(\"core\", \"rollMode\"),\n        chatMessage: true,\n        isRollRequest: false,\n        skipRollDialog: true,\n        sendRequest: rollRequestsEnabled && pcActors.length > 0\n      };\n      \n      // Death saves always have DC 10\n      if (rollMethodName === ROLL_TYPES.DEATH_SAVE) {\n        config.target = 10;\n      }\n      \n      return config;\n    }\n  }\n\n  /**\n   * Defines who rolls for each selected actor (GM or player)\n   * Orchestrates the roll actions accordingly\n   * @param {Object} config - Roll configuration\n   * @param {Array} pcActors - PC actors with owners\n   * @param {Actor[]} npcActors - NPC actors\n   * @param {string} rollMethodName - The roll method name\n   * @param {string} rollKey - The roll key\n   */\n  async _orchestrateRollsForActors(config, pcActors, npcActors, rollMethodName, rollKey) {\n    const SETTINGS = getSettings();\n    \n    // Handle PC actors - send roll requests (if sendRequest is true)\n    const successfulRequests = [];\n    const offlinePlayerActors = [];\n    const onlinePlayerActors = [];\n    \n    LogUtil.log('_orchestrateRollsForActors', [config, pcActors, npcActors]);\n\n    \n    const groupRollId = foundry.utils.randomID();\n    \n    // Collect all actors that will be part of this roll\n    const allActors = [];\n\n    if (config.sendRequest) {\n      for (const { actor, owner } of pcActors) {\n        if (!owner.active) {\n          if(SettingsUtil.get(SETTINGS.showOfflineNotifications.tag)) {\n            NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.playerOffline\", { \n              player: owner.name \n            }));\n          }\n          offlinePlayerActors.push(actor);\n        }else{\n          onlinePlayerActors.push({actor, owner});\n        }\n      }\n      allActors.push(...onlinePlayerActors.map(({actor}) => actor));\n    } else {\n      // if requests are off, add to NPC list to roll locally\n      npcActors.push(...pcActors.map(({ actor }) => actor));\n    }\n    \n    allActors.push(...offlinePlayerActors, ...npcActors);\n\n    // Create group message if there are multiple actors and setting is enabled\n    const groupRollsMsgEnabled = SettingsUtil.get(SETTINGS.groupRollsMsgEnabled.tag);\n    if (groupRollsMsgEnabled && allActors.length > 1) {\n      await ChatMessageUtils.createGroupRollMessage(\n        allActors,\n        rollMethodName,\n        rollKey,\n        config,\n        groupRollId\n      );\n    }\n\n    /////////////////////////////////\n    // Player Rolls: Actors owned by active players\n    for (const { actor, owner } of onlinePlayerActors) {\n      const useGroupId = groupRollsMsgEnabled && allActors.length > 1 ? groupRollId : null;\n      await this._sendRollRequestToPlayer(actor, owner, rollMethodName, rollKey, config, true, useGroupId);\n      successfulRequests.push({ actor, owner });\n      await delay(100);\n    }\n    if (successfulRequests.length > 0) {\n      this._showConsolidatedNotification(successfulRequests, rollMethodName, rollKey);\n    }\n    \n    /////////////////////////////////\n    // GM Rolls: Actors owned by offline players or NPC actors\n    const gmRolledActors = [...offlinePlayerActors, ...npcActors];\n    if (gmRolledActors.length > 0) {\n      config.skipRollDialog = true;\n      config.groupRollId = groupRollsMsgEnabled && allActors.length > 1 ? groupRollId : null;\n      await this._handleGMRolls(gmRolledActors, rollMethodName, rollKey, config);\n    }\n  }\n\n  /**\n   * Method called from menu items to trigger the roll for selected actors\n   * @param {string} requestType - The type of roll request (e.g., 'skill', 'ability')\n   * @param {string} rollKey - The specific roll key (e.g., 'acr' for Acrobatics)\n   */\n  async _triggerRoll(requestType, rollKey) {\n    LogUtil.log('_triggerRoll', [requestType, rollKey]);\n    const SETTINGS = getSettings();\n    const selectedActorIds = Array.from(this.selectedActors);\n    const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n    \n    // Validate and filter actors\n    const validActorIds = this._getValidActorIds(selectedActorIds);\n    let actors = validActorIds\n      .map(id => game.actors.get(id));\n      // .filter(actor => actor);\n    \n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    const rollMethodName = (rollOption?.name || requestType)?.toLowerCase();\n    \n    switch(rollMethodName) {\n      case ROLL_TYPES.CUSTOM:\n        rollKey = await this._handleCustomRoll();\n        if (!rollKey) return;\n        break;\n      case ROLL_TYPES.INITIATIVE:\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n        const combatReady = await ensureCombatForInitiative();\n        if (combatReady) {\n          LogUtil.log(\"_triggerRoll - initiative\", [validActorIds]);\n          \n          // Ensure all actors are combatants before filtering\n          for (const actorId of validActorIds) {\n            const actor = game.actors.get(actorId);\n            if (actor) {\n              const combatants = game.combat.getCombatantsByActor(actorId);\n              if (!combatants || combatants.length === 0) {\n                LogUtil.log(\"_triggerRoll - adding actor to combat\", actor.name);\n                // Add the actor to combat\n                await game.combat.createEmbeddedDocuments(\"Combatant\", [{\n                  actorId: actorId,\n                  tokenId: actor.getActiveTokens()?.[0]?.id\n                }]);\n              }\n            }\n          }\n          \n          const filteredActorIds = await filterActorsForInitiative(validActorIds, game);\n\n          LogUtil.log(\"_triggerRoll filteredActorIds\", [filteredActorIds, !filteredActorIds.length]);\n          if (!filteredActorIds.length) return;\n\n          actors = filteredActorIds\n            .map(id => game.actors.get(id));\n            // .filter(actor => actor);\n        }\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        actors = await filterActorsForDeathSaves(actors);\n        break;\n      default:\n        break;\n    }\n    \n    if (!actors.length) {\n      NotificationManager.notify('warn', \"No valid actors selected\");\n      return;\n    }\n    \n    const { pcActors, npcActors } = categorizeActorsByOwnership(actors);\n    const config = await this._getRollConfiguration(actors, rollMethodName, rollKey, skipRollDialog, pcActors);\n    \n    LogUtil.log(\"_triggerRoll config\", [config]);\n    if (!config) return;\n    \n    // Pass event to orchestrate rolls for local GM rolls\n    await this._orchestrateRollsForActors(config, pcActors, npcActors, rollMethodName, rollKey);\n    setTimeout(() => this.close(), 500);\n  }\n  \n  /**\n   * Send a roll request to a player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config - Roll configuration from dialog\n   * @param {boolean} suppressNotification - If true, don't show individual notification\n   * @param {string} groupRollId - Optional group roll ID for multi-actor rolls\n   */\n  async _sendRollRequestToPlayer(actor, owner, requestType, rollKey, config, suppressNotification = false, groupRollId = null) {\n    LogUtil.log('_sendRollRequestToPlayer #A', [requestType, rollKey]);\n    const SETTINGS = getSettings();\n    \n    let rollType = requestType?.toLowerCase();\n    \n    // Mapping for compound types\n    if (rollType === ROLL_TYPES.ABILITY_CHECK) {\n      rollType = ROLL_TYPES.ABILITY;\n    } else if (rollType === ROLL_TYPES.SAVING_THROW) {\n      rollType = ROLL_TYPES.SAVE;\n    } else if (rollType === ROLL_TYPES.INITIATIVE_DIALOG) {\n      rollType = ROLL_TYPES.INITIATIVE;\n    }\n    \n    if (rollType === ROLL_TYPES.HIT_DIE) {\n      const hdData = actor.system.attributes.hd; // First available hit die denomination\n      \n      if (hdData.value > 0) {\n        rollKey = hdData.largestAvailable;\n      } else {\n        // No hit dice available - show dialog to GM\n        const dialogResult = await foundry.applications.api.DialogV2.confirm({\n          window: {\n            title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillTitle\") || \"No Hit Dice Available\",\n            classes: [\"flash5e-hit-die-dialog\"]\n          },\n          position: {\n            width: 420\n          },\n          content: `<p>${game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillMessage\", { \n            actors: actor.name \n          }) || \"\"}</p>`,\n          modal: true,\n          rejectClose: false,\n          yes: {\n            label: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillAndSend\") || \"Refill & Send\",\n            icon: \"\"\n          },\n          no: {\n            label: game.i18n.localize(\"Cancel\") || \"Cancel\",\n            icon: \"\"\n          }\n        });\n        \n        if (dialogResult) {\n          try {\n            LogUtil.log('About to call handleHitDieRecovery for', [actor.name]);\n            const hitDieResult = await RollHandlers.handleHitDieRecovery(actor);\n            LogUtil.log('handleHitDieRecovery completed', [hitDieResult]);\n          } catch (error) {\n            LogUtil.error('Error calling handleHitDieRecovery:', [error]);\n          }\n          \n          // Get the largest available hit die after refill\n          rollKey = actor.system.attributes.hd.largestAvailable;\n          \n          NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refilled\", { \n            actor: actor.name \n          }) || `Hit dice refilled for ${actor.name}`);\n        } else {\n          // User cancelled - don't send the request\n          return;\n        }\n      }\n    }\n    \n    // Build the request data with proper rollProcessConfig\n    // Filter out circular references that midi-qol might add\n    const cleanConfig = { ...config };\n    delete cleanConfig.subject;\n    delete cleanConfig.workflow;\n    delete cleanConfig.item;\n    delete cleanConfig.activity;\n    \n    const requestData = {\n      type: \"rollRequest\",\n      groupRollId: groupRollId || foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      activityId: null,  // Menu-initiated rolls don't use activities\n      rollProcessConfig: {\n        ...cleanConfig,\n        _requestedBy: game.user.name  // Add who requested the roll\n      },\n      skipRollDialog: false, // Never skip to player when it's a request\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    // await ModuleHelpers.prepareMidiQOLSettings();\n    LogUtil.log('_sendRollRequestToPlayer - prepareMidiQOLSettings', []);\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    if (!suppressNotification) {\n      NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent\", { \n        player: owner.name,\n        actor: actor.name \n      }));\n    }\n  }\n  \n  /**\n   * Send a consolidated notification for multiple roll requests\n   * @param {Array} successfulRequests - Array of {actor, owner} objects\n   * @param {string} rollMethodName - The type of roll being requested\n   * @param {string} rollKey - The specific roll key (if applicable)\n   */\n  _showConsolidatedNotification(successfulRequests, rollMethodName, rollKey) {\n    LogUtil.log('_showConsolidatedNotification');\n    // Group requests by player\n    const requestsByPlayer = {};\n    for (const { actor, owner } of successfulRequests) {\n      if (!requestsByPlayer[owner.id]) {\n        requestsByPlayer[owner.id] = {\n          player: owner,\n          actors: []\n        };\n      }\n      requestsByPlayer[owner.id].actors.push(actor);\n    }\n    \n    // Get roll type name for display\n    // Find the option key that matches this rollMethodName\n    let rollOptionKey = null;\n    for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n      if (option.name === rollMethodName) {\n        rollOptionKey = key;\n        break;\n      }\n    }\n    \n    const rollTypeKey = rollMethodName;\n    let rollTypeName = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollTypeKey}`) || rollTypeKey;\n    \n    // Add specific roll details if applicable\n    if (rollKey) {\n      const normalizedRollTypeKey = rollTypeKey.toLowerCase();\n      if (normalizedRollTypeKey === ROLL_TYPES.SKILL) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.SAVING_THROW) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.ABILITY_CHECK) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.TOOL) {\n        // Try to get tool name from enrichmentLookup\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          rollTypeName = `${rollTypeName} (${toolItem?.name || rollKey})`;\n        } else {\n          rollTypeName = `${rollTypeName} (${rollKey})`;\n        }\n      } else if (normalizedRollTypeKey === ROLL_TYPES.CUSTOM) {\n        rollTypeName = `${rollTypeName}: ${rollKey}`;\n      }\n    }\n    \n    // Use NotificationManager for consolidated roll request notifications\n    NotificationManager.notifyRollRequestsSent(requestsByPlayer, rollTypeName);\n  }\n  \n  /**\n   * Handle rolling for NPC actors locally\n   * @param {Actor[]} actors \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {BasicRollProcessConfiguration} rollProcessConfig - Process configuration from GM dialog\n   */\n  async _handleGMRolls(actors, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_handleGMRolls', [actors, requestType, rollKey, rollProcessConfig]);\n    \n    for (const actor of actors) {\n      await this._initiateRoll(actor, requestType, rollKey, rollProcessConfig);\n      await delay(100);\n    }\n  }\n  \n  /**\n   * Execute local roll for a GM actor\n   * @param {Actor} actor \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {BasicRollProcessConfiguration} rollProcessConfig - Process configuration from GM dialog\n   */\n  async _initiateRoll(actor, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_initiateRoll', [requestType, rollKey, rollProcessConfig]);\n    try {\n      const normalizedType = requestType.toLowerCase();\n      let actualRollKey = rollKey;\n      if (normalizedType === ROLL_TYPES.HIT_DIE) {\n        const hdData = actor.system.attributes.hd;\n        if (hdData) {\n          // Find the first denomination with available uses\n          const denominations = ['d6', 'd8', 'd10', 'd12', 'd20'];\n          for (const denom of denominations) {\n            const available = hdData[denom]?.value || 0;\n            if (available > 0) {\n              actualRollKey = denom;\n              break;\n            }\n          }\n        }\n        if (!actualRollKey) {\n          // No hit dice available - show refill dialog\n          LogUtil.log('_initiateRoll - No hit dice available', [actor.name]);\n          \n          const dialogResult = await foundry.applications.api.DialogV2.confirm({\n            window: {\n              title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillTitle\") || \"No Hit Dice Available\",\n              classes: [\"flash5e-hit-die-dialog\"]\n            },\n            position: {\n              width: 420\n            },\n            content: `<p>${game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillMessageLocal\", { \n              actors: actor.name \n            }) || \"\"}</p>`,\n            modal: true,\n            rejectClose: false,\n            yes: {\n              label: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillAndRoll\") || \"Refill & Roll\",\n              icon: \"\"\n            },\n            no: {\n              label: game.i18n.localize(\"Cancel\") || \"Cancel\",\n              icon: \"\"\n            }\n          });\n          \n          if (dialogResult) {\n            // Refill hit dice and continue with the roll\n            const result = await RollHandlers.handleHitDieRecovery(actor);\n            LogUtil.log('Hit die recovery result', [result]);\n            \n            // Notify of refill\n            NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refilled\", { \n              actor: actor.name \n            }));\n            \n            // Get the largest available hit die after refill\n            const hdDataAfterRefill = actor.system.attributes.hd;\n            actualRollKey = hdDataAfterRefill.largestAvailable;\n            \n            if (!actualRollKey) {\n              NotificationManager.notify('warn', game.i18n.format(\"DND5E.HitDiceWarn\", { name: actor.name }));\n              return;\n            }\n          } else {\n            // User cancelled\n            return;\n          }\n        }\n      }\n      \n      // Extract situational bonus from the rolls array if present\n      const situational = rollProcessConfig.rolls?.[0]?.data?.situational || \"\";\n      \n      // Build requestData structure expected by RollHandlers\n      const requestData = {\n        rollKey: actualRollKey,\n        groupRollId: rollProcessConfig.groupRollId, // Pass through the group roll ID\n        config: {\n          ...rollProcessConfig,\n          situational: situational,\n          rollMode: rollProcessConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n          advantage: rollProcessConfig.advantage || false,\n          disadvantage: rollProcessConfig.disadvantage || false,\n          target: rollProcessConfig.target\n        }\n      };\n      \n      // Dialog configuration\n      const dialogConfig = {\n        configure: !rollProcessConfig.fastForward && !rollProcessConfig.skipRollDialog,\n        isRollRequest: true  // Mark this as a roll request to prevent re-interception\n      };\n      \n      // Message configuration\n      const messageConfig = {\n        rollMode: rollProcessConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        create: rollProcessConfig.chatMessage !== false,\n        isRollRequest: true  // Mark this as a roll request to prevent re-interception\n      };\n      \n      // Pass the proper roll configuration structure\n      const rollConfig = rollProcessConfig.rolls?.[0] || {};\n      \n      // Use the roll handler for the requested roll type\n      const handler = RollHandlers[normalizedType];\n      if (handler) {\n        await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        NotificationManager.notify('warn', `Unknown roll type: ${requestType}`);\n      }\n    } catch (error) {\n      LogUtil.error('executeActorRoll', [error]);\n      NotificationManager.notify('error', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollError\", { \n        actor: actor.name \n      }));\n    }\n  }\n\n  /**\n   * Clean up when closing\n   */\n  async _onClose(options) {\n    LogUtil.log('_onClose',[options]);\n    await super._onClose(options);\n    \n    this.selectedActors.clear();\n    this.selectedRequestType = null;\n    document.removeEventListener('click', this._onClickOutside, true);\n    \n    if (this._tokenControlHook) {\n      Hooks.off('controlToken', this._tokenControlHook);\n      this._tokenControlHook = null;\n    }\n    \n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n      this._tokenUpdateTimeout = null;\n    }\n    \n    if (RollRequestsMenu.#instance === this) {\n      RollRequestsMenu.#instance = null;\n    }\n  }\n\n  /**\n   * Override render positioning to use CSS instead of inline styles\n   */\n  setPosition(position={}) {\n    LogUtil.log('setPosition');\n    // Don't set any inline position styles - let CSS handle it\n    return this;\n  }\n  \n  /**\n   * Show custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  async _showCustomRollDialog() {\n    LogUtil.log('_showCustomRollDialog');\n    return CustomRollDialog.prompt({\n      formula: \"\",\n      readonly: false\n    });\n  }\n\n  /**\n   * Toggle the roll requests menu open/closed\n   * @static\n   */\n  static toggle() {\n    LogUtil.log('RollRequestsMenu.toggle');\n    if (!this.#instance) {\n      this.#instance = new RollRequestsMenu();\n      this.#instance.render(true);\n    } else {\n      if (this.#instance.rendered) {\n        this.#instance.close();\n      } else {\n        this.#instance._initializeFromSelectedTokens();\n        this.#instance.render(true);\n      }\n    }\n  }\n}\n","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing sidebar controls\n */\nexport class SidebarUtil {\n  /**\n   * Add the roll request bolt icon to sidebar\n   * @param {SidebarTab} app - The sidebar tab application\n   * @param {jQuery} html - The rendered HTML\n   * @param {Object} options - Render options\n   */\n  static addSidebarControls(app, html, options) {\n    if (!game.user.isGM || app.id !== \"sidebar\") return;\n    \n    // const htmlElement = html[0] || html;\n    // document.querySelector(\"#chat\");\n    \n    // Find the chat controls container\n    const chatControls = document.querySelector(\"#roll-privacy\");\n    LogUtil.log(\"addSidebarControls\",[chatControls]);\n\n    if (!chatControls || chatControls.querySelector('.flash-rolls-icon')) {\n      return;\n    }\n    \n    // Get current settings to determine initial state\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Create the roll request icon\n    const rollRequestIcon = document.createElement('button');\n    rollRequestIcon.id = \"flash-rolls-icon\"; \n    rollRequestIcon.setAttribute(\"data-tooltip-direction\", \"RIGHT\");\n    rollRequestIcon.className = `ui-control icon chat-control-icon flash-rolls-icon${rollRequestsEnabled ? ' active' : ''}`;\n    rollRequestIcon.title = game.i18n.localize('CRLNGN_ROLLS.ui.menus.rollRequestsTitle');\n    rollRequestIcon.innerHTML = `<i class=\"fas fa-bolt${rollRequestsEnabled ? '' : '-slash'}\"></i>`;\n    \n    // Insert before the d20 dice icon\n    const firstChatControlIcon = chatControls.firstChild;\n    if (firstChatControlIcon) {\n      firstChatControlIcon.parentNode.insertBefore(rollRequestIcon, firstChatControlIcon);\n    } else {\n      chatControls.insertBefore(rollRequestIcon, chatControls.firstChild);\n    }\n\n    LogUtil.log(\"addSidebarControls\",[firstChatControlIcon, rollRequestIcon]);\n    \n    rollRequestIcon.addEventListener(\"click\", (event) => {\n      event.stopPropagation();\n      event.preventDefault();\n      RollRequestsMenu.toggle();\n    });\n  }\n  \n  /**\n   * Update the roll requests icon based on enabled state\n   * @param {boolean} enabled - Whether roll requests are enabled\n   */\n  static updateRollRequestsIcon(enabled) {\n    const icon = document.querySelector('#flash-rolls-icon i');\n    if (icon) {\n      icon.className = `fas fa-bolt${enabled ? '' : '-slash'}`;\n    }\n  }\n}","import { HOOKS_CORE, HOOKS_DND5E } from \"../constants/Hooks.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { RollInterceptor } from \"./RollInterceptor.mjs\";\nimport { updateSidebarClass, isSidebarExpanded } from \"./helpers/Helpers.mjs\";\nimport { SidebarUtil } from \"./SidebarUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { ACTIVITY_TYPES, MODULE_ID } from \"../constants/General.mjs\";\nimport { GeneralUtil } from \"./helpers/GeneralUtil.mjs\";\nimport { ModuleHelpers } from \"./helpers/ModuleHelpers.mjs\";\nimport { ChatMessageUtils } from \"./ChatMessageUtils.mjs\";\n\n/**\n * Utility class for managing all module hooks in one place\n */\nexport class HooksUtil {\n  /**\n   * Registered hook IDs for cleanup\n   * @type {Map<string, number>}\n   */\n  static registeredHooks = new Map();\n  static midiTimeout = null;\n  \n  /**\n   * Initialize main module hooks\n   */\n  static initialize() {\n    Hooks.once(HOOKS_CORE.INIT, this._onInit.bind(this));\n    Hooks.once(HOOKS_CORE.READY, this._onReady.bind(this));\n  }\n  \n  /**\n   * Triggered when Foundry initializes\n   */\n  static _onInit() {\n    const SETTINGS = getSettings();\n    document.body.classList.add(\"flash5e\");\n    SettingsUtil.registerSettings();\n    DiceConfigUtil.initialize();\n    \n    this._registerHooks();\n  }\n  \n  /**\n   * Triggered when Foundry is ready (fully loaded)\n   */\n  static _onReady() {\n    if(ModuleHelpers.isModuleActive(\"midi-qol\")){\n      LogUtil.log(\"HooksUtil.initialize\", [\"midi-qol is active. Awaiting for it to be ready...\"]);\n      Hooks.once(\"midi-qol.ready\", this._initModule.bind(this));\n    }else{\n      LogUtil.log(\"HooksUtil.initialize\", [\"midi-qol is NOT active. Starting...\"]);\n      this._initModule();\n    }\n  }\n\n  static async _initModule() {\n    const SETTINGS = getSettings();\n    const isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n    if (isDebugOn) {\n      CONFIG.debug.hooks = true;\n    }\n\n    await ChatMessageUtils.initialize();\n\n    if (game.user.isGM) {\n      RollInterceptor.initialize();\n      this._registerGMHooks();\n    }else{\n      DiceConfigUtil.getDiceConfig();\n      this._registerPlayerHooks();\n    }\n    updateSidebarClass(isSidebarExpanded());\n  }\n  \n  /**\n   * Register D&D5e specific hooks\n   */\n  static _registerHooks() {\n    this._registerHook(HOOKS_CORE.RENDER_SIDEBAR, this._onRenderSidebar.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessage.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessageFlavor.bind(this));\n    this._registerHook(HOOKS_CORE.RENDER_CHAT_MESSAGE, this._onRenderChatMessageHTML.bind(this));\n    this._registerHook(HOOKS_CORE.CHANGE_SIDEBAR_TAB, this._onSidebarUpdate.bind(this));\n    this._registerHook(HOOKS_CORE.COLLAPSE_SIDE_BAR, this._onSidebarUpdate.bind(this));\n    this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderRollConfigDialog.bind(this));\n    this._registerHook(HOOKS_DND5E.RENDER_SKILL_TOOL_ROLL_DIALOG, this._onRenderSkillToolDialog.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_USE_ACTIVITY, this._onPreUseActivity.bind(this));\n    this._registerHook(HOOKS_DND5E.POST_USE_ACTIVITY, this._onPostUseActivity.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._onPreRollHitDieV2.bind(this));\n    this._registerHook(HOOKS_DND5E.POST_ROLL_CONFIG, this._onPostRollConfig.bind(this));\n  }\n  \n  /**\n   * Register GM-specific hooks\n   */\n  static _registerGMHooks() {\n    this._registerHook(HOOKS_CORE.USER_CONNECTED, this._onUserConnected.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessageGM.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_V2, this._onPreRoll.bind(this));\n\n    game.users.forEach(user => {\n      this._onUserConnected(user);\n    });\n  }\n\n  static _registerPlayerHooks() {\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG, this._onPreRollInitiativeDialog.bind(this));\n    // this._registerHook(HOOKS_DND5E.PRE_CONFIGURE_INITIATIVE, this._onPreConfigureInitiative.bind(this));\n    \n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._onPreRollAttackV2.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._onPreRollDamageV2.bind(this));\n    Hooks.on(\"dnd5e.preRollAbilityCheckV2\", (config, dialog, message) => {\n      LogUtil.log(\"_onPreRollAbilityCheckV2\", [config, dialog, message]);\n      if (config.isRollRequest) {\n        dialog.configure = true;\n      }\n    });\n    \n    // this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderRollConfigDialog.bind(this));\n  }\n\n  static _onSidebarUpdate(tab) {\n    LogUtil.log(\"_onSidebarUpdate\", [tab]);\n    updateSidebarClass(isSidebarExpanded());\n  }\n  \n  /**\n   * Handle data after roll configuration\n   */\n  static _onPostRollConfig(rolls, config, dialog, message) {\n    if (config._showRequestedBy && rolls.length > 0) {\n      message.data = message.data || {};\n      message.data._showRequestedBy = true;\n      message.data._requestedBy = config._requestedBy;\n    }\n  }\n  \n  /**\n   * Handle data before creating chat message for requested rolls\n   */\n  static _onPreCreateChatMessage(chatMessage, data, options, userId) {\n    // Handle requested by text\n    if (data._showRequestedBy && data.rolls?.length > 0) {\n      const requestedBy = data._requestedBy || 'GM';\n      const requestedText = game.i18n.format('CRLNGN_ROLL_REQUESTS.chat.requestedBy', { gm: requestedBy });\n      \n      const currentFlavor = data.flavor || '';\n      data.flavor = currentFlavor ? `${currentFlavor} ${requestedText}` : requestedText;\n    }\n    \n    // Check if we have groupRollId in the message data flags that needs to be preserved\n    if (data.flags?.[MODULE_ID]?.groupRollId) {\n      LogUtil.log('_onPreCreateChatMessage - Found groupRollId in data flags', [data]);\n    }\n    \n    // Check if this is a roll message that should be part of a group\n    if (data.rolls?.length > 0 || data.flags?.core?.initiativeRoll) {\n      const speaker = data.speaker;\n      const actorId = speaker?.actor;\n      \n      if (actorId) {\n        // Get the actor - could be a token actor\n        let actor = game.actors.get(actorId);\n        \n        // For initiative rolls, the speaker might reference a token\n        if (!actor && speaker?.token) {\n          const token = canvas.tokens.get(speaker.token);\n          if (token?.actor) {\n            actor = token.actor;\n            LogUtil.log('_onPreCreateChatMessage - Using token actor from speaker', [actor.name, actor.id]);\n          }\n        }\n        \n        if (!actor) {\n          LogUtil.log('_onPreCreateChatMessage - No actor found', [actorId, speaker]);\n          return;\n        }\n        \n        if (game.user.isGM) {\n          // GM: Check pending group rolls\n          // Need to check both the token actor ID and base actor ID\n          const baseActorId = actor.isToken ? actor.actor?.id : actor.id;\n          const checkIds = [actorId, baseActorId].filter(id => id);\n          \n          for (const [groupRollId, pendingData] of ChatMessageUtils.pendingRolls.entries()) {\n            if (checkIds.some(id => pendingData.actors.includes(id))) {\n              // This actor is part of a group roll, add the flag\n              data.flags = data.flags || {};\n              data.flags[MODULE_ID] = data.flags[MODULE_ID] || {};\n              data.flags[MODULE_ID].groupRollId = groupRollId;\n              LogUtil.log('_onPreCreateChatMessage - Added groupRollId flag (GM)', [groupRollId, actorId]);\n              break;\n            }\n          }\n        } else {\n          // Player: Check if we have a stored groupRollId for this roll\n          let storedGroupRollId = actor.getFlag(MODULE_ID, 'tempGroupRollId');\n          if (!storedGroupRollId && actor.isToken) {\n            const baseActor = game.actors.get(actor.actor?.id);\n            if (baseActor) {\n              storedGroupRollId = baseActor.getFlag(MODULE_ID, 'tempGroupRollId');\n              LogUtil.log('_onPreCreateChatMessage - Checking base actor for tempGroupRollId', [baseActor.id, storedGroupRollId]);\n            }\n          }\n          \n          if (storedGroupRollId) {\n            actor.unsetFlag(MODULE_ID, 'tempGroupRollId');\n            if (actor.isToken) {\n              const baseActor = game.actors.get(actor.actor?.id);\n              if (baseActor) {\n                baseActor.unsetFlag(MODULE_ID, 'tempGroupRollId');\n              }\n            }\n          }\n          \n          // Also check for initiative-specific stored config\n          let storedInitConfig = actor.getFlag(MODULE_ID, 'tempInitiativeConfig');\n          \n          // For token actors, also check the base actor\n          if (!storedInitConfig && actor.isToken) {\n            const baseActor = game.actors.get(actor.actor?.id);\n            if (baseActor) {\n              storedInitConfig = baseActor.getFlag(MODULE_ID, 'tempInitiativeConfig');\n              LogUtil.log('_onPreCreateChatMessage - Checking base actor for tempInitiativeConfig', [baseActor.id, storedInitConfig]);\n            }\n          }\n          \n          if (storedInitConfig?.groupRollId || storedGroupRollId) {\n            data.flags = data.flags || {};\n            data.flags[MODULE_ID] = data.flags[MODULE_ID] || {};\n            data.flags[MODULE_ID].groupRollId = storedGroupRollId || storedInitConfig.groupRollId;\n            LogUtil.log('_onPreCreateChatMessage - Added groupRollId flag from initiative config', [storedInitConfig.groupRollId, actorId]);\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Handle flavor data before creating chat message\n   */\n  static _onPreCreateChatMessageFlavor(message, data, options, userId) {\n    if (data.rolls?.length > 0 && data.rolls[0]) {\n      try {\n        const rollData = data.rolls[0];\n        if (rollData.options?._customFlavor) {\n          data.flavor = rollData.options._customFlavor;\n        }\n      } catch (error) {\n        LogUtil.error(\"_onPreCreateChatMessageFlavor\", [error]);\n      }\n    }\n  }\n  \n  /**\n   * Triggered whenever roll configuration dialog is rendered. \n   * Used to add custom situational bonus from data, since the default DnD5e dialog does not seem to handle that\n   */\n  static _onRenderRollConfigDialog(app, html, data) {\n    LogUtil.log(\"_onRenderRollConfigDialog #0\", [ app, data ]);\n    if (app._flashRollsApplied) return;\n    \n    // Check if this is an initiative roll\n    const isInitiativeRoll = app.config?.hookNames?.includes('initiativeDialog') || \n                           app.element?.id?.includes('initiative');\n    \n    if (isInitiativeRoll) {\n      const actor = app.config?.subject;\n      if (!actor) return;\n      \n      const storedConfig = actor.getFlag(MODULE_ID, 'tempInitiativeConfig');      \n      if (storedConfig) {\n        app._flashRollsApplied = true;\n\n        // Trigger change event after a short delay\n        const situationalInput = html.querySelector('input[name*=\"situational\"]');\n        setTimeout(() => {\n          situationalInput.dispatchEvent(new Event('change', {\n            bubbles: true,\n            cancelable: false\n          }));\n        }, 50);\n      }\n      \n      return;\n    }else{\n      const situationalInputs = html.querySelectorAll('input[name*=\"situational\"]');\n      \n      situationalInputs.forEach((input, index) => { \n        if (!input.value && app.config?.rolls?.[0]?.data?.situational) {\n          input.value = app.config.rolls[0].data.situational;\n        }\n        LogUtil.log(\"_onRenderRollConfigDialog #1\", [input.value, app.config.rolls[0]]);\n        \n        if (input.value) {\n          app._flashRollsApplied = true;\n          \n          setTimeout(() => {\n            input.dispatchEvent(new Event('change', {\n              bubbles: true,\n              cancelable: false\n            }));\n\n            if (app.config?.rolls?.[0]?.data) {\n              delete app.config.rolls[0].data.situational;\n            }\n          }, 50);\n        }\n      });\n    }\n    \n  }\n  \n  /**\n   * Intercept group roll message creation (GM only) - currently unused\n   */\n  static _onPreCreateChatMessageGM(message, data, options, userId) {\n    LogUtil.log(\"_onPreCreateChatMessageGM\", [message, data, options, userId]);\n  }\n  \n  /**\n   * Intercept rendered chat messages to handle group rolls\n   */\n  static _onRenderChatMessageHTML(message, html, context) {\n    LogUtil.log(\"_onRenderChatMessageHTML\", [message, html, context]);\n    // ChatMessageUtils handles hiding and deletion internally\n    ChatMessageUtils.interceptRollMessage(message, html, context);\n  }\n  \n  /**\n   * Request dice configuration from the connected user\n   */\n  static _onUserConnected(user) {\n    if (user.active && user.id !== game.user.id) {\n      DiceConfigUtil.requestDiceConfigFromUser(user.id);\n    }\n  }\n\n  /**\n   * Handle render ApplicationV2\n   */\n  static _onRenderApplicationV2(app, html, options) {\n    LogUtil.log(\"_onRenderApplicationV2\", [app, html, options]);\n  }\n  \n  /**\n   * Handle render Sidebar\n   */\n  static _onRenderSidebar(app, html, options) {\n    LogUtil.log(\"_onRenderSidebar\", [app, html, options]);\n    SidebarUtil.addSidebarControls(app, html, options);\n  }\n  \n  /**\n   * Register a hook and track it\n   * @param {string} hookName - The hook name\n   * @param {Function} handler - The handler function\n   * @private\n   */\n  static _registerHook(hookName, handler) {\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.set(`${hookName}_${hookId}`, hookId);\n    return hookId;\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterAll() {\n    this.registeredHooks.forEach((hookId, key) => {\n      const hookName = key.split('_')[0];\n      Hooks.off(hookName, hookId);\n    });\n    this.registeredHooks.clear();\n  }\n  \n  /**\n   * Check if a hook is registered\n   * @param {string} hookName - The hook name to check\n   * @returns {boolean}\n   */\n  static isRegistered(hookName) {\n    for (const key of this.registeredHooks.keys()) {\n      if (key.startsWith(`${hookName}_`)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Triggered before a roll is made\n   * @param {*} config \n   * @param {*} dialogOptions \n   * @param {*} messageOptions \n   */\n  static _onPreRoll(config, dialogOptions, messageOptions, d) {\n    LogUtil.log(\"_onPreRoll #0\", [config, dialogOptions, messageOptions, d]);\n    \n  }\n  \n  /**\n   * Actor5e.rollHitDie concatenates our roll data with its own roll data, creating two rolls.\n   * We fix this behavior here so situational bonus is added correctly without duplicating rolls\n   */\n  static _onPreRollHitDieV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollHitDieV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    if (config.rolls && config.rolls.length > 1) {\n      // Collect all situational bonuses from ALL rolls\n      const allSituationalBonuses = [];\n      \n      // Check all rolls for situational bonuses\n      for(let i = 0; i < config.rolls.length; i++){\n        const roll = config.rolls[i];\n        if (roll && roll.data && roll.data.situational) {\n          allSituationalBonuses.push(roll.data.situational);\n        }\n      }\n      \n      // If we have situational bonuses to consolidate\n      if (allSituationalBonuses.length > 0) {\n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        \n        // Combine all unique situational bonuses\n        const uniqueBonuses = [...new Set(allSituationalBonuses)];\n        \n        // Format and combine the bonuses\n        config.rolls[0].data.situational = uniqueBonuses.map(bonus => {\n          const trimmedBonus = bonus.toString().trim();\n          if (trimmedBonus.startsWith('-')) {\n            return `(${trimmedBonus})`;\n          } else if (trimmedBonus.startsWith('+')) {\n            return `${trimmedBonus.substring(1)}`;\n          } else {\n            return `${trimmedBonus}`;\n          }\n        }).join(' + ');\n        \n        // Ensure @situational is in parts array only once\n        if(game.user.isGM && !config.rolls[0].parts.find(p => p.includes(\"@situational\"))){\n          config.rolls[0].parts.push(\"@situational\");\n        }\n      }\n      \n      // Keep only the first valid roll\n      config.rolls = config.rolls.slice(0, 1);\n      \n      LogUtil.log(\"Cleaned up hit die rolls\", config.rolls);\n    }\n  }\n  \n  /**\n   * Handle pre-roll initiative dialog hook to add situational bonus\n   */\n  static _onPreRollInitiativeDialog(config, dialogOptions, messageOptions) {\n    \n    // Check if actor has stored situational bonus\n    const actor = config.subject;\n    const storedConfig = actor.getFlag(MODULE_ID, 'tempInitiativeConfig');\n\n\n    LogUtil.log(\"_onPreRollInitiativeDialog triggered\", [config, storedConfig, dialogOptions, messageOptions]);\n    // Apply advantage/disadvantage to the app config\n    config.advantage = storedConfig?.advantage || config.advantage || false;\n    config.disadvantage = storedConfig?.disadvantage || config.disadvantage || false;\n    \n    config.rollMode = storedConfig?.rollMode || config.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n    messageOptions.rollMode = storedConfig?.rollMode || messageOptions.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n    \n    if (storedConfig.rolls?.[0]?.data?.situational && config.rolls?.[0]?.data) {\n      config.rolls[0].data.situational = storedConfig.rolls[0].data.situational;\n    }\n\n    // // Apply the situational bonus from stored rolls\n    // if (storedConfig.rolls?.[0]?.data?.situational) {\n    //   const situationalInputs = html.querySelectorAll('input[name*=\"situational\"]');\n    //   situationalInputs.forEach(input => {\n    //     if (!input.value) {\n    //       input.value = storedConfig.rolls[0].data.situational;\n    //     }\n    //   });\n    // }\n    \n    // if (actor && actor._initiativeSituationalBonus) {\n    //   if (!config.rolls || config.rolls.length === 0) {\n    //     const initiativeConfig = actor.getInitiativeRollConfig({});\n    //     config.rolls = initiativeConfig.rolls || [];\n    //   }\n      \n    //   // Add situational bonus\n    //   if (config.rolls.length > 0) {\n    //     if (!config.rolls[0].data) {\n    //       config.rolls[0].data = {};\n    //     }\n    //     config.rolls[0].data.situational = actor._initiativeSituationalBonus;\n        \n    //     LogUtil.log(\"Added situational bonus to initiative dialog\", [{\n    //       bonus: actor._initiativeSituationalBonus,\n    //       rolls: config.rolls\n    //     }]);\n        \n    //     // Clean up the temporary storage\n    //     delete actor._initiativeSituationalBonus;\n    //   }\n    // }\n  \n  }\n  \n  /**\n   * Handle pre-roll attack hook to restore GM-configured options\n   */\n  static _onPreRollAttackV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollAttackV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    const stored = config.subject?.item?.getFlag(MODULE_ID, 'tempAttackConfig');\n    if (stored) {\n      LogUtil.log(\"_onPreRollAttackV2 - Found stored request config from flag\", [stored]);\n      \n      if(stored.isRollRequest === false || stored.skipRollDialog === true || stored.sendRequest === false) {\n        LogUtil.log(\"_onPreRollAttackV2 - Not a roll request, skipping\", [stored]);\n        return;\n      }\n\n      // Merge attack options\n      if (stored.attackMode) config.attackMode = stored.attackMode;\n      if (stored.ammunition) config.ammunition = stored.ammunition;\n      if (stored.mastery !== undefined) config.mastery = stored.mastery;\n      config.advantage = stored.advantage || false;\n      config.disadvantage = stored.disadvantage || false;\n      messageOptions.rollMode = stored.rollMode || messageOptions.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n      \n      // Set situational bonus\n      if (stored.situational) {\n        if (!config.rolls || config.rolls.length === 0) {\n          config.rolls = [{\n            parts: [],\n            data: {},\n            options: {}\n          }];\n        }\n        \n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        config.rolls[0].data.situational = stored.situational;\n      }\n      LogUtil.log(\"_onPreRollAttackV2 - Applied stored configuration to attack roll\", [config, messageOptions]);\n    }\n  }\n\n  /**\n   * Handle pre-roll damage hook to restore GM-configured options\n   */\n  static _onPreRollDamageV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollDamageV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    const stored = config.subject?.item?.getFlag(MODULE_ID, 'tempDamageConfig');\n    if (stored) {\n      LogUtil.log(\"_onPreRollDamageV2 - Found stored request config from flag\", [stored, stored.situational]);\n      \n      if(stored.isRollRequest === false || stored.skipRollDialog === true || stored.sendRequest === false) {\n        LogUtil.log(\"_onPreRollDamageV2 - Not a roll request, skipping\", [stored]);\n        return;\n      }\n\n      // Merge damage options\n      if (stored.critical) config.critical = stored.critical;\n      messageOptions.rollMode = stored.rollMode || messageOptions.rollMode || CONST.DICE_ROLL_MODES.PUBLIC;\n      \n      // Set situational bonus\n      if (stored.situational) {\n        if (!config.rolls || config.rolls.length === 0) {\n          config.rolls = [{\n            parts: [],\n            data: {},\n            options: {}\n          }];\n        }\n        \n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        config.rolls[0].data.situational = stored.situational;\n      }\n      LogUtil.log(\"_onPreRollDamageV2 - Applied stored configuration to damage roll\", [config, messageOptions]);\n    }\n  }\n  \n  /**\n   * Handle pre-use activity hook to prevent usage messages when GM intercepts rolls\n   */\n  static _onPreUseActivity(activity, config, dialog, message) {\n    LogUtil.log(\"_onPreUseActivity triggered\", [activity, config, dialog, message]);\n    const SETTINGS = getSettings();\n    const requestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n\n    LogUtil.log(\"_onPreUseActivity - Settings\", [requestsEnabled, rollInterceptionEnabled]);\n    activity.item.unsetFlag(MODULE_ID, 'tempAttackConfig'); \n    activity.item.unsetFlag(MODULE_ID, 'tempDamageConfig'); \n    activity.item.unsetFlag(MODULE_ID, 'tempSaveConfig'); \n\n    if(GeneralUtil.isModuleOn(MODULE_ID, 'midi-qol')){\n      // message.create = false;\n    }\n    if (!game.user.isGM || !requestsEnabled || !rollInterceptionEnabled) return; \n    \n    // Check if the actor has player ownership\n    const actor = activity.actor;\n    if (!actor) return;\n\n    const consumptionConfigMode = SettingsUtil.get(SETTINGS.consumptionConfigMode.tag);\n\n    switch (consumptionConfigMode) {\n      case 1:\n        dialog.configure = false;\n        break;\n      case 2:\n        dialog.configure = game.user.isGM;\n        break;\n      case 3:\n        dialog.configure = !game.user.isGM;\n        break;\n      default:\n        dialog.configure = true;\n        break;\n    }\n    \n    // const hasPlayerOwner = Object.entries(actor.ownership).some(([userId, level]) => {\n    //   const user = game.users.get(userId);\n    //   return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n    // });\n\n    if(activity.type === ACTIVITY_TYPES.SAVE){\n      config.create = { measuredTemplate: false };\n      config.hasConsumption = false;\n      config.consume = {\n        action: false,\n        resources: [],\n        spellSlot: false\n      };\n    }\n\n    const actorOwner = GeneralUtil.getActorOwner(actor);\n    \n    if (actorOwner && actorOwner.active && !actorOwner.isGM) {\n      LogUtil.log(\"Preventing usage message for player-owned actor\", [actor.name]);\n      message.create = false;\n    }\n  }\n\n  static _onPostUseActivity(activity, config, dialog, message) {\n    if(game.user.isGM && activity.type === ACTIVITY_TYPES.SAVE){\n      LogUtil.log(\"_onPostUseActivity triggered\", [activity.damage]);\n      const SETTINGS = getSettings();\n      const skipRollDialog = SettingsUtil.get(SETTINGS.skipRollDialog.tag);\n      if(activity.damage && activity.damage.parts?.length > 0){\n        activity.rollDamage(config, {\n          ...dialog,\n          configure: !skipRollDialog\n        }, message)\n      }\n      \n    }\n  }\n  \n  /**\n   * Handle rendering of skill/tool configuration dialog to fix message flavor\n   */\n  static _onRenderSkillToolDialog(app, html, data) {\n    LogUtil.log(\"_onRenderSkillToolDialog triggered\", [app]);\n    if (app._abilityFlavorFixed) return;\n    \n    const abilitySelect = html.querySelector('select[name=\"ability\"]');\n    if (!abilitySelect) return;\n    \n    if (app.config?.isRollRequest && app.config?.ability) {\n      const selectedAbility = abilitySelect.value;\n      const configAbility = app.config.ability;\n\n      if (selectedAbility === configAbility) {\n        app._abilityFlavorFixed = true;\n        \n        // Force flavor to update\n        setTimeout(() => {\n          const changeEvent = new Event('change', {\n            bubbles: true,\n            cancelable: true\n          });\n          abilitySelect.dispatchEvent(changeEvent);\n        }, 50);\n      }\n    }\n  }\n  \n}","import { MODULE_ID, ROLL_TYPES } from \"../constants/General.mjs\";\nimport { getRollTypeDisplay, applyTargetTokens, NotificationManager } from \"./helpers/Helpers.mjs\";\nimport { RollHandlers } from \"./RollHandlers.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { GeneralUtil } from \"./helpers/GeneralUtil.mjs\";\n\n/**\n * @typedef {Object} RollRequestData\n * @property {string} type - \"rollRequest\"\n * @property {string} requestId - Unique identifier for this request\n * @property {string} actorId - ID of the actor to roll for\n * @property {string} rollType - Type of roll (ability, save, skill, etc.) from ROLL_TYPES\n * @property {string} rollKey - Specific roll key (e.g., \"str\", \"acr\", \"perception\")\n * @property {string|null} activityId - Activity ID for item-based rolls\n * @property {BasicRollProcessConfiguration} rollProcessConfig - D&D5e roll process configuration\n * @property {boolean} skipRollDialog - Whether to skip the roll configuration dialog\n * @property {string[]} targetTokenIds - Array of targeted token IDs\n * @property {boolean} preserveTargets - Whether to apply GM's targets to the player\n */\n\n/**\n * Utility class for handling roll requests from GM to players\n */\nexport class RollRequestUtil {\n  /**\n   * Handle roll request from GM on player side\n   * @param {RollRequestData} requestData - The roll request data\n   */\n  static async handleRequest(requestData) {\n    // const SETTINGS = getSettings();\n    // const postRequestToChat = SettingsUtil.get(SETTINGS.postRequestToChat.tag);\n    \n    const isMidiRequest = GeneralUtil.isModuleOn(MODULE_ID, 'midi-qol');\n    LogUtil.log('handleRequest', [requestData]);\n    if (game.user.isGM) return;\n    \n    const actor = game.actors.get(requestData.actorId);\n    if (!actor || !actor.isOwner) {\n      return;\n    }\n\n    if(isMidiRequest && requestData.rollProcessConfig.midiOptions){\n      requestData.rollProcessConfig.midiOptions = {\n        ...requestData.rollProcessConfig.midiOptions,\n        fastForward: false,\n        fastForwardAttack: false,\n        dialogOptions: {\n          ...requestData.rollProcessConfig.midiOptions.dialogOptions,\n          fastForward: false,\n          fastForwardAttack: false,\n          // fastForwardDamage: false\n        },\n        workflowOptions: {\n          ...requestData.rollProcessConfig.midiOptions.workflowOptions,\n          // autoRollAttack: false,\n          // autoRollDamage: \"none\",\n          fastForward: false,\n          fastForwardAttack: false,\n          // fastForwardDamage: false\n        }\n      };\n    }\n    \n    \n    if (requestData.preserveTargets && \n      requestData.targetTokenIds?.length > 0 && \n      game.user.targets.size === 0) {\n      applyTargetTokens(requestData.targetTokenIds);\n    }\n    \n    NotificationManager.notify('info', '', {\n      batch: true,\n      batchData: {\n        actor: actor.name,\n        rollType: requestData.rollType,\n        rollKey: requestData.rollKey,\n        gm: requestData.rollProcessConfig._requestedBy || 'GM'\n      }\n    });\n    \n    RollRequestUtil.executePlayerRollRequest(actor, requestData);\n  }\n  \n  /**\n   * Execute a roll request received by a player\n   * @param {Actor} actor - The actor performing the roll\n   * @param {RollRequestData} requestData - The roll request data from GM\n   */\n  static async executePlayerRollRequest(actor, requestData) {\n    const SETTINGS = getSettings();\n    const publicPlayerRolls = SettingsUtil.get(SETTINGS.publicPlayerRolls.tag);\n\n    LogUtil.log('executePlayerRollRequest', [actor, requestData]);\n    \n    try {\n      const normalizedRollType = requestData.rollType?.toLowerCase();\n      const rollConfig = requestData.rollProcessConfig.rolls?.[0] || {\n        parts: [],\n        data: {},\n        options: {}\n      };\n      \n      const shouldSkipDialog = game.user.isGM ? requestData.skipRollDialog : false;\n      const dialogConfig = {\n        configure: !shouldSkipDialog\n      };\n      \n      // Determine the roll mode - respect what was sent from GM\n      const rollModeFromGM = requestData.rollProcessConfig.rollMode;\n      const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n      const finalRollMode = rollModeFromGM || defaultRollMode;\n      \n      const messageConfig = {\n        rollMode: finalRollMode,\n        create: requestData.rollProcessConfig.chatMessage !== false\n      };\n      \n      // Build requestData structure expected by handlers\n      const handlerRequestData = {\n        rollKey: requestData.rollKey,\n        activityId: requestData.activityId, // For attack/damage rolls\n        config: requestData.rollProcessConfig,\n        groupRollId: requestData.groupRollId // Pass through for group rolls\n      };\n\n      // Use the roll handler for the requested roll type\n      const handler = RollHandlers[normalizedRollType];\n      if (handler) {\n        await handler(actor, handlerRequestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        LogUtil.warn(`No handler found for roll type: ${normalizedRollType}`);\n        NotificationManager.notify('warn', game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollError', { \n          actor: actor.name || 'Unknown Actor'\n        }));\n      }\n    } catch (error) {\n      LogUtil.error('Error executing roll request:', [error]);\n      NotificationManager.notify('error', game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollError', { \n        actor: actor.name || 'Unknown Actor'\n      }));\n    }\n  }\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SOCKET_CALLS } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { HooksUtil } from \"./HooksUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { RollRequestUtil } from \"./RollRequestUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { HOOKS_CORE } from \"../constants/Hooks.mjs\";\n\n/**\n * @typedef {import(\"./RollRequestUtil.mjs\").RollRequestData} RollRequestData\n */\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    SocketUtil.initialize(Main.registerSocketCalls);\n    HooksUtil.initialize();\n  }\n\n  // Wrapper methods for socket calls to DiceConfigUtil\n  static getDiceConfig() {\n    return DiceConfigUtil.getDiceConfig();\n  }\n  \n  static receiveDiceConfig(userId, diceConfig) {\n    DiceConfigUtil.receiveDiceConfig(userId, diceConfig);\n  }\n\n  /**\n   * Handle roll request from GM on player side\n   * @param {RollRequestData} requestData - The roll request data\n   */\n  static async handleRollRequest(requestData) {\n    LogUtil.log('Main.handleRollRequest', requestData);\n    return RollRequestUtil.handleRequest(requestData);\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.handleRollRequest, Main.handleRollRequest);\n  }\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\nimport \"./styles/chat-messages.css\";\nimport \"./styles/flash-rolls-menu.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\n// Initialize the module\nMain.init();\n"],"names":["SETTING_INPUT","SETTING_SCOPE","getSettings","MODULE_ID","DEBUG_TAG","SOCKET_CALLS","ACTIVITY_TYPES","ROLL_TYPES","ROLL_REQUEST_OPTIONS","MODULE","HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","_LogUtil","ref","data","bypassSettings","debugSetting","dataArray","strRef","options","_a","__publicField","LogUtil","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","name","func","value","callback","handler","parameters","userId","executionKey","resp","error","SocketUtil","DiceConfigUtil","clientSettings","diceConfig","_b","user","SettingsUtil","SETTINGS","entry","setting","settingObj","settingName","moduleName","selectedSetting","newValue","e","requestsIcon","_GeneralUtil_static","parseCSS_fn","_GeneralUtil","module","parent","selector","element","varName","varValue","bodyStyle","body","cssText","ruleStart","ruleEnd","declarations","decl","varsMap","parts","newRuleContent","newCss","sheet","cssImportedFonts","rules","i","rule","fontFamily","fetchError","fontFaceRegex","match","fontFamilyRegex","fontFamilyMatch","fontName","offsetTop","elementHeight","foundryFonts","customFontsObj","customFonts","f","a","b","content","id","checkForDuplicates","customStyle","importRegex","imports","contentWithoutImports","currentContent","existingImports","currentMatch","currentContentWithoutImports","newImports","imp","allImports","to","direction","duration","onComplete","animationId","isHorizontal","start","change","startTime","animateScroll","currentTime","elapsedTime","progress","easeProgress","newAnimationId","title","dialogConfig","templatePath","templatePaths","cssString","trimmedCSS","style","testCSS","isValid","cssRules","targetSelectors","parsedCSS","__privateMethod","mainStyle","processedRules","rulesByContent","pseudoSelector","combinedSelectors","s","selectors","targetList","nestedSelector","targetSelector","actor","ownership","level","css","baseProperties","nestedRules","lines","currentNested","braceCount","line","openBraces","closeBraces","contentAfterBrace","__privateAdd","href","isFoundryCore","isCrlngnUI","isSystem","cleanName","GeneralUtil","GMRollConfigMixin","Base","config","message","formData","index","abilityFromForm","dcFromForm","situational","idx","dcValue","formConfig","event","sendRequestCheckbox","dcInput","action","finalizedRolls","context","_c","RollHelpers","requestData","rollConfig","additionalConfig","actors","actorId","rollType","normalizedType","rollKey","rollMode","DialogClass","messageConfig","dialogOptions","app","resolve","_d","_e","_f","firstRoll","advantage","disadvantage","target","rollProcessConfig","isPublicRollsOn","messageRollMode","GMRollConfigDialog","dialog","partId","configSection","templateData","template","wrapper","button","_g","_h","_i","normalizedRollType","showDC","rollClass","defaultAbility","finalTitle","selectedAbilityLabel","skillLabel","toolData","toolLabel","toolItem","_j","_k","_l","_m","_n","_o","_p","_q","_r","skill","abilityLabel","saveAbility","checkAbility","tool","toolDefaultAbility","toolAbilityLabel","GMHitDieConfigDialog","form","GMSkillToolConfigDialog","skillConfig","GMDamageConfigDialog","buttonGroup","originalConfig","originalDialog","position","finalRollMode","GMAttackConfigDialog","_ModuleHelpers","moduleId","previousSettings","ModuleHelpers","ActivityUtil","item","activities","attackActivities","damageAttackActivities","damageActivities","saveActivities","itemSaveActivities","activityType","itemId","activityId","isMidiActive","activity","damageConfig","rollRequestConfig","MidiQOL","workflow","damageRoll","formulas","part","defaultConfig","defaultOptions","ApplicationV2","HandlebarsApplicationMixin","CustomRollDialog","htmlElement","formulaInput","validationMessage","messageElement","die","currentFormula","diceRegex","diceMap","remainingFormula","count","dieType","newDieType","diceParts","formula","getRollTypeDisplay","display","showBatchedNotifications","pendingNotifications","getRollTypeDisplayFn","notificationsByType","notif","key","entries","messages","rollTypeDisplay","actorNames","getPlayerOwner","applyTargetTokens","tokenIds","t","isPlayerOwned","hasTokenInScene","currentScene","token","updateCanvasTokenSelection","selected","tokens","delay","ms","isSidebarExpanded","updateSidebarClass","isExpanded","adjustMenuOffset","buildRollTypes","selectedRequestType","selectedActors","rollTypes","selectedOption","firstActorId","allTools","label","str","rollData","configData","_NotificationManager","type","requestsByPlayer","rollTypeName","successfulRequests","playerData","playerSummaries","playerId","NotificationManager","filterActorsForDeathSaves","actorsNeedingDeathSaves","actorsSkippingDeathSaves","hp","deathSaves","successes","failures","categorizeActorsByOwnership","pcActors","npcActors","owner","rollPrivacyVertical","controlsWidth","ChatMessageUtils","groupRollId","flavor","results","saveLabel","messageData","pendingData","m","flagData","resultIndex","newContent","html","groupRollsMsgEnabled","groupMessage","msgId","requestId","fiveMinutesAgo","RollHandlers","toolConfig","tokenActor","initiativeConfig","tempConfig","rollOptions","processConfig","activityConfig","confirmedFormula","updateResult","itemUpdateResult","ensureCombatForInitiative","filterActorsForInitiative","actorIds","game","actorsNamesWithInitiative","actorIdsWithInitiative","c","combatants","filteredIds","RollInterceptor","hookName","hookId","isMidiRequest","hookNames","isInitiativeRoll","moduleFlags","d","rollRequestsEnabled","skipRollDialog","configWithoutEvent","finalConfig","dialogResult","handlerMap","cleanConfig","_instance","_RollRequestsMenu","menu","actorData","currentActors","selectAllOn","requestTypes","option","system","stats","spellDC","frame","chatNotifications","optionsToggle","optionsElement","controlled","tab","selectBtn","requestTypesContainer","listItem","customEvent","rollTypesContainer","enabled","SidebarUtil","skip","selectAll","lockIcon","controlledTokens","isPC","selectAllCheckbox","checkboxes","checkedCount","cb","requestItem","requestType","rollOption","selectedActorIds","isNPC","rollMethodName","offlinePlayerActors","onlinePlayerActors","allActors","useGroupId","gmRolledActors","validActorIds","filteredActorIds","suppressNotification","hdData","hitDieResult","rollTypeKey","normalizedRollTypeKey","actualRollKey","denominations","denom","__privateGet","__privateSet","RollRequestsMenu","chatControls","rollRequestIcon","firstChatControlIcon","icon","HooksUtil","chatMessage","requestedBy","requestedText","currentFlavor","speaker","baseActorId","checkIds","storedGroupRollId","baseActor","storedInitConfig","situationalInput","input","messageOptions","allSituationalBonuses","uniqueBonuses","bonus","trimmedBonus","p","storedConfig","stored","requestsEnabled","rollInterceptionEnabled","actorOwner","abilitySelect","selectedAbility","configAbility","changeEvent","RollRequestUtil","rollModeFromGM","defaultRollMode","handlerRequestData","Main"],"mappings":"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"}