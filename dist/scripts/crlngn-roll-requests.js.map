{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Hooks.mjs","../../src/constants/General.mjs","../../src/components/LogUtil.mjs","../../src/constants/Settings.mjs","../../src/components/GeneralUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/ActivityUtil.mjs","../../src/components/RollUtil.mjs","../../src/components/SettingsUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheck\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrow\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheck\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrow\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cRoll That For Me`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", activityType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", activityType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", activityType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", activityType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", activityType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", activityType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", activityType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", activityType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", activityType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", activityType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", activityType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", activityType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", activityType: \"formula\" }, // Recharge rolls\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debugMode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      console.log(...DEBUG_TAG, ref, ...data);\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n}","export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","import { HOOK_NAMES } from \"../constants/General.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\n\nexport class GeneralUtil {\n  /**\n   * Identifies the current selected or targeted tokens\n   * @param {User5e} user\n   * @returns {Set} A set of targeted tokens\n   */\n  static getTargets(user) {\n    let gm = game.users.find(us=>us.isGM===true);\n    let targetTokens = user.targets || gm.targets; // || canvas.tokens?.controlled;\n\n    return new Set([...targetTokens]);\n  }\n\n  static getClientTargets = () => {\n    if (!game.user) return [];\n\n    // Convert the Set of targets to an array\n    const selectedTargets = Array.from(game.user.targets);//.filter(target => target.actor);\n\n    LogUtil.log(\"Selected Targets\", [ \n      game.user.id, \n      selectedTargets, \n      selectedTargets.filter(target => target.actor) \n    ]);\n    return selectedTargets;\n  };\n\n\n\n  /**\n  * Grab the targeted tokens and return relevant information for hit calculation\n  * @returns {TargetDescriptor[]}\n  */\n  static getTargetDescriptors = () => {\n    const targets = new Map();\n    for ( const token of game.user.targets ) {\n      const { name } = token;\n      const { img, system, uuid, statuses } = token.actor ?? {};\n      if ( uuid ) {\n        const ac = statuses.has(\"coverTotal\") ? null : system.attributes?.ac?.value;\n        targets.set(uuid, { name, img, uuid, ac: ac ?? null });\n      }\n    }\n    return Array.from(targets.values());\n  }\n\n  /**\n   * \n   * @param {String} itemUuid \n   * @returns {Actor5e}\n   */\n  static getActorFromItem(itemUuid){\n    const actorId = itemUuid.split(\".\")[1];\n    const actor = game.actors.get(actorId);\n\n    return actor;\n  }\n\n  static findItemFromActor = (actorId, itemId, actionName) => {\n    const actor = game.actors.get(actorId);\n    LogUtil.log(\"findItemFromActor\", [itemId, actionName]);\n    if(!actor) return null;\n\n    let item = itemId ? actor.items.find((it) => {\n      return it.id === itemId; \n    }) : null; \n\n    if(!item){ \n      // match exact name\n      item = actionName ? actor.items.find((it) => it.name.toLowerCase() === actionName.toLowerCase()) : null;\n      // if no exact name, look for the name with \"(Legacy)\" tag\n      if(!item){ item = actor.items.find((it) => it.name.toLowerCase() === (actionName + \" (Legacy)\").toLowerCase()) };\n    } \n\n    return item;\n  }\n\n  /**\n   * Checks if module is currently installed and active\n   * @param {string} moduleName \n   * @returns \n   */\n  static isModuleOn(moduleName){\n    const module = game.modules?.get(moduleName);\n    return module?.active ? true : false;\n  }\n\n  /**\n   * checks roll mode to determine if its mode is blind / private\n   * @param {String} mode \n   */\n  static isPrivateRoll(mode){\n    return mode === CONST.DICE_ROLL_MODES.BLIND || mode === CONST.DICE_ROLL_MODES.PRIVATE;\n  }\n\n  /**\n   * Removes the MeasuredTemplate \n   * @param {Item5e} item \n   */\n  static removeTemplateForItem (item) {\n    LogUtil.log(\"removeTemplateForItem - A\", [item]);\n    const removeTemplateSettingOn = SettingsUtil.get(\"remove-template\");\n    LogUtil.log(\"removeTemplateForItem - B\", [removeTemplateSettingOn]);\n    if(!removeTemplateSettingOn){ return; }\n    const templates = canvas.templates.objects.children.filter(mt => {\n      return mt.document.flags.dnd5e.item === item?.uuid;\n    });\n\n    canvas.scene.deleteEmbeddedDocuments('MeasuredTemplate', templates.map(i=>i.id));\n  }\n\n  static getUserFromActor(actorId){\n    let owner;\n    if(!actorId){ return null; }\n    const actor = actorId ? game.actors.get(actorId) : null;\n    \n    let assignedPlayer = game.users.players.find(pl=>{\n      return pl.active === true && pl.character.id === actorId;\n    });\n    owner = assignedPlayer; \n\n    if(!owner){ \n      // owner = game.users.find(u => u.isGM===true); \n      game.users.players.forEach(pl => {\n        if(pl.active && actor.testUserPermission(pl, foundry.CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER, { exact:true })){\n          owner = pl;\n        }\n      });\n    }\n\n    // let gm = game.users.find(u => u.isGM===true);\n    LogUtil.log(\"getUserFromActor\", [actorId, owner]);\n\n    return owner;\n  }\n\n\n  static html(parent, selector) {\n    return parent.querySelector(selector);\n  }\n\n  /**\n   * Adds css rules to a <style> element at the body\n   * @param {string} varName \n   * @param {string} varValue \n   */\n  static addCSSVars = (varName, varValue) => {\n    let bodyStyle = document.querySelector('#crlngn-chat-vars');\n    \n    if (!bodyStyle) {\n      // Create style element if it doesn't exist\n      const body = document.querySelector('body');\n      bodyStyle = document.createElement('style');\n      bodyStyle.id = 'crlngn-chat-vars';\n      bodyStyle.textContent = 'body.crlngn-chat {\\n}\\n';\n      body.prepend(bodyStyle);\n    }\n    \n    // Parse the current CSS content\n    let cssText = bodyStyle.textContent;\n    \n    // Find or create the rule block\n    let ruleStart = cssText.indexOf('body.crlngn-chat {');\n    let ruleEnd = cssText.indexOf('}', ruleStart);\n    \n    if (ruleStart === -1) {\n      // If rule doesn't exist, create it\n      cssText = 'body.crlngn-chat {\\n}\\n';\n      ruleStart = 0;\n      ruleEnd = cssText.indexOf('}');\n    }\n    \n    // Get all the current declarations\n    const rulePart = cssText.substring(ruleStart + 'body.crlngn-chat {'.length, ruleEnd);\n    \n    // Split by semicolons to get individual declarations\n    const declarations = rulePart.split(';')\n      .map(decl => decl.trim())\n      .filter(decl => decl !== '');\n    \n    // Create a map of existing variables\n    const varsMap = {};\n    declarations.forEach(decl => {\n      const parts = decl.split(':');\n      if (parts.length >= 2) {\n        const name = parts[0].trim();\n        const value = parts.slice(1).join(':').trim(); // Handle values that might contain colons\n        if (name) varsMap[name] = value;\n      }\n    });\n    \n    // Format the value if it appears to need quotes\n    // For string values used in content properties (i18n text)\n    if (varName.includes('i18n') && \n        typeof varValue === 'string' && \n        !varValue.startsWith('\"') && \n        !varValue.startsWith(\"'\") && \n        !varValue.match(/^url\\(|^rgba?\\(|^hsla?\\(/)) {\n      varValue = `\"${varValue}\"`;\n    }\n    \n    // Update or add the new variable\n    varsMap[varName] = varValue;\n    \n    // Rebuild the rule content\n    const newRuleContent = Object.entries(varsMap)\n      .map(([name, value]) => `  ${name}: ${value};`)\n      .join('\\n');\n    \n    // Rebuild the entire CSS\n    const newCss = \n      cssText.substring(0, ruleStart) + \n      'body.crlngn-chat {\\n' + \n      newRuleContent + \n      '\\n}' + \n      cssText.substring(ruleEnd + 1);\n    \n    // Update the style element\n    bodyStyle.textContent = newCss;\n  };\n\n  static getActivityType(hookName) {\n    return Object.values(HOOK_NAMES).find(hookItem => hookItem.name.toLowerCase() === hookName.toLowerCase())?.activityType || \"\";\n  }\n\n  static getElement(target) {\n    // Check if it's a jQuery object\n    if (target && typeof target.jquery !== 'undefined') {\n      // It's a jQuery object, get the first DOM element\n      return target[0];\n    }\n    // It's already a DOM element\n    return target;\n  }\n}\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      LogUtil.log(`Attempting to register module...`);\n\n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n        LogUtil.log(`SocketUtil | Module registered`, [SocketUtil.socket]);\n      } catch (e) {\n          LogUtil.log(`Problem registering module`, [e]);\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n      LogUtil.log(`SocketUtil - Registered callback`, [SocketUtil.socket, name]);\n    } else {\n      LogUtil.log(`SocketUtil - Failed to register callback (socket not initialized)`, [SocketUtil.socket, name]);\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log(`SocketUtil - sendMessage`, [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as GM.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute for all clients.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    if (!SocketUtil.socket) {\n        LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as user.\");\n        return;\n    }\n    \n    // We need to use the original handler, but we'll handle deserialization on reception\n    const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n    LogUtil.log(\"SocketUtil - Executed as user.\", [resp]);\n    return resp;\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) {\n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let test = r.toJSON();\n          return test;\n        }else{\n          return r;\n        }\n      });\n    }\n    LogUtil.log(\"ROLLS DATA\", [data]);\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    let result = {};\n    // Handle null or undefined\n    if (data == null) return data;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      // rolls = data.rolls.map(r => Roll.fromJSON(JSON.stringify(r)));\n      \n      result = {\n        ...data,\n        rolls: data.rolls.map(r => {\n          if(typeof r === 'string'){\n            return Roll.fromJSON(r);\n          }else{\n            return Roll.fromJSON(JSON.stringify(r));\n          }\n        })\n      }\n    }\n    LogUtil.log(\"ROLLS RESULT\", [result]);\n    \n    return result;\n  }\n\n}\n","import { HOOKS_CORE } from \"../constants/Hooks.mjs\";\nimport { ACTIVITY_TYPES, HOOK_NAMES, MODULE_ID } from \"../constants/General.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\n\n/**\n * Utility class for handling activity-related functionality\n */\nexport class ActivityUtil {\n\n  /**\n   * Initialize the util\n   * @static\n   */\n  static init(){\n    Hooks.on(HOOKS_CORE.RENDER_CHAT_MESSAGE, ActivityUtil.#onRenderChatMessage);\n  }\n\n  /**\n   * Trigger an attack roll for a player\n   * @param {Object} data - configuration data\n   */\n  static triggerActivity = async (data) => { \n    const { activityUuid, diceTypes, config, dialog, message } = data;\n    LogUtil.log(\"triggerActivity #1\", [diceTypes, config, dialog, message, data]);\n    const diceConfig = RollUtil.playerDiceConfigs[game.user.id]; // Get the player's core dice configuration\n    const situationalBonus = config.situational ? Number(config.situational) : 0;\n    const activityData = activityUuid.split(\".\"); // example: \"Actor.Br4xlsplGmnHwdiG.Item.kDxIYfzQIFmukmH0.Activity.attackWarhammerI\"\n    const actor = game.actors.get(activityData[1]); // pick actor from the uuid\n    const item = actor?.items.get(activityData[3]); // pick item from the uuid\n    const activity = item?.system?.activities?.get(activityData[5]) || item?.activities?.get(activityData[5]); // pick activity from the uuid\n    const hookName = config.hookNames?.[0] || activity.type;\n\n    LogUtil.log(\"triggerActivity #2\", [hookName, activity, data]);\n\n    if(!actor || !item || !activity) return;\n    \n    const updatedConfig = {\n      ...config,\n      parts: config.parts || []\n    };\n    const updatedDialog = {\n      ...dialog\n    };\n    const updatedMessage = {\n      ...message,\n      flavor: config.flavor\n    };\n    \n    // Add situational bonus to the parts array if not already included\n    if (situationalBonus && !updatedConfig.parts.includes('@situational')) {\n      updatedConfig.parts.push('@situational');\n    }\n    \n    // Call the activity's rollAttack method\n    switch(hookName){\n      case HOOK_NAMES.ATTACK.name:{\n        ActivityUtil.useAttack({activity, config: updatedConfig, message: updatedMessage, dialog: updatedDialog});\n        LogUtil.log(\"triggerActivity attack\", [updatedConfig, updatedDialog, updatedMessage]);\n        // activity.use(updatedConfig, updatedDialog, updatedMessage);\n        // activity.rollAttack(updatedConfig, updatedDialog, updatedMessage);\n        break;\n      }\n      case HOOK_NAMES.DAMAGE.name:{\n        LogUtil.log(\"triggerActivity damage\", [updatedConfig, updatedDialog, updatedMessage]);\n        ActivityUtil.useDamage({activity, config: updatedConfig, message: updatedMessage, dialog: updatedDialog});\n        break;\n      }\n      case HOOK_NAMES.SAVE.name:{\n        LogUtil.log(\"triggerActivity save\", [updatedConfig]);\n        updatedMessage.create = true;\n        activity.use(updatedConfig, updatedDialog, updatedMessage);\n        // ActivityUtil.useDamage({activity, config: updatedConfig, message: updatedMessage, dialog: updatedDialog});\n        break;\n      }\n      default:{\n        break;\n      }\n    }\n    \n    // activity.use(updatedConfig, updatedDialog, updatedMessage);\n    LogUtil.log(\"triggerActivity #3\", [activityUuid, config, data]);\n  }\n\n  /**\n   * Creates a chat card for an attack usage with buttons that\n   * allow config dialog to pick up configuration options selected by the game master\n   * @param {Object} data \n   */\n  static useAttack = async (data) => {\n    const { activity, config, message, dialog } = data;\n    const context = await activity._usageChatContext(message);\n    const originalActions = activity.metadata.usage.actions;\n    const attackButton = context.buttons.find(btnData => btnData.dataset.action === \"rollAttack\");\n    // const damageButton = context.buttons.find(btnData => btnData.dataset.action === \"rollDamage\");\n    \n    // Add configuration data to buttons for later pickup\n    const attackConfigData = {\n      situational: config.situational,\n      attackMode: config.attackMode,\n      advantage: config.advantage,\n      disadvantage: config.disadvantage,\n      ammunition: config.ammunition\n    }\n    attackButton.dataset = {\n      ...attackButton?.dataset,\n      ...attackConfigData,\n      action: \"rollAttack\",\n      activityUuid: activity.uuid,\n    }\n    // damageButton.dataset = {\n    //   ...damageButton?.dataset,\n    //   action: \"rollDamage\",\n    //   activityUuid: activity.uuid,\n    //   situational: config.situational,\n    //   critical: config.critical,\n    //   isCritical: config.isCritical\n    // }\n\n    activity.metadata.usage.actions = {\n      ...activity.metadata.usage.actions,\n      'rollAttack': ActivityUtil.rollModifiedAttack,\n      // 'rollDamage': ActivityUtil.rollModifiedDamage\n    }\n\n    const messageConfig = foundry.utils.mergeObject({\n      rollMode: message.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      data: {\n        content: await renderTemplate(activity.metadata.usage.chatCard, context),\n        speaker: ChatMessage.getSpeaker({ actor: activity.actor }),\n        flags: {\n          core: { canPopout: true },\n          [MODULE_ID]: {\n            modifiedActions: true,\n            activityType: activity.type,\n            activityUuid: activity.uuid\n          }\n        }\n      }\n    }, message);\n\n    const diceTypes = ['d20'];\n    const areDiceConfigured = RollUtil.areDiceConfigured(diceTypes, game.user.id);\n    dialog.configure = !areDiceConfigured;\n\n    LogUtil.log(\"useAttack\", [activity, context, messageConfig, data]);\n    const card = await ChatMessage.create(messageConfig.data);\n    // activity.use({}, dialog, {create: true});\n    activity.rollAttack(attackConfigData, dialog, {create: true});\n    // activity.metadata.usage.actions = originalActions; // Restore original actions \n  }\n\n   /**\n   * Creates a chat card for an attack usage with buttons that\n   * allow config dialog to pick up configuration options selected by the game master\n   * @param {Object} data \n   */\n   static useDamage = async (data) => {\n    const { activity, config, message, dialog } = data;\n    // Add configuration data to buttons for later pickup\n    const damageConfigData = {\n      situational: config.situational,\n      critical: config.critical,\n      isCritical: config.isCritical\n    }\n    const damageParts = activity?.damage?.parts || activity?.rolls?.[0]?.parts || [];\n    const diceTypes = damageParts.map(part => 'd' + part.denomination);\n    const areDiceConfigured = RollUtil.areDiceConfigured(diceTypes, game.user.id);\n    dialog.configure = !areDiceConfigured;\n\n    LogUtil.log(\"useDamage\", [activity, damageParts, diceTypes, areDiceConfigured, data]);\n    activity.rollDamage(damageConfigData, dialog, {create: true});\n    // activity.use(damageConfigData, dialog, {create: true});\n  }\n\n  \n\n  static rollModifiedAttack(event, target, message){\n    LogUtil.log(\"rollModifiedAttack\", [event, target, message, this]);\n    const { activity } = ActivityUtil.getDataFromUuid(target.dataset.activityUuid);\n    \n    // Call the original rollAttack method with our custom configuration\n    activity.rollAttack({ \n      event: event,\n      advantage: target.dataset.advantage === \"true\",\n      disadvantage: target.dataset.disadvantage === \"true\",\n      attackMode: target.dataset.attackMode,\n      ammunition: target.dataset.ammunition,\n      situational: target.dataset.situational\n    }, {}, message);\n  }\n\n  static rollModifiedDamage(event, target, message){\n    LogUtil.log(\"rollModifiedDamage\", [event, target, message]);\n    const { activity } = ActivityUtil.getDataFromUuid(target.dataset.activityUuid);\n    activity.rollDamage({\n      event: event,\n      situational: target.dataset.situational,\n      critical: target.dataset.critical === \"true\",\n      isCritical: target.dataset.isCritical === \"true\"\n    }, {}, message);\n  }\n\n  /**\n   * Handle rendering of chat messages\n   * This is called each time a chat message is rendered\n   * @param {ChatMessage} message - The ChatMessage being rendered\n   * @param {HTMLElement} html - The HTML element being rendered\n   * @param {Object} data - The data object used to render the message\n   * @private\n   */\n  static #onRenderChatMessage(message, html, data) {\n    // Check if this is one of our modified activity messages\n    const flags = message.flags?.[MODULE_ID] || data.message?.flags?.[MODULE_ID];\n    LogUtil.log(\"#onRenderChatMessage\", [message, html, data, flags]);\n    if (!flags?.modifiedActions) return;\n\n    // Get the activity from the UUID\n    const activityUuid = flags.activityUuid;\n    if (!activityUuid) return;\n    const { activity } = ActivityUtil.getDataFromUuid(activityUuid);\n\n    if (activity) {\n      LogUtil.log(\"#onRenderChatMessage Activating button listeners\", [activity, message, html]);\n      // Call the activateChatListeners method to attach the event listener\n      // This will make the system use our custom functions when buttons are clicked\n      activity.activateChatListeners(message, html[0]);\n    }\n  }\n\n  static getDataFromUuid(activityUuid){\n    const activityData = activityUuid.split(\".\");\n    const actor = game.actors.get(activityData[1]);\n    const item = actor?.items.get(activityData[3]);\n    const activity = item?.system?.activities?.get(activityData[5]) || item?.activities?.get(activityData[5]);\n    \n    return { actor, item, activity };\n  }\n}\n","import { HOOKS_DND5E, HOOKS_CORE } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { HOOK_NAMES, MODULE_ID, ACTIVITY_TYPES, BUTTON_ACTION_TYPES, CALL_TYPE } from \"../constants/General.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\n\n/**\n * Utility class for handling roll-related functionality\n * More information on DnD5e hooks here:\n * https://github.com/foundryvtt/dnd5e/wiki/Hooks\n */\nexport class RollUtil {\n  static requestsEnabled = false;\n  static SOCKET_CALLS = {\n    triggerRollRequest: { action:\"triggerRollRequest\", type: CALL_TYPE.CHECK },\n    triggerActivity: { action:\"triggerActivity\", type: CALL_TYPE.ACTIVITY }\n  };\n  static diceConfig = {};\n  static playerDiceConfigs = {};\n  \n  static init() {\n    LogUtil.log(\"RollUtil.init() - Registering hooks\", [], true);\n    RollUtil.preloadTemplates();\n    /**\n     * ROLLS\n     */\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_V2, RollUtil.#onPreRollV2);\n    // Skills & Tools\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_SKILL_V2, RollUtil.#onPreRollSkillToolV2);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_TOOL_V2, RollUtil.#onPreRollSkillToolV2);\n    // Attacks\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, RollUtil.#onPreRollAttackV2);\n    // Ability Checks & Saving Throws\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, RollUtil.#onPreRollAbilityCheck);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, RollUtil.#onPreRollSavingThrow);\n\n    //\n    Hooks.on(HOOKS_CORE.RENDER_ROLL_RESOLVER, RollUtil.#onRenderRollResolver);\n\n    // ACTIVITY\n    Hooks.on(HOOKS_DND5E.PRE_USE_ACTIVITY, RollUtil.#onPreUseActivity);\n    Hooks.on(HOOKS_DND5E.POST_USE_ACTIVITY, RollUtil.#onPostUseActivity);\n    \n    // // Concentration\n    // Hooks.on(HOOKS_DND5E.PRE_BEGIN_CONCENTRATING, RollUtil.#onPreBeginConcentrating);\n    // Hooks.on(HOOKS_DND5E.PRE_END_CONCENTRATION, RollUtil.#onPreEndConcentration);\n    // Hooks.on(HOOKS_DND5E.PRE_ROLL_CONCENTRATION_V2, RollUtil.#onPreRollConcentrationV2);\n    \n    // // Death Saves\n    // Hooks.on(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, RollUtil.#onPreRollDeathSaveV2);\n    \n    \n    \n    // // Hit Dice\n    // Hooks.on(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, RollUtil.#onPreRollHitDieV2);\n    \n    // // Hit Points\n    // Hooks.on(HOOKS_DND5E.PRE_ROLL_CLASS_HIT_POINTS, RollUtil.#onPreRollClassHitPoints);\n    // Hooks.on(HOOKS_DND5E.PRE_ROLL_NPC_HIT_POINTS, RollUtil.#onPreRollNPCHitPoints);\n    \n    // // Initiative\n    // Hooks.on(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG, RollUtil.#onPreRollInitiativeDialog);\n    // Hooks.on(HOOKS_DND5E.PRE_ROLL_INITIATIVE, RollUtil.#onPreRollInitiative);\n    \n    \n    // // Damage Rolls\n    // Hooks.on(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, RollUtil.#onPreRollDamageV2);\n    \n    // // Formula Rolls\n    // Hooks.on(HOOKS_DND5E.PRE_ROLL_FORMULA_V2, RollUtil.#onPreRollFormulaV2);\n    \n    // // Recharge Rolls\n    // Hooks.on(HOOKS_DND5E.PRE_ROLL_RECHARGE_V2, RollUtil.#onPreRollRechargeV2);\n\n    // Roll Config\n    Hooks.on(HOOKS_CORE.RENDER_ROLL_CONFIGURATION_DIALOG, RollUtil.#onRenderRollConfigurationDialog);\n    Hooks.on(HOOKS_DND5E.POST_ROLL_CONFIG, RollUtil.#onPostRollConfiguration);\n    \n\n    // Enable debug mode for hooks to see all hook calls in the console\n    CONFIG.debug.hooks = true;\n    LogUtil.log(\"Hook debugging enabled\", [], true);\n  }\n\n  /**\n   * Register socket calls with socketlib for remote execution\n   */\n  static registerSocketCalls(){\n    Object.values(RollUtil.SOCKET_CALLS).forEach(element => {\n      if(element.type === CALL_TYPE.ACTIVITY){\n        SocketUtil.registerCall(element.action, ActivityUtil[element.action]);\n      }else{\n        SocketUtil.registerCall(element.action, RollUtil[element.action]);\n      }\n    });\n  }\n\n  // static #onCreateChatMessage(a, b, c, d){\n  //   LogUtil.log(\"#onCreateChatMessage\", [a, b, c, d]);\n  // }\n\n  /**\n   * Hook handler for dnd5e.onPreUseActivity\n   * Fires before an activity is used\n   * @param {Activity} activity - Activity being used.\n   * @param {ActivityUseConfiguration} usageConfig - Configuration info for the activation.\n   * @param {ActivityDialogConfiguration} dialogConfig - Configuration info for the usage dialog.\n   * @param {ActivityMessageConfiguration} messageConfig - Configuration info for the created chat message.\n   */\n  static #onPreUseActivity(activity, usageConfig, dialogConfig, messageConfig){\n    LogUtil.log(\"#onPreUseActivity #1\", []);\n    const playerOwner = RollUtil.getPlayerOwner(activity.actor.id);\n    LogUtil.log(\"#onPreUseActivity #2\", [playerOwner, activity, usageConfig, dialogConfig, messageConfig]);\n\n    if(!RollUtil.requestsEnabled || !usageConfig.create){return true;} //activity.type !== ACTIVITY_TYPES.SAVE\n    \n    if(playerOwner.id !== game.user.id && game.user.isGM){\n      usageConfig.create.measuredTemplate = false;\n      usageConfig.consume.spellSlot = false;\n      messageConfig.create = false;\n      messageConfig.data = {\n        ...(messageConfig.data || {}),\n        flags: {\n          ...(messageConfig.data?.flags || {}),\n          [MODULE_ID]: {\n            modifiedActions: true,\n            activityType: activity.type,\n            activityUuid: activity.uuid\n          }\n        }\n      }\n    }else{\n      usageConfig.create.measuredTemplate = true;\n      usageConfig.consume.spellSlot = true;\n    }\n    \n  }\n\n  /**\n   * Hook handler for dnd5e.onPostUseActivity\n   * Fires after an activity is used\n   * @param {Activity} activity - Activity being used.\n   * @param {ActivityUseConfiguration} usageConfig - Configuration info for the activation.\n   * @param {ActivityDialogConfiguration} dialogConfig - Configuration info for the usage dialog.\n   * @param {ActivityMessageConfiguration} messageConfig - Configuration info for the created chat message.\n   */\n  static #onPostUseActivity(activity, usageConfig, dialogConfig, messageConfig){\n    LogUtil.log(\"#onPostUseActivity\", [activity.type, ACTIVITY_TYPES.SAVE, activity, usageConfig, dialogConfig, messageConfig]);\n    const playerOwner = RollUtil.getPlayerOwner(activity.actor.id);\n    if(!usageConfig.create || activity.type !== ACTIVITY_TYPES.SAVE){return;}\n    if(playerOwner.id !== game.user.id && game.user.isGM){\n      \n      usageConfig.create.measuredTemplate = true;\n      usageConfig.consume.spellSlot = true;\n      const newConfig = {\n        ...usageConfig,\n        // options: roll.options,\n        type: HOOK_NAMES.SAVING_THROW.name,\n        target: activity.target\n      };\n      const triggerData = {\n        activityUuid: activity.uuid,\n        config: newConfig,\n        dialog: dialogConfig,\n        message: messageConfig\n      }\n      messageConfig = {\n        ...messageConfig,\n        create: true\n      };\n\n      // RollUtil.getTrigger({ \n      //   activity,\n      //   rolls: activity.rolls,\n      //   dialog: dialogConfig,\n      //   message: messageConfig,\n      //   config: usageConfig\n      // });\n      \n      LogUtil.log(\"SocketUtil.execForUser\", [playerOwner.id, triggerData]);\n      SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerActivity.action, playerOwner.id, triggerData);\n    }\n  }\n  static preloadTemplates = async () => {\n    const templatePaths = [\n      `modules/${MODULE_ID}/templates/roll-dc-field.hbs`\n    ];\n    await loadTemplates(templatePaths);\n    return true;\n  }\n\n  static handleRollDialogInputs = async(target, dialog, html) => {\n    LogUtil.log(\"handleRollDialogInputs\", [dialog, html]);\n    \n    const renderedHtml = await renderTemplate(\n      `modules/${MODULE_ID}/templates/roll-dc-field.hbs`, \n      { \n        label: game.i18n.localize(\"CRLNGN_ROLLS.ui.forms.dcFieldLabel\"), \n        dc: dialog.config.dc || \"\"\n      }\n    );\n    \n    if(RollUtil.allowsDC(dialog.config.hookNames)){\n      const targetElement = html.querySelector('.window-content .rolls .formulas');\n      targetElement?.insertAdjacentHTML('beforebegin', renderedHtml);\n    }\n    const dcInput = html.querySelector('input[name=\"dc\"]');\n\n    if(!game.user.isGM){\n      html.querySelector('.formulas.dc')?.classList.add('hidden');\n      dcInput?.setAttribute('hidden', true);\n    }\n    LogUtil.log(\"handleRollDialogInputs\", [html, target, dialog]);\n    if(target && dcInput){dcInput.value = target?.dataset?.dc;}\n    if(dcInput){dialog.config.dc = Number(dcInput.value);}\n    dcInput?.addEventListener('change', () => {\n      dialog.config.dc = Number(dcInput.value) || \"\";\n    });\n  }\n\n  static allowsDC(hookNames){\n    return hookNames[0].toLowerCase() === HOOK_NAMES.SKILL.name.toLowerCase() || \n    hookNames[0].toLowerCase() === HOOK_NAMES.TOOL.name.toLowerCase() || \n    hookNames[0].toLowerCase() === HOOK_NAMES.SAVING_THROW.name.toLowerCase() || \n    hookNames[0].toLowerCase() === HOOK_NAMES.ABILITY_CHECK.name.toLowerCase();\n  }\n\n  /**\n   * Hook handler for dnd5e.renderRollConfigurationDialog\n   * Fires when a roll configuration dialog is rendered\n   * @param {RollConfigurationDialog} rollConfigDialog - The roll configuration dialog\n   * @param {HTMLElement} html - The HTML element of the dialog\n   */\n  static #onRenderRollConfigurationDialog(rollConfigDialog, html){\n    LogUtil.log(\"#onRenderRollConfigurationDialog #1\", [rollConfigDialog]);\n    const eventTarget = GeneralUtil.getElement(rollConfigDialog.config?.event?.target);\n    const target = eventTarget?.closest(\".card-buttons\")?.querySelector(\"button[data-action]\");\n    const actionTitle = target ? target?.dataset?.title : rollConfigDialog.config?.title || rollConfigDialog.options?.window?.title;\n    if(actionTitle){\n      // rollConfigDialog.window.title = actionTitle;\n      rollConfigDialog.options.window.title = actionTitle;\n    }\n    if(target && target?.dataset.action !== BUTTON_ACTION_TYPES.ROLL_REQUEST){\n      return;\n    }\n    RollUtil.handleRollDialogInputs(target, rollConfigDialog, html);\n    LogUtil.log(\"#onRenderRollConfigurationDialog\", [target?.dataset.advantage ? CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE : CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE]);\n    let dcInput = html.querySelector('input[name=\"dc\"]');\n    const dcValue = target ? Number(target?.dataset?.dc) : rollConfigDialog.config?.dc || undefined;\n    // const dcInput = html.querySelector('input[name=\"dc\"]');\n    \n    if(dcInput){ dcInput.value = dcValue; }\n    const flagAttribute = `data-${MODULE_ID}-${game.user.id}-custom-event`;\n    // html.querySelector('.window-title').textContent = actionTitle;\n\n    const targetActor = target ? game.actors.get(target.dataset.actorId) : rollConfigDialog.config?.subject;\n    if(rollConfigDialog.config){\n      rollConfigDialog.config.subject = targetActor;\n      rollConfigDialog.config.dc = dcValue || \"\";\n      rollConfigDialog.config.advantage = target ? target?.dataset.advantage == \"true\" : rollConfigDialog.config.advantage;\n      rollConfigDialog.config.disadvantage = target ? target?.dataset.disadvantage == \"true\" : rollConfigDialog.config.disadvantage;\n      if(rollConfigDialog.config.rolls.length > 0){\n        // rollConfigDialog.rolls = [];\n        rollConfigDialog.config.rolls[0].advantage = target ? target?.dataset.advantage == \"true\" : rollConfigDialog.config.rolls[0].advantage;\n        rollConfigDialog.config.rolls[0].disadvantage = target ? target?.dataset.disadvantage == \"true\" : rollConfigDialog.config.rolls[0].disadvantage;\n        rollConfigDialog.config.rolls[0].situational = target ? Number(target?.dataset.situational) : rollConfigDialog.config.rolls[0].situational;\n        rollConfigDialog.config.rolls[0].options.advantage = rollConfigDialog.config.rolls[0].advantage;\n        rollConfigDialog.config.rolls[0].options.disadvantage = rollConfigDialog.config.rolls[0].disadvantage;\n        rollConfigDialog.config.rolls[0].options.advantageMode = RollUtil.getAdvantageMode(rollConfigDialog.config.rolls[0]);\n      }\n    }\n\n    const situationalBonus = Number(target?.dataset?.situational) || rollConfigDialog.config?.situational || \"\";\n    const situationalInput = html.querySelector('input[name=\"roll.0.situational\"]');\n    LogUtil.log(\"#onRenderRollConfigurationDialog ##\", [rollConfigDialog, actionTitle]);\n    \n    if (html.hasAttribute(flagAttribute)) {\n      return; \n    }\n    if(situationalInput){\n      html.setAttribute(flagAttribute, \"true\");\n      situationalInput.value = situationalBonus || \"\";\n      situationalInput.dispatchEvent(new Event('change', {\n        bubbles: true,\n        cancelable: false\n      }));\n    }\n\n    html.setAttribute(flagAttribute, \"true\");\n  }\n\n  /**\n   * Base method for handling pre-roll hooks\n   * @param {Object} config - Roll process configuration\n   * @param {Object} dialog - Dialog configuration\n   * @param {Object} message - Message configuration\n   * @param {string} actionType - The type of action being performed (e.g., 'rollRequest', 'rollAttack')\n   * @returns {boolean} Whether to allow the roll to proceed\n   */\n  static #onPreRollV2(config, dialog, message, actionType='') {\n    LogUtil.log(`#onPreRollV2 for ${actionType}`, [config, dialog, message, CONFIG.Dice.D20Roll.ADV_MODE]);\n    if(!actionType){return}\n    \n    // Find the target button based on the action type\n    const eventTarget = GeneralUtil.getElement(config.event?.target) || null;\n    // config.event = null;\n    const target = eventTarget?.closest(\".card-buttons\")?.querySelector(`button[data-action=${actionType}]`) || null;\n    config.event = null;\n    // Extract situational bonus from the dataset or config\n    const situationalBonus = target ? Number(target.dataset.situational) : config.situational || undefined;\n    LogUtil.log(\"Situational bonus:\", [situationalBonus, target, eventTarget]);\n    \n    // if(target) {\n      // Set common configuration properties\n      config.advantage = target?.dataset?.advantage || config.advantage;\n      config.disadvantage = target?.dataset?.disadvantage || config.disadvantage;\n      config.situational = situationalBonus || \"\"; // Set situational bonus in config\n      \n      // Set action-specific configuration properties\n      if (actionType === BUTTON_ACTION_TYPES.ROLL_REQUEST) {\n        config.ability = target?.dataset.ability || config.ability;\n        config.abilityId = target?.dataset.ability || config.ability;\n      } else if (actionType === BUTTON_ACTION_TYPES.ROLL_ATTACK) {\n        config.attackMode = target?.dataset.attackMode || config.attackMode;\n      }\n      LogUtil.log(\"Config:\", [dialog.options?.window, message.data.flavor], true);\n    \n      // Set flavor text if available\n      // message.data.flavor = target?.dataset.flavor || config.flavor;\n      // if(dialog.options?.window && message.data.flavor){\n      //   dialog.options.window.title = message.data.flavor || target?.dataset.flavor || config.flavor;\n      // }\n\n      LogUtil.log(\"Applied target data to config\", [config, dialog], true);\n    // }\n    \n    // Ensure the situational bonus is included in the parts array\n    if (situationalBonus !== undefined && !config.parts?.includes('@situational')) {\n      if (!config.parts) config.parts = [];\n      config.parts.push('@situational');\n    }\n\n    if (!config.rolls) config.rolls = [];\n    LogUtil.log(\"Number of rolls:\", [config.rolls.length], true);\n    \n    for (const roll of config.rolls) {\n      if (!roll.data) roll.data = {};\n      if (!roll.data.flags) roll.data.flags = {};\n      \n      roll.data.flags[MODULE_ID] = {\n        flavor: dialog.options?.window?.title || message.data.flavor\n      };\n      const rollData = {\n        flags: roll.data.flags,\n        situational: situationalBonus\n      };\n      if (actionType === BUTTON_ACTION_TYPES.ROLL_REQUEST) {\n        rollData.target = target?.dataset.dc ? Number(target.dataset.dc) : config.target;\n        rollData.ability = target?.dataset.ability || config.ability;\n      }\n      \n      roll.data = rollData;\n      if(config.advantage || config.disadvantage){\n        roll.options = {\n          ...roll.options,\n          advantageMode: config.advantage ? CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE : CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE\n        }\n      }\n      \n      if(roll.resetFormula) roll.resetFormula();\n      LogUtil.log(\"Modified roll data\", [roll], true);\n    }\n    \n    LogUtil.log(`#onPreRollV2 for ${actionType} completed`, [], true);\n    return true; // Allow the roll to proceed\n  }\n  \n  /**\n   * Hook handler for skill and tool checks\n   * @param {Object} config - SkillToolRollProcessConfiguration for the roll\n   * @param {Object} dialog - SkillToolRollDialogConfiguration for the dialog\n   * @param {Object} message - SkillToolRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollSkillToolV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollSkillToolV2\", [config, dialog, message]);\n    // return RollUtil.#onPreRollV2(config, dialog, message, BUTTON_ACTION_TYPES.ROLL_REQUEST);\n  }\n\n  /**\n   * Get the player owner object for a given actor ID\n   * @param {string} actorId - Actor ID to get player owner for\n   * @returns {Object|null} Player owner object, or null if not found\n   */\n  static getPlayerOwner(actorId) {\n    return game.users.find(u => u.character?.id === actorId);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollAbilityCheck\n   * @param {Object} config - RollProcessConfiguration for the roll\n   * @param {Object} dialog - RollDialogConfiguration for the dialog\n   * @param {Object} message - RollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollAbilityCheck(config, dialog, message) {\n    LogUtil.log(\"#onPreRollAbilityCheck\", [config, dialog, message]);\n    return RollUtil.#onPreRollV2(config, dialog, message, BUTTON_ACTION_TYPES.ROLL_REQUEST);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollSavingThrow\n   * @param {Object} config - RollProcessConfiguration for the roll\n   * @param {Object} dialog - RollDialogConfiguration for the dialog\n   * @param {Object} message - RollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollSavingThrow(config, dialog, message) {\n    LogUtil.log(\"#onPreRollSavingThrow\", [config, dialog, message]);\n    return RollUtil.#onPreRollV2(config, dialog, message, BUTTON_ACTION_TYPES.ROLL_REQUEST);\n  }\n\n  /**\n   * Hook handler for dnd5e.preBeginConcentrating\n   * Fires before a concentration effect is created\n   * @param {Actor5e} actor - The actor that will be concentrating\n   * @param {Item5e} item - The item that requires concentration\n   * @returns {boolean|void} Return false to prevent concentration effect from being created\n   */\n  static #onPreBeginConcentrating(actor, item) {\n    LogUtil.log(\"#onPreBeginConcentrating\", [actor, item]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preEndConcentration\n   * Fires before a concentration effect is deleted\n   * @param {Actor5e} actor - The actor that is concentrating\n   * @param {ActiveEffect} effect - The concentration effect\n   * @returns {boolean|void} Return false to prevent concentration effect from being deleted\n   */\n  static #onPreEndConcentration(actor, effect) {\n    LogUtil.log(\"#onPreEndConcentration\", [actor, effect]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollConcentrationV2\n   * Fires before a saving throw to maintain concentration is rolled\n   * @param {Object} config - D20RollProcessConfiguration for the roll\n   * @param {Object} dialog - D20RollDialogConfiguration for the dialog\n   * @param {Object} message - D20RollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollConcentrationV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollConcentrationV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollDeathSaveV2\n   * Fires before a death saving throw is rolled\n   * @param {Object} config - D20RollProcessConfiguration for the roll\n   * @param {Object} dialog - D20RollDialogConfiguration for the dialog\n   * @param {Object} message - D20RollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollDeathSaveV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollDeathSaveV2\", [config, dialog, message]);\n  }\n\n\n  /**\n   * Hook handler for dnd5e.preRollToolCheckV2\n   * Fires before a tool check is rolled\n   * @param {Object} config - SkillToolRollProcessConfiguration for the roll\n   * @param {Object} dialog - SkillToolRollDialogConfiguration for the dialog\n   * @param {Object} message - SkillToolRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollToolCheckV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollToolCheckV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollHitDieV2\n   * Fires before a hit die is rolled\n   * @param {Object} config - HitDieRollProcessConfiguration for the roll\n   * @param {Object} dialog - HitDieRollDialogConfiguration for the dialog\n   * @param {Object} message - HitDieRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollHitDieV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollHitDieV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollClassHitPoints\n   * Fires before hit points are rolled for a character's class\n   * @param {Actor5e} actor - The actor\n   * @param {Object} classItem - The class item\n   * @param {Object} formula - The formula to roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollClassHitPoints(actor, classItem, formula) {\n    LogUtil.log(\"#onPreRollClassHitPoints\", [actor, classItem, formula]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollNPCHitPoints\n   * Fires before hit points are rolled for an NPC\n   * @param {Actor5e} actor - The NPC actor\n   * @param {Object} formula - The formula to roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollNPCHitPoints(actor, formula) {\n    LogUtil.log(\"#onPreRollNPCHitPoints\", [actor, formula]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollInitiativeDialog\n   * Fires before the initiative dialog is shown\n   * @param {Object} config - Configuration for the roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollInitiativeDialog(config) {\n    LogUtil.log(\"#onPreRollInitiativeDialog\", [config]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollInitiative\n   * Fires before initiative is rolled for an Actor\n   * @param {Actor5e} actor - The actor rolling initiative\n   * @param {Object} options - Roll options\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollInitiative(actor, options) {\n    LogUtil.log(\"#onPreRollInitiative\", [actor, options]);\n  }\n\n  /**\n   * Hook handler for attack rolls\n   * @param {Object} config - AttackRollProcessConfiguration for the roll\n   * @param {Object} dialog - AttackRollDialogConfiguration for the dialog\n   * @param {Object} message - AttackRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollAttackV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollAttackV2\", [config, dialog, message]);\n    return RollUtil.#onPreRollV2(config, dialog, message, BUTTON_ACTION_TYPES.ROLL_ATTACK);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollDamageV2\n   * Fires before damage is rolled\n   * @param {Object} config - DamageRollProcessConfiguration for the roll\n   * @param {Object} dialog - DamageRollDialogConfiguration for the dialog\n   * @param {Object} message - DamageRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollDamageV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollDamageV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollFormulaV2\n   * Fires before a formula is rolled for a Utility activity\n   * @param {Object} config - FormulaRollProcessConfiguration for the roll\n   * @param {Object} dialog - FormulaRollDialogConfiguration for the dialog\n   * @param {Object} message - FormulaRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollFormulaV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollFormulaV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollRechargeV2\n   * Fires before recharge is rolled for an Item or Activity\n   * @param {Item5e|Object} item - The item being recharged\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollRechargeV2(item) {\n    LogUtil.log(\"#onPreRollRechargeV2\", [item]);\n  }\n\n  /**\n   * Hook handler for dnd5e.postRollConfiguration\n   * Fires after roll configuration is complete, but before the roll is evaluated\n   * @param {Array} rolls - BasicRoll[] array of rolls\n   * @param {Object} config - BasicRollProcessConfiguration for the roll\n   * @param {Object} dialog - BasicRollDialogConfiguration for the dialog\n   * @param {Object} message - BasicRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPostRollConfiguration(rolls, config, dialog, message) {\n    LogUtil.log(\"#onPostRollConfiguration #A\", [rolls, config, dialog, message]);\n    if(!game.user.isGM || !RollUtil.requestsEnabled){ return true; }\n    \n    const roll = rolls?.[0];\n    if(roll){\n      config.ability = roll.data.abilityId;\n      config.abilityId = roll.data.abilityId;\n      config.advantage = roll.hasAdvantage;\n      config.disadvantage = roll.hasDisadvantage;\n      config.situational = roll.data.situational;\n      // config.flavor = roll.data.flavor;\n    }\n    config.target = config.dc;\n    if(config.options?.window?.title){\n      message.flavor = config.options.window.title;\n      message.data.flavor = config.options.window.title;\n      config.title = config.options.window.title;\n    }\n\n    const triggerData = {\n      rolls,\n      config,\n      dialog,\n      message\n    };\n    LogUtil.log(\"#onPostRollConfiguration #B\", [config, dialog, message]);\n\n    RollUtil.getTrigger(triggerData);\n\n    return false;\n  }\n\n  /**\n   * Post a message to chat in case user cancels the roll popup\n   * @param {*} actor \n   * @param {*} config \n   * @param {*} dialog \n   * @param {*} message \n   */\n  static postRequestChatMessage = async(data) => {\n    const { playerId, actor, config, dialog, message } = data;\n    // Ensure we have a valid situational bonus value\n    const situationalBonus = config.situational !== undefined ? Number(config.situational) : \"\";\n    \n    const dataset = {\n      ...config,\n      type: config.type,\n      action: \"rollRequest\",\n      visibility: \"\",//playerId,\n      target: actor.uuid,\n      dc: config.target || config.dc,\n      actorId: actor.id,\n      hideDC: !game.user.isGM,\n      title: message.flavor,\n      flavor: message.flavor,\n      situational: situationalBonus,\n      parts: config.parts || []\n    };\n    delete dataset.subject;\n    delete dataset.event;\n    if(config.type==='skill'){\n      dataset.skill = config.skill;\n    }else if(config.type==='tool'){\n      dataset.tool = config.tool;\n    }\n    \n    // Ensure the situational bonus is included in the parts array\n    if (situationalBonus && !dataset.parts.includes('@situational')) {\n      dataset.parts.push('@situational');\n    }\n    \n    // check https://github.com/foundryvtt/dnd5e/blob/735a7e96cc80458e47acaef1af5c5ea173369ace/module/enrichers.mjs for more info\n    const buttons = [{\n      buttonLabel: dnd5e.enrichers.createRollLabel({...dataset, format: \"short\", icon: true}),\n      hiddenLabel: dnd5e.enrichers.createRollLabel({...dataset, format: \"short\", icon: true, hideDC: true}),\n      dataset: dataset\n    }]; \n\n    LogUtil.log(\"postRequestChatMessage\", [ buttons, message, dataset ]);\n    \n    const chatData = {\n      user: playerId, \n      content: await renderTemplate(\"systems/dnd5e/templates/chat/request-card.hbs\", { buttons }),\n      flavor: game.i18n.localize(\"CRLNGN_ROLLS.ui.cards.rollRequestFlavor\"),\n      speaker: message.speaker // ChatMessage.implementation.getSpeaker({ alias: \"Game Master\" })\n    };\n    \n    await ChatMessage.implementation.create(chatData);\n\n    // const MessageClass = getDocumentClass(\"ChatMessage\");\n\n    // let buttons;\n    // if ( dataset.type === \"check\" ) buttons = RollUtil.createCheckRequestButtons(dataset);\n    // else if ( dataset.type === \"save\" ) buttons = RollUtil.createSaveRequestButtons(dataset);\n    // else buttons = [RollUtil.createRequestButton({ ...dataset, format: \"short\" })];\n\n    // const chatData = {\n    //   user: playerId, \n    //   content: await renderTemplate(\"systems/dnd5e/templates/chat/request-card.hbs\", { buttons }),\n    //   flavor: game.i18n.localize(\"CRLNGN_ROLLS.ui.cards.rollRequestFlavor\"),\n    //   speaker: message.speaker\n    // };\n    // return MessageClass.create(chatData);\n  }\n\n  /**\n   * Create the buttons for a check requested in chat.\n   * @param {object} dataset\n   * @returns {object[]}\n   */\n  static createCheckRequestButtons(dataset) {\n    const skills = dataset.skill?.split(\"|\") ?? [];\n    const tools = dataset.tool?.split(\"|\") ?? [];\n    if ( (skills.length + tools.length) <= 1 ) return [RollUtil.createRequestButton(dataset)];\n    const baseDataset = { ...dataset };\n    delete baseDataset.skill;\n    delete baseDataset.tool;\n    return [\n      ...skills.map(skill => RollUtil.createRequestButton({\n        ability: CONFIG.DND5E.skills[skill].ability, ...baseDataset, format: \"short\", skill, type: \"skill\"\n      })),\n      ...tools.map(tool => dnd5e.enrichers.createRequestButton({\n        ability: CONFIG.DND5E.tools[tool]?.ability, ...baseDataset, format: \"short\", tool, type: \"tool\"\n      }))\n    ];\n  }\n\n  /**\n   * Create a button for a chat request.\n   * @param {object} dataset\n   * @returns {object}\n   */\n  static createRequestButton(dataset) {\n    return {\n      buttonLabel: dnd5e.enrichers.createRollLabel({ ...dataset, icon: true }),\n      hiddenLabel: dnd5e.enrichers.createRollLabel({ ...dataset, icon: true, hideDC: true }),\n      dataset: { ...dataset, action: \"rollRequest\", visibility: \"all\" }\n    };\n  }\n\n  \n\n  // /**\n  //  * Trigger a damage roll for a player\n  //  * @param {Object} config - Damage roll configuration\n  //  * @param {Object} dialog - Dialog configuration\n  //  * @param {Object} message - Message data\n  //  */\n  // static triggerRollDamageV2 = async (config, dialog, message) => {\n  //   const diceConfig = RollUtil.playerDiceConfigs[game.user.id];\n  //   const situationalBonus = config.situational !== undefined ? Number(config.situational) : 0;\n    \n  //   // Get the actor and item\n  //   const actor = game.actors.get(config.subject._id);\n  //   const item = actor?.items?.get(config.item?._id);\n  //   LogUtil.log(\"triggerRollDamageV2\", [game.user, diceConfig, actor, item]);\n  //   if(!actor || !item) return;\n    \n  //   const updatedDialog = {\n  //     ...dialog,\n  //     configure: diceConfig?.d20 ? false : true\n  //   };\n  //   const updatedConfig = {\n  //     ...config,\n  //     parts: config.parts || []\n  //   };\n  //   const updatedMessage = {\n  //     ...message,\n  //     flavor: config.flavor\n  //   };\n    \n  //   // Add situational bonus to the parts array if not already included\n  //   if (situationalBonus && !updatedConfig.parts.includes('@situational')) {\n  //     updatedConfig.parts.push('@situational');\n  //   }\n    \n  //   // Call the item's rollDamage method\n  //   item.rollDamage(updatedConfig, updatedDialog, updatedMessage);\n  // }\n\n  /**\n   * Hook handler for dnd5e.renderRollResolver\n   * Fires after the roll resolver is rendered\n   * @param {RollResolver} resolver - The roll resolver\n   * @param {HTMLElement} html - The HTML element for the roll resolver\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onRenderRollResolver(resolver, html) {\n    LogUtil.log(\"#onRenderRollResolver\", [resolver, html]);\n\n    // Check if any entry in the fulfillable Map has method: \"pixels\"\n    const hasPixelsMethod = value => value?.method === \"pixels\";\n    const isPixelsDice = resolver.fulfillable instanceof Map && \n                        [...resolver.fulfillable.values()].some(hasPixelsMethod);\n\n    // Add custom UI elements if the Resolver is for Pixel Dice\n    if(isPixelsDice){\n      const roll = resolver.roll;\n      let flags = roll?.data?.flags?.[MODULE_ID];\n      if (!flags) { flags = {flavor: \"\"} }\n\n      roll.data.situational = 7;\n      \n      html.classList.add('crlngn-rolls');\n      html.querySelector('.window-header .window-title').innerHTML = game.i18n.localize(\"CRLNGN_ROLLS.ui.forms.pixelsRollTitle\");\n\n      // Add title and flavor from flag, if present\n      const customElement = document.createElement('div');\n      customElement.classList.add('crlngn-resolver-title');\n      customElement.innerHTML = `<h1>${game.i18n.localize(\"CRLNGN_ROLLS.ui.forms.pixelsWaitingTitle\")}</h1><br/>${flags.flavor}`;\n\n      html.querySelector('.standard-form').prepend(customElement);\n    }\n  }\n\n  static getTrigger(triggerData){\n    const { config, dialog, message, rolls } = triggerData;\n\n    const isActivity = config.subject instanceof dnd5e.dataModels.activity.BaseActivityData;\n    const actor = isActivity ? config.subject?.actor : config.subject;\n\n    // TODO: what to do if there's no actor for this roll, such as custom rolls\n    if(!actor){ return; } \n    const activity = isActivity ? config.subject : null;\n    const hookName = config.hookNames?.[0]?.toLowerCase() || \"\";\n    const activityType = activity?.type || GeneralUtil.getActivityType(hookName) || \"\";\n    const playerOwner = actor.hasPlayerOwner ? GeneralUtil.getUserFromActor(actor.id) : null;\n    const roll = rolls[0];\n    // if(!roll){return;}\n    const situationalBonus = roll?.data.situational ? Number(roll.data.situational) : Number(config.situational) || \"\";\n\n    if(playerOwner && playerOwner !== game.user && RollUtil.requestsEnabled){\n      let damageParts, diceTypes;\n\n      let newConfig = {\n        ...config,\n        situational: situationalBonus,\n      };\n      if(isActivity){\n        newConfig.activity = config.subject;\n      }\n      newConfig.skill = config.skill || '';\n      newConfig.tool = config.tool || '';\n      // Create message data\n      const msg = {\n        ...message.data,\n        // data: {\n        //   flavor: dialog.options?.window?.title || message.data.flavor\n        // },\n        speaker: {\n          ...message.speaker,\n          alias: actor.name\n        },\n        rollMode: message.rollMode\n      };\n      // Add situational bonus to parts if needed\n      // if (situationalBonus && !newConfig.parts.includes('@situational')) {\n      //   newConfig.parts.push('@situational');\n      // }\n\n      const forwardData = { config:newConfig, dialog, message: msg, isActivity, activity, hookName, playerOwner, roll };\n      LogUtil.log(\"getTrigger\", [activityType,forwardData]);\n      switch(activityType){\n        case HOOK_NAMES.ATTACK.activityType: {\n          RollUtil.forwardAttackActivity(forwardData); break;\n        }\n        case HOOK_NAMES.DAMAGE.activityType: {\n          RollUtil.forwardDamageActivity(forwardData); break;\n        }\n        case HOOK_NAMES.SAVE.activityType: {\n          RollUtil.forwardDamageActivity(forwardData); break;\n          // RollUtil.forwardSaveActivity(forwardData); break;\n        }\n        case HOOK_NAMES.SKILL.activityType:\n        case HOOK_NAMES.TOOL.activityType: {\n          RollUtil.forwardSkillToolCheck(forwardData); break;\n        }\n        case HOOK_NAMES.SAVING_THROW.name: {\n          RollUtil.forwardSavingThrow(forwardData); break;\n        }\n        default:{\n          return null;\n        }\n      }\n\n      return null;\n    }\n  }\n\n  static forwardAttackActivity(data){\n    const { config, dialog, message, playerOwner, roll } = data;\n\n    const newConfig = {\n      ...config,\n      options: roll?.options,\n      type: HOOK_NAMES.ATTACK.name,\n      attackMode: roll?.options?.attackMode,\n      advantage: roll?.hasAdvantage || false,\n      disadvantage: roll?.hasDisadvantage || false,\n      ammunition: roll?.options?.ammunition,\n      target: config.target\n    };\n    const triggerData = {\n      activityUuid: config.subject.uuid,\n      config: newConfig,\n      dialog: dialog,\n      message: {\n        ...message,\n        create: false\n      }\n    }\n    LogUtil.log(\"SocketUtil.execForUser\", [playerOwner.id, triggerData]);\n    SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerActivity.action, playerOwner.id, triggerData);\n\n  }\n\n  static forwardDamageActivity(data){\n    const { config, dialog, message, playerOwner, roll } = data;\n\n    const newConfig = {\n      ...config,\n      options: roll.options,\n      type: HOOK_NAMES.DAMAGE.name,\n      critical: roll.options.critical,\n      isCritical: roll.options.isCritical,\n      target: roll.options.target\n    };\n    const triggerData = {\n      activityUuid: config.subject.uuid,\n      config: newConfig,\n      dialog: dialog,\n      message: message\n    }\n    \n    LogUtil.log(\"SocketUtil.execForUser\", [playerOwner.id, triggerData]);\n    SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerActivity.action, playerOwner.id, triggerData);\n  }\n\n  static forwardSaveActivity(data){\n    const { config, dialog, message, playerOwner, roll } = data;\n\n    const newConfig = {\n      ...config,\n      options: roll.options,\n      type: HOOK_NAMES.SAVE.name,\n      critical: roll.options.critical,\n      isCritical: roll.options.isCritical,\n      target: roll.options.target\n    };\n    const triggerData = {\n      activityUuid: config.subject.uuid,\n      config: newConfig,\n      dialog: dialog,\n      message: message\n    }\n    \n    LogUtil.log(\"SocketUtil.execForUser\", [playerOwner.id, triggerData]);\n    SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerActivity.action, playerOwner.id, triggerData);\n  }\n\n  static forwardSavingThrow(data){\n    LogUtil.log(\"forwardSavingThrow\", [data, HOOK_NAMES.SAVING_THROW.activityType]);\n    const { config, dialog, message, hookName, playerOwner, roll } = data;\n    const actor = game.actors.get(config.subject._id);\n    const newConfig = {\n      ...config,\n      type: HOOK_NAMES.SAVING_THROW.name,\n      parts: config.parts || []\n    };\n    delete newConfig.event;\n    delete newConfig.options;\n    // if(dialog.options?.window?.title){\n    //   dialog.options.window.title = message.data.flavor;\n    // }\n\n    const triggerData = {\n      config: newConfig,\n      dialog: dialog,\n      message: message,\n      playerId: playerOwner?.id || \"\"\n    }\n    // RollUtil.postRequestChatMessage(playerOwner, actor, newConfig, dialog, msg);\n    LogUtil.log(\"SocketUtil.execForUser\", [playerOwner.id, triggerData]);\n    RollUtil.postRequestChatMessage({...triggerData, actor});\n    SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerRollRequest.action, playerOwner.id, triggerData);\n  }\n\n  static forwardSkillToolCheck(data){\n    LogUtil.log(\"forwardSkillToolCheck\", [data]);\n    const { config, dialog, message, hookName, playerOwner, roll } = data;\n    const actor = game.actors.get(config.subject._id);\n    const newConfig = {\n      ...config,\n      type: hookName,\n      parts: config.parts || []\n    };\n    delete newConfig.event;\n    delete newConfig.options;\n    // delete newConfig.subject;\n\n    const triggerData = {\n      config: newConfig,\n      dialog: dialog,\n      message: message,\n      playerId: playerOwner?.id || \"\"\n    }\n    // RollUtil.postRequestChatMessage(playerOwner, actor, newConfig, dialog, msg);\n    LogUtil.log(\"SocketUtil.execForUser\", [playerOwner.id, triggerData]);\n    RollUtil.postRequestChatMessage({...triggerData, actor});\n    SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerRollRequest.action, playerOwner.id, triggerData);\n  }\n\n  ///////\n  //\n  static triggerRollRequest = async (data) => {\n    const { diceTypes, config, dialog, message, playerId } = data;\n    const diceConfig = RollUtil.playerDiceConfigs[game.user.id];\n    const situationalBonus = config.situational !== undefined ? Number(config.situational) : 0;\n    const areDiceConfigured = RollUtil.areDiceConfigured(diceTypes, playerId); \n    //  diceTypes.map(diceType => {\n    //   return diceConfig?.[diceType] !== \"\";\n    // }).includes(true);\n\n    // Get the actor\n    const actor = game.actors.get(config.subject._id);\n    LogUtil.log(\"triggerRollRequest\", [game.user, config, dialog, message]);\n    if(!actor) return;\n    \n    const updatedDialog = {\n      ...dialog,\n      configure: !areDiceConfigured,\n      options:{\n        ...dialog.options,\n        window:{\n          ...dialog.options.window,\n          title: message.flavor || config.flavor || dialog.options.window.title\n        }\n      },\n      configure: diceConfig?.d20 ? false : true\n    };\n    const updatedConfig = {\n      ...config,\n      parts: config.parts || []\n    };\n    const updatedMessage = {\n      ...message,\n      flavor: message.flavor || config.flavor || dialog.options.window.title\n    };\n    \n    // Add situational bonus to the parts array if not already included\n    if (updatedConfig.situational && !updatedConfig.parts.includes('@situational')) {\n      updatedConfig.parts.push('@situational');\n    }\n    if(updatedConfig.skill){\n      actor.rollSkill(updatedConfig, updatedDialog, updatedMessage);\n    }else if(updatedConfig.tool){\n      actor.rollToolCheck(updatedConfig, updatedDialog, updatedMessage);\n    }else{\n      actor.rollSavingThrow(updatedConfig, updatedDialog, updatedMessage);\n    }\n  }\n\n  static getAdvantageMode(roll){\n    return roll.advantage ? CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE : roll.disadvantage ? CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE : CONFIG.Dice.D20Roll.ADV_MODE.NORMAL;\n  }\n\n  static areDiceConfigured(diceTypes, userId){\n    const diceConfig = RollUtil.playerDiceConfigs[userId];\n    return diceTypes?.map(diceType => {\n      return diceConfig?.[diceType] !== \"\";\n    }).includes(true) || false;\n  }\n  \n}\n\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  \n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n      LogUtil.log(\"Registering... \",[entry]);\n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n      LogUtil.log(\"registerSettings\",[setting.tag, SettingsUtil.get(setting.tag)]);\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n      LogUtil.log(\"GET Setting\", [selectedSetting, setting]);\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n    LogUtil.log(\"Setting\",[settingName, selectedSetting]);\n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n      LogUtil.log(\"Unable to change setting\",[settingName, selectedSetting]);\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsSetting(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsSetting(value){\n    const SETTINGS = getSettings();\n    const isEnabled = value!==undefined ? value : SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    RollUtil.requestsEnabled = isEnabled;\n    const rollRequestsToggle = document.querySelector(\"#crlngn-request-toggle\");\n    if(!rollRequestsToggle){ return; }\n    if (isEnabled === false) {\n      rollRequestsToggle.classList.remove(\"active\");\n    } else {\n      rollRequestsToggle.classList.add(\"active\");\n    }\n\n    const tooltipStr = game.i18n.localize(rollRequestsToggle.classList.contains(\"active\") ? \n      \"CRLNGN_ROLLS.ui.buttons.rollRequestsToggleOn\" : \n      \"CRLNGN_ROLLS.ui.buttons.rollRequestsToggleOff\");\n    rollRequestsToggle.dataset.tooltip = tooltipStr;\n\n    if (game.tooltip) {\n      game.tooltip.activate(rollRequestsToggle, {text: tooltipStr});\n    }\n    \n    LogUtil.log(\"Roll Requests Toggle\", [isEnabled, rollRequestsToggle]);\n  }\n\n}\n","import { HOOKS_CORE } from \"../constants/Hooks.mjs\"; \nimport { LogUtil } from \"./LogUtil.mjs\"; \nimport { SettingsUtil } from \"./SettingsUtil.mjs\"; \nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  static SOCKET_CALLS = {\n    receiveDiceConfig: \"receiveDiceConfig\",\n    getDiceConfig: \"getDiceConfig\"\n  };\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    // Initialize socketlib\n    SocketUtil.initialize(Main.registerSocketCalls);\n    Hooks.once(HOOKS_CORE.INIT, () => { \n      const SETTINGS = getSettings();\n      LogUtil.log(\"Initiating module...\", [], true);\n      SettingsUtil.registerSettings();\n      RollUtil.init();\n    });\n\n    Hooks.once(HOOKS_CORE.READY, () => {\n      LogUtil.log(\"Core Ready\", []);\n      const SETTINGS = getSettings();\n      \n      var isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n      if(isDebugOn){CONFIG.debug.hooks = true};\n      \n      if(game.user.isGM){\n        Main.injectRollRequestsToggle();\n      }\n      \n      if(game.user.isGM){\n        Hooks.on(HOOKS_CORE.USER_CONNECTED, Main.onUserConnected);\n        // Only run this on the GM client\n        game.users.forEach(user => {\n          Main.onUserConnected(user);\n        });\n      }\n    });\n    ActivityUtil.init();\n  }\n\n  /**\n   * Request dice configuration from the connected user\n   * @param {*} user \n   * @returns \n   */\n  static onUserConnected(user) {\n    // Request dice configuration from the connected user\n    if (user.active && user.id !== game.user.id) {\n      LogUtil.log(\"onUserConnected\", [user]);\n      SocketUtil.execForUser(Main.SOCKET_CALLS.getDiceConfig, user.id);\n    }\n  }\n  \n  // Add the getDiceConfig method that will be called on the player's client\n  static getDiceConfig() { \n    if(!game.user) return;\n    const clientSettings = game.settings.storage.get(\"client\");\n    let diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    diceConfig = diceConfig || \"\";\n    LogUtil.log(`getDiceConfig`, [diceConfig]);\n    \n    if(game.user.isGM) {\n      RollUtil.playerDiceConfigs[game.user.id] = diceConfig;\n      SocketUtil.execForGMs(Main.SOCKET_CALLS.receiveDiceConfig, game.user.id, diceConfig);\n      return;\n    }else{\n      RollUtil.playerDiceConfigs[game.user.id] = diceConfig ? JSON.parse(diceConfig) : {};\n    }\n    \n  }\n\n  // Add the receiveDiceConfig method that will be called on the GM's client\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId===game.user.id){ // for GM or own user\n      // Store the dice configuration for this user\n      if (!RollUtil.playerDiceConfigs) RollUtil.playerDiceConfigs = {};\n      RollUtil.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n      \n      LogUtil.log(`Received dice configuration from user ${userId}`, [RollUtil.playerDiceConfigs]);\n    };\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(Main.SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(Main.SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    RollUtil.registerSocketCalls();\n  }\n\n  static injectRollRequestsToggle(){\n    const SETTINGS = getSettings();\n    const rollRequestsToggleHTML = `<label class=\"chat-control-icon active\" id=\"crlngn-request-toggle\" data-tooltip-direction=\"LEFT\"><i class=\"fas fa-bolt\"></i></label>`;\n    \n    document.querySelector(\"#chat-controls\").insertAdjacentHTML(\"afterbegin\", rollRequestsToggleHTML);\n    const rollRequestsToggle = document.querySelector(\"#crlngn-request-toggle\");\n    const isEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    SettingsUtil.applyRollRequestsSetting(isEnabled);\n    \n    rollRequestsToggle.addEventListener(\"click\", (event) => {\n      event.target.classList.toggle(\"active\");\n      const isActive = event.target.classList.contains(\"active\");\n      SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, isActive);\n    });\n    return rollRequestsToggle;\n  }\n\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\nMain.init();\n"],"names":["HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","MODULE_ID","DEBUG_TAG","HOOK_NAMES","ACTIVITY_TYPES","CALL_TYPE","BUTTON_ACTION_TYPES","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","__publicField","LogUtil","SETTING_INPUT","SETTING_SCOPE","getSettings","GeneralUtil","user","gm","us","targetTokens","itemUuid","actorId","moduleName","module","mode","item","removeTemplateSettingOn","SettingsUtil","templates","mt","i","owner","actor","pl","parent","selector","hookName","hookItem","target","selectedTargets","_b","targets","token","name","img","system","uuid","statuses","ac","itemId","actionName","it","varName","varValue","bodyStyle","body","cssText","ruleStart","ruleEnd","declarations","decl","varsMap","parts","value","newRuleContent","newCss","_SocketUtil","hasRolls","r","result","callbackFunc","e","func","callback","handler","parameters","userId","resp","SocketUtil","_ActivityUtil_static","onRenderChatMessage_fn","_ActivityUtil","__privateMethod","event","message","activity","activityUuid","_c","activityData","html","flags","__privateAdd","_d","diceTypes","config","dialog","RollUtil","situationalBonus","updatedConfig","updatedDialog","updatedMessage","context","attackButton","btnData","attackConfigData","messageConfig","areDiceConfigured","damageConfigData","damageParts","part","ActivityUtil","_RollUtil_static","onPreUseActivity_fn","onPostUseActivity_fn","onRenderRollConfigurationDialog_fn","onPreRollV2_fn","onPreRollSkillToolV2_fn","onPreRollAbilityCheck_fn","onPreRollSavingThrow_fn","onPreBeginConcentrating_fn","onPreEndConcentration_fn","onPreRollConcentrationV2_fn","onPreRollDeathSaveV2_fn","onPreRollToolCheckV2_fn","onPreRollHitDieV2_fn","onPreRollClassHitPoints_fn","onPreRollNPCHitPoints_fn","onPreRollInitiativeDialog_fn","onPreRollInitiative_fn","onPreRollAttackV2_fn","onPreRollDamageV2_fn","onPreRollFormulaV2_fn","onPreRollRechargeV2_fn","onPostRollConfiguration_fn","onRenderRollResolver_fn","_RollUtil","element","hookNames","u","dataset","skills","tools","baseDataset","skill","tool","triggerData","rolls","isActivity","activityType","playerOwner","roll","newConfig","msg","forwardData","diceConfig","diceType","usageConfig","dialogConfig","rollConfigDialog","_e","_f","_g","_h","_i","_j","_k","_l","eventTarget","actionTitle","dcInput","dcValue","flagAttribute","targetActor","situationalInput","actionType","rollData","effect","classItem","formula","resolver","hasPixelsMethod","customElement","templatePaths","renderedHtml","targetElement","playerId","buttons","chatData","SETTINGS","entry","setting","settingObj","settingName","selectedSetting","newValue","isEnabled","rollRequestsToggle","tooltipStr","_Main","isDebugOn","isActive","Main"],"mappings":"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"}