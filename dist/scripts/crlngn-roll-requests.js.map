{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Hooks.mjs","../../src/constants/General.mjs","../../src/components/LogUtil.mjs","../../src/constants/Settings.mjs","../../src/components/GeneralUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/ActivityUtil.mjs","../../../dnd5e/module/utils.mjs","../../../dnd5e/module/documents/actor/trait.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/RequestsUtil.mjs","../../src/components/SettingsUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheck\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrow\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheck\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrow\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cRoll That For Me`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", requestType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", requestType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", requestType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", requestType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", requestType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", requestType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" }, // Recharge rolls\n\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" }, // D20 test\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" }, // Short rest\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" }, // Long rest\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: \"abilityCheck\", label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: \"savingThrow\", label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.savingThrows' },\n  SKILL: { name: \"skill\", label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: \"tool\", label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: \"concentration\", label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: \"initiativeDialog\", label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: \"deathSave\", label: \"Death Save\", subList: null, actorPath: '' },\n  CUSTOM: { name: \"custom\", label: \"Custom Roll\", subList: null, actorPath: '' },\n  // HIT_DIE: { name: \"hitDie\", label: \"Hit Die\", subList: null, actorPath: '' }\n}\n","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debugMode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      console.log(...DEBUG_TAG, ref, ...data);\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n}","export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    skipDialogs: {\n      tag: \"skip-dialogs\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","import { HOOK_NAMES } from \"../constants/General.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\n\nexport class GeneralUtil {\n  /**\n   * Identifies the current selected or targeted tokens\n   * @param {User5e} user\n   * @returns {Set} A set of targeted tokens\n   */\n  static getTargets(user) {\n    let gm = game.users.find(us=>us.isGM===true);\n    let targetTokens = user.targets || gm.targets; // || canvas.tokens?.controlled;\n\n    return new Set([...targetTokens]);\n  }\n\n  static getClientTargets = () => {\n    if (!game.user) return [];\n\n    // Convert the Set of targets to an array\n    const selectedTargets = Array.from(game.user.targets);//.filter(target => target.actor);\n\n    LogUtil.log(\"Selected Targets\", [ \n      game.user.id, \n      selectedTargets, \n      selectedTargets.filter(target => target.actor) \n    ]); \n    return selectedTargets; \n  };\n\n\n\n  /**\n  * Grab the targeted tokens and return relevant information for hit calculation\n  * @returns {TargetDescriptor[]}\n  */\n  static getTargetDescriptors = () => {\n    const targets = new Map();\n    for ( const token of game.user.targets ) {\n      const { name } = token;\n      const { img, system, uuid, statuses } = token.actor ?? {};\n      if ( uuid ) {\n        const ac = statuses.has(\"coverTotal\") ? null : system.attributes?.ac?.value;\n        targets.set(uuid, { name, img, uuid, ac: ac ?? null });\n      }\n    }\n    return Array.from(targets.values());\n  }\n\n  /**\n   * \n   * @param {String} itemUuid \n   * @returns {Actor5e}\n   */\n  static getActorFromItem(itemUuid){\n    const actorId = itemUuid.split(\".\")[1];\n    const actor = game.actors.get(actorId);\n\n    return actor;\n  }\n\n  static findItemFromActor = (actorId, itemId, actionName) => {\n    const actor = game.actors.get(actorId);\n    LogUtil.log(\"findItemFromActor\", [itemId, actionName]);\n    if(!actor) return null;\n\n    let item = itemId ? actor.items.find((it) => {\n      return it.id === itemId; \n    }) : null; \n\n    if(!item){ \n      // match exact name\n      item = actionName ? actor.items.find((it) => it.name.toLowerCase() === actionName.toLowerCase()) : null;\n      // if no exact name, look for the name with \"(Legacy)\" tag\n      if(!item){ item = actor.items.find((it) => it.name.toLowerCase() === (actionName + \" (Legacy)\").toLowerCase()) };\n    } \n\n    return item;\n  }\n\n  /**\n   * Checks if module is currently installed and active\n   * @param {string} moduleName \n   * @returns \n   */\n  static isModuleOn(moduleName){\n    const module = game.modules?.get(moduleName);\n    return module?.active ? true : false;\n  }\n\n  /**\n   * checks roll mode to determine if its mode is blind / private\n   * @param {String} mode \n   */\n  static isPrivateRoll(mode){\n    return mode === CONST.DICE_ROLL_MODES.BLIND || mode === CONST.DICE_ROLL_MODES.PRIVATE;\n  }\n\n  /**\n   * Removes the MeasuredTemplate \n   * @param {Item5e} item \n   */\n  static removeTemplateForItem (item) {\n    LogUtil.log(\"removeTemplateForItem - A\", [item]);\n    const removeTemplateSettingOn = SettingsUtil.get(\"remove-template\");\n    LogUtil.log(\"removeTemplateForItem - B\", [removeTemplateSettingOn]);\n    if(!removeTemplateSettingOn){ return; }\n    const templates = canvas.templates.objects.children.filter(mt => {\n      return mt.document.flags.dnd5e.item === item?.uuid;\n    });\n\n    canvas.scene.deleteEmbeddedDocuments('MeasuredTemplate', templates.map(i=>i.id));\n  }\n\n  static getPlayerOwner(actorId){\n    let owner;\n    if(!actorId){ return null; }\n    const actor = actorId ? game.actors.get(actorId) : null;\n    \n    let assignedPlayer = game.users.players.find(pl=>{\n      return pl.active === true && pl.character.id === actorId;\n    });\n    owner = assignedPlayer; \n\n    if(!owner){ \n      // owner = game.users.find(u => u.isGM===true); \n      game.users.players.forEach(pl => {\n        if(pl.active && actor.testUserPermission(pl, foundry.CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER, { exact:true })){\n          owner = pl;\n        }\n      });\n    }\n\n    return owner;\n  }\n\n\n  static html(parent, selector) {\n    return parent.querySelector(selector);\n  }\n\n  /**\n   * Adds css rules to a <style> element at the body\n   * @param {string} varName \n   * @param {string} varValue \n   */\n  static addCSSVars = (varName, varValue) => {\n    let bodyStyle = document.querySelector('#crlngn-chat-vars');\n    \n    if (!bodyStyle) {\n      // Create style element if it doesn't exist\n      const body = document.querySelector('body');\n      bodyStyle = document.createElement('style');\n      bodyStyle.id = 'crlngn-chat-vars';\n      bodyStyle.textContent = 'body.crlngn-chat {\\n}\\n';\n      body.prepend(bodyStyle);\n    }\n    \n    // Parse the current CSS content\n    let cssText = bodyStyle.textContent;\n    \n    // Find or create the rule block\n    let ruleStart = cssText.indexOf('body.crlngn-chat {');\n    let ruleEnd = cssText.indexOf('}', ruleStart);\n    \n    if (ruleStart === -1) {\n      // If rule doesn't exist, create it\n      cssText = 'body.crlngn-chat {\\n}\\n';\n      ruleStart = 0;\n      ruleEnd = cssText.indexOf('}');\n    }\n    \n    // Get all the current declarations\n    const rulePart = cssText.substring(ruleStart + 'body.crlngn-chat {'.length, ruleEnd);\n    \n    // Split by semicolons to get individual declarations\n    const declarations = rulePart.split(';')\n      .map(decl => decl.trim())\n      .filter(decl => decl !== '');\n    \n    // Create a map of existing variables\n    const varsMap = {};\n    declarations.forEach(decl => {\n      const parts = decl.split(':');\n      if (parts.length >= 2) {\n        const name = parts[0].trim();\n        const value = parts.slice(1).join(':').trim(); // Handle values that might contain colons\n        if (name) varsMap[name] = value;\n      }\n    });\n    \n    // Format the value if it appears to need quotes\n    // For string values used in content properties (i18n text)\n    if (varName.includes('i18n') && \n        typeof varValue === 'string' && \n        !varValue.startsWith('\"') && \n        !varValue.startsWith(\"'\") && \n        !varValue.match(/^url\\(|^rgba?\\(|^hsla?\\(/)) {\n      varValue = `\"${varValue}\"`;\n    }\n    \n    // Update or add the new variable\n    varsMap[varName] = varValue;\n    \n    // Rebuild the rule content\n    const newRuleContent = Object.entries(varsMap)\n      .map(([name, value]) => `  ${name}: ${value};`)\n      .join('\\n');\n    \n    // Rebuild the entire CSS\n    const newCss = \n      cssText.substring(0, ruleStart) + \n      'body.crlngn-chat {\\n' + \n      newRuleContent + \n      '\\n}' + \n      cssText.substring(ruleEnd + 1);\n    \n    // Update the style element\n    bodyStyle.textContent = newCss;\n  };\n\n  static getActivityType(hookName) {\n    return Object.values(HOOK_NAMES).find(hookItem => hookItem.name.toLowerCase() === hookName.toLowerCase())?.activityType || \"\";\n  }\n\n  static getPartsFromActivityUuid(uuid){\n    const parts = uuid.split(\".\");\n    return {\n      actorId: parts[1],\n      itemId: parts[3],\n      activityId: parts[5]\n    }\n  }\n\n  static getElement(elem) {\n    // Check if it's a jQuery object\n    // if (target && typeof target.jquery !== 'undefined') {\n    //   // It's a jQuery object, get the first DOM element\n    //   return target[0];\n    // }\n    // It's already a DOM element\n    return elem?.[0] || elem;\n  }\n\n  /**\n   * Get currently selected tokens in the scene or user's character's tokens.\n   * @returns {Token5e[]}\n   */\n  static getSceneTargets() {\n    let targets = canvas.tokens?.controlled.filter(t => t.actor) ?? [];\n    if ( !targets.length && game.user.character ) targets = game.user.character.getActiveTokens();\n    return targets;\n  }\n\n  static getAdvantageMode(rollOptions){\n    return rollOptions.advantage ? CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE : rollOptions.disadvantage ? CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE : CONFIG.Dice.D20Roll.ADV_MODE.NORMAL;\n  }\n}\n\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      LogUtil.log(`Attempting to register module...`);\n\n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n        LogUtil.log(`SocketUtil | Module registered`, [SocketUtil.socket]);\n      } catch (e) {\n          LogUtil.log(`Problem registering module`, [e]);\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n      LogUtil.log(`SocketUtil - Registered callback`, [SocketUtil.socket, name]);\n    } else {\n      LogUtil.log(`SocketUtil - Failed to register callback (socket not initialized)`, [SocketUtil.socket, name]);\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log(`SocketUtil - sendMessage`, [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as GM.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute for all clients.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    if (!SocketUtil.socket) {\n        LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as user.\");\n        return;\n    }\n\n    if(userId === game.user.id){\n      LogUtil.log(\"SocketUtil - Preventing recursive call\", [userId]);\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        LogUtil.log(\"SocketUtil - Preventing recursive call\", [executionKey]);\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n        const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n        LogUtil.log(\"SocketUtil - Executed as user.\", [resp]);\n        return resp;\n    } catch (error) {\n        LogUtil.log(\"SocketUtil - Error executing as user\", [error]);\n        return null;\n    } finally {\n        // Always clean up, even if there was an error\n        SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    LogUtil.log(\"ROLLS DATA\", [data, data.subject]);\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        LogUtil.log(\"ROLL\", [roll, r]);\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { HOOKS_CORE } from \"../constants/Hooks.mjs\";\nimport { ACTIVITY_TYPES, HOOK_NAMES, MODULE_ID } from \"../constants/General.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { RequestsUtil } from \"./RequestsUtil.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\n\n/**\n * Utility class for handling activity-related functionality\n */\nexport class ActivityUtil {\n\n  /**\n   * Initialize the util\n   * @static\n   */\n  static init(){\n    Hooks.on(HOOKS_CORE.RENDER_CHAT_MESSAGE, ActivityUtil.#onRenderChatMessage);\n  }\n\n  /**\n   * Trigger an attack roll for a player\n   * @param {Object} data - configuration data\n   */\n  static triggerActivity = async (data) => { \n    const { activityUuid, diceTypes, config, dialog, message } = data;\n    LogUtil.log(\"triggerActivity #1\", [diceTypes, config, dialog, message, data]);\n    const diceConfig = RequestsUtil.playerDiceConfigs[game.user.id]; // Get the player's core dice configuration\n    const situationalBonus = config.situational ? Number(config.situational) : 0;\n    const activityData = activityUuid.split(\".\"); // example: \"Actor.Br4xlsplGmnHwdiG.Item.kDxIYfzQIFmukmH0.Activity.attackWarhammerI\"\n    const actor = game.actors.get(activityData[1]); // pick actor from the uuid\n    const item = actor?.items.get(activityData[3]); // pick item from the uuid\n    const activity = item?.system?.activities?.get(activityData[5]) || item?.activities?.get(activityData[5]); // pick activity from the uuid\n    const hookName = config.hookNames?.[0] || activity.type;\n    const deserializedConfig = SocketUtil.deserializeFromTransport(config, true);\n\n    LogUtil.log(\"triggerActivity #2\", [hookName, deserializedConfig, data]);\n\n    if(!actor || !item || !activity) return;\n    const updatedConfig = {\n      ...deserializedConfig,\n      subject: activity,\n      parts: deserializedConfig.parts || []\n    };\n    const updatedDialog = {\n      ...dialog\n    };\n    const updatedMessage = {\n      ...message,\n      flavor: deserializedConfig.flavor\n    };\n    // Add situational bonus to the parts array if not already included\n    if (situationalBonus && !updatedConfig.parts.includes('@situational')) {\n      updatedConfig.parts.push('@situational');\n    }\n\n    // Call the activity's rollAttack method\n    switch(hookName){\n      case HOOK_NAMES.ATTACK.name:{\n        ActivityUtil.useAttack({activity, config: updatedConfig, message: updatedMessage, dialog: updatedDialog});\n        LogUtil.log(\"triggerActivity attack\", [updatedConfig, updatedDialog, updatedMessage]);\n        // activity.use(updatedConfig, updatedDialog, updatedMessage);\n        // activity.rollAttack(updatedConfig, updatedDialog, updatedMessage);\n        break;\n      }\n      case HOOK_NAMES.DAMAGE.name:{\n        LogUtil.log(\"triggerActivity damage\", [activity, updatedConfig, updatedDialog, updatedMessage]);\n        // ActivityUtil.testDamage({activity, attackMode: updatedConfig.attackMode});\n        ActivityUtil.useDamage({activity, config: updatedConfig, message: updatedMessage, dialog: updatedDialog});\n        break;\n      }\n      case HOOK_NAMES.SAVE.name:{\n        LogUtil.log(\"triggerActivity save\", [updatedConfig]);\n        updatedMessage.create = true;\n        activity.use(updatedConfig, updatedDialog, updatedMessage);\n        // ActivityUtil.useDamage({activity, config: updatedConfig, message: updatedMessage, dialog: updatedDialog});\n        break;\n      }\n      default:{\n        break;\n      }\n    }\n    \n    LogUtil.log(\"triggerActivity #3\", [activityUuid, config, data]);\n  }\n\n  static testDamage(data){\n    const { activity, config, message, dialog } = data;\n    \n    activity.rollDamage();\n  }\n\n  /**\n   * Creates a chat card for an attack usage with buttons that\n   * allow config dialog to pick up configuration options selected by the game master\n   * @param {Object} data \n   */\n  static useAttack = async (data) => {\n    const { activity, config, message, dialog } = data;\n    const context = await activity._usageChatContext(message);\n    const originalActions = activity.metadata.usage.actions;\n    const attackButton = context.buttons.find(btnData => btnData.dataset.action === \"rollAttack\");\n    // const damageButton = context.buttons.find(btnData => btnData.dataset.action === \"rollDamage\");\n    LogUtil.log(\"useAttack #1\", [data]);\n    // Add configuration data to buttons for later pickup\n    const attackConfigData = {\n      situational: config.situational,\n      attackMode: config.attackMode,\n      advantage: config.advantage,\n      disadvantage: config.disadvantage,\n      ammunition: config.ammunition\n    }\n    attackButton.dataset = {\n      ...attackButton?.dataset,\n      ...attackConfigData,\n      action: \"rollAttack\",\n      activityUuid: activity.uuid || \"\",\n    }\n    // damageButton.dataset = {\n    //   ...damageButton?.dataset,\n    //   action: \"rollDamage\",\n    //   activityUuid: activity.uuid,\n    //   attackMode: config.attackMode,\n    //   // situational: config.situational,\n    //   // critical: config.critical,\n    //   // isCritical: config.isCritical\n    // }\n\n    activity.metadata.usage.actions = {\n      ...activity.metadata.usage.actions,\n      'rollAttack': ActivityUtil.rollModifiedAttack,\n      // 'rollDamage': ActivityUtil.rollModifiedDamage\n    }\n\n    const messageConfig = foundry.utils.mergeObject({\n      rollMode: message.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      data: {\n        content: await renderTemplate(activity.metadata.usage.chatCard, context),\n        speaker: ChatMessage.getSpeaker({ actor: activity.actor }),\n        flags: {\n          core: { canPopout: true },\n          [MODULE_ID]: {\n            modifiedActions: true,\n            activityType: activity.type,\n            activityUuid: activity.uuid\n          }\n        }\n      }\n    }, message);\n\n    const diceTypes = ['d20'];\n    const areDiceConfigured = RequestsUtil.areDiceConfigured(diceTypes, game.user.id);\n    dialog.configure = !areDiceConfigured;\n\n    LogUtil.log(\"useAttack\", [activity, context, messageConfig, data]);\n    const card = await ChatMessage.create(messageConfig.data);\n\n    // activity.use(attackConfigData, dialog, {create: true});\n    activity.rollAttack(attackConfigData, dialog, {create: true});\n    // activity.metadata.usage.actions = originalActions; // Restore original actions \n  }\n\n   /**\n   * Creates a chat card for an attack usage with buttons that\n   * allow config dialog to pick up configuration options selected by the game master\n   * @param {Object} data \n   */\n   static useDamage = async (data) => {\n    const { activity, config, message, dialog } = data;\n    LogUtil.log(\"useDamage #1\", [data, config.attackMode]);\n\n    // Check if we have rolls in the config\n    if (config.rolls && config.rolls.length > 0) {\n      // Extract the roll from config\n      const roll = config.rolls[0];\n      \n      // Create damage config data using the roll information\n      const damageConfigData = {\n        event: config.event,\n        situational: config.situational || \"\",\n        attackMode: config.attackMode,\n        subject: activity,\n        // critical: config.critical,\n        // // Use the roll's formula if available\n        // formula: roll.formula,\n        // // Use the roll's parts if available\n        // parts: roll.parts || [],\n        // // Include any roll data\n        // data: roll.data || {},\n        // // Include roll options\n        // options: roll.options || {}\n      };\n      \n      LogUtil.log(\"useDamage - Using roll from config\", [damageConfigData]);\n      \n      const damageParts = activity?.damage?.parts || activity?.rolls?.[0]?.parts || [];\n      const diceTypes = damageParts.map(part => 'd' + part.denomination);\n      const areDiceConfigured = RequestsUtil.areDiceConfigured(diceTypes, game.user.id);\n      dialog.configure = !areDiceConfigured;\n      LogUtil.log(\"useDamage #2\", [damageConfigData, dialog]);\n      ActivityUtil.rollDamage({ config: damageConfigData, attackMode: damageConfigData.attackMode });\n      // activity.rollDamage(damageConfigData, dialog, {create: true});\n      return;\n    }\n    \n    // Fallback to direct roll if no config.rolls is available\n    LogUtil.log(\"useDamage - No rolls in config, using direct roll\");\n    activity.rollDamage();\n\n    // // Add configuration data to buttons for later pickup\n    // const damageConfigData = activity.getDamageConfig({\n    //   event: config.event,\n    //   situational: config.situational || \"\",\n    //   rolls: activity?.rolls || []\n    //   // critical: config.critical || dialog.critical ||undefined\n    // });\n\n    // const damageParts = activity?.damage?.parts || activity?.rolls?.[0]?.parts || [];\n    // const diceTypes = damageParts.map(part => 'd' + part.denomination);\n    // const areDiceConfigured = RequestsUtil.areDiceConfigured(diceTypes, game.user.id);\n    // // dialog.configure = !areDiceConfigured;\n\n    // LogUtil.log(\"useDamage #2\", [damageConfigData, data]);\n    // activity.rollDamage();\n    // //damageConfigData, {configure: !areDiceConfigured}, {create: true});\n    // // activity.use(damageConfigData, dialog, {create: true});\n  }\n\n  static rollModifiedAttack(event, target, message){\n    LogUtil.log(\"rollModifiedAttack\", [event, target, message, this]);\n    const { activity } = ActivityUtil.getDataFromUuid(target.dataset.activityUuid);\n    \n    // Call the original rollAttack method with our custom configuration\n    activity.rollAttack({ \n      event: event,\n      advantage: target.dataset.advantage === \"true\",\n      disadvantage: target.dataset.disadvantage === \"true\",\n      attackMode: target.dataset.attackMode,\n      ammunition: target.dataset.ammunition,\n      situational: target.dataset.situational\n    }, {}, message);\n  }\n\n  // static rollModifiedDamage(event, target, message){\n  //   LogUtil.log(\"rollModifiedDamage\", [event, target, message]);\n  //   const { activity } = ActivityUtil.getDataFromUuid(target.dataset.activityUuid);\n  //   activity.rollDamage({\n  //     event: event,\n  //     situational: target.dataset.situational\n  //   }, {}, message);\n  // }\n\n  /**\n   * Handle rendering of chat messages\n   * This is called each time a chat message is rendered\n   * @param {ChatMessage} message - The ChatMessage being rendered\n   * @param {HTMLElement} html - The HTML element being rendered\n   * @param {Object} data - The data object used to render the message\n   * @private\n   */\n  static #onRenderChatMessage(message, html, data) {\n    // Check if this is one of our modified activity messages\n    const flags = message.flags?.[MODULE_ID] || data.message?.flags?.[MODULE_ID];\n    LogUtil.log(\"#onRenderChatMessage\", [message, html, data, flags]);\n    if (!flags?.modifiedActions) return;\n\n    // Get the activity from the UUID\n    const activityUuid = flags.activityUuid;\n    if (!activityUuid) return;\n    const { activity } = ActivityUtil.getDataFromUuid(activityUuid);\n\n    if (activity) {\n      LogUtil.log(\"#onRenderChatMessage Activating button listeners\", [activity, message, html]);\n      // Call the activateChatListeners method to attach the event listener\n      // This will make the system use our custom functions when buttons are clicked\n      activity.activateChatListeners(message, html[0]);\n    }\n  }\n\n  static getDataFromUuid(activityUuid){\n    const activityData = activityUuid.split(\".\");\n    const actor = game.actors.get(activityData[1]);\n    const item = actor?.items.get(activityData[3]);\n    const activity = item?.system?.activities?.get(activityData[5]) || item?.activities?.get(activityData[5]);\n    \n    return { actor, item, activity };\n  }\n\n\n  /**\n   * Perform a damage roll.\n   * @param {Event} event  The click event triggering the action.\n   * @returns {Promise<void>}\n   */\n  static rollDamage = async(data) => {\n    let { activity, attackMode, config, formulas, damageTypes, rollType, scaling } = data;\n\n\n    formulas = formulas?.split(\"&\") ?? [];\n    damageTypes = damageTypes?.split(\"&\") ?? [];\n\n    const rollConfig = {\n      ...config,\n      attackMode,\n      hookNames: [\"damage\"],\n      rolls: formulas.map((formula, idx) => {\n        const types = damageTypes[idx]?.split(\"|\") ?? [];\n        return {\n          parts: [formula],\n          options: { type: types[0], types }\n        };\n      })\n    };\n\n    const messageConfig = {\n      create: true,\n      data: {\n        flags: {\n          dnd5e: {\n            messageType: \"roll\",\n            roll: { type: rollType },\n            targets: GeneralUtil.getTargetDescriptors()\n          }\n        },\n        flavor: game.i18n.localize(`DND5E.${rollType === \"healing\" ? \"Healing\" : \"Damage\"}Roll`),\n        speaker: ChatMessage.implementation.getSpeaker()\n      }\n    };\n\n    const rolls = await CONFIG.Dice.DamageRoll.build(rollConfig, {}, messageConfig);\n    if ( !rolls?.length ) return;\n    Hooks.callAll(\"dnd5e.rollDamageV2\", rolls);\n  }\n}\n","/* -------------------------------------------- */\n/*  Formatters                                  */\n/* -------------------------------------------- */\n\n/**\n * Format a Challenge Rating using the proper fractional symbols.\n * @param {number} value                   CR value to format.\n * @param {object} [options={}]\n * @param {boolean} [options.narrow=true]  Use narrow fractions (e.g. ⅛) rather than wide ones (e.g. 1/8).\n * @returns {string}\n */\nexport function formatCR(value, { narrow=true }={}) {\n  if ( value === null ) return \"—\";\n  const fractions = narrow ? { 0.125: \"⅛\", 0.25: \"¼\", 0.5: \"½\" } : { 0.125: \"1/8\", 0.25: \"1/4\", 0.5: \"1/2\" };\n  return fractions[value] ?? formatNumber(value);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Form a number using the provided length unit.\n * @param {number} value         The length to format.\n * @param {string} unit          Length unit as defined in `CONFIG.DND5E.movementUnits`.\n * @param {object} [options={}]  Formatting options passed to `formatNumber`.\n * @returns {string}\n */\nexport function formatLength(value, unit, options={}) {\n  return _formatSystemUnits(value, unit, CONFIG.DND5E.movementUnits[unit], options);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Format a modifier for display with its sign separate.\n * @param {number} mod  The modifier.\n * @returns {Handlebars.SafeString}\n */\nexport function formatModifier(mod) {\n  if ( !Number.isFinite(mod) ) return new Handlebars.SafeString(\"—\");\n  return new Handlebars.SafeString(`<span class=\"sign\">${mod < 0 ? \"-\" : \"+\"}</span>${Math.abs(mod)}`);\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper for using Intl.NumberFormat within handlebars.\n * @param {number} value    The value to format.\n * @param {object} options  Options forwarded to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat}\n * @param {boolean} [options.numerals]  Format the number as roman numerals.\n * @param {boolean} [options.ordinal]   Use ordinal formatting.\n * @param {boolean} [options.words]     Write out number as full word, if possible.\n * @returns {string}\n */\nexport function formatNumber(value, { numerals, ordinal, words, ...options }={}) {\n  if ( words && game.i18n.has(`DND5E.NUMBER.${value}`, false) ) return game.i18n.localize(`DND5E.NUMBER.${value}`);\n  if ( numerals ) return _formatNumberAsNumerals(value);\n  if ( ordinal ) return _formatNumberAsOrdinal(value, options);\n  const formatter = new Intl.NumberFormat(game.i18n.lang, options);\n  return formatter.format(value);\n}\n\n/**\n * Roman numerals.\n * @type {Record<string, number>}\n */\nconst _roman = {\n  M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1\n};\n\n/**\n * Format a number as roman numerals.\n * @param {number} n  The number to format.\n * @returns {string}\n */\nfunction _formatNumberAsNumerals(n) {\n  let out = \"\";\n  if ( (n < 1) || !Number.isInteger(n) ) return out;\n  for ( const [numeral, decimal] of Object.entries(_roman) ) {\n    const quotient = Math.floor(n / decimal);\n    n -= quotient * decimal;\n    out += numeral.repeat(quotient);\n  }\n  return out;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Format a number using an ordinal format.\n * @param {number} n        The number to format.\n * @param {object} options  Options forwarded to `formatNumber`.\n * @returns {string}\n */\nfunction _formatNumberAsOrdinal(n, options={}) {\n  const pr = getPluralRules({ type: \"ordinal\" }).select(n);\n  const number = formatNumber(n, options);\n  return game.i18n.has(`DND5E.ORDINAL.${pr}`) ? game.i18n.format(`DND5E.ORDINAL.${pr}`, { number }) : number;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Produce a number with the parts wrapped in their own spans.\n * @param {number} value      A number for format.\n * @param {object} [options]  Formatting options.\n * @returns {string}\n */\nexport function formatNumberParts(value, options) {\n  if ( options.numerals ) throw new Error(\"Cannot segment numbers when formatted as numerals.\");\n  return new Intl.NumberFormat(game.i18n.lang, options).formatToParts(value)\n    .reduce((str, { type, value }) => `${str}<span class=\"${type}\">${value}</span>`, \"\");\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper for using Intl.NumberFormat within handlebars for format a range.\n * @param {number} min      The lower end of the range.\n * @param {number} max      The upper end of the range.\n * @param {object} options  Options forwarded to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat}\n * @returns {string}\n */\nexport function formatRange(min, max, options) {\n  const formatter = new Intl.NumberFormat(game.i18n.lang, options);\n  return formatter.formatRange(min, max);\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper function to format textarea text to HTML with linebreaks.\n * @param {string} value  The text to format.\n * @returns {Handlebars.SafeString}\n */\nexport function formatText(value) {\n  return new Handlebars.SafeString(value?.replaceAll(\"\\n\", \"<br>\") ?? \"\");\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper function that formats a time in a human-readable format.\n * @param {number} value         Time to display.\n * @param {string} unit          Units as defined in `CONFIG.DND5E.timeUnits`.\n * @param {object} [options={}]  Formatting options passed to `formatNumber`.\n * @returns {string}\n */\nexport function formatTime(value, unit, options={}) {\n  options.maximumFractionDigits ??= 0;\n  options.unitDisplay ??= \"long\";\n  const config = CONFIG.DND5E.timeUnits[unit];\n  if ( config?.counted ) {\n    if ( (options.unitDisplay === \"narrow\") && game.i18n.has(`${config.counted}.narrow`) ) {\n      return game.i18n.format(`${config.counted}.narrow`, { number: formatNumber(value, options) });\n    } else {\n      const pr = new Intl.PluralRules(game.i18n.lang);\n      return game.i18n.format(`${config.counted}.${pr.select(value)}`, { number: formatNumber(value, options) });\n    }\n  }\n  try {\n    return formatNumber(value, { ...options, style: \"unit\", unit });\n  } catch(err) {\n    return formatNumber(value, options);\n  }\n}\n\n/* -------------------------------------------- */\n\n/**\n * Form a number using the provided volume unit.\n * @param {number} value         The volume to format.\n * @param {string} unit          Volume unit as defined in `CONFIG.DND5E.volumeUnits`.\n * @param {object} [options={}]  Formatting options passed to `formatNumber`.\n * @returns {string}\n */\nexport function formatVolume(value, unit, options={}) {\n  return _formatSystemUnits(value, unit, CONFIG.DND5E.volumeUnits[unit], options);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Form a number using the provided weight unit.\n * @param {number} value         The weight to format.\n * @param {string} unit          Weight unit as defined in `CONFIG.DND5E.weightUnits`.\n * @param {object} [options={}]  Formatting options passed to `formatNumber`.\n * @returns {string}\n */\nexport function formatWeight(value, unit, options={}) {\n  return _formatSystemUnits(value, unit, CONFIG.DND5E.weightUnits[unit], options);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Format a number using one of core's built-in unit types.\n * @param {number} value                   Value to display.\n * @param {string} unit                    Name of the unit to use.\n * @param {UnitConfiguration} config       Configuration data for the unit.\n * @param {object} [options={}]            Formatting options passed to `formatNumber`.\n * @param {boolean} [options.parts=false]  Format to parts.\n * @returns {string}\n */\nfunction _formatSystemUnits(value, unit, config, { parts=false, ...options }={}) {\n  options.unitDisplay ??= \"short\";\n  if ( config?.counted ) {\n    const localizationKey = `${config.counted}.${options.unitDisplay}.${getPluralRules().select(value)}`;\n    return game.i18n.format(localizationKey, { number: formatNumber(value, options) });\n  }\n  unit = config?.formattingUnit ?? unit;\n  if ( isValidUnit(unit) ) {\n    options.style ??= \"unit\";\n    options.unit ??= unit;\n  }\n  return (parts ? formatNumberParts : formatNumber)(value, options);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Cached store of Intl.PluralRules instances.\n * @type {Record<string, Intl.PluralRules>}\n */\nconst _pluralRules = {};\n\n/**\n * Get a PluralRules object, fetching from cache if possible.\n * @param {object} [options={}]\n * @param {string} [options.type=cardinal]\n * @returns {Intl.PluralRules}\n */\nexport function getPluralRules({ type=\"cardinal\" }={}) {\n  _pluralRules[type] ??= new Intl.PluralRules(game.i18n.lang, { type });\n  return _pluralRules[type];\n}\n\n/* -------------------------------------------- */\n/*  Formulas                                    */\n/* -------------------------------------------- */\n\n/**\n * Return whether a string is a valid reroll, explosion, min, or max dice modifier.\n * @param {string} mod      The modifier to test.\n * @returns {boolean}\n */\nexport function isValidDieModifier(mod) {\n  const regex = {\n    reroll: /rr?([0-9]+)?([<>=]+)?([0-9]+)?/i,\n    explode: /xo?([0-9]+)?([<>=]+)?([0-9]+)?/i,\n    minimum: /(?:min)([0-9]+)/i,\n    maximum: /(?:max)([0-9]+)/i,\n    dropKeep: /[dk]([hl])?([0-9]+)?/i,\n    count: /(?:c[sf])([<>=]+)?([0-9]+)?/i\n  };\n  return Object.values(regex).some(rgx => rgx.test(mod));\n}\n\n/* -------------------------------------------- */\n\n/**\n * Handle a delta input for a number value from a form.\n * @param {HTMLInputElement} input  Input that contains the modified value.\n * @param {Document} target         Target document to be updated.\n * @returns {number|void}\n */\nexport function parseInputDelta(input, target) {\n  let value = input.value;\n  if ( [\"+\", \"-\"].includes(value[0]) ) {\n    const delta = parseFloat(value);\n    value = Number(foundry.utils.getProperty(target, input.dataset.name ?? input.name)) + delta;\n  }\n  else if ( value[0] === \"=\" ) value = Number(value.slice(1));\n  if ( Number.isNaN(value) ) return;\n  input.value = value;\n  return value;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Prepare the final formula value for a model field.\n * @param {ItemDataModel|BaseActivityData} model  Model for which the value is being prepared.\n * @param {string} keyPath                        Path to the field within the model.\n * @param {string} label                          Label to use in preparation warnings.\n * @param {object} rollData                       Roll data to use when replacing formula values.\n */\nexport function prepareFormulaValue(model, keyPath, label, rollData) {\n  const value = foundry.utils.getProperty(model, keyPath);\n  if ( !value ) return;\n  const item = model.item ?? model.parent;\n  const property = game.i18n.localize(label);\n  try {\n    const formula = replaceFormulaData(value, rollData, { item, property });\n    const roll = new Roll(formula);\n    foundry.utils.setProperty(model, keyPath, roll.evaluateSync().total);\n  } catch(err) {\n    if ( item.isEmbedded ) {\n      const message = game.i18n.format(\"DND5E.FormulaMalformedError\", { property, name: model.name ?? item.name });\n      item.actor._preparationWarnings.push({ message, link: item.uuid, type: \"error\" });\n      console.error(message, err);\n    }\n  }\n}\n\n/* -------------------------------------------- */\n\n/**\n * Replace referenced data attributes in the roll formula with values from the provided data.\n * If the attribute is not found in the provided data, display a warning on the actor.\n * @param {string} formula           The original formula within which to replace.\n * @param {object} data              The data object which provides replacements.\n * @param {object} [options={}]\n * @param {Actor5e} [options.actor]            Actor for which the value is being prepared.\n * @param {Item5e} [options.item]              Item for which the value is being prepared.\n * @param {string|null} [options.missing=\"0\"]  Value to use when replacing missing references, or `null` to not replace.\n * @param {string} [options.property]          Name of the property to which this formula belongs.\n * @returns {string}                 Formula with replaced data.\n */\nexport function replaceFormulaData(formula, data, { actor, item, missing=\"0\", property }={}) {\n  const dataRgx = new RegExp(/@([a-z.0-9_-]+)/gi);\n  const missingReferences = new Set();\n  formula = String(formula).replace(dataRgx, (match, term) => {\n    let value = foundry.utils.getProperty(data, term);\n    if ( value == null ) {\n      missingReferences.add(match);\n      return missing ?? match[0];\n    }\n    return String(value).trim();\n  });\n  actor ??= item?.parent;\n  if ( (missingReferences.size > 0) && actor && property ) {\n    const listFormatter = new Intl.ListFormat(game.i18n.lang, { style: \"long\", type: \"conjunction\" });\n    const message = game.i18n.format(\"DND5E.FormulaMissingReferenceWarn\", {\n      property, name: item?.name ?? actor.name, references: listFormatter.format(missingReferences)\n    });\n    actor._preparationWarnings.push({ message, link: item?.uuid ?? actor.uuid, type: \"warning\" });\n  }\n  return formula;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Convert a bonus value to a simple integer for displaying on the sheet.\n * @param {number|string|null} bonus  Bonus formula.\n * @param {object} [data={}]          Data to use for replacing @ strings.\n * @returns {number}                  Simplified bonus as an integer.\n * @protected\n */\nexport function simplifyBonus(bonus, data={}) {\n  if ( !bonus ) return 0;\n  if ( Number.isNumeric(bonus) ) return Number(bonus);\n  try {\n    const roll = new Roll(bonus, data);\n    return roll.isDeterministic ? roll.evaluateSync().total : 0;\n  } catch(error) {\n    console.error(error);\n    return 0;\n  }\n}\n\n/* -------------------------------------------- */\n/*  IDs                                         */\n/* -------------------------------------------- */\n\n/**\n * Create an ID from the input truncating or padding the value to make it reach 16 characters.\n * @param {string} id\n * @returns {string}\n */\nexport function staticID(id) {\n  if ( id.length >= 16 ) return id.substring(0, 16);\n  return id.padEnd(16, \"0\");\n}\n\n/* -------------------------------------------- */\n/*  Keybindings Helper                          */\n/* -------------------------------------------- */\n\nconst { MODIFIER_CODES: CODES, MODIFIER_KEYS } = (foundry.helpers?.interaction?.KeyboardManager ?? KeyboardManager);\n\n/**\n * Track which KeyboardEvent#code presses associate with each modifier.\n * Added support for treating Meta separate from Control.\n * @enum {string[]}\n */\nconst MODIFIER_CODES = {\n  Alt: CODES.Alt,\n  Control: CODES.Control.filter(k => k.startsWith(\"Control\")),\n  Meta: CODES.Control.filter(k => !k.startsWith(\"Control\")),\n  Shift: CODES.Shift\n};\n\n/**\n * Based on the provided event, determine if the keys are pressed to fulfill the specified keybinding.\n * @param {Event} event    Triggering event.\n * @param {string} action  Keybinding action within the `dnd5e` namespace.\n * @returns {boolean}      Is the keybinding triggered?\n */\nexport function areKeysPressed(event, action) {\n  if ( !event ) return false;\n  const activeModifiers = {};\n  const addModifiers = (key, pressed) => {\n    activeModifiers[key] = pressed;\n    MODIFIER_CODES[key].forEach(n => activeModifiers[n] = pressed);\n  };\n  addModifiers(MODIFIER_KEYS.ALT, event.altKey);\n  addModifiers(MODIFIER_KEYS.CONTROL, event.ctrlKey);\n  addModifiers(\"Meta\", event.metaKey);\n  addModifiers(MODIFIER_KEYS.SHIFT, event.shiftKey);\n  return game.keybindings.get(\"dnd5e\", action).some(b => {\n    if ( game.keyboard.downKeys.has(b.key) && b.modifiers.every(m => activeModifiers[m]) ) return true;\n    if ( b.modifiers.length ) return false;\n    return activeModifiers[b.key];\n  });\n}\n\n/* -------------------------------------------- */\n/*  Logging                                     */\n/* -------------------------------------------- */\n\n/**\n * Log a console message with the \"D&D 5e\" prefix and styling.\n * @param {string} message                    Message to display.\n * @param {object} [options={}]\n * @param {string} [options.color=\"#6e0000\"]  Color to use for the log.\n * @param {any[]} [options.extras=[]]         Extra options passed to the logging method.\n * @param {string} [options.level=\"log\"]      Console logging method to call.\n */\nexport function log(message, { color=\"#6e0000\", extras=[], level=\"log\" }={}) {\n  console[level](\n    `%cD&D 5e | %c${message}`, `color: ${color}; font-variant: small-caps`, \"color: revert\", ...extras\n  );\n}\n\n/* -------------------------------------------- */\n/*  Object Helpers                              */\n/* -------------------------------------------- */\n\n/**\n * Transform an object, returning only the keys which match the provided filter.\n * @param {object} obj         Object to transform.\n * @param {Function} [filter]  Filtering function. If none is provided, it will just check for truthiness.\n * @returns {string[]}         Array of filtered keys.\n */\nexport function filteredKeys(obj, filter) {\n  filter ??= e => e;\n  return Object.entries(obj).filter(e => filter(e[1])).map(e => e[0]);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Check whether an object exists without transversing any getters, preventing any deprecation warnings from triggering.\n * @param {object} object\n * @param {string} keyPath\n * @returns {boolean}\n */\nexport function safePropertyExists(object, keyPath) {\n  const parts = keyPath.split(\".\");\n  for ( const part of parts ) {\n    const descriptor = Object.getOwnPropertyDescriptor(object, part);\n    if ( !descriptor || !(\"value\" in descriptor) ) return false;\n    object = object[part];\n  }\n  return true;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Sort the provided object by its values or by an inner sortKey.\n * @param {object} obj                 The object to sort.\n * @param {string|Function} [sortKey]  An inner key upon which to sort or sorting function.\n * @returns {object}                   A copy of the original object that has been sorted.\n */\nexport function sortObjectEntries(obj, sortKey) {\n  let sorted = Object.entries(obj);\n  const sort = (lhs, rhs) => foundry.utils.getType(lhs) === \"string\" ? lhs.localeCompare(rhs, game.i18n.lang) : lhs - rhs;\n  if ( foundry.utils.getType(sortKey) === \"function\" ) sorted = sorted.sort((lhs, rhs) => sortKey(lhs[1], rhs[1]));\n  else if ( sortKey ) sorted = sorted.sort((lhs, rhs) => sort(lhs[1][sortKey], rhs[1][sortKey]));\n  else sorted = sorted.sort((lhs, rhs) => sort(lhs[1], rhs[1]));\n  return Object.fromEntries(sorted);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Retrieve the indexed data for a Document using its UUID. Will never return a result for embedded documents.\n * @param {string} uuid  The UUID of the Document index to retrieve.\n * @returns {object}     Document's index if one could be found.\n */\nexport function indexFromUuid(uuid) {\n  const parts = uuid.split(\".\");\n  let index;\n\n  // Compendium Documents\n  if ( parts[0] === \"Compendium\" ) {\n    const [, scope, packName, id] = parts;\n    const pack = game.packs.get(`${scope}.${packName}`);\n    index = pack?.index.get(id);\n  }\n\n  // World Documents\n  else if ( parts.length < 3 ) {\n    const [docName, id] = parts;\n    const collection = CONFIG[docName].collection.instance;\n    index = collection.get(id);\n  }\n\n  return index || null;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Creates an HTML document link for the provided UUID.\n * Try to build links to compendium content synchronously to avoid DB lookups.\n * @param {string} uuid                    UUID for which to produce the link.\n * @param {object} [options]\n * @param {string} [options.tooltip]       Tooltip to add to the link.\n * @param {string} [options.renderBroken]  If a UUID cannot found, render it as a broken link instead of returning the\n *                                         empty string.\n * @returns {string}                       Link to the item or empty string if item wasn't found.\n */\nexport function linkForUuid(uuid, { tooltip, renderBroken }={}) {\n  let doc = fromUuidSync(uuid);\n  if ( !doc ) {\n    if ( renderBroken ) return `\n      <a class=\"content-link broken\" data-uuid=\"${uuid}\">\n        <i class=\"fas fa-unlink\"></i> ${game.i18n.localize(\"Unknown\")}\n      </a>\n    `;\n    return \"\";\n  }\n  if ( uuid.startsWith(\"Compendium.\") && !(doc instanceof foundry.abstract.Document) ) {\n    const {collection} = foundry.utils.parseUuid(uuid);\n    const cls = collection.documentClass;\n    // Minimal \"shell\" of a document using index data\n    doc = new cls(foundry.utils.deepClone(doc), {pack: collection.metadata.id});\n  }\n  const a = doc.toAnchor();\n  if ( tooltip ) a.dataset.tooltip = tooltip;\n  return a.outerHTML;\n}\n\n/* -------------------------------------------- */\n/*  Targeting                                   */\n/* -------------------------------------------- */\n\n/**\n * Important information on a targeted token.\n *\n * @typedef {object} TargetDescriptor5e\n * @property {string} uuid  The UUID of the target.\n * @property {string} img   The target's image.\n * @property {string} name  The target's name.\n * @property {number} ac    The target's armor class, if applicable.\n */\n\n/**\n * Grab the targeted tokens and return relevant information on them.\n * @returns {TargetDescriptor[]}\n */\nexport function getTargetDescriptors() {\n  const targets = new Map();\n  for ( const token of game.user.targets ) {\n    const { name } = token;\n    const { img, system, uuid, statuses } = token.actor ?? {};\n    if ( uuid ) {\n      const ac = statuses.has(\"coverTotal\") ? null : system.attributes?.ac?.value;\n      targets.set(uuid, { name, img, uuid, ac: ac ?? null });\n    }\n  }\n  return Array.from(targets.values());\n}\n\n/* -------------------------------------------- */\n\n/**\n * Get currently selected tokens in the scene or user's character's tokens.\n * @returns {Token5e[]}\n */\nexport function getSceneTargets() {\n  let targets = canvas.tokens?.controlled.filter(t => t.actor) ?? [];\n  if ( !targets.length && game.user.character ) targets = game.user.character.getActiveTokens();\n  return targets;\n}\n\n/* -------------------------------------------- */\n/*  Conversions                                 */\n/* -------------------------------------------- */\n\n/**\n * Convert the provided length to another unit.\n * @param {number} value                   The length being converted.\n * @param {string} from                    The initial units.\n * @param {string} to                      The final units.\n * @param {object} [options={}]\n * @param {boolean} [options.strict=true]  Throw an error if either unit isn't found.\n * @returns {number}\n */\nexport function convertLength(value, from, to, { strict=true }={}) {\n  const message = unit => `Length unit ${unit} not defined in CONFIG.DND5E.movementUnits`;\n  return _convertSystemUnits(value, from, to, CONFIG.DND5E.movementUnits, { message, strict });\n}\n\n/* -------------------------------------------- */\n\n/**\n * Convert the provided time value to another unit. If no final unit is provided, then will convert it to the largest\n * unit that can still represent the value as a whole number.\n * @param {number} value                    The time being converted.\n * @param {string} from                     The initial unit as defined in `CONFIG.DND5E.timeUnits`.\n * @param {object} [options={}]\n * @param {boolean} [options.combat=false]  Use combat units when auto-selecting units, rather than normal units.\n * @param {boolean} [options.strict=true]   Throw an error if from unit isn't found.\n * @param {string} [options.to]             The final units, if explicitly provided.\n * @returns {{ value: number, unit: string }}\n */\nexport function convertTime(value, from, { combat=false, strict=true, to }={}) {\n  const base = value * (CONFIG.DND5E.timeUnits[from]?.conversion ?? 1);\n  if ( !to ) {\n    // Find unit with largest conversion value that can still display the value\n    const unitOptions = Object.entries(CONFIG.DND5E.timeUnits)\n      .reduce((arr, [key, v]) => {\n        if ( ((v.combat ?? false) === combat) && ((base % v.conversion === 0) || (base >= v.conversion * 2)) ) {\n          arr.push({ key, conversion: v.conversion });\n        }\n        return arr;\n      }, [])\n      .sort((lhs, rhs) => rhs.conversion - lhs.conversion);\n    to = unitOptions[0]?.key ?? from;\n  }\n\n  const message = unit => `Time unit ${unit} not defined in CONFIG.DND5E.timeUnits`;\n  return { value: _convertSystemUnits(value, from, to, CONFIG.DND5E.timeUnits, { message, strict }), unit: to };\n}\n\n/* -------------------------------------------- */\n\n/**\n * Convert the provided weight to another unit.\n * @param {number} value                   The weight being converted.\n * @param {string} from                    The initial unit as defined in `CONFIG.DND5E.weightUnits`.\n * @param {string} to                      The final units.\n * @param {object} [options={}]\n * @param {boolean} [options.strict=true]  Throw an error if either unit isn't found.\n * @returns {number}      Weight in the specified units.\n */\nexport function convertWeight(value, from, to, { strict=true }={}) {\n  const message = unit => `Weight unit ${unit} not defined in CONFIG.DND5E.weightUnits`;\n  return _convertSystemUnits(value, from, to, CONFIG.DND5E.weightUnits, { message, strict });\n}\n\n/* -------------------------------------------- */\n\n/**\n * Convert from one unit to another using one of core's built-in unit types.\n * @param {number} value                                Value to display.\n * @param {string} from                                 The initial unit.\n * @param {string} to                                   The final unit.\n * @param {UnitConfiguration} config                    Configuration data for the unit.\n * @param {object} options\n * @param {function(string): string} [options.message]  Method used to produce the error message if unit not found.\n * @param {boolean} [options.strict]                    Throw an error if either unit isn't found.\n * @returns {string}\n */\nfunction _convertSystemUnits(value, from, to, config, { message, strict }) {\n  if ( from === to ) return value;\n  if ( strict && !config[from] ) throw new Error(message(from));\n  if ( strict && !config[to] ) throw new Error(message(to));\n  return value * (config[from]?.conversion ?? 1) / (config[to]?.conversion ?? 1);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Default units to use depending on system setting.\n * @param {\"length\"|\"weight\"} type  Type of units to select.\n * @returns {string}\n */\nexport function defaultUnits(type) {\n  return CONFIG.DND5E.defaultUnits[type]?.[\n    game.settings.get(\"dnd5e\", `metric${type.capitalize()}Units`) ? \"metric\" : \"imperial\"\n  ];\n}\n\n/* -------------------------------------------- */\n/*  Validators                                  */\n/* -------------------------------------------- */\n\n/**\n * Ensure the provided string contains only the characters allowed in identifiers.\n * @param {string} identifier\n * @returns {boolean}\n */\nfunction isValidIdentifier(identifier) {\n  return /^([a-z0-9_-]+)$/i.test(identifier);\n}\n\nexport const validators = {\n  isValidIdentifier: isValidIdentifier\n};\n\n/* -------------------------------------------- */\n\n/**\n * Determine whether the provided unit is usable within `Intl.NumberFormat`.\n * @param {string} unit\n * @returns {boolean}\n */\nexport function isValidUnit(unit) {\n  if ( unit?.includes(\"-per-\") ) return unit.split(\"-per-\").every(u => isValidUnit(u));\n  return Intl.supportedValuesOf(\"unit\").includes(unit);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Test if a given string is serialized JSON, and parse it if so.\n * @param {string} raw  The raw value.\n * @returns {any}       The parsed value, or the original value if it was not serialized JSON.\n */\nexport function parseOrString(raw) {\n  try { return JSON.parse(raw); } catch {}\n  return raw;\n}\n\n/* -------------------------------------------- */\n/*  Handlebars Template Helpers                 */\n/* -------------------------------------------- */\n\n/**\n * Define a set of template paths to pre-load. Pre-loaded templates are compiled and cached for fast access when\n * rendering. These paths will also be available as Handlebars partials by using the file name\n * (e.g. \"dnd5e.actor-traits\").\n * @returns {Promise}\n */\nexport async function preloadHandlebarsTemplates() {\n  const partials = [\n    // Shared Partials\n    \"systems/dnd5e/templates/shared/active-effects.hbs\",\n    \"systems/dnd5e/templates/shared/active-effects2.hbs\",\n    \"systems/dnd5e/templates/shared/inventory.hbs\",\n    \"systems/dnd5e/templates/shared/inventory2.hbs\",\n    \"systems/dnd5e/templates/apps/parts/trait-list.hbs\",\n    \"systems/dnd5e/templates/apps/parts/traits-list.hbs\",\n\n    // Actor Sheet Partials\n    \"systems/dnd5e/templates/actors/parts/actor-classes.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-trait-pills.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-traits.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-features.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-inventory.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-spellbook.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-warnings.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-warnings-dialog.hbs\",\n    \"systems/dnd5e/templates/actors/parts/biography-textbox.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/character-bastion.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/character-biography.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/character-details.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/creature-features.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/creature-special-traits.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/creature-spells.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/group-members.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/npc-biography.hbs\",\n\n    // Actor Sheet Item Summary Columns\n    \"systems/dnd5e/templates/actors/parts/columns/column-feature-controls.hbs\",\n    \"systems/dnd5e/templates/actors/parts/columns/column-formula.hbs\",\n    \"systems/dnd5e/templates/actors/parts/columns/column-recovery.hbs\",\n    \"systems/dnd5e/templates/actors/parts/columns/column-roll.hbs\",\n    \"systems/dnd5e/templates/actors/parts/columns/column-uses.hbs\",\n\n    // Chat Message Partials\n    \"systems/dnd5e/templates/chat/parts/card-activities.hbs\",\n    \"systems/dnd5e/templates/chat/parts/card-deltas.hbs\",\n\n    // Item Sheet Partials\n    \"systems/dnd5e/templates/items/details/details-background.hbs\",\n    \"systems/dnd5e/templates/items/details/details-class.hbs\",\n    \"systems/dnd5e/templates/items/details/details-consumable.hbs\",\n    \"systems/dnd5e/templates/items/details/details-container.hbs\",\n    \"systems/dnd5e/templates/items/details/details-equipment.hbs\",\n    \"systems/dnd5e/templates/items/details/details-facility.hbs\",\n    \"systems/dnd5e/templates/items/details/details-feat.hbs\",\n    \"systems/dnd5e/templates/items/details/details-loot.hbs\",\n    \"systems/dnd5e/templates/items/details/details-mountable.hbs\",\n    \"systems/dnd5e/templates/items/details/details-species.hbs\",\n    \"systems/dnd5e/templates/items/details/details-spell.hbs\",\n    \"systems/dnd5e/templates/items/details/details-spellcasting.hbs\",\n    \"systems/dnd5e/templates/items/details/details-starting-equipment.hbs\",\n    \"systems/dnd5e/templates/items/details/details-subclass.hbs\",\n    \"systems/dnd5e/templates/items/details/details-tool.hbs\",\n    \"systems/dnd5e/templates/items/details/details-weapon.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-activities.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-advancement2.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-description2.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-details.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-summary.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-tooltip.hbs\",\n    \"systems/dnd5e/templates/items/parts/spell-block.hbs\",\n\n    // Field Partials\n    \"systems/dnd5e/templates/shared/fields/field-activation.hbs\",\n    \"systems/dnd5e/templates/shared/fields/field-damage.hbs\",\n    \"systems/dnd5e/templates/shared/fields/field-duration.hbs\",\n    \"systems/dnd5e/templates/shared/fields/field-range.hbs\",\n    \"systems/dnd5e/templates/shared/fields/field-targets.hbs\",\n    \"systems/dnd5e/templates/shared/fields/field-uses.hbs\",\n    \"systems/dnd5e/templates/shared/fields/fieldlist.hbs\",\n\n    // Journal Partials\n    \"systems/dnd5e/templates/journal/parts/journal-legacy-traits.hbs\",\n    \"systems/dnd5e/templates/journal/parts/journal-modern-traits.hbs\",\n    \"systems/dnd5e/templates/journal/parts/journal-table.hbs\",\n\n    // Activity Partials\n    \"systems/dnd5e/templates/activity/columns/activity-column-controls.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-formula.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-price.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-quantity.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-range.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-recovery.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-roll.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-school.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-target.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-time.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-uses.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-weight.hbs\",\n    \"systems/dnd5e/templates/activity/activity-row-summary.hbs\",\n    \"systems/dnd5e/templates/activity/parts/activity-usage-notes.hbs\",\n\n    // Advancement Partials\n    \"systems/dnd5e/templates/advancement/parts/advancement-ability-score-control.hbs\",\n    \"systems/dnd5e/templates/advancement/parts/advancement-controls.hbs\",\n    \"systems/dnd5e/templates/advancement/parts/advancement-spell-config.hbs\"\n  ];\n\n  const paths = {};\n  for ( const path of partials ) {\n    paths[path.replace(\".hbs\", \".html\")] = path;\n    paths[`dnd5e.${path.split(\"/\").pop().replace(\".hbs\", \"\")}`] = path;\n  }\n\n  return loadTemplates(paths);\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper that converts the provided object into a series of `data-` entries.\n * @param {object} object   Object to convert into dataset entries.\n * @param {object} options  Handlebars options.\n * @returns {string}\n */\nfunction dataset(object, options) {\n  const entries = [];\n  for ( let [key, value] of Object.entries(object ?? {}) ) {\n    if ( value === undefined ) continue;\n    key = key.replace(/[A-Z]+(?![a-z])|[A-Z]/g, (a, b) => (b ? \"-\" : \"\") + a.toLowerCase());\n    entries.push(`data-${key}=\"${value}\"`);\n  }\n  return new Handlebars.SafeString(entries.join(\" \"));\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper to create a set of <option> elements in a <select> block grouped together\n * in <optgroup> based on the provided categories.\n *\n * @param {SelectChoices} choices          Choices to format.\n * @param {object} [options]\n * @param {boolean} [options.localize]     Should the label be localized?\n * @param {string} [options.blank]         Name for the empty option, if one should be added.\n * @param {string} [options.labelAttr]     Attribute pointing to label string.\n * @param {string} [options.chosenAttr]    Attribute pointing to chosen boolean.\n * @param {string} [options.childrenAttr]  Attribute pointing to array of children.\n * @returns {Handlebars.SafeString}        Formatted option list.\n */\nfunction groupedSelectOptions(choices, options) {\n  const localize = options.hash.localize ?? false;\n  const blank = options.hash.blank ?? null;\n  const labelAttr = options.hash.labelAttr ?? \"label\";\n  const chosenAttr = options.hash.chosenAttr ?? \"chosen\";\n  const childrenAttr = options.hash.childrenAttr ?? \"children\";\n\n  // Create an option\n  const option = (name, label, chosen) => {\n    if ( localize ) label = game.i18n.localize(label);\n    html += `<option value=\"${name}\" ${chosen ? \"selected\" : \"\"}>${label}</option>`;\n  };\n\n  // Create a group\n  const group = category => {\n    let label = category[labelAttr];\n    if ( localize ) game.i18n.localize(label);\n    html += `<optgroup label=\"${label}\">`;\n    children(category[childrenAttr]);\n    html += \"</optgroup>\";\n  };\n\n  // Add children\n  const children = children => {\n    for ( let [name, child] of Object.entries(children) ) {\n      if ( child[childrenAttr] ) group(child);\n      else option(name, child[labelAttr], child[chosenAttr] ?? false);\n    }\n  };\n\n  // Create the options\n  let html = \"\";\n  if ( blank !== null ) option(\"\", blank);\n  children(choices);\n  return new Handlebars.SafeString(html);\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper that fetch the appropriate item context from root and adds it to the first block parameter.\n * @param {object} context  Current evaluation context.\n * @param {object} options  Handlebars options.\n * @returns {string}\n */\nfunction itemContext(context, options) {\n  if ( arguments.length !== 2 ) throw new Error(\"#dnd5e-itemContext requires exactly one argument\");\n  if ( foundry.utils.getType(context) === \"function\" ) context = context.call(this);\n\n  const ctx = options.data.root.itemContext?.[context.id];\n  if ( !ctx ) {\n    const inverse = options.inverse(this);\n    if ( inverse ) return options.inverse(this);\n  }\n\n  return options.fn(context, { data: options.data, blockParams: [ctx] });\n}\n\n/* -------------------------------------------- */\n\n/**\n * Conceal a section and display a notice if unidentified.\n * @param {boolean} conceal  Should the section be concealed?\n * @param {object} options   Handlebars options.\n * @returns {string}\n */\nfunction concealSection(conceal, options) {\n  let content = options.fn(this);\n  if ( !conceal ) return content;\n\n  content = `<div inert>\n    ${content}\n  </div>\n  <div class=\"unidentified-notice\">\n      <div>\n          <strong>${game.i18n.localize(\"DND5E.Unidentified.Title\")}</strong>\n          <p>${game.i18n.localize(\"DND5E.Unidentified.Notice\")}</p>\n      </div>\n  </div>`;\n  return content;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Construct an object from the provided arguments.\n * @param {object} options       Handlebars options.\n * @param {object} options.hash\n * @returns {object}\n */\nfunction makeObject({ hash }) {\n  return hash;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Register custom Handlebars helpers used by 5e.\n */\nexport function registerHandlebarsHelpers() {\n  Handlebars.registerHelper({\n    getProperty: foundry.utils.getProperty,\n    \"dnd5e-concealSection\": concealSection,\n    \"dnd5e-dataset\": dataset,\n    \"dnd5e-formatCR\": formatCR,\n    \"dnd5e-formatModifier\": formatModifier,\n    \"dnd5e-groupedSelectOptions\": groupedSelectOptions,\n    \"dnd5e-itemContext\": itemContext,\n    \"dnd5e-linkForUuid\": (uuid, options) => linkForUuid(uuid, options.hash),\n    \"dnd5e-numberFormat\": (context, options) => formatNumber(context, options.hash),\n    \"dnd5e-numberParts\": (context, options) => formatNumberParts(context, options.hash),\n    \"dnd5e-object\": makeObject,\n    \"dnd5e-textFormat\": formatText\n  });\n}\n\n/* -------------------------------------------- */\n/*  Config Pre-Localization                     */\n/* -------------------------------------------- */\n\n/**\n * Storage for pre-localization configuration.\n * @type {object}\n * @private\n */\nconst _preLocalizationRegistrations = {};\n\n/**\n * Mark the provided config key to be pre-localized during the init stage.\n * @param {string} configKeyPath          Key path within `CONFIG.DND5E` to localize.\n * @param {object} [options={}]\n * @param {string} [options.key]          If each entry in the config enum is an object,\n *                                        localize and sort using this property.\n * @param {string[]} [options.keys=[]]    Array of localization keys. First key listed will be used for sorting\n *                                        if multiple are provided.\n * @param {boolean} [options.sort=false]  Sort this config enum, using the key if set.\n */\nexport function preLocalize(configKeyPath, { key, keys=[], sort=false }={}) {\n  if ( key ) keys.unshift(key);\n  _preLocalizationRegistrations[configKeyPath] = { keys, sort };\n}\n\n/* -------------------------------------------- */\n\n/**\n * Execute previously defined pre-localization tasks on the provided config object.\n * @param {object} config  The `CONFIG.DND5E` object to localize and sort. *Will be mutated.*\n */\nexport function performPreLocalization(config) {\n  for ( const [keyPath, settings] of Object.entries(_preLocalizationRegistrations) ) {\n    const target = foundry.utils.getProperty(config, keyPath);\n    if ( !target ) continue;\n    _localizeObject(target, settings.keys);\n    if ( settings.sort ) foundry.utils.setProperty(config, keyPath, sortObjectEntries(target, settings.keys[0]));\n  }\n\n  // Localize & sort status effects\n  CONFIG.statusEffects.forEach(s => s.name = game.i18n.localize(s.name));\n  CONFIG.statusEffects.sort((lhs, rhs) =>\n    lhs.order || rhs.order ? (lhs.order ?? Infinity) - (rhs.order ?? Infinity)\n      : lhs.name.localeCompare(rhs.name, game.i18n.lang)\n  );\n}\n\n/* -------------------------------------------- */\n\n/**\n * Localize the values of a configuration object by translating them in-place.\n * @param {object} obj       The configuration object to localize.\n * @param {string[]} [keys]  List of inner keys that should be localized if this is an object.\n * @private\n */\nfunction _localizeObject(obj, keys) {\n  for ( const [k, v] of Object.entries(obj) ) {\n    const type = typeof v;\n    if ( type === \"string\" ) {\n      obj[k] = game.i18n.localize(v);\n      continue;\n    }\n\n    if ( type !== \"object\" ) {\n      console.error(new Error(\n        `Pre-localized configuration values must be a string or object, ${type} found for \"${k}\" instead.`\n      ));\n      continue;\n    }\n    if ( !keys?.length ) {\n      console.error(new Error(\n        \"Localization keys must be provided for pre-localizing when target is an object.\"\n      ));\n      continue;\n    }\n\n    for ( const key of keys ) {\n      const value = foundry.utils.getProperty(v, key);\n      if ( !value ) continue;\n      foundry.utils.setProperty(v, key, game.i18n.localize(value));\n    }\n  }\n}\n\n/* -------------------------------------------- */\n/*  Localization                                */\n/* -------------------------------------------- */\n\n/**\n * A cache of already-fetched labels for faster lookup.\n * @type {Record<string, Map<string, string>>}\n */\nconst _attributeLabelCache = {\n  activity: new Map(),\n  actor: new Map(),\n  item: new Map()\n};\n\n/**\n * Convert an attribute path to a human-readable label. Assumes paths are on an actor unless an reference item\n * is provided.\n * @param {string} attr              The attribute path.\n * @param {object} [options]\n * @param {Actor5e} [options.actor]  An optional reference actor.\n * @param {Item5e} [options.item]    An optional reference item.\n * @returns {string|void}\n */\nexport function getHumanReadableAttributeLabel(attr, { actor, item }={}) {\n  if ( attr.startsWith(\"system.\") ) attr = attr.slice(7);\n\n  // Check any actor-specific names first.\n  if ( attr.match(/^resources\\.(?:primary|secondary|tertiary)/) && actor ) {\n    const key = attr.replace(/\\.value$/, \"\");\n    const resource = foundry.utils.getProperty(actor, `system.${key}`);\n    if ( resource?.label ) return resource.label;\n  }\n\n  if ( (attr === \"details.xp.value\") && (actor?.type === \"npc\") ) {\n    return game.i18n.localize(\"DND5E.ExperiencePoints.Value\");\n  }\n\n  if ( attr.startsWith(\".\") && actor ) {\n    // TODO: Remove `strict: false` when https://github.com/foundryvtt/foundryvtt/issues/11214 is resolved\n    // Only necessary when opening the token config for an actor in a compendium\n    const item = fromUuidSync(attr, { relative: actor, strict: false });\n    return item?.name ?? attr;\n  }\n\n  // Check if the attribute is already in cache.\n  let label = item ? null : _attributeLabelCache.actor.get(attr);\n  if ( label ) return label;\n  let name;\n  let type = \"actor\";\n\n  const getSchemaLabel = (attr, type, doc) => {\n    if ( doc ) return doc.system.schema.getField(attr)?.label;\n    for ( const model of Object.values(CONFIG[type].dataModels) ) {\n      const field = model.schema.getField(attr);\n      if ( field ) return field.label;\n    }\n  };\n\n  // Activity labels\n  if ( item && attr.startsWith(\"activities.\") ) {\n    let [, activityId, ...keyPath] = attr.split(\".\");\n    const activity = item.system.activities?.get(activityId);\n    if ( !activity ) return attr;\n    attr = keyPath.join(\".\");\n    name = `${item.name}: ${activity.name}`;\n    type = \"activity\";\n    if ( _attributeLabelCache.activity.has(attr) ) label = _attributeLabelCache.activity.get(attr);\n    else if ( attr === \"uses.spent\" ) label = \"DND5E.Uses\";\n  }\n\n  // Item labels\n  else if ( item ) {\n    name = item.name;\n    type = \"item\";\n    if ( _attributeLabelCache.item.has(attr) ) label = _attributeLabelCache.item.get(attr);\n    else if ( attr === \"hd.spent\" ) label = \"DND5E.HitDice\";\n    else if ( attr === \"uses.spent\" ) label = \"DND5E.Uses\";\n    else label = getSchemaLabel(attr, \"Item\", item);\n  }\n\n  // Derived fields.\n  else if ( attr === \"attributes.init.total\" ) label = \"DND5E.InitiativeBonus\";\n  else if ( (attr === \"attributes.ac.value\") || (attr === \"attributes.ac.flat\") ) label = \"DND5E.ArmorClass\";\n  else if ( attr === \"attributes.spell.dc\" ) label = \"DND5E.SpellDC\";\n\n  // Abilities.\n  else if ( attr.startsWith(\"abilities.\") ) {\n    const [, key] = attr.split(\".\");\n    label = game.i18n.format(\"DND5E.AbilityScoreL\", { ability: CONFIG.DND5E.abilities[key].label });\n  }\n\n  // Skills.\n  else if ( attr.startsWith(\"skills.\") ) {\n    const [, key] = attr.split(\".\");\n    label = game.i18n.format(\"DND5E.SkillPassiveScore\", { skill: CONFIG.DND5E.skills[key].label });\n  }\n\n  // Spell slots.\n  else if ( attr.startsWith(\"spells.\") ) {\n    const [, key] = attr.split(\".\");\n    if ( !/spell\\d+/.test(key) ) label = `DND5E.SpellSlots${key.capitalize()}`;\n    else {\n      const plurals = new Intl.PluralRules(game.i18n.lang, { type: \"ordinal\" });\n      const level = Number(key.slice(5));\n      label = game.i18n.format(`DND5E.SpellSlotsN.${plurals.select(level)}`, { n: level });\n    }\n  }\n\n  // Currency\n  else if ( attr.startsWith(\"currency.\") ) {\n    const [, key] = attr.split(\".\");\n    label = CONFIG.DND5E.currencies[key]?.label;\n  }\n\n  // Attempt to find the attribute in a data model.\n  if ( !label ) label = getSchemaLabel(attr, \"Actor\", actor);\n\n  if ( label ) {\n    label = game.i18n.localize(label);\n    _attributeLabelCache[type].set(attr, label);\n    if ( name ) label = `${name} ${label}`;\n  }\n\n  return label;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Perform pre-localization on the contents of a SchemaField. Necessary because the `localizeSchema` method\n * on `Localization` is private.\n * @param {SchemaField} schema\n * @param {string[]} prefixes\n */\nexport function localizeSchema(schema, prefixes) {\n  Localization.localizeDataModel({ schema }, { prefixes });\n}\n\n/* -------------------------------------------- */\n\n/**\n * Split a semi-colon-separated list and clean out any empty entries.\n * @param {string} input\n * @returns {string[]}\n */\nexport function splitSemicolons(input) {\n  return input.split(\";\").map(t => t.trim()).filter(t => t);\n}\n\n/* -------------------------------------------- */\n/*  Migration                                   */\n/* -------------------------------------------- */\n\n/**\n * Synchronize the spells for all Actors in some collection with source data from an Item compendium pack.\n * @param {CompendiumCollection} actorPack      An Actor compendium pack which will be updated\n * @param {CompendiumCollection} spellsPack     An Item compendium pack which provides source data for spells\n * @returns {Promise<void>}\n */\nexport async function synchronizeActorSpells(actorPack, spellsPack) {\n\n  // Load all actors and spells\n  const actors = await actorPack.getDocuments();\n  const spells = await spellsPack.getDocuments();\n  const spellsMap = spells.reduce((obj, item) => {\n    obj[item.name] = item;\n    return obj;\n  }, {});\n\n  // Unlock the pack\n  await actorPack.configure({locked: false});\n\n  // Iterate over actors\n  SceneNavigation.displayProgressBar({label: \"Synchronizing Spell Data\", pct: 0});\n  for ( const [i, actor] of actors.entries() ) {\n    const {toDelete, toCreate} = _synchronizeActorSpells(actor, spellsMap);\n    if ( toDelete.length ) await actor.deleteEmbeddedDocuments(\"Item\", toDelete);\n    if ( toCreate.length ) await actor.createEmbeddedDocuments(\"Item\", toCreate, {keepId: true});\n    console.debug(`${actor.name} | Synchronized ${toCreate.length} spells`);\n    SceneNavigation.displayProgressBar({label: actor.name, pct: ((i / actors.length) * 100).toFixed(0)});\n  }\n\n  // Re-lock the pack\n  await actorPack.configure({locked: true});\n  SceneNavigation.displayProgressBar({label: \"Synchronizing Spell Data\", pct: 100});\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper function to synchronize spell data for a specific Actor.\n * @param {Actor5e} actor\n * @param {Object<string,Item5e>} spellsMap\n * @returns {{toDelete: string[], toCreate: object[]}}\n * @private\n */\nfunction _synchronizeActorSpells(actor, spellsMap) {\n  const spells = actor.itemTypes.spell;\n  const toDelete = [];\n  const toCreate = [];\n  if ( !spells.length ) return {toDelete, toCreate};\n\n  for ( const spell of spells ) {\n    const source = spellsMap[spell.name];\n    if ( !source ) {\n      console.warn(`${actor.name} | ${spell.name} | Does not exist in spells compendium pack`);\n      continue;\n    }\n\n    // Combine source data with the preparation and uses data from the actor\n    const spellData = source.toObject();\n    const {preparation, uses, save} = spell.toObject().system;\n    Object.assign(spellData.system, {preparation, uses});\n    spellData.system.save.dc = save.dc;\n    foundry.utils.setProperty(spellData, \"_stats.compendiumSource\", source.uuid);\n\n    // Record spells to be deleted and created\n    toDelete.push(spell.id);\n    toCreate.push(spellData);\n  }\n  return {toDelete, toCreate};\n}\n","import SelectChoices from \"./select-choices.mjs\";\n\n/**\n * Cached version of the base items compendia indices with the needed subtype fields.\n * @type {object}\n * @private\n */\nconst _cachedIndices = {};\n\n/**\n * Determine the appropriate label to use for a trait category.\n * @param {object|string} data  Category for which to fetch the label.\n * @param {object} config       Trait configuration data.\n * @returns {string}\n * @private\n */\nfunction _innerLabel(data, config) {\n  return foundry.utils.getType(data) === \"Object\"\n    ? foundry.utils.getProperty(data, config.labelKeyPath ?? \"label\") : data;\n}\n\n/* -------------------------------------------- */\n/*  Application                                 */\n/* -------------------------------------------- */\n\n/**\n * Get the schema fields for this trait on the actor.\n * @param {Actor5e} actor  Actor for which to get the fields.\n * @param {string} trait   Trait as defined in `CONFIG.DND5E.traits`.\n * @returns {object|void}\n */\nexport function actorFields(actor, trait) {\n  const keyPath = actorKeyPath(trait);\n  return (keyPath.startsWith(\"system.\")\n    ? actor.system.schema.getField(keyPath.slice(7))\n    : actor.schema.getField(keyPath))?.fields;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Get the key path to the specified trait on an actor.\n * @param {string} trait  Trait as defined in `CONFIG.DND5E.traits`.\n * @returns {string}      Key path to this trait's object within an actor's system data.\n */\nexport function actorKeyPath(trait) {\n  const traitConfig = CONFIG.DND5E.traits[trait];\n  if ( traitConfig.actorKeyPath ) return traitConfig.actorKeyPath;\n  return `system.traits.${trait}`;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Get the current trait values for the provided actor.\n * @param {Actor5e} actor  Actor from which to retrieve the values.\n * @param {string} trait   Trait as defined in `CONFIG.DND5E.traits`.\n * @returns {Object<number>}\n */\nexport async function actorValues(actor, trait) {\n  const keyPath = actorKeyPath(trait);\n  const data = foundry.utils.getProperty(actor._source, keyPath);\n  if ( !data ) return {};\n  const values = {};\n  const traitChoices = await choices(trait, {prefixed: true});\n\n  const setValue = (k, v) => {\n    const result = traitChoices.find(k);\n    if ( result ) values[result[0]] = v;\n  };\n\n  if ( [\"skills\", \"tool\"].includes(trait) ) {\n    Object.entries(data).forEach(([k, d]) => setValue(k, d.value));\n  } else if ( trait === \"saves\" ) {\n    Object.entries(data).forEach(([k, d]) => setValue(k, d.proficient));\n  } else if ( trait === \"dm\" ) {\n    Object.entries(data.amount).forEach(([k, d]) => setValue(k, d));\n  } else {\n    data.value?.forEach(v => setValue(v, 1));\n  }\n\n  if ( trait === \"weapon\" ) data.mastery?.value?.forEach(v => setValue(v, 2));\n\n  return values;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Calculate the change key path for a provided trait key.\n * @param {string} key      Key for a trait to set.\n * @param {string} [trait]  Trait as defined in `CONFIG.DND5E.traits`, only needed if key isn't prefixed.\n * @returns {string|void}\n */\nexport function changeKeyPath(key, trait) {\n  const split = key.split(\":\");\n  if ( !trait ) trait = split.shift();\n\n  const traitConfig = CONFIG.DND5E.traits[trait];\n  if ( !traitConfig ) return;\n\n  let keyPath = actorKeyPath(trait);\n\n  if ( trait === \"saves\" ) {\n    return `${keyPath}.${split.pop()}.proficient`;\n  } else if ( [\"skills\", \"tool\"].includes(trait) ) {\n    return `${keyPath}.${split.pop()}.value`;\n  } else {\n    return `${keyPath}.value`;\n  }\n}\n\n/* -------------------------------------------- */\n/*  Trait Lists                                 */\n/* -------------------------------------------- */\n\n/**\n * Build up a trait structure containing all of the children gathered from config & base items.\n * @param {string} trait       Trait as defined in `CONFIG.DND5E.traits`.\n * @returns {Promise<object>}  Object with trait categories and children.\n */\nexport async function categories(trait) {\n  const traitConfig = CONFIG.DND5E.traits[trait];\n  const config = foundry.utils.deepClone(CONFIG.DND5E[traitConfig.configKey ?? trait]);\n\n  for ( const key of Object.keys(config) ) {\n    if ( foundry.utils.getType(config[key]) !== \"Object\" ) config[key] = { label: config[key] };\n    if ( traitConfig.children?.[key] ) {\n      const children = config[key].children ??= {};\n      for ( const [childKey, value] of Object.entries(CONFIG.DND5E[traitConfig.children[key]]) ) {\n        if ( foundry.utils.getType(value) !== \"Object\" ) children[childKey] = { label: value };\n        else children[childKey] = { ...value };\n      }\n    }\n  }\n\n  if ( traitConfig.subtypes ) {\n    const map = CONFIG.DND5E[`${trait}ProficienciesMap`];\n\n    // Merge all ID lists together\n    const ids = traitConfig.subtypes.ids.reduce((obj, key) => {\n      foundry.utils.mergeObject(obj, CONFIG.DND5E[key] ?? {});\n      return obj;\n    }, {});\n\n    // Fetch base items for all IDs\n    const baseItems = await Promise.all(Object.entries(ids).map(async ([key, id]) => {\n      if ( foundry.utils.getType(id) === \"Object\" ) id = id.id;\n      const index = await getBaseItem(id);\n      return [key, index];\n    }));\n\n    // Sort base items as children of categories based on subtypes\n    for ( const [key, index] of baseItems ) {\n      if ( !index ) continue;\n\n      // Get the proper subtype, using proficiency map if needed\n      let type = index.system.type.value;\n      if ( map?.[type] ) type = map[type];\n\n      // No category for this type, add at top level\n      if ( !config[type] ) config[key] = { label: index.name };\n\n      // Add as child of appropriate category\n      else {\n        config[type].children ??= {};\n        config[type].children[key] = { label: index.name };\n      }\n    }\n  }\n\n  return config;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Get a list of choices for a specific trait.\n * @param {string} trait                      Trait as defined in `CONFIG.DND5E.traits`.\n * @param {object} [options={}]\n * @param {Set<string>} [options.chosen=[]]   Optional list of keys to be marked as chosen.\n * @param {boolean} [options.prefixed=false]  Should keys be prefixed with trait type?\n * @param {boolean} [options.any=false]       Should the \"Any\" option be added to each category?\n * @returns {Promise<SelectChoices>}          Object mapping proficiency ids to choice objects.\n */\nexport async function choices(trait, { chosen=new Set(), prefixed=false, any=false }={}) {\n  const traitConfig = CONFIG.DND5E.traits[trait];\n  if ( !traitConfig ) return new SelectChoices();\n  if ( foundry.utils.getType(chosen) === \"Array\" ) chosen = new Set(chosen);\n  const categoryData = await categories(trait);\n\n  let result = {};\n\n  if ( traitConfig.labels?.all && !any ) {\n    const key = prefixed ? `${trait}:ALL` : \"ALL\";\n    result[key] = { label: traitConfig.labels.all, chosen: chosen.has(key), sorting: false };\n  }\n\n  if ( prefixed && any ) {\n    const key = `${trait}:*`;\n    result[key] = {\n      label: keyLabel(key).titleCase(),\n      chosen: chosen.has(key), sorting: false, wildcard: true\n    };\n  }\n\n  const prepareCategory = (key, data, result, prefix, topLevel=false) => {\n    let label = _innerLabel(data, traitConfig);\n    if ( !label ) label = key;\n    if ( prefixed ) key = `${prefix}:${key}`;\n    result[key] = {\n      label,\n      chosen: data.selectable !== false ? chosen.has(key) : false,\n      selectable: data.selectable !== false,\n      sorting: topLevel ? traitConfig.sortCategories === true : true\n    };\n    if ( data.children ) {\n      const children = result[key].children = {};\n      if ( prefixed && any ) {\n        const anyKey = `${key}:*`;\n        children[anyKey] = {\n          label: keyLabel(anyKey).titleCase(),\n          chosen: chosen.has(anyKey), sorting: false, wildcard: true\n        };\n      }\n      Object.entries(data.children).forEach(([k, v]) => prepareCategory(k, v, children, key));\n    }\n  };\n\n  Object.entries(categoryData).forEach(([k, v]) => prepareCategory(k, v, result, trait, true));\n\n  return new SelectChoices(result).sort();\n}\n\n/* -------------------------------------------- */\n\n/**\n * Prepare an object with all possible choices from a set of keys. These choices will be grouped by\n * trait type if more than one type is present.\n * @param {Set<string>} keys  Prefixed trait keys.\n * @returns {Promise<SelectChoices>}\n */\nexport async function mixedChoices(keys) {\n  if ( !keys.size ) return new SelectChoices();\n  const types = {};\n  for ( const key of keys ) {\n    const split = key.split(\":\");\n    const trait = split.shift();\n    const selectChoices = (await choices(trait, { prefixed: true })).filter(new Set([key]));\n    types[trait] ??= { label: traitLabel(trait), children: new SelectChoices() };\n    types[trait].children.merge(selectChoices);\n  }\n  if ( Object.keys(types).length > 1 ) return new SelectChoices(types);\n  return Object.values(types)[0].children;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Fetch an item for the provided ID. If the provided ID contains a compendium pack name\n * it will be fetched from that pack, otherwise it will be fetched from the compendium defined\n * in `DND5E.sourcePacks.ITEMS`.\n * @param {string} identifier            Simple ID or compendium name and ID separated by a dot.\n * @param {object} [options]\n * @param {boolean} [options.indexOnly]  If set to true, only the index data will be fetched (will never return\n *                                       Promise).\n * @param {boolean} [options.fullItem]   If set to true, the full item will be returned as long as `indexOnly` is\n *                                       false.\n * @returns {Promise<Item5e>|object}     Promise for a `Document` if `indexOnly` is false & `fullItem` is true,\n *                                       otherwise else a simple object containing the minimal index data.\n */\nexport function getBaseItem(identifier, { indexOnly=false, fullItem=false }={}) {\n  const uuid = getBaseItemUUID(identifier);\n  const { collection, documentId: id } = foundry.utils.parseUuid(uuid);\n  const pack = collection?.metadata.id;\n\n  // Full Item5e document required, always async.\n  if ( fullItem && !indexOnly ) return collection?.getDocument(id);\n\n  const cache = _cachedIndices[pack];\n  const loading = cache instanceof Promise;\n\n  // Return extended index if cached, otherwise normal index, guaranteed to never be async.\n  if ( indexOnly ) {\n    const index = collection?.index.get(id);\n    return loading ? index : cache?.[id] ?? index;\n  }\n\n  // Returned cached version of extended index if available.\n  if ( loading ) return cache.then(() => _cachedIndices[pack][id]);\n  else if ( cache ) return cache[id];\n  if ( !collection ) return;\n\n  // Build the extended index and return a promise for the data\n  const fields = traitIndexFields();\n  const promise = collection.getIndex({ fields }).then(index => {\n    const store = index.reduce((obj, entry) => {\n      obj[entry._id] = entry;\n      return obj;\n    }, {});\n    _cachedIndices[pack] = store;\n    return store[id];\n  });\n  _cachedIndices[pack] = promise;\n  return promise;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Construct a proper UUID for the provided base item ID.\n * @param {string} identifier  Simple ID, compendium name and ID separated by a dot, or proper UUID.\n * @returns {string}\n */\nexport function getBaseItemUUID(identifier) {\n  if ( identifier.startsWith(\"Compendium.\") ) return identifier;\n  let pack = CONFIG.DND5E.sourcePacks.ITEMS;\n  let [scope, collection, id] = identifier.split(\".\");\n  if ( scope && collection ) pack = `${scope}.${collection}`;\n  if ( !id ) id = identifier;\n  return `Compendium.${pack}.Item.${id}`;\n}\n\n/* -------------------------------------------- */\n\n/**\n * List of fields on items that should be indexed for retrieving subtypes.\n * @returns {string[]}  Index list to pass to `Compendium#getIndex`.\n * @protected\n */\nexport function traitIndexFields() {\n  const fields = [\"system.type.value\"];\n  for ( const traitConfig of Object.values(CONFIG.DND5E.traits) ) {\n    if ( !traitConfig.subtypes ) continue;\n    fields.push(`system.${traitConfig.subtypes.keyPath}`);\n  }\n  return fields;\n}\n\n/* -------------------------------------------- */\n/*  Localized Formatting Methods                */\n/* -------------------------------------------- */\n\n/**\n * Get the localized label for a specific trait type.\n * @param {string} trait    Trait as defined in `CONFIG.DND5E.traits`.\n * @param {number} [count]  Count used to determine pluralization. If no count is provided, will default to\n *                          the 'other' pluralization.\n * @returns {string}        Localized label.\n */\nexport function traitLabel(trait, count) {\n  const traitConfig = CONFIG.DND5E.traits[trait];\n  const pluralRule = (count !== undefined) ? new Intl.PluralRules(game.i18n.lang).select(count) : \"other\";\n  if ( !traitConfig ) return game.i18n.localize(`DND5E.TraitGenericPlural.${pluralRule}`);\n  return game.i18n.localize(`${traitConfig.labels.localization}.${pluralRule}`);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Retrieve the proper display label for the provided key. Will return a promise unless a categories\n * object is provided in config.\n * @param {string} key              Key for which to generate the label.\n * @param {object} [config={}]\n * @param {number} [config.count]   Number to display, only if a wildcard is used as final part of key.\n * @param {string} [config.trait]   Trait as defined in `CONFIG.DND5E.traits` if not using a prefixed key.\n * @param {boolean} [config.final]  Is this the final in a list?\n * @returns {string}                Retrieved label.\n *\n * @example\n * // Returns \"Tool Proficiency\"\n * keyLabel(\"tool\");\n *\n * @example\n * // Returns \"Artisan's Tools\"\n * keyLabel(\"tool:art\");\n *\n * @example\n * // Returns \"any Artisan's Tools\"\n * keyLabel(\"tool:art:*\");\n *\n * @example\n * // Returns \"any 2 Artisan's Tools\"\n * keyLabel(\"tool:art:*\", { count: 2 });\n *\n * @example\n * // Returns \"2 other Artisan's Tools\"\n * keyLabel(\"tool:art:*\", { count: 2, final: true });\n *\n * @example\n * // Returns \"Gaming Sets\"\n * keyLabel(\"tool:game\");\n *\n * @example\n * // Returns \"Land Vehicle\"\n * keyLabel(\"tool:vehicle:land\");\n *\n * @example\n * // Returns \"Shortsword\"\n * keyLabel(\"weapon:shortsword\");\n * keyLabel(\"weapon:simple:shortsword\");\n * keyLabel(\"shortsword\", { trait: \"weapon\" });\n */\nexport function keyLabel(key, config={}) {\n  let { count, trait, final } = config;\n\n  let parts = key.split(\":\");\n  const pluralRules = new Intl.PluralRules(game.i18n.lang);\n\n  if ( !trait ) trait = parts.shift();\n  const traitConfig = CONFIG.DND5E.traits[trait];\n  if ( !traitConfig ) return key;\n  const traitData = CONFIG.DND5E[traitConfig.configKey ?? trait] ?? {};\n  let categoryLabel = game.i18n.localize(`${traitConfig.labels.localization}.${\n    pluralRules.select(count ?? 1)}`);\n\n  // Trait (e.g. \"Tool Proficiency\")\n  const lastKey = parts.pop();\n  if ( !lastKey ) return categoryLabel;\n\n  // All (e.g. \"All Languages\")\n  if ( lastKey === \"ALL\" ) return traitConfig.labels?.all ?? key;\n\n  // Wildcards (e.g. \"Artisan's Tools\", \"any Artisan's Tools\", \"any 2 Artisan's Tools\", or \"2 other Artisan's Tools\")\n  else if ( lastKey === \"*\" ) {\n    let type;\n    if ( parts.length ) {\n      let category = traitData;\n      do {\n        category = (category.children ?? category)[parts.shift()];\n        if ( !category ) return key;\n      } while ( parts.length );\n      type = _innerLabel(category, traitConfig);\n    } else type = categoryLabel.toLowerCase();\n    const localization = `DND5E.TraitConfigChoose${final ? \"Other\" : `Any${count ? \"Counted\" : \"Uncounted\"}`}`;\n    return game.i18n.format(localization, { count: count ?? 1, type });\n  }\n\n  else {\n    // Category (e.g. \"Gaming Sets\")\n    const category = traitData[lastKey];\n    if ( category ) return _innerLabel(category, traitConfig);\n\n    // Child (e.g. \"Land Vehicle\")\n    for ( const childrenKey of Object.values(traitConfig.children ?? {}) ) {\n      const childLabel = CONFIG.DND5E[childrenKey]?.[lastKey];\n      if ( childLabel ) return childLabel;\n    }\n\n    // Base item (e.g. \"Shortsword\")\n    for ( const idsKey of traitConfig.subtypes?.ids ?? [] ) {\n      let baseItemId = CONFIG.DND5E[idsKey]?.[lastKey];\n      if ( !baseItemId ) continue;\n      if ( foundry.utils.getType(baseItemId) === \"Object\" ) baseItemId = baseItemId.id;\n      const index = getBaseItem(baseItemId, { indexOnly: true });\n      if ( index ) return index.name;\n      break;\n    }\n\n    // Explicit categories (e.g. languages)\n    const searchCategory = (data, key) => {\n      for ( const [k, v] of Object.entries(data) ) {\n        if ( k === key ) return v;\n        if ( v.children ) {\n          const result = searchCategory(v.children, key);\n          if ( result ) return result;\n        }\n      }\n    };\n    const config = searchCategory(traitData, lastKey);\n    return config ? _innerLabel(config, traitConfig) : key;\n  }\n}\n\n/* -------------------------------------------- */\n\n/**\n * Create a human readable description of the provided choice.\n * @param {TraitChoice} choice             Data for a specific choice.\n * @param {object} [options={}]\n * @param {boolean} [options.only=false]   Is this choice on its own, or part of a larger list?\n * @param {boolean} [options.final=false]  If this choice is part of a list of other grants or choices,\n *                                         is it in the final position?\n * @returns {string}\n *\n * @example\n * // Returns \"any three skill proficiencies\"\n * choiceLabel({ count: 3, pool: new Set([\"skills:*\"]) });\n *\n * @example\n * // Returns \"three other skill proficiencies\"\n * choiceLabel({ count: 3, pool: new Set([\"skills:*\"]) }, { final: true });\n *\n * @example\n * // Returns \"any skill proficiency\"\n * choiceLabel({ count: 1, pool: new Set([\"skills:*\"]) }, { only: true });\n *\n * @example\n * // Returns \"Thieves Tools or any skill\"\n * choiceLabel({ count: 1, pool: new Set([\"tool:thief\", \"skills:*\"]) }, { only: true });\n *\n * @example\n * // Returns \"Thieves' Tools or any artisan tool\"\n * choiceLabel({ count: 1, pool: new Set([\"tool:thief\", \"tool:art:*\"]) }, { only: true });\n *\n * @example\n * // Returns \"2 from Thieves' Tools or any skill proficiency\"\n * choiceLabel({ count: 2, pool: new Set([\"tool:thief\", \"skills:*\"]) });\n *\n */\nexport function choiceLabel(choice, { only=false, final=false }={}) {\n  if ( !choice.pool.size ) return \"\";\n\n  // Single entry in pool (e.g. \"any three skill proficiencies\" or \"three other skill proficiencies\")\n  if ( choice.pool.size === 1 ) {\n    return keyLabel(choice.pool.first(), {\n      count: (choice.count > 1 || !only) ? choice.count : null, final: final && !only\n    });\n  }\n\n  const listFormatter = new Intl.ListFormat(game.i18n.lang, { type: \"disjunction\" });\n\n  // Singular count (e.g. \"any skill\", \"Thieves Tools or any skill\", or \"Thieves' Tools or any artisan tool\")\n  if ( (choice.count === 1) && only ) {\n    return listFormatter.format(choice.pool.map(key => keyLabel(key)));\n  }\n\n  // Select from a list of options (e.g. \"2 from Thieves' Tools or any skill proficiency\")\n  const choices = choice.pool.map(key => keyLabel(key));\n  return game.i18n.format(\"DND5E.TraitConfigChooseList\", {\n    count: choice.count,\n    list: listFormatter.format(choices)\n  });\n}\n\n/* -------------------------------------------- */\n\n/**\n * Create a human readable description of trait grants & choices.\n * @param {object} config\n * @param {Set<string>} [config.grants]        Guaranteed trait grants.\n * @param {TraitChoice[]} [config.choices=[]]  Trait choices.\n * @returns {string}\n *\n * @example\n * // Returns \"Acrobatics and Athletics\"\n * localizedList({ grants: new Set([\"skills:acr\", \"skills:ath\"]) });\n *\n * @example\n * // Returns \"Acrobatics and one other skill proficiency\"\n * localizedList({ grants: new Set([\"skills:acr\"]), choices: [{ count: 1, pool: new Set([\"skills:*\"])}] });\n *\n * @example\n * // Returns \"Choose any skill proficiency\"\n * localizedList({ choices: [{ count: 1, pool: new Set([\"skills:*\"])}] });\n */\nexport function localizedList({ grants=new Set(), choices=[] }) {\n  const sections = Array.from(grants).map(g => keyLabel(g));\n\n  for ( const [index, choice] of choices.entries() ) {\n    const final = index === choices.length - 1;\n    sections.push(choiceLabel(choice, { final, only: !grants.size && choices.length === 1 }));\n  }\n\n  const listFormatter = new Intl.ListFormat(game.i18n.lang, { style: \"long\", type: \"conjunction\" });\n  if ( !sections.length || grants.size ) return listFormatter.format(sections);\n  return game.i18n.format(\"DND5E.TraitConfigChooseWrapper\", {\n    choices: listFormatter.format(sections)\n  });\n}\n","import { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { ROLL_REQUEST_OPTIONS } from \"../constants/General.mjs\";\nimport * as Trait from \"../../dnd5e/module/documents/actor/trait.mjs\";\nimport { RequestsUtil } from \"./RequestsUtil.mjs\";\nimport { HOOKS_CORE } from \"../constants/Hooks.mjs\";\n\n/**\n * Class to handle the roll requests toggle and related functionality\n */\nexport class RollRequestsMenu {\n  static actorsMenu = null;\n  static actors = { pc: [], npc: [] };\n  static selectedActors = { pc: [], npc: [] };\n  static selectedRequestType = null;\n  static selectedOptionType = null;\n  static selectAllCheckbox = null;\n  static actorsLocked = false;\n  static selectAllOn = false;\n  static selectedTab = \"pc\";\n\n  static init(){\n    RollRequestsMenu.preloadHandlebarsTemplates();\n  }\n\n  /**\n   * Get all player character actors\n   * @returns {Array} Array of player character actors\n   */\n  static getPlayerActors(){\n    const pcActors = game.actors.filter((actor, index) => {\n      const isCharacter = actor.type === \"character\";\n      return isCharacter;\n    });\n    pcActors.sort((a, b) => a.name.localeCompare(b.name));\n    RollRequestsMenu.actors.pc = pcActors;\n    return pcActors;\n  }\n\n  /**\n   * Get all non-player character actors\n   * @returns {Array} Array of non-player character actors\n   */\n  static getNPCActors(){\n    const onSceneActors = game.scenes.viewed?.tokens.map(token => token.actor);\n    LogUtil.log(\"getNPCActors\", [onSceneActors]);\n    const npcActors = onSceneActors.filter((actor, index) => {\n      const isNPC = actor.type === \"npc\";\n      return isNPC;\n    });\n    npcActors.sort((a, b) => a.name.localeCompare(b.name));\n\n    RollRequestsMenu.actors.npc = npcActors;\n    return npcActors;\n  }\n\n  /**\n   * Preload the handlebars templates for the PC actors menu\n   */\n  static preloadHandlebarsTemplates() {\n    const templatePaths = [\n      \"modules/crlngn-roll-requests/templates/requests-menus.hbs\"\n    ];\n    return loadTemplates(templatePaths);\n  }\n\n  /**\n   * Inject the roll requests toggle into the chat controls\n   * @returns {HTMLElement} The roll requests toggle element\n   */\n  static injectRollRequestsMenu() {\n    const rollRequestsToggleHTML = `<label class=\"chat-control-icon active\" id=\"crlngn-request-toggle\" ` +\n    `data-tooltip-direction=\"RIGHT\"><i class=\"fas fa-bolt\"></i></label>`;\n    \n    document.querySelector(\"#chat-controls\").insertAdjacentHTML(\"afterbegin\", rollRequestsToggleHTML);\n    const rollRequestsToggle = document.querySelector(\"#crlngn-request-toggle\");\n    const isEnabled = RequestsUtil.requestsEnabled;\n    \n    // Add toggle event listeners\n    rollRequestsToggle.addEventListener(\"click\", RollRequestsMenu.onRequestsToggleClick);\n    rollRequestsToggle.addEventListener(\"mouseenter\", RollRequestsMenu.showActorsMenu);\n    rollRequestsToggle.addEventListener(\"mouseleave\", RollRequestsMenu.hideActorsMenu);\n    \n    LogUtil.log(\"TEST\", [game, CONFIG.DND5E]);\n    return rollRequestsToggle;\n  }\n\n  /**\n   * Show the actors menu when hovering over the roll requests toggle\n   * @param {Event} event - The mouseenter event\n   */\n  static async showActorsMenu(event) {\n    const SETTINGS = getSettings();\n    // Get actors based on selected tab\n    const pcActors = RollRequestsMenu.getPlayerActors();\n    const npcActors = RollRequestsMenu.getNPCActors();\n    const existingMenu = document.querySelector(\"#crlngn-actors-menu\");\n    const toggleButton = document.querySelector(\"#crlngn-request-toggle\");\n    const tab = RollRequestsMenu.selectedTab;\n\n    // Remove existing menu if it exists\n    if (existingMenu) {\n      existingMenu.remove();\n    }\n\n    // Determine which actors to display based on selected tab\n    const displayActors = tab === \"pc\" ? pcActors : npcActors;\n    \n    LogUtil.log(\"showActorsMenu\", [tab, RollRequestsMenu.selectedActors[tab], RollRequestsMenu.selectedTab]);\n    LogUtil.log(\"NPCs\", [RollRequestsMenu.getNPCActors()]);\n    const requestTypes = Object.values(ROLL_REQUEST_OPTIONS).map(option => ({\n      id: option.name,\n      name: option.label,\n      selected: false,\n      rollable: option.subList === null\n    }));\n    const actorIds = RollRequestsMenu.selectedActors[tab].map(actor => actor.id);\n    \n    const menuHtml = await renderTemplate(\"modules/crlngn-roll-requests/templates/requests-menus.hbs\", {\n      actors: displayActors.map(actor => {\n        const isSelected = RollRequestsMenu.selectedActors[tab].some(selectedActor => selectedActor.id === actor.id);\n        let crlngnStats = [];\n        \n        if (actor.type === \"character\") {\n          crlngnStats = [\n            { abbrev: \"AC\", value: actor.system.attributes.ac.value },\n            { abbrev: \"HP\", value: actor.system.attributes.hp.value },\n            { abbrev: \"DC\", value: actor.system.attributes.spelldc },\n            { abbrev: \"PRC\", value: actor.system.skills.prc.passive }\n          ];\n        } else if (actor.type === \"npc\") {\n          // For NPCs, use the same stats if available, otherwise leave blank\n          crlngnStats = [\n            { abbrev: \"AC\", value: actor.system.attributes.ac.value || \"\" },\n            { abbrev: \"HP\", value: actor.system.attributes.hp.value || \"\" },\n            { abbrev: \"DC\", value: actor.system.attributes.spelldc || \"\" },\n            { abbrev: \"PRC\", value: actor.system.skills?.prc?.passive || \"\" }\n          ];\n        }\n        \n        return {\n          id: actor.id,\n          name: actor.name,\n          img: actor.img,\n          selected: isSelected,\n          crlngnStats\n        };\n      }),\n      selectedTab: RollRequestsMenu.selectedTab,\n      showNames: false,\n      requestTypes: requestTypes,\n      actorsLocked: RollRequestsMenu.actorsLocked,\n      requestsEnabled: RequestsUtil.requestsEnabled,\n      selectAllOn: RollRequestsMenu.selectAllOn,\n      skipDialogs: RequestsUtil.skipDialogs\n    });\n\n    document.body.insertAdjacentHTML(\"beforeend\", `<div id=\"crlngn-actors-menu\">${menuHtml}</div>`);\n    RollRequestsMenu.actorsMenu = document.querySelector(\"#crlngn-actors-menu\");\n    \n    // Get the toggle button's position\n    const toggleRect = toggleButton.getBoundingClientRect();\n    const toggleTop = toggleRect.top;\n    const toggleHeight = toggleRect.height;\n    \n    const menu = RollRequestsMenu.actorsMenu;\n    menu.addEventListener(\"mouseleave\", RollRequestsMenu.hideActorsMenu);\n    menu.style.zIndex = 100;\n    // Set the menu position to the left of the toggle and vertically centered with it\n    const menuWidth = 200; // Match the width from CSS\n    menu.style.right = `var(--current-sidebar-width, 0px)`;\n    menu.style.top = `${toggleTop}px`;\n    \n    // After the menu is rendered, check if it fits in the viewport\n    // and if not, add class to grow upward\n    // Also add listeners to toggles and buttons\n    setTimeout(() => {\n      const menuRect = menu.getBoundingClientRect();\n      const viewportHeight = window.innerHeight;\n      \n      if (menuRect.bottom > viewportHeight) {\n        menu.style.top = 'auto';\n        menu.classList.add('grow-up');\n      } else {\n        menu.classList.remove('grow-up');\n      }\n\n      RollRequestsMenu.addMenuListeners(RollRequestsMenu.actorsMenu);\n    }, 0);\n\n    RollRequestsMenu.markSelectedActors();\n  }\n\n  static addMenuListeners(menuHtml){\n    const actorItems = menuHtml.querySelectorAll('.actor');\n    const actorImgs = menuHtml.querySelectorAll('.actor .actor-img');\n    const selectAllCheckbox = menuHtml.querySelector('#crlngn-actors-all');\n    const actorsLockButton = menuHtml.querySelector('#crlngn-actors-lock');\n    const requestsToggle = menuHtml.querySelector('#crlngn-request-toggle');\n    const dialogsToggle = menuHtml.querySelector('#crlngn-skip-dialogs');\n    const tabButtons = menuHtml.querySelectorAll('.actors-tabs button');\n\n    RollRequestsMenu.selectAllCheckbox = selectAllCheckbox;\n\n    // Add event listeners to actor items\n    actorItems.forEach(item => {\n      item.addEventListener('click', RollRequestsMenu.onActorToggle);\n      item.addEventListener('contextmenu', RollRequestsMenu.onActorContext);\n    });\n\n    actorImgs.forEach(itemImg => {\n      itemImg.addEventListener('click', RollRequestsMenu.onActorOpenSheet);\n    });\n\n    // Add event listener to select all checkbox\n    selectAllCheckbox.addEventListener('change', RollRequestsMenu.onAllActorsToggle);\n    actorsLockButton.addEventListener('click', RollRequestsMenu.onActorLockClick);\n    requestsToggle.addEventListener('change', RollRequestsMenu.onRequestsToggleClick);\n    dialogsToggle.addEventListener('change', RollRequestsMenu.onDialogsToggleClick);\n    \n    // Add event listeners to tab buttons\n    tabButtons.forEach(tab => {\n      tab.addEventListener('click', RollRequestsMenu.onTabClick);\n    });\n  }\n\n  static onRequestsToggleClick(event){\n    const SETTINGS = getSettings();\n    const boltToggle = document.querySelector(\"#crlngn-request-toggle\");\n    const menuToggle = RollRequestsMenu.actorsMenu?.querySelector(\"#crlngn-rolls-toggle-requests input[type='checkbox']\");\n    const isBoltTarget = event.target.id === \"crlngn-request-toggle\";\n    const isEnabled = isBoltTarget ? !event.target.classList.contains(\"active\") : menuToggle?.checked;\n\n    LogUtil.log(\"onRequestsToggleClick\", [isEnabled, isBoltTarget]);\n    \n    if(isEnabled){\n      boltToggle.classList.add(\"active\");\n      if(menuToggle){ menuToggle.checked = true; }\n    }else{\n      boltToggle.classList.remove(\"active\");\n      if(menuToggle){ menuToggle.checked = false; }\n    }\n    \n    RequestsUtil.requestsEnabled = isEnabled;\n    SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, isEnabled);\n  }\n\n  static onDialogsToggleClick(event){\n    const SETTINGS = getSettings();\n    const target = event.target;\n    const isEnabled = target.checked;\n\n    LogUtil.log(\"onDialogsToggleClick\", [isEnabled]);\n    \n    RequestsUtil.skipDialogs = isEnabled;\n    SettingsUtil.set(SETTINGS.skipDialogs.tag, isEnabled);\n\n    // RollRequestsMenu.hideActorsMenu();\n    // RollRequestsMenu.showActorsMenu();\n  }\n\n  /**\n   * Hide the PC actors menu when moving away from the roll requests toggle\n   */\n  static hideActorsMenu() {\n    const menu = RollRequestsMenu.actorsMenu;\n    if(RollRequestsMenu.actorsLocked){ return; }\n    if (menu) {\n      // Add a small delay to allow clicking on the menu\n      setTimeout(() => {\n        if (!menu.matches(\":hover\")) {\n          menu.remove();\n          // Reset selections\n          // RollRequestsMenu.selectedActors = [];\n          RollRequestsMenu.selectedRequestType = null;\n        }\n      }, 750);\n    }\n  }\n  \n  /**\n   * Shows the request types menu after the actor selection is made\n   * Builds the menu items and adds click listeners\n   */\n  static showRequestTypes() {\n    const requestTypesMenu = RollRequestsMenu.actorsMenu.querySelector(\"ul.request-types\");\n    if (requestTypesMenu) {\n      requestTypesMenu.classList.add(\"visible\");\n      \n      const requestTypeItems = requestTypesMenu.querySelectorAll(\"li\");\n      requestTypeItems.forEach(item => {\n        if (!item._hasClickListener) {\n          item.addEventListener(\"click\", RollRequestsMenu.#onRequestTypeClick);\n          item._hasClickListener = true;\n        }\n      });\n    } else {\n      LogUtil.log(\"Request types menu not found\", []);\n    }\n  }\n  \n  /**\n   * Hide the request types menu\n   */\n  static hideRequestTypes() {\n    const requestTypesMenu = RollRequestsMenu.actorsMenu.querySelector(\"ul.request-types\");\n    if (requestTypesMenu) {\n      requestTypesMenu.classList.remove(\"visible\");\n    }\n    // Also hide the roll types menu\n    RollRequestsMenu.hideRollTypes();\n  }\n  \n  /**\n   * Show options for the selected request type\n   * @param {string} requestTypeId - The ID of the selected request type\n   */\n  static showOptionsForRequestType(requestTypeId) {\n    const tab = RollRequestsMenu.selectedTab;\n    const actors = RollRequestsMenu.selectedActors[tab];\n    \n    // Find the request type configuration\n    const requestType = Object.values(ROLL_REQUEST_OPTIONS).find(option => option.name === requestTypeId);\n    LogUtil.log(\"showOptionsForRequestType\", [actors, requestType, requestTypeId]);\n    if (!requestType) {\n      return;\n    }\n\n    // If there's no sublist, send the roll request\n    if(requestType.subList === null && actors.length > 0){\n      RequestsUtil.sendRollRequest(actors[0], {\n        config: { hookNames: [requestTypeId] },\n        actors: actors || []\n      });\n\n      LogUtil.log(\"showOptionsForRequestType - Sending roll request\", [actors, requestTypeId]);\n      // actors.forEach(actor => {\n      //   RequestsUtil.sendRollRequest(actor, {\n      //     config: { hookNames: [requestTypeId], actors: actors }\n      //   });\n      // });\n      return;\n    }\n    \n    const rollTypesMenu = RollRequestsMenu.actorsMenu.querySelector(\"ul.roll-types\");\n    if (!rollTypesMenu) { return; }\n    \n    // Clear existing options\n    rollTypesMenu.innerHTML = \"\";\n    \n    // Get the system list for the selected request type\n    const subList = CONFIG.DND5E[requestType.subList];\n    LogUtil.log(\"System list for request type\", [requestTypeId, subList, CONFIG.DND5E]);\n    if (!subList) { return; }\n      \n    // Create options for each item in the sublist\n    for (const [key, config] of Object.entries(subList)) {\n      const li = document.createElement(\"li\");\n      li.dataset.abbreviation = key;\n      li.dataset.fullKey = config.fullKey || key;\n      li.dataset.label = config.label || \"\";\n      li.dataset.type = requestTypeId;\n      if(requestType.subList === ROLL_REQUEST_OPTIONS.TOOL.subList){\n        const toolUUID = CONFIG.DND5E.enrichmentLookup.tools[key];\n        const toolName = toolUUID ? Trait.getBaseItem(toolUUID.id, { indexOnly: true })?.name : null;\n        li.dataset.label = toolName;\n      }\n      li.innerHTML = `<i class=\"icon fas fa-dice-d20\"></i>${li.dataset.label}`;\n\n      // Add click event listener\n      li.addEventListener(\"click\", RollRequestsMenu.#onSublistItemClick);\n      \n      rollTypesMenu.appendChild(li);\n    }\n    \n    // Show the roll types menu\n    rollTypesMenu.classList.add(\"visible\");\n  }\n  \n  /**\n   * Hide the roll types menu\n   */\n  static hideRollTypes() {\n    const rollTypesMenu = RollRequestsMenu.actorsMenu.querySelector(\"ul.roll-types\");\n    if (rollTypesMenu) {\n      rollTypesMenu.classList.remove(\"visible\");\n      rollTypesMenu.querySelectorAll(\".selected\").forEach(item => item.classList.remove(\"selected\"));\n      RollRequestsMenu.selectedOptionType = null;\n    }\n  }\n\n  static onActorLockClick(e){\n    const lockIcon = e.target;\n    RollRequestsMenu.actorsLocked = !RollRequestsMenu.actorsLocked;\n\n    if(RollRequestsMenu.actorsLocked){\n      lockIcon.classList.add(\"fa-lock-keyhole\");\n      lockIcon.classList.remove(\"fa-lock-keyhole-open\");\n    } else {\n      lockIcon.classList.add(\"fa-lock-keyhole-open\");\n      lockIcon.classList.remove(\"fa-lock-keyhole\");\n    }\n  }\n\n  static setItemSelection(item, markSelection){\n    item.dataset.selected = markSelection ? \"true\" : \"false\"; // alternate the value\n    const icon = item.querySelector(\".actor-select i\");\n    LogUtil.log(\"setItemSelection\", [item, markSelection]);\n\n    if(markSelection){\n      item.classList.add(\"selected\");\n      icon.classList.add(\"fa-circle-dot\");\n      icon.classList.remove(\"fa-circle\");\n    }else{\n      item.classList.remove(\"selected\");\n      icon.classList.remove(\"fa-circle-dot\");\n  }\n  // Also hide the roll types menu\n  RollRequestsMenu.hideRollTypes();\n}\n\n/**\n * Show options for the selected request type\n * @param {string} requestTypeId - The ID of the selected request type\n */\nstatic showOptionsForRequestType(requestTypeId) {\n  const tab = RollRequestsMenu.selectedTab;\n  const actors = RollRequestsMenu.selectedActors[tab];\n  \n  // Find the request type configuration\n  const requestType = Object.values(ROLL_REQUEST_OPTIONS).find(option => option.name === requestTypeId);\n  LogUtil.log(\"showOptionsForRequestType\", [actors, requestType, requestTypeId]);\n  if (!requestType) {\n    return;\n  }\n\n  // If there's no sublist, send the roll request\n  if(requestType.subList === null && actors.length > 0){\n    RequestsUtil.sendRollRequest(actors[0], {\n      config: { hookNames: [requestTypeId] },\n      actors: actors || []\n    });\n\n    LogUtil.log(\"showOptionsForRequestType - Sending roll request\", [actors, requestTypeId]);\n    // actors.forEach(actor => {\n    //   RequestsUtil.sendRollRequest(actor, {\n    //     config: { hookNames: [requestTypeId], actors: actors }\n    //   });\n    // });\n    return;\n  }\n  \n  const rollTypesMenu = RollRequestsMenu.actorsMenu.querySelector(\"ul.roll-types\");\n  if (!rollTypesMenu) { return; }\n  \n  // Clear existing options\n  rollTypesMenu.innerHTML = \"\";\n  \n  // Get the system list for the selected request type\n  const subList = CONFIG.DND5E[requestType.subList];\n  LogUtil.log(\"System list for request type\", [requestTypeId, subList, CONFIG.DND5E]);\n  if (!subList) { return; }\n      \n  // Create options for each item in the sublist\n  for (const [key, config] of Object.entries(subList)) {\n    const li = document.createElement(\"li\");\n    li.dataset.abbreviation = key;\n    li.dataset.fullKey = config.fullKey || key;\n    li.dataset.label = config.label || \"\";\n    li.dataset.type = requestTypeId;\n    if(requestType.subList === ROLL_REQUEST_OPTIONS.TOOL.subList){\n      const toolUUID = CONFIG.DND5E.enrichmentLookup.tools[key];\n      const toolName = toolUUID ? Trait.getBaseItem(toolUUID.id, { indexOnly: true })?.name : null;\n      li.dataset.label = toolName;\n    }\n    li.innerHTML = `<i class=\"icon fas fa-dice-d20\"></i>${li.dataset.label}`;\n\n    // Add click event listener\n    li.addEventListener(\"click\", RollRequestsMenu.#onSublistItemClick);\n    \n    rollTypesMenu.appendChild(li);\n  }\n  \n  // Show the roll types menu\n  rollTypesMenu.classList.add(\"visible\");\n}\n\n/**\n * Hide the roll types menu\n */\nstatic hideRollTypes() {\n  const rollTypesMenu = RollRequestsMenu.actorsMenu.querySelector(\"ul.roll-types\");\n  if (rollTypesMenu) {\n    rollTypesMenu.classList.remove(\"visible\");\n    rollTypesMenu.querySelectorAll(\".selected\").forEach(item => item.classList.remove(\"selected\"));\n    RollRequestsMenu.selectedOptionType = null;\n  }\n}\n\nstatic onActorLockClick(e){\n  const lockIcon = e.target;\n  RollRequestsMenu.actorsLocked = !RollRequestsMenu.actorsLocked;\n\n  if(RollRequestsMenu.actorsLocked){\n    lockIcon.classList.add(\"fa-lock-keyhole\");\n    lockIcon.classList.remove(\"fa-lock-keyhole-open\");\n  } else {\n    lockIcon.classList.add(\"fa-lock-keyhole-open\");\n    lockIcon.classList.remove(\"fa-lock-keyhole\");\n  }\n}\n\n  static setItemSelection(item, markSelection){\n    item.dataset.selected = markSelection ? \"true\" : \"false\"; // alternate the value\n    const icon = item.querySelector(\".actor-select i\");\n    LogUtil.log(\"setItemSelection\", [item, markSelection]);\n\n    if(markSelection){\n      item.classList.add(\"selected\");\n      icon.classList.add(\"fa-circle-dot\");\n      icon.classList.remove(\"fa-circle\");\n    }else{\n      item.classList.remove(\"selected\");\n      icon.classList.remove(\"fa-circle-dot\");\n      icon.classList.add(\"fa-circle\");\n    }\n  }\n\n  /**\n   * Handle actor selection\n   * @param {Event} e \n   */\n  static onActorToggle(e){\n    LogUtil.log(\"onActorToggle\", [e]);\n    \n    const currItem = e.target.closest('.actor');\n    if (!currItem) return;\n    \n    RollRequestsMenu.setItemSelection(currItem, !(currItem.dataset.selected == \"true\"));\n\n    const actorItems = RollRequestsMenu.actorsMenu.querySelectorAll('.actor');\n    const allChecked = Array.from(actorItems).every(item => item.dataset.selected === \"true\");\n    const someChecked = Array.from(actorItems).some(item => item.dataset.selected === \"true\");\n    RollRequestsMenu.selectAllCheckbox.checked = allChecked;\n    RollRequestsMenu.selectAllCheckbox.indeterminate = someChecked && !allChecked;\n\n    LogUtil.log(\"onActorToggle - checked states\", [allChecked, someChecked]);\n\n    // if some actors are checked, show request types menu\n    const selectedActorItems = Array.from(actorItems).filter(item => item.dataset.selected === \"true\");\n    const actorIds = selectedActorItems.map(item => item.dataset.id);\n    const tab = RollRequestsMenu.selectedTab;\n    RollRequestsMenu.selectedActors[tab] = RollRequestsMenu.actors[tab].filter(actor => actorIds.includes(actor.id));\n    RollRequestsMenu.selectAllOn = allChecked;\n\n    if(someChecked) {\n      RollRequestsMenu.showRequestTypes();\n    } else {\n      RollRequestsMenu.hideRequestTypes();\n    }\n    LogUtil.log(\"onActorToggle - selected actors\", [actorIds, RollRequestsMenu.selectedActors]);\n  }\n\n  static onActorContext(e){\n    const actorElement = e.target.closest('.actor');\n    if (!actorElement) return;\n    const tab = RollRequestsMenu.selectedTab;\n    const actorId = actorElement.dataset.id;\n    const actor = RollRequestsMenu.actors[tab].find(actor => actor.id === actorId);\n    const token = actor.token;\n    if(token){\n      canvas.animatePan({x: token.x, y: token.y, scale: 1}); \n    }\n  }\n\n  static onActorOpenSheet(e){\n    // Prevent event from bubbling up to parent elements\n    e.stopPropagation();\n    \n    // Find the closest parent with class actor that has the data-id attribute\n    const actorElement = e.target.closest('.actor');\n    if (!actorElement) return;\n    const tab = RollRequestsMenu.selectedTab;\n    const actorId = actorElement.dataset.id;\n    const actor = RollRequestsMenu.actors[tab].find(actor => actor.id === actorId);\n    if(actor){\n      actor.sheet.render(true);\n    }\n  }\n\n  static onAllActorsToggle(e){\n    const tab = RollRequestsMenu.selectedTab;\n    const isChecked = e.target.checked;\n    const actorItems = RollRequestsMenu.actorsMenu.querySelectorAll('.actor');\n    RollRequestsMenu.selectedActors[tab] = [];\n    RollRequestsMenu.selectAllOn = isChecked;\n\n    actorItems.forEach(item => {\n      RollRequestsMenu.setItemSelection(item, isChecked);  \n      RollRequestsMenu.selectedActors[tab].push(RollRequestsMenu.actors[tab].find(actor => actor.id === item.dataset.id));\n    });\n    \n    // RollRequestsMenu.markSelectedActors();\n    // Show or hide request types based on selection\n    if (isChecked) {\n      RollRequestsMenu.showRequestTypes();\n    } else {\n      RollRequestsMenu.hideRequestTypes();\n    }\n  }\n\n  static markSelectedActors(){\n    const tab = RollRequestsMenu.selectedTab;\n    const actorItems = RollRequestsMenu.actorsMenu.querySelectorAll('.actor');\n    const selectedActorIds = RollRequestsMenu.selectedActors[tab].map(actor => actor.id);\n    \n    actorItems.forEach(item => {\n      if(selectedActorIds.includes(item.dataset.id)){\n        RollRequestsMenu.setItemSelection(item, true);\n      }else{\n        RollRequestsMenu.setItemSelection(item, false);\n      }\n    });\n    if(RollRequestsMenu.selectedActors[tab].length > 0){\n      RollRequestsMenu.showRequestTypes();\n    }else{\n      RollRequestsMenu.hideRequestTypes();\n    }\n  }\n\n  static #onRequestTypeClick = (e) => {\n    const requestTypesMenu = RollRequestsMenu.actorsMenu.querySelector(\"ul.request-types\");\n    if (!requestTypesMenu) { return; }\n    \n    RollRequestsMenu.hideRollTypes();\n    requestTypesMenu.querySelectorAll(\".selected\").forEach(item => {\n      if(item !== e.target){\n        item.classList.remove(\"selected\")\n      }\n    });\n    e.target.classList.toggle(\"selected\");\n    \n    if(e.target.classList.contains(\"selected\")){\n      RollRequestsMenu.selectedRequestType = e.target.dataset.id;\n      RollRequestsMenu.showOptionsForRequestType(RollRequestsMenu.selectedRequestType);\n    }else{\n      RollRequestsMenu.selectedRequestType = null;\n      RollRequestsMenu.hideRollTypes();\n    }\n    LogUtil.log(\"showRequestTypes - item clicked\", [e.target.dataset, RollRequestsMenu.selectedRequestType]);\n  }\n    \n\n  static #onSublistItemClick = (e) => {\n    const tab = RollRequestsMenu.selectedTab;\n    const rollTypesMenu = RollRequestsMenu.actorsMenu.querySelector(\"ul.roll-types\");\n    if (!rollTypesMenu) { return; }\n\n    rollTypesMenu.querySelectorAll(\".selected\").forEach(item => item.classList.remove(\"selected\"));\n    e.target.classList.add(\"selected\");\n    const requestTypeId = e.target.dataset.type;\n    RollRequestsMenu.selectedOptionType = {\n      key: e.target.dataset.abbreviation,\n      fullKey: e.target.dataset.fullKey,\n      label: e.target.dataset.label\n    };\n\n    RequestsUtil.sendRollRequest(RollRequestsMenu.selectedActors[tab][0], {\n      config: { hookNames: [requestTypeId] },\n      dataset: e.target.dataset, \n      actors: RollRequestsMenu.selectedActors[tab]\n    });\n\n    // RollRequestsMenu.selectedActors.forEach(actor => {\n    //   RequestsUtil.sendRollRequest(actor, {\n    //     config: { hookNames: [requestTypeId], actors: actors }\n    //     dataset: e.target.dataset\n    //   });\n    //   LogUtil.log(\"showOptionsForRequestType - Sending roll request\", [actor, requestTypeId]);\n    // });\n    LogUtil.log(\"Selected option\", [RollRequestsMenu.selectedOptionType]);\n  }\n  \n  /**\n   * Handle tab click events to switch between PC and NPC actors\n   * @param {Event} e - The click event\n   */\n  static onTabClick(e) {\n    const tabType = e.target.dataset.tab;\n    if (tabType === RollRequestsMenu.selectedTab) return;\n    \n    RollRequestsMenu.selectedTab = tabType;\n    \n    // Update UI to show active tab\n    const tabsContainer = e.target.closest('.actors-tabs');\n    tabsContainer.querySelectorAll('button').forEach(tab => {\n      tab.classList.remove('active');\n    });\n    e.target.classList.add('active');\n    \n    // Re-render the menu with the new tab's actors\n    RollRequestsMenu.showActorsMenu();\n    \n    LogUtil.log(\"Tab changed\", [tabType, RollRequestsMenu.selectedTab]);\n  }\n}","import { HOOKS_DND5E, HOOKS_CORE } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { HOOK_NAMES, MODULE_ID, ACTIVITY_TYPES, BUTTON_ACTION_TYPES, CALL_TYPE, ROLL_REQUEST_OPTIONS } from \"../constants/General.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\nimport { Main } from \"./Main.mjs\";\nimport { RollRequestsMenu } from \"./RollRequestsMenu.mjs\";\n\n/**\n * Utility class for handling roll-related functionality\n * More information on DnD5e hooks here: \n * https://github.com/foundryvtt/dnd5e/wiki/Hooks\n */\nexport class RequestsUtil {\n  static forcePublicRoll = false;\n  static requestsEnabled = false;\n  static skipDialogs = false;\n  static SOCKET_CALLS = {\n    triggerRollRequest: { action:\"triggerRollRequest\", type: CALL_TYPE.CHECK },\n    // triggerActivity: { action:\"triggerActivity\", type: CALL_TYPE.ACTIVITY }\n  };\n  static diceConfig = {};\n  static playerDiceConfigs = {};\n  \n  static init() {\n    LogUtil.log(\"RequestsUtil.init() - Registering hooks\", [], true);\n    // RequestsUtil.preloadTemplates();\n    /**\n     * ROLLS\n     */\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_V2, RequestsUtil.#onPreRollV2);\n\n    // ACTIVITY\n    Hooks.on(HOOKS_DND5E.PRE_USE_ACTIVITY, RequestsUtil.#onPreUseActivity); \n    // Hooks.on(HOOKS_DND5E.POST_USE_ACTIVITY, RequestsUtil.#onPostUseActivity);\n    \n    // Roll Config\n    Hooks.on(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, RequestsUtil.#onRenderRollConfigurationDialog);\n    Hooks.on(HOOKS_DND5E.POST_ROLL_CONFIG, RequestsUtil.#onPostRollConfiguration);\n\n    // Roll Resolver\n    Hooks.on(HOOKS_CORE.RENDER_ROLL_RESOLVER, RequestsUtil.#onRenderRollResolver);\n\n    // Chat Messages\n    Hooks.on(HOOKS_CORE.RENDER_CHAT_MESSAGE, RequestsUtil.#onRenderChatMessage);\n\n    // Enable debug mode for hooks to see all hook calls in the console\n    // CONFIG.debug.hooks = true;\n    // LogUtil.log(\"Hook debugging enabled\", [], true);\n  }\n\n  /**\n   * Register socket calls with socketlib for remote execution\n   */\n  static registerSocketCalls(){\n    Object.values(RequestsUtil.SOCKET_CALLS).forEach(element => {\n      if(element.type === CALL_TYPE.ACTIVITY){\n        SocketUtil.registerCall(element.action, ActivityUtil[element.action]);\n      }else{\n        SocketUtil.registerCall(element.action, RequestsUtil[element.action]);\n      }\n    });\n  }\n\n  /**\n   * Send a roll request to the player owner of the actor\n   * @param {Actor5e} actor \n   * @param {Object} data \n   */\n  static sendRollRequest(actor, data={config:{}, dialog: {configure: true}, message: {}, actors: [], activityUuid: null}){ \n    const actionHandler = RequestsUtil.SOCKET_CALLS.triggerRollRequest.action;\n    const user = GeneralUtil.getPlayerOwner(actor.id);\n    const handlerData = { actorId: actor.id, ...data};\n    LogUtil.log(\"sendRollRequest #A\", [handlerData]);\n\n    data.config = {\n      ...data.config,\n      flags: {\n        ...data.config.flags,\n        [MODULE_ID]: {\n          rollRequest: true,\n          triggerOnRender: true,\n          type: data.type\n        }\n      }\n    }\n\n    const triggerData = {\n      ...handlerData, \n      message: {\n        ...data.message\n      },\n      actors: data.actors.map(actor => actor.id)\n    }\n\n    if(RequestsUtil.forcePublicRoll) {\n      triggerData.message.rollMode = CONST.DICE_ROLL_MODES.PUBLIC\n    }\n\n    // triggerData.dialog.configure = true;\n    triggerData.config.tool = handlerData.dataset?.type===ROLL_REQUEST_OPTIONS.TOOL.name ? handlerData.dataset?.abbreviation : \"\";\n    triggerData.config.skill = handlerData.dataset?.type===ROLL_REQUEST_OPTIONS.SKILL.name ? handlerData.dataset?.abbreviation : \"\";\n    const abbrev = handlerData.dataset?.abbreviation;\n    let ability = \"\";\n    if(handlerData.dataset?.type===ROLL_REQUEST_OPTIONS.TOOL.name){\n      ability = actor.system?.tools?.[abbrev]?.ability || CONFIG.DND5E.tools[abbrev]?.ability;\n    }else if(handlerData.dataset?.type===ROLL_REQUEST_OPTIONS.SKILL.name){\n      ability = actor.system?.skills?.[abbrev]?.ability || CONFIG.DND5E.skills[abbrev]?.ability;\n    }else if(handlerData.dataset?.type===ROLL_REQUEST_OPTIONS.SAVING_THROW.name || \n      triggerData.dataset?.type===ROLL_REQUEST_OPTIONS.ABILITY_CHECK.name){\n      ability = abbrev;\n    }else if(handlerData.dataset?.type===HOOK_NAMES.ATTACK.name){\n      triggerData.rollOptions = {\n        actorId: actor.id,\n        activityUuid: handlerData.activityUuid,\n        attackMode: \"\",\n        hookNames: handlerData.config?.hookNames || [],\n      }\n    }\n    triggerData.config.ability = ability;\n    triggerData.config.abilityId = ability;\n\n    LogUtil.log(\"sendRollRequest #B\", [abbrev, triggerData]);\n    RequestsUtil.triggerRollRequest(triggerData);\n  }\n\n  /**\n   * Handle received roll request from remote player\n   * @param {Object} data - Roll request data\n   * @returns \n   */\n  static triggerRollRequest(data){ \n    let { actorId=\"\", config={}, dialog={}, message={}, rollOptions=null, actors = [] } = data;\n    let item=null, activity=null;\n    const actor = game.actors.get(actorId);\n    LogUtil.log(\"triggerRollRequest #A\", [actor.name, data]);\n    \n    if(!actor){\n      LogUtil.log(\"triggerRollRequest - actor not found\", [actorId, actor]);\n      return;\n    }\n    // LogUtil.log(\"triggerRollRequest #B\", [actor.name, data]);\n\n    const SETTINGS = getSettings();\n    const useGMTargetTokens = SettingsUtil.get(SETTINGS.useGMTargetTokens.tag);\n    const playerTargets = GeneralUtil.getTargets(game.user);\n    if((useGMTargetTokens || playerTargets.length === 0) && rollOptions?.targetTokens){\n      canvas.tokens.placeables[0]?.setTarget(false, { releaseOthers: true });\n      for(let token of canvas.tokens.placeables){\n        if(rollOptions.targetTokens.includes(token.id)){\n          token.setTarget(true, { releaseOthers: false });\n        }\n      }\n    }\n\n    // pass the modified data from rollOptions to the config.rolls[0]\n    // before sending via sockets\n    let options = {};\n    if(rollOptions){\n      options = {\n        actorId: actorId,\n        ability: rollOptions.ability,\n        abilityId: rollOptions.ability,\n        tool: rollOptions.tool,\n        skill: rollOptions.skill,\n        advantage: rollOptions.advantage || false,\n        disadvantage: rollOptions.disadvantage || false,\n        situational: rollOptions.situational || \"\",\n        attackMode: rollOptions.attackMode || \"\",\n        target: rollOptions.target || null,\n        dc: rollOptions.dc || null,\n        type: rollOptions.rollType || \"\",\n        flavor: message?.data?.flavor || \"\",\n        hookNames: config.hookNames || []\n      }\n      \n      config = {\n        // ...config,\n        ...options,\n        event: null,\n        rolls: [{\n          // ...config.rolls?.[0],\n          parts: [],\n          options: {\n            // ...config.rolls?.[0]?.options,\n            // advantageMode: GeneralUtil.getAdvantageMode(options),\n            // target: options.target || null,\n            dc: options.dc || null,\n            rollType: options.rollType || \"\"\n          }\n        }]\n      }\n\n      // in case it's an activity...\n      const { itemId, activityId } = rollOptions.activityUuid ? GeneralUtil.getPartsFromActivityUuid(rollOptions.activityUuid) : {};\n      item = itemId ? actor.items.get(itemId) : null;\n      activity = activityId ? item?.system?.activities?.get(activityId) : null;\n    }\n\n    // set the dialog title to the flavor of gm's config\n    dialog = {\n      ...dialog,\n      options: {\n        ...dialog.options,\n        window: {\n          ...dialog.options?.window,\n          subtitle: actor.name\n        }\n      }\n    }\n    if(message?.data?.flavor || config?.flavor){\n      dialog.options.window.title = message?.data?.flavor || config?.flavor;\n    }\n\n    let type = RequestsUtil.getTypeFromHookNames(config.hookNames || []);\n    message = {\n      flags: {\n        // ...message.flags,\n        // whisper: [],\n        [MODULE_ID]: {\n          rollRequest: true,\n          rollOptions: rollOptions,\n          type: type,\n          actors: game.user.isGM ? actors.filter(actorItem => actorItem.id !== actor.id) : []\n        }\n      }\n    }\n    if(RequestsUtil.forcePublicRoll) {\n      message.rollMode = CONST.DICE_ROLL_MODES.PUBLIC\n    }\n    const requestOption = Object.values(ROLL_REQUEST_OPTIONS).find(option => option.name === type);\n    message.flavor = requestOption?.label;\n\n    LogUtil.log(\"triggerRollRequest #C\", [config, dialog, message]);\n    \n    switch(true){\n      case config.hookNames[0].toLowerCase() === ROLL_REQUEST_OPTIONS.SKILL.name.toLowerCase():\n        actor.rollSkill(config, dialog, message);\n        type = ROLL_REQUEST_OPTIONS.SKILL.name;\n        break;\n      case config.hookNames[0].toLowerCase() === ROLL_REQUEST_OPTIONS.TOOL.name.toLowerCase():\n        actor.rollToolCheck(config, dialog, message);\n        type = ROLL_REQUEST_OPTIONS.TOOL.name;\n        break;\n      case config.hookNames[0].toLowerCase() === ROLL_REQUEST_OPTIONS.ABILITY_CHECK.name.toLowerCase():\n        actor.rollAbilityCheck(config, dialog, message);\n        type = ROLL_REQUEST_OPTIONS.ABILITY_CHECK.name;\n        break;\n      case config.hookNames[0].toLowerCase() === ROLL_REQUEST_OPTIONS.SAVING_THROW.name.toLowerCase():\n        actor.rollSavingThrow(config, dialog, message);\n        type = ROLL_REQUEST_OPTIONS.SAVING_THROW.name;\n        break;\n      case config.hookNames[0].toLowerCase() === ROLL_REQUEST_OPTIONS.INITIATIVE.name.toLowerCase():\n        actor.rollInitiativeDialog({\n          situational: config.situational || \"\",\n          advantage: config.advantage,\n          disadvantage: config.disadvantage\n        });\n        type = ROLL_REQUEST_OPTIONS.INITIATIVE.name;\n        break;\n      case config.hookNames[0].toLowerCase() === ROLL_REQUEST_OPTIONS.DEATH_SAVE.name.toLowerCase():\n        actor.rollDeathSave(config, dialog, message);\n        type = ROLL_REQUEST_OPTIONS.DEATH_SAVE.name;\n        break;\n      case config.hookNames[0].toLowerCase() === ROLL_REQUEST_OPTIONS.CONCENTRATION.name.toLowerCase():\n        actor.rollConcentration(config, dialog, message);\n        type = ROLL_REQUEST_OPTIONS.CONCENTRATION.name;\n        break;\n      case config.hookNames[0].toLowerCase() === HOOK_NAMES.DAMAGE.name.toLowerCase():\n        LogUtil.log(\"triggerRollRequest - damage #1\", [activity, config, dialog, message]);\n        if(activity){\n          config.rolls = [];\n          activity.rollDamage(config, dialog, message);\n        }\n        break;\n      case config.hookNames[0].toLowerCase() === HOOK_NAMES.ATTACK.name.toLowerCase():\n        LogUtil.log(\"triggerRollRequest - attack #1\", [activity, config, dialog, message]);\n        if(activity){\n          message.flavor = \"\";\n          message.content = \"\";\n          LogUtil.log(\"triggerRollRequest - use\", [message]);\n          activity.use({}, dialog, message);\n          // activity.rollAttack(config, dialog, message);\n        }\n        break;\n      case config.hookNames.includes(HOOK_NAMES.FORMULA.name):\n        LogUtil.log(\"triggerRollRequest - formula\", [config, dialog, message]);\n        break;\n        // case config.hookNames[0] === ROLL_REQUEST_OPTIONS.HIT_DIE.name:\n        //   actor.rollHitDie();\n        //   type = ROLL_REQUEST_OPTIONS.HIT_DIE.name;\n        //   break;\n        // case config.hookNames.includes(HOOK_NAMES.SHORT_REST.name):\n        //   actor.shortRest();\n        //   break;\n        // case config.hookNames.includes(HOOK_NAMES.LONG_REST.name):\n        //   actor.longRest();\n        //   break;\n        // case config.hookNames.includes(HOOK_NAMES.FORMULA.name):\n        //   break;\n      default: \n        LogUtil.log(\"triggerRollRequest - default\", [config, dialog, message]);\n        break;\n    }\n  }\n\n  static createRequestMessage = async(actor, data, triggerOnRender=false) => {\n    LogUtil.log(\"createRequestMessage\", [actor, data, triggerOnRender]);\n    const requestType = Object.values(ROLL_REQUEST_OPTIONS).find(option => option.name === data.type);\n    if(!requestType){ return; }\n    \n    const dataset = {\n      type: data.type,\n      ability: data.config.ability,\n      abilityId: data.config.ability,\n      skill: data.config.skill,\n      tool: data.config.tool,\n      dc: data.config.target || \"\",\n      // situational: 3,\n      // advantage: true,\n      // disadvantage: false,\n      actorId: actor.id,\n      action: data.action || \"roll\",\n      visibility: game.users.find(u=>actor===u.character)?.id,\n      target: actor.uuid\n    };\n    \n    const buttons = [];\n    \n    const chatData = {\n      user: game.user.id,\n      content: await renderTemplate(\"systems/dnd5e/templates/chat/request-card.hbs\", { buttons }),\n      flavor: ``,\n      speaker: ChatMessage.implementation.getSpeaker({ alias: \"Roll That For Me\" }),\n      content: `<button data-actor-id='${dataset.actorId}' data-action=\"roll\" data-type=\"${dataset.type}\">${requestType?.label}</button>`,\n      flags: {\n        [MODULE_ID]: {\n          rollRequest: true,\n          triggerOnRender: triggerOnRender,\n          type: dataset.type\n        }\n      }\n    };\n    \n    if(triggerOnRender){\n      const event = {\n        type: \"click\",\n        target: {\n          dataset: {\n            actorId: actor.id,\n            action: \"roll\",\n            type: dataset.type\n          }\n        }\n      };\n    }\n    LogUtil.log(\"createRequestMessage\", [chatMessage]);\n  }\n\n  static areDiceConfigured(diceTypes, userId){\n    const diceConfig = RequestsUtil.playerDiceConfigs[userId];\n    if(!diceConfig){ return false; }\n    const configured = diceTypes?.map(diceType => {\n      return diceConfig?.[diceType] !== \"\" && diceConfig?.[diceType] !== undefined && diceConfig?.[diceType] !== null;\n    }) || [];\n    const isAnyConfigured = configured.includes(true) || false;\n    LogUtil.log(\"areDiceConfigured\", [configured, diceTypes, diceConfig, isAnyConfigured]);\n\n    return isAnyConfigured;\n  }\n\n  /**\n   * \n   * @param {*} chatMessage \n   * @param {*} html \n   */\n  static #onRenderChatMessage(chatMessage, html){\n    const isRequest = chatMessage.getFlag(MODULE_ID, \"rollRequest\");\n    const rollType = chatMessage.getFlag(MODULE_ID, \"type\");\n    const element = html[0] || html;\n    LogUtil.log(\"#onRenderChatMessage\", [chatMessage, html, rollType]);\n\n    if(isRequest){\n      const actionButton = element.querySelector(`button[data-type=${rollType}]`);\n      actionButton.addEventListener(\"click\", (e) => {\n        const target = e.currentTarget; \n        const dataset = target.dataset; \n        const actor = game.actors.get(dataset.actorId); \n        if(!actor){ return; } \n        LogUtil.log(\"onButtonClick\", [e, actor]); \n        actor.rollInitiativeDialog({\n          event: e\n        });\n      });\n    }\n  }\n\n  /**\n   * Hook handler for dnd5e.renderRollConfigurationDialog\n   * Fires when a roll configuration dialog is rendered\n   * @param {RollConfigurationDialog} rollConfigDialog - The roll configuration dialog\n   * @param {HTMLElement} html - The HTML element of the dialog\n   */\n  static #onRenderRollConfigurationDialog(rollConfigDialog, html){\n    const config = rollConfigDialog.config;\n    const message = rollConfigDialog.message;\n    const actor = config?.subject?.actor || config?.subject;\n    const playerOwner = actor ? GeneralUtil.getPlayerOwner(actor.id) : null;\n    LogUtil.log(\"#onRenderRollConfigurationDialog #1\", [playerOwner, rollConfigDialog, message, RequestsUtil.requestsEnabled]);\n\n\n    \n    // const subtitle = html.querySelector('.window-subtitle');\n    // const formulaLine = html.querySelector('.formula-line');\n    // const actorsList = message?.data?.flags?.[MODULE_ID]?.actors || message?.flags?.[MODULE_ID]?.actors || [];\n    // LogUtil.log(\"#onRenderRollConfigurationDialog #1B\", [message, subtitle, actorsList]);\n    // if(actorsList?.length > 1){\n    //   subtitle.textContent = \"Multiple actors\";\n    //   if(formulaLine){ formulaLine.style.opacity = 0; }\n    // }\n\n    if(!playerOwner?.active || !RequestsUtil.requestsEnabled){\n      return; \n    }\n\n    if(game.user.isGM){\n      RequestsUtil.addModuleFlags(message, config, actor);\n    }\n    \n    let eventTarget = GeneralUtil.getElement(config?.event?.target);\n    const target = eventTarget ? eventTarget.closest(\".card-buttons\")?.querySelector(\"button[data-action]\") : null;\n    \n    LogUtil.log(\"#onRenderRollConfigurationDialog #2\", []);\n    RequestsUtil.handleRollDialogInputs(target, rollConfigDialog, html);\n    // rollConfigDialog.rolls = [];\n    \n    if(!game.user.isGM || RollRequestsMenu.selectedTab !== \"pc\"){\n      const submitBtn = html.querySelector('button[autofocus]');\n      const activity = config.subject;\n      const damageParts = activity ? activity.damage?.parts : null;\n      const diceTypes = config.rolls?.[0]?.dice?.map(dice => dice.denomination) || [\"d20\"];\n      //  parts?.map(part => 'd' + part.denomination) || ['d20'];\n      \n      const areDiceConfigured = RequestsUtil.areDiceConfigured(diceTypes, playerOwner.id);\n      LogUtil.log(\"#onRenderRollConfigurationDialog #3\", [rollConfigDialog, config, areDiceConfigured, diceTypes]);\n\n      if(areDiceConfigured){\n        setTimeout(() => submitBtn.click(), 500);\n      }\n    }\n    LogUtil.log(\"#onRenderRollConfigurationDialog #4\", []);\n  }\n\n  /**\n   * Hook handler for dnd5e.postRollConfiguration\n   * @param {Array} rolls - BasicRoll[] array of rolls\n   * @param {Object} config - BasicRollProcessConfiguration for the roll\n   * @param {Object} dialog - BasicRollDialogConfiguration for the dialog\n   * @param {Object} message - BasicRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPostRollConfiguration(rolls, config, dialog, message){\n    const moduleFlags = message.data?.flags?.[MODULE_ID] || message.flags?.[MODULE_ID] || {};\n    const actorsList = moduleFlags?.actors || [];\n    const ddbGamelogFlags = moduleFlags?.[\"ddb-game-log\"] || message.data?.flags?.[\"ddb-game-log\"];\n    const isDdbGl = ddbGamelogFlags ? true : false;\n    const configSubject = config.subject?.actor || config.subject;\n\n    // const firstActorIndex = actorsList.length > 0 && game.user.isGM ? 1 : 0;\n    LogUtil.log(\"#onPostRollConfiguration #A\", [actorsList?.length, rolls?.[0], configSubject]);\n    \n    if(!actorsList?.length && configSubject instanceof dnd5e.dataModels.actor.Actor5e){ \n      actorsList = [configSubject.id];\n    } // || !RequestsUtil.requestsEnabled\n\n    // IMPORTANT FOR MAKING SURE DDB GAMELOG ROLLS COME THROUGH DIRECTLY\n    if(rolls?.[0]?.data?.flags){\n      rolls[0].data.flags = {\n        ...rolls[0].data.flags,\n        [MODULE_ID]: {\n          isDdbGl: isDdbGl\n        }\n      }\n    }\n      \n    const diceTypes = rolls?.[0]?.dice?.map(dice => dice.denomination) || [];\n    let forwardedToPlayer = message.data?.flags?.[MODULE_ID]?.requestType === \"activity\" || false;\n    LogUtil.log(\"#onPostRollConfiguration #A1\", [forwardedToPlayer, diceTypes]);\n\n    // Process actors with a delay between each one\n    (async () => {\n      LogUtil.log(\"#onPostRollConfiguration #A2\", [actorsList]);\n      for(let i = 0; i < actorsList.length; i++){\n        const actorId = actorsList[i].id || actorsList[i];\n        const actor = game.actors.get(actorId);\n        const playerOwner = actorId ? GeneralUtil.getPlayerOwner(actorId) : null;\n        LogUtil.log(\"#onPostRollConfiguration #B\", [isDdbGl, actor.name, playerOwner?.name, rolls, config, dialog, message]);\n\n        if(game.user.isGM && playerOwner?.active && RequestsUtil.requestsEnabled){\n          const actionHandler = RequestsUtil.SOCKET_CALLS.triggerRollRequest.action;\n          const areDiceConfigured = RequestsUtil.areDiceConfigured([\"d20\"], playerOwner.id);\n          dialog.configure = true;\n          // message.flags = {\n          //   ...message.flags //,\n          //   // ...(rolls[0]?.data?.flags || {})\n          // }\n          const isActivity = config.subject instanceof dnd5e.dataModels.activity.BaseActivityData;\n          const targetedTokens = GeneralUtil.getClientTargets() || [];\n          const tokenIds = targetedTokens.map(t=>t.id);\n          const handlerData = {\n            actorId: actorId, \n            config: config, // SocketUtil.serializeForTransport(config), \n            dialog, message, \n            rollOptions: {\n              ability: rolls[0]?.data?.abilityId || config.ability,\n              abilityId: rolls[0]?.data?.abilityId || config.ability,\n              tool: config?.tool,\n              skill: config?.skill,\n              advantage: rolls[0]?.hasAdvantage || false,\n              disadvantage: rolls[0]?.hasDisadvantage || false,\n              situational: rolls[0]?.data?.situational || \"\",\n              target: config.target || config.dc || null,\n              dc: config.dc || config.target || null,\n              rollType: rolls[0]?.options?.rollType || \"\",\n              attackMode: rolls[0]?.options?.attackMode || config.attackMode || \"\",\n              diceTypes: diceTypes, \n              actorId: actorId, \n              activityUuid: isActivity ? config.subject.uuid : null,\n              targetTokens: isActivity ? tokenIds : null,\n              playerOwner: playerOwner?.id || \"\"\n            }\n          };\n          ui.notifications.info(`Roll Request sent to ${playerOwner.name}`)\n          forwardedToPlayer = true;\n\n          // Send the request and wait for it to complete \n          await SocketUtil.execForUser(actionHandler, playerOwner.id, handlerData);\n          LogUtil.log(\"#onPostRollConfiguration - sending to...\", [forwardedToPlayer, actionHandler, playerOwner?.id, handlerData]);\n          \n          // Add a small delay before processing the next actor\n          await new Promise(resolve => setTimeout(resolve, 500)); // 500ms delay\n          \n        } else {\n          forwardedToPlayer = false;\n          config.event = null;\n          dialog = {\n            ...dialog,\n            configure: dialog.configure,\n            window: {\n              ...dialog.window,\n              subtitle: actor.name\n            }\n          }\n          RequestsUtil.triggerRollRequest({actorId: actorId, config, dialog});\n          LogUtil.log(\"#onPostRollConfiguration - rolling for...\", [actor, playerOwner?.name, config, dialog, message]);\n        }\n      }\n    })();\n\n    return forwardedToPlayer ? false : undefined;\n  }\n\n  static #onRenderRollResolver(rollResolver, html){\n    const roll = rollResolver.roll;\n    LogUtil.log(\"#onRenderRollResolver AAA\", [roll?.data, rollResolver, html]);\n\n    if(roll?.data?.flags?.[MODULE_ID]?.isDdbGl){\n      rollResolver.close();\n      // html.querySelector(\"button[type='submit']\").click();// dispatchEvent(new Event(\"click\"));\n      return false;\n    }\n    return;\n  }\n\n  /**\n   * \n   * @param {Activity} activity \n   * @param {ActivityUseConfiguration} usageConfig \n   * @param {ActivityDialogConfiguration} dialogConfig \n   * @param {ActivityMessageConfiguration} messageConfig \n   * @returns \n   */\n  static #onPreUseActivity(activity, usageConfig, dialogConfig, messageConfig){\n    LogUtil.log(\"#onPreUseActivity #A\", [activity, usageConfig, dialogConfig, messageConfig]);\n\n    const actor = activity?.actor;\n    const playerOwner = actor ? GeneralUtil.getPlayerOwner(actor.id) : null;\n    const isRollRequest = messageConfig?.flags?.[MODULE_ID]?.rollRequest || false;\n\n    LogUtil.log(\"#onPreUseActivity #B\", [playerOwner?.active, RequestsUtil.requestsEnabled, isRollRequest]);\n\n    if(playerOwner?.active && RequestsUtil.requestsEnabled && !isRollRequest){\n      messageConfig.create = false;\n      messageConfig.data = {\n        ...messageConfig.data,\n        flags: {\n          ...messageConfig.data?.flags,\n          [MODULE_ID]: {\n            ...messageConfig.data?.flags?.[MODULE_ID],\n            playerOwner: playerOwner?.id || \"\"\n          }\n        }\n      }\n\n      LogUtil.log(\"#onPreUseActivity #C\", [playerOwner]);\n      // return false;\n    }else{\n      LogUtil.log(\"#onPreUseActivity #D\", [playerOwner, isRollRequest]);\n    }\n\n    return;\n  }\n\n  static #onPostUseActivity(activity, usageConfig, dialogConfig, messageConfig){\n    LogUtil.log(\"#onPostUseActivity\", [activity.type, ACTIVITY_TYPES.SAVE, activity, usageConfig, dialogConfig, messageConfig]);\n    const playerOwner = RequestsUtil.getPlayerOwner(activity.actor.id);\n    LogUtil.log(\"#onPostUseActivity #2\", [playerOwner, RequestsUtil.requestsEnabled]);\n    if(playerOwner?.active && RequestsUtil.requestsEnabled){\n      messageConfig.create = false;\n      messageConfig.data = {\n        ...messageConfig.data,\n        flags: {\n          ...messageConfig.data?.flags,\n          [MODULE_ID]: {\n            ...messageConfig.data?.flags?.[MODULE_ID],\n            playerOwner: playerOwner?.id || \"\"\n          }\n        }\n      }\n\n      LogUtil.log(\"#onPostUseActivity #3\", [playerOwner]);\n      // RequestsUtil.sendRollRequest(actor, {\n      //   dataset: {\n      //     type: activity.type\n      //   },\n      //   config:{\n      //     hookNames: [activity.type],\n      //   }, \n      //   dialog: {configure: true}, \n      //   activityUuid: activity.uuid,\n      //   // message: messageConfig, \n      //   actors: [actor]\n      // });\n      return;\n    }\n    return;\n  }\n  \n  /**\n   * Base method for handling pre-roll hooks\n   * @param {Object} config - Roll process configuration\n   * @param {Object} dialog - Dialog configuration\n   * @param {Object} message - Message configuration\n   * @returns {boolean} Whether to allow the roll to proceed\n   */\n  static #onPreRollV2(config, dialog, message){\n    LogUtil.log(\"#onPreRollV2\", [ config.flags, config, dialog, message, RequestsUtil.skipDialogs ]);\n    const skipConfigure = game.user.isGM ? RequestsUtil.skipDialogs : false;\n    if(skipConfigure){\n      dialog.configure = false;\n    }\n    return;\n  }\n\n  static handleRollDialogInputs = async(target, dialog, html) => {\n    const rollOptions = dialog.message?.flags?.[MODULE_ID]?.rollOptions || {};\n    const dcField = html.querySelector('.formulas.dc');\n    let dcInput = html.querySelector('input[name=\"dc\"]');\n    const dcValue = target ? Number(target?.dataset?.dc) : rollOptions?.dc || dialog.config.dc || undefined;\n    if(dcInput){ dcInput.value = dcValue; }\n    \n    if(dialog?.config?.flavor){\n      const windowTitle = html.querySelector('.window-title');\n      windowTitle.textContent = dialog.config.flavor;\n    }\n\n    // add the input DC if not there already\n    if(!dcInput){\n      const renderedHtml = await renderTemplate(\n        `modules/${MODULE_ID}/templates/roll-dc-field.hbs`, \n        { \n          label: game.i18n.localize(\"CRLNGN_ROLLS.ui.forms.dcFieldLabel\"), \n          dc: dcValue\n        }\n      );\n      \n      if(RequestsUtil.allowsDC(dialog.config.hookNames)){\n        const targetElement = html.querySelector('.window-content .rolls .formulas');\n        targetElement?.insertAdjacentHTML('beforebegin', renderedHtml);\n      }\n    }\n  \n    dcInput = html.querySelector('input[name=\"dc\"]');\n    if(!game.user.isGM){\n      html.querySelector('.formulas.dc')?.classList.add('hidden');\n      dcInput?.setAttribute('hidden', true);\n    }\n\n    if(target && dcInput){dcInput.value = target?.dataset?.dc;}\n    if(dcInput){\n      rollOptions.dc = Number(dcInput.value);\n      dialog.config.dc = Number(dcInput.value);\n    }\n\n    dcInput?.addEventListener('change', () => {\n      rollOptions.dc = Number(dcInput.value);\n      dialog.config.dc = Number(dcInput.value) || \"\";\n    });\n\n    // if(rollOptions?.situational && !dialog.config?.parts?.includes(\"@situational\")){\n    //   if(!dialog.config.parts){dialog.config.parts = []}\n    //   dialog.config.parts.push(\"@situational\");\n    //   // dialog.config.data.situational = dialog.config.situational || rollOptions?.situational || \"\";\n    // } \n\n    LogUtil.log(\"handleRollDialogInputs\", [dialog.config, rollOptions]);\n\n    // handle situational bonus input\n    const flagAttribute = `data-${MODULE_ID}-${game.user.id}-custom-event`;\n    const situationalInput = html.querySelector('input[name=\"roll.0.situational\"]');\n    const situationalBonus = Number(target?.dataset?.situational) || rollOptions?.situational || \"\";\n    \n    if(!html.hasAttribute(flagAttribute) && situationalInput){\n      html.setAttribute(flagAttribute, \"true\");\n      situationalInput.value = situationalBonus || \"\";\n      situationalInput.dispatchEvent(new Event('change', {\n        bubbles: true,\n        cancelable: false\n      }));\n    }\n    html.setAttribute(flagAttribute, \"true\");\n    \n  }\n\n  static allowsDC(hookNames){\n    return hookNames[0].toLowerCase() === HOOK_NAMES.SKILL.name.toLowerCase() || \n    hookNames[0].toLowerCase() === HOOK_NAMES.TOOL.name.toLowerCase() || \n    hookNames[0].toLowerCase() === HOOK_NAMES.SAVING_THROW.name.toLowerCase() || \n    hookNames[0].toLowerCase() === HOOK_NAMES.ABILITY_CHECK.name.toLowerCase();\n  }\n\n  /**\n   * \n   * @param {*} config \n   * @returns \n   */\n  static getTypeFromHookNames(hookNames){\n    let type = \"\";\n    Object.values(ROLL_REQUEST_OPTIONS).forEach(option => {\n      if(hookNames.includes(option.name)){\n        type = option.name;\n      }\n    });\n    return type;\n  }\n\n  /**\n   * Add module flags to the message\n   * @param {ChatMessageData} message \n   * @param {ActivityUseConfiguration} config \n   * @param {Actor5e} actor \n   * @returns {ChatMessageData}\n   */\n  static addModuleFlags(message, config, actor){\n    const moduleFlags = {\n      ...message.data?.flags?.[MODULE_ID],\n      ...message.flags?.[MODULE_ID]\n    }\n\n    if(!message.data?.flags || !message.data?.flags?.[MODULE_ID]){\n      message.data = {\n        ...message.data,\n        flags: {\n          ...message.data?.flags,\n          [MODULE_ID]: moduleFlags\n        }\n      }\n    }\n\n    if(!message.data.flags[MODULE_ID].actors?.length){\n      message.data.flags[MODULE_ID].actors = [actor.id];\n    }\n\n    if(config.subject instanceof dnd5e.dataModels.activity.BaseActivityData){\n      message.data.flags[MODULE_ID].activityUuid = config.subject.uuid;\n      message.data.flags[MODULE_ID].requestType = \"activity\";\n    }\n\n    LogUtil.log(\"addModuleFlags\", [message]);\n\n    return message;\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { RequestsUtil } from \"./RequestsUtil.mjs\";\nimport { RollRequestsMenu } from \"./RollRequestsMenu.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  \n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n      LogUtil.log(\"Registering... \",[entry]);\n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n      LogUtil.log(\"registerSettings\",[setting.tag, SettingsUtil.get(setting.tag)]);\n    });\n    SettingsUtil.applySkipDialogsSetting();\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n      LogUtil.log(\"GET Setting\", [selectedSetting, setting]);\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n    LogUtil.log(\"Setting\",[settingName, selectedSetting]);\n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n      LogUtil.log(\"Unable to change setting\",[settingName, selectedSetting]);\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsSetting(newValue);\n        break;\n      case SETTINGS.skipDialogs.tag:\n        SettingsUtil.applySkipDialogsSetting(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsSetting(value){\n    const SETTINGS = getSettings();\n    LogUtil.log(\"applyRollRequestsSetting\", [value]);\n    const isEnabled = value || SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    RequestsUtil.requestsEnabled = isEnabled;\n\n    // update the layout\n    const rollRequestsToggle = document.querySelector(\"#crlngn-request-toggle\");\n    if(!rollRequestsToggle){ return; }\n    if (isEnabled === false) {\n      rollRequestsToggle.classList.remove(\"active\");\n    } else {\n      rollRequestsToggle.classList.add(\"active\");\n    }\n\n    const tooltipStr = game.i18n.localize(rollRequestsToggle.classList.contains(\"active\") ? \n      \"CRLNGN_ROLLS.ui.buttons.rollRequestsToggleOn\" : \n      \"CRLNGN_ROLLS.ui.buttons.rollRequestsToggleOff\");\n    rollRequestsToggle.dataset.tooltip = tooltipStr;\n\n    if (game.user.isGM && game.tooltip) {\n      game.tooltip.activate(rollRequestsToggle, {text: tooltipStr});\n    }\n\n    RollRequestsMenu.hideActorsMenu();\n    RollRequestsMenu.showActorsMenu();\n    \n    LogUtil.log(\"Roll Requests Toggle\", [isEnabled, rollRequestsToggle]);\n  }\n\n  static applySkipDialogsSetting(value){\n    const SETTINGS = getSettings();\n    RequestsUtil.skipDialogs = value || SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    LogUtil.log(\"applySkipDialogsSetting\", [value]);\n  }\n\n}\n","import { HOOKS_CORE } from \"../constants/Hooks.mjs\"; \nimport { LogUtil } from \"./LogUtil.mjs\"; \nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { RollRequestsMenu } from \"./RollRequestsMenu.mjs\"; \nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { RequestsUtil } from \"./RequestsUtil.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  static diceConfig = {};\n  static SOCKET_CALLS = {\n    receiveDiceConfig: \"receiveDiceConfig\",\n    getDiceConfig: \"getDiceConfig\"\n  };\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    // Initialize socketlib\n    SocketUtil.initialize(Main.registerSocketCalls);\n    Hooks.once(HOOKS_CORE.INIT, () => { \n      const SETTINGS = getSettings();\n      LogUtil.log(\"Initiating module...\", [], true);\n      SettingsUtil.registerSettings();\n      RequestsUtil.init();\n      ActivityUtil.init();\n      RollRequestsMenu.init();\n      Main.setDiceConfig();\n    });\n\n    Hooks.once(HOOKS_CORE.READY, () => {\n      LogUtil.log(\"Core Ready\", [ui?.sidebar, ui?.sidebar?._collapsed]);\n      const SETTINGS = getSettings();\n      \n      var isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n      if(isDebugOn){CONFIG.debug.hooks = true};\n      \n      if(game.user.isGM){\n        Hooks.on(HOOKS_CORE.USER_CONNECTED, Main.onUserConnected);\n        // Only run this on the GM client\n        game.users.forEach(user => {\n          Main.onUserConnected(user);\n        });\n        SettingsUtil.applyRollRequestsSetting();\n        RollRequestsMenu.injectRollRequestsMenu();\n        Hooks.on(HOOKS_CORE.COLLAPSE_SIDE_BAR, (sidebar) => { \n          LogUtil.log(HOOKS_CORE.COLLAPSE_SIDE_BAR, [sidebar._collapsed]);\n          if(sidebar){ Main.checkSideBar(!sidebar._collapsed); }\n        });\n        Main.checkSideBar(!ui?.sidebar?._collapsed);\n      }else{\n        Main.getDiceConfig();\n      }\n    });\n  }\n\n  /**\n   * Adds or removes the sidebar-expanded class based on the isExpanded parameter\n   * @param {boolean} isExpanded \n   */\n  static checkSideBar = (isExpanded) => {\n    const body = document.querySelector(\"body\");\n    if(isExpanded){\n      body.classList.add(\"sidebar-expanded\");\n    }else{\n      body.classList.remove(\"sidebar-expanded\");\n    }\n  }\n\n  /**\n   * Request dice configuration from the connected user\n   * @param {*} user \n   * @returns \n   */\n  static onUserConnected(user) {\n    // Request dice configuration from the connected user\n    if (user.active && user.id !== game.user.id) {\n      LogUtil.log(\"onUserConnected\", [user]);\n      SocketUtil.execForUser(Main.SOCKET_CALLS.getDiceConfig, user.id);\n    }\n  }\n\n  static setDiceConfig(){\n    if(!game.user) return;\n    const clientSettings = game.settings.storage.get(\"client\"); \n    Main.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    LogUtil.log(`getDiceConfig`, [Main.diceConfig]);\n    return Main.diceConfig;\n  }\n  \n  // Add the getDiceConfig method that will be called on the player's client\n  static getDiceConfig() { \n    if(!game.user) return;\n    Main.setDiceConfig();\n    \n    if(game.user.isGM) {\n      RequestsUtil.playerDiceConfigs[game.user.id] = Main.diceConfig;\n      SocketUtil.execForGMs(Main.SOCKET_CALLS.receiveDiceConfig, game.user.id, Main.diceConfig);\n      return;\n    }else{\n      RequestsUtil.playerDiceConfigs[game.user.id] = Main.diceConfig ? JSON.parse(Main.diceConfig) : {};\n    }\n  }\n\n  // Add the receiveDiceConfig method that will be called on the GM's client\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId===game.user.id){ // for GM or own user\n      // Store the dice configuration for this user\n      if (!RequestsUtil.playerDiceConfigs) RequestsUtil.playerDiceConfigs = {};\n      RequestsUtil.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n      \n      LogUtil.log(`Received dice configuration from user ${userId}`, [RequestsUtil.playerDiceConfigs]);\n    }\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(Main.SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(Main.SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    RequestsUtil.registerSocketCalls();\n  }\n\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\nMain.init();\n"],"names":["HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","MODULE_ID","DEBUG_TAG","HOOK_NAMES","ACTIVITY_TYPES","CALL_TYPE","ROLL_REQUEST_OPTIONS","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","__publicField","LogUtil","SETTING_INPUT","SETTING_SCOPE","getSettings","GeneralUtil","user","gm","us","targetTokens","itemUuid","actorId","moduleName","module","mode","item","removeTemplateSettingOn","SettingsUtil","templates","mt","i","owner","actor","pl","parent","selector","hookName","hookItem","uuid","parts","elem","targets","t","rollOptions","selectedTargets","target","_b","token","name","img","system","statuses","ac","itemId","actionName","it","varName","varValue","bodyStyle","body","cssText","ruleStart","ruleEnd","declarations","decl","varsMap","value","newRuleContent","newCss","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","e","func","callback","handler","parameters","userId","executionKey","resp","error","SocketUtil","_ActivityUtil_static","onRenderChatMessage_fn","_ActivityUtil","__privateMethod","activity","config","message","dialog","event","activityUuid","_c","activityData","html","flags","__privateAdd","_d","diceTypes","RequestsUtil","situationalBonus","deserializedConfig","updatedConfig","updatedDialog","updatedMessage","context","attackButton","btnData","attackConfigData","messageConfig","areDiceConfigured","damageConfigData","part","attackMode","formulas","damageTypes","rollType","scaling","rollConfig","formula","idx","types","ActivityUtil","CODES","MODIFIER_KEYS","k","_cachedIndices","getBaseItem","identifier","indexOnly","fullItem","getBaseItemUUID","collection","id","pack","cache","loading","index","fields","traitIndexFields","promise","store","obj","entry","scope","traitConfig","_onRequestTypeClick","_onSublistItemClick","_RollRequestsMenu","pcActors","a","b","onSceneActors","npcActors","templatePaths","rollRequestsToggle","existingMenu","toggleButton","tab","displayActors","requestTypes","option","menuHtml","isSelected","selectedActor","crlngnStats","toggleRect","toggleTop","menu","menuRect","viewportHeight","actorItems","actorImgs","selectAllCheckbox","actorsLockButton","requestsToggle","dialogsToggle","tabButtons","itemImg","SETTINGS","boltToggle","menuToggle","isBoltTarget","isEnabled","requestTypesMenu","__privateGet","requestTypeId","actors","requestType","rollTypesMenu","subList","key","li","toolUUID","toolName","Trait.getBaseItem","lockIcon","markSelection","icon","currItem","allChecked","someChecked","actorIds","actorElement","isChecked","selectedActorIds","tabType","RollRequestsMenu","_RequestsUtil_static","onRenderRollConfigurationDialog_fn","onPostRollConfiguration_fn","onRenderRollResolver_fn","onPreUseActivity_fn","onPostUseActivity_fn","onPreRollV2_fn","_RequestsUtil","element","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","handlerData","triggerData","abbrev","ability","useGMTargetTokens","playerTargets","activityId","type","actorItem","requestOption","diceConfig","configured","diceType","isAnyConfigured","hookNames","moduleFlags","chatMessage","isRequest","dataset","rollConfigDialog","playerOwner","eventTarget","submitBtn","dice","actorsList","isDdbGl","configSubject","forwardedToPlayer","actionHandler","isActivity","tokenIds","resolve","rollResolver","usageConfig","dialogConfig","isRollRequest","triggerOnRender","buttons","dcInput","dcValue","windowTitle","renderedHtml","targetElement","flagAttribute","situationalInput","setting","settingObj","settingName","selectedSetting","newValue","tooltipStr","_Main","isDebugOn","sidebar","clientSettings","isExpanded","Main"],"mappings":"6dAKO,MAAMA,EAAa,CACxB,KAAM,OACN,MAAO,QACP,oBAAqB,oBAGrB,qBAAsB,qBACtB,eAAgB,gBAIhB,kBAAmB,iBACrB,EAKaC,GAAe,CAC1B,MAAO,iBACT,EAKaC,EAAc,CAEzB,YAAa,kBAGb,iBAAkB,uBAwElB,iBAAkB,8BAClB,iCAAkC,+BAGpC,ECzGaC,EAAY,uBAOZC,EAAY,CACvB,qBACA,8CACA,GACF,EAEaC,EAAa,CAExB,OAAQ,CAAE,KAAM,SAAU,YAAa,QAAU,EACjD,OAAQ,CAAE,KAAM,SAAU,YAAa,QAAU,EACjD,KAAM,CAAE,KAAM,OAAQ,YAAa,QAAU,EAC7C,aAAc,CAAE,KAAM,cAAe,YAAa,OAAS,EAC3D,cAAe,CAAE,KAAM,eAAgB,YAAa,OAAS,EAC7D,cAAe,CAAE,KAAM,gBAAiB,YAAa,OAAS,EAC9D,WAAY,CAAE,KAAM,YAAa,YAAa,MAAQ,EACtD,MAAO,CAAE,KAAM,QAAS,YAAa,OAAS,EAC9C,KAAM,CAAE,KAAM,OAAQ,YAAa,OAAS,EAC5C,QAAS,CAAE,KAAM,SAAU,YAAa,SAAW,EACnD,WAAY,CAAE,KAAM,aAAc,YAAa,OAAS,EACxD,QAAS,CAAE,KAAM,UAAW,YAAa,SAAW,EACpD,SAAU,CAAE,KAAM,WAAY,YAAa,SAAW,EAEtD,SAAU,CAAE,KAAM,UAAW,YAAa,SAAW,EACrD,WAAY,CAAE,KAAM,YAAa,YAAa,SAAW,EACzD,UAAW,CAAE,KAAM,WAAY,YAAa,SAAW,CACzD,EAEaC,GAAiB,CAS5B,KAAM,MAIR,EAEaC,GAAY,CACvB,SAAU,WACV,MAAO,OACT,EAQaC,EAAuB,CAClC,cAAe,CAAE,KAAM,eAAgB,MAAO,gBAAiB,QAAS,YAAa,UAAW,kBAAoB,EACpH,aAAc,CAAE,KAAM,cAAe,MAAO,eAAgB,QAAS,YAAa,UAAW,qBAAuB,EACpH,MAAO,CAAE,KAAM,QAAS,MAAO,cAAe,QAAS,SAAU,UAAW,eAAiB,EAC7F,KAAM,CAAE,KAAM,OAAQ,MAAO,aAAc,QAAS,QAAS,UAAW,cAAgB,EACxF,cAAe,CAAE,KAAM,gBAAiB,MAAO,sBAAuB,QAAS,KAAM,UAAW,EAAI,EACpG,WAAY,CAAE,KAAM,mBAAoB,MAAO,kBAAmB,QAAS,KAAM,UAAW,EAAI,EAChG,WAAY,CAAE,KAAM,YAAa,MAAO,aAAc,QAAS,KAAM,UAAW,EAAI,EACpF,OAAQ,CAAE,KAAM,SAAU,MAAO,cAAe,QAAS,KAAM,UAAW,EAAI,CAEhF,ECrEaC,GAAN,MAAMA,EAAQ,CAUnB,OAAO,IAAIC,EAAI,GAAIC,EAAK,CAAE,EAAEC,EAAe,GAAO,CAChD,GAAI,CACF,MAAMC,EAAe,KAAK,SAAS,IAAIV,EAAW,WAAW,GAAKM,GAAQ,QAE1E,GAAG,EADmBG,GAAkBC,GACnB,OACrB,QAAQ,IAAI,GAAGT,EAAWM,EAAK,GAAGC,CAAI,CACvC,MAAU,CACT,QAAQ,IAAI,GAAGP,EAAWM,EAAK,GAAGC,CAAI,CAC5C,CACA,CAOE,OAAO,KAAKD,EAAI,GAAIC,EAAK,CAAA,EAAI,CAC3B,QAAQ,KAAK,GAAGP,EAAWM,EAAK,GAAGC,CAAI,CAC3C,CAWE,OAAO,MAAMG,EAAQC,EAAU,CAAE,GAAI,GAAO,QAAS,GAAM,UAAW,IAAS,CF7CjF,IAAAC,EE8COD,EAAQ,MACTC,EAAA,GAAG,gBAAH,MAAAA,EAAkB,MAAMF,EAAQ,CAAE,SAAU,GAAM,UAAWC,EAAQ,aAEpEA,EAAQ,SAAS,QAAQ,MAAM,GAAGX,EAAWU,CAAM,CAC1D,CACA,EA3CEG,EAFWR,GAEJ,UAAU,IAFZ,IAAMS,EAANT,GCNA,MAAMU,GAAgB,CAE3B,SAAU,UACZ,EACaC,GAAgB,CAC3B,OAAQ,SACR,MAAO,OACT,EAMaC,EAAc,KAClB,CACL,UAAW,CACT,IAAK,aACL,MAAO,KAAK,KAAK,SAAS,uCAAuC,EACjE,KAAM,KAAK,KAAK,SAAS,sCAAsC,EAC/D,SAAU,QACV,UAAWF,GAAc,SACzB,QAAS,GACT,MAAOC,GAAc,OACrB,OAAQ,EACT,EACD,oBAAqB,CACnB,IAAK,wBACL,MAAO,KAAK,KAAK,SAAS,iDAAiD,EAC3E,KAAM,KAAK,KAAK,SAAS,gDAAgD,EACzE,SAAU,QACV,UAAWD,GAAc,SACzB,QAAS,GACT,MAAOC,GAAc,MACrB,OAAQ,EACT,EACD,YAAa,CACX,IAAK,eACL,MAAO,KAAK,KAAK,SAAS,yCAAyC,EACnE,KAAM,KAAK,KAAK,SAAS,wCAAwC,EACjE,SAAU,QACV,UAAWD,GAAc,SACzB,QAAS,GACT,MAAOC,GAAc,MACrB,OAAQ,EACT,EACD,kBAAmB,CACjB,IAAK,uBACL,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,KAAM,KAAK,KAAK,SAAS,8CAA8C,EACvE,SAAU,QACV,UAAWD,GAAc,SACzB,QAAS,GACT,MAAOC,GAAc,MACrB,OAAQ,EACd,CAEG,GCpDI,MAAME,CAAY,CAMvB,OAAO,WAAWC,EAAM,CACtB,IAAIC,EAAK,KAAK,MAAM,KAAKC,GAAIA,EAAG,OAAO,EAAI,EACvCC,EAAeH,EAAK,SAAWC,EAAG,QAEtC,OAAO,IAAI,IAAI,CAAC,GAAGE,CAAY,CAAC,CACpC,CAwCE,OAAO,iBAAiBC,EAAS,CAC/B,MAAMC,EAAUD,EAAS,MAAM,GAAG,EAAE,CAAC,EAGrC,OAFc,KAAK,OAAO,IAAIC,CAAO,CAGzC,CA0BE,OAAO,WAAWC,EAAW,CJtF/B,IAAAb,EIuFI,MAAMc,GAASd,EAAA,KAAK,UAAL,YAAAA,EAAc,IAAIa,GACjC,MAAO,GAAAC,GAAA,MAAAA,EAAQ,OACnB,CAME,OAAO,cAAcC,EAAK,CACxB,OAAOA,IAAS,MAAM,gBAAgB,OAASA,IAAS,MAAM,gBAAgB,OAClF,CAME,OAAO,sBAAuBC,EAAM,CAClCd,EAAQ,IAAI,4BAA6B,CAACc,CAAI,CAAC,EAC/C,MAAMC,EAA0BC,EAAa,IAAI,iBAAiB,EAElE,GADAhB,EAAQ,IAAI,4BAA6B,CAACe,CAAuB,CAAC,EAC/D,CAACA,EAA0B,OAC9B,MAAME,EAAY,OAAO,UAAU,QAAQ,SAAS,OAAOC,GAClDA,EAAG,SAAS,MAAM,MAAM,QAASJ,GAAA,YAAAA,EAAM,KAC/C,EAED,OAAO,MAAM,wBAAwB,mBAAoBG,EAAU,IAAIE,GAAGA,EAAE,EAAE,CAAC,CACnF,CAEE,OAAO,eAAeT,EAAQ,CAC5B,IAAIU,EACJ,GAAG,CAACV,EAAU,OAAO,KACrB,MAAMW,EAAQX,EAAU,KAAK,OAAO,IAAIA,CAAO,EAAI,KAKnD,OAAAU,EAHqB,KAAK,MAAM,QAAQ,KAAKE,GACpCA,EAAG,SAAW,IAAQA,EAAG,UAAU,KAAOZ,CAClD,EAGGU,GAEF,KAAK,MAAM,QAAQ,QAAQE,GAAM,CAC5BA,EAAG,QAAUD,EAAM,mBAAmBC,EAAI,QAAQ,MAAM,0BAA0B,MAAO,CAAE,MAAM,EAAM,CAAA,IACxGF,EAAQE,EAElB,CAAO,EAGIF,CACX,CAGE,OAAO,KAAKG,EAAQC,EAAU,CAC5B,OAAOD,EAAO,cAAcC,CAAQ,CACxC,CAkFE,OAAO,gBAAgBC,EAAU,CJ9NnC,IAAA3B,EI+NI,QAAOA,EAAA,OAAO,OAAOX,CAAU,EAAE,KAAKuC,GAAYA,EAAS,KAAK,YAAa,IAAKD,EAAS,YAAW,CAAE,IAAjG,YAAA3B,EAAoG,eAAgB,EAC/H,CAEE,OAAO,yBAAyB6B,EAAK,CACnC,MAAMC,EAAQD,EAAK,MAAM,GAAG,EAC5B,MAAO,CACL,QAASC,EAAM,CAAC,EAChB,OAAQA,EAAM,CAAC,EACf,WAAYA,EAAM,CAAC,CACzB,CACA,CAEE,OAAO,WAAWC,EAAM,CAOtB,OAAOA,GAAA,YAAAA,EAAO,KAAMA,CACxB,CAME,OAAO,iBAAkB,CJzP3B,IAAA/B,EI0PI,IAAIgC,IAAUhC,EAAA,OAAO,SAAP,YAAAA,EAAe,WAAW,OAAOiC,GAAKA,EAAE,SAAU,CAAE,EAClE,MAAK,CAACD,EAAQ,QAAU,KAAK,KAAK,YAAYA,EAAU,KAAK,KAAK,UAAU,gBAAiB,GACtFA,CACX,CAEE,OAAO,iBAAiBE,EAAY,CAClC,OAAOA,EAAY,UAAY,OAAO,KAAK,QAAQ,SAAS,UAAYA,EAAY,aAAe,OAAO,KAAK,QAAQ,SAAS,aAAe,OAAO,KAAK,QAAQ,SAAS,MAChL,CACA,CAjPEjC,EAbWK,EAaJ,mBAAmB,IAAM,CAC9B,GAAI,CAAC,KAAK,KAAM,MAAO,CAAE,EAGzB,MAAM6B,EAAkB,MAAM,KAAK,KAAK,KAAK,OAAO,EAEpD,OAAAjC,EAAQ,IAAI,mBAAoB,CAC9B,KAAK,KAAK,GACViC,EACAA,EAAgB,OAAOC,GAAUA,EAAO,KAAK,CACnD,CAAK,EACMD,CACR,GAQDlC,EAjCWK,EAiCJ,uBAAuB,IAAM,CJrCtC,IAAAN,EAAAqC,EIsCI,MAAML,EAAU,IAAI,IACpB,UAAYM,KAAS,KAAK,KAAK,QAAU,CACvC,KAAM,CAAE,KAAAC,CAAI,EAAKD,EACX,CAAE,IAAAE,EAAK,OAAAC,EAAQ,KAAAZ,EAAM,SAAAa,GAAaJ,EAAM,OAAS,CAAE,EACzD,GAAKT,EAAO,CACV,MAAMc,EAAKD,EAAS,IAAI,YAAY,EAAI,MAAOL,GAAArC,EAAAyC,EAAO,aAAP,YAAAzC,EAAmB,KAAnB,YAAAqC,EAAuB,MACtEL,EAAQ,IAAIH,EAAM,CAAE,KAAAU,EAAM,IAAAC,EAAK,KAAAX,EAAM,GAAIc,GAAM,KAAM,CAC7D,CACA,CACI,OAAO,MAAM,KAAKX,EAAQ,OAAM,CAAE,CACtC,GAcE/B,EA1DWK,EA0DJ,oBAAoB,CAACM,EAASgC,EAAQC,IAAe,CAC1D,MAAMtB,EAAQ,KAAK,OAAO,IAAIX,CAAO,EAErC,GADAV,EAAQ,IAAI,oBAAqB,CAAC0C,EAAQC,CAAU,CAAC,EAClD,CAACtB,EAAO,OAAO,KAElB,IAAIP,EAAO4B,EAASrB,EAAM,MAAM,KAAMuB,GAC7BA,EAAG,KAAOF,CAClB,EAAI,KAEL,OAAI5B,IAEFA,EAAO6B,EAAatB,EAAM,MAAM,KAAMuB,GAAOA,EAAG,KAAK,YAAa,IAAKD,EAAW,YAAW,CAAE,EAAI,KAE/F7B,IAAOA,EAAOO,EAAM,MAAM,KAAMuB,GAAOA,EAAG,KAAK,YAAW,KAAQD,EAAa,aAAa,YAAa,CAAA,IAGxG7B,CACX,GAoEEf,EA/IWK,EA+IJ,aAAa,CAACyC,EAASC,IAAa,CACzC,IAAIC,EAAY,SAAS,cAAc,mBAAmB,EAE1D,GAAI,CAACA,EAAW,CAEd,MAAMC,EAAO,SAAS,cAAc,MAAM,EAC1CD,EAAY,SAAS,cAAc,OAAO,EAC1CA,EAAU,GAAK,mBACfA,EAAU,YAAc;AAAA;AAAA,EACxBC,EAAK,QAAQD,CAAS,CAC5B,CAGI,IAAIE,EAAUF,EAAU,YAGpBG,EAAYD,EAAQ,QAAQ,oBAAoB,EAChDE,EAAUF,EAAQ,QAAQ,IAAKC,CAAS,EAExCA,IAAc,KAEhBD,EAAU;AAAA;AAAA,EACVC,EAAY,EACZC,EAAUF,EAAQ,QAAQ,GAAG,GAO/B,MAAMG,EAHWH,EAAQ,UAAUC,EAAY,GAA6BC,CAAO,EAGrD,MAAM,GAAG,EACpC,IAAIE,GAAQA,EAAK,KAAM,CAAA,EACvB,OAAOA,GAAQA,IAAS,EAAE,EAGvBC,EAAU,CAAE,EAClBF,EAAa,QAAQC,GAAQ,CAC3B,MAAMzB,EAAQyB,EAAK,MAAM,GAAG,EAC5B,GAAIzB,EAAM,QAAU,EAAG,CACrB,MAAMS,EAAOT,EAAM,CAAC,EAAE,KAAM,EACtB2B,EAAQ3B,EAAM,MAAM,CAAC,EAAE,KAAK,GAAG,EAAE,OACnCS,IAAMiB,EAAQjB,CAAI,EAAIkB,EAClC,CACA,CAAK,EAIGV,EAAQ,SAAS,MAAM,GACvB,OAAOC,GAAa,UACpB,CAACA,EAAS,WAAW,GAAG,GACxB,CAACA,EAAS,WAAW,GAAG,GACxB,CAACA,EAAS,MAAM,0BAA0B,IAC5CA,EAAW,IAAIA,CAAQ,KAIzBQ,EAAQT,CAAO,EAAIC,EAGnB,MAAMU,EAAiB,OAAO,QAAQF,CAAO,EAC1C,IAAI,CAAC,CAACjB,EAAMkB,CAAK,IAAM,KAAKlB,CAAI,KAAKkB,CAAK,GAAG,EAC7C,KAAK;AAAA,CAAI,EAGNE,EACJR,EAAQ,UAAU,EAAGC,CAAS,EAC9B;AAAA,EACAM,EACA;AAAA,GACAP,EAAQ,UAAUE,EAAU,CAAC,EAG/BJ,EAAU,YAAcU,CACzB,GCrNI,MAAMC,EAAN,MAAMA,CAAW,CA6ItB,OAAO,sBAAsBjE,EAAMkE,EAAS,GAAO,CAEjD,OAAIlE,GAAQ,OAERkE,GAAYlE,EAAK,OAAS,MAAM,QAAQA,EAAK,KAAK,IAGpDA,EAAK,MAAQA,EAAK,MAAM,IAAImE,GACvBA,aAAa,KACGA,EAAE,OAAQ,EAGpBA,CAEV,GAEH5D,EAAQ,IAAI,aAAc,CAACP,EAAMA,EAAK,OAAO,CAAC,GAEvCA,CACX,CAOE,OAAO,yBAAyBA,EAAMkE,EAAS,GAAO,CACpD,IAAIE,EAAS,CAAE,GAAGpE,CAAM,EACxB,GAAI,CAACA,EAAM,OAAOoE,EAElB,GAAGF,GAAYlE,EAAK,OAASA,EAAK,MAAM,OAAS,EAAE,CACjD,MAAMqE,EAAQD,EAAO,MAAM,IAAID,GAAK,CAClC,IAAIG,EAAOH,EACX,OAAG,OAAOA,GAAM,SACdG,EAAO,KAAK,SAASH,CAAC,EAEtBG,EAAO,KAAK,SAAS,KAAK,UAAUH,CAAC,CAAC,EAExC5D,EAAQ,IAAI,OAAQ,CAAC+D,EAAMH,CAAC,CAAC,EACtBG,CACR,CAAA,EACD,OAAAF,EAAO,MAAQ,CAAC,GAAGC,CAAK,EACjBD,CACb,CAEI,OAAOA,CACX,CAEA,EA5LE9D,EADW2D,EACJ,UACP3D,EAFW2D,EAEJ,oBAAoB,IAAI,KAQ/B3D,EAVW2D,EAUJ,aAAcM,GAAiB,CACpC,MAAM,KAAKjF,GAAa,MAAO,IAAM,CAInC,GAHAiB,EAAQ,IAAI,kCAAkC,EAG1C,OAAO,UAAc,IAAa,CACpCA,EAAQ,MAAM,gFAAgF,EAC9F,GAAG,cAAc,MAAM,KAAK,KAAK,SAAS,6CAA6C,EAAG,CAAC,UAAW,EAAI,CAAC,EAC3G,MACR,CAEM,GAAI,CAEF0D,EAAW,OAAS,UAAU,eAAezE,CAAS,EAGlD+E,GACFA,EAAc,EAGhBhE,EAAQ,IAAI,iCAAkC,CAAC0D,EAAW,MAAM,CAAC,CAClE,OAAQO,EAAG,CACRjE,EAAQ,IAAI,6BAA8B,CAACiE,CAAC,CAAC,CACvD,CACA,CAAK,CACL,GAQElE,EA3CW2D,EA2CJ,eAAe,CAACrB,EAAM6B,IAAS,CAChCR,EAAW,QACbA,EAAW,OAAO,SAASrB,EAAM6B,CAAI,EACrClE,EAAQ,IAAI,mCAAoC,CAAC0D,EAAW,OAAQrB,CAAI,CAAC,GAEzErC,EAAQ,IAAI,oEAAqE,CAAC0D,EAAW,OAAQrB,CAAI,CAAC,CAEhH,GAQEtC,EA1DW2D,EA0DJ,cAAc,CAACH,EAAOY,IAAa,CACxCnE,EAAQ,IAAI,2BAA4B,CAACuD,CAAK,CAAC,EAC3CY,GACAA,EAAU,CAElB,GASEpE,EAxEW2D,EAwEJ,aAAa,MAAOU,KAAYC,IAAe,CACpD,GAAI,CAACX,EAAW,OAAQ,CACtB1D,EAAQ,IAAI,4DAA4D,EACxE,MACN,CACI,OAAO,MAAM0D,EAAW,OAAO,iBAAiBU,EAAS,GAAGC,CAAU,CAC1E,GASEtE,EAvFW2D,EAuFJ,aAAa,MAAOU,KAAYC,IAAe,CACpD,GAAI,CAACX,EAAW,OAAQ,CACtB1D,EAAQ,IAAI,sEAAsE,EAClF,MACN,CACI,OAAO,MAAM0D,EAAW,OAAO,mBAAmBU,EAAS,GAAGC,CAAU,CAC5E,GAUEtE,EAvGW2D,EAuGJ,cAAc,MAAOU,EAASE,KAAWD,IAAe,CAC7D,GAAI,CAACX,EAAW,OAAQ,CACpB1D,EAAQ,IAAI,8DAA8D,EAC1E,MACR,CAEI,GAAGsE,IAAW,KAAK,KAAK,GACtB,OAAAtE,EAAQ,IAAI,yCAA0C,CAACsE,CAAM,CAAC,EACvD,KAET,MAAMC,EAAe,GAAGH,CAAO,IAAIE,CAAM,GAGzC,GAAIZ,EAAW,kBAAkB,IAAIa,CAAY,EAC7C,OAAAvE,EAAQ,IAAI,yCAA0C,CAACuE,CAAY,CAAC,EAC7D,KAGXb,EAAW,kBAAkB,IAAIa,EAAc,EAAI,EAEnD,GAAI,CACA,MAAMC,EAAO,MAAMd,EAAW,OAAO,cAAcU,EAASE,EAAQ,GAAGD,CAAU,EACjF,OAAArE,EAAQ,IAAI,iCAAkC,CAACwE,CAAI,CAAC,EAC7CA,CACV,OAAQC,EAAO,CACZ,OAAAzE,EAAQ,IAAI,uCAAwC,CAACyE,CAAK,CAAC,EACpD,IACf,QAAc,CAENf,EAAW,kBAAkB,OAAOa,CAAY,CACxD,CACA,GAtIO,IAAMG,EAANhB,ELPP,IAAAiB,GAAAC,GMUO,MAAMC,EAAN,MAAMA,CAAa,CAMxB,OAAO,MAAM,CACX,MAAM,GAAG/F,EAAW,oBAAqBgG,EAAAD,EAAaF,GAAAC,GAAoB,CAC9E,CAoEE,OAAO,WAAWnF,EAAK,CACrB,KAAM,CAAE,SAAAsF,EAAU,OAAAC,EAAQ,QAAAC,EAAS,OAAAC,CAAQ,EAAGzF,EAE9CsF,EAAS,WAAY,CACzB,CA0IE,OAAO,mBAAmBI,EAAOjD,EAAQ+C,EAAQ,CAC/CjF,EAAQ,IAAI,qBAAsB,CAACmF,EAAOjD,EAAQ+C,EAAS,IAAI,CAAC,EAChE,KAAM,CAAE,SAAAF,CAAQ,EAAKF,EAAa,gBAAgB3C,EAAO,QAAQ,YAAY,EAG7E6C,EAAS,WAAW,CAClB,MAAOI,EACP,UAAWjD,EAAO,QAAQ,YAAc,OACxC,aAAcA,EAAO,QAAQ,eAAiB,OAC9C,WAAYA,EAAO,QAAQ,WAC3B,WAAYA,EAAO,QAAQ,WAC3B,YAAaA,EAAO,QAAQ,WAClC,EAAO,CAAA,EAAI+C,CAAO,CAClB,CAsCE,OAAO,gBAAgBG,EAAa,CNvRtC,IAAAtF,EAAAqC,EAAAkD,EMwRI,MAAMC,EAAeF,EAAa,MAAM,GAAG,EACrC/D,EAAQ,KAAK,OAAO,IAAIiE,EAAa,CAAC,CAAC,EACvCxE,EAAOO,GAAA,YAAAA,EAAO,MAAM,IAAIiE,EAAa,CAAC,GACtCP,IAAW5C,GAAArC,EAAAgB,GAAA,YAAAA,EAAM,SAAN,YAAAhB,EAAc,aAAd,YAAAqC,EAA0B,IAAImD,EAAa,CAAC,OAAMD,EAAAvE,GAAA,YAAAA,EAAM,aAAN,YAAAuE,EAAkB,IAAIC,EAAa,CAAC,IAEvG,MAAO,CAAE,MAAAjE,EAAO,KAAAP,EAAM,SAAAiE,CAAU,CACpC,CA+CA,EAnUOJ,GAAA,YA0PEC,GAAoB,SAACK,EAASM,EAAM9F,EAAM,CNpQnD,IAAAK,EAAAqC,EAAAkD,EMsQI,MAAMG,IAAQ1F,EAAAmF,EAAQ,QAAR,YAAAnF,EAAgBb,OAAcoG,GAAAlD,EAAA1C,EAAK,UAAL,YAAA0C,EAAc,QAAd,YAAAkD,EAAsBpG,IAElE,GADAe,EAAQ,IAAI,uBAAwB,CAACiF,EAASM,EAAM9F,EAAM+F,CAAK,CAAC,EAC5D,EAACA,GAAA,MAAAA,EAAO,iBAAiB,OAG7B,MAAMJ,EAAeI,EAAM,aAC3B,GAAI,CAACJ,EAAc,OACnB,KAAM,CAAE,SAAAL,CAAU,EAAGF,EAAa,gBAAgBO,CAAY,EAE1DL,IACF/E,EAAQ,IAAI,mDAAoD,CAAC+E,EAAUE,EAASM,CAAI,CAAC,EAGzFR,EAAS,sBAAsBE,EAASM,EAAK,CAAC,CAAC,EAErD,EA3QOE,EAAMZ,EAANF,IAcL5E,EAdW8E,EAcJ,kBAAkB,MAAOpF,GAAS,CNxB3C,IAAAK,EAAAqC,EAAAkD,EAAAK,EMyBI,KAAM,CAAE,aAAAN,EAAc,UAAAO,EAAW,OAAAX,EAAQ,OAAAE,EAAQ,QAAAD,CAAO,EAAKxF,EAC7DO,EAAQ,IAAI,qBAAsB,CAAC2F,EAAWX,EAAQE,EAAQD,EAASxF,CAAI,CAAC,EACzDmG,EAAa,kBAAkB,KAAK,KAAK,EAAE,EAC9D,MAAMC,EAAmBb,EAAO,YAAc,OAAOA,EAAO,WAAW,EAAI,EACrEM,EAAeF,EAAa,MAAM,GAAG,EACrC/D,EAAQ,KAAK,OAAO,IAAIiE,EAAa,CAAC,CAAC,EACvCxE,EAAOO,GAAA,YAAAA,EAAO,MAAM,IAAIiE,EAAa,CAAC,GACtCP,IAAW5C,GAAArC,EAAAgB,GAAA,YAAAA,EAAM,SAAN,YAAAhB,EAAc,aAAd,YAAAqC,EAA0B,IAAImD,EAAa,CAAC,OAAMD,EAAAvE,GAAA,YAAAA,EAAM,aAAN,YAAAuE,EAAkB,IAAIC,EAAa,CAAC,IACjG7D,IAAWiE,EAAAV,EAAO,YAAP,YAAAU,EAAmB,KAAMX,EAAS,KAC7Ce,EAAqBpB,EAAW,yBAAyBM,EAAQ,EAAI,EAI3E,GAFAhF,EAAQ,IAAI,qBAAsB,CAACyB,EAAUqE,EAAoBrG,CAAI,CAAC,EAEnE,CAAC4B,GAAS,CAACP,GAAQ,CAACiE,EAAU,OACjC,MAAMgB,EAAgB,CACpB,GAAGD,EACH,QAASf,EACT,MAAOe,EAAmB,OAAS,CAAA,CACpC,EACKE,EAAgB,CACpB,GAAGd,CACJ,EACKe,EAAiB,CACrB,GAAGhB,EACH,OAAQa,EAAmB,MAC5B,EAOD,OALID,GAAoB,CAACE,EAAc,MAAM,SAAS,cAAc,GAClEA,EAAc,MAAM,KAAK,cAAc,EAIlCtE,EAAQ,CACb,KAAKtC,EAAW,OAAO,KAAK,CAC1B0F,EAAa,UAAU,CAAC,SAAAE,EAAU,OAAQgB,EAAe,QAASE,EAAgB,OAAQD,CAAa,CAAC,EACxGhG,EAAQ,IAAI,yBAA0B,CAAC+F,EAAeC,EAAeC,CAAc,CAAC,EAGpF,KACR,CACM,KAAK9G,EAAW,OAAO,KAAK,CAC1Ba,EAAQ,IAAI,yBAA0B,CAAC+E,EAAUgB,EAAeC,EAAeC,CAAc,CAAC,EAE9FpB,EAAa,UAAU,CAAC,SAAAE,EAAU,OAAQgB,EAAe,QAASE,EAAgB,OAAQD,CAAa,CAAC,EACxG,KACR,CACM,KAAK7G,EAAW,KAAK,KAAK,CACxBa,EAAQ,IAAI,uBAAwB,CAAC+F,CAAa,CAAC,EACnDE,EAAe,OAAS,GACxBlB,EAAS,IAAIgB,EAAeC,EAAeC,CAAc,EAEzD,KACR,CAIA,CAEIjG,EAAQ,IAAI,qBAAsB,CAACoF,EAAcJ,EAAQvF,CAAI,CAAC,CAClE,GAaEM,EAvFW8E,EAuFJ,YAAY,MAAOpF,GAAS,CACjC,KAAM,CAAE,SAAAsF,EAAU,OAAAC,EAAQ,QAAAC,EAAS,OAAAC,CAAQ,EAAGzF,EACxCyG,EAAU,MAAMnB,EAAS,kBAAkBE,CAAO,EAChCF,EAAS,SAAS,MAAM,QAChD,MAAMoB,EAAeD,EAAQ,QAAQ,KAAKE,GAAWA,EAAQ,QAAQ,SAAW,YAAY,EAE5FpG,EAAQ,IAAI,eAAgB,CAACP,CAAI,CAAC,EAElC,MAAM4G,EAAmB,CACvB,YAAarB,EAAO,YACpB,WAAYA,EAAO,WACnB,UAAWA,EAAO,UAClB,aAAcA,EAAO,aACrB,WAAYA,EAAO,UACzB,EACImB,EAAa,QAAU,CACrB,GAAGA,GAAA,YAAAA,EAAc,QACjB,GAAGE,EACH,OAAQ,aACR,aAActB,EAAS,MAAQ,EACrC,EAWIA,EAAS,SAAS,MAAM,QAAU,CAChC,GAAGA,EAAS,SAAS,MAAM,QAC3B,WAAcF,EAAa,kBAEjC,EAEI,MAAMyB,EAAgB,QAAQ,MAAM,YAAY,CAC9C,SAAUrB,EAAQ,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EAClE,KAAM,CACJ,QAAS,MAAM,eAAeF,EAAS,SAAS,MAAM,SAAUmB,CAAO,EACvE,QAAS,YAAY,WAAW,CAAE,MAAOnB,EAAS,MAAO,EACzD,MAAO,CACL,KAAM,CAAE,UAAW,EAAM,EACzB,CAAC9F,CAAS,EAAG,CACX,gBAAiB,GACjB,aAAc8F,EAAS,KACvB,aAAcA,EAAS,IACnC,CACA,CACA,CACK,EAAEE,CAAO,EAEJU,EAAY,CAAC,KAAK,EAClBY,EAAoBX,EAAa,kBAAkBD,EAAW,KAAK,KAAK,EAAE,EAChFT,EAAO,UAAY,CAACqB,EAEpBvG,EAAQ,IAAI,YAAa,CAAC+E,EAAUmB,EAASI,EAAe7G,CAAI,CAAC,EACpD,MAAM,YAAY,OAAO6G,EAAc,IAAI,EAGxDvB,EAAS,WAAWsB,EAAkBnB,EAAQ,CAAC,OAAQ,EAAI,CAAC,CAEhE,GAOGnF,EA7JU8E,EA6JH,YAAY,MAAOpF,GAAS,CNvKtC,IAAAK,EAAAqC,EAAAkD,EMwKI,KAAM,CAAE,SAAAN,EAAU,OAAAC,EAAQ,QAAAC,EAAS,OAAAC,CAAQ,EAAGzF,EAI9C,GAHAO,EAAQ,IAAI,eAAgB,CAACP,EAAMuF,EAAO,UAAU,CAAC,EAGjDA,EAAO,OAASA,EAAO,MAAM,OAAS,EAAG,CAE9BA,EAAO,MAAM,CAAC,EAG3B,MAAMwB,EAAmB,CACvB,MAAOxB,EAAO,MACd,YAAaA,EAAO,aAAe,GACnC,WAAYA,EAAO,WACnB,QAASD,CAUV,EAED/E,EAAQ,IAAI,qCAAsC,CAACwG,CAAgB,CAAC,EAGpE,MAAMb,KADc7F,EAAAiF,GAAA,YAAAA,EAAU,SAAV,YAAAjF,EAAkB,UAASuF,GAAAlD,EAAA4C,GAAA,YAAAA,EAAU,QAAV,YAAA5C,EAAkB,KAAlB,YAAAkD,EAAsB,QAAS,CAAE,GAClD,IAAIoB,GAAQ,IAAMA,EAAK,YAAY,EAC3DF,EAAoBX,EAAa,kBAAkBD,EAAW,KAAK,KAAK,EAAE,EAChFT,EAAO,UAAY,CAACqB,EACpBvG,EAAQ,IAAI,eAAgB,CAACwG,EAAkBtB,CAAM,CAAC,EACtDL,EAAa,WAAW,CAAE,OAAQ2B,EAAkB,WAAYA,EAAiB,WAAY,EAE7F,MACN,CAGIxG,EAAQ,IAAI,mDAAmD,EAC/D+E,EAAS,WAAY,CAmBzB,GAoEEhF,EA5RW8E,EA4RJ,aAAa,MAAMpF,GAAS,CACjC,GAAI,CAAE,SAAAsF,EAAU,WAAA2B,EAAY,OAAA1B,EAAQ,SAAA2B,EAAU,YAAAC,EAAa,SAAAC,EAAU,QAAAC,CAAO,EAAKrH,EAGjFkH,GAAWA,GAAA,YAAAA,EAAU,MAAM,OAAQ,CAAE,EACrCC,GAAcA,GAAA,YAAAA,EAAa,MAAM,OAAQ,CAAE,EAE3C,MAAMG,EAAa,CACjB,GAAG/B,EACH,WAAA0B,EACA,UAAW,CAAC,QAAQ,EACpB,MAAOC,EAAS,IAAI,CAACK,EAASC,IAAQ,CNjT5C,IAAAnH,EMkTQ,MAAMoH,IAAQpH,EAAA8G,EAAYK,CAAG,IAAf,YAAAnH,EAAkB,MAAM,OAAQ,CAAE,EAChD,MAAO,CACL,MAAO,CAACkH,CAAO,EACf,QAAS,CAAE,KAAME,EAAM,CAAC,EAAG,MAAAA,CAAK,CACjC,CACF,CAAA,CACF,EAEKZ,EAAgB,CACpB,OAAQ,GACR,KAAM,CACJ,MAAO,CACL,MAAO,CACL,YAAa,OACb,KAAM,CAAE,KAAMO,CAAU,EACxB,QAASzG,EAAY,qBAAoB,CACrD,CACS,EACD,OAAQ,KAAK,KAAK,SAAS,SAASyG,IAAa,UAAY,UAAY,QAAQ,MAAM,EACvF,QAAS,YAAY,eAAe,WAAU,CACtD,CACK,EAEK/C,EAAQ,MAAM,OAAO,KAAK,WAAW,MAAMiD,EAAY,CAAE,EAAET,CAAa,EACxExC,GAAA,MAAAA,EAAO,QACb,MAAM,QAAQ,qBAAsBA,CAAK,CAC7C,GAlUO,IAAMqD,GAANtC,ENVP,IAAA/E,GAAAqC,GO2XA,KAAM,CAAE,eAAgBiF,GAAO,cAAAC,EAAe,IAAIlF,IAAArC,GAAA,QAAQ,UAAR,YAAAA,GAAiB,cAAjB,YAAAqC,GAA8B,kBAAmB,gBAQ5FiF,GAAM,IACFA,GAAM,QAAQ,OAAOE,GAAKA,EAAE,WAAW,SAAS,CAAC,EACpDF,GAAM,QAAQ,OAAOE,GAAK,CAACA,EAAE,WAAW,SAAS,CAAC,EACjDF,GAAM,MC/Xf,MAAMG,GAAiB,CAAE,EAwQlB,SAASC,GAAYC,EAAY,CAAE,UAAAC,EAAU,GAAO,SAAAC,EAAS,EAAO,EAAC,GAAI,CAC9E,MAAMhG,EAAOiG,GAAgBH,CAAU,EACjC,CAAE,WAAAI,EAAY,WAAYC,CAAE,EAAK,QAAQ,MAAM,UAAUnG,CAAI,EAC7DoG,EAAOF,GAAA,YAAAA,EAAY,SAAS,GAGlC,GAAKF,GAAY,CAACD,EAAY,OAAOG,GAAA,YAAAA,EAAY,YAAYC,GAE7D,MAAME,EAAQT,GAAeQ,CAAI,EAC3BE,EAAUD,aAAiB,QAGjC,GAAKN,EAAY,CACf,MAAMQ,EAAQL,GAAA,YAAAA,EAAY,MAAM,IAAIC,GACpC,OAAOG,EAAUC,GAAQF,GAAA,YAAAA,EAAQF,KAAOI,CAC5C,CAGE,GAAKD,EAAU,OAAOD,EAAM,KAAK,IAAMT,GAAeQ,CAAI,EAAED,CAAE,CAAC,EAC1D,GAAKE,EAAQ,OAAOA,EAAMF,CAAE,EACjC,GAAK,CAACD,EAAa,OAGnB,MAAMM,EAASC,GAAkB,EAC3BC,EAAUR,EAAW,SAAS,CAAE,OAAAM,EAAQ,EAAE,KAAKD,GAAS,CAC5D,MAAMI,EAAQJ,EAAM,OAAO,CAACK,EAAKC,KAC/BD,EAAIC,EAAM,GAAG,EAAIA,EACVD,GACN,EAAE,EACL,OAAAhB,GAAeQ,CAAI,EAAIO,EAChBA,EAAMR,CAAE,CACnB,CAAG,EACD,OAAAP,GAAeQ,CAAI,EAAIM,EAChBA,CACT,CASO,SAAST,GAAgBH,EAAY,CAC1C,GAAKA,EAAW,WAAW,aAAa,EAAI,OAAOA,EACnD,IAAIM,EAAO,OAAO,MAAM,YAAY,MAChC,CAACU,EAAOZ,EAAYC,CAAE,EAAIL,EAAW,MAAM,GAAG,EAClD,OAAKgB,GAASZ,IAAaE,EAAO,GAAGU,CAAK,IAAIZ,CAAU,IAClDC,IAAKA,EAAKL,GACT,cAAcM,CAAI,SAASD,CAAE,EACtC,CASO,SAASM,IAAmB,CACjC,MAAMD,EAAS,CAAC,mBAAmB,EACnC,UAAYO,KAAe,OAAO,OAAO,OAAO,MAAM,MAAM,EACpDA,EAAY,UAClBP,EAAO,KAAK,UAAUO,EAAY,SAAS,OAAO,EAAE,EAEtD,OAAOP,CACT,CRjVA,IAAAQ,GAAAC,ESYO,MAAMC,EAAN,MAAMA,CAAiB,CAW5B,OAAO,MAAM,CACXA,EAAiB,2BAA4B,CACjD,CAME,OAAO,iBAAiB,CACtB,MAAMC,EAAW,KAAK,OAAO,OAAO,CAACzH,EAAO6G,IACtB7G,EAAM,OAAS,WAEpC,EACD,OAAAyH,EAAS,KAAK,CAACC,EAAGC,IAAMD,EAAE,KAAK,cAAcC,EAAE,IAAI,CAAC,EACpDH,EAAiB,OAAO,GAAKC,EACtBA,CACX,CAME,OAAO,cAAc,CT7CvB,IAAAhJ,ES8CI,MAAMmJ,GAAgBnJ,EAAA,KAAK,OAAO,SAAZ,YAAAA,EAAoB,OAAO,IAAIsC,GAASA,EAAM,OACpEpC,EAAQ,IAAI,eAAgB,CAACiJ,CAAa,CAAC,EAC3C,MAAMC,EAAYD,EAAc,OAAO,CAAC5H,EAAO6G,IAC/B7G,EAAM,OAAS,KAE9B,EACD,OAAA6H,EAAU,KAAK,CAAC,EAAGF,IAAM,EAAE,KAAK,cAAcA,EAAE,IAAI,CAAC,EAErDH,EAAiB,OAAO,IAAMK,EACvBA,CACX,CAKE,OAAO,4BAA6B,CAClC,MAAMC,EAAgB,CACpB,2DACD,EACD,OAAO,cAAcA,CAAa,CACtC,CAME,OAAO,wBAAyB,CAI9B,SAAS,cAAc,gBAAgB,EAAE,mBAAmB,aAH7B,uIAGiE,EAChG,MAAMC,EAAqB,SAAS,cAAc,wBAAwB,EACxD,OAAAxD,EAAa,gBAG/BwD,EAAmB,iBAAiB,QAASP,EAAiB,qBAAqB,EACnFO,EAAmB,iBAAiB,aAAcP,EAAiB,cAAc,EACjFO,EAAmB,iBAAiB,aAAcP,EAAiB,cAAc,EAEjF7I,EAAQ,IAAI,OAAQ,CAAC,KAAM,OAAO,KAAK,CAAC,EACjCoJ,CACX,CAME,aAAa,eAAejE,EAAO,CAChBhF,EAAW,EAE5B,MAAM2I,EAAWD,EAAiB,gBAAiB,EAC7CK,EAAYL,EAAiB,aAAc,EAC3CQ,EAAe,SAAS,cAAc,qBAAqB,EAC3DC,EAAe,SAAS,cAAc,wBAAwB,EAC9DC,EAAMV,EAAiB,YAGzBQ,GACFA,EAAa,OAAQ,EAIvB,MAAMG,EAAgBD,IAAQ,KAAOT,EAAWI,EAEhDlJ,EAAQ,IAAI,iBAAkB,CAACuJ,EAAKV,EAAiB,eAAeU,CAAG,EAAGV,EAAiB,WAAW,CAAC,EACvG7I,EAAQ,IAAI,OAAQ,CAAC6I,EAAiB,aAAc,CAAA,CAAC,EACrD,MAAMY,EAAe,OAAO,OAAOnK,CAAoB,EAAE,IAAIoK,IAAW,CACtE,GAAIA,EAAO,KACX,KAAMA,EAAO,MACb,SAAU,GACV,SAAUA,EAAO,UAAY,IACnC,EAAM,EACeb,EAAiB,eAAeU,CAAG,EAAE,IAAIlI,GAASA,EAAM,EAAE,EAE3E,MAAMsI,EAAW,MAAM,eAAe,4DAA6D,CACjG,OAAQH,EAAc,IAAInI,GAAS,CTzHzC,IAAAvB,EAAAqC,ES0HQ,MAAMyH,EAAaf,EAAiB,eAAeU,CAAG,EAAE,KAAKM,GAAiBA,EAAc,KAAOxI,EAAM,EAAE,EAC3G,IAAIyI,EAAc,CAAE,EAEpB,OAAIzI,EAAM,OAAS,YACjByI,EAAc,CACZ,CAAE,OAAQ,KAAM,MAAOzI,EAAM,OAAO,WAAW,GAAG,KAAO,EACzD,CAAE,OAAQ,KAAM,MAAOA,EAAM,OAAO,WAAW,GAAG,KAAO,EACzD,CAAE,OAAQ,KAAM,MAAOA,EAAM,OAAO,WAAW,OAAS,EACxD,CAAE,OAAQ,MAAO,MAAOA,EAAM,OAAO,OAAO,IAAI,OAAO,CACxD,EACQA,EAAM,OAAS,QAExByI,EAAc,CACZ,CAAE,OAAQ,KAAM,MAAOzI,EAAM,OAAO,WAAW,GAAG,OAAS,EAAI,EAC/D,CAAE,OAAQ,KAAM,MAAOA,EAAM,OAAO,WAAW,GAAG,OAAS,EAAI,EAC/D,CAAE,OAAQ,KAAM,MAAOA,EAAM,OAAO,WAAW,SAAW,EAAI,EAC9D,CAAE,OAAQ,MAAO,QAAOc,GAAArC,EAAAuB,EAAM,OAAO,SAAb,YAAAvB,EAAqB,MAArB,YAAAqC,EAA0B,UAAW,EAAE,CAChE,GAGI,CACL,GAAId,EAAM,GACV,KAAMA,EAAM,KACZ,IAAKA,EAAM,IACX,SAAUuI,EACV,YAAAE,CACD,CACT,CAAO,EACD,YAAajB,EAAiB,YAC9B,UAAW,GACX,aAAcY,EACd,aAAcZ,EAAiB,aAC/B,gBAAiBjD,EAAa,gBAC9B,YAAaiD,EAAiB,YAC9B,YAAajD,EAAa,WAChC,CAAK,EAED,SAAS,KAAK,mBAAmB,YAAa,gCAAgC+D,CAAQ,QAAQ,EAC9Fd,EAAiB,WAAa,SAAS,cAAc,qBAAqB,EAG1E,MAAMkB,EAAaT,EAAa,sBAAuB,EACjDU,EAAYD,EAAW,IACRA,EAAW,OAEhC,MAAME,EAAOpB,EAAiB,WAC9BoB,EAAK,iBAAiB,aAAcpB,EAAiB,cAAc,EACnEoB,EAAK,MAAM,OAAS,IAGpBA,EAAK,MAAM,MAAQ,oCACnBA,EAAK,MAAM,IAAM,GAAGD,CAAS,KAK7B,WAAW,IAAM,CACf,MAAME,EAAWD,EAAK,sBAAuB,EACvCE,EAAiB,OAAO,YAE1BD,EAAS,OAASC,GACpBF,EAAK,MAAM,IAAM,OACjBA,EAAK,UAAU,IAAI,SAAS,GAE5BA,EAAK,UAAU,OAAO,SAAS,EAGjCpB,EAAiB,iBAAiBA,EAAiB,UAAU,CAC9D,EAAE,CAAC,EAEJA,EAAiB,mBAAoB,CACzC,CAEE,OAAO,iBAAiBc,EAAS,CAC/B,MAAMS,EAAaT,EAAS,iBAAiB,QAAQ,EAC/CU,EAAYV,EAAS,iBAAiB,mBAAmB,EACzDW,EAAoBX,EAAS,cAAc,oBAAoB,EAC/DY,EAAmBZ,EAAS,cAAc,qBAAqB,EAC/Da,EAAiBb,EAAS,cAAc,wBAAwB,EAChEc,EAAgBd,EAAS,cAAc,sBAAsB,EAC7De,EAAaf,EAAS,iBAAiB,qBAAqB,EAElEd,EAAiB,kBAAoByB,EAGrCF,EAAW,QAAQtJ,GAAQ,CACzBA,EAAK,iBAAiB,QAAS+H,EAAiB,aAAa,EAC7D/H,EAAK,iBAAiB,cAAe+H,EAAiB,cAAc,CAC1E,CAAK,EAEDwB,EAAU,QAAQM,GAAW,CAC3BA,EAAQ,iBAAiB,QAAS9B,EAAiB,gBAAgB,CACzE,CAAK,EAGDyB,EAAkB,iBAAiB,SAAUzB,EAAiB,iBAAiB,EAC/E0B,EAAiB,iBAAiB,QAAS1B,EAAiB,gBAAgB,EAC5E2B,EAAe,iBAAiB,SAAU3B,EAAiB,qBAAqB,EAChF4B,EAAc,iBAAiB,SAAU5B,EAAiB,oBAAoB,EAG9E6B,EAAW,QAAQnB,GAAO,CACxBA,EAAI,iBAAiB,QAASV,EAAiB,UAAU,CAC/D,CAAK,CACL,CAEE,OAAO,sBAAsB1D,EAAM,CTpOrC,IAAArF,ESqOI,MAAM8K,EAAWzK,EAAa,EACxB0K,EAAa,SAAS,cAAc,wBAAwB,EAC5DC,GAAahL,EAAA+I,EAAiB,aAAjB,YAAA/I,EAA6B,cAAc,wDACxDiL,EAAe5F,EAAM,OAAO,KAAO,wBACnC6F,EAAYD,EAAe,CAAC5F,EAAM,OAAO,UAAU,SAAS,QAAQ,EAAI2F,GAAA,YAAAA,EAAY,QAE1F9K,EAAQ,IAAI,wBAAyB,CAACgL,EAAWD,CAAY,CAAC,EAE3DC,GACDH,EAAW,UAAU,IAAI,QAAQ,EAC9BC,IAAaA,EAAW,QAAU,MAErCD,EAAW,UAAU,OAAO,QAAQ,EACjCC,IAAaA,EAAW,QAAU,KAGvClF,EAAa,gBAAkBoF,EAC/BhK,EAAa,IAAI4J,EAAS,oBAAoB,IAAKI,CAAS,CAChE,CAEE,OAAO,qBAAqB7F,EAAM,CAChC,MAAMyF,EAAWzK,EAAa,EAExB6K,EADS7F,EAAM,OACI,QAEzBnF,EAAQ,IAAI,uBAAwB,CAACgL,CAAS,CAAC,EAE/CpF,EAAa,YAAcoF,EAC3BhK,EAAa,IAAI4J,EAAS,YAAY,IAAKI,CAAS,CAIxD,CAKE,OAAO,gBAAiB,CACtB,MAAMf,EAAOpB,EAAiB,WAC3BA,EAAiB,cAChBoB,GAEF,WAAW,IAAM,CACVA,EAAK,QAAQ,QAAQ,IACxBA,EAAK,OAAQ,EAGbpB,EAAiB,oBAAsB,KAE1C,EAAE,GAAG,CAEZ,CAME,OAAO,kBAAmB,CACxB,MAAMoC,EAAmBpC,EAAiB,WAAW,cAAc,kBAAkB,EACjFoC,GACFA,EAAiB,UAAU,IAAI,SAAS,EAEfA,EAAiB,iBAAiB,IAAI,EAC9C,QAAQnK,GAAQ,CAC1BA,EAAK,oBACRA,EAAK,iBAAiB,QAASoK,EAAArC,EAAiBF,GAAmB,EACnE7H,EAAK,kBAAoB,GAEnC,CAAO,GAEDd,EAAQ,IAAI,+BAAgC,EAAE,CAEpD,CAKE,OAAO,kBAAmB,CACxB,MAAMiL,EAAmBpC,EAAiB,WAAW,cAAc,kBAAkB,EACjFoC,GACFA,EAAiB,UAAU,OAAO,SAAS,EAG7CpC,EAAiB,cAAe,CACpC,CAME,OAAO,0BAA0BsC,EAAe,CT/TlD,IAAArL,ESgUI,MAAMyJ,EAAMV,EAAiB,YACvBuC,EAASvC,EAAiB,eAAeU,CAAG,EAG5C8B,EAAc,OAAO,OAAO/L,CAAoB,EAAE,KAAKoK,GAAUA,EAAO,OAASyB,CAAa,EAEpG,GADAnL,EAAQ,IAAI,4BAA6B,CAACoL,EAAQC,EAAaF,CAAa,CAAC,EACzE,CAACE,EACH,OAIF,GAAGA,EAAY,UAAY,MAAQD,EAAO,OAAS,EAAE,CACnDxF,EAAa,gBAAgBwF,EAAO,CAAC,EAAG,CACtC,OAAQ,CAAE,UAAW,CAACD,CAAa,CAAG,EACtC,OAAQC,GAAU,CAAA,CAC1B,CAAO,EAEDpL,EAAQ,IAAI,mDAAoD,CAACoL,EAAQD,CAAa,CAAC,EAMvF,MACN,CAEI,MAAMG,EAAgBzC,EAAiB,WAAW,cAAc,eAAe,EAC/E,GAAI,CAACyC,EAAiB,OAGtBA,EAAc,UAAY,GAG1B,MAAMC,EAAU,OAAO,MAAMF,EAAY,OAAO,EAEhD,GADArL,EAAQ,IAAI,+BAAgC,CAACmL,EAAeI,EAAS,OAAO,KAAK,CAAC,EAC9E,EAACA,EAGL,UAAW,CAACC,EAAKxG,CAAM,IAAK,OAAO,QAAQuG,CAAO,EAAG,CACnD,MAAME,EAAK,SAAS,cAAc,IAAI,EAKtC,GAJAA,EAAG,QAAQ,aAAeD,EAC1BC,EAAG,QAAQ,QAAUzG,EAAO,SAAWwG,EACvCC,EAAG,QAAQ,MAAQzG,EAAO,OAAS,GACnCyG,EAAG,QAAQ,KAAON,EACfE,EAAY,UAAY/L,EAAqB,KAAK,QAAQ,CAC3D,MAAMoM,EAAW,OAAO,MAAM,iBAAiB,MAAMF,CAAG,EAClDG,EAAWD,GAAWE,EAAAA,GAAkBF,EAAS,GAAI,CAAE,UAAW,EAAI,CAAE,IAAlDE,YAAAA,EAAqD,KAAO,KACxFH,EAAG,QAAQ,MAAQE,CAC3B,CACMF,EAAG,UAAY,uCAAuCA,EAAG,QAAQ,KAAK,GAGtEA,EAAG,iBAAiB,QAASP,EAAArC,EAAiBD,EAAmB,EAEjE0C,EAAc,YAAYG,CAAE,CAClC,CAGIH,EAAc,UAAU,IAAI,SAAS,EACzC,CAKE,OAAO,eAAgB,CACrB,MAAMA,EAAgBzC,EAAiB,WAAW,cAAc,eAAe,EAC3EyC,IACFA,EAAc,UAAU,OAAO,SAAS,EACxCA,EAAc,iBAAiB,WAAW,EAAE,QAAQxK,GAAQA,EAAK,UAAU,OAAO,UAAU,CAAC,EAC7F+H,EAAiB,mBAAqB,KAE5C,CAEE,OAAO,iBAAiB,EAAE,CACxB,MAAMgD,EAAW,EAAE,OACnBhD,EAAiB,aAAe,CAACA,EAAiB,aAE/CA,EAAiB,cAClBgD,EAAS,UAAU,IAAI,iBAAiB,EACxCA,EAAS,UAAU,OAAO,sBAAsB,IAEhDA,EAAS,UAAU,IAAI,sBAAsB,EAC7CA,EAAS,UAAU,OAAO,iBAAiB,EAEjD,CAEE,OAAO,iBAAiB/K,EAAMgL,EAAc,CAC1ChL,EAAK,QAAQ,SAAWgL,EAAgB,OAAS,QACjD,MAAMC,EAAOjL,EAAK,cAAc,iBAAiB,EACjDd,EAAQ,IAAI,mBAAoB,CAACc,EAAMgL,CAAa,CAAC,EAElDA,GACDhL,EAAK,UAAU,IAAI,UAAU,EAC7BiL,EAAK,UAAU,IAAI,eAAe,EAClCA,EAAK,UAAU,OAAO,WAAW,IAEjCjL,EAAK,UAAU,OAAO,UAAU,EAChCiL,EAAK,UAAU,OAAO,eAAe,GAGzClD,EAAiB,cAAe,CAClC,CAMA,OAAO,0BAA0BsC,EAAe,CT3ahD,IAAArL,ES4aE,MAAMyJ,EAAMV,EAAiB,YACvBuC,EAASvC,EAAiB,eAAeU,CAAG,EAG5C8B,EAAc,OAAO,OAAO/L,CAAoB,EAAE,KAAKoK,GAAUA,EAAO,OAASyB,CAAa,EAEpG,GADAnL,EAAQ,IAAI,4BAA6B,CAACoL,EAAQC,EAAaF,CAAa,CAAC,EACzE,CAACE,EACH,OAIF,GAAGA,EAAY,UAAY,MAAQD,EAAO,OAAS,EAAE,CACnDxF,EAAa,gBAAgBwF,EAAO,CAAC,EAAG,CACtC,OAAQ,CAAE,UAAW,CAACD,CAAa,CAAG,EACtC,OAAQC,GAAU,CAAA,CACxB,CAAK,EAEDpL,EAAQ,IAAI,mDAAoD,CAACoL,EAAQD,CAAa,CAAC,EAMvF,MACJ,CAEE,MAAMG,EAAgBzC,EAAiB,WAAW,cAAc,eAAe,EAC/E,GAAI,CAACyC,EAAiB,OAGtBA,EAAc,UAAY,GAG1B,MAAMC,EAAU,OAAO,MAAMF,EAAY,OAAO,EAEhD,GADArL,EAAQ,IAAI,+BAAgC,CAACmL,EAAeI,EAAS,OAAO,KAAK,CAAC,EAC9E,EAACA,EAGL,UAAW,CAACC,EAAKxG,CAAM,IAAK,OAAO,QAAQuG,CAAO,EAAG,CACnD,MAAME,EAAK,SAAS,cAAc,IAAI,EAKtC,GAJAA,EAAG,QAAQ,aAAeD,EAC1BC,EAAG,QAAQ,QAAUzG,EAAO,SAAWwG,EACvCC,EAAG,QAAQ,MAAQzG,EAAO,OAAS,GACnCyG,EAAG,QAAQ,KAAON,EACfE,EAAY,UAAY/L,EAAqB,KAAK,QAAQ,CAC3D,MAAMoM,EAAW,OAAO,MAAM,iBAAiB,MAAMF,CAAG,EAClDG,EAAWD,GAAWE,EAAAA,GAAkBF,EAAS,GAAI,CAAE,UAAW,EAAI,CAAE,IAAlDE,YAAAA,EAAqD,KAAO,KACxFH,EAAG,QAAQ,MAAQE,CACzB,CACIF,EAAG,UAAY,uCAAuCA,EAAG,QAAQ,KAAK,GAGtEA,EAAG,iBAAiB,QAASP,EAAArC,EAAiBD,EAAmB,EAEjE0C,EAAc,YAAYG,CAAE,CAChC,CAGEH,EAAc,UAAU,IAAI,SAAS,EACvC,CAKA,OAAO,eAAgB,CACrB,MAAMA,EAAgBzC,EAAiB,WAAW,cAAc,eAAe,EAC3EyC,IACFA,EAAc,UAAU,OAAO,SAAS,EACxCA,EAAc,iBAAiB,WAAW,EAAE,QAAQxK,GAAQA,EAAK,UAAU,OAAO,UAAU,CAAC,EAC7F+H,EAAiB,mBAAqB,KAE1C,CAEA,OAAO,iBAAiB,EAAE,CACxB,MAAMgD,EAAW,EAAE,OACnBhD,EAAiB,aAAe,CAACA,EAAiB,aAE/CA,EAAiB,cAClBgD,EAAS,UAAU,IAAI,iBAAiB,EACxCA,EAAS,UAAU,OAAO,sBAAsB,IAEhDA,EAAS,UAAU,IAAI,sBAAsB,EAC7CA,EAAS,UAAU,OAAO,iBAAiB,EAE/C,CAEE,OAAO,iBAAiB/K,EAAMgL,EAAc,CAC1ChL,EAAK,QAAQ,SAAWgL,EAAgB,OAAS,QACjD,MAAMC,EAAOjL,EAAK,cAAc,iBAAiB,EACjDd,EAAQ,IAAI,mBAAoB,CAACc,EAAMgL,CAAa,CAAC,EAElDA,GACDhL,EAAK,UAAU,IAAI,UAAU,EAC7BiL,EAAK,UAAU,IAAI,eAAe,EAClCA,EAAK,UAAU,OAAO,WAAW,IAEjCjL,EAAK,UAAU,OAAO,UAAU,EAChCiL,EAAK,UAAU,OAAO,eAAe,EACrCA,EAAK,UAAU,IAAI,WAAW,EAEpC,CAME,OAAO,cAAc,EAAE,CACrB/L,EAAQ,IAAI,gBAAiB,CAAC,CAAC,CAAC,EAEhC,MAAMgM,EAAW,EAAE,OAAO,QAAQ,QAAQ,EAC1C,GAAI,CAACA,EAAU,OAEfnD,EAAiB,iBAAiBmD,EAAYA,EAAS,QAAQ,UAAY,MAAO,EAElF,MAAM5B,EAAavB,EAAiB,WAAW,iBAAiB,QAAQ,EAClEoD,EAAa,MAAM,KAAK7B,CAAU,EAAE,MAAMtJ,GAAQA,EAAK,QAAQ,WAAa,MAAM,EAClFoL,EAAc,MAAM,KAAK9B,CAAU,EAAE,KAAKtJ,GAAQA,EAAK,QAAQ,WAAa,MAAM,EACxF+H,EAAiB,kBAAkB,QAAUoD,EAC7CpD,EAAiB,kBAAkB,cAAgBqD,GAAe,CAACD,EAEnEjM,EAAQ,IAAI,iCAAkC,CAACiM,EAAYC,CAAW,CAAC,EAIvE,MAAMC,EADqB,MAAM,KAAK/B,CAAU,EAAE,OAAOtJ,GAAQA,EAAK,QAAQ,WAAa,MAAM,EAC7D,IAAIA,GAAQA,EAAK,QAAQ,EAAE,EACzDyI,EAAMV,EAAiB,YAC7BA,EAAiB,eAAeU,CAAG,EAAIV,EAAiB,OAAOU,CAAG,EAAE,OAAOlI,GAAS8K,EAAS,SAAS9K,EAAM,EAAE,CAAC,EAC/GwH,EAAiB,YAAcoD,EAE5BC,EACDrD,EAAiB,iBAAkB,EAEnCA,EAAiB,iBAAkB,EAErC7I,EAAQ,IAAI,kCAAmC,CAACmM,EAAUtD,EAAiB,cAAc,CAAC,CAC9F,CAEE,OAAO,eAAe,EAAE,CACtB,MAAMuD,EAAe,EAAE,OAAO,QAAQ,QAAQ,EAC9C,GAAI,CAACA,EAAc,OACnB,MAAM7C,EAAMV,EAAiB,YACvBnI,EAAU0L,EAAa,QAAQ,GAE/BhK,EADQyG,EAAiB,OAAOU,CAAG,EAAE,KAAKlI,GAASA,EAAM,KAAOX,CAAO,EACzD,MACjB0B,GACD,OAAO,WAAW,CAAC,EAAGA,EAAM,EAAG,EAAGA,EAAM,EAAG,MAAO,CAAC,CAAC,CAE1D,CAEE,OAAO,iBAAiB,EAAE,CAExB,EAAE,gBAAiB,EAGnB,MAAMgK,EAAe,EAAE,OAAO,QAAQ,QAAQ,EAC9C,GAAI,CAACA,EAAc,OACnB,MAAM7C,EAAMV,EAAiB,YACvBnI,EAAU0L,EAAa,QAAQ,GAC/B/K,EAAQwH,EAAiB,OAAOU,CAAG,EAAE,KAAKlI,GAASA,EAAM,KAAOX,CAAO,EAC1EW,GACDA,EAAM,MAAM,OAAO,EAAI,CAE7B,CAEE,OAAO,kBAAkB,EAAE,CACzB,MAAMkI,EAAMV,EAAiB,YACvBwD,EAAY,EAAE,OAAO,QACrBjC,EAAavB,EAAiB,WAAW,iBAAiB,QAAQ,EACxEA,EAAiB,eAAeU,CAAG,EAAI,CAAE,EACzCV,EAAiB,YAAcwD,EAE/BjC,EAAW,QAAQtJ,GAAQ,CACzB+H,EAAiB,iBAAiB/H,EAAMuL,CAAS,EACjDxD,EAAiB,eAAeU,CAAG,EAAE,KAAKV,EAAiB,OAAOU,CAAG,EAAE,KAAKlI,GAASA,EAAM,KAAOP,EAAK,QAAQ,EAAE,CAAC,CACxH,CAAK,EAIGuL,EACFxD,EAAiB,iBAAkB,EAEnCA,EAAiB,iBAAkB,CAEzC,CAEE,OAAO,oBAAoB,CACzB,MAAMU,EAAMV,EAAiB,YACvBuB,EAAavB,EAAiB,WAAW,iBAAiB,QAAQ,EAClEyD,EAAmBzD,EAAiB,eAAeU,CAAG,EAAE,IAAIlI,GAASA,EAAM,EAAE,EAEnF+I,EAAW,QAAQtJ,GAAQ,CACtBwL,EAAiB,SAASxL,EAAK,QAAQ,EAAE,EAC1C+H,EAAiB,iBAAiB/H,EAAM,EAAI,EAE5C+H,EAAiB,iBAAiB/H,EAAM,EAAK,CAErD,CAAK,EACE+H,EAAiB,eAAeU,CAAG,EAAE,OAAS,EAC/CV,EAAiB,iBAAkB,EAEnCA,EAAiB,iBAAkB,CAEzC,CA2DE,OAAO,WAAW,EAAG,CACnB,MAAM0D,EAAU,EAAE,OAAO,QAAQ,IACjC,GAAIA,IAAY1D,EAAiB,YAAa,OAE9CA,EAAiB,YAAc0D,EAGT,EAAE,OAAO,QAAQ,cAAc,EACvC,iBAAiB,QAAQ,EAAE,QAAQhD,GAAO,CACtDA,EAAI,UAAU,OAAO,QAAQ,CACnC,CAAK,EACD,EAAE,OAAO,UAAU,IAAI,QAAQ,EAG/BV,EAAiB,eAAgB,EAEjC7I,EAAQ,IAAI,cAAe,CAACuM,EAAS1D,EAAiB,WAAW,CAAC,CACtE,CACA,EA3ESF,GAAA,YAuBAC,EAAA,YAloBP7I,EADW8I,EACJ,aAAa,MACpB9I,EAFW8I,EAEJ,SAAS,CAAE,GAAI,CAAA,EAAI,IAAK,CAAA,CAAI,GACnC9I,EAHW8I,EAGJ,iBAAiB,CAAE,GAAI,CAAA,EAAI,IAAK,CAAA,CAAI,GAC3C9I,EAJW8I,EAIJ,sBAAsB,MAC7B9I,EALW8I,EAKJ,qBAAqB,MAC5B9I,EANW8I,EAMJ,oBAAoB,MAC3B9I,EAPW8I,EAOJ,eAAe,IACtB9I,EARW8I,EAQJ,cAAc,IACrB9I,EATW8I,EASJ,cAAc,MAmmBrBpD,EA5mBWoD,EA4mBJF,GAAuB,GAAM,CAClC,MAAMsC,EAAmBpC,EAAiB,WAAW,cAAc,kBAAkB,EAChFoC,IAELpC,EAAiB,cAAe,EAChCoC,EAAiB,iBAAiB,WAAW,EAAE,QAAQnK,GAAQ,CAC1DA,IAAS,EAAE,QACZA,EAAK,UAAU,OAAO,UAAU,CAExC,CAAK,EACD,EAAE,OAAO,UAAU,OAAO,UAAU,EAEjC,EAAE,OAAO,UAAU,SAAS,UAAU,GACvC+H,EAAiB,oBAAsB,EAAE,OAAO,QAAQ,GACxDA,EAAiB,0BAA0BA,EAAiB,mBAAmB,IAE/EA,EAAiB,oBAAsB,KACvCA,EAAiB,cAAe,GAElC7I,EAAQ,IAAI,kCAAmC,CAAC,EAAE,OAAO,QAAS6I,EAAiB,mBAAmB,CAAC,EAC3G,GAGEpD,EAnoBWoD,EAmoBJD,EAAuB,GAAM,CAClC,MAAMW,EAAMV,EAAiB,YACvByC,EAAgBzC,EAAiB,WAAW,cAAc,eAAe,EAC/E,GAAI,CAACyC,EAAiB,OAEtBA,EAAc,iBAAiB,WAAW,EAAE,QAAQxK,GAAQA,EAAK,UAAU,OAAO,UAAU,CAAC,EAC7F,EAAE,OAAO,UAAU,IAAI,UAAU,EACjC,MAAMqK,EAAgB,EAAE,OAAO,QAAQ,KACvCtC,EAAiB,mBAAqB,CACpC,IAAK,EAAE,OAAO,QAAQ,aACtB,QAAS,EAAE,OAAO,QAAQ,QAC1B,MAAO,EAAE,OAAO,QAAQ,KACzB,EAEDjD,EAAa,gBAAgBiD,EAAiB,eAAeU,CAAG,EAAE,CAAC,EAAG,CACpE,OAAQ,CAAE,UAAW,CAAC4B,CAAa,CAAG,EACtC,QAAS,EAAE,OAAO,QAClB,OAAQtC,EAAiB,eAAeU,CAAG,CACjD,CAAK,EASDvJ,EAAQ,IAAI,kBAAmB,CAAC6I,EAAiB,kBAAkB,CAAC,CACxE,GA/pBO,IAAM2D,EAAN3D,ETZP,IAAA4D,EAAA7H,GAAA8H,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GUgBO,MAAMC,EAAN,MAAMA,CAAa,CAWxB,OAAO,MAAO,CACZhN,EAAQ,IAAI,0CAA2C,CAAA,EAAI,EAAI,EAK/D,MAAM,GAAGhB,EAAY,YAAa8F,EAAAkI,EAAaP,EAAAM,GAAY,EAG3D,MAAM,GAAG/N,EAAY,iBAAkB8F,EAAAkI,EAAaP,EAAAI,GAAiB,EAIrE,MAAM,GAAG7N,EAAY,iCAAkC8F,EAAAkI,EAAaP,EAAAC,GAAgC,EACpG,MAAM,GAAG1N,EAAY,iBAAkB8F,EAAAkI,EAAaP,EAAAE,GAAwB,EAG5E,MAAM,GAAG7N,EAAW,qBAAsBgG,EAAAkI,EAAaP,EAAAG,GAAqB,EAG5E,MAAM,GAAG9N,EAAW,oBAAqBgG,EAAAkI,EAAaP,EAAA7H,GAAoB,CAK9E,CAKE,OAAO,qBAAqB,CAC1B,OAAO,OAAOoI,EAAa,YAAY,EAAE,QAAQC,GAAW,CACvDA,EAAQ,OAAS5N,GAAU,SAC5BqF,EAAW,aAAauI,EAAQ,OAAQ9F,GAAa8F,EAAQ,MAAM,CAAC,EAEpEvI,EAAW,aAAauI,EAAQ,OAAQD,EAAaC,EAAQ,MAAM,CAAC,CAE5E,CAAK,CACL,CAOE,OAAO,gBAAgB5L,EAAO5B,EAAK,CAAC,OAAO,CAAA,EAAI,OAAQ,CAAC,UAAW,EAAI,EAAG,QAAS,GAAI,OAAQ,CAAA,EAAI,aAAc,IAAI,EAAE,CVxEzH,IAAAK,EAAAqC,EAAAkD,EAAAK,EAAAwH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EUyE0BhB,EAAa,aAAa,mBAAmB,OACtD5M,EAAY,eAAeiB,EAAM,EAAE,EAChD,MAAM4M,EAAc,CAAE,QAAS5M,EAAM,GAAI,GAAG5B,CAAI,EAChDO,EAAQ,IAAI,qBAAsB,CAACiO,CAAW,CAAC,EAE/CxO,EAAK,OAAS,CACZ,GAAGA,EAAK,OACR,MAAO,CACL,GAAGA,EAAK,OAAO,MACf,CAACR,CAAS,EAAG,CACX,YAAa,GACb,gBAAiB,GACjB,KAAMQ,EAAK,IACrB,CACA,CACA,EAEI,MAAMyO,EAAc,CAClB,GAAGD,EACH,QAAS,CACP,GAAGxO,EAAK,OACT,EACD,OAAQA,EAAK,OAAO,IAAI4B,GAASA,EAAM,EAAE,CAC/C,EAEO2L,EAAa,kBACdkB,EAAY,QAAQ,SAAW,MAAM,gBAAgB,QAIvDA,EAAY,OAAO,OAAOpO,EAAAmO,EAAY,UAAZ,YAAAnO,EAAqB,QAAOR,EAAqB,KAAK,MAAO6C,EAAA8L,EAAY,UAAZ,YAAA9L,EAAqB,aAAe,GAC3H+L,EAAY,OAAO,QAAQ7I,EAAA4I,EAAY,UAAZ,YAAA5I,EAAqB,QAAO/F,EAAqB,MAAM,MAAOoG,EAAAuI,EAAY,UAAZ,YAAAvI,EAAqB,aAAe,GAC7H,MAAMyI,GAASjB,EAAAe,EAAY,UAAZ,YAAAf,EAAqB,aACpC,IAAIkB,EAAU,KACXjB,EAAAc,EAAY,UAAZ,YAAAd,EAAqB,QAAO7N,EAAqB,KAAK,KACvD8O,IAAUd,GAAAD,GAAAD,EAAA/L,EAAM,SAAN,YAAA+L,EAAc,QAAd,YAAAC,EAAsBc,KAAtB,YAAAb,EAA+B,YAAWC,EAAA,OAAO,MAAM,MAAMY,CAAM,IAAzB,YAAAZ,EAA4B,WACzEC,EAAAS,EAAY,UAAZ,YAAAT,EAAqB,QAAOlO,EAAqB,MAAM,KAC9D8O,IAAUT,GAAAD,GAAAD,EAAApM,EAAM,SAAN,YAAAoM,EAAc,SAAd,YAAAC,EAAuBS,KAAvB,YAAAR,EAAgC,YAAWC,EAAA,OAAO,MAAM,OAAOO,CAAM,IAA1B,YAAAP,EAA6B,WAC3EC,EAAAI,EAAY,UAAZ,YAAAJ,EAAqB,QAAOvO,EAAqB,aAAa,QACrEwO,EAAAI,EAAY,UAAZ,YAAAJ,EAAqB,QAAOxO,EAAqB,cAAc,KAC/D8O,EAAUD,IACHJ,EAAAE,EAAY,UAAZ,YAAAF,EAAqB,QAAO5O,EAAW,OAAO,OACrD+O,EAAY,YAAc,CACxB,QAAS7M,EAAM,GACf,aAAc4M,EAAY,aAC1B,WAAY,GACZ,YAAWD,EAAAC,EAAY,SAAZ,YAAAD,EAAoB,YAAa,CAAE,CACtD,GAEIE,EAAY,OAAO,QAAUE,EAC7BF,EAAY,OAAO,UAAYE,EAE/BpO,EAAQ,IAAI,qBAAsB,CAACmO,EAAQD,CAAW,CAAC,EACvDlB,EAAa,mBAAmBkB,CAAW,CAC/C,CAOE,OAAO,mBAAmBzO,EAAK,CVtIjC,IAAAK,EAAAqC,EAAAkD,EAAAK,EAAAwH,EAAAC,EAAAC,EUuII,GAAI,CAAE,QAAA1M,EAAQ,GAAI,OAAAsE,EAAO,CAAA,EAAI,OAAAE,EAAO,CAAA,EAAI,QAAAD,EAAQ,CAAA,EAAI,YAAAjD,EAAY,KAAM,OAAAoJ,EAAS,CAAA,CAAI,EAAG3L,EAClFqB,EAAK,KAAMiE,EAAS,KACxB,MAAM1D,EAAQ,KAAK,OAAO,IAAIX,CAAO,EAGrC,GAFAV,EAAQ,IAAI,wBAAyB,CAACqB,EAAM,KAAM5B,CAAI,CAAC,EAEpD,CAAC4B,EAAM,CACRrB,EAAQ,IAAI,uCAAwC,CAACU,EAASW,CAAK,CAAC,EACpE,MACN,CAGI,MAAMuJ,EAAWzK,EAAa,EACxBkO,EAAoBrN,EAAa,IAAI4J,EAAS,kBAAkB,GAAG,EACnE0D,EAAgBlO,EAAY,WAAW,KAAK,IAAI,EACtD,IAAIiO,GAAqBC,EAAc,SAAW,KAAMtM,GAAA,MAAAA,EAAa,cAAa,EAChFlC,EAAA,OAAO,OAAO,WAAW,CAAC,IAA1B,MAAAA,EAA6B,UAAU,GAAO,CAAE,cAAe,KAC/D,QAAQsC,KAAS,OAAO,OAAO,WAC1BJ,EAAY,aAAa,SAASI,EAAM,EAAE,GAC3CA,EAAM,UAAU,GAAM,CAAE,cAAe,EAAK,CAAE,CAGxD,CAII,IAAIvC,EAAU,CAAE,EAChB,GAAGmC,EAAY,CACbnC,EAAU,CACR,QAASa,EACT,QAASsB,EAAY,QACrB,UAAWA,EAAY,QACvB,KAAMA,EAAY,KAClB,MAAOA,EAAY,MACnB,UAAWA,EAAY,WAAa,GACpC,aAAcA,EAAY,cAAgB,GAC1C,YAAaA,EAAY,aAAe,GACxC,WAAYA,EAAY,YAAc,GACtC,OAAQA,EAAY,QAAU,KAC9B,GAAIA,EAAY,IAAM,KACtB,KAAMA,EAAY,UAAY,GAC9B,SAAQG,EAAA8C,GAAA,YAAAA,EAAS,OAAT,YAAA9C,EAAe,SAAU,GACjC,UAAW6C,EAAO,WAAa,CAAA,CACvC,EAEMA,EAAS,CAEP,GAAGnF,EACH,MAAO,KACP,MAAO,CAAC,CAEN,MAAO,CAAE,EACT,QAAS,CAIP,GAAIA,EAAQ,IAAM,KAClB,SAAUA,EAAQ,UAAY,EAC1C,CACS,CAAA,CACT,EAGM,KAAM,CAAE,OAAA6C,EAAQ,WAAA6L,CAAY,EAAGvM,EAAY,aAAe5B,EAAY,yBAAyB4B,EAAY,YAAY,EAAI,CAAE,EAC7HlB,EAAO4B,EAASrB,EAAM,MAAM,IAAIqB,CAAM,EAAI,KAC1CqC,EAAWwJ,GAAa7I,GAAAL,EAAAvE,GAAA,YAAAA,EAAM,SAAN,YAAAuE,EAAc,aAAd,YAAAK,EAA0B,IAAI6I,GAAc,IAC1E,CAGIrJ,EAAS,CACP,GAAGA,EACH,QAAS,CACP,GAAGA,EAAO,QACV,OAAQ,CACN,IAAGgI,EAAAhI,EAAO,UAAP,YAAAgI,EAAgB,OACnB,SAAU7L,EAAM,IAC1B,CACA,CACA,IACO8L,EAAAlI,GAAA,YAAAA,EAAS,OAAT,MAAAkI,EAAe,QAAUnI,GAAA,MAAAA,EAAQ,UAClCE,EAAO,QAAQ,OAAO,QAAQkI,EAAAnI,GAAA,YAAAA,EAAS,OAAT,YAAAmI,EAAe,UAAUpI,GAAA,YAAAA,EAAQ,SAGjE,IAAIwJ,EAAOxB,EAAa,qBAAqBhI,EAAO,WAAa,CAAA,CAAE,EACnEC,EAAU,CACR,MAAO,CAGL,CAAChG,CAAS,EAAG,CACX,YAAa,GACb,YAAa+C,EACb,KAAMwM,EACN,OAAQ,KAAK,KAAK,KAAOpD,EAAO,OAAOqD,GAAaA,EAAU,KAAOpN,EAAM,EAAE,EAAI,CAAA,CAC3F,CACA,CACA,EACO2L,EAAa,kBACd/H,EAAQ,SAAW,MAAM,gBAAgB,QAE3C,MAAMyJ,EAAgB,OAAO,OAAOpP,CAAoB,EAAE,KAAKoK,GAAUA,EAAO,OAAS8E,CAAI,EAK7F,OAJAvJ,EAAQ,OAASyJ,GAAA,YAAAA,EAAe,MAEhC1O,EAAQ,IAAI,wBAAyB,CAACgF,EAAQE,EAAQD,CAAO,CAAC,EAEvD,GAAI,CACT,KAAKD,EAAO,UAAU,CAAC,EAAE,YAAa,IAAK1F,EAAqB,MAAM,KAAK,YAAa,EACtF+B,EAAM,UAAU2D,EAAQE,EAAQD,CAAO,EACvCuJ,EAAOlP,EAAqB,MAAM,KAClC,MACF,KAAK0F,EAAO,UAAU,CAAC,EAAE,YAAa,IAAK1F,EAAqB,KAAK,KAAK,YAAa,EACrF+B,EAAM,cAAc2D,EAAQE,EAAQD,CAAO,EAC3CuJ,EAAOlP,EAAqB,KAAK,KACjC,MACF,KAAK0F,EAAO,UAAU,CAAC,EAAE,YAAa,IAAK1F,EAAqB,cAAc,KAAK,YAAa,EAC9F+B,EAAM,iBAAiB2D,EAAQE,EAAQD,CAAO,EAC9CuJ,EAAOlP,EAAqB,cAAc,KAC1C,MACF,KAAK0F,EAAO,UAAU,CAAC,EAAE,YAAa,IAAK1F,EAAqB,aAAa,KAAK,YAAa,EAC7F+B,EAAM,gBAAgB2D,EAAQE,EAAQD,CAAO,EAC7CuJ,EAAOlP,EAAqB,aAAa,KACzC,MACF,KAAK0F,EAAO,UAAU,CAAC,EAAE,YAAa,IAAK1F,EAAqB,WAAW,KAAK,YAAa,EAC3F+B,EAAM,qBAAqB,CACzB,YAAa2D,EAAO,aAAe,GACnC,UAAWA,EAAO,UAClB,aAAcA,EAAO,YAC/B,CAAS,EACDwJ,EAAOlP,EAAqB,WAAW,KACvC,MACF,KAAK0F,EAAO,UAAU,CAAC,EAAE,YAAa,IAAK1F,EAAqB,WAAW,KAAK,YAAa,EAC3F+B,EAAM,cAAc2D,EAAQE,EAAQD,CAAO,EAC3CuJ,EAAOlP,EAAqB,WAAW,KACvC,MACF,KAAK0F,EAAO,UAAU,CAAC,EAAE,YAAa,IAAK1F,EAAqB,cAAc,KAAK,YAAa,EAC9F+B,EAAM,kBAAkB2D,EAAQE,EAAQD,CAAO,EAC/CuJ,EAAOlP,EAAqB,cAAc,KAC1C,MACF,KAAK0F,EAAO,UAAU,CAAC,EAAE,YAAa,IAAK7F,EAAW,OAAO,KAAK,YAAa,EAC7Ea,EAAQ,IAAI,iCAAkC,CAAC+E,EAAUC,EAAQE,EAAQD,CAAO,CAAC,EAC9EF,IACDC,EAAO,MAAQ,CAAE,EACjBD,EAAS,WAAWC,EAAQE,EAAQD,CAAO,GAE7C,MACF,KAAKD,EAAO,UAAU,CAAC,EAAE,YAAa,IAAK7F,EAAW,OAAO,KAAK,YAAa,EAC7Ea,EAAQ,IAAI,iCAAkC,CAAC+E,EAAUC,EAAQE,EAAQD,CAAO,CAAC,EAC9EF,IACDE,EAAQ,OAAS,GACjBA,EAAQ,QAAU,GAClBjF,EAAQ,IAAI,2BAA4B,CAACiF,CAAO,CAAC,EACjDF,EAAS,IAAI,GAAIG,EAAQD,CAAO,GAGlC,MACF,KAAKD,EAAO,UAAU,SAAS7F,EAAW,QAAQ,IAAI,EACpDa,EAAQ,IAAI,+BAAgC,CAACgF,EAAQE,EAAQD,CAAO,CAAC,EACrE,MAaF,QACEjF,EAAQ,IAAI,+BAAgC,CAACgF,EAAQE,EAAQD,CAAO,CAAC,EACrE,KACR,CACA,CAuDE,OAAO,kBAAkBU,EAAWrB,EAAO,CACzC,MAAMqK,EAAa3B,EAAa,kBAAkB1I,CAAM,EACxD,GAAG,CAACqK,EAAa,MAAO,GACxB,MAAMC,GAAajJ,GAAA,YAAAA,EAAW,IAAIkJ,IACzBF,GAAA,YAAAA,EAAaE,MAAc,KAAMF,GAAA,YAAAA,EAAaE,MAAc,SAAaF,GAAA,YAAAA,EAAaE,MAAc,QACvG,CAAE,EACFC,EAAkBF,EAAW,SAAS,EAAI,GAAK,GACrD,OAAA5O,EAAQ,IAAI,oBAAqB,CAAC4O,EAAYjJ,EAAWgJ,EAAYG,CAAe,CAAC,EAE9EA,CACX,CA6WE,OAAO,SAASC,EAAU,CACxB,OAAOA,EAAU,CAAC,EAAE,YAAW,IAAO5P,EAAW,MAAM,KAAK,YAAa,GACzE4P,EAAU,CAAC,EAAE,YAAW,IAAO5P,EAAW,KAAK,KAAK,YAAa,GACjE4P,EAAU,CAAC,EAAE,YAAW,IAAO5P,EAAW,aAAa,KAAK,YAAa,GACzE4P,EAAU,CAAC,EAAE,YAAW,IAAO5P,EAAW,cAAc,KAAK,YAAa,CAC9E,CAOE,OAAO,qBAAqB4P,EAAU,CACpC,IAAIP,EAAO,GACX,cAAO,OAAOlP,CAAoB,EAAE,QAAQoK,GAAU,CACjDqF,EAAU,SAASrF,EAAO,IAAI,IAC/B8E,EAAO9E,EAAO,KAEtB,CAAK,EACM8E,CACX,CASE,OAAO,eAAevJ,EAASD,EAAQ3D,EAAM,CV9vB/C,IAAAvB,EAAAqC,EAAAkD,EAAAK,EAAAwH,EAAAC,EAAAC,EAAAC,EU+vBI,MAAM2B,EAAc,CAClB,IAAG7M,GAAArC,EAAAmF,EAAQ,OAAR,YAAAnF,EAAc,QAAd,YAAAqC,EAAsBlD,GACzB,IAAGoG,EAAAJ,EAAQ,QAAR,YAAAI,EAAgBpG,EACzB,EAEI,OAAG,GAACyG,EAAAT,EAAQ,OAAR,MAAAS,EAAc,QAAS,GAACyH,GAAAD,EAAAjI,EAAQ,OAAR,YAAAiI,EAAc,QAAd,MAAAC,EAAsBlO,OAChDgG,EAAQ,KAAO,CACb,GAAGA,EAAQ,KACX,MAAO,CACL,IAAGmI,EAAAnI,EAAQ,OAAR,YAAAmI,EAAc,MACjB,CAACnO,CAAS,EAAG+P,CACvB,CACA,IAGQ3B,EAAApI,EAAQ,KAAK,MAAMhG,CAAS,EAAE,SAA9B,MAAAoO,EAAsC,SACxCpI,EAAQ,KAAK,MAAMhG,CAAS,EAAE,OAAS,CAACoC,EAAM,EAAE,GAG/C2D,EAAO,mBAAmB,MAAM,WAAW,SAAS,mBACrDC,EAAQ,KAAK,MAAMhG,CAAS,EAAE,aAAe+F,EAAO,QAAQ,KAC5DC,EAAQ,KAAK,MAAMhG,CAAS,EAAE,YAAc,YAG9Ce,EAAQ,IAAI,iBAAkB,CAACiF,CAAO,CAAC,EAEhCA,CACX,CACA,EA3wBOwH,EAAA,YA2WE7H,GAAoB,SAACqK,EAAa1J,EAAK,CAC5C,MAAM2J,EAAYD,EAAY,QAAQhQ,EAAW,aAAa,EACxD4H,EAAWoI,EAAY,QAAQhQ,EAAW,MAAM,EAChDgO,EAAU1H,EAAK,CAAC,GAAKA,EAC3BvF,EAAQ,IAAI,uBAAwB,CAACiP,EAAa1J,EAAMsB,CAAQ,CAAC,EAE9DqI,GACoBjC,EAAQ,cAAc,oBAAoBpG,CAAQ,GAAG,EAC7D,iBAAiB,QAAU5C,GAAM,CAE5C,MAAMkL,EADSlL,EAAE,cACM,QACjB5C,EAAQ,KAAK,OAAO,IAAI8N,EAAQ,OAAO,EACzC9N,IACJrB,EAAQ,IAAI,gBAAiB,CAACiE,EAAG5C,CAAK,CAAC,EACvCA,EAAM,qBAAqB,CACzB,MAAO4C,CACjB,CAAS,EACT,CAAO,CAEP,EAQSyI,GAAgC,SAAC0C,EAAkB7J,EAAK,CVtZjE,IAAAzF,EAAAqC,EAAAkD,EAAAK,EAAAwH,EAAAC,EAAAC,EUuZI,MAAMpI,EAASoK,EAAiB,OAC1BnK,EAAUmK,EAAiB,QAC3B/N,IAAQvB,EAAAkF,GAAA,YAAAA,EAAQ,UAAR,YAAAlF,EAAiB,SAASkF,GAAA,YAAAA,EAAQ,SAC1CqK,EAAchO,EAAQjB,EAAY,eAAeiB,EAAM,EAAE,EAAI,KAcnE,GAbArB,EAAQ,IAAI,sCAAuC,CAACqP,EAAaD,EAAkBnK,EAAS+H,EAAa,eAAe,CAAC,EAatH,EAACqC,GAAA,MAAAA,EAAa,SAAU,CAACrC,EAAa,gBACvC,OAGC,KAAK,KAAK,MACXA,EAAa,eAAe/H,EAASD,EAAQ3D,CAAK,EAGpD,IAAIiO,EAAclP,EAAY,YAAW+B,EAAA6C,GAAA,YAAAA,EAAQ,QAAR,YAAA7C,EAAe,MAAM,EAC9D,MAAMD,EAASoN,GAAcjK,EAAAiK,EAAY,QAAQ,eAAe,IAAnC,YAAAjK,EAAsC,cAAc,uBAAyB,KAM1G,GAJArF,EAAQ,IAAI,sCAAuC,EAAE,EACrDgN,EAAa,uBAAuB9K,EAAQkN,EAAkB7J,CAAI,EAG/D,CAAC,KAAK,KAAK,MAAQiH,EAAiB,cAAgB,KAAK,CAC1D,MAAM+C,EAAYhK,EAAK,cAAc,mBAAmB,EAClDR,EAAWC,EAAO,QACJD,KAAWW,EAAAX,EAAS,SAAT,MAAAW,EAAiB,OAChD,MAAMC,IAAYyH,GAAAD,GAAAD,EAAAlI,EAAO,QAAP,YAAAkI,EAAe,KAAf,YAAAC,EAAmB,OAAnB,YAAAC,EAAyB,IAAIoC,GAAQA,EAAK,gBAAiB,CAAC,KAAK,EAG7EjJ,EAAoByG,EAAa,kBAAkBrH,EAAW0J,EAAY,EAAE,EAClFrP,EAAQ,IAAI,sCAAuC,CAACoP,EAAkBpK,EAAQuB,EAAmBZ,CAAS,CAAC,EAExGY,GACD,WAAW,IAAMgJ,EAAU,MAAK,EAAI,GAAG,CAE/C,CACIvP,EAAQ,IAAI,sCAAuC,EAAE,CACzD,EAUS2M,GAAwB,SAAC7I,EAAOkB,EAAQE,EAAQD,EAAQ,CVhdjE,IAAAnF,EAAAqC,EAAAkD,EAAAK,EAAAwH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EUidI,MAAMsB,IAAc7M,GAAArC,EAAAmF,EAAQ,OAAR,YAAAnF,EAAc,QAAd,YAAAqC,EAAsBlD,OAAcoG,EAAAJ,EAAQ,QAAR,YAAAI,EAAgBpG,KAAc,CAAE,EAClFwQ,GAAaT,GAAA,YAAAA,EAAa,SAAU,CAAE,EAEtCU,EAAU,IADQV,GAAA,YAAAA,EAAc,oBAAmB9B,GAAAxH,EAAAT,EAAQ,OAAR,YAAAS,EAAc,QAAd,YAAAwH,EAAsB,kBAEzEyC,IAAgBxC,EAAAnI,EAAO,UAAP,YAAAmI,EAAgB,QAASnI,EAAO,QAGtDhF,EAAQ,IAAI,8BAA+B,CAACyP,GAAA,YAAAA,EAAY,OAAQ3L,GAAA,YAAAA,EAAQ,GAAI6L,CAAa,CAAC,EAEvF,EAACF,GAAA,MAAAA,EAAY,SAAUE,aAAyB,MAAM,WAAW,MAAM,UACxEF,EAAa,CAACE,EAAc,EAAE,IAI7BtC,GAAAD,EAAAtJ,GAAA,YAAAA,EAAQ,KAAR,YAAAsJ,EAAY,OAAZ,MAAAC,EAAkB,QACnBvJ,EAAM,CAAC,EAAE,KAAK,MAAQ,CACpB,GAAGA,EAAM,CAAC,EAAE,KAAK,MACjB,CAAC7E,CAAS,EAAG,CACX,QAASyQ,CACnB,CACA,GAGI,MAAM/J,IAAY4H,GAAAD,EAAAxJ,GAAA,YAAAA,EAAQ,KAAR,YAAAwJ,EAAY,OAAZ,YAAAC,EAAkB,IAAIiC,GAAQA,EAAK,gBAAiB,CAAE,EACxE,IAAII,IAAoBlC,GAAAD,GAAAD,EAAAvI,EAAQ,OAAR,YAAAuI,EAAc,QAAd,YAAAC,EAAsBxO,KAAtB,YAAAyO,EAAkC,eAAgB,YAAc,GACxF,OAAA1N,EAAQ,IAAI,+BAAgC,CAAC4P,EAAmBjK,CAAS,CAAC,GAGzE,SAAY,CV7ejB,IAAA7F,EAAAqC,EAAAkD,GAAAK,GAAAwH,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GU8eMzN,EAAQ,IAAI,+BAAgC,CAACyP,CAAU,CAAC,EACxD,QAAQtO,EAAI,EAAGA,EAAIsO,EAAW,OAAQtO,IAAI,CACxC,MAAMT,EAAU+O,EAAWtO,CAAC,EAAE,IAAMsO,EAAWtO,CAAC,EAC1CE,GAAQ,KAAK,OAAO,IAAIX,CAAO,EAC/B2O,EAAc3O,EAAUN,EAAY,eAAeM,CAAO,EAAI,KAGpE,GAFAV,EAAQ,IAAI,8BAA+B,CAAC0P,EAASrO,GAAM,KAAMgO,GAAA,YAAAA,EAAa,KAAMvL,EAAOkB,EAAQE,EAAQD,CAAO,CAAC,EAEhH,KAAK,KAAK,OAAQoK,GAAA,MAAAA,EAAa,SAAUrC,EAAa,gBAAgB,CACvE,MAAM6C,GAAgB7C,EAAa,aAAa,mBAAmB,OACzCA,EAAa,kBAAkB,CAAC,KAAK,EAAGqC,EAAY,EAAE,EAChFnK,EAAO,UAAY,GAKnB,MAAM4K,GAAa9K,EAAO,mBAAmB,MAAM,WAAW,SAAS,iBAEjE+K,IADiB3P,EAAY,iBAAgB,GAAM,CAAE,GAC3B,IAAI2B,IAAGA,GAAE,EAAE,EACrCkM,GAAc,CAClB,QAASvN,EACT,OAAQsE,EACR,OAAAE,EAAQ,QAAAD,EACR,YAAa,CACX,UAAS9C,GAAArC,EAAAgE,EAAM,CAAC,IAAP,YAAAhE,EAAU,OAAV,YAAAqC,EAAgB,YAAa6C,EAAO,QAC7C,YAAWU,IAAAL,GAAAvB,EAAM,CAAC,IAAP,YAAAuB,GAAU,OAAV,YAAAK,GAAgB,YAAaV,EAAO,QAC/C,KAAMA,GAAA,YAAAA,EAAQ,KACd,MAAOA,GAAA,YAAAA,EAAQ,MACf,YAAWkI,GAAApJ,EAAM,CAAC,IAAP,YAAAoJ,GAAU,eAAgB,GACrC,eAAcC,GAAArJ,EAAM,CAAC,IAAP,YAAAqJ,GAAU,kBAAmB,GAC3C,cAAaE,IAAAD,GAAAtJ,EAAM,CAAC,IAAP,YAAAsJ,GAAU,OAAV,YAAAC,GAAgB,cAAe,GAC5C,OAAQrI,EAAO,QAAUA,EAAO,IAAM,KACtC,GAAIA,EAAO,IAAMA,EAAO,QAAU,KAClC,WAAUuI,IAAAD,GAAAxJ,EAAM,CAAC,IAAP,YAAAwJ,GAAU,UAAV,YAAAC,GAAmB,WAAY,GACzC,aAAYE,IAAAD,GAAA1J,EAAM,CAAC,IAAP,YAAA0J,GAAU,UAAV,YAAAC,GAAmB,aAAczI,EAAO,YAAc,GAClE,UAAWW,EACX,QAASjF,EACT,aAAcoP,GAAa9K,EAAO,QAAQ,KAAO,KACjD,aAAc8K,GAAaC,GAAW,KACtC,aAAaV,GAAA,YAAAA,EAAa,KAAM,EAC9C,CACW,EACD,GAAG,cAAc,KAAK,wBAAwBA,EAAY,IAAI,EAAE,EAChEO,EAAoB,GAGpB,MAAMlL,EAAW,YAAYmL,GAAeR,EAAY,GAAIpB,EAAW,EACvEjO,EAAQ,IAAI,2CAA4C,CAAC4P,EAAmBC,GAAeR,GAAA,YAAAA,EAAa,GAAIpB,EAAW,CAAC,EAGxH,MAAM,IAAI,QAAQ+B,IAAW,WAAWA,GAAS,GAAG,CAAC,CAE/D,MACUJ,EAAoB,GACpB5K,EAAO,MAAQ,KACfE,EAAS,CACP,GAAGA,EACH,UAAWA,EAAO,UAClB,OAAQ,CACN,GAAGA,EAAO,OACV,SAAU7D,GAAM,IAC9B,CACA,EACU2L,EAAa,mBAAmB,CAAC,QAAStM,EAAS,OAAAsE,EAAQ,OAAAE,CAAM,CAAC,EAClElF,EAAQ,IAAI,4CAA6C,CAACqB,GAAOgO,GAAA,YAAAA,EAAa,KAAMrK,EAAQE,EAAQD,CAAO,CAAC,CAEtH,CACA,GAAQ,EAEG2K,EAAoB,GAAQ,MACvC,EAEShD,GAAqB,SAACqD,EAAc1K,EAAK,CVrjBlD,IAAAzF,EAAAqC,EAAAkD,EUsjBI,MAAMtB,EAAOkM,EAAa,KAG1B,GAFAjQ,EAAQ,IAAI,4BAA6B,CAAC+D,GAAA,YAAAA,EAAM,KAAMkM,EAAc1K,CAAI,CAAC,GAEtEF,GAAAlD,GAAArC,EAAAiE,GAAA,YAAAA,EAAM,OAAN,YAAAjE,EAAY,QAAZ,YAAAqC,EAAoBlD,KAApB,MAAAoG,EAAgC,QACjC,OAAA4K,EAAa,MAAO,EAEb,EAGb,EAUSpD,GAAiB,SAAC9H,EAAUmL,EAAaC,EAAc7J,EAAc,CVzkB9E,IAAAxG,EAAAqC,EAAAkD,EAAAK,EAAAwH,EU0kBIlN,EAAQ,IAAI,uBAAwB,CAAC+E,EAAUmL,EAAaC,EAAc7J,CAAa,CAAC,EAExF,MAAMjF,EAAQ0D,GAAA,YAAAA,EAAU,MAClBsK,EAAchO,EAAQjB,EAAY,eAAeiB,EAAM,EAAE,EAAI,KAC7D+O,IAAgBjO,GAAArC,EAAAwG,GAAA,YAAAA,EAAe,QAAf,YAAAxG,EAAuBb,KAAvB,YAAAkD,EAAmC,cAAe,GAExEnC,EAAQ,IAAI,uBAAwB,CAACqP,GAAA,YAAAA,EAAa,OAAQrC,EAAa,gBAAiBoD,CAAa,CAAC,EAEnGf,GAAA,MAAAA,EAAa,QAAUrC,EAAa,iBAAmB,CAACoD,GACzD9J,EAAc,OAAS,GACvBA,EAAc,KAAO,CACnB,GAAGA,EAAc,KACjB,MAAO,CACL,IAAGjB,EAAAiB,EAAc,OAAd,YAAAjB,EAAoB,MACvB,CAACpG,CAAS,EAAG,CACX,IAAGiO,GAAAxH,EAAAY,EAAc,OAAd,YAAAZ,EAAoB,QAApB,YAAAwH,EAA4BjO,GAC/B,aAAaoQ,GAAA,YAAAA,EAAa,KAAM,EAC5C,CACA,CACA,EAEMrP,EAAQ,IAAI,uBAAwB,CAACqP,CAAW,CAAC,GAGjDrP,EAAQ,IAAI,uBAAwB,CAACqP,EAAae,CAAa,CAAC,CAItE,EAEStD,GAAkB,SAAC/H,EAAUmL,EAAaC,EAAc7J,EAAc,CVxmB/E,IAAAxG,EAAAqC,EAAAkD,EUymBIrF,EAAQ,IAAI,qBAAsB,CAAC+E,EAAS,KAAM3F,GAAe,KAAM2F,EAAUmL,EAAaC,EAAc7J,CAAa,CAAC,EAC1H,MAAM+I,EAAcrC,EAAa,eAAejI,EAAS,MAAM,EAAE,EAEjE,GADA/E,EAAQ,IAAI,wBAAyB,CAACqP,EAAarC,EAAa,eAAe,CAAC,EAC7EqC,GAAA,MAAAA,EAAa,QAAUrC,EAAa,gBAAgB,CACrD1G,EAAc,OAAS,GACvBA,EAAc,KAAO,CACnB,GAAGA,EAAc,KACjB,MAAO,CACL,IAAGxG,EAAAwG,EAAc,OAAd,YAAAxG,EAAoB,MACvB,CAACb,CAAS,EAAG,CACX,IAAGoG,GAAAlD,EAAAmE,EAAc,OAAd,YAAAnE,EAAoB,QAApB,YAAAkD,EAA4BpG,GAC/B,aAAaoQ,GAAA,YAAAA,EAAa,KAAM,EAC5C,CACA,CACA,EAEMrP,EAAQ,IAAI,wBAAyB,CAACqP,CAAW,CAAC,EAalD,MACN,CAEA,EASStC,GAAY,SAAC/H,EAAQE,EAAQD,EAAQ,CAC1CjF,EAAQ,IAAI,eAAgB,CAAEgF,EAAO,MAAOA,EAAQE,EAAQD,EAAS+H,EAAa,WAAW,CAAE,GACzE,KAAK,KAAK,KAAOA,EAAa,YAAc,MAEhE9H,EAAO,UAAY,GAGzB,EAzoBOO,EAAMuH,EAANP,GACL1M,EADWiN,EACJ,kBAAkB,IACzBjN,EAFWiN,EAEJ,kBAAkB,IACzBjN,EAHWiN,EAGJ,cAAc,IACrBjN,EAJWiN,EAIJ,eAAe,CACpB,mBAAoB,CAAE,OAAO,qBAAsB,KAAM3N,GAAU,KAAO,CAE3E,GACDU,EARWiN,EAQJ,aAAa,CAAE,GACtBjN,EATWiN,EASJ,oBAAoB,CAAE,GA4R7BjN,EArSWiN,EAqSJ,uBAAuB,MAAM3L,EAAO5B,EAAM4Q,EAAgB,KAAU,CVrT7E,IAAAvQ,EUsTIE,EAAQ,IAAI,uBAAwB,CAACqB,EAAO5B,EAAM4Q,CAAe,CAAC,EAClE,MAAMhF,EAAc,OAAO,OAAO/L,CAAoB,EAAE,KAAKoK,GAAUA,EAAO,OAASjK,EAAK,IAAI,EAChG,GAAG,CAAC4L,EAAc,OAElB,MAAM8D,EAAU,CACd,KAAM1P,EAAK,KACX,QAASA,EAAK,OAAO,QACrB,UAAWA,EAAK,OAAO,QACvB,MAAOA,EAAK,OAAO,MACnB,KAAMA,EAAK,OAAO,KAClB,GAAIA,EAAK,OAAO,QAAU,GAI1B,QAAS4B,EAAM,GACf,OAAQ5B,EAAK,QAAU,OACvB,YAAYK,EAAA,KAAK,MAAM,KAAK,GAAGuB,IAAQ,EAAE,SAAS,IAAtC,YAAAvB,EAAyC,GACrD,OAAQuB,EAAM,IACf,EAEKiP,EAAU,CAAE,EAGV,KAAK,KAAK,GACP,MAAM,eAAe,gDAAiD,CAAE,QAAAA,CAAO,CAAE,EAEjF,YAAY,eAAe,WAAW,CAAE,MAAO,mBAAoB,EACzC,GAAAnB,EAAQ,OVjVjD,GUiV2FA,EAAQ,IVjVnG,GUiV4G9D,GAAA,YAAAA,EAAa,KVjVzH,GU2VOgF,GAKchP,EAAM,GAOvBrB,EAAQ,IAAI,uBAAwB,CAAC,WAAW,CAAC,CACrD,GAmTED,EA3oBWiN,EA2oBJ,yBAAyB,MAAM9K,EAAQgD,EAAQK,IAAS,CV3pBjE,IAAAzF,EAAAqC,EAAAkD,EAAAK,EAAAwH,EAAAC,EAAAC,EAAAC,EU4pBI,MAAMrL,IAAcqD,GAAAlD,GAAArC,EAAAoF,EAAO,UAAP,YAAApF,EAAgB,QAAhB,YAAAqC,EAAwBlD,KAAxB,YAAAoG,EAAoC,cAAe,CAAE,EACzDE,EAAK,cAAc,cAAc,EACjD,IAAIgL,EAAUhL,EAAK,cAAc,kBAAkB,EACnD,MAAMiL,EAAUtO,EAAS,QAAOwD,EAAAxD,GAAA,YAAAA,EAAQ,UAAR,YAAAwD,EAAiB,EAAE,GAAI1D,GAAA,YAAAA,EAAa,KAAMkD,EAAO,OAAO,IAAM,OAG9F,GAFGqL,IAAUA,EAAQ,MAAQC,IAE1BtD,EAAAhI,GAAA,YAAAA,EAAQ,SAAR,MAAAgI,EAAgB,OAAO,CACxB,MAAMuD,EAAclL,EAAK,cAAc,eAAe,EACtDkL,EAAY,YAAcvL,EAAO,OAAO,MAC9C,CAGI,GAAG,CAACqL,EAAQ,CACV,MAAMG,EAAe,MAAM,eACzB,WAAWzR,CAAS,+BACpB,CACE,MAAO,KAAK,KAAK,SAAS,oCAAoC,EAC9D,GAAIuR,CACd,CACO,EAED,GAAGxD,EAAa,SAAS9H,EAAO,OAAO,SAAS,EAAE,CAChD,MAAMyL,EAAgBpL,EAAK,cAAc,kCAAkC,EAC3EoL,GAAA,MAAAA,EAAe,mBAAmB,cAAeD,EACzD,CACA,CAEIH,EAAUhL,EAAK,cAAc,kBAAkB,EAC3C,KAAK,KAAK,QACZ4H,EAAA5H,EAAK,cAAc,cAAc,IAAjC,MAAA4H,EAAoC,UAAU,IAAI,UAClDoD,GAAA,MAAAA,EAAS,aAAa,SAAU,KAG/BrO,GAAUqO,IAASA,EAAQ,OAAQnD,EAAAlL,GAAA,YAAAA,EAAQ,UAAR,YAAAkL,EAAiB,IACpDmD,IACDvO,EAAY,GAAK,OAAOuO,EAAQ,KAAK,EACrCrL,EAAO,OAAO,GAAK,OAAOqL,EAAQ,KAAK,GAGzCA,GAAA,MAAAA,EAAS,iBAAiB,SAAU,IAAM,CACxCvO,EAAY,GAAK,OAAOuO,EAAQ,KAAK,EACrCrL,EAAO,OAAO,GAAK,OAAOqL,EAAQ,KAAK,GAAK,EAClD,GAQIvQ,EAAQ,IAAI,yBAA0B,CAACkF,EAAO,OAAQlD,CAAW,CAAC,EAGlE,MAAM4O,EAAgB,QAAQ3R,CAAS,IAAI,KAAK,KAAK,EAAE,gBACjD4R,EAAmBtL,EAAK,cAAc,kCAAkC,EACxEM,EAAmB,QAAOwH,EAAAnL,GAAA,YAAAA,EAAQ,UAAR,YAAAmL,EAAiB,WAAW,IAAKrL,GAAA,YAAAA,EAAa,cAAe,GAE1F,CAACuD,EAAK,aAAaqL,CAAa,GAAKC,IACtCtL,EAAK,aAAaqL,EAAe,MAAM,EACvCC,EAAiB,MAAQhL,GAAoB,GAC7CgL,EAAiB,cAAc,IAAI,MAAM,SAAU,CACjD,QAAS,GACT,WAAY,EACpB,CAAO,CAAC,GAEJtL,EAAK,aAAaqL,EAAe,MAAM,CAE3C,GA/sBO,IAAMhL,EAANoH,ECPA,MAAMhM,CAAa,CAMxB,OAAO,kBAAmB,CACxB,MAAM4J,EAAWzK,EAAa,EAGT,OAAO,QAAQyK,CAAQ,EAC/B,QAAQ,MAAMpC,GAAU,CACnC,MAAMsI,EAAUtI,EAAM,CAAC,EACvBxI,EAAQ,IAAI,kBAAkB,CAACwI,CAAK,CAAC,EAErC,MAAMuI,EAAa,CACjB,KAAMD,EAAQ,MACd,KAAMA,EAAQ,KACd,QAASA,EAAQ,QACjB,KAAMA,EAAQ,SACd,MAAOA,EAAQ,MACf,OAAQA,EAAQ,OAChB,eAAgBA,EAAQ,gBAAkB,GAC1C,SAAUvN,GAASvC,EAAa,MAAM8P,EAAQ,IAAKvN,CAAK,CAChE,EACSuN,EAAQ,UACTC,EAAW,QAAUD,EAAQ,SAG/B,MAAM,KAAK,SAAS,SAAS7R,EAAW6R,EAAQ,IAAKC,CAAU,EAG5D/P,EAAa,IAAI8P,EAAQ,GAAG,IAAI,QACjC9P,EAAa,IAAI8P,EAAQ,IAAKA,EAAQ,OAAO,EAE/C9Q,EAAQ,IAAI,mBAAmB,CAAC8Q,EAAQ,IAAK9P,EAAa,IAAI8P,EAAQ,GAAG,CAAC,CAAC,CACjF,CAAK,EACD9P,EAAa,wBAAyB,CAC1C,CAQE,OAAO,IAAIgQ,EAAarQ,EAAW1B,EAAU,CAC3C,GAAG,CAAC+R,EAAc,OAAO,KAEzB,IAAIF,EAAU,GAEd,GAAGnQ,IAAa1B,EACd6R,EAAU,KAAK,SAAS,IAAInQ,EAAYqQ,CAAW,MAChD,CAEH,IAAIC,EADW,KAAK,SAAS,QAAQ,IAAI,QAAQ,EACpB,GAAGtQ,CAAU,IAAIqQ,CAAW,EAAE,EAExDC,IAAkB,SAEnBA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGtQ,CAAU,IAAIqQ,CAAW,EAAE,EACjEF,EAAUG,GAAA,YAAAA,EAAiB,OAE7BjR,EAAQ,IAAI,cAAe,CAACiR,EAAiBH,CAAO,CAAC,CAC3D,CAEI,OAAOA,CACX,CASE,OAAO,IAAIE,EAAaE,EAAUvQ,EAAW1B,EAAU,CACrD,GAAG,CAAC+R,EAAc,MAAO,GAEzB,IAAIC,EAAkB,KAAK,SAAS,QAAQ,IAAI,QAAQ,EAAE,GAAGtQ,CAAU,IAAIqQ,CAAW,EAAE,EAEpFC,IAEFA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGtQ,CAAU,IAAIqQ,CAAW,EAAE,GAEnEhR,EAAQ,IAAI,UAAU,CAACgR,EAAaC,CAAe,CAAC,EAEpD,GAAG,CACD,KAAK,SAAS,IAAItQ,EAAYqQ,EAAaE,CAAQ,CACpD,MAAQ,CACPlR,EAAQ,IAAI,2BAA2B,CAACgR,EAAaC,CAAe,CAAC,CAC3E,CAEI,MAAO,EACX,CAEE,OAAO,MAAMD,EAAaE,EAAS,CACjC,MAAMtG,EAAWzK,EAAa,EAC9B,OAAO6Q,EAAW,CAChB,KAAKpG,EAAS,oBAAoB,IAChC5J,EAAa,yBAAyBkQ,CAAQ,EAC9C,MACF,KAAKtG,EAAS,YAAY,IACxB5J,EAAa,wBAAwBkQ,CAAQ,EAC7C,KAGR,CACA,CAEE,OAAO,yBAAyB3N,EAAM,CACpC,MAAMqH,EAAWzK,EAAa,EAC9BH,EAAQ,IAAI,2BAA4B,CAACuD,CAAK,CAAC,EAC/C,MAAMyH,EAAYzH,GAASvC,EAAa,IAAI4J,EAAS,oBAAoB,GAAG,EAC5EhF,EAAa,gBAAkBoF,EAG/B,MAAM5B,EAAqB,SAAS,cAAc,wBAAwB,EAC1E,GAAG,CAACA,EAAqB,OACrB4B,IAAc,GAChB5B,EAAmB,UAAU,OAAO,QAAQ,EAE5CA,EAAmB,UAAU,IAAI,QAAQ,EAG3C,MAAM+H,EAAa,KAAK,KAAK,SAAS/H,EAAmB,UAAU,SAAS,QAAQ,EAClF,+CACA,+CAA+C,EACjDA,EAAmB,QAAQ,QAAU+H,EAEjC,KAAK,KAAK,MAAQ,KAAK,SACzB,KAAK,QAAQ,SAAS/H,EAAoB,CAAC,KAAM+H,CAAU,CAAC,EAG9D3E,EAAiB,eAAgB,EACjCA,EAAiB,eAAgB,EAEjCxM,EAAQ,IAAI,uBAAwB,CAACgL,EAAW5B,CAAkB,CAAC,CACvE,CAEE,OAAO,wBAAwB7F,EAAM,CACnC,MAAMqH,EAAWzK,EAAa,EAC9ByF,EAAa,YAAcrC,GAASvC,EAAa,IAAI4J,EAAS,YAAY,GAAG,EAC7E5K,EAAQ,IAAI,0BAA2B,CAACuD,CAAK,CAAC,CAClD,CAEA,CC5IO,MAAM6N,EAAN,MAAMA,CAAK,CAUhB,OAAO,MAAM,CAEX1M,EAAW,WAAW0M,EAAK,mBAAmB,EAC9C,MAAM,KAAKtS,EAAW,KAAM,IAAM,CACfqB,EAAW,EAC5BH,EAAQ,IAAI,uBAAwB,CAAA,EAAI,EAAI,EAC5CgB,EAAa,iBAAkB,EAC/B4E,EAAa,KAAM,EACnBuB,GAAa,KAAM,EACnBqF,EAAiB,KAAM,EACvB4E,EAAK,cAAe,CAC1B,CAAK,EAED,MAAM,KAAKtS,EAAW,MAAO,IAAM,CZrCvC,IAAAgB,EAAAqC,EYsCMnC,EAAQ,IAAI,aAAc,CAAC,mBAAI,SAASF,EAAA,mBAAI,UAAJ,YAAAA,EAAa,UAAU,CAAC,EAChE,MAAM8K,EAAWzK,EAAa,EAE9B,IAAIkR,EAAYrQ,EAAa,IAAI4J,EAAS,UAAU,GAAG,EACpDyG,IAAW,OAAO,MAAM,MAAQ,IAEhC,KAAK,KAAK,MACX,MAAM,GAAGvS,EAAW,eAAgBsS,EAAK,eAAe,EAExD,KAAK,MAAM,QAAQ/Q,GAAQ,CACzB+Q,EAAK,gBAAgB/Q,CAAI,CACnC,CAAS,EACDW,EAAa,yBAA0B,EACvCwL,EAAiB,uBAAwB,EACzC,MAAM,GAAG1N,EAAW,kBAAoBwS,GAAY,CAClDtR,EAAQ,IAAIlB,EAAW,kBAAmB,CAACwS,EAAQ,UAAU,CAAC,EAC3DA,GAAUF,EAAK,aAAa,CAACE,EAAQ,UAAU,CAC5D,CAAS,EACDF,EAAK,aAAa,GAACjP,EAAA,mBAAI,UAAJ,MAAAA,EAAa,WAAU,GAE1CiP,EAAK,cAAe,CAE5B,CAAK,CACL,CAoBE,OAAO,gBAAgB/Q,EAAM,CAEvBA,EAAK,QAAUA,EAAK,KAAO,KAAK,KAAK,KACvCL,EAAQ,IAAI,kBAAmB,CAACK,CAAI,CAAC,EACrCqE,EAAW,YAAY0M,EAAK,aAAa,cAAe/Q,EAAK,EAAE,EAErE,CAEE,OAAO,eAAe,CACpB,GAAG,CAAC,KAAK,KAAM,OACf,MAAMkR,EAAiB,KAAK,SAAS,QAAQ,IAAI,QAAQ,EACzD,OAAAH,EAAK,WAAaG,EAAe,wBAAwB,GAAK,GAC9DvR,EAAQ,IAAI,gBAAiB,CAACoR,EAAK,UAAU,CAAC,EACvCA,EAAK,UAChB,CAGE,OAAO,eAAgB,CACrB,GAAI,KAAK,KAGT,GAFAA,EAAK,cAAe,EAEjB,KAAK,KAAK,KAAM,CACjBxL,EAAa,kBAAkB,KAAK,KAAK,EAAE,EAAIwL,EAAK,WACpD1M,EAAW,WAAW0M,EAAK,aAAa,kBAAmB,KAAK,KAAK,GAAIA,EAAK,UAAU,EACxF,MACN,MACMxL,EAAa,kBAAkB,KAAK,KAAK,EAAE,EAAIwL,EAAK,WAAa,KAAK,MAAMA,EAAK,UAAU,EAAI,CAAE,CAEvG,CAGE,OAAO,kBAAkB9M,EAAQqK,EAAY,CZhH/C,IAAA7O,IYiHQA,EAAA,KAAK,OAAL,MAAAA,EAAW,MAAQwE,IAAS,KAAK,KAAK,MAEnCsB,EAAa,oBAAmBA,EAAa,kBAAoB,CAAE,GACxEA,EAAa,kBAAkBtB,CAAM,EAAIqK,EAAa,KAAK,MAAMA,CAAU,EAAI,CAAE,EAEjF3O,EAAQ,IAAI,yCAAyCsE,CAAM,GAAI,CAACsB,EAAa,iBAAiB,CAAC,EAErG,CAKE,OAAO,qBAAsB,CAC3BlB,EAAW,aAAa0M,EAAK,aAAa,cAAeA,EAAK,aAAa,EAC3E1M,EAAW,aAAa0M,EAAK,aAAa,kBAAmBA,EAAK,iBAAiB,EACnFxL,EAAa,oBAAqB,CACtC,CAEA,EApHE7F,EADWqR,EACJ,aAAa,CAAE,GACtBrR,EAFWqR,EAEJ,eAAe,CACpB,kBAAmB,oBACnB,cAAe,eAChB,GAgDDrR,EArDWqR,EAqDJ,eAAgBI,GAAe,CACpC,MAAMxO,EAAO,SAAS,cAAc,MAAM,EACvCwO,EACDxO,EAAK,UAAU,IAAI,kBAAkB,EAErCA,EAAK,UAAU,OAAO,kBAAkB,CAE9C,GA5DO,IAAMyO,GAANL,ECTPK,GAAK,KAAM"}