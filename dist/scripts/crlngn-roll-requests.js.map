{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Settings.mjs","../../src/constants/General.mjs","../../src/constants/Hooks.mjs","../../src/components/LogUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/DiceConfigUtil.mjs","../../src/components/SettingsUtil.mjs","../../src/components/ActivityUtil.mjs","../../src/components/GMRollConfigDialog.mjs","../../src/components/RollInterceptor.mjs","../../src/components/helpers/Helpers.mjs","../../src/components/CustomRollDialog.mjs","../../src/components/helpers/RollHandlers.mjs","../../src/components/helpers/RollValidationHelpers.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/SidebarUtil.mjs","../../src/components/HooksUtil.mjs","../../src/components/RollRequestUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    skipDialogs: {\n      tag: \"skip-dialogs\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    rollInterceptionEnabled: {\n      tag: \"roll-interception-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    showOfflineNotifications: {\n      tag: \"show-offline-notifications\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cFlash Rolls 5e`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const SOCKET_CALLS = {\n  receiveDiceConfig: \"receiveDiceConfig\",\n  getDiceConfig: \"getDiceConfig\",\n  handleRollRequest: \"handleRollRequest\"\n};\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", requestType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", requestType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", requestType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", requestType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", requestType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", requestType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" }, // Recharge rolls\n\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" }, // D20 test\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" }, // Short rest\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" }, // Long rest\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\n/**\n * Roll types used throughout the module\n * @constant\n * @type {Object}\n */\nexport const ROLL_TYPES = {\n  ABILITY: \"ability\",\n  ABILITY_CHECK: \"abilitycheck\",\n  SAVE: \"save\",\n  SAVING_THROW: \"savingthrow\",\n  SKILL: \"skill\",\n  TOOL: \"tool\",\n  CONCENTRATION: \"concentration\",\n  ATTACK: \"attack\",\n  DAMAGE: \"damage\",\n  INITIATIVE: \"initiative\",\n  INITIATIVE_DIALOG: \"initiativedialog\",\n  DEATH_SAVE: \"deathsave\",\n  HIT_DIE: \"hitdie\",\n  ITEM_SAVE: \"itemsave\",\n  CUSTOM: \"custom\",\n  HEALING: \"healing\",\n  FORMULA: \"formula\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: ROLL_TYPES.ABILITY_CHECK, label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: ROLL_TYPES.SAVING_THROW, label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SKILL: { name: ROLL_TYPES.SKILL, label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: ROLL_TYPES.TOOL, label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: ROLL_TYPES.CONCENTRATION, label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: ROLL_TYPES.INITIATIVE_DIALOG, label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: ROLL_TYPES.DEATH_SAVE, label: \"Death Save\", subList: null, actorPath: '' },\n  // ITEM_SAVE: { name: ROLL_TYPES.ITEM_SAVE, label: \"Item Save\", subList: null, actorPath: '' },\n  HIT_DIE: { name: ROLL_TYPES.HIT_DIE, label: \"Hit Die\", subList: null, actorPath: '' },\n  CUSTOM: { name: ROLL_TYPES.CUSTOM, label: \"Custom Roll\", subList: null, actorPath: '' },\n}\n\n/**\n * Module configuration object\n * @constant\n * @type {Object}\n */\nexport const MODULE = {\n  ID: MODULE_ID,\n  ROLL_REQUEST_OPTIONS: ROLL_REQUEST_OPTIONS\n}\n","/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  RENDER_SIDEBAR_TAB: \"renderSidebarTab\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheckV2\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrowV2\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheckV2\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrowV2\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_CONFIGURE_INITIATIVE: \"dnd5e.preConfigureInitiative\",\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE_DIALOG_V2: \"dnd5e.preRollInitiativeDialogV2\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_BUILD_ROLL_CONFIG: \"dnd5e.postBuildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debug-mode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      // If settings aren't available yet, check bypassSettings\n      if (bypassSettings || LogUtil.debugOn) {\n        console.log(...DEBUG_TAG, ref, ...data);\n      }\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    LogUtil.log('initialize', [callbackFunc]);\n\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n      } catch (e) {\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    LogUtil.log('registerCall', [name]);\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n    } else {\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log('sendMessage', [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    LogUtil.log('execForGMs', [handler, ...parameters]);\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    LogUtil.log('execForUser', [handler, userId, ...parameters]);\n    if (!SocketUtil.socket) {\n        return;\n    }\n\n    if(userId === game.user.id){\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n        const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n        return resp;\n    } catch (error) {\n        return null;\n    } finally {\n        // Always clean up, even if there was an error\n        SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    LogUtil.log('serializeForTransport', [data, hasRolls]);\n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    LogUtil.log('deserializeFromTransport', [data, hasRolls]);\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { SocketUtil } from './SocketUtil.mjs';\n\n/**\n * Utility class for managing dice configurations across users\n */\nexport class DiceConfigUtil {\n  /**\n   * @type {Object} Current user's dice configuration\n   */\n  static diceConfig = {};\n  \n  /**\n   * @type {Object} All player dice configurations (GM only)\n   */\n  static playerDiceConfigs = {};\n  \n  /**\n   * Initialize the dice configuration for current user\n   */\n  static initialize() {\n    this.setDiceConfig();\n  }\n  \n  /**\n   * Set dice configuration from client settings\n   * @returns {Object} The dice configuration\n   */\n  static setDiceConfig() {\n    if (!game.user) return {};\n    \n    const clientSettings = game.settings.storage.get(\"client\");\n    this.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Get the current user's dice configuration\n   * @returns {Object} The dice configuration\n   */\n  static getDiceConfig() {\n    if (!game.user) return {};\n    \n    // Ensure we have the latest configuration\n    this.setDiceConfig();\n    \n    // If GM, send config to GMs via socket\n    if (game.user.isGM) {\n      this._sendDiceConfigToGMs();\n    }\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Send dice configuration to all GMs\n   * @private\n   */\n  static _sendDiceConfigToGMs() {\n    SocketUtil.execForGMs('receiveDiceConfig', game.user.id, this.diceConfig);\n  }\n  \n  /**\n   * Receive and store dice configuration from a player\n   * @param {string} userId - The user ID\n   * @param {string} diceConfig - The serialized dice configuration\n   */\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId === game.user?.id) {\n      this.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n    }\n  }\n  \n  /**\n   * Get dice configuration for a specific user\n   * @param {string} userId - The user ID\n   * @returns {Object} The user's dice configuration\n   */\n  static getUserDiceConfig(userId) {\n    if (userId === game.user?.id) {\n      return this.diceConfig;\n    }\n    \n    return this.playerDiceConfigs[userId] || {};\n  }\n  \n  /**\n   * Request dice configuration from a specific user\n   * @param {string} userId - The user ID to request from\n   */\n  static requestDiceConfigFromUser(userId) {\n    SocketUtil.execForUser('getDiceConfig', userId);\n  }\n  \n  /**\n   * Request dice configuration from all active non-GM users\n   */\n  static requestDiceConfigFromAllPlayers() {\n    if (!game.user?.isGM) return;\n    \n    game.users.forEach(user => {\n      if (user.active && !user.isGM && user.id !== game.user.id) {\n        this.requestDiceConfigFromUser(user.id);\n      }\n    });\n  }\n  \n  /**\n   * Clear all stored player dice configurations\n   */\n  static clearPlayerConfigs() {\n    this.playerDiceConfigs = {};\n  }\n  \n  /**\n   * Check if a user has dice configuration stored\n   * @param {string} userId - The user ID\n   * @returns {boolean} True if configuration exists\n   */\n  static hasUserConfig(userId) {\n    if (userId === game.user?.id) {\n      return !!this.diceConfig;\n    }\n    \n    return !!this.playerDiceConfigs[userId];\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined || SettingsUtil.get(setting.tag)===null){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsEnabled(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsEnabled(newValue){\n    const requestsIcon = document.querySelector(\"#chat-controls .chat-control-icon.roll-requests-icon\");\n    if(!requestsIcon){ return; }\n    \n    if(newValue){\n      requestsIcon.classList.add(\"active\");\n    }else{\n      requestsIcon.classList.remove(\"active\");\n    }\n  }\n}\n","import { LogUtil } from './LogUtil.mjs';\nimport { ROLL_TYPES } from '../constants/General.mjs';\n\n/**\n * Utility class for handling D&D5e 4.x activities\n */\nexport class ActivityUtil {\n  \n  /**\n   * Find the appropriate activity for a given roll type on an item\n   * @param {Item5e} item - The item to search for activities\n   * @param {string} rollType - The type of roll (attack, damage, itemSave)\n   * @returns {Activity5e|null} - The found activity or null\n   */\n  static findActivityForRoll(item, rollType) {\n    if (!item?.system?.activities) return null;\n    \n    const activities = item.system.activities;\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.ATTACK:\n        const attackActivities = activities.getByType(\"attack\");\n        return attackActivities?.[0] || null;\n        \n      case ROLL_TYPES.DAMAGE:\n        // For damage rolls, check attack activities first, then damage, then save\n        const damageAttackActivities = activities.getByType(\"attack\");\n        if (damageAttackActivities?.length > 0) return damageAttackActivities[0];\n        \n        const damageActivities = activities.getByType(\"damage\");\n        if (damageActivities?.length > 0) return damageActivities[0];\n        \n        const saveActivities = activities.getByType(\"save\");\n        if (saveActivities?.length > 0) return saveActivities[0];\n        \n        return null;\n        \n      case ROLL_TYPES.ITEM_SAVE:\n        const itemSaveActivities = activities.getByType(\"save\");\n        return itemSaveActivities?.[0] || null;\n        \n      default:\n        return null;\n    }\n  }\n  \n  /**\n   * Get all activities of a specific type from an item\n   * @param {Item5e} item - The item to search\n   * @param {string} activityType - The activity type (attack, damage, save, etc.)\n   * @returns {Activity5e[]} - Array of activities\n   */\n  static getActivitiesByType(item, activityType) {\n    if (!item?.system?.activities) return [];\n    return item.system.activities.getByType(activityType);\n  }\n  \n  /**\n   * Check if an item has activities suitable for a given roll type\n   * @param {Item5e} item - The item to check\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} - Whether the item has suitable activities\n   */\n  static hasActivityForRoll(item, rollType) {\n    LogUtil.log('hasActivityForRoll', [item, rollType]);\n    return !!this.findActivityForRoll(item, rollType);\n  }\n  \n  /**\n   * Execute a roll using the appropriate activity method\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {string} itemId - The item ID\n   * @param {string} activityId - The activity ID (optional)\n   * @param {Object} config - Roll configuration\n   */\n  static async executeActivityRoll(actor, rollType, itemId, activityId, config) {\n    LogUtil.log('executeActivityRoll', [actor, rollType, itemId, activityId, config]);\n    const item = actor.items.get(itemId);\n    if (!item) {\n      throw new Error(`Item ${itemId} not found on actor ${actor.name}`);\n    }\n    \n    let activity = null;\n    \n    // If activity ID provided, use it directly\n    if (activityId) {\n      activity = item.system.activities?.get(activityId);\n      if (!activity) {\n      }\n    }\n    \n    // If no activity found yet, search by roll type\n    if (!activity) {\n      activity = this.findActivityForRoll(item, rollType);\n    }\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Execute the roll based on type\n    if (activity) {\n      switch (normalizedRollType) {\n        case ROLL_TYPES.ATTACK:\n          const dialogConfig = {\n            configure: true  // Always true for players receiving roll requests\n          };\n \n          if(MidiQOL) {\n            const workflow = await ActivityUtil.syntheticItemRoll(item, {\n              ...config\n            });\n            return;\n          }else{\n            return await activity.use(usageConfig, dialogConfig);\n          }\n        case ROLL_TYPES.DAMAGE:\n          if(MidiQOL) {\n            const workflow = MidiQOL?.Workflow?.getWorkflow(activity.uuid);\n            const damageRoll = await workflow.activity.rollDamage({\n              ...config,\n              workflow: workflow\n            });\n            return;\n          }else{\n            return await activity.rollDamage(config);\n            // return await activity.use(usageConfig, dialogConfig);\n          }\n          \n          \n        case ROLL_TYPES.ITEM_SAVE:\n          // For save activities, use the item's use() method to show the save card\n          return await item.use({ activity: activity.id }, { skipDialog: config.fastForward });\n          \n        default:\n          throw new Error(`Unknown roll type: ${normalizedRollType}`);\n      }\n    } else {\n      // Fallback to legacy methods if no activity found\n      \n      switch (normalizedRollType) {\n        case ROLL_TYPES.ATTACK:\n          if (item.rollAttack) {\n            return await item.rollAttack(config);\n          }\n          break;\n          \n        case ROLL_TYPES.DAMAGE:\n          if (item.rollDamage) {\n            return await item.rollDamage(config);\n          }\n          break;\n          \n        case ROLL_TYPES.ITEM_SAVE:\n          // Try to use the item directly\n          return await item.use({}, { skipDialog: config.fastForward });\n      }\n      \n      throw new Error(`No suitable method found for ${normalizedRollType} on item ${item.name}`);\n    }\n  }\n  \n  /**\n   * Get display information for an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {Object} - Display information\n   */\n  static getActivityDisplayInfo(activity) {\n    LogUtil.log('getActivityDisplayInfo', [activity]);\n    if (!activity) return null;\n    \n    return {\n      name: activity.name || activity.constructor.metadata.label,\n      type: activity.type,\n      icon: activity.constructor.metadata.icon,\n      canAttack: activity.type === 'attack',\n      canDamage: ['attack', 'damage', 'save'].includes(activity.type),\n      canSave: activity.type === 'save'\n    };\n  }\n  \n  /**\n   * Get damage formula string from an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {string|null} - Combined damage formula or null\n   */\n  static getDamageFormula(activity) {\n    LogUtil.log('getDamageFormula', [activity]);\n    if (!activity?.damage?.parts?.length) return null;\n    \n    // Extract all damage formulas and combine them\n    const formulas = activity.damage.parts.map(part => part.formula).filter(f => f);\n    return formulas.length > 0 ? formulas.join(' + ') : null;\n  }\n\n  static async syntheticItemRoll(item, config = {}) {\n    LogUtil.log('syntheticItemRoll', [item, config]);\n    let defaultConfig = {\n        consumeUsage: false,\n        consumeSpellSlot: false\n    };\n    let defaultOptions = {\n      // targetUuids: targets.map(i => i.document.uuid),\n      configureDialog: true,\n      // ignoreUserTargets: true,\n      workflowOptions: {\n        autoRollAttack: false,\n        autoFastAttack: false,\n        autoRollDamage: 'none',\n        autoFastDamage: false\n      }\n    };\n\n    // options = genericUtils.mergeObject(defaultOptions, options);\n    config = {...defaultConfig, ...config};\n    return await MidiQOL.completeItemUse(item, config, defaultOptions);\n  }\n\n  static async replaceDamage(workflow, formula, {ignoreCrit = false, damageType} = {}) {\n    formula = String(formula);\n    if (workflow.isCritical && !ignoreCrit) formula = await rollUtils.getCriticalFormula(formula, workflow.item.getRollData());\n    let roll = await new CONFIG.Dice.DamageRoll(formula).evaluate();\n\n    await workflow.setDamageRolls([roll]);\n    \n    return roll;\n  }\n}","import { LogUtil } from \"./LogUtil.mjs\";\nimport { MODULE_ID, ROLL_TYPES } from \"../constants/General.mjs\";\n\n/**\n * GM Roll Configuration Dialog\n * Extends the standard D&D5e roll configuration dialogs to add DC field and send request toggle\n */\nexport class GMRollConfigDialog extends dnd5e.applications.dice.D20RollConfigurationDialog {\n  constructor(config = {}, message = {}, options = {}) {\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    super(config, message, options);\n    \n    LogUtil.log('constructor - initializing GM Dialog', [config, message, options]);\n    \n    // Store GM-specific options\n    this.actors = options.actors || [];\n    this.sendRequest = options.defaultSendRequest ?? options.sendRequest ?? true;\n    \n    this.showDC = options.showDC || false;\n    this.dcValue = options.dcValue || null;\n    \n    // Store roll type and key for re-renders\n    this.rollKey = options.rollKey || config.skill || config.ability || null;\n    this.rollTypeString = options.rollTypeString || null;\n    \n    // Store original window title and subtitle\n    this.windowTitle = options.window?.title || \"\";\n    this.windowSubtitle = options.window?.subtitle || \"\";\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Override title to use our stored title\n   */\n  get title() {\n    return this.windowTitle || super.title;\n  }\n  \n  /**\n   * Prepare configuration data for a roll.\n   * Extends parent to add DC and send request options\n   * @param {D20Roll} roll    The roll being configured.\n   * @param {object} [config] Configuration for the roll.\n   * @param {object} [dialog] Configuration for the dialog.\n   * @param {object} [message] Configuration for the chat message.\n   * @returns {object}\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context that is provided to all rendered parts.\n   * Extends parent to add DC field context\n   * @param {ApplicationRenderOptions} options  Render options provided to the render method.\n   * @returns {object}\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    LogUtil.log('_preparePartContext', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _onRender(context, options) {\n    LogUtil.log('_onRender', [context, options]);\n    super._onRender(context, options);\n    \n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas').parentNode;\n    // }\n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n    \n    // If we have initial situational bonus, trigger a rebuild to update the formula\n    if (this.config.rolls?.[0]?.data?.situational || this.config.situational) {\n      LogUtil.log('GMRollConfigDialog._onRender', ['Triggering rebuild for initial situational bonus']);\n      // Use a small delay to ensure the form is fully rendered\n      setTimeout(() => {\n        this.rebuild();\n      }, 100);\n    }\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons\n   * @private\n   */\n  _attachButtonListeners() {\n    LogUtil.log('_attachButtonListeners', [this.element]);\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _onChangeForm(formConfig, event) {\n    LogUtil.log('_onChangeForm', [formConfig, event]);\n    super._onChangeForm(formConfig, event);\n    \n    // Capture the current state of our custom fields before re-render\n    const sendRequestCheckbox = this.element.querySelector('input[name=\"crlngn-send-request\"]');\n    if (sendRequestCheckbox) {\n      this.sendRequest = sendRequestCheckbox.checked;\n    }\n    \n    const dcInput = this.element.querySelector('input[name=\"dc\"]');\n    if (dcInput && dcInput.value) {\n      this.dcValue = parseInt(dcInput.value) || null;\n    }\n    \n  }\n  \n  /**\n   * Override _buildConfig to log what's happening\n   * @protected\n   */\n  _buildConfig(config, formData, index) {\n    LogUtil.log('_buildConfig', [config, formData, index]);\n    // Extract ability from form data if present (for skill/tool dialogs)\n    const abilityFromForm = formData?.get(\"ability\");\n    const dcFromForm = formData?.get(\"dc\");\n    \n    // Handle situational bonus like D&D5e does\n    const situational = formData?.get(`rolls.${index}.situational`);\n    if (situational && (config.situational !== false)) {\n      if (!config.parts) config.parts = [];\n      config.parts.push(\"@situational\");\n      if (!config.data) config.data = {};\n      config.data.situational = situational;\n    } else if (config.parts) {\n      // Remove @situational if no value provided\n      const idx = config.parts.indexOf(\"@situational\");\n      if (idx !== -1) config.parts.splice(idx, 1);\n    }\n    \n    // If ability is in form data, update the config\n    if (abilityFromForm) {\n      config.ability = abilityFromForm;\n      // Also update this.config.ability to persist the selection\n      this.config.ability = abilityFromForm;\n    }\n    \n    const result = super._buildConfig(config, formData, index);\n    \n    // Apply DC if we have one\n    if (dcFromForm) {\n      const dcValue = parseInt(dcFromForm);\n      if (!isNaN(dcValue)) {\n        result.options = result.options || {};\n        result.options.target = dcValue;\n      }\n    } else if (this.dcValue !== undefined && this.dcValue !== null) {\n      result.options = result.options || {};\n      result.options.target = this.dcValue;\n    }\n    \n    \n    return result;\n  }\n  \n  /**\n   * Process form submission.\n   * @param {SubmitEvent} event             The originating form submission event.\n   * @param {HTMLFormElement} form          The form element that was submitted.\n   * @param {FormDataExtended} formData     Processed data for the submitted form.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _processSubmitData(event, form, formData) {\n    LogUtil.log('_processSubmitData', [event, form, formData]);\n    \n    await super._processSubmitData(event, form, formData);\n    \n    // Extract DC value if present\n    if (formData.has(\"dc\") && formData.get(\"dc\") !== \"\") {\n      const dcValue = parseInt(formData.get(\"dc\"));\n      if (!isNaN(dcValue)) {\n        // Store DC value to apply later\n        this.dcValue = dcValue;\n        \n        // Try to add DC to all rolls as target if they exist\n        if (this.config.rolls && this.config.rolls.length > 0) {\n          for (const roll of this.config.rolls) {\n            roll.options.target = dcValue;\n          }\n        }\n      }\n    }\n    \n    // Store send request preference\n    this.sendRequest = formData.get(\"crlngn-send-request\") !== \"false\";\n  }\n  \n  /**\n   * Finalize the rolls and handle the results.\n   * @param {string} action     The action button that was clicked\n   * @returns {D20Roll[]}\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    LogUtil.log('_finalizeRolls', [action, this.config]);\n    \n    // Let parent handle advantage/disadvantage mode\n    const finalizedRolls = super._finalizeRolls(action);\n    LogUtil.log('_finalizeRolls #2', [finalizedRolls]);\n    \n    // Apply DC if we have one stored\n    if (this.dcValue !== undefined && this.dcValue !== null) {\n      for (const roll of finalizedRolls) {\n        roll.options.target = this.dcValue;\n      }\n    }\n    \n    // Store our custom properties\n    this.config.sendRequest = this.sendRequest;\n    \n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the dialog\n   * @param {Actor[]} actors - The actors to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {object} options - Additional options\n   * @returns {Promise<object|null>} The configured roll data or null if cancelled\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    // Ensure we have valid actors (in case IDs were passed)\n    if (actors.length > 0 && typeof actors[0] === 'string') {\n      actors = actors.map(actorId => game.actors.get(actorId)).filter(a => a);\n    }\n    // Log detailed information about what we're receiving\n    LogUtil.log('GMRollConfigDialog.getConfiguration', [{\n      actors,\n      actorNames: actors.map(a => a.name),\n      rollType,\n      rollKey,\n      options,\n      firstActorData: actors[0] ? {\n        name: actors[0].name,\n        abilities: actors[0].system?.abilities ? Object.keys(actors[0].system.abilities) : [],\n        skills: actors[0].system?.skills ? Object.keys(actors[0].system.skills) : [],\n        initAbility: actors[0].system?.attributes?.init?.ability\n      } : null\n    }]);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Determine if we should show DC field\n    const showDC = [\n      ROLL_TYPES.SAVE,\n      ROLL_TYPES.SAVING_THROW,\n      ROLL_TYPES.ABILITY,\n      ROLL_TYPES.ABILITY_CHECK,\n      ROLL_TYPES.CONCENTRATION\n    ].includes(normalizedRollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Determine the appropriate roll class based on roll type\n    let rollClass = CONFIG.Dice.D20Roll;\n    if ([ROLL_TYPES.DAMAGE, ROLL_TYPES.HEALING].includes(normalizedRollType)) {\n      rollClass = CONFIG.Dice.DamageRoll || CONFIG.Dice.BasicRoll;\n    } else if ([ROLL_TYPES.FORMULA, ROLL_TYPES.CUSTOM, ROLL_TYPES.HIT_DIE].includes(normalizedRollType)) {\n      rollClass = CONFIG.Dice.BasicRoll;\n    }\n    \n    // Fallback to D20Roll if class not found\n    if (!rollClass) {\n      rollClass = CONFIG.Dice.D20Roll;\n    }\n    \n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add roll-specific data\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        rollConfig.skill = rollKey;\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        rollConfig.ability = rollKey;\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        rollConfig.ability = rollKey;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        // Use placeholder formula on input since actual denomination varies by actor\n        rollConfig.rolls[0].parts = [];\n        rollConfig.rolls[0].options.flavor = \"Hit Die\";\n        break;\n    }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => this._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        rollTypeString: normalizedRollType,  // Store the roll type string\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...options\n      }\n    };\n    \n    // Create and render the dialog\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Build return configuration with only modified properties\n    const finalConfig = {\n      chatMessage: true,\n      isRollRequest: result.sendRequest,  // Only true when sending to players\n      skipDialog: options.skipDialogs || false,\n      sendRequest: result.sendRequest\n    };\n    \n    // Only add properties that were actually changed from defaults\n    if (advantage) finalConfig.advantage = true;\n    if (disadvantage) finalConfig.disadvantage = true;\n    \n    // Check if rollMode differs from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      finalConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add situational bonus if provided\n    // The situational bonus might be in different places depending on roll type\n    \n    // Check various possible locations for situational bonus\n    let situational = firstRoll?.options?.situational || \n                      firstRoll?.data?.situational || \n                      result.config?.data?.situational || \"\";\n    \n    // Also check if it's in the roll parts\n    if (!situational && firstRoll?.parts?.length > 0) {\n      // Look for parts that contain @situational\n      const situationalPart = firstRoll.parts.find(part => part.includes('@situational'));\n      if (situationalPart && firstRoll.data?.situational) {\n        situational = firstRoll.data.situational;\n      }\n    }\n    \n    if (situational) {\n      finalConfig.situational = situational;\n      finalConfig.parts = [\"@situational\"];  // Use @situational placeholder, not the actual value\n    }\n    \n    // Add DC if provided\n    if (firstRoll?.options?.target) {\n      finalConfig.target = firstRoll.options.target;\n    }\n    \n    // Add ability for skills/tools if it was selected and differs from default\n    if (result.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      // Check if this differs from the default ability for this skill/tool\n      const defaultAbility = actor.system.skills?.[rollKey]?.ability || CONFIG.DND5E.skills?.[rollKey]?.ability;\n      if (result.config.ability !== defaultAbility) {\n        finalConfig.ability = result.config.ability;\n      }\n    }\n    \n    // Add the roll title from the dialog window\n    finalConfig.rollTitle = dialogConfig.options.window.title;\n    \n    \n    return finalConfig;\n  }\n  \n  /**\n   * Check if actor is player owned\n   * @private\n   */\n  static _isPlayerOwned(actor) {\n    LogUtil.log('GMRollConfigDialog._isPlayerOwned', [actor]);\n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n  \n  /**\n   * Get a formatted title for the roll type\n   * @private\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {Actor} actor - The actor (used to get default ability for skills)\n   * @returns {string} The formatted title\n   */\n  static _getRollTitle(rollType, rollKey, actor) {\n    LogUtil.log('GMRollConfigDialog._getRollTitle', [rollType, rollKey, actor]);\n    \n    // Log detailed information about title generation\n    LogUtil.log('GMRollConfigDialog._getRollTitle - Detailed', {\n      rollType,\n      rollKey,\n      actorName: actor?.name,\n      actorAbilities: actor?.system?.abilities ? Object.keys(actor.system.abilities) : [],\n      actorSkills: actor?.system?.skills ? Object.keys(actor.system.skills) : [],\n      actorInitAbility: actor?.system?.attributes?.init?.ability\n    });\n    \n    let title = \"\";\n    \n    // Convert rollType to lowercase for comparison\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Log if rollKey is missing for certain types\n    if ([ROLL_TYPES.SAVE, ROLL_TYPES.ABILITY, ROLL_TYPES.ABILITY_CHECK].includes(normalizedRollType) && !rollKey) {\n      LogUtil.warn('Missing rollKey for roll type', [normalizedRollType, rollKey]);\n    }\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        // Get the default ability for this skill\n        const skill = actor?.system.skills?.[rollKey];\n        const defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n        const abilityLabel = CONFIG.DND5E.abilities[defaultAbility]?.label || defaultAbility;\n        // D&D5e format: \"Wisdom (Arcana) Check\"\n        title = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: abilityLabel \n        });\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        const saveAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.SavePromptTitle\", { ability: saveAbility });\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        const checkAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.AbilityPromptTitle\", { ability: checkAbility });\n        break;\n      case ROLL_TYPES.CONCENTRATION:\n        title = game.i18n.localize(\"DND5E.Concentration\");\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        title = game.i18n.format(\"DND5E.ToolPromptTitle\", { tool: toolLabel });\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        title = game.i18n.localize(\"DND5E.DeathSave\");\n        break;\n      case ROLL_TYPES.INITIATIVE: \n      case ROLL_TYPES.INITIATIVE_DIALOG: // Handle alternate case\n        title = game.i18n.localize(\"DND5E.Initiative\");\n        break;\n      default:\n        title = game.i18n.localize(\"DND5E.Roll\");\n    }\n    LogUtil.log('_getRollTitle', [normalizedRollType, title]);\n    \n    return title;\n  }\n\n  static _getSubtitle(actors = []) {\n    if (actors.length === 1) {\n      return actors[0].name;\n    } else if (actors.length > 1) {\n      return game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.multipleActors\");\n    } else {\n      return \"\";\n    }\n  }\n}\n\n/**\n * GM Hit Die Configuration Dialog\n * Extends base RollConfigurationDialog for hit die rolls\n */\nexport class GMHitDieConfigDialog extends dnd5e.applications.dice.RollConfigurationDialog {\n  constructor(config = {}, message = {}, options = {}) {\n    // Ensure rollType is set to BasicRoll for hit die\n    options.rollType = CONFIG.Dice.BasicRoll || Roll;\n    \n    super(config, message, options);\n    \n    LogUtil.log('constructor', [config, message, options]);\n    \n    // Store GM-specific options\n    this.actors = options.actors || [];\n    this.sendRequest = options.defaultSendRequest ?? options.sendRequest ?? true;\n    this.showDC = false; // No DC for hit die rolls\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\", \"hit-die-config\"]\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Override the formula display for hit die\n    data.formula = \"Hit Die (varies by actor)\";\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n      // Override formula display\n      context.formula = \"Hit Die (varies by actor)\";\n    }\n    \n    return context;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _onRender(context, options) {\n    super._onRender(context, options);\n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject send request toggle\n    let configSection = this.element.querySelector('.rolls .formulas');\n    \n    if (configSection && this.actors.length > 0) {\n      const templateData = {\n        showDC: false,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _onChangeForm(formConfig, event) {\n    super._onChangeForm(formConfig, event);\n    \n    // Capture send request state\n    const sendRequestCheckbox = this.element.querySelector('input[name=\"crlngn-send-request\"]');\n    if (sendRequestCheckbox) {\n      this.sendRequest = sendRequestCheckbox.checked;\n    }\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _processSubmitData(event, form, formData) {\n    await super._processSubmitData(event, form, formData);\n    \n    LogUtil.log('_processSubmitData', [formData.get(\"crlngn-send-request\")]);\n    // Store send request preference\n    this.sendRequest = formData.get(\"crlngn-send-request\") !== \"false\";\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _finalizeRolls(action) {\n    const finalizedRolls = super._finalizeRolls(action);\n    \n    LogUtil.log('_finalizeRolls', [this.sendRequest]);\n    // Store our custom properties\n    this.config.sendRequest = this.sendRequest;\n    \n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the dialog\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    LogUtil.log('GMRollConfigDialog.getConfiguration', [actors, rollType, rollKey, options]);\n    \n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Build basic roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {\n          flavor: \"Hit Die Roll\"\n        }\n      }]\n    };\n    \n    const messageConfig = {\n      create: false,\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => GMRollConfigDialog._isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.BasicRoll || Roll,\n        window: {\n          title: game.i18n.localize(\"DND5E.HitDice\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...options\n      }\n    };\n    \n    // Create and render the dialog\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Build return configuration\n    const finalConfig = {\n      chatMessage: true,\n      isRollRequest: result.sendRequest,\n      skipDialog: options.skipDialogs || false,\n      sendRequest: result.sendRequest\n    };\n    \n    // Check if rollMode differs from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      finalConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add situational bonus if provided\n    const firstRoll = result.rolls[0];\n    const situational = firstRoll?.options?.situational || firstRoll?.data?.situational || \"\";\n    if (situational) {\n      finalConfig.situational = situational;\n      finalConfig.parts = [\"@situational\"];\n    }\n    \n    return finalConfig;\n  }\n}\n\n/**\n * GM Skill/Tool Configuration Dialog\n * Extends SkillToolRollConfigurationDialog for ability selection\n */\nexport class GMSkillToolConfigDialog extends dnd5e.applications.dice.SkillToolRollConfigurationDialog {\n  constructor(config = {}, message = {}, options = {}) {\n    // Force ability selection\n    const skillConfig = foundry.utils.mergeObject(config, {\n      chooseAbility: true\n    });\n    \n    // Ensure rollType is set in options\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    \n    // SkillToolRollConfigurationDialog expects (config, message, options)\n    super(skillConfig, message, options);\n    \n    LogUtil.log('constructor', [config, message, options]);\n    \n    // Store GM-specific options\n    this.actors = options.actors || [];\n    \n    // Use defaultSendRequest if provided, otherwise use sendRequest, otherwise default to true\n    this.sendRequest = options.defaultSendRequest ?? options.sendRequest ?? true;\n    \n    this.showDC = options.showDC || false;\n    this.dcValue = options.dcValue || null;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _preparePartContext(partId, context, options) {\n    LogUtil.log('_preparePartContext', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _onRender(context, options) {\n    LogUtil.log('_onRender', [context, options]);\n    super._onRender(context, options);\n    \n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    // Try multiple selectors to find the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas fieldset');\n    // }\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('fieldset').parentNode;\n    // }\n    \n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n    \n    // If we have initial situational bonus, trigger a rebuild to update the formula\n    if (this.config.rolls?.[0]?.data?.situational || this.config.situational) {\n      // Use a small delay to ensure the form is fully rendered\n      setTimeout(() => {\n        this.rebuild();\n      }, 100);\n    }\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons\n   * @private\n   */\n  _attachButtonListeners() {\n    LogUtil.log('_attachButtonListeners', []);\n\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _onChangeForm(formConfig, event) {\n    LogUtil.log('_onChangeForm', [formConfig, event]);\n    super._onChangeForm(formConfig, event);\n    \n    // Capture the current state of our custom fields before re-render\n    const sendRequestCheckbox = this.element.querySelector('input[name=\"crlngn-send-request\"]');\n    if (sendRequestCheckbox) {\n      this.sendRequest = sendRequestCheckbox.checked;\n    }\n    \n    const dcInput = this.element.querySelector('input[name=\"dc\"]');\n    if (dcInput && dcInput.value) {\n      this.dcValue = parseInt(dcInput.value) || null;\n    }\n    \n    // If ability selection changed, update the config\n    if (event.target?.name === \"ability\" && event.target?.value) {\n      this.config.ability = event.target.value;\n    }\n    \n  }\n  \n  /**\n   * Override _buildConfig to log what's happening\n   * @protected\n   */\n  _buildConfig(config, formData, index) {\n    LogUtil.log('_buildConfig', [config, formData, index]);\n    // Extract ability from form data if present\n    const abilityFromForm = formData?.get(\"ability\");\n    const dcFromForm = formData?.get(\"dc\");\n    \n    \n    // If ability is in form data, update the config\n    if (abilityFromForm) {\n      config.ability = abilityFromForm;\n      // Also update this.config.ability to persist the selection\n      this.config.ability = abilityFromForm;\n    }\n    \n    const result = super._buildConfig(config, formData, index);\n    \n    // Apply DC if we have one\n    if (dcFromForm) {\n      const dcValue = parseInt(dcFromForm);\n      if (!isNaN(dcValue)) {\n        result.options = result.options || {};\n        result.options.target = dcValue;\n      }\n    } else if (this.dcValue !== undefined && this.dcValue !== null) {\n      result.options = result.options || {};\n      result.options.target = this.dcValue;\n    }\n    \n    \n    return result;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _processSubmitData(event, form, formData) {\n    LogUtil.log('_processSubmitData', [event, form, formData]);\n    \n    await super._processSubmitData(event, form, formData);\n    \n    // Extract DC value if present\n    if (formData.has(\"dc\") && formData.get(\"dc\") !== \"\") {\n      const dcValue = parseInt(formData.get(\"dc\"));\n      if (!isNaN(dcValue)) {\n        // Store DC value to apply later\n        this.dcValue = dcValue;\n        \n        // Try to add DC to all rolls as target if they exist\n        if (this.config.rolls && this.config.rolls.length > 0) {\n          for (const roll of this.config.rolls) {\n            roll.options.target = dcValue;\n          }\n        }\n      }\n    }\n    \n    // Store send request preference\n    this.sendRequest = formData.get(\"crlngn-send-request\") !== \"false\";\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _finalizeRolls(action) {\n    LogUtil.log('_finalizeRolls', [action]);\n    \n    // Let parent handle advantage/disadvantage mode\n    const finalizedRolls = super._finalizeRolls(action);\n    \n    // Apply DC if we have one stored\n    if (this.dcValue !== undefined && this.dcValue !== null) {\n      for (const roll of finalizedRolls) {\n        roll.options.target = this.dcValue;\n      }\n    }\n    \n    // Store our custom properties\n    this.config.sendRequest = this.sendRequest;\n    \n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the dialog\n   * @param {Actor[]} actors - The actors to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {object} options - Additional options\n   * @returns {Promise<object|null>} The configured roll data or null if cancelled\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    LogUtil.log('getConfiguration', [actors, rollType, rollKey, options]);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Determine if we should show DC field\n    const showDC = [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Skills and tools always use D20Roll\n    const rollClass = CONFIG.Dice.D20Roll;\n    \n    // Get the default ability for the skill or tool\n    let defaultAbility = null;\n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      const skill = actor.system.skills[rollKey];\n      defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      // For tools, check if the actor has a specific ability set for this tool\n      const tool = actor.system.tools?.[rollKey];\n      defaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n    }\n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      ability: defaultAbility,\n      chooseAbility: true,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add the appropriate property for skill or tool\n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      rollConfig.skill = rollKey;\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      rollConfig.tool = rollKey;\n    }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => GMRollConfigDialog._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...options\n      }\n    };\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Build return configuration with only modified properties\n    const finalConfig = {\n      chatMessage: true,\n      isRollRequest: result.sendRequest,  // Only true when sending to players\n      skipDialog: options.skipDialogs || false,\n      sendRequest: result.sendRequest\n    };\n    \n    // Only add properties that were actually changed\n    if (advantage) finalConfig.advantage = true;\n    if (disadvantage) finalConfig.disadvantage = true;\n    \n    // Check if rollMode differs from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      finalConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add situational bonus if provided\n    // Check both options.situational and data.situational\n    const situational = firstRoll?.options?.situational || firstRoll?.data?.situational || \"\";\n    if (situational) {\n      finalConfig.situational = situational;\n      finalConfig.parts = [situational];\n    }\n    \n    // Add DC if provided\n    if (firstRoll?.options?.target) {\n      finalConfig.target = firstRoll.options.target;\n    }\n    \n    // Add ability if it was selected (always include for skills/tools to ensure proper dialog display)\n    if (result.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      finalConfig.ability = result.config.ability;\n    }\n    \n    // Add the roll title from the dialog window\n    finalConfig.rollTitle = dialogConfig.options.window.title;\n    \n    \n    return finalConfig;\n  }\n}","import { HOOKS_DND5E } from '../constants/Hooks.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { MODULE_ID, DEBUG_TAG, ROLL_TYPES } from '../constants/General.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog, GMHitDieConfigDialog } from './GMRollConfigDialog.mjs';\n\n/**\n * Handles intercepting D&D5e rolls on the GM side and redirecting them to players\n */\nexport class RollInterceptor {  \n  /**\n   * @type {Set<string>} - Set of registered hook IDs for cleanup\n   */\n  static registeredHooks = new Set();\n  \n  /**\n   * Initialize the roll interceptor\n   */\n  static initialize() {\n    LogUtil.log('RollInterceptor.initialize');\n    \n    // Only initialize for GM users\n    if (!game.user.isGM) return;\n    \n    this.registerHooks();\n  }\n  \n  /**\n   * Register all necessary hooks for roll interception\n   */\n  static registerHooks() {\n    LogUtil.log('RollInterceptor.registerHooks');\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, this._handlePreRoll.bind(this, ROLL_TYPES.ABILITY));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, this._handlePreRoll.bind(this, ROLL_TYPES.SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SKILL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.SKILL));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_TOOL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.TOOL));\n    // Note: Concentration rolls are Constitution saving throws, handled by PRE_ROLL_SAVING_THROW\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._handlePreRoll.bind(this, ROLL_TYPES.ATTACK));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DAMAGE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE, this._handlePreRoll.bind(this, ROLL_TYPES.INITIATIVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG_V2, this._handlePreRoll.bind(this, ROLL_TYPES.INITIATIVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DEATH_SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.HIT_DIE));\n    \n  }\n  \n  /**\n   * Helper to register a hook and track it for cleanup\n   * @param {string} hookName \n   * @param {Function} handler \n   */\n  static _registerHook(hookName, handler) {\n    LogUtil.log('RollInterceptor._registerHook');\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.add({ hookName, hookId });\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterHooks() {\n    LogUtil.log('RollInterceptor.unregisterHooks');\n    for (const { hookName, hookId } of this.registeredHooks) {\n      Hooks.off(hookName, hookId);\n    }\n    this.registeredHooks.clear();\n  }\n\n  /**\n   * Handle pre-roll hooks to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Object} config - Roll configuration object (or Actor for initiative)\n   * @param {Object} dialog - Dialog options\n   * @param {Object} message - Message options\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRoll(rollType, config, dialog, message) {\n    \n    // Add detailed logging for initiative debugging\n    LogUtil.log('_handlePreRoll - Initiative/Ability Debug', [{\n      rollType,\n      config\n    }]);\n    // Only intercept on GM side\n    if (!game.user.isGM) return;\n\n    LogUtil.log('_handlePreRoll #2');\n    \n    // Check for initiativeDialog in hookNames - this indicates an initiative roll\n    // even if it's being processed as an ability check\n    const hookNames = config?.hookNames || dialog?.hookNames || message?.hookNames || [];\n    const isInitiativeRoll = hookNames.includes('initiativeDialog') || hookNames.includes('initiative');\n    \n    // Override rollType if this is actually an initiative roll\n    if (isInitiativeRoll && rollType === ROLL_TYPES.ABILITY) {\n      LogUtil.log('RollInterceptor._handlePreRoll - Overriding ability to initiative', [{ hookNames }]);\n      rollType = ROLL_TYPES.INITIATIVE;\n    }\n    \n    // Special handling for initiative - first parameter is the actor\n    let actor;\n    if (rollType === ROLL_TYPES.INITIATIVE && config instanceof Actor) {\n      actor = config;\n      // For initiative, check if second parameter (options) has isRollRequest flag\n      // if (dialog?.isRollRequest) return;\n      // Also check third parameter for rollInitiative calls\n      // if (message?.isRollRequest) return;\n    } else if (rollType === ROLL_TYPES.HIT_DIE) {\n      // For hit die rolls, first parameter is denomination string, second is config\n      // Check if this is a roll request to avoid loops\n      if (dialog?.isRollRequest || message?.isRollRequest) {\n        return;\n      }\n      // Extract actor from the second parameter (dialog is actually the config for hit die)\n      actor = dialog?.subject?.actor || dialog?.subject || dialog?.actor;\n    } else {\n      // Check all three parameters for isRollRequest flag to avoid loops\n      if (config?.isRollRequest || dialog?.isRollRequest || message?.isRollRequest) {\n        return;\n      }\n      \n      // Extract actor from the config\n      actor = config.subject?.actor || config.subject || config.actor;\n    }\n    LogUtil.log('_handlePreRoll #3');\n    \n    // Check if roll interception and requests are enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    if(!rollInterceptionEnabled || !rollRequestsEnabled ||\n        !actor || actor.documentName !== 'Actor') {\n      return;\n    }\n    LogUtil.log('_handlePreRoll #4');\n\n    const owner = this._getActorOwner(actor);   \n    if (!owner || owner.id === game.user.id || !owner.active || // player owner inexistent or not active\n        dialog.configure===false || config.skipDialog===true || config.fastForward===true) { // config skips the dialog\n      return; // undefined - don't intercept, let the roll proceed\n    }\n    LogUtil.log('_handlePreRoll #5');\n    \n    // Show GM configuration dialog before sending to player\n    this._showGMConfigDialog(actor, owner, rollType, config, dialog, message);\n    \n    // Prevent the normal roll\n    return false;\n  }\n  \n  /**\n   * Show GM configuration dialog before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showGMConfigDialog(actor, owner, rollType, config, dialog, message) {\n    console.trace(DEBUG_TAG + ' _showGMConfigDialog', [actor, owner, rollType, config, dialog, message]);\n    // LogUtil.log('_showGMConfigDialog', [actor, owner, rollType, config, dialog, message]);\n    \n    // Log detailed config information\n    LogUtil.log('_showGMConfigDialog - Detailed config', [{\n      rollType,\n      configAbility: config?.ability,\n      configSubject: config?.subject,\n      configSubjectAbility: config?.subject?.ability,\n      configSkill: config?.skill,\n      configTool: config?.tool,\n      fullConfig: config\n    }]);\n    try {\n      // Normalize rollType to lowercase for consistent comparisons\n      const normalizedRollType = rollType?.toLowerCase();\n      \n      // Determine appropriate dialog class based on roll type\n      let DialogClass;\n      if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n        DialogClass = GMSkillToolConfigDialog;\n      } else if (normalizedRollType === ROLL_TYPES.HIT_DIE) {\n        DialogClass = GMHitDieConfigDialog;\n      } else {\n        DialogClass = GMRollConfigDialog;\n      }\n      \n      // Create base roll config based on roll type\n      let rollConfig = {\n        rolls: [{\n          parts: [],\n          data: {},\n          options: {}\n        }]\n      };\n      \n      // Add specific configuration based on roll type\n      switch (normalizedRollType) {\n        case ROLL_TYPES.ABILITY:\n          rollConfig.ability = config.ability || config.subject?.ability;\n          break;\n        case ROLL_TYPES.SAVE:\n          rollConfig.ability = config.ability || config.subject?.ability;\n          // Check if this is actually a concentration save\n          if (config.ability === 'con' && config.targetValue !== undefined) {\n            rollType = ROLL_TYPES.CONCENTRATION; // Update rollType for proper handling\n          }\n          break;\n        case ROLL_TYPES.SKILL:\n          rollConfig.skill = config.skill;\n          rollConfig.ability = config.ability;\n          break;\n        case ROLL_TYPES.TOOL:\n          rollConfig.tool = config.tool;\n          rollConfig.ability = config.ability;\n          break;\n        case ROLL_TYPES.CONCENTRATION:\n          rollConfig.ability = 'con';\n          break;\n        case ROLL_TYPES.INITIATIVE:\n          // Initiative rolls don't need special config\n          break;\n        case ROLL_TYPES.HIT_DIE:\n          // Hit die rolls need the denomination\n          // For hit die rolls, the first parameter is the denomination string (e.g., \"d8\")\n          rollConfig.denomination = typeof config === 'string' ? config : (config.denomination || config.subject?.denomination);\n          break;\n      }\n      \n      // Check if we should skip dialogs\n      const SETTINGS = getSettings();\n      const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n      \n      const options = {\n        actors: [actor],\n        rollType: normalizedRollType,\n        showDC: true,\n        defaultSendRequest: true,\n        skipDialogs: skipDialogs\n      };\n      \n      let result;\n      if (!skipDialogs) {\n        // Extract roll key based on roll type\n        let rollKey = null;\n        switch (normalizedRollType) {\n          case ROLL_TYPES.SKILL:\n            rollKey = config.skill;\n            break;\n          case ROLL_TYPES.TOOL:\n            rollKey = config.tool;\n            break;\n          case ROLL_TYPES.ABILITY:\n          case ROLL_TYPES.SAVE:\n            rollKey = config.ability || config.subject?.ability;\n            break;\n          case ROLL_TYPES.CONCENTRATION:\n            rollKey = 'con'; // Concentration is always Constitution\n            break;\n          case ROLL_TYPES.INITIATIVE:\n            rollKey = actor.system.attributes?.init?.ability || 'dex'; // Default to dexterity\n            break;\n          case ROLL_TYPES.HIT_DIE:\n            // For hit die rolls, the first parameter is the denomination string (e.g., \"d8\")\n            rollKey = typeof config === 'string' ? config : (config.denomination || config.subject?.denomination);\n            break;\n        }\n        \n        // Log the data being passed to the dialog\n        LogUtil.log('RollInterceptor._showGMConfigDialog - Calling getConfiguration', {\n          actor: actor.name,\n          normalizedRollType,\n          rollKey,\n          config,\n          DialogClass: DialogClass.name\n        });\n        \n        // Use the static getConfiguration method which properly waits for dialog result\n        result = await DialogClass.getConfiguration([actor], normalizedRollType, rollKey, {\n          skipDialogs: false,\n          defaultSendRequest: true\n        });\n      } else {\n        // Skip dialog and use default config\n        result = {\n          sendRequest: true,\n          advantage: false,\n          disadvantage: false,\n          situational: \"\",\n          rollMode: game.settings.get(\"core\", \"rollMode\")\n        };\n      }\n      \n      \n      // If dialog was cancelled, do nothing (user cancelled the action)\n      if (!result) {\n        LogUtil.log('RollInterceptor._showGMConfigDialog - Dialog cancelled');\n        return;\n      }\n      \n      LogUtil.log('RollInterceptor._showGMConfigDialog - Dialog result', [{\n        sendRequest: result.sendRequest,\n        rollType: normalizedRollType,\n        result\n      }]);\n      \n      // If sendRequest is false, execute local roll\n      if (!result.sendRequest) {\n        // Re-create the roll with the original method\n        // We need to return true from _handlePreRoll to allow the original roll to proceed\n        // But we can't do that from here since we already returned false\n        // Instead, we'll execute the roll ourselves with the updated config\n        await this._executeLocalRoll(actor, rollType, config, result);\n        return;\n      }\n      \n      // Send the roll request to the player with the configured settings\n      const finalConfig = {\n        ...config,\n        ...result,\n        requestedBy: game.user.name\n      };\n      \n      this._sendRollRequest(actor, owner, rollType, finalConfig);\n      \n    } catch (error) {\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n  \n  /**\n   * Execute a roll locally on the GM side\n   * @param {Actor} actor \n   * @param {string} rollType \n   * @param {Object} originalConfig\n   * @param {Object} dialogResult\n   */\n  static async _executeLocalRoll(actor, rollType, originalConfig, dialogResult) {\n    LogUtil.log('RollInterceptor._executeLocalRoll', [actor, rollType, originalConfig, dialogResult]);\n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Build config for local roll\n    const config = {\n      ...originalConfig,\n      advantage: dialogResult.advantage || originalConfig.advantage,\n      disadvantage: dialogResult.disadvantage || originalConfig.disadvantage,\n      target: dialogResult.dc || originalConfig.target,\n      rollMode: dialogResult.rollMode || originalConfig.rollMode,\n      isRollRequest: false // Ensure we don't intercept this roll\n    };\n    \n    const dialogConfig = {\n      configure: false, // Skip dialog since we already configured\n      isRollRequest: false\n    };\n    \n    const messageConfig = {\n      rollMode: config.rollMode,\n      create: true,\n      isRollRequest: false\n    };\n    \n    try {\n      switch (normalizedRollType) {\n        case ROLL_TYPES.SAVE:\n          await actor.rollSavingThrow(originalConfig.ability, config, dialogConfig, messageConfig);\n          break;\n        case ROLL_TYPES.ABILITY:\n          await actor.rollAbilityCheck(originalConfig.ability, config, dialogConfig, messageConfig);\n          break;\n        case ROLL_TYPES.SKILL:\n          await actor.rollSkill(originalConfig.skill, config, dialogConfig, messageConfig);\n          break;\n        case ROLL_TYPES.TOOL:\n          await actor.rollToolCheck(originalConfig.tool, config, dialogConfig, messageConfig);\n          break;\n        case ROLL_TYPES.CONCENTRATION:\n          await actor.rollConcentration(config, dialogConfig, messageConfig);\n          break;\n        case ROLL_TYPES.INITIATIVE:\n          await actor.rollInitiativeD(config, dialogConfig, messageConfig);\n          break;\n        case ROLL_TYPES.DEATH_SAVE:\n          await actor.rollDeathSave(config, dialogConfig, messageConfig);\n          break;\n        case ROLL_TYPES.HIT_DIE:\n          // Hit die rolls need the denomination parameter\n          const denomination = typeof originalConfig === 'string' ? originalConfig : originalConfig.denomination;\n          await actor.rollHitDie(denomination, config, dialogConfig, messageConfig);\n          break;\n        // Add other roll types as needed\n      }\n    } catch (error) {\n    }\n  }\n  \n  /**\n   * Show configuration dialog to GM before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showConfigurationDialog(actor, owner, rollType, config, dialog, message) {\n    LogUtil.log('RollInterceptor._showConfigurationDialog', [actor, owner, rollType, config, dialog, message]);\n\n    try {\n      // Create a wrapper function that will be called instead of the normal roll\n      const rollWrapper = async (finalConfig) => {\n        // Send the configured roll request to the player\n        this._sendRollRequest(actor, owner, rollType, finalConfig);\n        // Return a fake roll to satisfy the dialog\n        return new Roll(\"1d20\").evaluate({async: false});\n      };\n      \n      // Replace the roll method in config with our wrapper\n      const modifiedConfig = {\n        ...config,\n        _rollMethod: rollWrapper,\n        configured: false // Force dialog to show\n      };\n      \n      // Create and render the dialog\n      const DialogClass = dialog.cls;\n      const rollDialog = new DialogClass(modifiedConfig, dialog.options);\n      \n      // Render the dialog\n      const result = await rollDialog.render(true);\n      \n    } catch (error) {\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n\n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  static _getActorOwner(actor) {\n    LogUtil.log('_getActorOwner', [actor]);\n    // Find the first active player who owns this actor\n    const ownership = actor.ownership || {};\n    \n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Send a roll request to the player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   */\n  static _sendRollRequest(actor, owner, rollType, config) {\n    LogUtil.log('_sendRollRequest', [actor, owner, rollType, config]);\n    const SETTINGS = getSettings();\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    let normalizedRollType = rollType?.toLowerCase();\n    \n    // Convert INITIATIVE to INITIATIVE_DIALOG for player requests\n    // This ensures players get the proper dialog when GM intercepts initiative rolls\n    if (normalizedRollType === ROLL_TYPES.INITIATIVE) {\n      normalizedRollType = ROLL_TYPES.INITIATIVE_DIALOG;\n    }\n    \n    // Extract the roll key based on roll type\n    let rollKey = null;\n    let activityId = null;\n    switch (normalizedRollType) {\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.SAVE:\n        rollKey = config.ability;\n        break;\n      case ROLL_TYPES.SKILL:\n        rollKey = config.skill;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollKey = config.tool;\n        break;\n      case ROLL_TYPES.ATTACK:\n      case ROLL_TYPES.DAMAGE:\n        if (config.subject?.item) {\n          rollKey = config.subject.item.id;\n          // Find the appropriate activity\n          const activity = ActivityUtil.findActivityForRoll(config.subject.item, rollType);\n          if (activity) {\n            activityId = activity.id;\n          }\n        }\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        // For hit die rolls, the first parameter might be the denomination string\n        rollKey = typeof config === 'string' ? config : config.denomination;\n        break;\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n      case ROLL_TYPES.INITIATIVE:\n        // Initiative doesn't need a specific rollKey\n        rollKey = null;\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        // Death save doesn't need a specific rollKey\n        rollKey = null;\n        break;\n      default:\n        // Unknown roll type\n        LogUtil.warn(`Unknown roll type: ${rollType}`);\n        return;\n    }\n    \n    // Clean up config to remove non-serializable properties\n    const cleanConfig = {\n      advantage: config.advantage || false,\n      disadvantage: config.disadvantage || false,\n      situational: config.situational || 0,\n      parts: config.parts || [],\n      rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      elvenAccuracy: config.elvenAccuracy || false,\n      halflingLucky: config.halflingLucky || false,\n      reliableTalent: config.reliableTalent || false,\n      minimum: config.minimum,\n      maximize: config.maximize,\n      critical: config.critical,\n      fumble: config.fumble,\n      targetValue: config.targetValue,\n      fastForward: config.fastForward || false,\n      chatMessage: config.chatMessage !== false,\n      flavor: config.flavor,\n      title: config.title,\n      dialogOptions: config.dialogOptions,\n      messageData: config.messageData,\n      ability: config.ability, // Include ability for skill/tool rolls\n      denomination: typeof config === 'string' ? config : config.denomination, // Include denomination for hit die rolls\n      requestedBy: config.requestedBy || game.user.name // Include who requested the roll\n    };\n    \n    // Remove undefined values\n    Object.keys(cleanConfig).forEach(key => {\n      if (cleanConfig[key] === undefined) {\n        delete cleanConfig[key];\n      }\n    });\n    \n    // Build the request data according to Phase 1 spec\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType: normalizedRollType,\n      rollKey,\n      activityId,\n      config: cleanConfig,\n      skipDialog: skipDialogs,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    // Debug logging for hit die\n    if (normalizedRollType === ROLL_TYPES.HIT_DIE) {\n      LogUtil.log('RollInterceptor._sendRollRequest - Hit Die Debug', [{\n        actor: actor.name,\n        owner: owner.name,\n        rollType: normalizedRollType,\n        rollKey,\n        requestData\n      }]);\n    }\n    \n    // Send request to player via socket\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    // Show notification to GM\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent', { \n      player: owner.name,\n      actor: actor.name \n    }));\n  }\n}","/**\n * Helper functions for the Flash Rolls 5e module\n */\n\nimport { MODULE, ROLL_TYPES } from '../../constants/General.mjs';\n\n/**\n * Get display name for roll type with optional details\n * @param {string} rollType - The type of roll\n * @param {string} rollKey - Optional key for the specific roll (ability, skill, etc.)\n * @returns {string} Formatted display string\n */\nexport function getRollTypeDisplay(rollType, rollKey) {\n  let display = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollType}`) || rollType;\n  \n  // Normalize rollType to lowercase for consistent comparisons\n  const normalizedRollType = rollType?.toLowerCase();\n  \n  if (rollKey) {\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        display += ` (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.SAVE:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.ABILITY:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          display += ` (${toolItem?.name || rollKey})`;\n        } else {\n          display += ` (${rollKey})`;\n        }\n        break;\n      case ROLL_TYPES.CUSTOM:\n        display = `${display}: ${rollKey}`;\n        break;\n    }\n  }\n  \n  return display;\n}\n\n/**\n * Show batched notifications to player\n * @param {Array} pendingNotifications - Array of notification objects\n * @param {Function} getRollTypeDisplayFn - Function to get roll type display (default: getRollTypeDisplay)\n */\nexport function showBatchedNotifications(pendingNotifications, getRollTypeDisplayFn = getRollTypeDisplay) {\n  if (pendingNotifications.length === 0) return;\n  \n  // Group by roll type\n  const notificationsByType = {};\n  for (const notif of pendingNotifications) {\n    const key = `${notif.rollType}_${notif.rollKey || ''}`;\n    if (!notificationsByType[key]) {\n      notificationsByType[key] = {\n        rollType: notif.rollType,\n        rollKey: notif.rollKey,\n        actors: [],\n        gm: notif.gm\n      };\n    }\n    notificationsByType[key].actors.push(notif.actor);\n  }\n  \n  const entries = Object.values(notificationsByType);\n  if (entries.length === 1 && entries[0].actors.length === 1) {\n    // Single roll request - use original format\n    const entry = entries[0];\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived', {\n      gm: entry.gm,\n      rollType: getRollTypeDisplayFn(entry.rollType, entry.rollKey)\n    }));\n  } else {\n    // Multiple requests - create consolidated message\n    const messages = [];\n    for (const entry of entries) {\n      const rollTypeDisplay = getRollTypeDisplayFn(entry.rollType, entry.rollKey);\n      const actorNames = entry.actors.join(\", \");\n      messages.push(`${rollTypeDisplay} (${actorNames})`);\n    }\n    \n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestsReceivedMultiple', {\n      gm: entries[0].gm,\n      requests: messages.join(\"; \")\n    }));\n  }\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {User|null} The player owner, or null if not player-owned\n */\nexport function getPlayerOwner(actor) {\n  const ownership = actor.ownership || {};\n  \n  for (const [userId, level] of Object.entries(ownership)) {\n    if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n      const user = game.users.get(userId);\n      if (user && !user.isGM) {\n        return user;\n      }\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Get actor stats for display (ability scores and modifiers)\n * @param {Actor} actor - The actor to get stats for\n * @returns {Array} Array of stat objects with name, value, and modifier\n */\nexport function getActorStats(actor) {\n  if (!actor?.system?.abilities) return [];\n  \n  return Object.entries(actor.system.abilities).map(([key, ability]) => ({\n    name: key.toUpperCase(),\n    value: ability.value || 10,\n    modifier: ability.mod >= 0 ? `+${ability.mod}` : `${ability.mod}`\n  }));\n}\n\n/**\n * Apply target tokens to user\n * @param {Array<string>} tokenIds - Array of token IDs to target\n * @param {User} user - User to apply targets for (default: game.user)\n */\nexport function applyTargetTokens(tokenIds, user = game.user) {\n  if (!tokenIds?.length) return;\n  \n  const tokens = tokenIds\n    .map(id => canvas.tokens.get(id))\n    .filter(t => t);\n    \n  tokens.forEach(t => t.setTarget(true, { user }));\n}\n\n/**\n * Clear all target tokens for user\n * @param {User} user - User to clear targets for (default: game.user)\n */\nexport function clearTargetTokens(user = game.user) {\n  user.targets.forEach(t => t.setTarget(false, { user }));\n}\n\n/**\n * Format a notification message for multiple actors\n * @param {Array<string>} actorNames - Array of actor names\n * @param {string} action - The action being performed\n * @returns {string} Formatted message\n */\nexport function formatMultiActorNotification(actorNames, action) {\n  if (actorNames.length === 0) return \"\";\n  if (actorNames.length === 1) return `${actorNames[0]} ${action}`;\n  \n  const and = game.i18n.localize(\"CRLNGN_ROLLS.common.and\");\n  \n  if (actorNames.length === 2) return `${actorNames[0]} ${and} ${actorNames[1]} ${action}`;\n  \n  const lastActor = actorNames[actorNames.length - 1];\n  const otherActors = actorNames.slice(0, -1).join(\", \");\n  return `${otherActors}, ${and} ${lastActor} ${action}`;\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if owned by a player\n */\nexport function isPlayerOwned(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  return Object.entries(actor.ownership)\n    .some(([userId, level]) => {\n      const user = game.users.get(userId);\n      return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n    });\n}\n\n/**\n * Check if actor has token in current scene\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if actor has token in current scene\n */\nexport function hasTokenInScene(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  const currentScene = game.scenes.active;\n  return currentScene && currentScene.tokens.some(token => token.actorId === actor.id);\n}\n\n/**\n * Update token selection on canvas based on actor selection\n * @param {string} actorId - The actor ID\n * @param {boolean} selected - Whether to select or deselect\n */\nexport function updateCanvasTokenSelection(actorId, selected) {\n  const scene = game.scenes.active;\n  if (!scene) return;\n  \n  // Find all tokens for this actor in the current scene\n  const tokens = canvas.tokens.placeables.filter(t => t.actor?.id === actorId);\n  \n  for (const token of tokens) {\n    if (selected) {\n      // Add to selection without clearing others\n      token.control({ releaseOthers: false });\n    } else {\n      // Release this token\n      token.release();\n    }\n  }\n}\n\n/**\n * Delay execution for a specified time\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise} Promise that resolves after the delay\n */\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Check if the sidebar is expanded\n * @returns {boolean} True if sidebar is expanded\n */\nexport function isSidebarExpanded() {\n  return !ui?.sidebar?._collapsed;\n}\n\n/**\n * Update body class based on sidebar state\n * @param {boolean} isExpanded - Whether sidebar is expanded\n */\nexport function updateSidebarClass(isExpanded) {\n  const body = document.querySelector(\"body\");\n  if (isExpanded) {\n    body.classList.add(\"sidebar-expanded\");\n  } else {\n    body.classList.remove(\"sidebar-expanded\");\n  }\n}\n\n/**\n * Build roll types array for a selected request type\n * @param {string} selectedRequestType - The type of roll request\n * @param {Set} selectedActors - Set of selected actor IDs\n * @returns {Array} Array of roll type objects with id, name, and rollable properties\n */\nexport function buildRollTypes(selectedRequestType, selectedActors) {\n  const rollTypes = [];\n  \n  if (!selectedRequestType || selectedActors.size === 0) {\n    return rollTypes;\n  }\n  \n  const selectedOption = MODULE.ROLL_REQUEST_OPTIONS[selectedRequestType];\n  if (!selectedOption || !selectedOption.subList) {\n    return rollTypes;\n  }\n  \n  // Get first selected actor as reference for available options\n  const firstActorId = Array.from(selectedActors)[0];\n  const actor = game.actors.get(firstActorId);\n  \n  // Special handling for tools - show all available tools\n  if (selectedOption.subList === 'tools') {\n    // Get all tools from CONFIG.DND5E.tools or enrichmentLookup\n    const allTools = CONFIG.DND5E.enrichmentLookup?.tools || CONFIG.DND5E.tools || {};\n    \n    for (const [key, toolData] of Object.entries(allTools)) {\n      let label = key;\n      \n      // Use enrichmentLookup to get tool UUID and then fetch the name\n      if (toolData?.id) {\n        // Get the tool name using Trait.getBaseItem\n        const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n        label = toolItem?.name || key;\n      }\n      // Fallback - format the key\n      else {\n        label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n      }\n      \n      rollTypes.push({\n        id: key,\n        name: label,\n        rollable: true\n      });\n    }\n    \n    // Sort tools alphabetically by name\n    rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n  }\n  // For other types, use actor data\n  else if (actor && selectedOption.actorPath) {\n    const rollData = foundry.utils.getProperty(actor, selectedOption.actorPath) || {};\n    \n    // Check if we should use CONFIG.DND5E for enrichment\n    const configData = CONFIG.DND5E[selectedOption.subList];\n    \n    for (const [key, data] of Object.entries(rollData)) {\n      let label = '';\n      \n      // For skills, use CONFIG.DND5E.skills for full names\n      if (selectedOption.subList === 'skills' && configData?.[key]) {\n        label = configData[key].label;\n      }\n      // For abilities (saving throws), use the label from data\n      else if (selectedOption.subList === 'abilities' && configData?.[key]) {\n        label = configData[key].label;\n      }\n      // Default fallback\n      else {\n        label = data.label || game.i18n.localize(data.name || key) || key;\n      }\n      \n      rollTypes.push({\n        id: key,\n        name: label,\n        rollable: true\n      });\n    }\n    \n    // Sort skills alphabetically by name\n    if (selectedOption.subList === 'skills') {\n      rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n    }\n  }\n  \n  return rollTypes;\n}\n\n/**\n * Unified notification system with batching support\n */\nexport class NotificationManager {\n  static pendingNotifications = [];\n  static notificationTimer = null;\n  static NOTIFICATION_BATCH_DELAY = 500; // ms to wait for additional notifications\n  \n  /**\n   * Show a notification with optional batching for roll requests\n   * @param {string} type - Notification type (info, warn, error)\n   * @param {string} message - Message to display\n   * @param {Object} options - Options for the notification\n   * @param {boolean} options.batch - Whether to batch this notification\n   * @param {Object} options.batchData - Data for batched notifications\n   */\n  static notify(type, message, options = {}) {\n    // If not batching, show immediately\n    if (!options.batch) {\n      ui.notifications[type](message);\n      return;\n    }\n    \n    // Add to pending notifications for batching\n    if (options.batchData) {\n      NotificationManager.pendingNotifications.push(options.batchData);\n      \n      // Clear existing timer and set new one\n      if (NotificationManager.notificationTimer) {\n        clearTimeout(NotificationManager.notificationTimer);\n      }\n      \n      NotificationManager.notificationTimer = setTimeout(() => {\n        showBatchedNotifications(NotificationManager.pendingNotifications);\n        NotificationManager.pendingNotifications = [];\n        NotificationManager.notificationTimer = null;\n      }, NotificationManager.NOTIFICATION_BATCH_DELAY);\n    }\n  }\n  \n  /**\n   * Show roll request sent notifications (GM side)\n   * @param {Object} requestsByPlayer - Grouped requests by player\n   * @param {string} rollTypeName - Display name of the roll type\n   */\n  static notifyRollRequestsSent(requestsByPlayer, rollTypeName) {\n    const successfulRequests = Object.entries(requestsByPlayer);\n    \n    if (successfulRequests.length === 0) return;\n    \n    // Single player, single actor\n    if (successfulRequests.length === 1) {\n      const playerData = Object.values(requestsByPlayer)[0];\n      const actorNames = playerData.actors.map(a => a.name).join(\", \");\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentSingle\", { \n        rollType: rollTypeName,\n        actors: actorNames,\n        player: playerData.player.name\n      }));\n    } else {\n      // Multiple players\n      const playerSummaries = successfulRequests.map(([playerId, data]) => {\n        const actorNames = data.actors.map(a => a.name).join(\", \");\n        return `${data.player.name} (${actorNames})`;\n      });\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentMultiple\", { \n        rollType: rollTypeName,\n        count: successfulRequests.length,\n        players: playerSummaries.join(\"; \")\n      }));\n    }\n  }\n  \n  /**\n   * Clear any pending notifications\n   */\n  static clearPending() {\n    if (NotificationManager.notificationTimer) {\n      clearTimeout(NotificationManager.notificationTimer);\n      NotificationManager.notificationTimer = null;\n    }\n    NotificationManager.pendingNotifications = [];\n  }\n}\n\n/**\n * Filter actors based on death save requirements\n * @param {Actor[]} actors - Array of actors to filter\n * @returns {Actor[]} Array of actors that need death saves\n */\nexport function filterActorsForDeathSaves(actors) {\n  const actorsNeedingDeathSaves = [];\n  const actorsSkippingDeathSaves = [];\n  \n  for (const actor of actors) {\n    const hp = actor.system.attributes.hp?.value || 0;\n    const deathSaves = actor.system.attributes.death || {};\n    const successes = deathSaves.success || 0;\n    const failures = deathSaves.failure || 0;\n    \n    // Check if actor needs a death save\n    if (hp <= 0 && successes < 3 && failures < 3) {\n      actorsNeedingDeathSaves.push(actor);\n    } else {\n      actorsSkippingDeathSaves.push(actor.name);\n    }\n  }\n  \n  // Notify about actors that don't need death saves\n  if (actorsSkippingDeathSaves.length > 0) {\n    NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.actorsSkippingDeathSave\", {\n      actors: actorsSkippingDeathSaves.join(\", \")\n    }));\n  }\n  \n  return actorsNeedingDeathSaves;\n}\n\n/**\n * Categorize actors by ownership (PC vs NPC)\n * @param {Actor[]} actors - Array of actors to categorize\n * @returns {{pcActors: Array, npcActors: Actor[]}} Object with categorized actors\n */\nexport function categorizeActorsByOwnership(actors) {\n  const pcActors = [];\n  const npcActors = [];\n  \n  for (const actor of actors) {\n    const owner = getPlayerOwner(actor);\n    if (owner) {\n      pcActors.push({ actor, owner });\n    } else {\n      npcActors.push(actor);\n    }\n  }\n  \n  return { pcActors, npcActors };\n}\n\n\nexport function addHDUpdate(updates, newUpdate){\n  const existingIndex = updates.findIndex(update => update._id === newUpdate._id);\n  if(existingIndex > -1){\n    updates[existingIndex] = foundry.utils.mergeObject(\n      updates[existingIndex],\n      newUpdate\n    )\n  }else{\n    updates.push(newUpdate);\n  }\n}","import { MODULE } from \"../constants/General.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Custom Roll Dialog - ApplicationV2 component for custom roll formulas\n */\nexport class CustomRollDialog extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2) {\n  constructor(options = {}) {\n    super(options);\n    this.formula = options.formula || \"\";\n    this.readonly = options.readonly || false;\n    this.actor = options.actor;\n    this.callback = options.callback;\n    this.diceCounts = {};\n  }\n\n  /**\n   * Default application configuration\n   */\n  static DEFAULT_OPTIONS = {\n    id: \"crlngn-custom-roll-dialog\",\n    classes: [\"crlngn-rolls-dialog\", \"crlngn-custom-roll-dialog\"],\n    tag: \"div\",\n    window: {\n      title: \"CRLNGN_ROLLS.ui.dialogs.customRollTitle\",\n      icon: \"fas fa-dice-d20\",\n      resizable: false,\n      positioned: true,\n      frame: true\n    },\n    position: {\n      width: 400,\n      height: \"auto\"\n    }\n  };\n  \n  /**\n   * Override to handle action clicks\n   */\n  _onClickAction(event, target) {\n    const action = target.dataset.action;\n    switch (action) {\n      case \"rollDice\":\n        return this.rollDice(event, target);\n      case \"addDie\":\n        return this.addDie(event, target);\n      case \"cancel\":\n        return this.cancel(event, target);\n    }\n  }\n\n  /**\n   * Prepare application rendering context\n   */\n  async _prepareContext(options = {}) {\n    const context = await super._prepareContext(options);\n    return {\n      ...context,\n      formula: this.formula,\n      readonly: this.readonly\n    };\n  }\n\n  /**\n   * Define template parts\n   */\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/custom-roll-dialog.hbs`\n    },\n    footer: {\n      template: `modules/${MODULE.ID}/templates/custom-roll-dialog-footer.hbs`\n    }\n  };\n\n  /**\n   * Add event listeners\n   */\n  _attachPartListeners(partId, htmlElement, options) {\n    super._attachPartListeners(partId, htmlElement, options);\n    \n    const formulaInput = htmlElement.querySelector('#custom-roll-formula');\n    const validationMessage = htmlElement.querySelector('#formula-validation-message');\n    \n    if (formulaInput && !this.readonly) {\n      // Update internal formula on input change and validate\n      formulaInput.addEventListener('input', (event) => {\n        this.formula = event.target.value.trim();\n        this.updateValidationMessage(validationMessage);\n      });\n      \n      // Validate on initial load if there's a formula\n      if (this.formula) {\n        this.updateValidationMessage(validationMessage);\n      }\n    }\n  }\n  \n  /**\n   * Update the validation message based on formula validity\n   * @param {HTMLElement} messageElement - The validation message element\n   */\n  updateValidationMessage(messageElement) {\n    if (!messageElement) return;\n    \n    if (!this.formula) {\n      messageElement.textContent = '&nbsp;';\n      messageElement.classList.remove('error', 'success');\n      return;\n    }\n    \n    const isValid = this.validateFormula(this.formula);\n    \n    if (isValid) {\n      messageElement.textContent = game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.formulaValid\");\n      messageElement.classList.remove('error');\n      messageElement.classList.add('success');\n    } else {\n      messageElement.textContent = game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.formulaInvalid\");\n      messageElement.classList.remove('success');\n      messageElement.classList.add('error');\n    }\n  }\n\n  /**\n   * Handle dice button click\n   * @param {Event} event\n   * @param {HTMLElement} target\n   */\n  addDie(event, target) {\n    const die = target.dataset.die;\n    \n    // Get current formula from input field\n    const formulaInput = this.element.querySelector('#custom-roll-formula');\n    if (!formulaInput) return;\n    \n    const currentFormula = formulaInput.value.trim();\n    \n    // Parse the current formula to consolidate dice\n    if (currentFormula) {\n      // Regular expression to find dice expressions (e.g., 2d6, d8, 1d20)\n      const diceRegex = /(\\d*)d(\\d+)/g;\n      const diceMap = new Map();\n      \n      // Parse existing dice in the formula\n      let remainingFormula = currentFormula;\n      let match;\n      \n      while ((match = diceRegex.exec(currentFormula)) !== null) {\n        const count = parseInt(match[1] || '1');\n        const dieType = match[2];\n        diceMap.set(dieType, (diceMap.get(dieType) || 0) + count);\n        remainingFormula = remainingFormula.replace(match[0], '').trim();\n      }\n      \n      // Add the new die\n      const newDieType = die.substring(1); // Remove 'd' prefix\n      diceMap.set(newDieType, (diceMap.get(newDieType) || 0) + 1);\n      \n      // Rebuild the formula\n      const diceParts = [];\n      for (const [dieType, count] of diceMap) {\n        diceParts.push(`${count}d${dieType}`);\n      }\n      \n      // Clean up remaining formula (remove extra + signs)\n      remainingFormula = remainingFormula.replace(/^\\+\\s*|\\s*\\+\\s*$|\\s*\\+\\s*\\+/g, '').trim();\n      \n      // Combine dice and remaining formula\n      if (remainingFormula && remainingFormula !== '+') {\n        this.formula = `${diceParts.join(' + ')} + ${remainingFormula}`;\n      } else {\n        this.formula = diceParts.join(' + ');\n      }\n    } else {\n      // If empty, just add the die\n      this.formula = `1${die}`;\n    }\n    \n    // Update the input field\n    formulaInput.value = this.formula;\n    \n    // Trigger input event to update validation\n    formulaInput.dispatchEvent(new Event('input'));\n  }\n\n  /**\n   * Validate the formula using Roll.validate\n   * @param {string} formula\n   * @returns {boolean}\n   */\n  validateFormula(formula) {\n    if (!formula || formula.trim() === \"\") return false;\n    \n    try {\n      // Use Roll.validate to check if the formula is valid\n      return Roll.validate(formula);\n    } catch (error) {\n      // If Roll.validate doesn't exist or throws, try creating a roll\n      try {\n        new Roll(formula, this.actor?.getRollData() || {});\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Handle roll button click\n   */\n  async rollDice() {\n    LogUtil.log('rollDice');\n    \n    // Validate the formula\n    if (!this.validateFormula(this.formula)) {\n      ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {\n        formula: this.formula || \"empty\"\n      }));\n      return;\n    }\n    \n    // Call the callback if provided\n    if (this.callback) {\n      await this.callback(this.formula);\n    }\n    \n    this.close();\n  }\n\n  /**\n   * Handle cancel button click\n   */\n  cancel() {\n    this.close();\n  }\n\n  /**\n   * Show the dialog and return a promise for the formula\n   * @param {Object} options\n   * @returns {Promise<string|null>}\n   */\n  static async prompt(options = {}) {\n    return new Promise((resolve) => {\n      const dialog = new this({\n        ...options,\n        callback: (formula) => resolve(formula)\n      });\n      \n      dialog.addEventListener(\"close\", () => {\n        // If closed without a formula, resolve with null\n        if (!dialog._resolved) {\n          resolve(null);\n        }\n      });\n      \n      dialog.render(true);\n    });\n  }\n\n  /**\n   * Override close to track resolution\n   */\n  async close(options = {}) {\n    this._resolved = true;\n    return super.close(options);\n  }\n}","import { ROLL_TYPES, MODULE_ID } from \"../../constants/General.mjs\";\nimport { ActivityUtil } from \"../ActivityUtil.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\nimport { CustomRollDialog } from \"../CustomRollDialog.mjs\";\n\n/**\n * Helper functions for roll handling\n */\nexport const RollHelpers = {\n  /**\n   * Add situational bonus to a roll configuration\n   * @param {Object} config - The roll configuration\n   * @param {string} situational - The situational bonus formula\n   * @returns {Object} The modified config\n   */\n  addSituationalBonus(config, situational) {\n    LogUtil.log(\"Flash Rolls 5e | Config before adding bonus:\", [situational, !config.rolls, config]);\n    if (situational) {\n      config.situational = situational;\n      \n      // Use mergeObject to properly create/update the rolls structure\n      const rollsUpdate = {\n        rolls: [{\n          parts: [],\n          data: {\n            situational: situational\n          },\n          options: {}\n        }]\n      };\n      \n      // Deep merge to preserve any existing structure\n      foundry.utils.mergeObject(config, rollsUpdate, {inplace: true});\n      \n      LogUtil.log(\"Flash Rolls 5e | Config after adding bonus:\", [config]);\n    }\n    return config;\n  },\n\n  /**\n   * Build base configuration for ability-based rolls\n   * @param {Object} requestData - The roll request data\n   * @param {Object} rollConfig - Base roll configuration\n   * @returns {Object} The ability configuration\n   */\n  buildAbilityConfig(requestData, rollConfig) {\n    const config = {\n      rolls: [{ ...rollConfig }],\n      ability: requestData.rollKey,\n      advantage: requestData.config.advantage || false,\n      disadvantage: requestData.config.disadvantage || false,\n      target: requestData.config.target\n    };\n    return this.ensureRollFlags(config, requestData);\n  },\n\n  /**\n   * Ensure roll config has the required flags to prevent re-interception\n   * @param {Object} config - The roll configuration\n   * @param {Object} requestData - The roll request data\n   * @returns {Object} The updated config with required flags\n   */\n  ensureRollFlags(config, requestData) {\n    return {\n      ...config,\n      isRollRequest: game.user.isGM ? false : true,\n      _showRequestedBy: true,\n      _requestedBy: requestData.config.requestedBy || 'GM'\n    };\n  },\n\n  /**\n   * Execute an activity-based roll\n   * @param {Actor} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {Object} requestData - The roll request data\n   * @param {Object} rollConfig - Roll configuration\n   * @param {Object} dialogConfig - Dialog configuration\n   * @param {Object} messageConfig - Message configuration\n   */\n  async executeActivityRoll(actor, rollType, requestData, rollConfig, dialogConfig, messageConfig) {\n    if (requestData.rollKey) {\n      await ActivityUtil.executeActivityRoll(\n        actor, \n        rollType, \n        requestData.rollKey, \n        requestData.activityId, \n        {\n          ...rollConfig,\n          dialog: dialogConfig,\n          message: messageConfig\n        }\n      );\n    }\n  },\n\n  /**\n   * Handle a custom roll, creating a custom dialog\n   * @param {Actor} actor - The actor performing the roll\n   * @param {Object} requestData - The roll request data\n   */\n  async handleCustomRoll(actor, requestData) {\n    const formula = requestData.rollKey; // Formula is stored in rollKey\n    \n    // Show the dialog with the formula in readonly mode\n    const dialog = new CustomRollDialog({\n      formula: formula,\n      readonly: true,\n      actor: actor,\n      callback: async (confirmedFormula) => {\n        try {\n          const roll = new Roll(confirmedFormula, actor.getRollData());\n          \n          // Mark the roll to bypass any interceptors\n          roll.options = roll.options || {};\n          roll.options.isRollRequest = true;\n          \n          await roll.evaluate({async: true});\n          \n          // Post to chat with isRollRequest flag in message data\n          await roll.toMessage({\n            speaker: ChatMessage.getSpeaker({actor}),\n            flavor: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${ROLL_TYPES.CUSTOM}`),\n            rollMode: requestData.config.rollMode,\n            isRollRequest: true,\n            _showRequestedBy: true,\n            _requestedBy: requestData.config.requestedBy || 'GM'\n          });\n        } catch (error) {\n          ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula: confirmedFormula}));\n        }\n      }\n    });\n    \n    dialog.render(true);\n  },\n\n  async regainHitDice(actor) {\n    const result = foundry.utils.mergeObject({\n      type: \"long\",\n      deltas: {\n        hitDice: 0\n      },\n      newDay: false,\n      rolls: [],\n      updateData: {},\n      updateItems: []\n    }, {});\n    // result.clone ??= actor.clone();\n    if ( \"dhd\" in result ) result.deltas.hitDice = result.dhd;\n\n    actor._getRestHitDiceRecovery({ maxHitDice: actor.system.attributes.hd.max, type: \"long\" }, result);\n\n    LogUtil.log('RollHelpers.regainHitDice #1', [result]);\n    result.dhd = result.deltas.hitDice;\n    result.longRest = true;\n    LogUtil.log('RollHelpers.regainHitDice #2', [result]);\n\n    try {\n      if (result.updateData && Object.keys(result.updateData).length > 0) {\n        const updateResult = await actor.update(result.updateData, { isRest: false });\n      } else {\n        LogUtil.log('No actor updates to perform', []);\n      }\n      \n      if (result.updateItems && result.updateItems.length > 0) {\n        const itemUpdateResult = await actor.updateEmbeddedDocuments(\"Item\", result.updateItems, { isRest: false });\n      } else {\n        LogUtil.log('No item updates to perform', []);\n      }\n    } catch (error) {\n      LogUtil.error('Error during updates in regainHitDice:', [error]);\n      throw error;\n    }\n\n    LogUtil.log('RollHelpers.regainHitDice #3', [result]);\n    // Return data summarizing the rest effects\n    return result;\n\n  }\n};\n\n/**\n * Roll handlers for each roll type\n * \n  ABILITY: \"ability\",\n  ABILITY_CHECK: \"abilitycheck\",\n  SAVE: \"save\",\n  SAVING_THROW: \"savingthrow\",\n  SKILL: \"skill\",\n  TOOL: \"tool\",\n  CONCENTRATION: \"concentration\",\n  ATTACK: \"attack\",\n  DAMAGE: \"damage\",\n  INITIATIVE: \"initiative\",\n  INITIATIVE_DIALOG: \"initiativedialog\",\n  DEATH_SAVE: \"deathsave\",\n  HIT_DIE: \"hitdie\",\n  ITEM_SAVE: \"itemsave\",\n  CUSTOM: \"custom\",\n  HEALING: \"healing\",\n  FORMULA: \"formula\"\n */\n\nexport const RollHandlers = {\n  ability: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildAbilityConfig(requestData, rollConfig);\n\n    // Use situational from either source\n    const situational = requestData.config.situational || rollConfig.situational || config.situational || \"\";\n    RollHelpers.addSituationalBonus(config, situational);\n    config.situational = situational;\n    LogUtil.log('RollHelpers.rollAbilityCheck', [situational, config, requestData, dialogConfig]);\n    await actor.rollAbilityCheck(config, dialogConfig, messageConfig);\n  },\n  \n  abilitycheck: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.ability(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  save: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildAbilityConfig(requestData, rollConfig);\n    // Use situational from either source\n    const situational = requestData.config.situational || rollConfig.situational || config.situational;\n    if (situational) {\n      RollHelpers.addSituationalBonus(config, situational);\n    }\n    await actor.rollSavingThrow(config, dialogConfig, messageConfig);\n  },\n  \n  savingthrow: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.save(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  skill: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.ensureRollFlags({\n      // ...rollConfig,\n      legacy: false,\n      skill: requestData.rollKey,\n      chooseAbility: true,\n      ability: requestData.config.ability || undefined\n    }, requestData);\n    \n    const situational = requestData.config.situational || rollConfig.situational || config.situational;\n    if (situational) {\n      RollHelpers.addSituationalBonus(config, situational);\n    }\n    await actor.rollSkill(config, dialogConfig, messageConfig);\n  },\n\n  tool: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.ensureRollFlags({\n      // ...rollConfig,\n      legacy: false,\n      tool: requestData.rollKey,\n      chooseAbility: true,\n      ability: requestData.config.ability || undefined\n    }, requestData);\n    \n    const situational = requestData.config.situational || rollConfig.situational || config.situational;\n    if (situational) {\n      RollHelpers.addSituationalBonus(config, situational);\n    }\n    await actor.rollToolCheck(config, dialogConfig, messageConfig);\n  },\n\n  concentration: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.ensureRollFlags({\n      // ...rollConfig,\n      legacy: false\n    }, requestData);\n    const situational = requestData.config.situational || rollConfig.situational || config.situational;\n    if (situational) {\n      RollHelpers.addSituationalBonus(config, situational);\n    }\n    await actor.rollConcentration(config, dialogConfig, messageConfig);\n  },\n\n  attack: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.executeActivityRoll(actor, ROLL_TYPES.ATTACK, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  damage: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.executeActivityRoll(actor, ROLL_TYPES.DAMAGE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  itemsave: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.executeActivityRoll(actor, ROLL_TYPES.ITEM_SAVE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  initiative: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    // Initiative rolls require an active combat\n    if (!game.combat) {\n      ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n      return;\n    }\n    \n    // Store situational bonus temporarily on actor for the hook to pick up\n    if (requestData.config.situational && dialogConfig.configure && !game.user.isGM) {\n      actor._initiativeSituationalBonus = requestData.config.situational;\n    }\n    \n    if (dialogConfig.configure && !game.user.isGM) {\n      await actor.rollInitiativeDialog(rollConfig); // Player side with dialog\n    } else {\n      const rollOptions = actor.getInitiativeRollConfig(rollConfig);\n      RollHelpers.addSituationalBonus(rollOptions, requestData.config.situational);\n      await actor.rollInitiative({}, rollOptions); // GM can skip dialog\n    }\n  },\n  \n  // Alias for INITIATIVE_DIALOG\n  initiativedialog: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.initiative(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  deathsave: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.ensureRollFlags({\n      ...rollConfig,\n      legacy: false\n    }, requestData);\n    const situational = requestData.config.situational || rollConfig.situational || config.situational;\n    if (situational) {\n      RollHelpers.addSituationalBonus(config, situational);\n    }\n    await actor.rollDeathSave(config, dialogConfig, messageConfig);\n  },\n\n  hitdie: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    dialogConfig.configure = game.user.isGM ? dialogConfig.configure : true;\n    \n    const config = RollHelpers.ensureRollFlags(rollConfig, requestData);\n    const situational = requestData.config.situational || rollConfig.situational || config.situational;\n    if (situational) {\n      RollHelpers.addSituationalBonus(config, situational);\n    }\n    \n    await actor.rollHitDie(config, dialogConfig, messageConfig);\n  },\n\n  custom: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.handleCustomRoll(actor, requestData);\n  }\n};","/**\n * Helper functions for roll validation and preparation\n */\n\nimport { NotificationManager } from './Helpers.mjs';\n\n/**\n * Ensure combat exists for initiative rolls\n * @returns {Promise<boolean>} True if combat is ready, false if cancelled\n */\nexport async function ensureCombatForInitiative() {\n  if (!game.combat) {\n    const createCombat = await Dialog.confirm({\n      title: game.i18n.localize(\"COMBAT.Create\"),\n      content: \"<p>\" + game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.noCombatActive\") + \"</p>\",\n      yes: () => true,\n      no: () => false,\n      defaultYes: true,\n      options: {\n        classes: [\"crlngn-rolls-dialog\"]\n      }\n    });\n    \n    if (createCombat) {\n      // Create a new combat encounter\n      const combat = await game.combats.documentClass.create({scene: game.scenes.active.id});\n      await combat.activate();\n      NotificationManager.notify('info', game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.combatCreated\"));\n      return true;\n    } else {\n      // User chose not to create combat\n      return false;\n    }\n  }\n  \n  return true; // Combat already exists\n}\n\n/**\n * Filter actors for initiative rolls, handling re-rolls\n * @param {string[]} actorIds - Array of actor IDs to filter\n * @param {Game} game - The game instance\n * @returns {Promise<string[]>} Filtered array of actor IDs\n */\nexport async function filterActorsForInitiative(actorIds, game) {\n  if (!game.combat) return actorIds;\n  \n  const actors = actorIds\n    .map(id => game.actors.get(id))\n    .filter(actor => actor);\n  \n  // Check which actors already have initiative\n  const actorsWithInitiative = [];\n  const actorIdsWithInitiative = new Set();\n  \n  for (const actor of actors) {\n    const combatant = game.combat.getCombatantByActor(actor.id);\n    if (combatant && combatant.initiative !== null) {\n      actorsWithInitiative.push(actor.name);\n      actorIdsWithInitiative.add(actor.id);\n    }\n  }\n  \n  // If any actors already have initiative, confirm re-roll\n  if (actorsWithInitiative.length > 0) {\n    const reroll = await Dialog.confirm({\n      title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiativeTitle\"),\n      content: \"<p>\" + game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiative\", {\n        actors: actorsWithInitiative.join(\", \")\n      }) + \"</p>\",\n      yes: () => true,\n      no: () => false,\n      defaultYes: false,\n      options: {\n        classes: [\"crlngn-rolls-dialog\"]\n      }\n    });\n    \n    if (!reroll) {\n      // User chose not to re-roll, filter out actors with initiative\n      const filteredIds = actorIds.filter(id => !actorIdsWithInitiative.has(id));\n      \n      // If no actors left to roll, notify\n      if (filteredIds.length === 0) {\n        NotificationManager.notify('info', game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.allActorsHaveInitiative\"));\n      }\n      \n      return filteredIds;\n    } else {\n      // User chose to re-roll, clear initiative for actors that have it\n      for (const actorId of actorIdsWithInitiative) {\n        const combatant = game.combat.getCombatantByActor(actorId);\n        if (combatant) {\n          await combatant.update({ initiative: null });\n        }\n      }\n      \n      return actorIds; // Return all actors since we cleared their initiative\n    }\n  }\n  \n  return actorIds; // No actors had initiative\n}","import { MODULE, ROLL_TYPES } from '../constants/General.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog, GMHitDieConfigDialog } from './GMRollConfigDialog.mjs';\nimport { SidebarUtil } from './SidebarUtil.mjs';\nimport { getPlayerOwner, isPlayerOwned, hasTokenInScene, updateCanvasTokenSelection, delay, buildRollTypes, NotificationManager, filterActorsForDeathSaves, categorizeActorsByOwnership } from './helpers/Helpers.mjs';\nimport { RollHandlers, RollHelpers } from './helpers/RollHandlers.mjs';\nimport { CustomRollDialog } from './CustomRollDialog.mjs';\nimport { ensureCombatForInitiative, filterActorsForInitiative } from './helpers/RollValidationHelpers.mjs';\n\n/**\n * Roll Requests Menu Application\n * Extends Foundry's ApplicationV2 with Handlebars support to provide a menu interface for GMs to request rolls from players\n */\nexport default class RollRequestsMenu extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2) {\n  /**\n   * Singleton instance of the menu\n   * @type {RollRequestsMenu|null}\n   */\n  static #instance = null;\n\n  constructor(options = {}) {\n    LogUtil.log('RollRequestsMenu.constructor');\n    super(options);\n    \n    // Track selected actors and current state\n    this.selectedActors = new Set();\n    this.currentTab = 'pc'; // 'pc' or 'npc'\n    this.selectedRequestType = null;\n    this.isLocked = false; // Track lock state\n    // Get options expanded state from user flag\n    this.optionsExpanded = game.user.getFlag(MODULE.ID, 'menuOptionsExpanded') ?? false;\n    \n    // Initialize with actors from selected tokens\n    this._initializeFromSelectedTokens();\n  }\n\n  static DEFAULT_OPTIONS = {\n    id: 'crlngn-requests-menu',\n    classes: ['roll-requests-menu'],\n    tag: 'div',\n    window: {\n      frame: false,\n      resizable: false,\n      minimizable: false\n    },\n    position: null\n  };\n\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/requests-menus.hbs`\n    }\n  };\n\n  /**\n   * Prepare data for the template\n   */\n  async _prepareContext(options) {\n    LogUtil.log('_prepareContext');\n    const context = await super._prepareContext(options);\n    \n    // Get all actors and separate by ownership\n    const actors = game.actors.contents;\n    const pcActors = [];\n    const npcActors = [];\n    \n    // Get current scene to check for NPC tokens\n    const currentScene = game.scenes.active;\n    \n    for (const actor of actors) {\n      // Skip non-character actors\n      if (actor.type !== 'character' && actor.type !== 'npc') continue;\n      \n      const actorData = {\n        id: actor.id,\n        uuid: actor.uuid,\n        name: actor.name,\n        img: actor.img,\n        selected: this.selectedActors.has(actor.id),\n        crlngnStats: this._getActorStats(actor)\n      };\n      \n      // Check if owned by a player (not GM)\n      const isPlayerOwned = Object.entries(actor.ownership)\n        .some(([userId, level]) => {\n          const user = game.users.get(userId);\n          return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        });\n      \n      if (isPlayerOwned) {\n        pcActors.push(actorData);\n      } else {\n        // For NPCs, only include if they have a token in the current scene\n        if (currentScene) {\n          const hasTokenInScene = currentScene.tokens.some(token => token.actorId === actor.id);\n          if (hasTokenInScene) {\n            npcActors.push(actorData);\n          }\n        }\n      }\n    }\n    \n    // Get current settings\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Check if all actors in current tab are selected\n    const currentActors = this.currentTab === 'pc' ? pcActors : npcActors;\n    const selectAllOn = currentActors.length > 0 && \n      currentActors.every(actor => this.selectedActors.has(actor.id));\n    \n    // Build request types array for template\n    const requestTypes = [];\n    if (this.selectedActors.size > 0) {\n      for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n        requestTypes.push({\n          id: key,\n          name: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${option.name}`) || option.label,\n          rollable: option.subList == null,\n          hasSubList: !!option.subList,\n          selected: this.selectedRequestType === key\n        });\n      }\n    }\n    \n    // Build roll types array based on selected request type\n    const rollTypes = buildRollTypes(this.selectedRequestType, this.selectedActors);\n    \n    return {\n      ...context,\n      actors: currentActors,\n      currentTab: this.currentTab,\n      isPCTab: this.currentTab === 'pc',\n      isNPCTab: this.currentTab === 'npc',\n      selectedTab: this.currentTab,\n      rollRequestsEnabled,\n      skipDialogs,\n      selectAllOn,\n      hasSelectedActors: this.selectedActors.size > 0,\n      requestTypes,\n      rollTypes,\n      showNames: true, // You can make this configurable later\n      actorsLocked: this.isLocked,\n      optionsExpanded: this.optionsExpanded\n    };\n  }\n\n  /**\n   * Get formatted stats for an actor\n   */\n  _getActorStats(actor) {\n    LogUtil.log('_getActorStats');\n    const system = actor.system;\n    const stats = [];\n    \n    // HP\n    if (system.attributes?.hp) {\n      stats.push({\n        abbrev: 'HP',\n        value: system.attributes.hp.value\n      });\n    }\n    \n    // AC\n    if (system.attributes?.ac) {\n      stats.push({\n        abbrev: 'AC',\n        value: system.attributes.ac.value\n      });\n    }\n    \n    // Spell DC - check both old and new locations for compatibility\n    const spellDC = system.attributes?.spell?.dc;\n    if (spellDC) {\n      stats.push({\n        abbrev: 'DC',\n        value: spellDC\n      });\n    }\n    \n    // Passive Perception\n    if (system.skills?.prc?.passive) {\n      stats.push({\n        abbrev: 'PP',\n        value: system.skills.prc.passive\n      });\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Called after the application is rendered\n   */\n  _onRender(context, options) {\n    LogUtil.log('_onRender');\n    super._onRender(context, options);\n    this._attachListeners();\n    \n    // Apply expanded state if saved\n    if (this.optionsExpanded) {\n      const optionsToggle = this.element.querySelector('.options-toggle');\n      const optionsElement = this.element.querySelector('li.options');\n      if (optionsToggle) {\n        optionsToggle.classList.add('expanded');\n      }\n      if (optionsElement) {\n        optionsElement.classList.add('expanded');\n      }\n    }\n    \n    // Add click outside listener with capture to catch events early\n    setTimeout(() => {\n      document.addEventListener('click', this._onClickOutside, true);\n    }, 100);\n    \n    // Hook into token control changes\n    this._tokenControlHook = Hooks.on('controlToken', this._onTokenControlChange.bind(this));\n  }\n  \n  /**\n   * Handle token control changes\n   */\n  _onTokenControlChange(token, controlled) {\n    LogUtil.log('_onTokenControlChange');\n    // Only process if menu is rendered\n    if (!this.rendered) return;\n    \n    // Ignore if we're programmatically updating tokens\n    if (this._ignoreTokenControl) return;\n    \n    // Debounce updates to avoid multiple renders when selecting multiple tokens\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n    }\n    \n    this._tokenUpdateTimeout = setTimeout(() => {\n      // Update selections from current controlled tokens\n      this._initializeFromSelectedTokens();\n      \n      // Re-render to update UI\n      this.render();\n      \n      this._tokenUpdateTimeout = null;\n    }, 100); // 100ms debounce\n  }\n  \n  /**\n   * Handle clicks outside the menu\n   */\n  _onClickOutside = (event) => {\n    LogUtil.log('_onClickOutside');\n    if (this.isLocked) return;\n    const menu = this.element;\n    if (!menu) return;\n    if (event.target.closest('.roll-requests-menu')) return;\n    if (menu.contains(event.target)) return;\n    if (event.target.closest('#crlngn-requests-icon')) return;\n    if (event.target.closest('.dialog, .app, .notification')) return;\n    this.close();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachListeners() {\n    LogUtil.log('_attachListeners');\n    \n    const html = this.element;\n    \n    // Settings toggles\n    html.querySelector('#crlngn-requests-toggle')?.addEventListener('change', this._onToggleRollRequests.bind(this));\n    html.querySelector('#crlngn-skip-dialogs')?.addEventListener('change', this._onToggleSkipDialogs.bind(this));\n    html.querySelector('#crlngn-actors-all')?.addEventListener('change', this._onToggleSelectAll.bind(this));\n    \n    // Lock toggle\n    html.querySelector('#crlngn-actors-lock')?.addEventListener('click', this._onToggleLock.bind(this));\n    \n    // Options toggle\n    html.querySelector('.options-toggle')?.addEventListener('click', this._onToggleOptions.bind(this));\n    \n    // Tab switching\n    const tabs = html.querySelectorAll('.actor-tab');\n    tabs.forEach(tab => {\n      tab.addEventListener('click', this._onTabClick.bind(this));\n    });\n    \n    // Actor selection - handle clicks on actor rows or select buttons\n    html.querySelectorAll('.actor').forEach(actor => {\n      actor.addEventListener('click', this._onActorClick.bind(this));\n    });\n    \n    html.querySelectorAll('.actor-select').forEach(selectBtn => {\n      selectBtn.addEventListener('click', this._onActorSelectClick.bind(this));\n    });\n    \n    // Request type selection - use event delegation for dynamic content\n    const requestTypesContainer = html.querySelector('.request-types');\n    if (requestTypesContainer) {\n      requestTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRequestTypeClick(customEvent);\n        }\n      });\n    }\n    \n    // Roll type selection - use event delegation for dynamic content\n    const rollTypesContainer = html.querySelector('.roll-types');\n    if (rollTypesContainer) {\n      rollTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRollTypeClick(customEvent);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle roll requests toggle\n   */\n  async _onToggleRollRequests(event) {\n    LogUtil.log('_onToggleRollRequests');\n    const SETTINGS = getSettings();\n    const enabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, enabled);\n    \n    // Update the icon in the chat controls\n    SidebarUtil.updateRollRequestsIcon(enabled);\n    \n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleSkipDialogs(event) {\n    LogUtil.log('_onToggleSkipDialogs');\n    const SETTINGS = getSettings();\n    const skip = event.target.checked;\n    await SettingsUtil.set(SETTINGS.skipDialogs.tag, skip);\n  }\n\n  /**\n   * Handle select all toggle\n   */\n  _onToggleSelectAll(event) {\n    LogUtil.log('_onToggleSelectAll');\n    const selectAll = event.target.checked;\n    this._ignoreTokenControl = true; // To avoid loop\n    \n    const actors = this.currentTab === 'pc' ? \n      game.actors.contents.filter(a => isPlayerOwned(a)) :\n      game.actors.contents.filter(a => !isPlayerOwned(a) && hasTokenInScene(a));\n    \n    actors.forEach(actor => {\n      if (selectAll) {\n        this.selectedActors.add(actor.id);\n        updateCanvasTokenSelection(actor.id, true);\n      } else {\n        this.selectedActors.delete(actor.id);\n        updateCanvasTokenSelection(actor.id, false);\n      }\n    });\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 200);\n    \n    this.render();\n    this._updateRequestTypesVisibility();\n  }\n  \n  /**\n   * Handle lock toggle\n   */\n  _onToggleLock(event) {\n    LogUtil.log('_onToggleLock');\n    event.preventDefault();\n    this.isLocked = !this.isLocked;\n    \n    // Update the icon - the currentTarget IS the icon element\n    const lockIcon = event.currentTarget;\n    lockIcon.classList.remove('fa-lock-keyhole', 'fa-lock-keyhole-open');\n    lockIcon.classList.add(this.isLocked ? 'fa-lock-keyhole' : 'fa-lock-keyhole-open');\n  }\n  \n  /**\n   * Handle options toggle\n   */\n  async _onToggleOptions(event) {\n    LogUtil.log('_onToggleOptions');\n    event.preventDefault();\n    \n    // Toggle the state\n    this.optionsExpanded = !this.optionsExpanded;\n    \n    // Save state to user flag\n    await game.user.setFlag(MODULE.ID, 'menuOptionsExpanded', this.optionsExpanded);\n    \n    // Toggle expanded class on the clicked element\n    const optionsToggle = event.currentTarget || event.target.closest('.options-toggle');\n    if (optionsToggle) {\n      optionsToggle.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n    // Find the li.options sibling and toggle expanded class on it\n    const optionsElement = this.element.querySelector('li.options');\n    if (optionsElement) {\n      optionsElement.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n  }\n  \n  /**\n   * Initialize selected actors from currently selected tokens\n   */\n  _initializeFromSelectedTokens() {\n    LogUtil.log('_initializeFromSelectedTokens');\n    const controlledTokens = canvas.tokens?.controlled || [];\n    this.selectedActors.clear();\n    \n    for (const token of controlledTokens) {\n      if (token.actor) {\n        this.selectedActors.add(token.actor.id);\n        \n        if (this.selectedActors.size === 1) {\n          const isPC = isPlayerOwned(token.actor);\n          this.currentTab = isPC ? 'pc' : 'npc';\n        }\n      }\n    }\n    \n  }\n  \n\n  /**\n   * Handle tab click\n   */\n  async _onTabClick(event) {\n    LogUtil.log('_onTabClick');\n    const tab = event.currentTarget.dataset.tab;\n    if (tab === this.currentTab) return;\n    \n    this.selectedActors.clear();\n    canvas.tokens?.releaseAll();\n    this.selectedRequestType = null;\n    \n    this.currentTab = tab;\n    await this.render();\n  }\n\n  /**\n   * Handle click on actor row\n   */\n  _onActorClick(event) {\n    LogUtil.log('_onActorClick');\n    if (event.target.closest('.actor-select')) return;\n    \n    const actorElement = event.currentTarget;\n    const actorId = actorElement.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Handle click on actor select button\n   */\n  _onActorSelectClick(event) {\n    LogUtil.log('_onActorSelectClick');\n    event.stopPropagation();\n    const actorId = event.currentTarget.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Toggle actor selection state\n   */\n  _toggleActorSelection(actorId) {\n    LogUtil.log('_toggleActorSelection');\n    // Temporarily disable token control hook to avoid feedback loop\n    this._ignoreTokenControl = true;\n    \n    if (this.selectedActors.has(actorId)) {\n      this.selectedActors.delete(actorId);\n      updateCanvasTokenSelection(actorId, false);\n    } else {\n      this.selectedActors.add(actorId);\n      updateCanvasTokenSelection(actorId, true);\n    }\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 100);\n    \n    // Re-render to update the UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    this._updateSelectAllState();\n  }\n  \n\n  /**\n   * Update request types visibility based on actor selection\n   */\n  _updateRequestTypesVisibility() {\n    LogUtil.log('_updateRequestTypesVisibility');\n    // re-render when actor selection changes\n    this.render();\n  }\n\n  /**\n   * Update select all checkbox state\n   */\n  _updateSelectAllState() {\n    LogUtil.log('_updateSelectAllState');\n    const selectAllCheckbox = this.element.querySelector('#crlngn-actors-all');\n    const currentActors = this.currentTab === 'pc' ? 'pc' : 'npc';\n    const checkboxes = this.element.querySelectorAll(`.${currentActors}-actors .actor-item input[type=\"checkbox\"]`);\n    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;\n    \n    selectAllCheckbox.checked = checkedCount > 0 && checkedCount === checkboxes.length;\n    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n  }\n\n  /**\n   * Handle request type click\n   */\n  async _onRequestTypeClick(event) {\n    const requestItem = event.currentTarget;\n    const requestType = requestItem.dataset.id;\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    LogUtil.log('_onRequestTypeClick', [requestType, requestItem.dataset, rollOption]);\n    \n    if (!rollOption) {\n      LogUtil.error('Unknown request type:', requestType);\n      return;\n    }\n    \n    if (this.selectedRequestType === requestType) {\n      this.selectedRequestType = null;\n    } else {\n      this.selectedRequestType = requestType;\n    }\n    \n    if (rollOption.subList) {\n      await this.render();\n    } else if (this.selectedRequestType) {\n      this._triggerRoll(requestType, null);\n    }\n  }\n\n  /**\n   * Handle roll type click\n   */\n  _onRollTypeClick(event) {\n    LogUtil.log('_onRollTypeClick');\n    const rollKey = event.currentTarget.dataset.id;\n    this._triggerRoll(this.selectedRequestType, rollKey);\n  }\n\n  /**\n   * Get valid actor IDs based on current tab\n   * @param {Array<string>} selectedActorIds - Array of selected actor IDs\n   * @returns {Array<string>} Filtered array of valid actor IDs\n   */\n  _getValidActorIds(selectedActorIds) {\n    return selectedActorIds.filter(actorId => {\n      const actor = game.actors.get(actorId);\n      if (!actor) return false;\n      const isPC = isPlayerOwned(actor);\n      const isNPC = !isPC && hasTokenInScene(actor);\n      \n      return (this.currentTab === 'pc' && isPC) || (this.currentTab === 'npc' && isNPC);\n    });\n  }\n\n  /**\n   * Handle custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  async _handleCustomRoll() {\n    const formula = await this._showCustomRollDialog();\n    return formula; // Will be null if cancelled\n  }\n\n  /**\n   * Get roll configuration from dialog or create default\n   * @param {Actor[]} actors - Actors being rolled for\n   * @param {string} rollMethodName - The roll method name\n   * @param {string} rollKey - The roll key\n   * @param {boolean} skipDialogs - Whether to skip dialogs\n   * @param {Array} pcActors - PC actors with owners\n   * @returns {Promise<Object|null>} Configuration object or null if cancelled\n   */\n  async _getRollConfiguration(actors, rollMethodName, rollKey, skipDialogs, pcActors) {\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Show GM configuration dialog (unless skip dialogs is enabled or it's a custom roll)\n    if (!skipDialogs && rollMethodName !== ROLL_TYPES.CUSTOM) {\n      // Use appropriate dialog based on roll type\n      let DialogClass;\n      if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(rollMethodName)) {\n        DialogClass = GMSkillToolConfigDialog;\n      } else if (rollMethodName === ROLL_TYPES.HIT_DIE) {\n        DialogClass = GMHitDieConfigDialog;\n      } else {\n        DialogClass = GMRollConfigDialog;\n      }\n      const config = await DialogClass.getConfiguration(actors, rollMethodName, rollKey, { \n        skipDialogs,\n        defaultSendRequest: rollRequestsEnabled // Pass the setting as default \n      });\n      \n      return config; // Will be null if cancelled\n    } else {\n      // Use default configuration when skipping dialogs\n      const config = {\n        advantage: false,\n        disadvantage: false,\n        situational: \"\",\n        parts: [],\n        rollMode: game.settings.get(\"core\", \"rollMode\"),\n        chatMessage: true,\n        isRollRequest: false,  // Don't intercept when rolling locally\n        skipDialog: true,  // Pass skipDialog as true when skipping\n        sendRequest: rollRequestsEnabled && pcActors.length > 0  // Only send if enabled AND there are PC actors\n      };\n      \n      // Death saves always have DC 10\n      if (rollMethodName === ROLL_TYPES.DEATH_SAVE) {\n        config.target = 10;\n      }\n      \n      return config;\n    }\n  }\n\n  /**\n   * Execute roll requests for PC and NPC actors\n   * @param {Object} config - Roll configuration\n   * @param {Array} pcActors - PC actors with owners\n   * @param {Actor[]} npcActors - NPC actors\n   * @param {string} rollMethodName - The roll method name\n   * @param {string} rollKey - The roll key\n   */\n  async _executeRollRequests(config, pcActors, npcActors, rollMethodName, rollKey) {\n    const SETTINGS = getSettings();\n    \n    // Handle PC actors - send roll requests (if sendRequest is true)\n    const successfulRequests = []; // Track successful requests for consolidated notification\n    const offlinePlayerActors = []; // Track offline player actors separately\n    LogUtil.log('_executeRollRequests', {\n      config,\n      rollMethodName,\n      rollKey\n    });\n    if (config.sendRequest) {\n      for (const { actor, owner } of pcActors) {\n        if (!owner.active) {\n          if(SettingsUtil.get(SETTINGS.showOfflineNotifications.tag)) {\n            NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.playerOffline\", { \n              player: owner.name \n            }));\n          }\n\n          // Track offline player actors separately to ensure dialog is skipped\n          offlinePlayerActors.push(actor);\n          continue;\n        }\n        \n        await this._sendRollRequestToPlayer(actor, owner, rollMethodName, rollKey, config, true); // true = suppress individual notification\n        successfulRequests.push({ actor, owner });\n        \n        await delay(100); // to avoid lag\n      }\n      \n      // Unify notification for all successful requests\n      if (successfulRequests.length > 0) {\n        this._showConsolidatedNotification(successfulRequests, rollMethodName, rollKey);\n      }\n    } else {\n      // if requests are off, add to NPC list to roll locally\n      npcActors.push(...pcActors.map(({ actor }) => actor));\n    }\n    \n    // For actors owned by offline players, GM rolls locally\n    // No more dialog since the GM already configured the roll\n    if (offlinePlayerActors.length > 0) {\n      const offlineConfig = { ...config, skipDialog: true };\n      await this._handleNPCRolls(offlinePlayerActors, rollMethodName, rollKey, offlineConfig);\n    }\n    \n    // For NPC actors, GM rolls locally\n    if (npcActors.length > 0) {\n      const npcConfig = { ...config };\n      npcConfig.fastForward = true;\n      npcConfig.skipDialog = true;\n      await this._handleNPCRolls(npcActors, rollMethodName, rollKey, npcConfig);\n    }\n  }\n\n  /**\n   * Method called from menu items to trigger the roll for selected actors\n   * @param {string} requestType - The type of roll request (e.g., 'skill', 'ability')\n   * @param {string} rollKey - The specific roll key (e.g., 'acr' for Acrobatics)\n   */\n  async _triggerRoll(requestType, rollKey) {\n    LogUtil.log('_triggerRoll', [requestType, rollKey]);\n    const SETTINGS = getSettings();\n    const selectedActorIds = Array.from(this.selectedActors);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Validate and filter actors\n    const validActorIds = this._getValidActorIds(selectedActorIds);\n    let actors = validActorIds\n      .map(id => game.actors.get(id))\n      .filter(actor => actor);\n    \n    // Get roll method name\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    const rollMethodName = (rollOption?.name || requestType)?.toLowerCase();\n    \n    switch(rollMethodName) {\n      case ROLL_TYPES.CUSTOM:\n        rollKey = await this._handleCustomRoll();\n        if (!rollKey) return;\n        break;\n      case ROLL_TYPES.INITIATIVE:\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n        const combatReady = await ensureCombatForInitiative();\n        if (!combatReady) return;\n        if (game.combat) {\n          const filteredActorIds = await filterActorsForInitiative(validActorIds, game);\n          if (!filteredActorIds.length) return;\n          // Convert IDs back to actors\n          actors = filteredActorIds\n            .map(id => game.actors.get(id))\n            .filter(actor => actor);\n        }\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        actors = await filterActorsForDeathSaves(actors);\n        break;\n      default:\n        break;\n    }\n    \n    if (!actors.length) {\n      NotificationManager.notify('warn', \"No valid actors selected\");\n      return;\n    }\n    \n    // Categorize actors\n    const { pcActors, npcActors } = categorizeActorsByOwnership(actors);\n    \n    // Get roll configuration\n    const config = await this._getRollConfiguration(\n      actors, \n      rollMethodName, \n      rollKey, \n      skipDialogs, \n      pcActors\n    );\n    if (!config) return;\n    \n    // Execute rolls\n    await this._executeRollRequests(config, pcActors, npcActors, rollMethodName, rollKey);\n    \n    // Close menu\n    setTimeout(() => this.close(), 500);\n  }\n  \n  \n  /**\n   * Send a roll request to a player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config - Roll configuration from dialog\n   * @param {boolean} suppressNotification - If true, don't show individual notification\n   */\n  async _sendRollRequestToPlayer(actor, owner, requestType, rollKey, config, suppressNotification = false) {\n    LogUtil.log('_sendRollRequestToPlayer #A', [requestType, rollKey]);\n    const SETTINGS = getSettings();\n    \n    let rollType = requestType?.toLowerCase();\n    \n    // Mapping for compound types\n    if (rollType === ROLL_TYPES.ABILITY_CHECK) {\n      rollType = ROLL_TYPES.ABILITY;\n    } else if (rollType === ROLL_TYPES.SAVING_THROW) {\n      rollType = ROLL_TYPES.SAVE;\n    } else if (rollType === ROLL_TYPES.INITIATIVE_DIALOG) {\n      rollType = ROLL_TYPES.INITIATIVE;\n    }\n    \n    if (rollType === ROLL_TYPES.HIT_DIE) {\n      const hdData = actor.system.attributes.hd; // First available hit die denomination\n      \n      if (hdData.value > 0) {\n        rollKey = hdData.largestAvailable;\n        /*\n        const denominations = ['d4', 'd6', 'd8', 'd10', 'd12', 'd20'];\n        for (const denom of denominations) {\n          const available = hdData[denom]?.value || 0;\n          if (available > 0) {\n            rollKey = denom;\n            break;\n          }\n        }\n        */\n      } else {\n        // No hit dice available - show dialog to GM\n        const dialogResult = await foundry.applications.api.DialogV2.confirm({\n          window: {\n            title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillTitle\") || \"No Hit Dice Available\",\n            classes: [\"crlngn-hit-die-dialog\"]\n          },\n          position: {\n            width: 420\n          },\n          content: `<p>${game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillMessage\", { \n            actor: actor.name \n          }) || \"\"}</p>`,\n          modal: true,\n          rejectClose: false,\n          yes: {\n            label: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillAndSend\") || \"Refill & Send\",\n            icon: \"\"\n          },\n          no: {\n            label: game.i18n.localize(\"Cancel\") || \"Cancel\",\n            icon: \"\"\n          }\n        });\n        \n        if (dialogResult) {\n          // const maxHitDice = actor.system.attributes.hd.max;\n          // const hitDieResult = {};\n          // actor._getRestHitDiceRecovery({ maxHitDice, type: \"long\" }, hitDieResult);\n\n          // const updates = hitDieResult.updateItems ?? [];\n          // const actorUpdates = hitDieResult.updateData;\n          // const hitDiceRecovered = hitDieResult.deltas?.hitDice ?? 0;\n          \n          // await actor.updateEmbeddedDocuments(\"Item\", updates);\n          // if (actorUpdates) {\n          //   await actor.update(actorUpdates);\n          // }\n          \n          try {\n            LogUtil.log('About to call regainHitDice for', [actor.name]);\n            const hitDieResult = await RollHelpers.regainHitDice(actor);\n            LogUtil.log('regainHitDice completed', [hitDieResult]);\n          } catch (error) {\n            LogUtil.error('Error calling regainHitDice:', [error]);\n          }\n          \n          // Get the largest available hit die after refill\n          rollKey = actor.system.attributes.hd.largestAvailable;\n          LogUtil.log('_sendRollRequestToPlayer - Hit Die REFILL', [{\n            hdData: actor.system.attributes.hd\n          }]);\n          \n          NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refilled\", { \n            actor: actor.name \n          }) || `Hit dice refilled for ${actor.name}`);\n        } else {\n          // User cancelled - don't send the request\n          return;\n        }\n      }\n    }\n\n    LogUtil.log('_sendRollRequestToPlayer - Hit Die Debug', [{\n      rollType,\n      rollKey,\n      actor: actor.name\n    }]);\n    \n    // Build the request data according to Phase 1 spec\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      activityId: null,  // Menu-initiated rolls don't use activities\n      config: {\n        rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        advantage: config.advantage || false,\n        disadvantage: config.disadvantage || false,\n        situational: config.situational || \"\",\n        parts: config.parts || [],\n        chatMessage: config.chatMessage !== false,\n        target: config.target,  // DC value if provided\n        ability: config.ability,  // Ability override for skills/tools\n        attackMode: config.attackMode,  // Attack mode for attack rolls\n        rollTitle: config.rollTitle,  // Title from the dialog window\n        requestedBy: game.user.name  // Who requested the roll\n      },\n      skipDialog: false, // Never skip to player when it's a request\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    \n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    if (!suppressNotification) {\n      NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent\", { \n        player: owner.name,\n        actor: actor.name \n      }));\n    }\n  }\n  \n  /**\n   * Send a consolidated notification for multiple roll requests\n   * @param {Array} successfulRequests - Array of {actor, owner} objects\n   * @param {string} rollMethodName - The type of roll being requested\n   * @param {string} rollKey - The specific roll key (if applicable)\n   */\n  _showConsolidatedNotification(successfulRequests, rollMethodName, rollKey) {\n    LogUtil.log('_showConsolidatedNotification');\n    // Group requests by player\n    const requestsByPlayer = {};\n    for (const { actor, owner } of successfulRequests) {\n      if (!requestsByPlayer[owner.id]) {\n        requestsByPlayer[owner.id] = {\n          player: owner,\n          actors: []\n        };\n      }\n      requestsByPlayer[owner.id].actors.push(actor);\n    }\n    \n    // Get roll type name for display\n    // Find the option key that matches this rollMethodName\n    let rollOptionKey = null;\n    for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n      if (option.name === rollMethodName) {\n        rollOptionKey = key;\n        break;\n      }\n    }\n    \n    const rollTypeKey = rollMethodName;\n    let rollTypeName = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollTypeKey}`) || rollTypeKey;\n    \n    // Add specific roll details if applicable\n    if (rollKey) {\n      const normalizedRollTypeKey = rollTypeKey.toLowerCase();\n      if (normalizedRollTypeKey === ROLL_TYPES.SKILL) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.SAVING_THROW) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.ABILITY_CHECK) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.TOOL) {\n        // Try to get tool name from enrichmentLookup\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          rollTypeName = `${rollTypeName} (${toolItem?.name || rollKey})`;\n        } else {\n          rollTypeName = `${rollTypeName} (${rollKey})`;\n        }\n      } else if (normalizedRollTypeKey === ROLL_TYPES.CUSTOM) {\n        rollTypeName = `${rollTypeName}: ${rollKey}`;\n      }\n    }\n    \n    // Use NotificationManager for consolidated roll request notifications\n    NotificationManager.notifyRollRequestsSent(requestsByPlayer, rollTypeName);\n  }\n  \n  /**\n   * Handle rolling for NPC actors locally\n   * @param {Actor[]} actors \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} dialogConfig - Configuration from GM dialog\n   */\n  async _handleNPCRolls(actors, requestType, rollKey, dialogConfig) {\n    LogUtil.log('_handleNPCRolls', [actors, requestType, rollKey, dialogConfig]);\n    // Build config for local rolls\n    const config = {\n      advantage: dialogConfig.advantage || false,\n      disadvantage: dialogConfig.disadvantage || false,\n      situational: dialogConfig.situational || \"\",\n      parts: dialogConfig.parts || [],\n      rollMode: dialogConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      fastForward: dialogConfig.skipDialog || false,\n      skipDialog: dialogConfig.skipDialog || false,  // Add skipDialog flag\n      chatMessage: dialogConfig.chatMessage !== false,\n      isRollRequest: false,  // Always false for local rolls to prevent interception\n      target: dialogConfig.target,  // DC value if provided\n      ability: dialogConfig.ability,  // Ability override for skills/tools\n      attackMode: dialogConfig.attackMode  // Attack mode for attack rolls\n    };\n    \n    // Roll for each NPC with a small delay between rolls\n    for (const actor of actors) {\n      await this._executeActorRoll(actor, requestType, rollKey, config);\n      // Delay between rolls to prevent lag and improve chat readability\n      await delay(100);\n    }\n  }\n  \n  /**\n   * Execute a roll for a specific actor\n   * @param {Actor} actor \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config \n   */\n  async _executeActorRoll(actor, requestType, rollKey, config) {\n    LogUtil.log('_executeActorRoll', [requestType, rollKey, config]);\n    try {\n      // Normalize the requestType to ensure case matching\n      const normalizedType = requestType.toLowerCase();\n      \n      // Special handling for Hit Die rolls - get the denomination from the actor\n      let actualRollKey = rollKey;\n      if (normalizedType === ROLL_TYPES.HIT_DIE) {\n        // Get the first available hit die denomination for this actor\n        const hdData = actor.system.attributes.hd;\n        if (hdData) {\n          // Find the first denomination with available uses\n          const denominations = ['d6', 'd8', 'd10', 'd12', 'd20'];\n          for (const denom of denominations) {\n            const available = hdData[denom]?.value || 0;\n            if (available > 0) {\n              actualRollKey = denom;\n              break;\n            }\n          }\n        }\n        if (!actualRollKey) {\n          // No hit dice available\n          NotificationManager.notify('warn', game.i18n.format(\"DND5E.HitDiceWarn\", { name: actor.name }));\n          return;\n        }\n      }\n      \n      // Build requestData structure expected by RollHandlers\n      const requestData = {\n        rollKey: actualRollKey,\n        config: config\n      };\n      \n      // Dialog configuration\n      const dialogConfig = {\n        configure: !config.fastForward && !config.skipDialog\n      };\n      \n      // Message configuration\n      const messageConfig = {\n        rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        create: config.chatMessage !== false\n      };\n      \n      // Use the roll handler for the requested roll type\n      const handler = RollHandlers[normalizedType];\n      if (handler) {\n        await handler(actor, requestData, config, dialogConfig, messageConfig);\n      } else {\n        NotificationManager.notify('warn', `Unknown roll type: ${requestType}`);\n      }\n    } catch (error) {\n      LogUtil.error('executeActorRoll', [error]);\n      NotificationManager.notify('error', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollError\", { \n        actor: actor.name \n      }));\n    }\n  }\n\n  /**\n   * Clean up when closing\n   */\n  async _onClose(options) {\n    LogUtil.log('_onClose');\n    await super._onClose(options);\n    \n    // Reset state\n    this.selectedActors.clear();\n    this.selectedRequestType = null;\n    \n    // Remove click outside listener (with capture flag to match addEventListener)\n    document.removeEventListener('click', this._onClickOutside, true);\n    \n    // Remove token control hook\n    if (this._tokenControlHook) {\n      Hooks.off('controlToken', this._tokenControlHook);\n      this._tokenControlHook = null;\n    }\n    \n    // Clear any pending token update timeout\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n      this._tokenUpdateTimeout = null;\n    }\n  }\n\n  /**\n   * Override render positioning to use CSS instead of inline styles\n   */\n  setPosition(position={}) {\n    LogUtil.log('setPosition');\n    // Don't set any inline position styles - let CSS handle it\n    return this;\n  }\n  \n  /**\n   * Show custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  async _showCustomRollDialog() {\n    LogUtil.log('_showCustomRollDialog');\n    return CustomRollDialog.prompt({\n      formula: \"\",\n      readonly: false\n    });\n  }\n\n  /**\n   * Toggle the roll requests menu open/closed\n   * @static\n   */\n  static toggle() {\n    LogUtil.log('RollRequestsMenu.toggle');\n    if (!this.#instance) {\n      this.#instance = new RollRequestsMenu();\n      this.#instance.render(true);\n    } else {\n      if (this.#instance.rendered) {\n        this.#instance.close();\n      } else {\n        this.#instance._initializeFromSelectedTokens();\n        this.#instance.render(true);\n      }\n    }\n  }\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\n\n/**\n * Utility class for managing sidebar controls\n */\nexport class SidebarUtil {\n  /**\n   * Add the roll request bolt icon to sidebar\n   * @param {SidebarTab} app - The sidebar tab application\n   * @param {jQuery} html - The rendered HTML\n   * @param {Object} options - Render options\n   */\n  static addSidebarControls(app, html, options) {\n    if (!game.user.isGM || app.id !== \"chat\") return;\n    \n    const htmlElement = html[0] || html;\n    \n    // Find the chat controls container\n    const chatControls = htmlElement.querySelector(\"#chat-controls\");\n    if (!chatControls || chatControls.querySelector('.roll-requests-icon')) {\n      return;\n    }\n    \n    // Get current settings to determine initial state\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Create the roll request icon\n    const rollRequestIcon = document.createElement('a');\n    rollRequestIcon.id = \"crlngn-requests-icon\";\n    rollRequestIcon.setAttribute(\"data-tooltip-direction\", \"RIGHT\");\n    rollRequestIcon.className = `chat-control-icon roll-requests-icon${rollRequestsEnabled ? ' active' : ''}`;\n    rollRequestIcon.title = game.i18n.localize('CRLNGN_ROLLS.ui.menus.rollRequestsTitle');\n    rollRequestIcon.innerHTML = `<i class=\"fas fa-bolt${rollRequestsEnabled ? '' : '-slash'}\"></i>`;\n    \n    // Insert before the d20 dice icon\n    const firstChatControlIcon = chatControls.querySelector('.chat-control-icon');\n    if (firstChatControlIcon) {\n      firstChatControlIcon.parentNode.insertBefore(rollRequestIcon, firstChatControlIcon);\n    } else {\n      chatControls.insertBefore(rollRequestIcon, chatControls.firstChild);\n    }\n    \n    // Add click listener\n    rollRequestIcon.addEventListener(\"click\", () => {\n      RollRequestsMenu.toggle();\n    });\n  }\n  \n  /**\n   * Update the roll requests icon based on enabled state\n   * @param {boolean} enabled - Whether roll requests are enabled\n   */\n  static updateRollRequestsIcon(enabled) {\n    const icon = document.querySelector('#crlngn-requests-icon i');\n    if (icon) {\n      icon.className = `fas fa-bolt${enabled ? '' : '-slash'}`;\n    }\n  }\n}","import { HOOKS_CORE, HOOKS_DND5E } from \"../constants/Hooks.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { RollInterceptor } from \"./RollInterceptor.mjs\";\nimport { updateSidebarClass, isSidebarExpanded } from \"./helpers/Helpers.mjs\";\nimport { SidebarUtil } from \"./SidebarUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing all module hooks in one place\n */\nexport class HooksUtil {\n  /**\n   * Registered hook IDs for cleanup\n   * @type {Map<string, number>}\n   */\n  static registeredHooks = new Map();\n  \n  /**\n   * Initialize main module hooks\n   */\n  static initialize() {\n    Hooks.once(HOOKS_CORE.INIT, this._onInit.bind(this));\n    Hooks.once(HOOKS_CORE.READY, this._onReady.bind(this));\n  }\n  \n  /**\n   * Triggered when Foundry initializes\n   */\n  static _onInit() {\n    const SETTINGS = getSettings();\n    document.body.classList.add(\"crlngn-rolls\");\n    SettingsUtil.registerSettings();\n    DiceConfigUtil.initialize();\n    \n    // Register sidebar control hook\n    this._registerHook(HOOKS_CORE.RENDER_SIDEBAR_TAB, this._onRenderSidebarTab.bind(this));\n  }\n  \n  /**\n   * Triggered when Foundry is ready (fully loaded)\n   */\n  static _onReady() {\n    const SETTINGS = getSettings();\n    const isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n    if (isDebugOn) {\n      CONFIG.debug.hooks = true;\n    }\n    RollInterceptor.initialize();\n    \n    this._registerDnd5eHooks();\n\n    if (game.user.isGM) {\n      this._registerGMHooks();\n    }else{\n      DiceConfigUtil.getDiceConfig();\n      this._registerPlayerHooks();\n    }\n    updateSidebarClass(isSidebarExpanded());\n  }\n  \n  /**\n   * Register D&D5e specific hooks\n   */\n  static _registerDnd5eHooks() {\n    this._registerHook(HOOKS_DND5E.POST_ROLL_CONFIG, this._onPostRollConfig.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessage.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessageFlavor.bind(this));\n    this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderRollConfigDialog.bind(this));\n    // this._registerHook(HOOKS_DND5E.PRE_CONFIGURE_INITIATIVE, this._onPreConfigureInitiative.bind(this));\n  }\n  \n  /**\n   * Register GM-specific hooks\n   */\n  static _registerGMHooks() {\n    this._registerHook(HOOKS_CORE.USER_CONNECTED, this._onUserConnected.bind(this));\n    \n    // Request dice config from all active users\n    game.users.forEach(user => {\n      this._onUserConnected(user);\n    });\n  }\n\n  static _registerPlayerHooks() {\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._onPreRollHitDieV2.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG_V2, this._onPreRollInitiativeDialogV2.bind(this));\n    this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderHitDieDialog.bind(this));\n  }\n  \n  /**\n   * Handle data after roll configuration\n   */\n  static _onPostRollConfig(rolls, config, dialog, message) {\n    if (config._showRequestedBy && rolls.length > 0) {\n      message.data = message.data || {};\n      message.data._showRequestedBy = true;\n      message.data._requestedBy = config._requestedBy;\n    }\n  }\n  \n  /**\n   * Handle data before creating chat message for requested rolls\n   */\n  static _onPreCreateChatMessage(chatMessage, data, options, userId) {\n    if (data._showRequestedBy && data.rolls?.length > 0) {\n      const requestedBy = data._requestedBy || 'GM';\n      const requestedText = game.i18n.format('CRLNGN_ROLL_REQUESTS.chat.requestedBy', { gm: requestedBy });\n      \n      const currentFlavor = data.flavor || '';\n      data.flavor = currentFlavor ? `${currentFlavor} ${requestedText}` : requestedText;\n    }\n  }\n  \n  /**\n   * Handle flavor data before creating chat message\n   */\n  static _onPreCreateChatMessageFlavor(message, data, options, userId) {\n    // Check if this is a roll message with our custom flavor\n    if (data.rolls?.length > 0 && data.rolls[0]) {\n      try {\n        // The roll data includes the options directly\n        const rollData = data.rolls[0];\n        if (rollData.options?._customFlavor) {\n          data.flavor = rollData.options._customFlavor;\n        }\n      } catch (error) {\n        // Silently ignore errors\n      }\n    }\n  }\n  \n  /**\n   * Triggered whenever roll configuration dialog is rendered. \n   * Used to add custom situational bonus from data, since the default DnD5e dialog does not seem to handle that\n   */\n  static _onRenderRollConfigDialog(app, html, data) {\n    LogUtil.log(\"_onRenderRollConfigDialog triggered\", [{\n      app,\n      config: app.config,\n      rolls: app.config?.rolls,\n      situational: app.config?.situational,\n      data\n    }]);\n\n    \n    // Do not continue if we've already triggered\n    if (app._situationalTriggered) return;\n\n    // if(app.config?.rolls?.[0]?.data?.situational){\n    //   app.config.situational = app.config.rolls[0].data.situational;\n    // }\n    \n    // Does the dialog have a situational input field?\n    const situationalInputs = html.querySelectorAll('input[name*=\"situational\"]');\n    LogUtil.log(\"Found situational inputs:\", [situationalInputs.length]);\n    \n    let hasTriggered = false;\n    situationalInputs.forEach((input, index) => {\n      LogUtil.log(`Situational input ${index}:`, [{\n        name: input.name,\n        value: input.value,\n        type: input.type\n      }]);\n      \n      // check if we need to populate the value\n      if (!input.value && (app.config?.rolls?.[0]?.data?.situational) && app.config?.isConcentration) {\n        LogUtil.log(\"Populating concentration situational bonus:\", [app.config.bonus]);\n        input.value = app.config.rolls[0].data.situational;\n        hasTriggered = true;\n      }\n      \n      if (input.value && !hasTriggered) {\n        // Apply flag to prevent re-render loop\n        app._situationalTriggered = true;\n        hasTriggered = true;\n        \n        // Dispatch a change event to trigger formula update\n        setTimeout(() => {\n          input.dispatchEvent(new Event('change', {\n            bubbles: true,\n            cancelable: false\n          }));\n          \n          // Clear the situational value from the roll config data to prevent re-population\n          if (app.config?.rolls?.[0]?.data) {\n            delete app.config.rolls[0].data.situational;\n          }\n        }, 50);\n      }\n    });\n  }\n  \n  /**\n   * Request dice configuration from the connected user\n   */\n  static _onUserConnected(user) {\n    if (user.active && user.id !== game.user.id) {\n      DiceConfigUtil.requestDiceConfigFromUser(user.id);\n    }\n  }\n  \n  /**\n   * Handle render sidebar tab\n   */\n  static _onRenderSidebarTab(app, html, options) {\n    SidebarUtil.addSidebarControls(app, html, options);\n  }\n  \n  /**\n   * Handle pre-configure initiative hook to add situational bonus\n   */\n  static _onPreConfigureInitiative(actor, config) {\n    // Check if there's a stored situational bonus for this actor\n    if (actor._initiativeSituationalBonus) {\n      LogUtil.log(\"Adding situational bonus to initiative:\", [\n        \"actor:\", actor.name,\n        \"situational:\", actor._initiativeSituationalBonus,\n        \"config before:\", config\n      ]);\n      \n      // Initialize rolls array if needed\n      if (!config.rolls || config.rolls.length === 0) {\n        config.rolls = [{\n          parts: [],\n          data: {},\n          options: {}\n        }];\n      }\n      \n      // Add situational bonus to the roll data\n      // config.situational = actor._initiativeSituationalBonus;\n      config.rolls[0].data.situational = actor._initiativeSituationalBonus;\n      \n      LogUtil.log(\"Flash Rolls 5e | Initiative config after adding situational:\", [config]);\n    }\n  }\n  \n  /**\n   * Register a hook and track it\n   * @param {string} hookName - The hook name\n   * @param {Function} handler - The handler function\n   * @private\n   */\n  static _registerHook(hookName, handler) {\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.set(`${hookName}_${hookId}`, hookId);\n    return hookId;\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterAll() {\n    this.registeredHooks.forEach((hookId, key) => {\n      const hookName = key.split('_')[0];\n      Hooks.off(hookName, hookId);\n    });\n    this.registeredHooks.clear();\n  }\n  \n  /**\n   * Check if a hook is registered\n   * @param {string} hookName - The hook name to check\n   * @returns {boolean}\n   */\n  static isRegistered(hookName) {\n    for (const key of this.registeredHooks.keys()) {\n      if (key.startsWith(`${hookName}_`)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * Handle pre-roll hit die hook to consolidate situational bonus\n   */\n  static _onPreRollHitDieV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollHitDieV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    // Check if we have multiple rolls with situational bonus\n    if (config.rolls && config.rolls.length > 1) {\n      const secondRoll = config.rolls[1];\n      if (secondRoll && secondRoll.data && secondRoll.data.situational) {\n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        config.rolls[0].data.situational = secondRoll.data.situational;\n        config.rolls.splice(1, 1);\n        \n        LogUtil.log(\"Consolidated hit die rolls with situational bonus\", config.rolls);\n      }\n    }\n  }\n  \n  /**\n   * Handle pre-roll initiative dialog hook to add situational bonus\n   */\n  static _onPreRollInitiativeDialogV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollInitiativeDialogV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    // Check if actor has stored situational bonus\n    const actor = config.subject;\n    if (actor && actor._initiativeSituationalBonus) {\n      if (!config.rolls || config.rolls.length === 0) {\n        const initiativeConfig = actor.getInitiativeRollConfig({});\n        config.rolls = initiativeConfig.rolls || [];\n      }\n      \n      // Add situational bonus\n      if (config.rolls.length > 0) {\n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        config.rolls[0].data.situational = actor._initiativeSituationalBonus;\n        \n        LogUtil.log(\"Added situational bonus to initiative dialog\", [{\n          bonus: actor._initiativeSituationalBonus,\n          rolls: config.rolls\n        }]);\n        \n        // Clean up the temporary storage\n        delete actor._initiativeSituationalBonus;\n      }\n    }\n  }\n  \n  /**\n   * Handle rendering of hit die dialog to add denomination selector for multiclass\n   */\n  static _onRenderHitDieDialog(app, html, data) {\n    // Only process hit die dialogs - check window title\n    const title = html.querySelector('.window-title')?.textContent;\n    if (!title || !title.includes('Hit Die')) return;\n    \n    const actor = app.config?.subject;\n    if (!actor) return;\n    \n    LogUtil.log(\"_onRenderHitDieDialog triggered\", [{\n      app,\n      actor: actor.name,\n      hd: actor.system.attributes.hd\n    }]);\n    \n    // Get available hit dice from the actor's classes\n    const hdData = actor.system.attributes.hd;\n    const availableDice = [];\n    \n    // Get hit dice from actor's classes\n    for (const cls of Object.values(actor.classes || {})) {\n      const denom = cls.system.hitDice;\n      const classHD = cls.system.levels;\n      const usedHD = cls.system.hitDiceUsed || 0;\n      const availableHD = classHD - usedHD;\n      \n      if (availableHD > 0) {\n        // Check if we already have this denomination\n        const existing = availableDice.find(d => d.denomination === denom);\n        if (existing) {\n          existing.available += availableHD;\n          existing.classes.push(cls.name);\n        } else {\n          availableDice.push({\n            denomination: denom,\n            available: availableHD,\n            max: classHD,\n            classes: [cls.name]\n          });\n        }\n      }\n    }\n    \n    // Only add selector if multiple dice types are available\n    if (availableDice.length > 1) {\n      // Find the formula section\n      const formulaSection = html.querySelector('.formulas');\n      if (!formulaSection) return;\n      \n      // Get current denomination from the roll\n      const currentDenom = app.config.rolls?.[0]?.options?.denomination || hdData.largestAvailable;\n      \n      // Create hit die selector\n      const selectorHtml = `\n        <div class=\"form-group\">\n          <label>${game.i18n.localize(\"DND5E.HitDice\")}</label>\n          <select name=\"hitDieSelector\" class=\"hit-die-selector\">\n            ${availableDice.map(die => `\n              <option value=\"${die.denomination}\" ${die.denomination === currentDenom ? 'selected' : ''}>\n                ${die.denomination} (${die.available} ${game.i18n.localize(\"DND5E.available\")}) - ${die.classes.join(', ')}\n              </option>\n            `).join('')}\n          </select>\n        </div>\n      `;\n      \n      // Insert before the first form group\n      const firstFormGroup = formulaSection.querySelector('.form-group');\n      if (firstFormGroup) {\n        firstFormGroup.insertAdjacentHTML('beforebegin', selectorHtml);\n        \n        // Add change handler\n        const selector = html.querySelector('.hit-die-selector');\n        selector?.addEventListener('change', async (event) => {\n          const newDenom = event.target.value;\n          \n          // Update the roll configuration\n          if (app.config.rolls?.[0]?.options) {\n            app.config.rolls[0].options.denomination = newDenom;\n          }\n          \n          // Recalculate the formula\n          const conMod = actor.system.abilities.con.mod;\n          const newFormula = `max(0, 1${newDenom} + ${conMod})`;\n          \n          if (app.config.rolls?.[0]) {\n            app.config.rolls[0].formula = newFormula;\n            \n            // Re-evaluate the roll to update the preview\n            const roll = new CONFIG.Dice.D20Roll(newFormula, actor.getRollData());\n            await roll.evaluate({async: false});\n            app.config.rolls[0] = roll;\n          }\n          \n          // Force re-render of the dialog\n          app.render(true);\n          \n          LogUtil.log(\"Updated hit die denomination\", [{\n            newDenom,\n            newFormula,\n            conMod\n          }]);\n        });\n      }\n    }\n  }\n}","import { ROLL_TYPES } from \"../constants/General.mjs\";\nimport { getRollTypeDisplay, applyTargetTokens, NotificationManager } from \"./helpers/Helpers.mjs\";\nimport { RollHandlers } from \"./helpers/RollHandlers.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for handling roll requests from GM to players\n */\nexport class RollRequestUtil {\n  \n  /**\n   * Handle roll request from GM on player side\n   * @param {Object} requestData - The roll request data\n   */\n  static async handleRequest(requestData) {\n    LogUtil.log('handleRequest', [requestData]);\n    if (game.user.isGM) return;\n    \n    const actor = game.actors.get(requestData.actorId);\n    if (!actor || !actor.isOwner) {\n      return;\n    }\n    \n    if (requestData.preserveTargets && \n        requestData.targetTokenIds?.length > 0 && \n        game.user.targets.size === 0) {\n      applyTargetTokens(requestData.targetTokenIds);\n    }\n    \n    NotificationManager.notify('info', '', {\n      batch: true,\n      batchData: {\n        actor: actor.name,\n        rollType: requestData.rollType,\n        rollKey: requestData.rollKey,\n        gm: requestData.config.requestedBy || 'GM'\n      }\n    });\n    \n    RollRequestUtil.executeRequest(actor, requestData);\n  }\n  \n  /**\n   * Execute a roll based on the request data\n   * @param {Actor} actor \n   * @param {Object} requestData \n   */\n  static async executeRequest(actor, requestData) {\n    LogUtil.log('executeRequest', [actor, requestData]);\n    \n    // Debug logging for hit die rolls\n    LogUtil.log('executeRequest - Debug', [{\n      rollType: requestData.rollType,\n      rollKey: requestData.rollKey,\n      actorName: actor.name,\n      handlers: Object.keys(RollHandlers)\n    }]);\n    \n    try {\n      // Normalize rollType to lowercase for consistent comparisons\n      const normalizedRollType = requestData.rollType?.toLowerCase();\n      \n      const rollConfig = {\n        advantage: requestData.config.advantage || false,\n        disadvantage: requestData.config.disadvantage || false,\n        isRollRequest: true, // Custom flag to prevent re-interception\n        target: requestData.config.target, // DC value\n        _showRequestedBy: true, // Flag to show who requested the roll in chat\n        _requestedBy: requestData.config.requestedBy || 'GM'\n      };\n      \n      // Add ability for skills/tools if provided\n      if (requestData.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n        rollConfig.ability = requestData.config.ability;\n      }\n      \n      // Dialog configuration (second parameter)\n      const shouldSkipDialog = game.user.isGM ? requestData.skipDialog : false;\n      // requestData.skipDialog || normalizedRollType === ROLL_TYPES.CUSTOM;\n      \n      const dialogConfig = {\n        configure: !shouldSkipDialog,\n        options: {\n          defaultButton: requestData.config.advantage ? 'advantage' : \n                         requestData.config.disadvantage ? 'disadvantage' : 'normal',\n          // Add dialog window configuration\n          window: {\n            title: requestData.config.rollTitle || getRollTypeDisplay(normalizedRollType, requestData.rollKey),\n            subtitle: actor.name\n          }\n        }\n      };\n      \n      // Message configuration (third parameter)\n      const messageConfig = {\n        rollMode: requestData.config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        create: requestData.config.chatMessage !== false\n      };\n      \n      // Debug logging for hit die\n      if (normalizedRollType === 'hitdie') {\n        LogUtil.log('RollRequestUtil - Hit Die Debug', [{\n          normalizedRollType,\n          requestData,\n          rollConfig,\n          handlers: Object.keys(RollHandlers)\n        }]);\n      }\n      \n      // Use the roll handler for the requested roll type\n      const handler = RollHandlers[normalizedRollType];\n      if (handler) {\n        await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        LogUtil.warn(`No handler found for roll type: ${normalizedRollType}`);\n        NotificationManager.notify('warn', game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollError', { \n          actor: actor.name || 'Unknown Actor'\n        }));\n      }\n    } catch (error) {\n      LogUtil.error('Error executing roll request:', [error]);\n      NotificationManager.notify('error', game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollError', { \n        actor: actor.name || 'Unknown Actor'\n      }));\n    }\n  }\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SOCKET_CALLS } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { HooksUtil } from \"./HooksUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { RollRequestUtil } from \"./RollRequestUtil.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    SocketUtil.initialize(Main.registerSocketCalls);\n    HooksUtil.initialize();\n  }\n\n  // Wrapper methods for socket calls to DiceConfigUtil\n  static getDiceConfig() {\n    return DiceConfigUtil.getDiceConfig();\n  }\n  \n  static receiveDiceConfig(userId, diceConfig) {\n    DiceConfigUtil.receiveDiceConfig(userId, diceConfig);\n  }\n\n  /**\n   * Handle roll request from GM on player side\n   * @param {Object} requestData - The roll request data\n   */\n  static async handleRollRequest(requestData) {\n    return RollRequestUtil.handleRequest(requestData);\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.handleRollRequest, Main.handleRollRequest);\n  }\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\n// Initialize the module\nMain.init();\n"],"names":["SETTING_INPUT","SETTING_SCOPE","getSettings","MODULE_ID","DEBUG_TAG","SOCKET_CALLS","ROLL_TYPES","ROLL_REQUEST_OPTIONS","MODULE","HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","__publicField","LogUtil","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","name","func","value","callback","handler","parameters","userId","executionKey","SocketUtil","DiceConfigUtil","clientSettings","diceConfig","_b","user","SettingsUtil","SETTINGS","entry","setting","settingObj","settingName","moduleName","selectedSetting","newValue","requestsIcon","ActivityUtil","item","rollType","activities","attackActivities","damageAttackActivities","damageActivities","saveActivities","itemSaveActivities","activityType","actor","itemId","activityId","config","activity","normalizedRollType","dialogConfig","workflow","formulas","part","f","defaultConfig","defaultOptions","formula","ignoreCrit","damageType","GMRollConfigDialog","message","dialog","partId","context","_c","configSection","templateData","template","wrapper","button","event","formConfig","sendRequestCheckbox","dcInput","formData","index","abilityFromForm","dcFromForm","situational","idx","dcValue","form","action","finalizedRolls","actors","rollKey","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","actorId","a","showDC","rollClass","rollConfig","messageConfig","app","resolve","firstRoll","advantage","disadvantage","finalConfig","defaultRollMode","defaultAbility","level","title","skillLabel","skill","abilityLabel","saveAbility","checkAbility","toolData","toolLabel","toolItem","GMHitDieConfigDialog","GMSkillToolConfigDialog","skillConfig","tool","RollInterceptor","hookName","hookId","hookNames","rollInterceptionEnabled","rollRequestsEnabled","owner","DialogClass","skipDialogs","originalConfig","dialogResult","denomination","modifiedConfig","ownership","cleanConfig","key","requestData","t","getRollTypeDisplay","display","showBatchedNotifications","pendingNotifications","getRollTypeDisplayFn","notificationsByType","notif","entries","messages","rollTypeDisplay","actorNames","getPlayerOwner","applyTargetTokens","tokenIds","id","isPlayerOwned","hasTokenInScene","currentScene","token","updateCanvasTokenSelection","selected","tokens","delay","ms","isSidebarExpanded","updateSidebarClass","isExpanded","body","buildRollTypes","selectedRequestType","selectedActors","rollTypes","selectedOption","firstActorId","allTools","label","str","b","rollData","configData","_NotificationManager","type","requestsByPlayer","rollTypeName","successfulRequests","playerData","playerSummaries","playerId","NotificationManager","filterActorsForDeathSaves","actorsNeedingDeathSaves","actorsSkippingDeathSaves","hp","deathSaves","successes","failures","categorizeActorsByOwnership","pcActors","npcActors","CustomRollDialog","target","htmlElement","formulaInput","validationMessage","messageElement","die","currentFormula","diceRegex","diceMap","remainingFormula","match","count","dieType","newDieType","diceParts","RollHelpers","rollsUpdate","confirmedFormula","updateResult","itemUpdateResult","error","RollHandlers","rollOptions","ensureCombatForInitiative","filterActorsForInitiative","actorIds","game","actorsWithInitiative","actorIdsWithInitiative","combatant","filteredIds","_instance","_RollRequestsMenu","menu","actorData","currentActors","selectAllOn","requestTypes","option","system","stats","spellDC","optionsToggle","optionsElement","controlled","html","tab","selectBtn","requestTypesContainer","listItem","customEvent","rollTypesContainer","enabled","SidebarUtil","skip","selectAll","lockIcon","controlledTokens","isPC","selectAllCheckbox","checkboxes","checkedCount","cb","requestItem","requestType","rollOption","selectedActorIds","isNPC","rollMethodName","offlinePlayerActors","offlineConfig","npcConfig","validActorIds","filteredActorIds","suppressNotification","hdData","hitDieResult","rollTypeKey","normalizedRollTypeKey","normalizedType","actualRollKey","denominations","denom","position","__privateGet","__privateSet","__privateAdd","RollRequestsMenu","chatControls","rollRequestIcon","firstChatControlIcon","icon","HooksUtil","chatMessage","requestedBy","requestedText","currentFlavor","situationalInputs","hasTriggered","input","dialogOptions","messageOptions","secondRoll","initiativeConfig","availableDice","cls","classHD","usedHD","availableHD","existing","d","formulaSection","currentDenom","selectorHtml","firstFormGroup","selector","newDenom","conMod","newFormula","RollRequestUtil","Main"],"mappings":"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"}