{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Hooks.mjs","../../src/constants/General.mjs","../../src/components/LogUtil.mjs","../../src/constants/Settings.mjs","../../src/components/SettingsUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  RENDER_SIDEBAR_TAB: \"renderSidebarTab\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheck\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrow\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheck\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrow\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cRoll That For Me`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", requestType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", requestType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", requestType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", requestType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", requestType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", requestType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" }, // Recharge rolls\n\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" }, // D20 test\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" }, // Short rest\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" }, // Long rest\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: \"abilityCheck\", label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: \"savingThrow\", label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.savingThrows' },\n  SKILL: { name: \"skill\", label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: \"tool\", label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: \"concentration\", label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: \"initiativeDialog\", label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: \"deathSave\", label: \"Death Save\", subList: null, actorPath: '' },\n  CUSTOM: { name: \"custom\", label: \"Custom Roll\", subList: null, actorPath: '' },\n  // HIT_DIE: { name: \"hitDie\", label: \"Hit Die\", subList: null, actorPath: '' }\n}\n\n/**\n * Module configuration object\n * @constant\n * @type {Object}\n */\nexport const MODULE = {\n  ID: MODULE_ID,\n  ROLL_REQUEST_OPTIONS: ROLL_REQUEST_OPTIONS\n}\n","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debugMode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      // If settings aren't available yet, check bypassSettings\n      if (bypassSettings || LogUtil.debugOn) {\n        console.log(...DEBUG_TAG, ref, ...data);\n      }\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n}","export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    skipDialogs: {\n      tag: \"skip-dialogs\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n      LogUtil.log(\"Registering... \",[entry]);\n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n      LogUtil.log(\"registerSettings\",[setting.tag, SettingsUtil.get(setting.tag)]);\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n      LogUtil.log(\"GET Setting\", [selectedSetting, setting]);\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n    LogUtil.log(\"Setting\",[settingName, selectedSetting]);\n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n      LogUtil.log(\"Unable to change setting\",[settingName, selectedSetting]);\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsEnabled(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsEnabled(newValue){\n    const requestsIcon = document.querySelector(\"#chat-controls .chat-control-icon.roll-requests-icon\");\n    if(!requestsIcon){ return; }\n    \n    if(newValue){\n      requestsIcon.classList.add(\"active\");\n    }else{\n      requestsIcon.classList.remove(\"active\");\n    }\n  }\n}\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      LogUtil.log(`Attempting to register module...`);\n\n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n        LogUtil.log(`SocketUtil | Module registered`, [SocketUtil.socket]);\n      } catch (e) {\n          LogUtil.log(`Problem registering module`, [e]);\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n      LogUtil.log(`SocketUtil - Registered callback`, [SocketUtil.socket, name]);\n    } else {\n      LogUtil.log(`SocketUtil - Failed to register callback (socket not initialized)`, [SocketUtil.socket, name]);\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log(`SocketUtil - sendMessage`, [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as GM.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute for all clients.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    if (!SocketUtil.socket) {\n        LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as user.\");\n        return;\n    }\n\n    if(userId === game.user.id){\n      LogUtil.log(\"SocketUtil - Preventing recursive call\", [userId]);\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        LogUtil.log(\"SocketUtil - Preventing recursive call\", [executionKey]);\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n        const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n        LogUtil.log(\"SocketUtil - Executed as user.\", [resp]);\n        return resp;\n    } catch (error) {\n        LogUtil.log(\"SocketUtil - Error executing as user\", [error]);\n        return null;\n    } finally {\n        // Always clean up, even if there was an error\n        SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    LogUtil.log(\"ROLLS DATA\", [data, data.subject]);\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { MODULE } from '../constants/General.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { Main } from './Main.mjs';\n\n/**\n * Roll Requests Menu Application\n * Extends Foundry's ApplicationV2 with Handlebars support to provide a menu interface for GMs to request rolls from players\n */\nexport default class RollRequestsMenu extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2) {\n  constructor(options = {}) {\n    super(options);\n    \n    // Track selected actors and current state\n    this.selectedActors = new Set();\n    this.currentTab = 'pc'; // 'pc' or 'npc'\n    this.selectedRequestType = null;\n  }\n\n  static DEFAULT_OPTIONS = {\n    id: 'crlngn-requests-menu',\n    classes: ['roll-requests-menu'],\n    tag: 'div',\n    window: {\n      frame: false,\n      resizable: false,\n      minimizable: false\n    },\n    position: null\n  };\n\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/requests-menus.hbs`\n    }\n  };\n\n  /**\n   * Prepare data for the template\n   */\n  async _prepareContext(options) {\n    const context = await super._prepareContext(options);\n    \n    // Get all actors and separate by ownership\n    const actors = game.actors.contents;\n    const pcActors = [];\n    const npcActors = [];\n    \n    // Get current scene to check for NPC tokens\n    const currentScene = game.scenes.active;\n    \n    for (const actor of actors) {\n      // Skip non-character actors\n      if (actor.type !== 'character' && actor.type !== 'npc') continue;\n      \n      const actorData = {\n        id: actor.id,\n        uuid: actor.uuid,\n        name: actor.name,\n        img: actor.img,\n        selected: this.selectedActors.has(actor.id),\n        crlngnStats: this._getActorStats(actor)\n      };\n      \n      // Check if owned by a player (not GM)\n      const isPlayerOwned = Object.entries(actor.ownership)\n        .some(([userId, level]) => {\n          const user = game.users.get(userId);\n          return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        });\n      \n      if (isPlayerOwned) {\n        pcActors.push(actorData);\n      } else {\n        // For NPCs, only include if they have a token in the current scene\n        if (currentScene) {\n          const hasTokenInScene = currentScene.tokens.some(token => token.actorId === actor.id);\n          if (hasTokenInScene) {\n            npcActors.push(actorData);\n          }\n        }\n      }\n    }\n    \n    // Get current settings\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Check if all actors in current tab are selected\n    const currentActors = this.currentTab === 'pc' ? pcActors : npcActors;\n    const selectAllOn = currentActors.length > 0 && \n      currentActors.every(actor => this.selectedActors.has(actor.id));\n    \n    return {\n      ...context,\n      actors: currentActors,\n      currentTab: this.currentTab,\n      isPCTab: this.currentTab === 'pc',\n      isNPCTab: this.currentTab === 'npc',\n      selectedTab: this.currentTab,\n      rollRequestsEnabled,\n      skipDialogs,\n      selectAllOn,\n      hasSelectedActors: this.selectedActors.size > 0,\n      rollOptions: MODULE.ROLL_REQUEST_OPTIONS,\n      showNames: true // You can make this configurable later\n    };\n  }\n\n  /**\n   * Get formatted stats for an actor\n   */\n  _getActorStats(actor) {\n    const system = actor.system;\n    const stats = [];\n    \n    // HP\n    if (system.attributes?.hp) {\n      stats.push({\n        abbrev: 'HP',\n        value: system.attributes.hp.value\n      });\n    }\n    \n    // AC\n    if (system.attributes?.ac) {\n      stats.push({\n        abbrev: 'AC',\n        value: system.attributes.ac.value\n      });\n    }\n    \n    // Spell DC\n    if (system.attributes?.spelldc) {\n      stats.push({\n        abbrev: 'DC',\n        value: system.attributes.spelldc\n      });\n    }\n    \n    // Passive Perception\n    if (system.skills?.prc?.passive) {\n      stats.push({\n        abbrev: 'PP',\n        value: system.skills.prc.passive\n      });\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Called after the application is rendered\n   */\n  _onRender(context, options) {\n    super._onRender(context, options);\n    this._attachListeners();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachListeners() {\n    LogUtil.log('Attaching listeners');\n    \n    const html = this.element;\n    \n    // Settings toggles\n    html.querySelector('#crlngn-requests-toggle')?.addEventListener('change', this._onToggleRollRequests.bind(this));\n    html.querySelector('#crlngn-skip-dialogs')?.addEventListener('change', this._onToggleSkipDialogs.bind(this));\n    html.querySelector('#crlngn-actors-all')?.addEventListener('change', this._onToggleSelectAll.bind(this));\n    \n    // Tab switching\n    const tabs = html.querySelectorAll('.actor-tab');\n    LogUtil.log('Found tabs:', [tabs.length]);\n    tabs.forEach(tab => {\n      tab.addEventListener('click', this._onTabClick.bind(this));\n    });\n    \n    // Actor selection - handle clicks on actor rows or select buttons\n    html.querySelectorAll('.actor').forEach(actor => {\n      actor.addEventListener('click', this._onActorClick.bind(this));\n    });\n    \n    html.querySelectorAll('.actor-select').forEach(selectBtn => {\n      selectBtn.addEventListener('click', this._onActorSelectClick.bind(this));\n    });\n    \n    // Request type selection\n    html.querySelectorAll('.request-type-item').forEach(item => {\n      item.addEventListener('click', this._onRequestTypeClick.bind(this));\n    });\n    \n    // Roll type selection\n    html.querySelectorAll('.roll-type-item').forEach(item => {\n      item.addEventListener('click', this._onRollTypeClick.bind(this));\n    });\n  }\n\n  /**\n   * Handle roll requests toggle\n   */\n  async _onToggleRollRequests(event) {\n    const SETTINGS = getSettings();\n    const enabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, enabled);\n    \n    // Update the icon in the chat controls\n    Main.updateRollRequestsIcon(enabled);\n    \n    LogUtil.log('Roll requests enabled:', [enabled]);\n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleSkipDialogs(event) {\n    const SETTINGS = getSettings();\n    const skip = event.target.checked;\n    await SettingsUtil.set(SETTINGS.skipDialogs.tag, skip);\n    LogUtil.log('Skip dialogs:', [skip]);\n  }\n\n  /**\n   * Handle select all toggle\n   */\n  _onToggleSelectAll(event) {\n    const selectAll = event.target.checked;\n    \n    // Get the current actors based on the active tab\n    const actors = this.currentTab === 'pc' ? \n      game.actors.contents.filter(a => this._isPlayerOwned(a)) :\n      game.actors.contents.filter(a => !this._isPlayerOwned(a) && this._hasTokenInScene(a));\n    \n    // Update selection for all visible actors\n    actors.forEach(actor => {\n      if (selectAll) {\n        this.selectedActors.add(actor.id);\n      } else {\n        this.selectedActors.delete(actor.id);\n      }\n    });\n    \n    // Re-render to update UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    LogUtil.log('Select all:', [selectAll, 'for', this.currentTab]);\n  }\n  \n  /**\n   * Check if actor is player owned\n   */\n  _isPlayerOwned(actor) {\n    // Skip non-character actors\n    if (actor.type !== 'character' && actor.type !== 'npc') return false;\n    \n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n  \n  /**\n   * Check if actor has token in current scene\n   */\n  _hasTokenInScene(actor) {\n    // Skip non-character actors\n    if (actor.type !== 'character' && actor.type !== 'npc') return false;\n    \n    const currentScene = game.scenes.active;\n    return currentScene && currentScene.tokens.some(token => token.actorId === actor.id);\n  }\n\n  /**\n   * Handle tab click\n   */\n  async _onTabClick(event) {\n    const tab = event.currentTarget.dataset.tab;\n    LogUtil.log('Tab clicked:', [tab, this.currentTab]);\n    if (tab === this.currentTab) return;\n    \n    this.currentTab = tab;\n    await this.render();\n    LogUtil.log('Switched to tab:', [tab]);\n  }\n\n  /**\n   * Handle click on actor row\n   */\n  _onActorClick(event) {\n    // Ignore if clicking on the select button itself\n    if (event.target.closest('.actor-select')) return;\n    \n    const actorElement = event.currentTarget;\n    const actorId = actorElement.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Handle click on actor select button\n   */\n  _onActorSelectClick(event) {\n    event.stopPropagation(); // Prevent triggering the actor row click\n    const actorId = event.currentTarget.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Toggle actor selection state\n   */\n  _toggleActorSelection(actorId) {\n    if (this.selectedActors.has(actorId)) {\n      this.selectedActors.delete(actorId);\n    } else {\n      this.selectedActors.add(actorId);\n    }\n    \n    // Re-render to update the UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    this._updateSelectAllState();\n    LogUtil.log('Actor selected:', [actorId, this.selectedActors.has(actorId)]);\n  }\n\n  /**\n   * Update request types visibility based on actor selection\n   */\n  _updateRequestTypesVisibility() {\n    const requestTypes = this.element.querySelector('.request-types');\n    if (this.selectedActors.size > 0) {\n      requestTypes.classList.remove('hidden');\n    } else {\n      requestTypes.classList.add('hidden');\n      // Also hide roll types if no actors selected\n      this.element.querySelector('.roll-types').classList.add('hidden');\n    }\n  }\n\n  /**\n   * Update select all checkbox state\n   */\n  _updateSelectAllState() {\n    const selectAllCheckbox = this.element.querySelector('#crlngn-actors-all');\n    const currentActors = this.currentTab === 'pc' ? 'pc' : 'npc';\n    const checkboxes = this.element.querySelectorAll(`.${currentActors}-actors .actor-item input[type=\"checkbox\"]`);\n    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;\n    \n    selectAllCheckbox.checked = checkedCount > 0 && checkedCount === checkboxes.length;\n    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n  }\n\n  /**\n   * Handle request type click\n   */\n  async _onRequestTypeClick(event) {\n    const requestItem = event.currentTarget;\n    const requestType = requestItem.dataset.requestType;\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    \n    if (!rollOption) {\n      LogUtil.error('Unknown request type:', requestType);\n      return;\n    }\n    \n    this.selectedRequestType = requestType;\n    \n    // If this type has a sublist, show roll types\n    if (rollOption.subList) {\n      await this._populateRollTypes(rollOption);\n      this.element.querySelector('.roll-types').classList.remove('hidden');\n    } else {\n      // Direct roll without sublist\n      this._triggerRoll(requestType, null);\n    }\n    \n    LogUtil.log('Request type selected:', requestType);\n  }\n\n  /**\n   * Populate roll types based on selected request type\n   */\n  async _populateRollTypes(rollOption) {\n    const rollTypesContainer = this.element.querySelector('.roll-types-list');\n    rollTypesContainer.innerHTML = '';\n    \n    // Get roll options from first selected actor as reference\n    const firstActorId = Array.from(this.selectedActors)[0];\n    const actor = game.actors.get(firstActorId);\n    \n    if (!actor) return;\n    \n    const rollData = foundry.utils.getProperty(actor, rollOption.actorPath) || {};\n    \n    for (const [key, data] of Object.entries(rollData)) {\n      const item = document.createElement('li');\n      item.className = 'roll-type-item';\n      item.dataset.rollKey = key;\n      \n      const label = data.label || game.i18n.localize(data.name || key);\n      item.innerHTML = `<span>${label}</span>`;\n      \n      rollTypesContainer.appendChild(item);\n    }\n    \n    // Re-attach listeners for new elements\n    rollTypesContainer.querySelectorAll('.roll-type-item').forEach(item => {\n      item.addEventListener('click', this._onRollTypeClick.bind(this));\n    });\n  }\n\n  /**\n   * Handle roll type click\n   */\n  _onRollTypeClick(event) {\n    const rollKey = event.currentTarget.dataset.rollKey;\n    this._triggerRoll(this.selectedRequestType, rollKey);\n    LogUtil.log('Roll type selected:', rollKey);\n  }\n\n  /**\n   * Trigger the roll (placeholder for now)\n   */\n  _triggerRoll(requestType, rollKey) {\n    const SETTINGS = getSettings();\n    const selectedActorIds = Array.from(this.selectedActors);\n    LogUtil.log('Roll triggered!', {\n      actors: selectedActorIds,\n      requestType,\n      rollKey,\n      skipDialogs: SettingsUtil.get(SETTINGS.skipDialogs.tag)\n    });\n    \n    // Close the menu after triggering\n    this.close();\n  }\n\n  /**\n   * Clean up when closing\n   */\n  async _onClose(options) {\n    await super._onClose(options);\n    \n    // Reset state\n    this.selectedActors.clear();\n    this.selectedRequestType = null;\n  }\n\n  /**\n   * Override render positioning to use CSS instead of inline styles\n   */\n  setPosition(position={}) {\n    // Don't set any inline position styles - let CSS handle it\n    return this;\n  }\n}","import { HOOKS_CORE } from \"../constants/Hooks.mjs\"; \nimport { LogUtil } from \"./LogUtil.mjs\"; \nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  static diceConfig = {};\n  static playerDiceConfigs = {};\n  static rollRequestsMenu = null;\n  static SOCKET_CALLS = {\n    receiveDiceConfig: \"receiveDiceConfig\",\n    getDiceConfig: \"getDiceConfig\"\n  };\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    // Initialize socketlib\n    SocketUtil.initialize(Main.registerSocketCalls);\n    Hooks.once(HOOKS_CORE.INIT, () => { \n      const SETTINGS = getSettings();\n      LogUtil.log(\"Initiating module...\", [], true);\n      SettingsUtil.registerSettings();\n      Main.setDiceConfig();\n      \n      // Register sidebar tab hook to add chat control\n      Hooks.on(HOOKS_CORE.RENDER_SIDEBAR_TAB, Main.addChatControl);\n    });\n\n    Hooks.once(HOOKS_CORE.READY, () => {\n      LogUtil.log(\"Core Ready\", [ui?.sidebar, ui?.sidebar?._collapsed]);\n      const SETTINGS = getSettings();\n      \n      var isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n      if(isDebugOn){CONFIG.debug.hooks = true};\n      \n      if(game.user.isGM){\n        Hooks.on(HOOKS_CORE.USER_CONNECTED, Main.onUserConnected);\n        // Only run this on the GM client\n        game.users.forEach(user => {\n          Main.onUserConnected(user);\n        });\n        Main.checkSideBar(!ui?.sidebar?._collapsed);\n      }else{\n        Main.getDiceConfig();\n      }\n    });\n  }\n\n  /**\n   * Adds or removes the sidebar-expanded class based on the isExpanded parameter\n   * @param {boolean} isExpanded \n   */\n  static checkSideBar = (isExpanded) => {\n    const body = document.querySelector(\"body\");\n    if(isExpanded){\n      body.classList.add(\"sidebar-expanded\");\n    }else{\n      body.classList.remove(\"sidebar-expanded\");\n    }\n  }\n\n  /**\n   * Request dice configuration from the connected user\n   * @param {*} user \n   * @returns \n   */\n  static onUserConnected(user) {\n    // Request dice configuration from the connected user\n    if (user.active && user.id !== game.user.id) {\n      LogUtil.log(\"onUserConnected\", [user]);\n      SocketUtil.execForUser(Main.SOCKET_CALLS.getDiceConfig, user.id);\n    }\n  }\n\n  static setDiceConfig(){\n    if(!game.user) return;\n    const clientSettings = game.settings.storage.get(\"client\"); \n    Main.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    LogUtil.log(`getDiceConfig`, [Main.diceConfig]);\n    return Main.diceConfig;\n  }\n  \n  // Add the getDiceConfig method that will be called on the player's client\n  static getDiceConfig() { \n    if(!game.user) return;\n    Main.setDiceConfig();\n    \n    if(game.user.isGM) {\n      SocketUtil.execForGMs(Main.SOCKET_CALLS.receiveDiceConfig, game.user.id, Main.diceConfig);\n      return;\n    }\n  }\n\n  // Add the receiveDiceConfig method that will be called on the GM's client\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId===game.user.id){ // for GM or own user\n      // Store the dice configuration for this user\n      if (!Main.playerDiceConfigs) Main.playerDiceConfigs = {};\n      Main.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n      \n      LogUtil.log(`Received dice configuration from user ${userId}`, [Main.playerDiceConfigs]);\n    }\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(Main.SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(Main.SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n  }\n\n  /**\n   * Add the roll request icon to chat controls\n   * @param {SidebarTab} app - The sidebar tab application\n   * @param {jQuery} html - The rendered HTML\n   * @param {Object} options - Render options\n   */\n  static addChatControl(app, html, options) {\n    // Only add to chat tab for GM users\n    if (!game.user.isGM || app.id !== \"chat\") return;\n    \n    LogUtil.log(\"Adding chat control for chat tab\");\n    \n    // Get the HTML element from jQuery object\n    const htmlElement = html[0] || html;\n    \n    // Find the chat controls container\n    const chatControls = htmlElement.querySelector(\"#chat-controls\");\n    \n    if (!chatControls) {\n      LogUtil.log(\"Could not find #chat-controls\");\n      return;\n    }\n    \n    // Check if icon already exists\n    if (chatControls.querySelector('.roll-requests-icon')) {\n      return;\n    }\n    \n    // Get current settings to determine initial state\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Create the roll request icon\n    const rollRequestIcon = document.createElement('a');\n    rollRequestIcon.id = \"crlngn-requests-icon\";\n    rollRequestIcon.setAttribute(\"data-tooltip-direction\", \"RIGHT\");\n    rollRequestIcon.className = `chat-control-icon roll-requests-icon${rollRequestsEnabled ? ' active' : ''}`;\n    rollRequestIcon.title = game.i18n.localize('CRLNGN_ROLLS.ui.menus.rollRequestsTitle');\n    rollRequestIcon.innerHTML = `<i class=\"fas fa-bolt${rollRequestsEnabled ? '' : '-slash'}\"></i>`;\n    \n    // Find the first .chat-control-icon (the d20 dice icon)\n    const firstChatControlIcon = chatControls.querySelector('.chat-control-icon');\n    \n    if (firstChatControlIcon) {\n      // Insert before the d20 dice icon\n      firstChatControlIcon.parentNode.insertBefore(rollRequestIcon, firstChatControlIcon);\n    } else {\n      // If no chat-control-icon found, append to chat controls\n      chatControls.appendChild(rollRequestIcon);\n    }\n    \n    // Add click listener\n    rollRequestIcon.addEventListener(\"click\", Main.toggleRollRequestsMenu);\n    \n    LogUtil.log(\"Added roll requests icon to chat controls\");\n  }\n\n  /**\n   * Toggle the roll requests menu open/closed\n   */\n  static toggleRollRequestsMenu() {\n    if (!Main.rollRequestsMenu) {\n      Main.rollRequestsMenu = new RollRequestsMenu();\n      Main.rollRequestsMenu.render(true);\n    } else {\n      // Toggle visibility of existing menu\n      if (Main.rollRequestsMenu.rendered) {\n        Main.rollRequestsMenu.close();\n        LogUtil.log(\"Closed roll requests menu\");\n      } else {\n        Main.rollRequestsMenu.render(true);\n        LogUtil.log(\"Opened roll requests menu\");\n      }\n    }\n  }\n\n  /**\n   * Update the roll requests icon based on enabled state\n   */\n  static updateRollRequestsIcon(enabled) {\n    const icon = document.querySelector('#crlngn-requests-icon i');\n    if (icon) {\n      icon.className = `fas fa-bolt${enabled ? '' : '-slash'}`;\n    }\n  }\n\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\n// Initialize the module\nMain.init();\n"],"names":["HOOKS_CORE","HOOKS_SOCKET","MODULE_ID","DEBUG_TAG","ROLL_REQUEST_OPTIONS","MODULE","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","__publicField","LogUtil","SETTING_INPUT","SETTING_SCOPE","getSettings","SettingsUtil","SETTINGS","entry","setting","settingObj","value","settingName","moduleName","selectedSetting","newValue","requestsIcon","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","e","name","func","callback","handler","parameters","userId","executionKey","resp","error","SocketUtil","RollRequestsMenu","context","actors","pcActors","npcActors","currentScene","actor","actorData","level","user","token","rollRequestsEnabled","skipDialogs","currentActors","selectAllOn","_b","_c","_d","_e","system","stats","html","tabs","tab","selectBtn","item","event","enabled","Main","skip","selectAll","a","actorId","requestTypes","selectAllCheckbox","checkboxes","checkedCount","cb","requestType","rollOption","rollTypesContainer","firstActorId","rollData","key","label","rollKey","selectedActorIds","position","_Main","isDebugOn","clientSettings","diceConfig","app","chatControls","rollRequestIcon","firstChatControlIcon","icon","isExpanded","body"],"mappings":"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"}