{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Hooks.mjs","../../src/constants/General.mjs","../../src/components/LogUtil.mjs","../../src/constants/Settings.mjs","../../src/components/SettingsUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/ActivityUtil.mjs","../../src/components/GMRollConfigDialog.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/RollInterceptor.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  RENDER_SIDEBAR_TAB: \"renderSidebarTab\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheckV2\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrowV2\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheckV2\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrowV2\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cFlash Rolls 5e`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", requestType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", requestType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", requestType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", requestType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", requestType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", requestType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" }, // Recharge rolls\n\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" }, // D20 test\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" }, // Short rest\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" }, // Long rest\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: \"abilityCheck\", label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: \"savingThrow\", label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SKILL: { name: \"skill\", label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: \"tool\", label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: \"concentration\", label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: \"initiativeDialog\", label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: \"deathSave\", label: \"Death Save\", subList: null, actorPath: '' },\n  CUSTOM: { name: \"custom\", label: \"Custom Roll\", subList: null, actorPath: '' },\n  // HIT_DIE: { name: \"hitDie\", label: \"Hit Die\", subList: null, actorPath: '' }\n}\n\n/**\n * Module configuration object\n * @constant\n * @type {Object}\n */\nexport const MODULE = {\n  ID: MODULE_ID,\n  ROLL_REQUEST_OPTIONS: ROLL_REQUEST_OPTIONS\n}\n","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debug-mode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      // If settings aren't available yet, check bypassSettings\n      if (bypassSettings || LogUtil.debugOn) {\n        console.log(...DEBUG_TAG, ref, ...data);\n      }\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n}","export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    skipDialogs: {\n      tag: \"skip-dialogs\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    rollInterceptionEnabled: {\n      tag: \"roll-interception-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    showOfflineNotifications: {\n      tag: \"show-offline-notifications\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n      LogUtil.log(\"Registering... \",[entry]);\n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined || SettingsUtil.get(setting.tag)===null){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n      LogUtil.log(\"registerSettings\",[setting.tag, SettingsUtil.get(setting.tag)]);\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n      LogUtil.log(\"GET Setting\", [selectedSetting, setting]);\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n    LogUtil.log(\"Setting\",[settingName, selectedSetting]);\n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n      LogUtil.log(\"Unable to change setting\",[settingName, selectedSetting]);\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsEnabled(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsEnabled(newValue){\n    const requestsIcon = document.querySelector(\"#chat-controls .chat-control-icon.roll-requests-icon\");\n    if(!requestsIcon){ return; }\n    \n    if(newValue){\n      requestsIcon.classList.add(\"active\");\n    }else{\n      requestsIcon.classList.remove(\"active\");\n    }\n  }\n}\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      LogUtil.log('Attempting to register module...', []);\n\n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n        LogUtil.log(`SocketUtil | Module registered`, [SocketUtil.socket]);\n      } catch (e) {\n          LogUtil.log(`Problem registering module`, [e]);\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n      LogUtil.log(`SocketUtil - Registered callback`, [SocketUtil.socket, name]);\n    } else {\n      LogUtil.log(`SocketUtil - Failed to register callback (socket not initialized)`, [SocketUtil.socket, name]);\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log(`SocketUtil - sendMessage`, [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as GM.\", []);\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute for all clients.\", []);\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    if (!SocketUtil.socket) {\n        LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as user.\", []);\n        return;\n    }\n\n    if(userId === game.user.id){\n      LogUtil.log(\"SocketUtil - Preventing recursive call\", [userId]);\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        LogUtil.log(\"SocketUtil - Preventing recursive call\", [executionKey]);\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n        const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n        LogUtil.log(\"SocketUtil - Executed as user.\", [resp]);\n        return resp;\n    } catch (error) {\n        LogUtil.log(\"SocketUtil - Error executing as user\", [error]);\n        return null;\n    } finally {\n        // Always clean up, even if there was an error\n        SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    LogUtil.log(\"ROLLS DATA\", [data, data.subject]);\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { LogUtil } from './LogUtil.mjs';\n\n/**\n * Utility class for handling D&D5e 4.x activities\n */\nexport class ActivityUtil {\n  \n  /**\n   * Find the appropriate activity for a given roll type on an item\n   * @param {Item5e} item - The item to search for activities\n   * @param {string} rollType - The type of roll (attack, damage, itemSave)\n   * @returns {Activity5e|null} - The found activity or null\n   */\n  static findActivityForRoll(item, rollType) {\n    if (!item?.system?.activities) return null;\n    \n    const activities = item.system.activities;\n    \n    switch (rollType) {\n      case 'attack':\n        // For attack rolls, find attack activities\n        const attackActivities = activities.getByType(\"attack\");\n        return attackActivities?.[0] || null;\n        \n      case 'damage':\n        // For damage rolls, check attack activities first, then damage, then save\n        const damageAttackActivities = activities.getByType(\"attack\");\n        if (damageAttackActivities?.length > 0) return damageAttackActivities[0];\n        \n        const damageActivities = activities.getByType(\"damage\");\n        if (damageActivities?.length > 0) return damageActivities[0];\n        \n        const saveActivities = activities.getByType(\"save\");\n        if (saveActivities?.length > 0) return saveActivities[0];\n        \n        return null;\n        \n      case 'itemSave':\n        // For save activities\n        const itemSaveActivities = activities.getByType(\"save\");\n        return itemSaveActivities?.[0] || null;\n        \n      default:\n        return null;\n    }\n  }\n  \n  /**\n   * Get all activities of a specific type from an item\n   * @param {Item5e} item - The item to search\n   * @param {string} activityType - The activity type (attack, damage, save, etc.)\n   * @returns {Activity5e[]} - Array of activities\n   */\n  static getActivitiesByType(item, activityType) {\n    if (!item?.system?.activities) return [];\n    return item.system.activities.getByType(activityType);\n  }\n  \n  /**\n   * Check if an item has activities suitable for a given roll type\n   * @param {Item5e} item - The item to check\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} - Whether the item has suitable activities\n   */\n  static hasActivityForRoll(item, rollType) {\n    return !!this.findActivityForRoll(item, rollType);\n  }\n  \n  /**\n   * Execute a roll using the appropriate activity method\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {string} itemId - The item ID\n   * @param {string} activityId - The activity ID (optional)\n   * @param {Object} config - Roll configuration\n   */\n  static async executeActivityRoll(actor, rollType, itemId, activityId, config) {\n    const item = actor.items.get(itemId);\n    if (!item) {\n      throw new Error(`Item ${itemId} not found on actor ${actor.name}`);\n    }\n    \n    let activity = null;\n    \n    // If activity ID provided, use it directly\n    if (activityId) {\n      activity = item.system.activities?.get(activityId);\n      if (!activity) {\n        LogUtil.log('ActivityUtil.executeActivityRoll', ['Activity not found by ID, falling back to search', {\n          activityId,\n          itemName: item.name,\n          availableActivities: item.system.activities?.map(a => ({ id: a.id, type: a.type }))\n        }]);\n      }\n    }\n    \n    // If no activity found yet, search by roll type\n    if (!activity) {\n      activity = this.findActivityForRoll(item, rollType);\n    }\n    \n    // Execute the roll based on type\n    if (activity) {\n      LogUtil.log('ActivityUtil.executeActivityRoll', ['Executing activity roll', {\n        rollType,\n        activityId,\n        itemName: item.name,\n        activityType: activity.type\n      }]);\n      switch (rollType) {\n        case 'attack':\n          LogUtil.log('ActivityUtil.executeActivityRoll', ['Executing attack roll', {\n            hasTargets: game.user.targets.size > 0,\n            targetCount: game.user.targets.size,\n            skipDialog: config.fastForward,\n            isRollRequest: config.isRollRequest,\n            isGM: game.user.isGM\n          }]);\n          // For attack activities, use the activity's use() method which handles the full flow\n          // The activity will automatically use game.user.targets for targeting\n          \n          // IMPORTANT: For players receiving roll requests, ALWAYS show the dialog\n          const dialogConfig = {\n            configure: true  // Always true for players receiving roll requests\n          };\n \n          if(MidiQOL) {\n            const workflow = await ActivityUtil.syntheticItemRoll(item, {\n              ...config\n              // checkGMstatus: false\n            });\n            LogUtil.log('ActivityUtil.executeActivityRoll', ['MidiQOL', MidiQOL, activityId, MidiQOL?.Workflow?.getWorkflow(activity.uuid)]);\n            return;\n          }else{\n            return await activity.use(usageConfig, dialogConfig);\n          }\n          // \n        case 'damage':\n          if(MidiQOL) {\n            const workflow = MidiQOL?.Workflow?.getWorkflow(activity.uuid);\n            const damageRoll = await workflow.activity.rollDamage({\n              ...config,\n              workflow: workflow\n            });\n            // await workflow.setDamageRolls([damageRoll]);\n            // workflow.displayDamageRolls();\n            \n            // const damageRoll = await ActivityUtil.replaceDamage(workflow, ActivityUtil.getDamageFormula(activity));\n            LogUtil.log('ActivityUtil.executeActivityRoll', ['MidiQOL / Damage', damageRoll]);\n            \n            return;\n          }else{\n            return await activity.rollDamage(config);\n            // return await activity.use(usageConfig, dialogConfig);\n          }\n          \n          \n        case 'itemSave':\n          // For save activities, use the item's use() method to show the save card\n          return await item.use({ activity: activity.id }, { skipDialog: config.fastForward });\n          \n        default:\n          throw new Error(`Unknown roll type: ${rollType}`);\n      }\n    } else {\n      // Fallback to legacy methods if no activity found\n      LogUtil.log('ActivityUtil.executeActivityRoll', ['No activity found, using legacy methods', {\n        rollType,\n        itemName: item.name,\n        hasLegacyMethod: !!(item.rollAttack || item.rollDamage)\n      }]);\n      \n      switch (rollType) {\n        case 'attack':\n          if (item.rollAttack) {\n            return await item.rollAttack(config);\n          }\n          break;\n          \n        case 'damage':\n          if (item.rollDamage) {\n            return await item.rollDamage(config);\n          }\n          break;\n          \n        case 'itemSave':\n          // Try to use the item directly\n          return await item.use({}, { skipDialog: config.fastForward });\n      }\n      \n      throw new Error(`No suitable method found for ${rollType} on item ${item.name}`);\n    }\n  }\n  \n  /**\n   * Get display information for an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {Object} - Display information\n   */\n  static getActivityDisplayInfo(activity) {\n    if (!activity) return null;\n    \n    return {\n      name: activity.name || activity.constructor.metadata.label,\n      type: activity.type,\n      icon: activity.constructor.metadata.icon,\n      canAttack: activity.type === 'attack',\n      canDamage: ['attack', 'damage', 'save'].includes(activity.type),\n      canSave: activity.type === 'save'\n    };\n  }\n  \n  /**\n   * Get damage formula string from an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {string|null} - Combined damage formula or null\n   */\n  static getDamageFormula(activity) {\n    if (!activity?.damage?.parts?.length) return null;\n    \n    // Extract all damage formulas and combine them\n    const formulas = activity.damage.parts.map(part => part.formula).filter(f => f);\n    return formulas.length > 0 ? formulas.join(' + ') : null;\n  }\n\n  static async syntheticItemRoll(item, config = {}) {\n    let defaultConfig = {\n        consumeUsage: false,\n        consumeSpellSlot: false\n    };\n    // let autoRollDamage = MidiQOL.configSettings().autoRollDamage;\n    // if (!['always', 'onHit'].includes(autoRollDamage)) autoRollDamage = 'none';\n    let defaultOptions = {\n      // targetUuids: targets.map(i => i.document.uuid),\n      configureDialog: true,\n      // ignoreUserTargets: true,\n      workflowOptions: {\n        autoRollAttack: false,\n        autoFastAttack: false,\n        autoRollDamage: 'none',\n        autoFastDamage: false\n      }\n    };\n\n    // options = genericUtils.mergeObject(defaultOptions, options);\n    config = {...defaultConfig, ...config};\n    LogUtil.log('ActivityUtil.syntheticItemRoll', ['Executing synthetic item roll', item, config]);\n    return await MidiQOL.completeItemUse(item, config, defaultOptions);\n  }\n\n  static async replaceDamage(workflow, formula, {ignoreCrit = false, damageType} = {}) {\n    formula = String(formula);\n    if (workflow.isCritical && !ignoreCrit) formula = await rollUtils.getCriticalFormula(formula, workflow.item.getRollData());\n    // let roll = await workflow.activity.rollDamage();\n    let roll = await new CONFIG.Dice.DamageRoll(formula).evaluate();\n    // let damageType = workflow.activity.damage.parts[0].types.first();\n    // // let roll = await new Roll(formula).roll({async: true});\n    // if (damageType) {\n    //   foundry.utils.setProperty(roll, 'options.type', damageType);\n    // } else {\n    //   foundry.utils.setProperty(roll, 'options.type', roll.terms[0].flavor);\n    // }\n    await workflow.setDamageRolls([roll]);\n    LogUtil.log('ActivityUtil.replaceDamage', ['Replaced damage', formula, roll, workflow.activity]);\n    \n    return roll;\n  }\n}","import { LogUtil } from \"./LogUtil.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * GM Roll Configuration Dialog\n * Extends the standard D&D5e roll configuration dialogs to add DC field and send request toggle\n */\nexport class GMRollConfigDialog extends dnd5e.applications.dice.D20RollConfigurationDialog {\n  constructor(config = {}, message = {}, options = {}) {\n    LogUtil.log('GMRollConfigDialog.constructor', ['Creating dialog', {\n      config,\n      message,\n      options\n    }]);\n    \n    // Ensure rollType is set in options\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    \n    // D20RollConfigurationDialog expects (config, message, options)\n    super(config, message, options);\n    \n    // Store GM-specific options\n    this.actors = options.actors || [];\n    this.sendRequest = options.sendRequest !== false;\n    this.showDC = options.showDC || false;\n    this.dcValue = options.dcValue || null;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for a roll.\n   * Extends parent to add DC and send request options\n   * @param {D20Roll} roll    The roll being configured.\n   * @param {object} [config] Configuration for the roll.\n   * @param {object} [dialog] Configuration for the dialog.\n   * @param {object} [message] Configuration for the chat message.\n   * @returns {object}\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context that is provided to all rendered parts.\n   * Extends parent to add DC field context\n   * @param {ApplicationRenderOptions} options  Render options provided to the render method.\n   * @returns {object}\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _onRender(context, options) {\n    super._onRender(context, options);\n    \n    LogUtil.log('GMRollConfigDialog._onRender', ['Dialog rendered', {\n      config: this.config,\n      actors: this.actors,\n      showDC: this.showDC,\n      sendRequest: this.sendRequest,\n      element: this.element\n    }]);\n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      LogUtil.log('GMRollConfigDialog._onRender', ['Fields already injected, skipping']);\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas').parentNode;\n    // }\n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons\n   * @private\n   */\n  _attachButtonListeners() {\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n        LogUtil.log('GMRollConfigDialog button clicked', [action, {\n          currentAdvantage: this.config.advantage,\n          currentDisadvantage: this.config.disadvantage,\n          config: this.config\n        }]);\n      });\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _onChangeForm(formConfig, event) {\n    super._onChangeForm(formConfig, event);\n    \n    // Capture the current state of our custom fields before re-render\n    const sendRequestCheckbox = this.element.querySelector('input[name=\"crlngn-send-request\"]');\n    if (sendRequestCheckbox) {\n      this.sendRequest = sendRequestCheckbox.checked;\n    }\n    \n    const dcInput = this.element.querySelector('input[name=\"dc\"]');\n    if (dcInput && dcInput.value) {\n      this.dcValue = parseInt(dcInput.value) || null;\n    }\n    \n    LogUtil.log('GMRollConfigDialog._onChangeForm', ['Form changed', {\n      targetName: event.target?.name,\n      targetValue: event.target?.value,\n      sendRequest: this.sendRequest,\n      dcValue: this.dcValue,\n      config: this.config,\n      message: this.message,\n      rolls: this.rolls,\n      firstRoll: this.rolls?.[0],\n      firstRollData: this.rolls?.[0]?.data,\n      firstRollOptions: this.rolls?.[0]?.options\n    }]);\n  }\n  \n  /**\n   * Override _buildConfig to log what's happening\n   * @protected\n   */\n  _buildConfig(config, formData, index) {\n    // Extract ability from form data if present (for skill/tool dialogs)\n    const abilityFromForm = formData?.get(\"ability\");\n    const dcFromForm = formData?.get(\"dc\");\n    \n    LogUtil.log('GMRollConfigDialog._buildConfig', ['Building config', {\n      configBefore: config,\n      formData: formData ? Object.fromEntries(formData) : null,\n      index,\n      situationalValue: formData?.get(`roll.${index}.situational`),\n      abilityFromForm\n    }]);\n    \n    // If ability is in form data, update the config\n    if (abilityFromForm) {\n      config.ability = abilityFromForm;\n      // Also update this.config.ability to persist the selection\n      this.config.ability = abilityFromForm;\n    }\n    \n    const result = super._buildConfig(config, formData, index);\n    \n    // Apply DC if we have one\n    if (dcFromForm) {\n      const dcValue = parseInt(dcFromForm);\n      if (!isNaN(dcValue)) {\n        result.options = result.options || {};\n        result.options.target = dcValue;\n      }\n    } else if (this.dcValue !== undefined && this.dcValue !== null) {\n      result.options = result.options || {};\n      result.options.target = this.dcValue;\n    }\n    \n    LogUtil.log('GMRollConfigDialog._buildConfig', ['Config built', {\n      configAfter: result,\n      parts: result.parts,\n      data: result.data,\n      options: result.options,\n      finalAbility: config.ability\n    }]);\n    \n    return result;\n  }\n  \n  /**\n   * Process form submission.\n   * @param {SubmitEvent} event             The originating form submission event.\n   * @param {HTMLFormElement} form          The form element that was submitted.\n   * @param {FormDataExtended} formData     Processed data for the submitted form.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _processSubmitData(event, form, formData) {\n    LogUtil.log('GMRollConfigDialog._processSubmitData', ['Processing form data', {\n      formData: Object.fromEntries(formData),\n      configBefore: this.config\n    }]);\n    \n    await super._processSubmitData(event, form, formData);\n    \n    // Extract DC value if present\n    if (formData.has(\"dc\") && formData.get(\"dc\") !== \"\") {\n      const dcValue = parseInt(formData.get(\"dc\"));\n      if (!isNaN(dcValue)) {\n        // Store DC value to apply later\n        this.dcValue = dcValue;\n        \n        // Try to add DC to all rolls as target if they exist\n        if (this.config.rolls && this.config.rolls.length > 0) {\n          for (const roll of this.config.rolls) {\n            roll.options.target = dcValue;\n          }\n        }\n      }\n    }\n    \n    // Store send request preference\n    this.sendRequest = formData.get(\"crlngn-send-request\") !== \"false\";\n  }\n  \n  /**\n   * Finalize the rolls and handle the results.\n   * @param {string} action     The action button that was clicked\n   * @returns {D20Roll[]}\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    LogUtil.log('GMRollConfigDialog._finalizeRolls', ['Finalizing rolls', {\n      action,\n      rolls: this.rolls,\n      config: this.config\n    }]);\n    \n    // Let parent handle advantage/disadvantage mode\n    const finalizedRolls = super._finalizeRolls(action);\n    \n    // Apply DC if we have one stored\n    if (this.dcValue !== undefined && this.dcValue !== null) {\n      for (const roll of finalizedRolls) {\n        roll.options.target = this.dcValue;\n      }\n    }\n    \n    // Store our custom properties\n    this.config.sendRequest = this.sendRequest;\n    \n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the dialog\n   * @param {Actor[]} actors - The actors to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {object} options - Additional options\n   * @returns {Promise<object|null>} The configured roll data or null if cancelled\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    LogUtil.log('GMRollConfigDialog.getConfiguration', ['Starting configuration', {\n      actors: actors.map(a => a.name),\n      rollType,\n      rollKey,\n      options\n    }]);\n    \n    // Determine if we should show DC field\n    const showDC = ['skill', 'save', 'savingThrow', 'ability', 'abilityCheck', 'concentration'].includes(rollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Determine the appropriate roll class based on roll type\n    let rollClass = CONFIG.Dice.D20Roll;\n    if (['damage', 'healing'].includes(rollType)) {\n      rollClass = CONFIG.Dice.DamageRoll || CONFIG.Dice.BasicRoll;\n    } else if (['formula', 'custom'].includes(rollType)) {\n      rollClass = CONFIG.Dice.BasicRoll;\n    }\n    \n    // Fallback to D20Roll if class not found\n    if (!rollClass) {\n      LogUtil.log('GMRollConfigDialog.getConfiguration', ['Roll class not found, using D20Roll', { rollType }]);\n      rollClass = CONFIG.Dice.D20Roll;\n    }\n    \n    LogUtil.log('GMRollConfigDialog.getConfiguration', ['Determined roll class', {\n      rollType,\n      rollClass,\n      rollClassName: rollClass?.name,\n      availableRollClasses: Object.keys(CONFIG.Dice)\n    }]);\n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add roll-specific data\n    switch (rollType) {\n      case 'skill':\n        rollConfig.skill = rollKey;\n        break;\n      case 'save':\n      case 'savingThrow':\n        rollConfig.ability = rollKey;\n        break;\n      case 'ability':\n      case 'abilityCheck':\n        rollConfig.ability = rollKey;\n        break;\n    }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => this._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        window: {\n          title: GMRollConfigDialog._getRollTitle(rollType, rollKey, actor),\n          subtitle: actors.map(a => a.name).join(\", \")\n        },\n        ...options\n      }\n    };\n    \n    // Create and render the dialog\n    LogUtil.log('GMRollConfigDialog.getConfiguration', ['Creating dialog with config', {\n      rollConfig,\n      messageConfig,\n      dialogConfig,\n      rollType,\n      rollKey,\n      actors: actors.map(a => a.name)\n    }]);\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    LogUtil.log('GMRollConfigDialog.getConfiguration', ['Dialog result', result]);\n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Build return configuration with only modified properties\n    const finalConfig = {\n      chatMessage: true,\n      isRollRequest: true,\n      skipDialog: options.skipDialogs || false,\n      sendRequest: result.sendRequest\n    };\n    \n    // Only add properties that were actually changed from defaults\n    if (advantage) finalConfig.advantage = true;\n    if (disadvantage) finalConfig.disadvantage = true;\n    \n    // Check if rollMode differs from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      finalConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add situational bonus if provided\n    // Check both options.situational and data.situational\n    const situational = firstRoll?.options?.situational || firstRoll?.data?.situational || \"\";\n    if (situational) {\n      finalConfig.situational = situational;\n      finalConfig.parts = [situational];\n    }\n    \n    // Add DC if provided\n    if (firstRoll?.options?.target) {\n      finalConfig.target = firstRoll.options.target;\n    }\n    \n    // Add ability for skills/tools if it was selected and differs from default\n    if (result.config.ability && ['skill', 'tool'].includes(rollType)) {\n      // Check if this differs from the default ability for this skill/tool\n      const defaultAbility = actor.system.skills?.[rollKey]?.ability || CONFIG.DND5E.skills?.[rollKey]?.ability;\n      if (result.config.ability !== defaultAbility) {\n        finalConfig.ability = result.config.ability;\n      }\n    }\n    \n    // Add the roll title from the dialog window\n    finalConfig.rollTitle = dialogConfig.options.window.title;\n    \n    LogUtil.log('GMRollConfigDialog.getConfiguration', ['Final configuration', {\n      rollType,\n      rollKey,\n      finalConfig\n    }]);\n    \n    return finalConfig;\n  }\n  \n  /**\n   * Check if actor is player owned\n   * @private\n   */\n  static _isPlayerOwned(actor) {\n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n  \n  /**\n   * Get a formatted title for the roll type\n   * @private\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {Actor} actor - The actor (used to get default ability for skills)\n   * @returns {string} The formatted title\n   */\n  static _getRollTitle(rollType, rollKey, actor) {\n    let title = \"\";\n    \n    switch (rollType) {\n      case 'skill':\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        // Get the default ability for this skill\n        const skill = actor?.system.skills?.[rollKey];\n        const defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n        const abilityLabel = CONFIG.DND5E.abilities[defaultAbility]?.label || defaultAbility;\n        // D&D5e format: \"Wisdom (Arcana) Check\"\n        title = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: abilityLabel \n        });\n        break;\n      case 'save':\n      case 'savingThrow':\n        const saveAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.SavePromptTitle\", { ability: saveAbility });\n        break;\n      case 'ability':\n      case 'abilityCheck':\n        const checkAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.AbilityPromptTitle\", { ability: checkAbility });\n        break;\n      case 'concentration':\n        title = game.i18n.localize(\"DND5E.Concentration\");\n        break;\n      case 'tool':\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        title = game.i18n.format(\"DND5E.ToolPromptTitle\", { tool: toolLabel });\n        break;\n      case 'deathsave':\n      case 'deathSave':\n        title = game.i18n.localize(\"DND5E.DeathSave\");\n        break;\n      case 'initiative':\n      case 'initiativeDialog':\n        title = game.i18n.localize(\"DND5E.Initiative\");\n        break;\n      default:\n        title = game.i18n.localize(\"DND5E.Roll\");\n    }\n    \n    return title;\n  }\n}\n\n/**\n * GM Skill/Tool Configuration Dialog\n * Extends SkillToolRollConfigurationDialog for ability selection\n */\nexport class GMSkillToolConfigDialog extends dnd5e.applications.dice.SkillToolRollConfigurationDialog {\n  constructor(config = {}, message = {}, options = {}) {\n    // Force ability selection\n    const skillConfig = foundry.utils.mergeObject(config, {\n      chooseAbility: true\n    });\n    \n    // Ensure rollType is set in options\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    \n    // SkillToolRollConfigurationDialog expects (config, message, options)\n    super(skillConfig, message, options);\n    \n    // Store GM-specific options\n    this.actors = options.actors || [];\n    this.sendRequest = options.sendRequest !== false;\n    this.showDC = options.showDC || false;\n    this.dcValue = options.dcValue || null;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _onRender(context, options) {\n    super._onRender(context, options);\n    \n    LogUtil.log('GMRollConfigDialog._onRender', ['Dialog rendered', {\n      config: this.config,\n      actors: this.actors,\n      showDC: this.showDC,\n      sendRequest: this.sendRequest,\n      element: this.element\n    }]);\n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      LogUtil.log('GMRollConfigDialog._onRender', ['Fields already injected, skipping']);\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    // Try multiple selectors to find the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas fieldset');\n    // }\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('fieldset').parentNode;\n    // }\n    \n    LogUtil.log('GMRollConfigDialog._onRender', ['Looking for config section', {\n      configSection: configSection,\n      showDC: this.showDC,\n      element: this.element,\n      allFieldsets: this.element.querySelectorAll('fieldset').length\n    }]);\n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons\n   * @private\n   */\n  _attachButtonListeners() {\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n        LogUtil.log('GMRollConfigDialog button clicked', [action, {\n          currentAdvantage: this.config.advantage,\n          currentDisadvantage: this.config.disadvantage,\n          config: this.config\n        }]);\n      });\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _onChangeForm(formConfig, event) {\n    super._onChangeForm(formConfig, event);\n    \n    // Capture the current state of our custom fields before re-render\n    const sendRequestCheckbox = this.element.querySelector('input[name=\"crlngn-send-request\"]');\n    if (sendRequestCheckbox) {\n      this.sendRequest = sendRequestCheckbox.checked;\n    }\n    \n    const dcInput = this.element.querySelector('input[name=\"dc\"]');\n    if (dcInput && dcInput.value) {\n      this.dcValue = parseInt(dcInput.value) || null;\n    }\n    \n    // If ability selection changed, update the config\n    if (event.target?.name === \"ability\" && event.target?.value) {\n      this.config.ability = event.target.value;\n      LogUtil.log('GMSkillToolConfigDialog._onChangeForm', ['Ability selection changed', {\n        newAbility: event.target.value,\n        previousAbility: this.config.ability\n      }]);\n    }\n    \n    LogUtil.log('GMSkillToolConfigDialog._onChangeForm', ['Form changed', {\n      targetName: event.target?.name,\n      targetValue: event.target?.value,\n      sendRequest: this.sendRequest,\n      dcValue: this.dcValue,\n      config: this.config,\n      ability: this.config.ability,\n      message: this.message,\n      rolls: this.rolls,\n      firstRoll: this.rolls?.[0],\n      firstRollData: this.rolls?.[0]?.data,\n      firstRollOptions: this.rolls?.[0]?.options\n    }]);\n  }\n  \n  /**\n   * Override _buildConfig to log what's happening\n   * @protected\n   */\n  _buildConfig(config, formData, index) {\n    // Extract ability from form data if present\n    const abilityFromForm = formData?.get(\"ability\");\n    const dcFromForm = formData?.get(\"dc\");\n    \n    LogUtil.log('GMSkillToolConfigDialog._buildConfig', ['Building config', {\n      configBefore: config,\n      formData: formData ? Object.fromEntries(formData) : null,\n      index,\n      situationalValue: formData?.get(`roll.${index}.situational`),\n      abilityFromForm,\n      dcFromForm,\n      configAbility: config.ability,\n      thisConfigAbility: this.config.ability,\n      thisDcValue: this.dcValue\n    }]);\n    \n    // If ability is in form data, update the config\n    if (abilityFromForm) {\n      config.ability = abilityFromForm;\n      // Also update this.config.ability to persist the selection\n      this.config.ability = abilityFromForm;\n    }\n    \n    const result = super._buildConfig(config, formData, index);\n    \n    // Apply DC if we have one\n    if (dcFromForm) {\n      const dcValue = parseInt(dcFromForm);\n      if (!isNaN(dcValue)) {\n        result.options = result.options || {};\n        result.options.target = dcValue;\n        LogUtil.log('GMSkillToolConfigDialog._buildConfig', ['Applied DC to config', {\n          dcValue,\n          resultOptions: result.options\n        }]);\n      }\n    } else if (this.dcValue !== undefined && this.dcValue !== null) {\n      result.options = result.options || {};\n      result.options.target = this.dcValue;\n      LogUtil.log('GMSkillToolConfigDialog._buildConfig', ['Applied stored DC to config', {\n        dcValue: this.dcValue,\n        resultOptions: result.options\n      }]);\n    }\n    \n    LogUtil.log('GMSkillToolConfigDialog._buildConfig', ['Config built', {\n      configAfter: result,\n      parts: result.parts,\n      data: result.data,\n      options: result.options,\n      finalAbility: config.ability\n    }]);\n    \n    return result;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _processSubmitData(event, form, formData) {\n    LogUtil.log('GMRollConfigDialog._processSubmitData', ['Processing form data', {\n      formData: Object.fromEntries(formData),\n      configBefore: this.config\n    }]);\n    \n    await super._processSubmitData(event, form, formData);\n    \n    // Extract DC value if present\n    if (formData.has(\"dc\") && formData.get(\"dc\") !== \"\") {\n      const dcValue = parseInt(formData.get(\"dc\"));\n      if (!isNaN(dcValue)) {\n        // Store DC value to apply later\n        this.dcValue = dcValue;\n        \n        // Try to add DC to all rolls as target if they exist\n        if (this.config.rolls && this.config.rolls.length > 0) {\n          for (const roll of this.config.rolls) {\n            roll.options.target = dcValue;\n          }\n        }\n      }\n    }\n    \n    // Store send request preference\n    this.sendRequest = formData.get(\"crlngn-send-request\") !== \"false\";\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _finalizeRolls(action) {\n    LogUtil.log('GMSkillToolConfigDialog._finalizeRolls', ['Finalizing rolls', {\n      action,\n      rolls: this.rolls,\n      config: this.config\n    }]);\n    \n    // Let parent handle advantage/disadvantage mode\n    const finalizedRolls = super._finalizeRolls(action);\n    \n    // Apply DC if we have one stored\n    if (this.dcValue !== undefined && this.dcValue !== null) {\n      for (const roll of finalizedRolls) {\n        roll.options.target = this.dcValue;\n      }\n    }\n    \n    // Store our custom properties\n    this.config.sendRequest = this.sendRequest;\n    \n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the dialog\n   * @param {Actor[]} actors - The actors to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {object} options - Additional options\n   * @returns {Promise<object|null>} The configured roll data or null if cancelled\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    // Determine if we should show DC field\n    const showDC = ['skill', 'tool'].includes(rollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Skills and tools always use D20Roll\n    const rollClass = CONFIG.Dice.D20Roll;\n    \n    // Get the default ability for the skill or tool\n    let defaultAbility = null;\n    if (rollType === 'skill') {\n      const skill = actor.system.skills[rollKey];\n      defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n    } else if (rollType === 'tool') {\n      // For tools, check if the actor has a specific ability set for this tool\n      const tool = actor.system.tools?.[rollKey];\n      defaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n    }\n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      ability: defaultAbility,\n      chooseAbility: true,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add the appropriate property for skill or tool\n    if (rollType === 'skill') {\n      rollConfig.skill = rollKey;\n    } else if (rollType === 'tool') {\n      rollConfig.tool = rollKey;\n    }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => GMRollConfigDialog._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        window: {\n          title: GMRollConfigDialog._getRollTitle(rollType, rollKey, actor),\n          subtitle: actors.map(a => a.name).join(\", \")\n        },\n        ...options\n      }\n    };\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    LogUtil.log('GMRollConfigDialog.getConfiguration', ['Dialog result', result]);\n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Build return configuration with only modified properties\n    const finalConfig = {\n      chatMessage: true,\n      isRollRequest: true,\n      skipDialog: options.skipDialogs || false,\n      sendRequest: result.sendRequest\n    };\n    \n    // Only add properties that were actually changed\n    if (advantage) finalConfig.advantage = true;\n    if (disadvantage) finalConfig.disadvantage = true;\n    \n    // Check if rollMode differs from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      finalConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add situational bonus if provided\n    // Check both options.situational and data.situational\n    const situational = firstRoll?.options?.situational || firstRoll?.data?.situational || \"\";\n    if (situational) {\n      finalConfig.situational = situational;\n      finalConfig.parts = [situational];\n    }\n    \n    // Add DC if provided\n    if (firstRoll?.options?.target) {\n      finalConfig.target = firstRoll.options.target;\n    }\n    \n    // Add ability if it was selected (always include for skills/tools to ensure proper dialog display)\n    if (result.config.ability && ['skill', 'tool'].includes(rollType)) {\n      finalConfig.ability = result.config.ability;\n      LogUtil.log('GMSkillToolConfigDialog.getConfiguration', ['Including ability in config', {\n        ability: result.config.ability,\n        rollKey,\n        defaultAbility: actor.system.skills?.[rollKey]?.ability || CONFIG.DND5E.skills?.[rollKey]?.ability\n      }]);\n    }\n    \n    // Add the roll title from the dialog window\n    finalConfig.rollTitle = dialogConfig.options.window.title;\n    \n    LogUtil.log('GMSkillToolConfigDialog.getConfiguration', ['Final configuration', {\n      rollType,\n      rollKey,\n      finalConfig\n    }]);\n    \n    return finalConfig;\n  }\n}","import { MODULE } from '../constants/General.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { Main } from './Main.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog } from './GMRollConfigDialog.mjs';\n\n/**\n * Roll Requests Menu Application\n * Extends Foundry's ApplicationV2 with Handlebars support to provide a menu interface for GMs to request rolls from players\n */\nexport default class RollRequestsMenu extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2) {\n  constructor(options = {}) {\n    super(options);\n    \n    // Track selected actors and current state\n    this.selectedActors = new Set();\n    this.currentTab = 'pc'; // 'pc' or 'npc'\n    this.selectedRequestType = null;\n    this.isLocked = false; // Track lock state\n    \n    // Initialize with actors from selected tokens\n    this._initializeFromSelectedTokens();\n  }\n\n  static DEFAULT_OPTIONS = {\n    id: 'crlngn-requests-menu',\n    classes: ['roll-requests-menu'],\n    tag: 'div',\n    window: {\n      frame: false,\n      resizable: false,\n      minimizable: false\n    },\n    position: null\n  };\n\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/requests-menus.hbs`\n    }\n  };\n\n  /**\n   * Prepare data for the template\n   */\n  async _prepareContext(options) {\n    const context = await super._prepareContext(options);\n    \n    // Get all actors and separate by ownership\n    const actors = game.actors.contents;\n    const pcActors = [];\n    const npcActors = [];\n    \n    // Get current scene to check for NPC tokens\n    const currentScene = game.scenes.active;\n    \n    for (const actor of actors) {\n      // Skip non-character actors\n      if (actor.type !== 'character' && actor.type !== 'npc') continue;\n      \n      const actorData = {\n        id: actor.id,\n        uuid: actor.uuid,\n        name: actor.name,\n        img: actor.img,\n        selected: this.selectedActors.has(actor.id),\n        crlngnStats: this._getActorStats(actor)\n      };\n      \n      // Check if owned by a player (not GM)\n      const isPlayerOwned = Object.entries(actor.ownership)\n        .some(([userId, level]) => {\n          const user = game.users.get(userId);\n          return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        });\n      \n      if (isPlayerOwned) {\n        pcActors.push(actorData);\n      } else {\n        // For NPCs, only include if they have a token in the current scene\n        if (currentScene) {\n          const hasTokenInScene = currentScene.tokens.some(token => token.actorId === actor.id);\n          if (hasTokenInScene) {\n            npcActors.push(actorData);\n          }\n        }\n      }\n    }\n    \n    // Get current settings\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Check if all actors in current tab are selected\n    const currentActors = this.currentTab === 'pc' ? pcActors : npcActors;\n    const selectAllOn = currentActors.length > 0 && \n      currentActors.every(actor => this.selectedActors.has(actor.id));\n    \n    // Build request types array for template\n    const requestTypes = [];\n    if (this.selectedActors.size > 0) {\n      for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n        requestTypes.push({\n          id: key,\n          name: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${option.name}`) || option.label,\n          rollable: option.subList == null,\n          hasSubList: !!option.subList,\n          selected: this.selectedRequestType === key\n        });\n      }\n    }\n    \n    // Build roll types array based on selected request type\n    const rollTypes = [];\n    if (this.selectedRequestType && this.selectedActors.size > 0) {\n      const selectedOption = MODULE.ROLL_REQUEST_OPTIONS[this.selectedRequestType];\n      if (selectedOption && selectedOption.subList) {\n        // Get first selected actor as reference for available options\n        const firstActorId = Array.from(this.selectedActors)[0];\n        const actor = game.actors.get(firstActorId);\n        \n        // Special handling for tools - show all available tools\n        if (selectedOption.subList === 'tools') {\n          // Get all tools from CONFIG.DND5E.tools or enrichmentLookup\n          const allTools = CONFIG.DND5E.enrichmentLookup?.tools || CONFIG.DND5E.tools || {};\n          \n          for (const [key, toolData] of Object.entries(allTools)) {\n            let label = key;\n            \n            // Use enrichmentLookup to get tool UUID and then fetch the name\n            if (toolData?.id) {\n              // Get the tool name using Trait.getBaseItem\n              const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n              label = toolItem?.name || key;\n            }\n            // Fallback - format the key\n            else {\n              label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n            }\n            \n            rollTypes.push({\n              id: key,\n              name: label,\n              rollable: true\n            });\n          }\n          \n          // Sort tools alphabetically by name\n          rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n        }\n        // For other types, use actor data\n        else if (actor && selectedOption.actorPath) {\n          const rollData = foundry.utils.getProperty(actor, selectedOption.actorPath) || {};\n          \n          // Check if we should use CONFIG.DND5E for enrichment\n          const configData = CONFIG.DND5E[selectedOption.subList];\n          \n          for (const [key, data] of Object.entries(rollData)) {\n            let label = '';\n            \n            // For skills, use CONFIG.DND5E.skills for full names\n            if (selectedOption.subList === 'skills' && configData?.[key]) {\n              label = configData[key].label;\n            }\n            // For abilities (saving throws), use the label from data\n            else if (selectedOption.subList === 'abilities' && configData?.[key]) {\n              label = configData[key].label;\n            }\n            // Default fallback\n            else {\n              label = data.label || game.i18n.localize(data.name || key) || key;\n            }\n            \n            rollTypes.push({\n              id: key,\n              name: label,\n              rollable: true\n            });\n          }\n          \n          // Sort skills alphabetically by name\n          if (selectedOption.subList === 'skills') {\n            rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n          }\n        }\n      }\n    }\n    \n    return {\n      ...context,\n      actors: currentActors,\n      currentTab: this.currentTab,\n      isPCTab: this.currentTab === 'pc',\n      isNPCTab: this.currentTab === 'npc',\n      selectedTab: this.currentTab,\n      rollRequestsEnabled,\n      skipDialogs,\n      selectAllOn,\n      hasSelectedActors: this.selectedActors.size > 0,\n      requestTypes,\n      rollTypes,\n      showNames: true, // You can make this configurable later\n      actorsLocked: this.isLocked\n    };\n  }\n\n  /**\n   * Get formatted stats for an actor\n   */\n  _getActorStats(actor) {\n    const system = actor.system;\n    const stats = [];\n    \n    // HP\n    if (system.attributes?.hp) {\n      stats.push({\n        abbrev: 'HP',\n        value: system.attributes.hp.value\n      });\n    }\n    \n    // AC\n    if (system.attributes?.ac) {\n      stats.push({\n        abbrev: 'AC',\n        value: system.attributes.ac.value\n      });\n    }\n    \n    // Spell DC\n    if (system.attributes?.spelldc) {\n      stats.push({\n        abbrev: 'DC',\n        value: system.attributes.spelldc\n      });\n    }\n    \n    // Passive Perception\n    if (system.skills?.prc?.passive) {\n      stats.push({\n        abbrev: 'PP',\n        value: system.skills.prc.passive\n      });\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Called after the application is rendered\n   */\n  _onRender(context, options) {\n    super._onRender(context, options);\n    this._attachListeners();\n    \n    // Add click outside listener with capture to catch events early\n    setTimeout(() => {\n      document.addEventListener('click', this._onClickOutside, true);\n    }, 100);\n    \n    // Hook into token control changes\n    this._tokenControlHook = Hooks.on('controlToken', this._onTokenControlChange.bind(this));\n  }\n  \n  /**\n   * Handle token control changes\n   */\n  _onTokenControlChange(token, controlled) {\n    // Only process if menu is rendered\n    if (!this.rendered) return;\n    \n    // Ignore if we're programmatically updating tokens\n    if (this._ignoreTokenControl) return;\n    \n    // Debounce updates to avoid multiple renders when selecting multiple tokens\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n    }\n    \n    this._tokenUpdateTimeout = setTimeout(() => {\n      // Update selections from current controlled tokens\n      this._initializeFromSelectedTokens();\n      \n      // Re-render to update UI\n      this.render();\n      \n      this._tokenUpdateTimeout = null;\n    }, 100); // 100ms debounce\n  }\n  \n  /**\n   * Handle clicks outside the menu\n   */\n  _onClickOutside = (event) => {\n    // Don't close if locked\n    if (this.isLocked) return;\n    \n    // Check if click was outside the menu\n    const menu = this.element;\n    if (!menu) return;\n    \n    // Check if the click started inside the menu (for drag operations)\n    if (event.target.closest('.roll-requests-menu')) return;\n    \n    // Check if the click target is the menu itself or any of its children\n    if (menu.contains(event.target)) return;\n    \n    // Check if click was on the roll request icon that toggles the menu\n    if (event.target.closest('#crlngn-requests-icon')) return;\n    \n    // Check if this is a dialog or other overlay\n    if (event.target.closest('.dialog, .app, .notification')) return;\n    \n    // If we got here, the click was outside - close the menu\n    this.close();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachListeners() {\n    LogUtil.log('Attaching listeners', []);\n    \n    const html = this.element;\n    \n    // Settings toggles\n    html.querySelector('#crlngn-requests-toggle')?.addEventListener('change', this._onToggleRollRequests.bind(this));\n    html.querySelector('#crlngn-skip-dialogs')?.addEventListener('change', this._onToggleSkipDialogs.bind(this));\n    html.querySelector('#crlngn-actors-all')?.addEventListener('change', this._onToggleSelectAll.bind(this));\n    \n    // Lock toggle\n    html.querySelector('#crlngn-actors-lock')?.addEventListener('click', this._onToggleLock.bind(this));\n    \n    // Tab switching\n    const tabs = html.querySelectorAll('.actor-tab');\n    LogUtil.log('Found tabs:', [tabs.length]);\n    tabs.forEach(tab => {\n      tab.addEventListener('click', this._onTabClick.bind(this));\n    });\n    \n    // Actor selection - handle clicks on actor rows or select buttons\n    html.querySelectorAll('.actor').forEach(actor => {\n      actor.addEventListener('click', this._onActorClick.bind(this));\n    });\n    \n    html.querySelectorAll('.actor-select').forEach(selectBtn => {\n      selectBtn.addEventListener('click', this._onActorSelectClick.bind(this));\n    });\n    \n    // Request type selection - use event delegation for dynamic content\n    const requestTypesContainer = html.querySelector('.request-types');\n    if (requestTypesContainer) {\n      requestTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRequestTypeClick(customEvent);\n        }\n      });\n    }\n    \n    // Roll type selection - use event delegation for dynamic content\n    const rollTypesContainer = html.querySelector('.roll-types');\n    if (rollTypesContainer) {\n      rollTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRollTypeClick(customEvent);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle roll requests toggle\n   */\n  async _onToggleRollRequests(event) {\n    const SETTINGS = getSettings();\n    const enabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, enabled);\n    \n    // Update the icon in the chat controls\n    Main.updateRollRequestsIcon(enabled);\n    \n    LogUtil.log('Roll requests enabled:', [enabled]);\n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleSkipDialogs(event) {\n    const SETTINGS = getSettings();\n    const skip = event.target.checked;\n    await SettingsUtil.set(SETTINGS.skipDialogs.tag, skip);\n    LogUtil.log('Skip dialogs:', [skip]);\n  }\n\n  /**\n   * Handle select all toggle\n   */\n  _onToggleSelectAll(event) {\n    const selectAll = event.target.checked;\n    \n    // Temporarily disable token control hook to avoid feedback loop\n    this._ignoreTokenControl = true;\n    \n    // Get the current actors based on the active tab\n    const actors = this.currentTab === 'pc' ? \n      game.actors.contents.filter(a => this._isPlayerOwned(a)) :\n      game.actors.contents.filter(a => !this._isPlayerOwned(a) && this._hasTokenInScene(a));\n    \n    // Update selection for all visible actors\n    actors.forEach(actor => {\n      if (selectAll) {\n        this.selectedActors.add(actor.id);\n        this._updateCanvasTokenSelection(actor.id, true);\n      } else {\n        this.selectedActors.delete(actor.id);\n        this._updateCanvasTokenSelection(actor.id, false);\n      }\n    });\n    \n    // Re-enable token control hook after a short delay\n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 200);\n    \n    // Re-render to update UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    LogUtil.log('Select all:', [selectAll, 'for', this.currentTab]);\n  }\n  \n  /**\n   * Handle lock toggle\n   */\n  _onToggleLock(event) {\n    event.preventDefault();\n    this.isLocked = !this.isLocked;\n    \n    // Update the icon - the currentTarget IS the icon element\n    const lockIcon = event.currentTarget;\n    lockIcon.classList.remove('fa-lock-keyhole', 'fa-lock-keyhole-open');\n    lockIcon.classList.add(this.isLocked ? 'fa-lock-keyhole' : 'fa-lock-keyhole-open');\n    \n    LogUtil.log('Lock toggled:', [this.isLocked]);\n  }\n  \n  /**\n   * Initialize selected actors from currently selected tokens\n   */\n  _initializeFromSelectedTokens() {\n    // Get controlled tokens\n    const controlledTokens = canvas.tokens?.controlled || [];\n    \n    // Clear existing selections first\n    this.selectedActors.clear();\n    \n    // Add actors from controlled tokens\n    for (const token of controlledTokens) {\n      if (token.actor) {\n        this.selectedActors.add(token.actor.id);\n        \n        // Set the current tab based on first selected token's actor type\n        if (this.selectedActors.size === 1) {\n          // Check if this is a PC or NPC\n          const isPC = this._isPlayerOwned(token.actor);\n          this.currentTab = isPC ? 'pc' : 'npc';\n        }\n      }\n    }\n    \n    LogUtil.log('Initialized with selected tokens:', [Array.from(this.selectedActors)]);\n  }\n  \n  /**\n   * Check if actor is player owned\n   */\n  _isPlayerOwned(actor) {\n    // Skip non-character actors\n    if (actor.type !== 'character' && actor.type !== 'npc') return false;\n    \n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n  \n  /**\n   * Check if actor has token in current scene\n   */\n  _hasTokenInScene(actor) {\n    // Skip non-character actors\n    if (actor.type !== 'character' && actor.type !== 'npc') return false;\n    \n    const currentScene = game.scenes.active;\n    return currentScene && currentScene.tokens.some(token => token.actorId === actor.id);\n  }\n\n  /**\n   * Handle tab click\n   */\n  async _onTabClick(event) {\n    const tab = event.currentTarget.dataset.tab;\n    LogUtil.log('Tab clicked:', [tab, this.currentTab]);\n    if (tab === this.currentTab) return;\n    \n    // Clear selected actors when switching tabs\n    this.selectedActors.clear();\n    \n    // Also clear any canvas token selections\n    canvas.tokens?.releaseAll();\n    \n    // Reset selected request type since it may not apply to new tab\n    this.selectedRequestType = null;\n    \n    this.currentTab = tab;\n    await this.render();\n    LogUtil.log('Switched to tab:', [tab]);\n  }\n\n  /**\n   * Handle click on actor row\n   */\n  _onActorClick(event) {\n    // Ignore if clicking on the select button itself\n    if (event.target.closest('.actor-select')) return;\n    \n    const actorElement = event.currentTarget;\n    const actorId = actorElement.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Handle click on actor select button\n   */\n  _onActorSelectClick(event) {\n    event.stopPropagation(); // Prevent triggering the actor row click\n    const actorId = event.currentTarget.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Toggle actor selection state\n   */\n  _toggleActorSelection(actorId) {\n    // Temporarily disable token control hook to avoid feedback loop\n    this._ignoreTokenControl = true;\n    \n    if (this.selectedActors.has(actorId)) {\n      this.selectedActors.delete(actorId);\n      // Deselect token on canvas\n      this._updateCanvasTokenSelection(actorId, false);\n    } else {\n      this.selectedActors.add(actorId);\n      // Select token on canvas\n      this._updateCanvasTokenSelection(actorId, true);\n    }\n    \n    // Re-enable token control hook after a short delay\n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 100);\n    \n    // Re-render to update the UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    this._updateSelectAllState();\n    LogUtil.log('Actor selected:', [actorId, this.selectedActors.has(actorId)]);\n  }\n  \n  /**\n   * Update token selection on canvas based on actor selection\n   */\n  _updateCanvasTokenSelection(actorId, selected) {\n    const scene = game.scenes.active;\n    if (!scene) return;\n    \n    // Find all tokens for this actor in the current scene\n    const tokens = canvas.tokens.placeables.filter(t => t.actor?.id === actorId);\n    \n    for (const token of tokens) {\n      if (selected) {\n        // Add to selection without clearing others\n        token.control({ releaseOthers: false });\n      } else {\n        // Release this token\n        token.release();\n      }\n    }\n  }\n\n  /**\n   * Update request types visibility based on actor selection\n   */\n  _updateRequestTypesVisibility() {\n    // Since we're now controlling visibility through template data,\n    // we need to re-render when actor selection changes\n    this.render();\n  }\n\n  /**\n   * Update select all checkbox state\n   */\n  _updateSelectAllState() {\n    const selectAllCheckbox = this.element.querySelector('#crlngn-actors-all');\n    const currentActors = this.currentTab === 'pc' ? 'pc' : 'npc';\n    const checkboxes = this.element.querySelectorAll(`.${currentActors}-actors .actor-item input[type=\"checkbox\"]`);\n    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;\n    \n    selectAllCheckbox.checked = checkedCount > 0 && checkedCount === checkboxes.length;\n    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n  }\n\n  /**\n   * Handle request type click\n   */\n  async _onRequestTypeClick(event) {\n    const requestItem = event.currentTarget;\n    const requestType = requestItem.dataset.id;\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    \n    if (!rollOption) {\n      LogUtil.error('Unknown request type:', requestType);\n      return;\n    }\n    \n    // Toggle selection - if clicking the same type, deselect it\n    if (this.selectedRequestType === requestType) {\n      this.selectedRequestType = null;\n      LogUtil.log('Request type deselected:', [requestType]);\n    } else {\n      this.selectedRequestType = requestType;\n      LogUtil.log('Request type selected:', [requestType]);\n    }\n    \n    // If this type has a sublist, re-render to show/hide roll types\n    if (rollOption.subList) {\n      await this.render();\n    } else if (this.selectedRequestType) {\n      // Direct roll without sublist (only if we just selected it)\n      this._triggerRoll(requestType, null);\n    }\n  }\n\n  // Note: _populateRollTypes method removed as we now handle this in _prepareContext\n\n  /**\n   * Handle roll type click\n   */\n  _onRollTypeClick(event) {\n    LogUtil.log('Roll type clicked!', [event.currentTarget]);\n    const rollKey = event.currentTarget.dataset.id;\n    LogUtil.log('Roll type selected:', [rollKey]);\n    this._triggerRoll(this.selectedRequestType, rollKey);\n  }\n\n  /**\n   * Trigger the roll for selected actors\n   * @param {string} requestType - The type of roll request (e.g., 'skill', 'ability')\n   * @param {string} rollKey - The specific roll key (e.g., 'acr' for Acrobatics)\n   */\n  async _triggerRoll(requestType, rollKey) {\n    const SETTINGS = getSettings();\n    const selectedActorIds = Array.from(this.selectedActors);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Safety check: Filter selected actors to only include those from current tab\n    const validActorIds = selectedActorIds.filter(actorId => {\n      const actor = game.actors.get(actorId);\n      if (!actor) return false;\n      \n      const isPC = this._isPlayerOwned(actor);\n      const isNPC = !isPC && this._hasTokenInScene(actor);\n      \n      // Only include actors that match the current tab\n      return (this.currentTab === 'pc' && isPC) || (this.currentTab === 'npc' && isNPC);\n    });\n    \n    // Get the roll option to get the actual method name\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    const rollMethodName = rollOption?.name || requestType;\n    \n    // Handle custom rolls with a dialog\n    if (rollMethodName === 'custom') {\n      const formula = await this._showCustomRollDialog();\n      if (!formula) return; // User cancelled\n      \n      // Store the custom formula as the rollKey\n      rollKey = formula;\n    }\n    \n    // Check for initiative rolls without active combat\n    if (rollMethodName === 'initiativeDialog' && !game.combat) {\n      const createCombat = await Dialog.confirm({\n        title: game.i18n.localize(\"COMBAT.Create\"),\n        content: \"<p>\" + game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.noCombatActive\") + \"</p>\",\n        yes: () => true,\n        no: () => false,\n        defaultYes: true,\n        options: {\n          classes: [\"crlngn-rolls-dialog\"]\n        }\n      });\n      \n      if (createCombat) {\n        // Create a new combat encounter\n        const combat = await game.combats.documentClass.create({scene: game.scenes.active.id});\n        await combat.activate();\n        ui.notifications.info(game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.combatCreated\"));\n      } else {\n        // User chose not to create combat, abort the roll\n        return;\n      }\n    }\n    \n    // Filter actors for initiative rolls based on existing initiative\n    let actorIdsToRoll = validActorIds;\n    if (rollMethodName === 'initiativeDialog' && game.combat) {\n      const actors = validActorIds\n        .map(id => game.actors.get(id))\n        .filter(actor => actor);\n      \n      // Check which actors already have initiative\n      const actorsWithInitiative = [];\n      const actorIdsWithInitiative = new Set();\n      for (const actor of actors) {\n        const combatant = game.combat.getCombatantByActor(actor.id);\n        if (combatant && combatant.initiative !== null) {\n          actorsWithInitiative.push(actor.name);\n          actorIdsWithInitiative.add(actor.id);\n        }\n      }\n      \n      // If any actors already have initiative, confirm re-roll\n      if (actorsWithInitiative.length > 0) {\n        const reroll = await Dialog.confirm({\n          title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiativeTitle\"),\n          content: \"<p>\" + game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiative\", {\n            actors: actorsWithInitiative.join(\", \")\n          }) + \"</p>\",\n          yes: () => true,\n          no: () => false,\n          defaultYes: false,\n          options: {\n            classes: [\"crlngn-rolls-dialog\"]\n          }\n        });\n        \n        if (!reroll) {\n          // User chose not to re-roll, filter out actors with initiative\n          actorIdsToRoll = validActorIds.filter(id => !actorIdsWithInitiative.has(id));\n          \n          // If no actors left to roll, abort\n          if (actorIdsToRoll.length === 0) {\n            ui.notifications.info(game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.allActorsHaveInitiative\"));\n            return;\n          }\n        } else {\n          // User chose to re-roll, clear initiative for actors that have it\n          for (const actorId of actorIdsWithInitiative) {\n            const combatant = game.combat.getCombatantByActor(actorId);\n            if (combatant) {\n              await combatant.update({ initiative: null });\n            }\n          }\n        }\n      }\n    }\n    \n    // Get the actual actors\n    let actors = actorIdsToRoll\n      .map(id => game.actors.get(id))\n      .filter(actor => actor);\n    \n    // Filter actors for death saves\n    if (rollMethodName === 'deathSave') {\n      const actorsNeedingDeathSaves = [];\n      const actorsSkippingDeathSaves = [];\n      \n      for (const actor of actors) {\n        const hp = actor.system.attributes.hp?.value || 0;\n        const deathSaves = actor.system.attributes.death || {};\n        const successes = deathSaves.success || 0;\n        const failures = deathSaves.failure || 0;\n        \n        // Check if actor needs a death save\n        if (hp <= 0 && successes < 3 && failures < 3) {\n          actorsNeedingDeathSaves.push(actor);\n        } else {\n          actorsSkippingDeathSaves.push(actor.name);\n        }\n      }\n      \n      // Notify about actors that don't need death saves\n      if (actorsSkippingDeathSaves.length > 0) {\n        ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.actorsSkippingDeathSave\", {\n          actors: actorsSkippingDeathSaves.join(\", \")\n        }));\n      }\n      \n      // Update actors list to only include those needing death saves\n      actors = actorsNeedingDeathSaves;\n    }\n    \n    if (!actors.length) {\n      ui.notifications.warn(\"No valid actors selected\");\n      return;\n    }\n    \n    // Separate PC and NPC actors\n    const pcActors = [];\n    const npcActors = [];\n    \n    for (const actor of actors) {\n      const owner = this._getActorOwner(actor);\n      if (owner) {\n        pcActors.push({ actor, owner });\n      } else {\n        npcActors.push(actor);\n      }\n    }\n    \n    // Show GM configuration dialog (unless skip dialogs is enabled)\n    let config = null;\n    if (!skipDialogs || pcActors.length > 0) {\n      // Use appropriate dialog based on roll type\n      const DialogClass = ['skill', 'tool'].includes(rollMethodName) ? GMSkillToolConfigDialog : GMRollConfigDialog;\n      config = await DialogClass.getConfiguration(actors, rollMethodName, rollKey, { skipDialogs });\n      \n      LogUtil.log('_triggerRoll', ['GM dialog returned config', {\n        config,\n        rollMethodName,\n        rollKey,\n        hasAbility: !!config?.ability,\n        ability: config?.ability\n      }]);\n      \n      // User cancelled the dialog\n      if (!config) {\n        return;\n      }\n    } else {\n      // Use default configuration\n      config = {\n        advantage: false,\n        disadvantage: false,\n        situational: \"\",\n        parts: [],\n        rollMode: game.settings.get(\"core\", \"rollMode\"),\n        chatMessage: true,\n        isRollRequest: true,\n        skipDialog: skipDialogs,\n        sendRequest: true\n      };\n      \n      // Death saves always have DC 10\n      if (rollMethodName === 'deathSave') {\n        config.target = 10;\n      }\n    }\n    \n    // Handle PC actors - send roll requests (if sendRequest is true)\n    const successfulRequests = []; // Track successful requests for consolidated notification\n    const offlinePlayerActors = []; // Track offline player actors separately\n    \n    if (config.sendRequest) {\n      for (const { actor, owner } of pcActors) {\n        if (!owner.active) {\n          if(SettingsUtil.get(SETTINGS.showOfflineNotifications.tag)) {\n            ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.playerOffline\", { \n              player: owner.name \n            }));\n          }\n\n          // Track offline player actors separately to ensure dialog is skipped\n          offlinePlayerActors.push(actor);\n          continue;\n        }\n        \n        this._sendRollRequestToPlayer(actor, owner, rollMethodName, rollKey, config, true); // true = suppress individual notification\n        successfulRequests.push({ actor, owner });\n        \n        // Add a small delay between roll requests to ensure they process correctly\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n      // Send consolidated notification for all successful requests\n      if (successfulRequests.length > 0) {\n        this._sendConsolidatedNotification(successfulRequests, rollMethodName, rollKey);\n      }\n    } else {\n      // If not sending requests, add PC actors to NPC list to roll locally\n      npcActors.push(...pcActors.map(({ actor }) => actor));\n    }\n    \n    // Handle offline player actors - roll locally without dialog\n    if (offlinePlayerActors.length > 0) {\n      // Force skip dialog for offline players\n      const offlineConfig = { ...config, skipDialog: true };\n      await this._handleNPCRolls(offlinePlayerActors, rollMethodName, rollKey, offlineConfig);\n    }\n    \n    // Handle NPC actors - roll locally\n    if (npcActors.length > 0) {\n      await this._handleNPCRolls(npcActors, rollMethodName, rollKey, config);\n    }\n    \n    // Close the menu after all rolls are complete\n    // Add a small delay to ensure async operations complete\n    setTimeout(() => this.close(), 500);\n  }\n  \n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  _getActorOwner(actor) {\n    const ownership = actor.ownership || {};\n    \n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Send a roll request to a player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config - Roll configuration from dialog\n   * @param {boolean} suppressNotification - If true, don't show individual notification\n   */\n  _sendRollRequestToPlayer(actor, owner, requestType, rollKey, config, suppressNotification = false) {\n    const SETTINGS = getSettings();\n    \n    // Map request type to roll type for compatibility with RollInterceptor format\n    const rollTypeMap = {\n      'abilityCheck': 'ability',\n      'savingThrow': 'save',\n      'skill': 'skill',\n      'tool': 'tool',\n      'concentration': 'concentration',\n      'initiativeDialog': 'initiative',\n      'deathSave': 'deathsave',\n      'custom': 'custom',\n    };\n    \n    const rollType = rollTypeMap[requestType] || requestType;\n    \n    // Build the request data according to Phase 1 spec\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      activityId: null,  // Menu-initiated rolls don't use activities\n      config: {\n        rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        advantage: config.advantage || false,\n        disadvantage: config.disadvantage || false,\n        situational: config.situational || \"\",\n        parts: config.parts || [],\n        chatMessage: config.chatMessage !== false,\n        target: config.target,  // DC value if provided\n        ability: config.ability,  // Ability override for skills/tools\n        attackMode: config.attackMode,  // Attack mode for attack rolls\n        rollTitle: config.rollTitle  // Title from the dialog window\n      },\n      skipDialog: config.skipDialog || false,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    LogUtil.log('_sendRollRequestToPlayer', ['Sending request with data', {\n      requestData,\n      hasAbility: !!requestData.config.ability,\n      ability: requestData.config.ability,\n      rollType,\n      rollKey\n    }]);\n    \n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    if (!suppressNotification) {\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent\", { \n        player: owner.name,\n        actor: actor.name \n      }));\n    }\n  }\n  \n  /**\n   * Send a consolidated notification for multiple roll requests\n   * @param {Array} successfulRequests - Array of {actor, owner} objects\n   * @param {string} rollMethodName - The type of roll being requested\n   * @param {string} rollKey - The specific roll key (if applicable)\n   */\n  _sendConsolidatedNotification(successfulRequests, rollMethodName, rollKey) {\n    // Group requests by player\n    const requestsByPlayer = {};\n    for (const { actor, owner } of successfulRequests) {\n      if (!requestsByPlayer[owner.id]) {\n        requestsByPlayer[owner.id] = {\n          player: owner,\n          actors: []\n        };\n      }\n      requestsByPlayer[owner.id].actors.push(actor);\n    }\n    \n    // Get roll type name for display\n    // Find the option key that matches this rollMethodName\n    let rollOptionKey = null;\n    for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n      if (option.name === rollMethodName) {\n        rollOptionKey = key;\n        break;\n      }\n    }\n    \n    const rollTypeKey = rollMethodName;\n    let rollTypeName = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollTypeKey}`) || rollTypeKey;\n    \n    // Add specific roll details if applicable\n    if (rollKey) {\n      if (rollTypeKey === 'skill') {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n      } else if (rollTypeKey === 'savingThrow') {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (rollTypeKey === 'abilityCheck') {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (rollTypeKey === 'tool') {\n        // Try to get tool name from enrichmentLookup\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          rollTypeName = `${rollTypeName} (${toolItem?.name || rollKey})`;\n        } else {\n          rollTypeName = `${rollTypeName} (${rollKey})`;\n        }\n      } else if (rollTypeKey === 'custom') {\n        rollTypeName = `${rollTypeName}: ${rollKey}`;\n      }\n    }\n    \n    if (Object.keys(requestsByPlayer).length === 1) {\n      const playerData = Object.values(requestsByPlayer)[0];\n      const actorNames = playerData.actors.map(a => a.name).join(\", \");\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentSingle\", { \n        rollType: rollTypeName,\n        actors: actorNames,\n        player: playerData.player.name\n      }));\n    } else {\n      const playerSummaries = Object.values(requestsByPlayer).map(data => {\n        const actorNames = data.actors.map(a => a.name).join(\", \");\n        return `${data.player.name} (${actorNames})`;\n      });\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentMultiple\", { \n        rollType: rollTypeName,\n        count: successfulRequests.length,\n        players: playerSummaries.join(\"; \")\n      }));\n    }\n  }\n  \n  /**\n   * Handle rolling for NPC actors locally\n   * @param {Actor[]} actors \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} dialogConfig - Configuration from GM dialog\n   */\n  async _handleNPCRolls(actors, requestType, rollKey, dialogConfig) {\n    // Build config for local rolls\n    const config = {\n      advantage: dialogConfig.advantage || false,\n      disadvantage: dialogConfig.disadvantage || false,\n      situational: dialogConfig.situational || \"\",\n      parts: dialogConfig.parts || [],\n      rollMode: dialogConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      fastForward: dialogConfig.skipDialog || false,\n      chatMessage: dialogConfig.chatMessage !== false,\n      isRollRequest: true,  // Flag to prevent RollInterceptor from re-intercepting\n      target: dialogConfig.target,  // DC value if provided\n      ability: dialogConfig.ability,  // Ability override for skills/tools\n      attackMode: dialogConfig.attackMode  // Attack mode for attack rolls\n    };\n    \n    // Roll for each NPC with a small delay between rolls\n    for (const actor of actors) {\n      await this._executeActorRoll(actor, requestType, rollKey, config);\n      // Small delay between rolls for better chat readability\n      await new Promise(resolve => setTimeout(resolve, 200));\n    }\n  }\n  \n  /**\n   * Execute a roll for a specific actor\n   * @param {Actor} actor \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config \n   */\n  async _executeActorRoll(actor, requestType, rollKey, config) {\n    try {\n      LogUtil.log('RollRequestsMenu._executeActorRoll', ['Starting roll for actor', {\n        actorName: actor.name,\n        actorType: actor.type,\n        actorId: actor.id,\n        requestType,\n        normalizedType: requestType.toLowerCase(),\n        config\n      }]);\n      \n      // Normalize the requestType to ensure case matching\n      const normalizedType = requestType.toLowerCase();\n      \n      switch (normalizedType) {\n        case 'abilitycheck':\n          // Pass all configuration in the first parameter, matching player side\n          const abilityRollConfig = {\n            ability: rollKey,\n            advantage: config.advantage,\n            disadvantage: config.disadvantage,\n            target: config.target,  // Include target for DC\n            isRollRequest: config.isRollRequest  // Prevent re-interception\n          };\n          const abilityDialogConfig = {\n            configure: !config.fastForward\n          };\n          const abilityMessageConfig = {\n            rollMode: config.rollMode,\n            create: config.chatMessage !== false\n          };\n          // Add situational bonus if present\n          if (config.situational) abilityRollConfig.bonus = config.situational;\n          \n          await actor.rollAbilityCheck(abilityRollConfig, abilityDialogConfig, abilityMessageConfig);\n          break;\n        case 'savingthrow':\n          // Pass all configuration in the first parameter, matching player side\n          const saveRollConfig = {\n            ability: rollKey,\n            advantage: config.advantage,\n            disadvantage: config.disadvantage,\n            target: config.target,  // Include target for DC\n            isRollRequest: config.isRollRequest  // Prevent re-interception\n          };\n          const saveDialogConfig = {\n            configure: !config.fastForward\n          };\n          const saveMessageConfig = {\n            rollMode: config.rollMode,\n            create: config.chatMessage !== false\n          };\n          // Add situational bonus if present\n          if (config.situational) saveRollConfig.bonus = config.situational;\n          \n          await actor.rollSavingThrow(saveRollConfig, saveDialogConfig, saveMessageConfig);\n          break;\n        case 'skill':\n          // Skills use a different signature: rollSkill(config, dialogConfig, messageConfig)\n          const skillRollConfig = {\n            skill: rollKey,\n            advantage: config.advantage,\n            disadvantage: config.disadvantage,\n            ability: config.ability,\n            chooseAbility: !config.ability // Don't allow choice if ability is pre-selected\n          };\n          const skillDialogConfig = {\n            configure: !config.fastForward // Show dialog unless fast forward is true\n          };\n          const skillMessageConfig = {\n            rollMode: config.rollMode,\n            create: config.chatMessage !== false,\n            data: {}\n          };\n          \n          // Use the roll title if provided, otherwise build custom flavor if ability was overridden\n          if (config.rollTitle) {\n            skillMessageConfig.data.flavor = config.rollTitle;\n          } else if (config.ability) {\n            const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n            const abilityLabel = CONFIG.DND5E.abilities[config.ability]?.label || config.ability;\n            skillMessageConfig.data.flavor = game.i18n.format(\"DND5E.SkillPromptTitle\", {\n              skill: skillLabel,\n              ability: abilityLabel\n            });\n          }\n          // Add situational bonus and target if present\n          if (config.situational) skillRollConfig.bonus = config.situational;\n          if (config.target) skillRollConfig.target = config.target;\n          \n          await actor.rollSkill(skillRollConfig, skillDialogConfig, skillMessageConfig);\n          break;\n        case 'tool':\n          // Tools use a different signature: rollToolCheck(config, dialogConfig, messageConfig)\n          const toolRollConfig = {\n            tool: rollKey,\n            advantage: config.advantage,\n            disadvantage: config.disadvantage,\n            ability: config.ability,\n            chooseAbility: !config.ability // Don't allow choice if ability is pre-selected\n          };\n          const toolDialogConfig = {\n            configure: !config.fastForward // Show dialog unless fast forward is true\n          };\n          const toolMessageConfig = {\n            rollMode: config.rollMode,\n            create: config.chatMessage !== false,\n            data: {}\n          };\n          \n          // Use the roll title if provided, otherwise build custom flavor if ability was overridden\n          if (config.rollTitle) {\n            toolMessageConfig.data.flavor = config.rollTitle;\n          } else if (config.ability) {\n            // Get tool label\n            let toolLabel = rollKey;\n            const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n            if (toolData?.id) {\n              const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n              toolLabel = toolItem?.name || rollKey;\n            }\n            const abilityLabel = CONFIG.DND5E.abilities[config.ability]?.label || config.ability;\n            // D&D5e doesn't have a tool format with ability, so create custom flavor\n            toolMessageConfig.data.flavor = `${abilityLabel} (${toolLabel}) ${game.i18n.localize(\"DND5E.Check\")}`;\n          }\n          // Add situational bonus and target if present\n          if (config.situational) toolRollConfig.bonus = config.situational;\n          if (config.target) toolRollConfig.target = config.target;\n          \n          await actor.rollToolCheck(toolRollConfig, toolDialogConfig, toolMessageConfig);\n          break;\n        case 'concentration':\n          await actor.rollConcentration(config);\n          break;\n        case 'initiativedialog':\n          // Initiative rolls require an active combat\n          if (!game.combat) {\n            ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n            break;\n          }\n          LogUtil.log('RollRequestsMenu._executeActorRoll', ['About to roll initiative for', actor.name, 'with config', config]);\n          // Use the same approach as player-side - pass config directly\n          const result = await actor.rollInitiativeDialog(config);\n          LogUtil.log('RollRequestsMenu._executeActorRoll', ['Initiative roll result:', result]);\n          \n          // If no result, try a different approach\n          if (!result) {\n            LogUtil.log('RollRequestsMenu._executeActorRoll', ['No result from rollInitiativeDialog, trying direct combat update']);\n            \n            // Get or create combatant\n            let combatant = game.combat.getCombatantByActor(actor.id);\n            if (!combatant) {\n              const tokens = actor.getActiveTokens();\n              if (tokens.length) {\n                await game.combat.createEmbeddedDocuments(\"Combatant\", [{\n                  tokenId: tokens[0].id,\n                  actorId: actor.id\n                }]);\n                combatant = game.combat.getCombatantByActor(actor.id);\n              }\n            }\n            \n            // Roll initiative directly\n            if (combatant) {\n              const roll = combatant.getInitiativeRoll();\n              await roll.evaluate({async: true});\n              await combatant.update({initiative: roll.total});\n              await roll.toMessage({\n                speaker: ChatMessage.getSpeaker({actor}),\n                flavor: game.i18n.localize(\"DND5E.Initiative\")\n              });\n            }\n          }\n          break;\n        case 'deathsave':\n          // Death saves don't need a key, just the config\n          // Death saves return null if unnecessary (HP > 0 or already 3 successes/failures)\n          LogUtil.log('RollRequestsMenu._executeActorRoll', ['Actor death save state', {\n            name: actor.name,\n            hp: actor.system.attributes.hp?.value,\n            deathSaves: actor.system.attributes.death,\n            type: actor.type\n          }]);\n          // Death saves might need special handling\n          const deathResult = await actor.rollDeathSave();\n          LogUtil.log('RollRequestsMenu._executeActorRoll', ['Death save completed', deathResult]);\n          break;\n        case 'custom':\n          // Custom rolls use the formula in rollKey\n          try {\n            const roll = new Roll(rollKey, actor.getRollData());\n            await roll.evaluate({async: true});\n            await roll.toMessage({\n              speaker: ChatMessage.getSpeaker({actor}),\n              flavor: game.i18n.localize(\"CRLNGN_ROLLS.rollTypes.custom\")\n            });\n          } catch (error) {\n            ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula: rollKey}));\n            LogUtil.log('RollRequestsMenu._executeActorRoll', ['Invalid custom formula', rollKey, error]);\n          }\n          break;\n        default:\n          ui.notifications.warn(`Unknown roll type: ${requestType}`);\n          break;\n      }\n    } catch (error) {\n      LogUtil.log('RollRequestsMenu._executeActorRoll', ['Error executing roll', error]);\n      ui.notifications.error(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollError\", { \n        actor: actor.name \n      }));\n    }\n  }\n\n  /**\n   * Clean up when closing\n   */\n  async _onClose(options) {\n    await super._onClose(options);\n    \n    // Reset state\n    this.selectedActors.clear();\n    this.selectedRequestType = null;\n    \n    // Remove click outside listener (with capture flag to match addEventListener)\n    document.removeEventListener('click', this._onClickOutside, true);\n    \n    // Remove token control hook\n    if (this._tokenControlHook) {\n      Hooks.off('controlToken', this._tokenControlHook);\n      this._tokenControlHook = null;\n    }\n    \n    // Clear any pending token update timeout\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n      this._tokenUpdateTimeout = null;\n    }\n  }\n\n  /**\n   * Override render positioning to use CSS instead of inline styles\n   */\n  setPosition(position={}) {\n    // Don't set any inline position styles - let CSS handle it\n    return this;\n  }\n  \n  /**\n   * Show custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  async _showCustomRollDialog() {\n    return new Promise(async (resolve) => {\n      // Render the template\n      const content = await renderTemplate(`modules/${MODULE.ID}/templates/custom-roll-dialog.hbs`, {\n        formula: \"\",\n        readonly: false\n      });\n      \n      const dialog = new Dialog({\n        title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.customRollTitle\"),\n        content,\n        buttons: {\n          roll: {\n            icon: '<i class=\"fas fa-dice-d20\"></i>',\n            label: game.i18n.localize(\"Roll\"),\n            callback: (html) => {\n              const formulaElement = html[0] || html;\n              const formula = formulaElement.querySelector('#custom-roll-formula').value.trim();\n              resolve(formula || null);\n            }\n          },\n          cancel: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: game.i18n.localize(\"Cancel\"),\n            callback: () => resolve(null)\n          }\n        },\n        default: \"roll\",\n        render: (html) => {\n          const htmlElement = html[0] || html;\n          const formulaInput = htmlElement.querySelector('#custom-roll-formula');\n          const diceCounts = {};\n          \n          // Handle dice button clicks\n          htmlElement.querySelectorAll('.dice-button').forEach(button => {\n            button.addEventListener('click', (event) => {\n              const die = event.currentTarget.dataset.die;\n              diceCounts[die] = (diceCounts[die] || 0) + 1;\n              \n              // Build formula from dice counts\n              const parts = [];\n              for (const [dieType, count] of Object.entries(diceCounts)) {\n                if (count > 0) {\n                  parts.push(`${count}${dieType}`);\n                }\n              }\n              formulaInput.value = parts.join(' + ');\n            });\n          });\n        }\n      }, {\n        classes: [\"crlngn-rolls-dialog\", \"crlngn-custom-roll-dialog\"]\n      });\n      \n      dialog.render(true);\n    });\n  }\n}","import { HOOKS_DND5E } from '../constants/Hooks.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { MODULE_ID } from '../constants/General.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\n\n/**\n * Handles intercepting D&D5e rolls on the GM side and redirecting them to players\n */\nexport class RollInterceptor {  \n  /**\n   * @type {Set<string>} - Set of registered hook IDs for cleanup\n   */\n  static registeredHooks = new Set();\n  \n  /**\n   * Initialize the roll interceptor\n   */\n  static initialize() {\n    LogUtil.log('RollInterceptor.initialize', ['Called, checking if user is GM', game.user.isGM]);\n    \n    // Only initialize for GM users\n    if (!game.user.isGM) return;\n    \n    LogUtil.log('RollInterceptor.initialize', ['Initializing roll interceptor for GM']);\n    this.registerHooks();\n  }\n  \n  /**\n   * Register all necessary hooks for roll interception\n   */\n  static registerHooks() {\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, this._handlePreRoll.bind(this, 'ability'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, this._handlePreRoll.bind(this, 'save'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SKILL_V2, this._handlePreRoll.bind(this, 'skill'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_TOOL_V2, this._handlePreRoll.bind(this, 'tool'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._handlePreRoll.bind(this, 'attack'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._handlePreRoll.bind(this, 'damage'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE, this._handlePreRoll.bind(this, 'initiative'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, this._handlePreRoll.bind(this, 'deathsave'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._handlePreRoll.bind(this, 'hitDie'));\n    \n    LogUtil.log('RollInterceptor.registerHooks', ['Registered roll interception hooks']);\n  }\n  \n  /**\n   * Helper to register a hook and track it for cleanup\n   * @param {string} hookName \n   * @param {Function} handler \n   */\n  static _registerHook(hookName, handler) {\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.add({ hookName, hookId });\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterHooks() {\n    for (const { hookName, hookId } of this.registeredHooks) {\n      Hooks.off(hookName, hookId);\n    }\n    this.registeredHooks.clear();\n    LogUtil.log('RollInterceptor.unregisterHooks', ['Unregistered all hooks']);\n  }\n  \n  /**\n   * Handle generic pre-roll v2 hook to intercept all rolls\n   * @param {Object} config - Roll configuration (first parameter)\n   * @param {Object} options - Additional options (second parameter)\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handleGenericPreRoll(config, options) {\n    // Only intercept on GM side\n    if (!game.user.isGM) return;\n    \n    LogUtil.log('RollInterceptor._handleGenericPreRoll', ['Generic preRollV2 triggered', {\n      configType: config?.constructor?.name,\n      hasSubject: !!config?.subject,\n      subjectName: config?.subject?.name,\n      hasIsRollRequest: config?.isRollRequest,\n      optionsType: options?.constructor?.name\n    }]);\n    \n    // Check to avoid loops\n    if (config?.isRollRequest) return;\n    \n    // or non activity rolls, config.subject is the actor\n    const actor = config?.subject;\n    \n    // Check if roll interception is enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    if (!rollInterceptionEnabled) return;\n\n    LogUtil.log('RollInterceptor._handleGenericPreRoll', [actor, actor?.documentName]);\n    \n    if (!actor || actor.documentName !== 'Actor') {\n      LogUtil.log('RollInterceptor._handleGenericPreRoll', ['No valid Actor found in roll', config]);\n      return;\n    }\n    \n    // Check if the actor is owned by a player (not the GM)\n    const owner = this._getActorOwner(actor);\n    if (!owner || owner.id === game.user.id) {\n      return;\n    }\n    \n    // Check if the owner is online\n    if (!owner.active) {\n      return;\n    }\n    \n    // Determine roll type from the config\n    let rollType = 'unknown';\n    let rollKey = null;\n    \n    // Check config for more specific information\n    if (config?.ability) {\n      rollType = config.save ? 'save' : 'ability';\n      rollKey = config.ability;\n    } else if (config?.skill) {\n      rollType = 'skill';\n      rollKey = config.skill;\n    } else if (config?.tool) {\n      rollType = 'tool';\n      rollKey = config.tool;\n    }\n    \n    LogUtil.log('RollInterceptor._handleGenericPreRoll', ['Determined roll type', {\n      rollType,\n      rollKey,\n      configKeys: Object.keys(config || {})\n    }]);\n    \n    LogUtil.log('RollInterceptor._handleGenericPreRoll', ['Intercepting generic roll', {\n      rollType,\n      actorName: actor.name,\n      ownerName: owner.name\n    }]);\n    \n    // Pass the roll key along with the config if we found it\n    if (rollKey && config) {\n      config = { ...config, ability: rollKey };\n    }\n    this._sendRollRequest(actor, owner, rollType, config);\n    \n    // Prevent the normal roll\n    return false;\n  }\n\n  /**\n   * Handle pre-roll hooks to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Object} config - Roll configuration object (or Actor for initiative)\n   * @param {Object} dialog - Dialog options\n   * @param {Object} message - Message options\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRoll(rollType, config, dialog, message) {\n    // Only intercept on GM side\n    if (!game.user.isGM) return;\n    \n    LogUtil.log('RollInterceptor._handlePreRoll', ['Hook triggered', {\n      rollType,\n      configType: config?.constructor?.name,\n      hasIsRollRequest: config?.isRollRequest,\n      dialogIsRollRequest: dialog?.isRollRequest,\n      messageIsRollRequest: message?.isRollRequest\n    }]);\n    \n    // Special handling for initiative - first parameter is the actor\n    let actor;\n    if (rollType === 'initiative' && config instanceof Actor) {\n      actor = config;\n      // For initiative, check if second parameter (options) has isRollRequest flag\n      if (dialog?.isRollRequest) return;\n      // Also check third parameter for rollInitiative calls\n      if (message?.isRollRequest) return;\n    } else {\n      // Don't intercept if this is already a roll request (to avoid loops)\n      if (config.isRollRequest) return;\n      \n      // Extract actor from the config\n      actor = config.subject?.actor || config.subject || config.actor;\n    }\n    \n    // Check if roll interception is enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    LogUtil.log('RollInterceptor._handlePreRoll', ['Roll interception enabled:', rollInterceptionEnabled]);\n    if (!rollInterceptionEnabled) return;\n    \n    if (!actor || actor.documentName !== 'Actor') {\n      LogUtil.log('RollInterceptor._handlePreRoll', ['No valid Actor found in roll config', config, rollType]);\n      return;\n    }\n    \n    // Check if the actor is owned by a player (not the GM)\n    const owner = this._getActorOwner(actor);\n    if (!owner || owner.id === game.user.id) {\n      // Actor is owned by GM or has no owner, allow normal roll\n      LogUtil.log('RollInterceptor._handlePreRoll', ['Actor is GM-owned or has no owner, allowing roll', {\n        rollType,\n        actorName: actor.name,\n        actorType: actor.type,\n        hasOwner: !!owner\n      }]);\n      return;\n    }\n    \n    // Check if the owner is online\n    if (!owner.active) {\n      // Player is offline - allow GM to roll normally\n      LogUtil.log('RollInterceptor._handlePreRoll', ['Player is offline, allowing GM roll', {\n        rollType,\n        actorName: actor.name,\n        ownerName: owner.name\n      }]);\n      return; // Don't intercept, let the roll proceed\n    }\n    \n    LogUtil.log('RollInterceptor._handlePreRoll', ['Intercepting GM roll for player character', { \n      rollType, \n      actorId: actor.id, \n      actorName: actor.name,\n      ownerId: owner.id,\n      ownerName: owner.name \n    }]);\n    \n    // For now, send the request immediately without showing dialog to GM\n    // TODO: Implement GM configuration dialog in Phase 1.2\n    this._sendRollRequest(actor, owner, rollType, config);\n    \n    // Prevent the normal roll\n    LogUtil.log('RollInterceptor._handlePreRoll', ['PREVENTING ROLL - returning false']);\n    return false;\n  }\n  \n  /**\n   * Show configuration dialog to GM before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showConfigurationDialog(actor, owner, rollType, config, dialog, message) {\n    try {\n      LogUtil.log('RollInterceptor._showConfigurationDialog', ['Showing dialog', { rollType, dialog: dialog.cls.name }]);\n      \n      // Create a wrapper function that will be called instead of the normal roll\n      const rollWrapper = async (finalConfig) => {\n        LogUtil.log('RollInterceptor._showConfigurationDialog', ['Dialog submitted with config', finalConfig]);\n        // Send the configured roll request to the player\n        this._sendRollRequest(actor, owner, rollType, finalConfig);\n        // Return a fake roll to satisfy the dialog\n        return new Roll(\"1d20\").evaluate({async: false});\n      };\n      \n      // Replace the roll method in config with our wrapper\n      const modifiedConfig = {\n        ...config,\n        _rollMethod: rollWrapper,\n        configured: false // Force dialog to show\n      };\n      \n      // Create and render the dialog\n      const DialogClass = dialog.cls;\n      const rollDialog = new DialogClass(modifiedConfig, dialog.options);\n      \n      // Render the dialog\n      const result = await rollDialog.render(true);\n      \n    } catch (error) {\n      LogUtil.log('RollInterceptor._showConfigurationDialog', ['Error showing configuration dialog', error]);\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n\n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  static _getActorOwner(actor) {\n    // Find the first active player who owns this actor\n    const ownership = actor.ownership || {};\n    \n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Send a roll request to the player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   */\n  static _sendRollRequest(actor, owner, rollType, config) {\n    const SETTINGS = getSettings();\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Extract the roll key based on roll type\n    let rollKey = null;\n    let activityId = null;\n    switch (rollType) {\n      case 'ability':\n      case 'save':\n        rollKey = config.ability;\n        break;\n      case 'skill':\n        rollKey = config.skill;\n        break;\n      case 'tool':\n        rollKey = config.tool;\n        break;\n      case 'attack':\n      case 'damage':\n        if (config.subject?.item) {\n          rollKey = config.subject.item.id;\n          // Find the appropriate activity\n          const activity = ActivityUtil.findActivityForRoll(config.subject.item, rollType);\n          if (activity) {\n            activityId = activity.id;\n          }\n        }\n        break;\n      case 'hitDie':\n        rollKey = config.denomination;\n        break;\n    }\n    \n    // Clean up config to remove non-serializable properties\n    const cleanConfig = {\n      advantage: config.advantage || false,\n      disadvantage: config.disadvantage || false,\n      situational: config.situational || 0,\n      parts: config.parts || [],\n      rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      elvenAccuracy: config.elvenAccuracy || false,\n      halflingLucky: config.halflingLucky || false,\n      reliableTalent: config.reliableTalent || false,\n      minimum: config.minimum,\n      maximize: config.maximize,\n      critical: config.critical,\n      fumble: config.fumble,\n      targetValue: config.targetValue,\n      fastForward: config.fastForward || false,\n      chatMessage: config.chatMessage !== false,\n      flavor: config.flavor,\n      title: config.title,\n      dialogOptions: config.dialogOptions,\n      messageData: config.messageData\n    };\n    \n    // Remove undefined values\n    Object.keys(cleanConfig).forEach(key => {\n      if (cleanConfig[key] === undefined) {\n        delete cleanConfig[key];\n      }\n    });\n    \n    // Build the request data according to Phase 1 spec\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      activityId,\n      config: cleanConfig,\n      skipDialog: skipDialogs,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    // Send request to player via socket\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    // Show notification to GM\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent', { \n      player: owner.name,\n      actor: actor.name \n    }));\n  }\n}","import { HOOKS_CORE, HOOKS_DND5E } from \"../constants/Hooks.mjs\"; \nimport { LogUtil } from \"./LogUtil.mjs\"; \nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\nimport { RollInterceptor } from \"./RollInterceptor.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  static diceConfig = {};\n  static playerDiceConfigs = {};\n  static rollRequestsMenu = null;\n  static SOCKET_CALLS = {\n    receiveDiceConfig: \"receiveDiceConfig\",\n    getDiceConfig: \"getDiceConfig\",\n    handleRollRequest: \"handleRollRequest\"\n  };\n  \n  // Batch notification system for player-side\n  static pendingNotifications = [];\n  static notificationTimer = null;\n  static NOTIFICATION_BATCH_DELAY = 500; // ms to wait for additional notifications\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    // Initialize socketlib\n    SocketUtil.initialize(Main.registerSocketCalls);\n    Hooks.once(HOOKS_CORE.INIT, () => { \n      const SETTINGS = getSettings();\n      LogUtil.log(\"Initiating module...\", [], true);\n      SettingsUtil.registerSettings();\n      document.body.classList.add(\"crlngn-rolls\");\n      Main.setDiceConfig();\n      \n      // Register sidebar tab hook to add chat control\n      Hooks.on(HOOKS_CORE.RENDER_SIDEBAR_TAB, Main.addChatControl);\n    });\n\n    Hooks.once(HOOKS_CORE.READY, () => {\n      LogUtil.log(\"Core Ready!!\", [ui?.sidebar, ui?.sidebar?._collapsed], true);\n      const SETTINGS = getSettings();\n      \n      var isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n      // if(isDebugOn){CONFIG.debug.hooks = true};\n      \n      // Initialize RollInterceptor for all users\n      RollInterceptor.initialize();\n      \n      // Hook to modify chat messages for requested rolls\n      Hooks.on(\"dnd5e.postRollConfiguration\", (rolls, config, dialog, message) => {\n        // Check if this is a requested roll\n        if (config._isRequestedRoll && rolls.length > 0) {\n          LogUtil.log(\"postRollConfiguration for requested roll\", [\"Adding custom flavor\", config._requestedBy]);\n          // Store the requested by information in the message data\n          message.data = message.data || {};\n          message.data._isRequestedRoll = true;\n          message.data._requestedBy = config._requestedBy;\n        }\n      });\n      \n      // Hook to modify the chat message before it's created\n      Hooks.on(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, (chatMessage, data, options, userId) => {\n        // Check if this message is from a requested roll\n        if (data._isRequestedRoll && data.rolls?.length > 0) {\n          const requestedBy = data._requestedBy || 'GM';\n          const requestedText = game.i18n.format('CRLNGN_ROLL_REQUESTS.chat.requestedBy', { gm: requestedBy });\n          \n          // Append our custom text to the existing flavor\n          const currentFlavor = data.flavor || '';\n          data.flavor = currentFlavor ? `${currentFlavor} ${requestedText}` : requestedText;\n          \n          LogUtil.log(\"preCreateChatMessage\", [\"Modified flavor for requested roll\", data.flavor]);\n        }\n      });\n      \n      // Add debug hooks for roll configuration\n      Hooks.on(HOOKS_CORE.BUILD_ROLL_CONFIG, (app, config, formData, index) => {\n        LogUtil.log(\"Hook: dnd5e.buildRollConfig\", [\"BuildRollConfig hook fired\", {\n          app: app?.constructor?.name,\n          config,\n          formData,\n          index,\n          rollType: config?.rollType,\n          rollTypeConstructor: config?.rollType?.constructor?.name,\n          rolls: config?.rolls\n        }]);\n      });\n      \n      Hooks.on(HOOKS_CORE.POST_BUILD_ROLL_CONFIG, (processConfig, rollConfig, index, options) => {\n        LogUtil.log(\"Hook: dnd5e.postBuildRollConfig\", [\"PostBuildRollConfig hook fired\", {\n          processConfig,\n          rollConfig,\n          index,\n          app: options?.app?.constructor?.name,\n          formData: options?.formData,\n          rollType: processConfig?.rollType,\n          rollTypeConstructor: processConfig?.rollType?.constructor?.name,\n          rolls: processConfig?.rolls\n        }]);\n      });\n      \n      // Hook to preserve custom flavor for skill/tool rolls\n      Hooks.on(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, (message, data, options, userId) => {\n        // Check if this is a roll message with our custom flavor\n        if (data.rolls?.length > 0 && data.rolls[0]) {\n          try {\n            // The roll data includes the options directly\n            const rollData = data.rolls[0];\n            if (rollData.options?._customFlavor) {\n              data.flavor = rollData.options._customFlavor;\n              LogUtil.log(\"Applying custom flavor to chat message\", [rollData.options._customFlavor]);\n            }\n          } catch (error) {\n            LogUtil.log(\"Error processing custom flavor\", [error]);\n          }\n        }\n      });\n      \n      if(game.user.isGM){\n        Hooks.on(HOOKS_CORE.USER_CONNECTED, Main.onUserConnected);\n        // Only run this on the GM client\n        game.users.forEach(user => {\n          Main.onUserConnected(user);\n        });\n        Main.checkSideBar(!ui?.sidebar?._collapsed);\n      }else{\n        Main.getDiceConfig();\n      }\n    });\n  }\n\n  /**\n   * Adds or removes the sidebar-expanded class based on the isExpanded parameter\n   * @param {boolean} isExpanded \n   */\n  static checkSideBar = (isExpanded) => {\n    const body = document.querySelector(\"body\");\n    if(isExpanded){\n      body.classList.add(\"sidebar-expanded\");\n    }else{\n      body.classList.remove(\"sidebar-expanded\");\n    }\n  }\n\n  /**\n   * Request dice configuration from the connected user\n   * @param {*} user \n   * @returns \n   */\n  static onUserConnected(user) {\n    // Request dice configuration from the connected user\n    if (user.active && user.id !== game.user.id) {\n      LogUtil.log(\"onUserConnected\", [user]);\n      SocketUtil.execForUser(Main.SOCKET_CALLS.getDiceConfig, user.id);\n    }\n  }\n\n  static setDiceConfig(){\n    if(!game.user) return;\n    const clientSettings = game.settings.storage.get(\"client\"); \n    Main.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    LogUtil.log(`getDiceConfig`, [Main.diceConfig]);\n    return Main.diceConfig;\n  }\n  \n  // Add the getDiceConfig method that will be called on the player's client\n  static getDiceConfig() { \n    if(!game.user) return;\n    Main.setDiceConfig();\n    \n    if(game.user.isGM) {\n      SocketUtil.execForGMs(Main.SOCKET_CALLS.receiveDiceConfig, game.user.id, Main.diceConfig);\n      return;\n    }\n  }\n\n  // Add the receiveDiceConfig method that will be called on the GM's client\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId===game.user.id){ // for GM or own user\n      // Store the dice configuration for this user\n      if (!Main.playerDiceConfigs) Main.playerDiceConfigs = {};\n      Main.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n      \n      LogUtil.log(`Received dice configuration from user ${userId}`, [Main.playerDiceConfigs]);\n    }\n  }\n\n  /**\n   * Handle roll request from GM on player side\n   * @param {Object} requestData - The roll request data\n   */\n  static async handleRollRequest(requestData) {\n    // Only handle on player side\n    if (game.user.isGM) return;\n    \n    LogUtil.log(\"handleRollRequest\", [\"Received roll request\", requestData]);\n    LogUtil.log(\"handleRollRequest\", [\"Config details\", {\n      advantage: requestData.config?.advantage,\n      disadvantage: requestData.config?.disadvantage,\n      ability: requestData.config?.ability,\n      target: requestData.config?.target,\n      rollMode: requestData.config?.rollMode,\n      situational: requestData.config?.situational\n    }]);\n    \n    // Get the actor\n    const actor = game.actors.get(requestData.actorId);\n    if (!actor) {\n      LogUtil.log(\"handleRollRequest\", [\"Actor not found\", requestData.actorId]);\n      return;\n    }\n    \n    // Check if the user owns this actor\n    if (!actor.isOwner) {\n      LogUtil.log(\"handleRollRequest\", [\"User does not own actor\", requestData.actorId]);\n      return;\n    }\n    \n    // Apply GM targets if configured\n    if (requestData.preserveTargets && \n        requestData.targetTokenIds?.length > 0 && \n        game.user.targets.size === 0) {\n      // Set targets to match GM's\n      const tokens = requestData.targetTokenIds\n        .map(id => canvas.tokens.get(id))\n        .filter(t => t);\n      tokens.forEach(t => t.setTarget(true, {user: game.user}));\n    }\n    \n    // Add to pending notifications for batching\n    Main.pendingNotifications.push({\n      actor: actor.name,\n      rollType: requestData.rollType,\n      rollKey: requestData.rollKey,\n      gm: requestData.config.requestedBy || 'GM'\n    });\n    \n    // Clear existing timer and set new one\n    if (Main.notificationTimer) {\n      clearTimeout(Main.notificationTimer);\n    }\n    \n    Main.notificationTimer = setTimeout(() => {\n      Main._showBatchedNotifications();\n    }, Main.NOTIFICATION_BATCH_DELAY);\n    \n    LogUtil.log(\"handleRequestedRoll\", [\"sending roll request\"]);\n    // Execute the requested roll\n    Main._executeRequestedRoll(actor, requestData);\n  }\n\n  /**\n   * Show batched notifications to player\n   */\n  static _showBatchedNotifications() {\n    if (Main.pendingNotifications.length === 0) return;\n    \n    // Group by roll type\n    const notificationsByType = {};\n    for (const notif of Main.pendingNotifications) {\n      const key = `${notif.rollType}_${notif.rollKey || ''}`;\n      if (!notificationsByType[key]) {\n        notificationsByType[key] = {\n          rollType: notif.rollType,\n          rollKey: notif.rollKey,\n          actors: [],\n          gm: notif.gm\n        };\n      }\n      notificationsByType[key].actors.push(notif.actor);\n    }\n    \n    // Create notification messages\n    const entries = Object.values(notificationsByType);\n    \n    if (entries.length === 1 && entries[0].actors.length === 1) {\n      // Single roll request - use original format\n      const entry = entries[0];\n      ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived', {\n        gm: entry.gm,\n        rollType: Main._getRollTypeDisplay(entry.rollType, entry.rollKey)\n      }));\n    } else {\n      // Multiple requests - create consolidated message\n      const messages = [];\n      for (const entry of entries) {\n        const rollTypeDisplay = Main._getRollTypeDisplay(entry.rollType, entry.rollKey);\n        const actorNames = entry.actors.join(\", \");\n        messages.push(`${rollTypeDisplay} (${actorNames})`);\n      }\n      \n      ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestsReceivedMultiple', {\n        gm: entries[0].gm,\n        requests: messages.join(\"; \")\n      }));\n    }\n    \n    // Clear pending notifications\n    Main.pendingNotifications = [];\n    Main.notificationTimer = null;\n  }\n  \n  /**\n   * Get display name for roll type with optional details\n   */\n  static _getRollTypeDisplay(rollType, rollKey) {\n    let display = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollType}`) || rollType;\n    \n    if (rollKey) {\n      switch (rollType) {\n        case 'skill':\n          display += ` (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n          break;\n        case 'save':\n          display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n          break;\n        case 'ability':\n          display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n          break;\n        case 'tool':\n          // Try to get tool name\n          const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n          if (toolData?.id) {\n            const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n            display += ` (${toolItem?.name || rollKey})`;\n          } else {\n            display += ` (${rollKey})`;\n          }\n          break;\n        case 'custom':\n          display = `${display}: ${rollKey}`;\n          break;\n      }\n    }\n    \n    return display;\n  }\n  \n  /**\n   * Execute a roll based on the request data\n   * @param {Actor} actor \n   * @param {Object} requestData \n   */\n  static async _executeRequestedRoll(actor, requestData) {\n    try {\n      // Build configuration matching D&D5e's expected structure\n      // The roll methods expect certain data in specific parameters\n      \n      // Base configuration object (first parameter for most roll methods)\n      const rollConfig = {\n        advantage: requestData.config.advantage || false,\n        disadvantage: requestData.config.disadvantage || false,\n        isRollRequest: true, // Custom flag to prevent re-interception\n        target: requestData.config.target, // DC value\n        // Don't pass a fake event object - it causes issues with D&D5e's event handling\n        _isRequestedRoll: true, // Internal flag to identify requested rolls\n        _requestedBy: requestData.config.requestedBy || 'GM' // Who requested the roll\n      };\n      \n      \n      // Add situational bonus if provided\n      if (requestData.config.situational) {\n        rollConfig.bonus = requestData.config.situational;\n      }\n      \n      // Add ability for skills/tools if provided\n      if (requestData.config.ability && ['skill', 'tool'].includes(requestData.rollType)) {\n        rollConfig.ability = requestData.config.ability;\n      }\n      \n      // Dialog configuration (second parameter)\n      const dialogConfig = {\n        configure: !requestData.skipDialog,\n        options: {\n          defaultButton: requestData.config.advantage ? 'advantage' : \n                         requestData.config.disadvantage ? 'disadvantage' : 'normal',\n          // Add dialog window configuration\n          window: {\n            title: requestData.config.rollTitle || this._getRollTypeDisplay(requestData.rollType, requestData.rollKey),\n            subtitle: actor.name\n          }\n        }\n      };\n      \n      // Message configuration (third parameter)\n      const messageConfig = {\n        rollMode: requestData.config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        create: requestData.config.chatMessage !== false\n      };\n\n      LogUtil.log(\"_executeRequestedRoll\", [actor, requestData, rollConfig, dialogConfig, messageConfig]);\n      \n      switch (requestData.rollType) {\n        case 'ability':\n          // For ability checks, pass configuration object with ability property\n          await actor.rollAbilityCheck({\n            ...rollConfig,\n            ability: requestData.rollKey // Add the ability key to the config\n          }, dialogConfig, messageConfig);\n          break;\n        case 'save':\n          // For saving throws, pass configuration object with ability property\n          await actor.rollSavingThrow({\n            ...rollConfig,\n            ability: requestData.rollKey // Add the ability key to the config\n          }, dialogConfig, messageConfig);\n          break;\n        case 'skill':\n          // For skills, pass configuration object with skill property\n          const skillConfig = { \n            ...rollConfig,\n            skill: requestData.rollKey, // Add the skill key to the config\n            chooseAbility: true // Allow ability selection in dialog\n          };\n          if (requestData.config.ability) {\n            skillConfig.ability = requestData.config.ability;\n          }\n          \n          LogUtil.log(\"_executeRequestedRoll skill\", [\"Skill config before roll\", {\n            skillConfig,\n            requestedAbility: requestData.config.ability,\n            rollKey: requestData.rollKey,\n            actor: actor.name\n          }]);\n          \n          await actor.rollSkill(skillConfig, dialogConfig, messageConfig);\n          break;\n        case 'tool':\n          // For tools, pass configuration object with tool property\n          const toolConfig = { \n            ...rollConfig,\n            tool: requestData.rollKey, // Add the tool key to the config\n            chooseAbility: true // Allow ability selection in dialog\n          };\n          if (requestData.config.ability) {\n            toolConfig.ability = requestData.config.ability;\n          }\n          await actor.rollToolCheck(toolConfig, dialogConfig, messageConfig);\n          break;\n        case 'concentration':\n          await actor.rollConcentration(rollConfig, dialogConfig, messageConfig);\n          break;\n        case 'attack':\n          if (requestData.rollKey) {\n            // Activities might need different handling\n            await ActivityUtil.executeActivityRoll(actor, 'attack', requestData.rollKey, requestData.activityId, {\n              ...rollConfig,\n              dialog: dialogConfig,\n              message: messageConfig\n            });\n          }\n          break;\n        case 'damage':\n          if (requestData.rollKey) {\n            await ActivityUtil.executeActivityRoll(actor, 'damage', requestData.rollKey, requestData.activityId, {\n              ...rollConfig,\n              dialog: dialogConfig,\n              message: messageConfig\n            });\n          }\n          break;\n        case 'itemSave':\n          if (requestData.rollKey) {\n            await ActivityUtil.executeActivityRoll(actor, 'itemSave', requestData.rollKey, requestData.activityId, {\n              ...rollConfig,\n              dialog: dialogConfig,\n              message: messageConfig\n            });\n          }\n          break;\n        case 'initiative':\n          // Initiative rolls require an active combat\n          if (!game.combat) {\n            ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n            break;\n          }\n          await actor.rollInitiativeDialog(rollConfig, dialogConfig, messageConfig);\n          break;\n        case 'deathsave':\n          await actor.rollDeathSave(rollConfig, dialogConfig, messageConfig);\n          break;\n        case 'hitDie':\n          rollConfig.denomination = requestData.rollKey;\n          await actor.rollHitDie(rollConfig, dialogConfig, messageConfig);\n          break;\n        case 'custom':\n          // For custom rolls, show dialog with readonly formula\n          await Main._handleCustomRoll(actor, requestData);\n          break;\n      }\n    } catch (error) {\n      LogUtil.log(\"_executeRequestedRoll\", [\"Error executing roll\", error]);\n      ui.notifications.error(game.i18n.localize('CRLNGN_ROLL_REQUESTS.notifications.rollError'));\n    }\n  }\n\n  /**\n   * Handle custom roll request\n   * @param {Actor} actor \n   * @param {Object} requestData \n   */\n  static async _handleCustomRoll(actor, requestData) {\n    const formula = requestData.rollKey; // Formula is stored in rollKey\n    \n    // Render the template with readonly formula\n    const content = await renderTemplate(`modules/${MODULE_ID}/templates/custom-roll-dialog.hbs`, {\n      formula: formula,\n      readonly: true\n    });\n    \n    const dialog = new Dialog({\n      title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.customRollTitle\"),\n      content,\n      buttons: {\n        roll: {\n          icon: '<i class=\"fas fa-dice-d20\"></i>',\n          label: game.i18n.localize(\"Roll\"),\n          callback: async () => {\n            try {\n              // Create and evaluate the roll\n              const roll = new Roll(formula, actor.getRollData());\n              await roll.evaluate({async: true});\n              \n              // Post to chat\n              await roll.toMessage({\n                speaker: ChatMessage.getSpeaker({actor}),\n                flavor: game.i18n.localize(\"CRLNGN_ROLLS.rollTypes.custom\")\n              });\n            } catch (error) {\n              ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula}));\n              LogUtil.log(\"_handleCustomRoll\", [\"Invalid formula\", formula, error]);\n            }\n          }\n        },\n        cancel: {\n          icon: '<i class=\"fas fa-times\"></i>',\n          label: game.i18n.localize(\"Cancel\")\n        }\n      },\n      default: \"roll\"\n    }, {\n      classes: [\"crlngn-rolls-dialog\", \"crlngn-custom-roll-dialog\"]\n    });\n    \n    dialog.render(true);\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(Main.SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(Main.SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    SocketUtil.registerCall(Main.SOCKET_CALLS.handleRollRequest, Main.handleRollRequest);\n  }\n\n  /**\n   * Add the roll request icon to chat controls\n   * @param {SidebarTab} app - The sidebar tab application\n   * @param {jQuery} html - The rendered HTML\n   * @param {Object} options - Render options\n   */\n  static addChatControl(app, html, options) {\n    if (!game.user.isGM || app.id !== \"chat\") return;\n    \n    LogUtil.log(\"Adding chat control for chat tab\");\n    const htmlElement = html[0] || html;\n    \n    // Find the chat controls container\n    const chatControls = htmlElement.querySelector(\"#chat-controls\");\n    if (!chatControls) {\n      LogUtil.log(\"Could not find #chat-controls\", []);\n      return;\n    }\n    \n    // Check if icon already exists\n    if (chatControls.querySelector('.roll-requests-icon')) {\n      return;\n    }\n    \n    // Get current settings to determine initial state\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Create the roll request icon\n    const rollRequestIcon = document.createElement('a');\n    rollRequestIcon.id = \"crlngn-requests-icon\";\n    rollRequestIcon.setAttribute(\"data-tooltip-direction\", \"RIGHT\");\n    rollRequestIcon.className = `chat-control-icon roll-requests-icon${rollRequestsEnabled ? ' active' : ''}`;\n    rollRequestIcon.title = game.i18n.localize('CRLNGN_ROLLS.ui.menus.rollRequestsTitle');\n    rollRequestIcon.innerHTML = `<i class=\"fas fa-bolt${rollRequestsEnabled ? '' : '-slash'}\"></i>`;\n    \n    // Find the first .chat-control-icon (the d20 dice icon)\n    const firstChatControlIcon = chatControls.querySelector('.chat-control-icon');\n    \n    if (firstChatControlIcon) {\n      // Insert before the d20 dice icon\n      firstChatControlIcon.parentNode.insertBefore(rollRequestIcon, firstChatControlIcon);\n    } else {\n      // If no chat-control-icon found, append to chat controls\n      chatControls.appendChild(rollRequestIcon);\n    }\n    \n    // Add click listener\n    rollRequestIcon.addEventListener(\"click\", Main.toggleRollRequestsMenu);\n    \n    LogUtil.log(\"Added roll requests icon to chat controls\", []);\n  }\n\n  /**\n   * Toggle the roll requests menu open/closed\n   */\n  static toggleRollRequestsMenu() {\n    if (!Main.rollRequestsMenu) {\n      Main.rollRequestsMenu = new RollRequestsMenu();\n      Main.rollRequestsMenu.render(true);\n    } else {\n      // Toggle visibility of existing menu\n      if (Main.rollRequestsMenu.rendered) {\n        Main.rollRequestsMenu.close();\n        LogUtil.log(\"Closed roll requests menu\", []);\n      } else {\n        // Reinitialize from selected tokens before rendering\n        Main.rollRequestsMenu._initializeFromSelectedTokens();\n        Main.rollRequestsMenu.render(true);\n        LogUtil.log(\"Opened roll requests menu\", []);\n      }\n    }\n  }\n\n  /**\n   * Update the roll requests icon based on enabled state\n   */\n  static updateRollRequestsIcon(enabled) {\n    const icon = document.querySelector('#crlngn-requests-icon i');\n    if (icon) {\n      icon.className = `fas fa-bolt${enabled ? '' : '-slash'}`;\n    }\n  }\n\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\n// Initialize the module\nMain.init();\n"],"names":["HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","MODULE_ID","DEBUG_TAG","ROLL_REQUEST_OPTIONS","MODULE","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","__publicField","LogUtil","SETTING_INPUT","SETTING_SCOPE","getSettings","SettingsUtil","SETTINGS","entry","setting","settingObj","value","settingName","moduleName","selectedSetting","newValue","requestsIcon","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","name","func","callback","handler","parameters","userId","executionKey","resp","error","SocketUtil","ActivityUtil","item","rollType","activities","attackActivities","damageAttackActivities","damageActivities","saveActivities","itemSaveActivities","activityType","actor","itemId","activityId","config","_b","_c","_d","activity","a","dialogConfig","workflow","damageRoll","formulas","part","f","defaultConfig","defaultOptions","formula","ignoreCrit","damageType","GMRollConfigDialog","message","dialog","partId","context","configSection","templateData","template","wrapper","button","event","action","formConfig","_e","_f","_g","sendRequestCheckbox","dcInput","formData","index","abilityFromForm","dcFromForm","dcValue","form","finalizedRolls","actors","rollKey","_h","showDC","rollClass","rollConfig","messageConfig","app","resolve","firstRoll","advantage","disadvantage","finalConfig","defaultRollMode","situational","defaultAbility","level","user","title","skillLabel","skill","abilityLabel","saveAbility","checkAbility","toolData","toolLabel","toolItem","GMSkillToolConfigDialog","skillConfig","_i","_j","_k","_l","_m","tool","RollRequestsMenu","menu","pcActors","npcActors","currentScene","actorData","token","rollRequestsEnabled","skipDialogs","currentActors","selectAllOn","requestTypes","key","option","rollTypes","selectedOption","firstActorId","allTools","label","str","b","rollData","configData","system","stats","controlled","html","tabs","tab","selectBtn","requestTypesContainer","listItem","customEvent","rollTypesContainer","enabled","Main","skip","selectAll","lockIcon","controlledTokens","isPC","actorId","selected","tokens","t","selectAllCheckbox","checkboxes","checkedCount","cb","requestType","rollOption","selectedActorIds","validActorIds","isNPC","rollMethodName","actorIdsToRoll","id","actorsWithInitiative","actorIdsWithInitiative","combatant","actorsNeedingDeathSaves","actorsSkippingDeathSaves","hp","deathSaves","successes","failures","owner","successfulRequests","offlinePlayerActors","offlineConfig","ownership","suppressNotification","requestData","requestsByPlayer","rollTypeKey","rollTypeName","playerData","actorNames","playerSummaries","abilityRollConfig","abilityDialogConfig","abilityMessageConfig","saveRollConfig","saveDialogConfig","saveMessageConfig","skillRollConfig","skillDialogConfig","skillMessageConfig","toolRollConfig","toolDialogConfig","toolMessageConfig","deathResult","position","content","htmlElement","formulaInput","diceCounts","die","parts","dieType","count","RollInterceptor","hookName","hookId","rollInterceptionEnabled","modifiedConfig","DialogClass","cleanConfig","_Main","chatMessage","requestedBy","requestedText","currentFlavor","processConfig","clientSettings","diceConfig","notificationsByType","notif","entries","messages","rollTypeDisplay","display","toolConfig","chatControls","rollRequestIcon","firstChatControlIcon","icon","isExpanded","body"],"mappings":"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"}