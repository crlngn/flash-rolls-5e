{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Settings.mjs","../../src/constants/General.mjs","../../src/constants/Hooks.mjs","../../src/components/LogUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/DiceConfigUtil.mjs","../../src/components/SettingsUtil.mjs","../../src/components/helpers/ModuleHelpers.mjs","../../src/components/ActivityUtil.mjs","../../src/components/dialogs/GMRollConfigDialog.mjs","../../src/components/helpers/RollHelpers.mjs","../../src/components/dialogs/CustomRollDialog.mjs","../../src/components/RollHandlers.mjs","../../src/components/RollInterceptor.mjs","../../src/components/helpers/Helpers.mjs","../../src/components/helpers/RollValidationHelpers.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/SidebarUtil.mjs","../../src/components/HooksUtil.mjs","../../src/components/RollRequestUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    skipDialogs: {\n      tag: \"skip-dialogs\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    rollInterceptionEnabled: {\n      tag: \"roll-interception-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    showOfflineNotifications: {\n      tag: \"show-offline-notifications\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cFlash Rolls 5e`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const SOCKET_CALLS = {\n  receiveDiceConfig: \"receiveDiceConfig\",\n  getDiceConfig: \"getDiceConfig\",\n  handleRollRequest: \"handleRollRequest\"\n};\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", requestType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", requestType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", requestType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", requestType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", requestType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", requestType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" }, // Recharge rolls\n\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" }, // D20 test\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" }, // Short rest\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" }, // Long rest\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\n/**\n * Roll types used throughout the module\n * @constant\n * @type {Object}\n */\nexport const ROLL_TYPES = {\n  ABILITY: \"ability\",\n  ABILITY_CHECK: \"abilitycheck\",\n  ATTACK: \"attack\",\n  CONCENTRATION: \"concentration\",\n  CUSTOM: \"custom\",\n  DEATH_SAVE: \"deathsave\",\n  FORMULA: \"formula\",\n  DAMAGE: \"damage\",\n  HEALING: \"healing\",\n  HIT_DIE: \"hitdie\",\n  INITIATIVE: \"initiative\",\n  INITIATIVE_DIALOG: \"initiativedialog\",\n  ITEM_SAVE: \"itemsave\",\n  SAVE: \"save\",\n  SAVING_THROW: \"savingthrow\",\n  SKILL: \"skill\",\n  TOOL: \"tool\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: ROLL_TYPES.ABILITY_CHECK, label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: ROLL_TYPES.SAVING_THROW, label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SKILL: { name: ROLL_TYPES.SKILL, label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: ROLL_TYPES.TOOL, label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: ROLL_TYPES.CONCENTRATION, label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: ROLL_TYPES.INITIATIVE_DIALOG, label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: ROLL_TYPES.DEATH_SAVE, label: \"Death Save\", subList: null, actorPath: '' },\n  // ITEM_SAVE: { name: ROLL_TYPES.ITEM_SAVE, label: \"Item Save\", subList: null, actorPath: '' },\n  HIT_DIE: { name: ROLL_TYPES.HIT_DIE, label: \"Hit Die\", subList: null, actorPath: '' },\n  CUSTOM: { name: ROLL_TYPES.CUSTOM, label: \"Custom Roll\", subList: null, actorPath: '' },\n}\n\n/**\n * Module configuration object\n * @constant\n * @type {Object}\n */\nexport const MODULE = {\n  ID: MODULE_ID,\n  ROLL_REQUEST_OPTIONS: ROLL_REQUEST_OPTIONS\n}\n","/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  RENDER_SIDEBAR_TAB: \"renderSidebarTab\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheckV2\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrowV2\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheckV2\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrowV2\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_CONFIGURE_INITIATIVE: \"dnd5e.preConfigureInitiative\",\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE_DIALOG_V2: \"dnd5e.preRollInitiativeDialogV2\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_BUILD_ROLL_CONFIG: \"dnd5e.postBuildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {*[]} data - array of items to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debug-mode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      // If settings aren't available yet, check bypassSettings\n      if (bypassSettings || LogUtil.debugOn) {\n        console.log(...DEBUG_TAG, ref, ...data);\n      }\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {*[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    LogUtil.log('initialize', [callbackFunc]);\n\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n      } catch (e) {\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    LogUtil.log('registerCall', [name]);\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n    } else {\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log('sendMessage', [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    LogUtil.log('execForGMs', [handler, ...parameters]);\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    LogUtil.log('execForUser', [handler, userId, ...parameters]);\n    if (!SocketUtil.socket) {\n        return;\n    }\n\n    if(userId === game.user.id){\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n        const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n        return resp;\n    } catch (error) {\n        return null;\n    } finally {\n        // Always clean up, even if there was an error\n        SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    LogUtil.log('serializeForTransport', [data, hasRolls]);\n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    LogUtil.log('deserializeFromTransport', [data, hasRolls]);\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { SocketUtil } from './SocketUtil.mjs';\n\n/**\n * Utility class for managing dice configurations across users\n */\nexport class DiceConfigUtil {\n  /**\n   * @type {Object} Current user's dice configuration\n   */\n  static diceConfig = {};\n  \n  /**\n   * @type {Object} All player dice configurations (GM only)\n   */\n  static playerDiceConfigs = {};\n  \n  /**\n   * Initialize the dice configuration for current user\n   */\n  static initialize() {\n    this.setDiceConfig();\n  }\n  \n  /**\n   * Set dice configuration from client settings\n   * @returns {Object} The dice configuration\n   */\n  static setDiceConfig() {\n    if (!game.user) return {};\n    \n    const clientSettings = game.settings.storage.get(\"client\");\n    this.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Get the current user's dice configuration\n   * @returns {Object} The dice configuration\n   */\n  static getDiceConfig() {\n    if (!game.user) return {};\n    \n    // Ensure we have the latest configuration\n    this.setDiceConfig();\n    \n    // If GM, send config to GMs via socket\n    if (game.user.isGM) {\n      this._sendDiceConfigToGMs();\n    }\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Send dice configuration to all GMs\n   * @private\n   */\n  static _sendDiceConfigToGMs() {\n    SocketUtil.execForGMs('receiveDiceConfig', game.user.id, this.diceConfig);\n  }\n  \n  /**\n   * Receive and store dice configuration from a player\n   * @param {string} userId - The user ID\n   * @param {string} diceConfig - The serialized dice configuration\n   */\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId === game.user?.id) {\n      this.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n    }\n  }\n  \n  /**\n   * Get dice configuration for a specific user\n   * @param {string} userId - The user ID\n   * @returns {Object} The user's dice configuration\n   */\n  static getUserDiceConfig(userId) {\n    if (userId === game.user?.id) {\n      return this.diceConfig;\n    }\n    \n    return this.playerDiceConfigs[userId] || {};\n  }\n  \n  /**\n   * Request dice configuration from a specific user\n   * @param {string} userId - The user ID to request from\n   */\n  static requestDiceConfigFromUser(userId) {\n    SocketUtil.execForUser('getDiceConfig', userId);\n  }\n  \n  /**\n   * Request dice configuration from all active non-GM users\n   */\n  static requestDiceConfigFromAllPlayers() {\n    if (!game.user?.isGM) return;\n    \n    game.users.forEach(user => {\n      if (user.active && !user.isGM && user.id !== game.user.id) {\n        this.requestDiceConfigFromUser(user.id);\n      }\n    });\n  }\n  \n  /**\n   * Clear all stored player dice configurations\n   */\n  static clearPlayerConfigs() {\n    this.playerDiceConfigs = {};\n  }\n  \n  /**\n   * Check if a user has dice configuration stored\n   * @param {string} userId - The user ID\n   * @returns {boolean} True if configuration exists\n   */\n  static hasUserConfig(userId) {\n    if (userId === game.user?.id) {\n      return !!this.diceConfig;\n    }\n    \n    return !!this.playerDiceConfigs[userId];\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined || SettingsUtil.get(setting.tag)===null){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsEnabled(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsEnabled(newValue){\n    const requestsIcon = document.querySelector(\"#chat-controls .chat-control-icon.roll-requests-icon\");\n    if(!requestsIcon){ return; }\n    \n    if(newValue){\n      requestsIcon.classList.add(\"active\");\n    }else{\n      requestsIcon.classList.remove(\"active\");\n    }\n  }\n}\n","/**\n * Helper functions for module management\n */\nexport class ModuleHelpers {\n  /**\n   * Check if a module is installed and active\n   * @param {string} moduleId - The module ID to check\n   * @returns {boolean} - True if the module is installed and active\n   */\n  static isModuleActive(moduleId) {\n    const module = game.modules.get(moduleId);\n    return module && module.active;\n  }\n\n  /**\n   * Get the MidiQOL API if available\n   * @returns {Object|null} - The MidiQOL API or null if not available\n   */\n  static getMidiQOL() {\n    if (this.isMidiQOLActive() && typeof MidiQOL !== 'undefined') {\n      return MidiQOL;\n    }\n    return null;\n  }\n}","import { LogUtil } from './LogUtil.mjs';\nimport { ROLL_TYPES, MODULE_ID } from '../constants/General.mjs';\nimport { ModuleHelpers } from './helpers/ModuleHelpers.mjs';\n\n/**\n * @typedef {Object} ActivityUseConfiguration\n * @property {object|false} create\n * @property {boolean} create.measuredTemplate - Should this item create a template?\n * @property {object} concentration\n * @property {boolean} concentration.begin - Should this usage initiate concentration?\n * @property {string|null} concentration.end - ID of an active effect to end concentration on.\n * @property {object|false} consume\n * @property {boolean} consume.action - Should action economy be tracked? Currently only handles legendary actions.\n * @property {boolean|number[]} consume.resources - Set to `true` or `false` to enable or disable all resource\n *                                                   consumption or provide a list of consumption target indexes\n *                                                   to only enable those targets.\n * @property {boolean} consume.spellSlot - Should this spell consume a spell slot?\n * @property {Event} event - The browser event which triggered the item usage, if any.\n * @property {boolean|number} scaling - Number of steps above baseline to scale this usage, or `false` if\n *                                      scaling is not allowed.\n * @property {object} spell\n * @property {number} spell.slot - The spell slot to consume.\n * @property {boolean} [subsequentActions=true] - Trigger subsequent actions defined by this activity.\n * @property {object} [cause]\n * @property {string} [cause.activity] - Relative UUID to the activity that caused this one to be used.\n *                                       Activity must be on the same actor as this one.\n * @property {boolean|number[]} [cause.resources] - Control resource consumption on linked item.\n * @property {BasicRollConfiguration[]} [rolls] - Roll configurations for this activity\n */\n\n/**\n * Utility class for handling D&D5e 4.x activities\n */\nexport class ActivityUtil {\n  \n  /**\n   * Find the appropriate activity for a given roll type on an item\n   * @param {Item5e} item - The item to search for activities\n   * @param {string} rollType - The type of roll (attack, damage, itemSave)\n   * @returns {Activity5e|null} - The found activity or null\n   */\n  static findActivityForRoll(item, rollType) {\n    if (!item?.system?.activities) return null;\n    \n    const activities = item.system.activities;\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.ATTACK:\n        const attackActivities = activities.getByType(\"attack\");\n        return attackActivities?.[0] || null;\n        \n      case ROLL_TYPES.DAMAGE:\n        const damageAttackActivities = activities.getByType(\"attack\");\n        if (damageAttackActivities?.length > 0) return damageAttackActivities[0];\n        \n        const damageActivities = activities.getByType(\"damage\");\n        if (damageActivities?.length > 0) return damageActivities[0];\n        \n        const saveActivities = activities.getByType(\"save\");\n        if (saveActivities?.length > 0) return saveActivities[0];\n        \n        return null;\n        \n      case ROLL_TYPES.ITEM_SAVE:\n        const itemSaveActivities = activities.getByType(\"save\");\n        return itemSaveActivities?.[0] || null;\n        \n      default:\n        return null;\n    }\n  }\n  \n  /**\n   * Get all activities of a specific type from an item\n   * @param {Item5e} item - The item to search\n   * @param {string} activityType - The activity type (attack, damage, save, etc.)\n   * @returns {Activity5e[]} - Array of activities\n   */\n  static getActivitiesByType(item, activityType) {\n    if (!item?.system?.activities) return [];\n    return item.system.activities.getByType(activityType);\n  }\n  \n  /**\n   * Check if an item has activities suitable for a given roll type\n   * @param {Item5e} item - The item to check\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} - Whether the item has suitable activities\n   */\n  static hasActivityForRoll(item, rollType) {\n    LogUtil.log('hasActivityForRoll', [item, rollType]);\n    return !!this.findActivityForRoll(item, rollType);\n  }\n  \n  /**\n   * Execute a roll using the appropriate activity method\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {string} itemId - The item ID\n   * @param {string} activityId - The activity ID (optional)\n   * @param {Object} config - Roll configuration\n   * @param {ActivityUseConfiguration} config.usage - Activity usage configuration\n   * @param {BasicRollDialogConfiguration} config.dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} config.message - Message configuration\n   */\n  static async executeActivityRoll(actor, rollType, itemId, activityId, config) {\n    LogUtil.log('executeActivityRoll', [actor, rollType, itemId, activityId, config]);\n    const item = actor.items.get(itemId);\n    if (!item) {\n      throw new Error(`Item ${itemId} not found on actor ${actor.name}`);\n    }\n    \n    let activity = null;\n    \n    // If activity ID provided, use it directly\n    if (activityId) {\n      activity = item.system.activities?.get(activityId);\n    }\n    activity = activity || this.findActivityForRoll(item, rollType);\n\n    if (!activity) {\n      throw new Error(`Activity not found on item ${item.name}`);\n    }\n    LogUtil.log('executeActivityRoll - activity', [activity, rollType]);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Execute the roll based on type\n    if (activity) {\n      switch (normalizedRollType) {\n        case ROLL_TYPES.ATTACK:\n          LogUtil.log('executeActivityRoll - is attack activity', [config]);\n          \n          // Workaround for _triggerSubsequentActions stripping off usage config\n          // Store request configuration in flags and retrieve in the preRollAttackV2 hook\n          const rollRequestConfig = {\n            attackMode: config.usage.attackMode,\n            ammunition: config.usage.ammunition,\n            mastery: config.usage.mastery,\n            situational: config.usage.rolls?.[0]?.data?.situational,\n            advantage: config.usage.advantage,\n            disadvantage: config.usage.disadvantage\n            // isRollRequest: config.usage.isRollRequest\n          };\n          await activity.item.setFlag(MODULE_ID, 'tempAttackConfig', rollRequestConfig);\n          \n          LogUtil.log('executeActivityRoll - stored temp config as flag', [rollRequestConfig]);\n          \n          try {\n            if(ModuleHelpers.isModuleActive('midi-qol')) {\n              const MidiQOL = ModuleHelpers.getMidiQOL();\n              if (MidiQOL) {\n                const workflow = await ActivityUtil.syntheticItemRoll(item, {\n                  ...config\n                });\n                return\n              }\n            }\n            await activity.use(config.usage, config.dialog, config.message);\n          } finally {\n            // Only clean up the flag if we set it\n            await activity.item.unsetFlag(MODULE_ID, 'tempAttackConfig');\n          }\n          return;\n        case ROLL_TYPES.DAMAGE:\n          if(ModuleHelpers.isModuleActive('midi-qol')) {\n            const MidiQOL = ModuleHelpers.getMidiQOL();\n            if (MidiQOL) {\n              const workflow = MidiQOL.Workflow?.getWorkflow(activity.uuid);\n              const damageRoll = await workflow.activity.rollDamage({\n                ...config,\n                workflow: workflow\n              });\n              return;\n            }\n          }\n          // we need to check if the activity has a previous attack\n          // or if it is a damage only roll, like from a spell with save\n          LogUtil.log('executeActivityRoll - damage roll', [activity, config]);\n          \n          // Extract the roll configuration from the usage config\n          const damageConfig = {\n            critical: config.usage.critical || false,\n            event: config.usage.event,\n            rollMode: config.message?.rollMode,\n            create: config.message?.create !== false\n          };\n          \n          // Add situational bonus if present\n          if (config.usage.rolls?.[0]?.data?.situational) {\n            if (!damageConfig.data) damageConfig.data = {};\n            damageConfig.data.situational = config.usage.rolls[0].data.situational;\n          }\n          \n          LogUtil.log('executeActivityRoll - damage config with situational', [damageConfig]);\n          \n          if(activity?.previousAttack || activity?.damageOnly) {\n            return await activity.rollDamage(damageConfig, config.dialog, config.message);\n          }\n          return await activity.rollDamage(damageConfig, config.dialog, config.message);\n        case ROLL_TYPES.ITEM_SAVE:\n          // For save activities, use the item's use() method to show the save card\n          return await item.use({ activity: activity.id }, { skipDialog: config.fastForward });\n        default:\n          LogUtil.log('executeActivityRoll - unknown roll type', [normalizedRollType]);\n          return;\n      }\n    }\n      \n    throw new Error(`No suitable method found for ${normalizedRollType} on item ${item.name}`);\n  }\n  \n  /**\n   * Get display information for an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {Object} - Display information\n   */\n  static getActivityDisplayInfo(activity) {\n    LogUtil.log('getActivityDisplayInfo', [activity]);\n    if (!activity) return null;\n    \n    return {\n      name: activity.name || activity.constructor.metadata.label,\n      type: activity.type,\n      icon: activity.constructor.metadata.icon,\n      canAttack: activity.type === 'attack',\n      canDamage: ['attack', 'damage', 'save'].includes(activity.type),\n      canSave: activity.type === 'save'\n    };\n  }\n  \n  /**\n   * Get damage formula string from an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {string|null} - Combined damage formula or null\n   */\n  static getDamageFormula(activity) {\n    LogUtil.log('getDamageFormula', [activity]);\n    if (!activity?.damage?.parts?.length) return null;\n    \n    // Extract all damage formulas and combine them\n    const formulas = activity.damage.parts.map(part => part.formula).filter(f => f);\n    return formulas.length > 0 ? formulas.join(' + ') : null;\n  }\n\n  static async syntheticItemRoll(item, config = {}) {\n    LogUtil.log('syntheticItemRoll', [item, config]);\n    const MidiQOL = ModuleHelpers.getMidiQOL();\n    if (!MidiQOL) {\n      LogUtil.warn('MidiQOL is not active');\n      return;\n    }\n    \n    let defaultConfig = {\n        consumeUsage: false,\n        consumeSpellSlot: false\n    };\n    let defaultOptions = {\n      // targetUuids: targets.map(i => i.document.uuid),\n      configureDialog: true,\n      // ignoreUserTargets: true,\n      workflowOptions: {\n        autoRollAttack: false,\n        autoFastAttack: false,\n        autoRollDamage: 'none',\n        autoFastDamage: false\n      }\n    };\n\n    // options = genericUtils.mergeObject(defaultOptions, options);\n    config = {...defaultConfig, ...config};\n    return await MidiQOL.completeItemUse(item, config, defaultOptions);\n  }\n\n  static async replaceDamage(workflow, formula, {ignoreCrit = false, damageType} = {}) {\n    formula = String(formula);\n    if (workflow.isCritical && !ignoreCrit) formula = await rollUtils.getCriticalFormula(formula, workflow.item.getRollData());\n    let roll = await new CONFIG.Dice.DamageRoll(formula).evaluate();\n\n    await workflow.setDamageRolls([roll]);\n    \n    return roll;\n  }\n}","import { LogUtil } from \"../LogUtil.mjs\";\nimport { MODULE_ID, ROLL_TYPES } from \"../../constants/General.mjs\";\n\n// Check if required D&D5e classes exist\nHooks.once(\"ready\", () => {\n  if (!dnd5e.applications.dice.DamageRollConfigurationDialog) {\n    LogUtil.warn(\"DamageRollConfigurationDialog not found in dnd5e.applications.dice\");\n  }\n});\n\n/**\n * Mixin that provides GM-specific functionality for roll configuration dialogs\n * @param {Class} Base - The base dialog class to extend\n * @returns {Class} The extended class with GM functionality\n */\nexport function GMRollConfigMixin(Base) {\n  return class extends Base {\n    constructor(config = {}, message = {}, options = {}) {\n      super(config, message, options);\n      \n      // Store GM-specific options\n      this.actors = options.actors || [];\n      this.sendRequest = options.defaultSendRequest ?? options.sendRequest ?? true;\n      this.showDC = options.showDC || false;\n      this.dcValue = options.dcValue || null;\n      \n      // Store roll type and key for re-renders\n      this.rollKey = options.rollKey || config.skill || config.ability || null;\n      this.rollTypeString = options.rollTypeString || null;\n      \n      // Store original window title and subtitle\n      this.windowTitle = options.window?.title || \"\";\n      this.windowSubtitle = options.window?.subtitle || \"\";\n    }\n    \n    /**\n     * Build a roll configuration from form data.\n     * Handles situational bonuses, ability selection, and DC values.\n     * @param {BasicRollConfiguration} config - Individual roll configuration from the rolls array\n     * @param {FormDataExtended} formData - Data from the dialog form\n     * @param {number} index - Index of this roll in the rolls array\n     * @returns {BasicRollConfiguration} The modified individual roll configuration\n     * @protected\n     * @override\n     */\n    _buildConfig(config, formData, index) {\n      // Extract ability from form data if present (for skill/tool dialogs)\n      const abilityFromForm = formData?.get(\"ability\");\n      const dcFromForm = formData?.get(\"dc\");\n      \n      // Handle situational bonus\n      const situational = formData?.get(`rolls.${index}.situational`);\n      LogUtil.log(`_buildConfig`, [situational, formData, config]);\n      if (situational && (config.situational !== false)) {\n        if (!config.parts) config.parts = [];\n        config.parts.push(\"@situational\");\n        if (!config.data) config.data = {};\n        config.data.situational = situational;\n      }else if (config.parts) {\n        // Remove @situational if no value provided\n        const idx = config.parts.indexOf(\"@situational\");\n        if (idx !== -1) config.parts.splice(idx, 1);\n      }\n      \n      // If ability is in form data, update the config\n      if (abilityFromForm) {\n        config.ability = abilityFromForm;\n        // Also update this.config.ability to persist the selection\n        this.config.ability = abilityFromForm;\n      }\n      \n      const result = super._buildConfig(config, formData, index);\n      \n      // Apply DC if we have one\n      if (dcFromForm) {\n        const dcValue = parseInt(dcFromForm);\n        if (!isNaN(dcValue)) {\n          result.options = result.options || {};\n          result.options.target = dcValue;\n        }\n      } else if (this.dcValue !== undefined && this.dcValue !== null) {\n        result.options = result.options || {};\n        result.options.target = this.dcValue;\n      }\n      \n      LogUtil.log(`${this.constructor.name}._buildConfig`, [this.config, formData, result]);\n      return result;\n    }\n    \n    /**\n     * Handle form changes to capture GM-specific fields.\n     * @param {Object} formConfig - The form configuration object\n     * @param {Event} event - The change event\n     * @protected\n     * @override\n     */\n    _onChangeForm(formConfig, event) {\n      super._onChangeForm(formConfig, event);\n      \n      // Capture the current state of our custom fields before re-render\n      const sendRequestCheckbox = this.element.querySelector('input[name=\"crlngn-send-request\"]');\n      if (sendRequestCheckbox) {\n        this.sendRequest = sendRequestCheckbox.checked;\n      }\n      \n      const dcInput = this.element.querySelector('input[name=\"dc\"]');\n      if (dcInput && dcInput.value) {\n        this.dcValue = parseInt(dcInput.value) || null;\n      }\n    }\n    \n    /**\n     * Finalize rolls based on the action button clicked.\n     * @param {string} action - The action button that was clicked\n     * @returns {D20Roll[]} Array of finalized rolls ready for execution\n     * @protected\n     * @override\n     */\n    _finalizeRolls(action) {\n      const finalizedRolls = super._finalizeRolls(action);\n      LogUtil.log(`_finalizeRolls`, [finalizedRolls]);\n      \n      // Apply DC if we have one stored\n      if (this.dcValue !== undefined && this.dcValue !== null) {\n        for (const roll of finalizedRolls) {\n          roll.options.target = this.dcValue;\n        }\n      }\n      \n      // Store our custom properties\n      this.config.sendRequest = this.sendRequest;\n      \n      return finalizedRolls;\n    }\n    \n    /**\n     * Handle post-render actions for the dialog.\n     * Triggers initial formula rebuild if there's a situational bonus.\n     * @param {ApplicationRenderContext} context - The render context.\n     * @param {HandlebarsRenderOptions} options - Rendering options.\n     * @returns {Promise<void>}\n     * @protected\n     * @override\n     */\n    async _onRender(context, options) {\n      await super._onRender(context, options);\n      \n      // If we have initial situational bonus, trigger a rebuild to update the formula\n      if (this.config.rolls?.[0]?.data?.situational || this.config.situational) {\n        LogUtil.log(`${this.constructor.name}._onRender`, ['Triggering rebuild for initial situational bonus']);\n        // Use a small delay to ensure the form is fully rendered\n        setTimeout(() => {\n          this.rebuild();\n        }, 100);\n      }\n    }\n  };\n}\n\n/**\n * GM Roll Configuration Dialog\n * Extends the standard D&D5e roll configuration dialogs to add DC field and send request toggle\n */\nexport class GMRollConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.D20RollConfigurationDialog) {\n  /**\n   * Create a new GM Roll Configuration Dialog.\n   * @param {BasicRollProcessConfiguration} [config={}] - Process configuration containing rolls array of BasicRollConfiguration objects.\n   * @param {BasicRollMessageConfiguration} [message={}] - Message configuration for chat output.\n   * @param {BasicRollConfigurationDialogOptions} [options={}] - Dialog rendering options.\n   * @param {Actor[]} [options.actors] - Array of actors this roll is being made for.\n   * @param {boolean} [options.sendRequest] - Whether to send this as a roll request to players.\n   * @param {boolean} [options.showDC] - Whether to show the DC input field.\n   * @param {string} [options.rollKey] - The specific roll key (e.g., \"str\" for strength save).\n   * @param {typeof BasicRoll} [options.rollType] - The roll class to use (D20Roll, DamageRoll, etc.).\n   * @param {string} [options.rollTypeString] - The roll type as a string for identification.\n   * @param {object} [options.window] - Window configuration options.\n   * @param {string} [options.window.title] - The window title.\n   * @param {string} [options.window.subtitle] - The window subtitle.\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    super(config, message, options);\n    \n    LogUtil.log('constructor - initializing GM Dialog', [config, message, options]);\n  }\n  \n  /**\n   * Default rendering options for the GM roll configuration dialog.\n   * Extends the parent's default options to add custom CSS classes.\n   * @returns {object} The default options object.\n   * @override\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Get the window title for the dialog.\n   * Uses the window title from options if provided, otherwise falls back to parent implementation.\n   * The parent class constructs the title from options.window.title or uses a default localized string.\n   * @returns {string} The localized window title\n   * @override\n   */\n  get title() {\n    return this.windowTitle || super.title;\n  }\n  \n  /**\n   * Prepare the configuration data for rendering the dialog.\n   * This method is called internally by the parent class during rendering.\n   * Extends parent to add DC and send request options. The parent method prepares\n   * advantage/disadvantage toggles, roll mode selector, and situational bonus field.\n   * @param {BasicRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration containing rolls array\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration with rendering options\n   * @param {BasicRollMessageConfiguration} message - Message configuration for chat output\n   * @returns {Object} The prepared configuration data for rendering with added fields:\n   *   - showDC: Whether to display the DC input field\n   *   - dcValue: The current DC value if set\n   *   - sendRequest: Whether rolls should be sent to players\n   *   - actorCount: Number of actors this roll applies to\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare the rendering context for a specific dialog part.\n   * Adds GM-specific data like DC value and send request option to the configuration part.\n   * The parent method builds the base context for each part (\"configuration\", \"formulas\", \"buttons\").\n   * @param {string} partId - The ID of the part being prepared (\"configuration\", \"formulas\", \"buttons\")\n   * @param {ApplicationRenderContext} context - The rendering context to modify\n   * @param {HandlebarsRenderOptions} options - Options which configure application rendering behavior\n   * @returns {Promise<ApplicationRenderContext>} The modified context with GM-specific data added to configuration part:\n   *   - showDC: Whether to display the DC input field\n   *   - dcValue: The current DC value if set\n   *   - sendRequest: Whether rolls should be sent to players\n   *   - actorCount: Number of actors this roll applies to\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    LogUtil.log('_preparePartContext', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render actions for the dialog.\n   * Injects custom GM fields (DC input, send request checkbox) into the dialog after rendering.\n   * Also attaches event listeners and triggers initial formula rebuild if needed.\n   * @param {ApplicationRenderContext} context - The render context.\n   * @param {HandlebarsRenderOptions} options - Rendering options.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    LogUtil.log('_onRender', [context, options]);\n    super._onRender(context, options);\n    \n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas').parentNode;\n    // }\n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons.\n   * Sets up click handlers for the advantage mode toggle buttons.\n   * Currently logs the action but does not implement custom behavior.\n   * @private\n   */\n  _attachButtonListeners() {\n    LogUtil.log('_attachButtonListeners', [this.element]);\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  \n  /**\n   * Static method to create and display the GM roll configuration dialog.\n   * Handles dialog creation for various roll types with appropriate configuration.\n   * Creates a BasicRollProcessConfiguration and shows dialog for user configuration.\n   * @param {Actor[]|string[]} actors - Array of Actor documents or actor IDs to roll for\n   * @param {string} rollType - The type of roll (e.g., \"save\", \"ability\", \"skill\", \"tool\")\n   * @param {string} rollKey - The specific roll key (e.g., \"str\" for strength, \"athletics\" for skill)\n   * @param {Object} options - Additional options for dialog configuration\n   * @param {boolean} [options.defaultSendRequest=true] - Default state for send request toggle\n   * @param {number} [options.dcValue] - Initial DC value\n   * @param {boolean} [options.advantage] - Whether to roll with advantage\n   * @param {boolean} [options.disadvantage] - Whether to roll with disadvantage\n   * @param {string} [options.rollMode] - Roll visibility mode\n   * @param {string} [options.situational] - Situational bonus formula\n   * @returns {Promise<BasicRollProcessConfiguration|null>} Process configuration with rolls array, or null if cancelled\n   * @static\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    // Ensure valid actors\n    if (actors.length > 0 && typeof actors[0] === 'string') {\n      actors = actors.map(actorId => game.actors.get(actorId)).filter(a => a);\n    }\n    LogUtil.log('GMRollConfigDialog.getConfiguration', [\n      actors,\n      actors.map(a => a.name),\n      rollType,\n      rollKey,\n      options\n    ]);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Determine if we should show DC field\n    const showDC = [\n      ROLL_TYPES.SAVE,\n      ROLL_TYPES.SAVING_THROW,\n      ROLL_TYPES.ABILITY,\n      ROLL_TYPES.ABILITY_CHECK,\n      ROLL_TYPES.CONCENTRATION\n    ].includes(normalizedRollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Determine the appropriate roll class based on roll type\n    let rollClass = CONFIG.Dice.D20Roll;\n    if ([ROLL_TYPES.DAMAGE, ROLL_TYPES.HEALING].includes(normalizedRollType)) {\n      rollClass = CONFIG.Dice.DamageRoll || CONFIG.Dice.BasicRoll;\n    } else if ([ROLL_TYPES.FORMULA, ROLL_TYPES.CUSTOM, ROLL_TYPES.HIT_DIE].includes(normalizedRollType)) {\n      rollClass = CONFIG.Dice.BasicRoll;\n    }\n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add roll-specific data\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        rollConfig.skill = rollKey;\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        rollConfig.ability = rollKey;\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        rollConfig.ability = rollKey;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        // Use placeholder formula on input since actual denomination varies by actor\n        rollConfig.rolls[0].parts = [];\n        rollConfig.rolls[0].options.flavor = \"Hit Die\";\n        break;\n    }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => this._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        rollTypeString: normalizedRollType,  // Store the roll type string\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...options\n      }\n    };\n    \n    // Create and render the dialog\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Extract roll configuration from the first roll\n    let situational = firstRoll?.data?.situational || \"\";\n    let parts = firstRoll?.parts || [];\n    let target = firstRoll?.options?.target;\n    \n    // Build a proper BasicRollProcessConfiguration\n    const rollProcessConfig = {\n      rolls: [{\n        parts: [], // Don't add @situational here - D&D5e will add it when it sees data.situational\n        data: situational ? { situational } : {},\n        options: target ? { target } : {}\n      }],\n      subject: actor,\n      advantage,\n      disadvantage,\n      target,\n      // Custom flags for our module\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipDialog: options.skipDialogs || false,\n      chatMessage: true\n    };\n    \n    // Add roll mode if different from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      rollProcessConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add ability for skills/tools if it was selected and differs from default\n    if (result.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      // Check if this differs from the default ability for this skill/tool\n      const defaultAbility = actor.system.skills?.[rollKey]?.ability || CONFIG.DND5E.skills?.[rollKey]?.ability;\n      if (result.config.ability !== defaultAbility) {\n        rollProcessConfig.ability = result.config.ability;\n      }\n    }\n    \n    // Store additional metadata that handlers might need\n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    return rollProcessConfig;\n  }\n  \n  /**\n   * Check if actor is player owned\n   * @private\n   */\n  static _isPlayerOwned(actor) {\n    LogUtil.log('GMRollConfigDialog._isPlayerOwned', [actor]);\n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n  \n  /**\n   * Get a formatted title for the roll type\n   * @private\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {Actor} actor - The actor (used to get default ability for skills)\n   * @returns {string} The formatted title\n   */\n  static _getRollTitle(rollType, rollKey, actor) {\n    LogUtil.log('GMRollConfigDialog._getRollTitle', [rollType, rollKey, actor]);\n    \n    // Log detailed information about title generation\n    LogUtil.log('GMRollConfigDialog._getRollTitle - Detailed', {\n      rollType,\n      rollKey,\n      actorName: actor?.name,\n      actorAbilities: actor?.system?.abilities ? Object.keys(actor.system.abilities) : [],\n      actorSkills: actor?.system?.skills ? Object.keys(actor.system.skills) : [],\n      actorInitAbility: actor?.system?.attributes?.init?.ability\n    });\n    \n    let title = \"\";\n    \n    // Convert rollType to lowercase for comparison\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Log if rollKey is missing for certain types\n    if ([ROLL_TYPES.SAVE, ROLL_TYPES.ABILITY, ROLL_TYPES.ABILITY_CHECK].includes(normalizedRollType) && !rollKey) {\n      LogUtil.warn('Missing rollKey for roll type', [normalizedRollType, rollKey]);\n    }\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        // Get the default ability for this skill\n        const skill = actor?.system.skills?.[rollKey];\n        const defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n        const abilityLabel = CONFIG.DND5E.abilities[defaultAbility]?.label || defaultAbility;\n        // D&D5e format: \"Wisdom (Arcana) Check\"\n        title = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: abilityLabel \n        });\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        const saveAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.SavePromptTitle\", { ability: saveAbility });\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        const checkAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.AbilityPromptTitle\", { ability: checkAbility });\n        break;\n      case ROLL_TYPES.CONCENTRATION:\n        title = game.i18n.localize(\"DND5E.Concentration\");\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        title = game.i18n.format(\"DND5E.ToolPromptTitle\", { tool: toolLabel });\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        title = game.i18n.localize(\"DND5E.DeathSave\");\n        break;\n      case ROLL_TYPES.INITIATIVE: \n      case ROLL_TYPES.INITIATIVE_DIALOG: // Handle alternate case\n        title = game.i18n.localize(\"DND5E.Initiative\");\n        break;\n      default:\n        title = game.i18n.localize(\"DND5E.Roll\");\n    }\n    LogUtil.log('_getRollTitle', [normalizedRollType, title]);\n    \n    return title;\n  }\n\n  static _getSubtitle(actors = []) {\n    if (actors.length === 1) {\n      return actors[0].name;\n    } else if (actors.length > 1) {\n      return game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.multipleActors\");\n    } else {\n      return \"\";\n    }\n  }\n}\n\n/**\n * GM Hit Die Configuration Dialog\n * Extends base RollConfigurationDialog for hit die rolls\n * @extends {dnd5e.applications.dice.RollConfigurationDialog}\n */\nexport class GMHitDieConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.RollConfigurationDialog) {\n  /**\n   * Creates an instance of GMHitDieConfigDialog.\n   * Configures the dialog for hit die rolls with GM-specific options.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration\n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.defaultSendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    // Ensure rollType is set to BasicRoll for hit die\n    options.rollType = CONFIG.Dice.BasicRoll || Roll;\n    options.showDC = false; // No DC for hit die rolls\n    \n    super(config, message, options);\n    \n    LogUtil.log('constructor', [config, message, options]);\n  }\n  \n  /**\n   * Get default options for the hit die dialog.\n   * Extends parent options to add hit die specific CSS classes.\n   * @returns {Object} Default dialog options with \"hit-die-config\" class added\n   * @static\n   * @override\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\", \"hit-die-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * Overrides the formula display to show \"Hit Die (varies by actor)\" since\n   * different actors may have different hit die sizes.\n   * @param {BasicRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with custom formula display\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Override the formula display for hit die\n    data.formula = \"Hit Die (varies by actor)\";\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * Adds send request toggle and actor count to the configuration part.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n      // Override formula display\n      context.formula = \"Hit Die (varies by actor)\";\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * Injects the send request toggle field for GM control.\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    super._onRender(context, options);\n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject send request toggle\n    let configSection = this.element.querySelector('.rolls .formulas');\n    \n    if (configSection && this.actors.length > 0) {\n      const templateData = {\n        showDC: false,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n  }\n  \n  /**\n   * Process form submission data.\n   * Extracts and stores send request preference from the form.\n   * @param {SubmitEvent} event - The submission event\n   * @param {HTMLFormElement} form - The form element\n   * @param {FormDataExtended} formData - Processed form data\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _processSubmitData(event, form, formData) {\n    await super._processSubmitData(event, form, formData);\n    // Store send request preference\n    this.sendRequest = formData.get(\"crlngn-send-request\") !== \"false\";\n    \n    LogUtil.log('_processSubmitData', [formData, this.config]);\n  }\n  \n  /**\n   * Finalize rolls based on the action button clicked.\n   * Stores the send request flag in the configuration.\n   * @param {string} action - The action button clicked\n   * @returns {BasicRoll[]} Array of finalized rolls\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    const finalizedRolls = super._finalizeRolls(action);\n    \n    // Store our custom properties\n    this.config.sendRequest = this.sendRequest;\n    \n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the hit die configuration dialog.\n   * Creates appropriate hit die formulas based on each actor's available hit dice.\n   * @param {Actor[]} actors - Array of actors to roll hit dice for\n   * @param {string} rollType - The roll type (should be \"hitdie\")\n   * @param {string} rollKey - Not used for hit die rolls\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.defaultSendRequest=true] - Default state for send request toggle\n   * @returns {Promise<Object|null>} Configuration with rolls array and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    LogUtil.log('GMRollConfigDialog.getConfiguration', [actors, rollType, rollKey, options]);\n    \n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Build basic roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {\n          flavor: \"Hit Die Roll\"\n        }\n      }]\n    };\n    \n    const messageConfig = {\n      create: false,\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => GMRollConfigDialog._isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.BasicRoll || Roll,\n        window: {\n          title: game.i18n.localize(\"DND5E.HitDice\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...options\n      }\n    };\n    \n    // Create and render the dialog\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Extract roll configuration from the first roll\n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    // Build a proper BasicRollProcessConfiguration (matching GMRollConfigDialog)\n    const rollProcessConfig = {\n      rolls: [{\n        parts: [], // Don't add @situational here - D&D5e will add it\n        data: situational ? { situational } : {},\n        options: target ? { target } : {}\n      }],\n      subject: actors[0], // Use first actor as subject\n      advantage,\n      disadvantage,\n      target,\n      // Custom flags for our module\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipDialog: options.skipDialogs || false,\n      chatMessage: true\n    };\n    \n    // Add roll mode if different from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      rollProcessConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add ability if it was selected\n    if (result.config.ability) {\n      rollProcessConfig.ability = result.config.ability;\n    }\n    \n    return rollProcessConfig;\n  }\n}\n\n/**\n * GM Skill/Tool Configuration Dialog\n * Extends SkillToolRollConfigurationDialog for ability selection\n * @extends {dnd5e.applications.dice.SkillToolRollConfigurationDialog}\n */\nexport class GMSkillToolConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.SkillToolRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMSkillToolConfigDialog.\n   * Forces ability selection and adds GM-specific options.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.defaultSendRequest] - Override for sendRequest default\n   *   @param {boolean} [options.showDC=false] - Whether to show DC field\n   *   @param {number} [options.dcValue] - Initial DC value\n   *   @param {string} [options.rollKey] - The skill/tool key being rolled\n   *   @param {string} [options.rollTypeString] - Display name for the roll type\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    // Force ability selection\n    const skillConfig = foundry.utils.mergeObject(config, {\n      chooseAbility: true\n    });\n    \n    // Ensure rollType is set in options\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    \n    // SkillToolRollConfigurationDialog expects (config, message, options)\n    super(skillConfig, message, options);\n    \n    LogUtil.log('constructor', [config, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * Extends parent to add DC and send request options.\n   * The parent handles ability selection UI for skills and tools.\n   * @param {D20Roll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('_prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * Adds GM-specific context data to the configuration part.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    LogUtil.log('_preparePartContext', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * Injects GM-specific form fields (DC and send request toggle).\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    LogUtil.log('_onRender', [context, options]);\n    super._onRender(context, options);\n    \n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    // Try multiple selectors to find the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas fieldset');\n    // }\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('fieldset').parentNode;\n    // }\n    \n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons.\n   * Sets up click handlers for the advantage mode toggle buttons.\n   * Currently logs the action but does not implement custom behavior.\n   * @private\n   */\n  _attachButtonListeners() {\n    LogUtil.log('_attachButtonListeners', []);\n\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  \n  \n  /**\n   * Static method to create and display the skill/tool configuration dialog.\n   * Handles ability selection for skills and tools with GM-specific options.\n   * @param {Actor[]} actors - Array of actors to roll for\n   * @param {string} rollType - The roll type (\"skill\" or \"tool\")\n   * @param {string} rollKey - The specific skill/tool key (e.g., \"athletics\", \"thieves\")\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.defaultSendRequest=true] - Default state for send request toggle\n   * @param {number} [options.dcValue] - Initial DC value\n   * @param {string} [options.ability] - Override ability selection\n   * @returns {Promise<Object|null>} Configuration with rolls array, ability selection, and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    LogUtil.log('getConfiguration', [actors, rollType, rollKey, options]);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Determine if we should show DC field\n    const showDC = [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Skills and tools always use D20Roll\n    const rollClass = CONFIG.Dice.D20Roll;\n    \n    // Get the default ability for the skill or tool\n    let defaultAbility = null;\n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      const skill = actor.system.skills[rollKey];\n      defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      // For tools, check if the actor has a specific ability set for this tool\n      const tool = actor.system.tools?.[rollKey];\n      defaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n    }\n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      ability: defaultAbility,\n      chooseAbility: true,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add the appropriate property for skill or tool\n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      rollConfig.skill = rollKey;\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      rollConfig.tool = rollKey;\n    }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => GMRollConfigDialog._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...options\n      }\n    };\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Extract roll configuration from the first roll\n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    // Build a proper BasicRollProcessConfiguration (matching GMRollConfigDialog)\n    const rollProcessConfig = {\n      rolls: [{\n        parts: [], // Don't add @situational here - D&D5e will add it\n        data: situational ? { situational } : {},\n        options: target ? { target } : {}\n      }],\n      subject: actors[0], // Use first actor as subject\n      advantage,\n      disadvantage,\n      target,\n      // Custom flags for our module\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipDialog: options.skipDialogs || false,\n      chatMessage: true\n    };\n    \n    // Add roll mode if different from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      rollProcessConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add ability if it was selected\n    if (result.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      rollProcessConfig.ability = result.config.ability;\n    }\n    \n    // Store additional metadata that handlers might need\n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    return rollProcessConfig;\n  }\n}\n\n/**\n * GM Damage Roll Configuration Dialog\n * Extends DamageRollConfigurationDialog to add send request toggle\n * @extends {dnd5e.applications.dice.DamageRollConfigurationDialog}\n */\nexport class GMDamageConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.DamageRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMDamageConfigDialog.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.defaultSendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    // Ensure the dialog is configured to show\n    const dialogConfig = foundry.utils.mergeObject({\n      configure: true\n    }, config);\n    \n    super(dialogConfig, message, options);\n    \n    LogUtil.log('GMDamageConfigDialog.constructor', [dialogConfig, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"damage-roll\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * @param {DamageRoll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('GMDamageConfigDialog._prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  \n  /**\n   * Handle initial rendering of the dialog.\n   * @param {ApplicationRenderContext} context - The render context.\n   * @param {HandlebarsRenderOptions} options - Rendering options.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    await super._onRender(context, options);\n    \n    // Inject send request checkbox if we have actors\n    if (this.actors.length > 0) {\n      const buttonGroup = this.element.querySelector('.rolls + .dialog-buttons');\n      if (buttonGroup && !this.element.querySelector('.gm-roll-config-fields')) {\n        const wrapper = document.createElement('div');\n        wrapper.className = 'gm-roll-config-fields';\n        wrapper.innerHTML = `\n          <div class=\"form-group\">\n            <label class=\"checkbox\">\n              <input type=\"checkbox\" name=\"crlngn-send-request\" ${this.sendRequest ? 'checked' : ''}>\n              ${game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.ui.dialogs.sendRequestToPlayers\")}\n            </label>\n          </div>\n        `;\n        buttonGroup.insertAdjacentElement('beforebegin', wrapper);\n      }\n    }\n  }\n  \n  /**\n   * Get static roll configuration from dialog results.\n   * @param {Actor[]} actors - The actors for this roll\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - Optional key for the specific roll\n   * @param {Object} options - Dialog options\n   * @param {BasicRollProcessConfiguration} originalConfig - Original roll configuration\n   * @param {BasicRollDialogConfiguration} originalDialog - Original dialog configuration\n   * @returns {Promise<Object|null>} The dialog result or null if cancelled\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}, originalConfig = {}, originalDialog = {}) {\n    LogUtil.log('GMDamageConfigDialog.getConfiguration', [actors, rollType, rollKey, options, originalConfig, originalDialog]);\n    \n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Normalize rollType\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Build roll configuration\n    const rollConfig = {\n      subject: originalConfig.subject, // Preserve the activity/item reference\n      data: actor.getRollData(),\n      critical: originalConfig.critical || false,\n      rolls: originalConfig.rolls || [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Message configuration\n    const messageConfig = {\n      create: false, // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    const { position, ...dialogOptions } = originalDialog?.options || {};\n    \n    // Dialog configuration\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => GMRollConfigDialog._isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.DamageRoll || CONFIG.Dice.BasicRoll,\n        rollTypeString: normalizedRollType,\n        window: {\n          title: game.i18n.localize(\"DND5E.DamageRoll\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        ...dialogOptions,\n        ...options\n      }\n    };\n    \n    // Create and render the dialog\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        resolve({\n          rolls: app.rolls,\n          sendRequest: app.sendRequest,\n          advantage: app.config.advantage,\n          disadvantage: app.config.disadvantage,\n          critical: app.config.critical,\n          rollMode: app.message?.rollMode\n        });\n      }, { once: true });\n      app.render(true);\n    });\n    \n    // If dialog was cancelled (no rolls), return null\n    if (!result.rolls?.length) {\n      LogUtil.log('GMDamageConfigDialog.getConfiguration - cancelled');\n      return null;\n    }\n    \n    LogUtil.log('GMDamageConfigDialog.getConfiguration - result', [result]);\n    \n    // Build the roll process configuration to return\n    const rollProcessConfig = {\n      rolls: result.rolls,\n      sendRequest: result.sendRequest,\n      critical: result.critical,\n      skipDialog: options.skipDialogs || false,\n      chatMessage: true\n    };\n    \n    // Add roll mode if different from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.rollMode && result.rollMode !== defaultRollMode) {\n      rollProcessConfig.rollMode = result.rollMode;\n    }\n    \n    // Store additional metadata\n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    LogUtil.log('GMDamageConfigDialog.getConfiguration - final result', [rollProcessConfig]);\n    \n    return rollProcessConfig;\n  }\n}\n\n/**\n * GM Attack Roll Configuration Dialog\n * Extends AttackRollConfigurationDialog to add send request toggle\n * @extends {dnd5e.applications.dice.AttackRollConfigurationDialog}\n */\nexport class GMAttackConfigDialog extends GMRollConfigMixin(dnd5e.applications.dice.AttackRollConfigurationDialog) {\n  /**\n   * Creates an instance of GMAttackConfigDialog.\n   * @param {BasicRollProcessConfiguration} config - Roll configuration\n   * @param {BasicRollMessageConfiguration} message - Chat message configuration  \n   * @param {BasicRollConfigurationDialogOptions} options - Dialog options including:\n   *   @param {Actor[]} [options.actors=[]] - Array of actors being rolled for\n   *   @param {boolean} [options.sendRequest=true] - Whether to send roll to players by default\n   *   @param {boolean} [options.defaultSendRequest] - Override for sendRequest default\n   */\n  constructor(config = {}, message = {}, options = {}) {\n    super(config, message, options);\n    \n    LogUtil.log('GMAttackConfigDialog.constructor', [config, message, options]);\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for rendering.\n   * @param {D20Roll} roll - The roll being configured\n   * @param {BasicRollProcessConfiguration} config - Roll process configuration\n   * @param {BasicRollDialogConfiguration} dialog - Dialog configuration\n   * @param {BasicRollMessageConfiguration} message - Message configuration\n   * @returns {Object} Configuration data with GM-specific fields added\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    LogUtil.log('GMAttackConfigDialog._prepareConfigurationData', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context for rendering specific dialog parts.\n   * @param {string} partId - The part ID being rendered\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<ApplicationRenderContext>} Modified context\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * Handle post-render tasks for the dialog.\n   * @param {ApplicationRenderContext} context - The render context\n   * @param {HandlebarsRenderOptions} options - Rendering options\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _onRender(context, options) {\n    await super._onRender(context, options);\n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Find the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    \n    if (configSection && this.actors.length > 0) {\n      const templateData = {\n        showDC: false, // Attack rolls don't use DC\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n  }\n  \n  /**\n   * Override _finalizeRolls to prevent re-rendering when sendRequest is toggled off\n   * @param {string} action - The action button clicked\n   * @returns {BasicRoll[]} Array of finalized rolls\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    // Store send request preference before calling parent\n    this.config.sendRequest = this.sendRequest;\n    \n    // For attack dialogs, we need to ensure we handle the case properly\n    // when sendRequest is false to prevent re-rendering\n    if (!this.sendRequest && this.config.isRollRequest) {\n      // Reset isRollRequest to prevent interception\n      this.config.isRollRequest = false;\n    }\n    \n    return super._finalizeRolls(action);\n  }\n  \n  /**\n   * Static method to create and display the attack configuration dialog.\n   * SIMPLIFIED VERSION: Matches ability check pattern without attack-specific configs\n   * @param {Actor[]} actors - Array of actors to roll for\n   * @param {string} rollType - The roll type (\"attack\")\n   * @param {string} rollKey - The item ID for the attack\n   * @param {Object} options - Additional options\n   * @param {boolean} [options.defaultSendRequest=true] - Default state for send request toggle\n   * @param {Object} originalConfig - The original roll configuration from the intercepted roll\n   * @param {Object} originalDialog - The original dialog configuration from the intercepted roll\n   * @returns {Promise<Object|null>} Configuration with rolls array and sendRequest flag, or null if cancelled\n   * @static\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}, originalConfig = {}, originalDialog = {}) {\n    LogUtil.log('GMAttackConfigDialog.getConfiguration', [actors, rollType, rollKey, options, originalConfig, originalDialog]);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Normalize rollType\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Build roll configuration - only include what we need\n    const rollConfig = {\n      subject: originalConfig.subject || actor, // Preserve the activity reference\n      data: actor.getRollData(),\n      rollMode: CONST.DICE_ROLL_MODES.PUBLIC,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}  // Let the dialog handle attack options\n      }]\n    };\n\n    // const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    // if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n    //   rollProcessConfig.rollMode = result.message.rollMode;\n    // }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    const { position, ...dialogOptions } = originalDialog?.options || {};\n    // Dialog configuration - merge with original dialog options to preserve attack-specific options\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => GMRollConfigDialog._isPlayerOwned(a)),\n        rollKey,\n        rollType: CONFIG.Dice.D20Roll,  // Attack rolls use D20\n        rollTypeString: normalizedRollType,\n        window: {\n          title: game.i18n.localize(\"DND5E.Attack\"),\n          subtitle: GMRollConfigDialog._getSubtitle(actors)\n        },\n        // Merge original dialog options to preserve ammunitionOptions, attackModeOptions, masteryOptions\n        // but excluding position to prevent NaN values\n        ...dialogOptions,\n        ...options\n      }\n    };\n    \n    // Create and render the dialog\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    LogUtil.log('GMAttackConfigDialog.getConfiguration', [app.sendRequest]);\n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Extract roll configuration from the first roll\n    const situational = firstRoll?.data?.situational || \"\";\n    const target = firstRoll?.options?.target;\n    \n    // Build a proper BasicRollProcessConfiguration (matching ability check pattern)\n    const rollProcessConfig = {\n      rolls: [{\n        parts: [], // Don't add @situational here - D&D5e will add it\n        data: situational ? { situational } : {},\n        options: {\n          ...(target && { target }),\n          // Include attack-specific options from the roll\n          ...(firstRoll?.options?.ammunition && { ammunition: firstRoll.options.ammunition }),\n          ...(firstRoll?.options?.attackMode && { attackMode: firstRoll.options.attackMode }),\n          ...(firstRoll?.options?.mastery !== undefined && { mastery: firstRoll.options.mastery })\n        }\n      }],\n      subject: originalConfig.subject || actor, // Preserve the original activity\n      advantage,\n      disadvantage,\n      target,\n      // Custom flags for our module\n      sendRequest: result.sendRequest,\n      isRollRequest: result.sendRequest,\n      skipDialog: options.skipDialogs || false,\n      chatMessage: true\n    };\n    \n    // Add roll mode if different from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      rollProcessConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Store additional metadata that handlers might need\n    rollProcessConfig.rollTitle = dialogConfig.options.window.title;\n    rollProcessConfig.rollType = normalizedRollType;\n    rollProcessConfig.rollKey = rollKey;\n    \n    LogUtil.log('GMAttackConfigDialog.getConfiguration - SIMPLIFIED result', [rollProcessConfig]);\n    \n    return rollProcessConfig;\n  }\n}","import { LogUtil } from \"../LogUtil.mjs\";\n\n/**\n * Helper functions for roll handling\n */\nexport const RollHelpers = {\n  /**\n   * Add situational bonus to a roll configuration\n   * @param {BasicRollProcessConfiguration} config - The process configuration with rolls array\n   * @param {string} situational - The situational bonus formula\n   * @returns {BasicRollProcessConfiguration} The modified config\n   */\n  addSituationalBonus(config, situational) {\n    LogUtil.log(\"Config before adding bonus:\", [situational, config.rolls?.[0]]);\n    if (situational && config.rolls?.[0]) {\n      // Ensure the roll has proper structure\n      if (!config.rolls[0].parts) config.rolls[0].parts = [];\n      if (!config.rolls[0].data) config.rolls[0].data = {};\n      \n      config.rolls[0].data.situational = situational;\n      config.situational = true;\n      config.rolls[0].parts.push(\"@situational\");\n      \n      LogUtil.log(\"Config after adding bonus:\", [config.rolls?.[0]]);\n    }\n    return config;\n  },\n\n  /**\n   * Build base configuration for all roll types\n   * @param {Object} requestData - The roll request data\n   * @param {Object} requestData.config - Configuration from the request\n   * @param {boolean} [requestData.config.advantage] - Roll with advantage\n   * @param {boolean} [requestData.config.disadvantage] - Roll with disadvantage\n   * @param {string} [requestData.config.situational] - Situational bonus formula\n   * @param {number} [requestData.config.target] - DC value\n   * @param {string} [requestData.config.requestedBy] - Name of requester\n   * @param {BasicRollConfiguration} rollConfig - Individual roll configuration with parts[], data{}, options{}\n   * @param {string[]} [rollConfig.parts=[]] - Roll formula parts\n   * @param {Object} [rollConfig.data={}] - Roll data for formula resolution\n   * @param {Object} [rollConfig.options={}] - Roll options\n   * @param {Object} [additionalConfig={}] - Additional configuration specific to the roll type\n   * @returns {BasicRollProcessConfiguration} The process configuration for D&D5e actor roll methods\n   */\n  buildRollConfig(requestData, rollConfig, additionalConfig = {}) {\n    // Build a proper BasicRollProcessConfiguration\n    const config = {\n      rolls: [{\n        parts: rollConfig.parts || [],\n        data: rollConfig.data || {},\n        options: rollConfig.options || {}\n      }],\n      advantage: requestData.config.advantage || false,\n      disadvantage: requestData.config.disadvantage || false,\n      target: requestData.config.target,\n      subject: null, // Will be set by the actor\n      chatMessage: true,\n      legacy: false,\n      ...additionalConfig\n    };\n    \n    // Add situational bonus if present\n    const situational = requestData.config.situational || rollConfig.data.situational || '';\n    if (situational) {\n      this.addSituationalBonus(config, situational);\n    }\n    \n    return this.ensureRollFlags(config, requestData);\n  },\n\n  /**\n   * Ensure roll config has the required flags to prevent re-interception\n   * @param {BasicRollProcessConfiguration} config - The process configuration\n   * @param {Object} requestData - The roll request data\n   * @param {Object} requestData.config - Configuration object\n   * @param {string} [requestData.config.requestedBy] - Name of requester\n   * @returns {BasicRollProcessConfiguration} The updated config with required flags\n   */\n  ensureRollFlags(config, requestData) {\n    config.isRollRequest = game.user.isGM ? false : true;\n    config._showRequestedBy = true;\n    config._requestedBy = requestData.config.requestedBy || 'GM';\n\n    return config;\n  }\n};\n\n","import { MODULE } from \"../../constants/General.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\n\n/**\n * Custom Roll Dialog - ApplicationV2 component for custom roll formulas\n */\nexport class CustomRollDialog extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2) {\n  constructor(options = {}) {\n    super(options);\n    this.formula = options.formula || \"\";\n    this.readonly = options.readonly || false;\n    this.actor = options.actor;\n    this.callback = options.callback;\n    this.diceCounts = {};\n  }\n\n  /**\n   * Default application configuration\n   */\n  static DEFAULT_OPTIONS = {\n    id: \"crlngn-custom-roll-dialog\",\n    classes: [\"crlngn-rolls-dialog\", \"crlngn-custom-roll-dialog\"],\n    tag: \"div\",\n    window: {\n      title: \"CRLNGN_ROLLS.ui.dialogs.customRollTitle\",\n      icon: \"fas fa-dice-d20\",\n      resizable: false,\n      positioned: true,\n      frame: true\n    },\n    position: {\n      width: 420,\n      height: \"auto\"\n    }\n  };\n  \n  /**\n   * Override to handle action clicks\n   */\n  _onClickAction(event, target) {\n    const action = target.dataset.action;\n    switch (action) {\n      case \"rollDice\":\n        return this.rollDice(event, target);\n      case \"addDie\":\n        return this.addDie(event, target);\n      case \"cancel\":\n        return this.cancel(event, target);\n    }\n  }\n\n  /**\n   * Prepare application rendering context\n   */\n  async _prepareContext(options = {}) {\n    const context = await super._prepareContext(options);\n    return {\n      ...context,\n      formula: this.formula,\n      readonly: this.readonly\n    };\n  }\n\n  /**\n   * Define template parts\n   */\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/custom-roll-dialog.hbs`\n    },\n    footer: {\n      template: `modules/${MODULE.ID}/templates/custom-roll-dialog-footer.hbs`\n    }\n  };\n\n  /**\n   * Add event listeners\n   */\n  _attachPartListeners(partId, htmlElement, options) {\n    super._attachPartListeners(partId, htmlElement, options);\n    \n    const formulaInput = htmlElement.querySelector('#custom-roll-formula');\n    const validationMessage = htmlElement.querySelector('#formula-validation-message');\n    \n    if (formulaInput && !this.readonly) {\n      // Update internal formula on input change and validate\n      formulaInput.addEventListener('input', (event) => {\n        this.formula = event.target.value.trim();\n        this.updateValidationMessage(validationMessage);\n      });\n      \n      // Validate on initial load if there's a formula\n      if (this.formula) {\n        this.updateValidationMessage(validationMessage);\n      }\n    }\n  }\n  \n  /**\n   * Update the validation message based on formula validity\n   * @param {HTMLElement} messageElement - The validation message element\n   */\n  updateValidationMessage(messageElement) {\n    if (!messageElement) return;\n    \n    if (!this.formula) {\n      messageElement.textContent = '&nbsp;';\n      messageElement.classList.remove('error', 'success');\n      return;\n    }\n    \n    const isValid = this.validateFormula(this.formula);\n    \n    if (isValid) {\n      messageElement.textContent = game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.formulaValid\");\n      messageElement.classList.remove('error');\n      messageElement.classList.add('success');\n    } else {\n      messageElement.textContent = game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.formulaInvalid\");\n      messageElement.classList.remove('success');\n      messageElement.classList.add('error');\n    }\n  }\n\n  /**\n   * Handle dice button click\n   * @param {Event} event\n   * @param {HTMLElement} target\n   */\n  addDie(event, target) {\n    const die = target.dataset.die;\n    \n    // Get current formula from input field\n    const formulaInput = this.element.querySelector('#custom-roll-formula');\n    if (!formulaInput) return;\n    \n    const currentFormula = formulaInput.value.trim();\n    \n    // Parse the current formula to consolidate dice\n    if (currentFormula) {\n      // Regular expression to find dice expressions (e.g., 2d6, d8, 1d20)\n      const diceRegex = /(\\d*)d(\\d+)/g;\n      const diceMap = new Map();\n      \n      // Parse existing dice in the formula\n      let remainingFormula = currentFormula;\n      let match;\n      \n      while ((match = diceRegex.exec(currentFormula)) !== null) {\n        const count = parseInt(match[1] || '1');\n        const dieType = match[2];\n        diceMap.set(dieType, (diceMap.get(dieType) || 0) + count);\n        remainingFormula = remainingFormula.replace(match[0], '').trim();\n      }\n      \n      // Add the new die\n      const newDieType = die.substring(1); // Remove 'd' prefix\n      diceMap.set(newDieType, (diceMap.get(newDieType) || 0) + 1);\n      \n      // Rebuild the formula\n      const diceParts = [];\n      for (const [dieType, count] of diceMap) {\n        diceParts.push(`${count}d${dieType}`);\n      }\n      \n      // Clean up remaining formula (remove extra + signs)\n      remainingFormula = remainingFormula.replace(/^\\+\\s*|\\s*\\+\\s*$|\\s*\\+\\s*\\+/g, '').trim();\n      \n      // Combine dice and remaining formula\n      if (remainingFormula && remainingFormula !== '+') {\n        this.formula = `${diceParts.join(' + ')} + ${remainingFormula}`;\n      } else {\n        this.formula = diceParts.join(' + ');\n      }\n    } else {\n      // If empty, just add the die\n      this.formula = `1${die}`;\n    }\n    \n    // Update the input field\n    formulaInput.value = this.formula;\n    \n    // Trigger input event to update validation\n    formulaInput.dispatchEvent(new Event('input'));\n  }\n\n  /**\n   * Validate the formula using Roll.validate\n   * @param {string} formula\n   * @returns {boolean}\n   */\n  validateFormula(formula) {\n    if (!formula || formula.trim() === \"\") return false;\n    \n    try {\n      // Use Roll.validate to check if the formula is valid\n      return Roll.validate(formula);\n    } catch (error) {\n      // If Roll.validate doesn't exist or throws, try creating a roll\n      try {\n        new Roll(formula, this.actor?.getRollData() || {});\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Handle roll button click\n   */\n  async rollDice() {\n    LogUtil.log('rollDice');\n    \n    // Validate the formula\n    if (!this.validateFormula(this.formula)) {\n      ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {\n        formula: this.formula || \"empty\"\n      }));\n      return;\n    }\n    \n    // Call the callback if provided\n    if (this.callback) {\n      await this.callback(this.formula);\n    }\n    \n    this.close();\n  }\n\n  /**\n   * Handle cancel button click\n   */\n  cancel() {\n    this.close();\n  }\n\n  /**\n   * Show the dialog and return a promise for the formula\n   * @param {Object} options\n   * @returns {Promise<string|null>}\n   */\n  static async prompt(options = {}) {\n    return new Promise((resolve) => {\n      const dialog = new this({\n        ...options,\n        callback: (formula) => resolve(formula)\n      });\n      \n      dialog.addEventListener(\"close\", () => {\n        // If closed without a formula, resolve with null\n        if (!dialog._resolved) {\n          resolve(null);\n        }\n      });\n      \n      dialog.render(true);\n    });\n  }\n\n  /**\n   * Override close to track resolution\n   */\n  async close(options = {}) {\n    this._resolved = true;\n    return super.close(options);\n  }\n}","import { ROLL_TYPES, MODULE_ID } from \"../constants/General.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\nimport { RollHelpers } from \"./helpers/RollHelpers.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { CustomRollDialog } from \"./dialogs/CustomRollDialog.mjs\";\n\nexport const RollHandlers = {\n  ability: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    LogUtil.log('RollHandlers.ability #1', [rollConfig]);\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      ability: requestData.rollKey\n    });\n    LogUtil.log('RollHandlers.ability #2', [config.rolls?.[0]]);\n    await actor.rollAbilityCheck(config, dialogConfig, messageConfig);\n  },\n  \n  abilitycheck: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.ability(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  save: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      ability: requestData.rollKey\n    });\n    await actor.rollSavingThrow(config, dialogConfig, messageConfig);\n  },\n  \n  savingthrow: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.save(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  skill: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      skill: requestData.rollKey,\n      chooseAbility: true,\n      ability: requestData.config.ability || undefined\n    });\n    await actor.rollSkill(config, dialogConfig, messageConfig);\n  },\n\n  tool: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      tool: requestData.rollKey,\n      chooseAbility: true,\n      ability: requestData.config.ability || undefined\n    });\n    await actor.rollToolCheck(config, dialogConfig, messageConfig);\n  },\n\n  concentration: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig);\n    await actor.rollConcentration(config, dialogConfig, messageConfig);\n  },\n\n  attack: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.ATTACK, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  damage: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.DAMAGE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  itemsave: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleActivityRoll(actor, ROLL_TYPES.ITEM_SAVE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  initiative: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    // Initiative rolls require an active combat\n    if (!game.combat) {\n      ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n      return;\n    }\n    \n    const config = RollHelpers.buildRollConfig(requestData, rollConfig);\n    LogUtil.log(\"initiative #1\", [requestData, rollConfig, config])\n    // Store situational bonus temporarily on actor for the hook to pick up\n    const situational = requestData.config.situational || rollConfig.data.situational || '';\n    if (situational && dialogConfig.configure && !game.user.isGM) {\n      actor._initiativeSituationalBonus = situational;\n    }\n    \n    if (dialogConfig.configure && !game.user.isGM) {\n      await actor.rollInitiativeDialog(config); // Player side with dialog\n    } else {\n      await actor.rollInitiative({createCombatants: true}, config); // GM can skip dialog\n    }\n  },\n  \n  // Alias for INITIATIVE_DIALOG\n  initiativedialog: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return RollHandlers.initiative(actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  deathsave: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildRollConfig(requestData, rollConfig);\n    await actor.rollDeathSave(config, dialogConfig, messageConfig);\n  },\n\n  hitdie: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    dialogConfig.configure = game.user.isGM ? dialogConfig.configure : true;\n    \n    const config = RollHelpers.buildRollConfig(requestData, rollConfig, {\n      denomination: requestData.rollKey // The hit die denomination (d6, d8, etc.)\n    });\n    await actor.rollHitDie(config, dialogConfig, messageConfig);\n  },\n\n  custom: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHandlers.handleCustomRoll(actor, requestData);\n  },\n\n\n  /**\n   * Handle activity-based rolls (attack, damage, item save)\n   * SIMPLIFIED VERSION: No attack-specific options\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll from ROLL_TYPES\n   * @param {Object} requestData - The roll request data\n   * @param {string} requestData.rollKey - The item ID\n   * @param {string} requestData.activityId - The activity ID\n   * @param {Object} requestData.config - Configuration\n   * @param {string} [requestData.config.situational] - Situational bonus formula\n   * @param {BasicRollConfiguration} rollConfig - Individual roll configuration\n   * @param {BasicRollDialogConfiguration} dialogConfig - Dialog configuration\n   * @param {BasicRollMessageConfiguration} messageConfig - Message configuration\n   * @returns {Promise<void>}\n   */\n  async handleActivityRoll(actor, rollType, requestData, rollConfig, dialogConfig, messageConfig) {\n    LogUtil.log('RollHandlers.handleActivityRoll', [rollType, requestData, rollConfig]);\n    if (requestData.rollKey) {\n      // Build a proper roll configuration using buildRollConfig\n      // This will properly structure the rolls array with situational bonus\n      const processConfig = RollHelpers.buildRollConfig(requestData, rollConfig);\n      \n      // Build the activity configuration\n      // For attack rolls, extract attack options from rolls[0].options and put them at top level\n      const rollOptions = processConfig.rolls?.[0]?.options || {};\n      const activityConfig = {\n        usage: {\n          ...requestData.config,\n          rolls: processConfig.rolls,\n          // Add attack-specific options at top level for D&D5e dialog\n          ...(rollOptions.attackMode && { attackMode: rollOptions.attackMode }),\n          ...(rollOptions.ammunition && { ammunition: rollOptions.ammunition }),\n          ...(rollOptions.mastery !== undefined && { mastery: rollOptions.mastery })\n        },\n        dialog: dialogConfig,\n        message: messageConfig\n      };\n      \n      LogUtil.log('handleActivityRoll - final activity config', [\n        activityConfig,\n        'situational:', activityConfig.usage?.rolls?.[0]?.data?.situational,\n        'roll options:', activityConfig.usage?.rolls?.[0]?.options,\n        'top-level attack options:', {\n          attackMode: activityConfig.usage?.attackMode,\n          ammunition: activityConfig.usage?.ammunition,\n          mastery: activityConfig.usage?.mastery\n        }\n      ]);\n      \n      await ActivityUtil.executeActivityRoll(\n        actor, \n        rollType, \n        requestData.rollKey, \n        requestData.activityId, \n        activityConfig\n      );\n    }\n  },\n\n  /**\n   * Handle a custom roll, creating a custom dialog\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {Object} requestData - The roll request data\n   * @param {string} requestData.rollKey - The roll formula\n   * @param {Object} requestData.config - Configuration object\n   * @param {string} [requestData.config.rollMode] - Roll visibility mode\n   * @param {string} [requestData.config.requestedBy] - Name of the requester\n   * @returns {Promise<void>}\n   */\n  async handleCustomRoll(actor, requestData) {\n    const formula = requestData.rollKey; // Formula is stored in rollKey\n    \n    // Show the dialog with the formula in readonly mode\n    const dialog = new CustomRollDialog({\n      formula: formula,\n      readonly: true,\n      actor: actor,\n      callback: async (confirmedFormula) => {\n        try {\n          const roll = new Roll(confirmedFormula, actor.getRollData());\n          \n          // Mark the roll to bypass any interceptors\n          roll.options = roll.options || {};\n          roll.options.isRollRequest = true;\n          \n          await roll.evaluate({async: true});\n          \n          // Post to chat with isRollRequest flag in message data\n          await roll.toMessage({\n            speaker: ChatMessage.getSpeaker({actor}),\n            flavor: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${ROLL_TYPES.CUSTOM}`),\n            rollMode: requestData.config.rollMode,\n            isRollRequest: true,\n            _showRequestedBy: true,\n            _requestedBy: requestData.config.requestedBy || 'GM'\n          });\n        } catch (error) {\n          ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula: confirmedFormula}));\n        }\n      }\n    });\n    \n    dialog.render(true);\n  },\n\n  /**\n   * Handle hit die recovery (used for refilling hit dice)\n   * @param {Actor5e} actor - The actor to recover hit dice for\n   * @returns {Promise<Object>} Result object with recovery details\n   */\n  async handleHitDieRecovery(actor) {\n    const result = foundry.utils.mergeObject({\n      type: \"long\",\n      deltas: {\n        hitDice: 0\n      },\n      newDay: false,\n      rolls: [],\n      updateData: {},\n      updateItems: []\n    }, {});\n    \n    if ( \"dhd\" in result ) result.deltas.hitDice = result.dhd;\n\n    actor._getRestHitDiceRecovery({ maxHitDice: actor.system.attributes.hd.max, type: \"long\" }, result);\n\n    result.dhd = result.deltas.hitDice;\n    result.longRest = true;\n\n    try {\n      if (result.updateData && Object.keys(result.updateData).length > 0) {\n        const updateResult = await actor.update(result.updateData, { isRest: false });\n      } else {\n        LogUtil.log('No actor updates to perform', []);\n      }\n      \n      if (result.updateItems && result.updateItems.length > 0) {\n        const itemUpdateResult = await actor.updateEmbeddedDocuments(\"Item\", result.updateItems, { isRest: false });\n      } else {\n        LogUtil.log('No item updates to perform', []);\n      }\n    } catch (error) {\n      LogUtil.error('Error during updates in handleHitDieRecovery:', [error]);\n      throw error;\n    }\n\n    LogUtil.log('handleHitDieRecovery #3', [result]);\n    // Return data summarizing the rest effects\n    return result;\n  }\n};","import { HOOKS_DND5E } from '../constants/Hooks.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { MODULE_ID, DEBUG_TAG, ROLL_TYPES } from '../constants/General.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog, GMHitDieConfigDialog, GMDamageConfigDialog, GMAttackConfigDialog } from './dialogs/GMRollConfigDialog.mjs';\nimport { RollHandlers } from './RollHandlers.mjs';\n/**\n * Handles intercepting D&D5e rolls on the GM side and redirecting them to players\n */\nexport class RollInterceptor {  \n  /**\n   * @type {Set<string>} - Set of registered hook IDs for cleanup\n   */\n  static registeredHooks = new Set();\n  \n  /**\n   * Initialize the roll interceptor\n   */\n  static initialize() {\n    LogUtil.log('RollInterceptor.initialize');\n    \n    // Only initialize for GM users\n    if (!game.user.isGM) return;\n    \n    this.registerHooks();\n  }\n  \n  /**\n   * Register all necessary hooks for roll interception\n   */\n  static registerHooks() {\n    LogUtil.log('RollInterceptor.registerHooks');\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, this._handlePreRoll.bind(this, ROLL_TYPES.ABILITY));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, this._handlePreRoll.bind(this, ROLL_TYPES.SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SKILL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.SKILL));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_TOOL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.TOOL));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._handlePreRoll.bind(this, ROLL_TYPES.ATTACK));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DAMAGE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE, this._handlePreRoll.bind(this, ROLL_TYPES.INITIATIVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG_V2, this._handlePreRoll.bind(this, ROLL_TYPES.INITIATIVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DEATH_SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.HIT_DIE));\n    \n  }\n  \n  /**\n   * Helper to register a hook and track it for cleanup\n   * @param {string} hookName \n   * @param {Function} handler \n   */\n  static _registerHook(hookName, handler) {\n    LogUtil.log('RollInterceptor._registerHook');\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.add({ hookName, hookId });\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterHooks() {\n    LogUtil.log('RollInterceptor.unregisterHooks');\n    for (const { hookName, hookId } of this.registeredHooks) {\n      Hooks.off(hookName, hookId);\n    }\n    this.registeredHooks.clear();\n  }\n\n  /**\n   * Handle pre-roll hooks to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Object} config - Roll configuration object (or Actor for initiative)\n   * @param {Object} dialog - Dialog options\n   * @param {Object} message - Message options\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRoll(rollType, config, dialog, message) {\n    // Only intercept on GM side\n    if (!game.user.isGM || config.isRollRequest === false) return;\n\n    const hookNames = config?.hookNames || dialog?.hookNames || message?.hookNames || [];\n    const isInitiativeRoll = hookNames.includes('initiativeDialog') || hookNames.includes('initiative');\n    \n    if(rollType === ROLL_TYPES.ATTACK){\n      LogUtil.log('RollInterceptor._handlePreRoll - is Attack roll', [config.subject?.item]);\n      const moduleFlags = config.subject?.item?.getFlag(MODULE_ID, 'tempAttackConfig');\n      if(moduleFlags){\n        LogUtil.log('RollInterceptor._handlePreRoll - found module flags, skipping interception', [moduleFlags]);\n        return;\n      }\n    }\n    \n    if(rollType === ROLL_TYPES.DAMAGE){\n      LogUtil.log('RollInterceptor._handlePreRoll - is Damage roll', [config]);\n      // Check if this damage roll is from a local execution\n      const moduleFlags = config.subject?.item?.getFlag(MODULE_ID, 'tempDamageConfig');\n      if(moduleFlags){\n        LogUtil.log('RollInterceptor._handlePreRoll - found module flags, skipping interception', [moduleFlags]);\n        return;\n      }\n    }\n    // Override rollType if this is actually an initiative roll\n    if (isInitiativeRoll && rollType === ROLL_TYPES.ABILITY) {\n      LogUtil.log('RollInterceptor._handlePreRoll - Overriding ability to initiative', [hookNames]);\n      rollType = ROLL_TYPES.INITIATIVE;\n    }\n    \n    // Check if this is a roll request to prevent loops\n    if (config?.isRollRequest || dialog?.isRollRequest || message?.isRollRequest) {\n      return;\n    }\n\n    let actor;\n    if (rollType === ROLL_TYPES.INITIATIVE && config instanceof Actor) {\n      actor = config;\n    } else if (rollType === ROLL_TYPES.HIT_DIE) {\n      actor = dialog?.subject?.actor || dialog?.subject || dialog?.actor;\n    } else if(rollType === ROLL_TYPES.ATTACK || rollType === ROLL_TYPES.DAMAGE){\n      actor = config.subject?.actor;\n    } else {\n      actor = config.subject?.actor || config.subject || config.actor;\n    }\n    // Check if roll interception and requests are enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    // const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n\n    if(!rollInterceptionEnabled || //!rollRequestsEnabled ||\n      !actor || actor.documentName !== 'Actor') {\n      return;\n    }\n    \n\n    LogUtil.log('_handlePreRoll', [config, message]);\n    const owner = this._getActorOwner(actor);   \n    if (!owner || owner.id === game.user.id || //!owner.active || // player owner inexistent or not active\n        dialog.configure===false || config.isRollRequest===false || config.skipDialog===true || config.fastForward===true) { // config skips the dialog\n      return; // undefined - don't intercept, let the roll proceed\n    }\n    \n    LogUtil.log('_handlePreRoll - intercepting roll #1', [config, message]);\n    // For attack rolls, if a usage message is created, ensure it's public\n    if (rollType === ROLL_TYPES.ATTACK) {\n      message = {\n        ...message,\n        rollMode: CONST.DICE_ROLL_MODES.PUBLIC\n      };\n    }\n    LogUtil.log('_handlePreRoll - intercepting roll #2', [config, message]);\n    \n    // Show GM configuration dialog before sending to player\n    this._showGMConfigDialog(actor, owner, rollType, config, dialog, message);\n    \n    // Prevent the normal roll\n    return false;\n  }\n  \n  /**\n   * Show GM configuration dialog before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showGMConfigDialog(actor, owner, rollType, config, dialog, message) {\n    LogUtil.log('_showGMConfigDialog - config', [rollType, config]);\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n\n    // if(!rollInterceptionEnabled || //!rollRequestsEnabled ||\n    //   !actor || actor.documentName !== 'Actor') {\n    //   return;\n    // }\n\n    try {\n      // Normalize rollType to lowercase for consistent comparisons\n      const normalizedRollType = rollType?.toLowerCase();\n      \n      // Determine appropriate dialog class based on roll type\n      let DialogClass;\n      if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n        DialogClass = GMSkillToolConfigDialog;\n      } else if (normalizedRollType === ROLL_TYPES.HIT_DIE) {\n        DialogClass = GMHitDieConfigDialog;\n      } else if (normalizedRollType === ROLL_TYPES.ATTACK) {\n        DialogClass = GMAttackConfigDialog;\n      } else if (normalizedRollType === ROLL_TYPES.DAMAGE) {\n        // Check if DamageRollConfigurationDialog exists in this D&D5e version\n        if (dnd5e.applications?.dice?.DamageRollConfigurationDialog) {\n          DialogClass = GMDamageConfigDialog;\n        } else {\n          // Fallback to base dialog if damage dialog doesn't exist\n          LogUtil.log('DamageRollConfigurationDialog not found, using GMRollConfigDialog');\n          DialogClass = GMRollConfigDialog;\n        }\n      } else {\n        DialogClass = GMRollConfigDialog;\n      }\n      \n      // Create base roll config based on roll type\n      let rollConfig = {\n        rolls: [{\n          parts: [],\n          data: {},\n          options: {}\n        }]\n      };\n      \n      // Add specific configuration based on roll type\n      switch (normalizedRollType) {\n        case ROLL_TYPES.ABILITY:\n          rollConfig.ability = config.ability || config.subject?.ability;\n          break;\n        case ROLL_TYPES.SAVE:\n          rollConfig.ability = config.ability || config.subject?.ability;\n          // Check if this is actually a concentration save\n          if (config.ability === 'con' && config.targetValue !== undefined) {\n            rollType = ROLL_TYPES.CONCENTRATION; // Update rollType for proper handling\n          }\n          break;\n        case ROLL_TYPES.SKILL:\n          rollConfig.skill = config.skill;\n          rollConfig.ability = config.ability;\n          break;\n        case ROLL_TYPES.TOOL:\n          rollConfig.tool = config.tool;\n          rollConfig.ability = config.ability;\n          break;\n        case ROLL_TYPES.CONCENTRATION:\n          rollConfig.ability = 'con';\n          break;\n        case ROLL_TYPES.INITIATIVE:\n          // Initiative rolls don't need special config\n          break;\n        case ROLL_TYPES.HIT_DIE:\n          // For hit die the first parameter is the denomination string (e.g. \"d8\")\n          rollConfig.denomination = typeof config === 'string' ? config : (config.denomination || config.subject?.denomination);\n          break;\n        case ROLL_TYPES.ATTACK:\n          if (dialog?.options) {\n            rollConfig.ammunition = dialog.options.ammunition;\n            rollConfig.attackMode = dialog.options.attackMode;\n            rollConfig.mastery = dialog.options.mastery;\n          }\n          break;\n        case ROLL_TYPES.DAMAGE:\n          // Damage rolls need the item and activity reference\n          rollConfig.item = config.subject?.item;\n          rollConfig.subject = config.subject; // Preserve the full subject (activity)\n          rollConfig.critical = config.critical || false;\n          break;\n      }\n      \n      // Check if we should skip dialogs\n      const SETTINGS = getSettings();\n      const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n      \n      const options = {\n        actors: [actor],\n        rollType: normalizedRollType,\n        showDC: true,\n        defaultSendRequest: true,\n        skipDialogs: skipDialogs\n      };\n      \n      let result;\n      if (!skipDialogs) {\n        // Extract roll key based on roll type\n        let rollKey = null;\n        switch (normalizedRollType) {\n          case ROLL_TYPES.SKILL:\n            rollKey = config.skill;\n            break;\n          case ROLL_TYPES.TOOL:\n            rollKey = config.tool;\n            break;\n          case ROLL_TYPES.ABILITY:\n          case ROLL_TYPES.SAVE:\n            rollKey = config.ability || config.subject?.ability;\n            break;\n          case ROLL_TYPES.CONCENTRATION:\n            rollKey = 'con'; // Concentration is always Constitution\n            break;\n          case ROLL_TYPES.INITIATIVE:\n            rollKey = actor.system.attributes?.init?.ability || 'dex'; // Default to dexterity\n            break;\n          case ROLL_TYPES.HIT_DIE:\n            rollKey = typeof config === 'string' ? config : (config.denomination || config.subject?.denomination);\n            break;\n          case ROLL_TYPES.ATTACK:\n            rollKey = config.subject?.item?.id;\n            break;\n          case ROLL_TYPES.DAMAGE:\n            rollKey = config.subject?.item?.id;\n            break;\n        }\n        // Use the static getConfiguration method which properly waits for dialog result\n        if (!DialogClass.getConfiguration) {\n          LogUtil.error('DialogClass.getConfiguration not found', [DialogClass, DialogClass.name]);\n          throw new Error(`DialogClass ${DialogClass.name} does not have getConfiguration method`);\n        }\n        \n        if (normalizedRollType === ROLL_TYPES.ATTACK || normalizedRollType === ROLL_TYPES.DAMAGE) {\n          result = await DialogClass.getConfiguration([actor], normalizedRollType, rollKey, {\n            skipDialogs: false,\n            defaultSendRequest: true\n          }, config, dialog);\n        } else {\n          result = await DialogClass.getConfiguration([actor], normalizedRollType, rollKey, {\n            skipDialogs: false,\n            defaultSendRequest: true\n          });\n        }\n      } else {\n        // Skip dialog and use default config\n        result = {\n          sendRequest: true,\n          advantage: false,\n          disadvantage: false,\n          situational: \"\",\n          rollMode: game.settings.get(\"core\", \"rollMode\")\n        };\n      }\n      \n      // If dialog was cancelled, do nothing (user cancelled the action)\n      if (!result) {\n        LogUtil.log('_showGMConfigDialog - Dialog cancelled');\n        return;\n      }\n      \n      // If sendRequest is false, execute local roll\n      LogUtil.log('_showGMConfigDialog - sending _executeLocalRoll', [rollType, config, result]);\n      if (!result.sendRequest || !rollRequestsEnabled) {\n        await this._executeLocalRoll(actor, rollType, config, result);\n        return;\n      }\n      \n      // Send the roll request to the player with the configured settings\n      // We need to include the rolls array to preserve situational bonuses and other roll data\n      // Exclude the event object as it can't be serialized\n      const { event, ...configWithoutEvent } = config;\n      const finalConfig = {\n        ...configWithoutEvent,\n        ...result,\n        rolls: result.rolls, // Explicitly ensure rolls from dialog takes precedence\n        requestedBy: game.user.name,\n        // For attack activity rolls, prevent the usage message from being created\n        ...(rollType === ROLL_TYPES.ATTACK && { chatMessage: false })\n      };\n      \n      LogUtil.log('_showGMConfigDialog - finalConfig for damage roll', [\n        'rollType:', rollType,\n        'result:', result,\n        'result.rolls:', result.rolls,\n        'finalConfig:', finalConfig,\n        'finalConfig.rolls:', finalConfig.rolls\n      ]);\n      \n      this._sendRollRequest(actor, owner, rollType, finalConfig);\n      \n    } catch (error) {\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n  \n  /**\n   * Execute a roll locally on the GM side\n   * @param {Actor} actor \n   * @param {string} rollType \n   * @param {Object} originalConfig\n   * @param {Object} dialogResult\n   */\n  static async _executeLocalRoll(actor, rollType, originalConfig, dialogResult) {\n    LogUtil.log('RollInterceptor._executeLocalRoll', [actor, rollType, originalConfig, dialogResult]);\n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Get the roll config from dialog result (first roll)\n    const rollConfig = dialogResult.rolls?.[0] || {};\n    \n    // Extract situational bonus from the roll config\n    const situational = rollConfig.data?.situational || \"\";\n    \n    // Build requestData structure expected by RollHandlers\n    const requestData = {\n      rollKey: originalConfig.ability || originalConfig.skill || originalConfig.tool || originalConfig.denomination,\n      config: {\n        advantage: dialogResult.advantage || originalConfig.advantage,\n        disadvantage: dialogResult.disadvantage || originalConfig.disadvantage,\n        target: dialogResult.target || dialogResult.dc || originalConfig.target,\n        rollMode: dialogResult.rollMode || originalConfig.rollMode,\n        situational: situational,\n        isRollRequest: false // Ensure we don't intercept this roll\n      }\n    };\n    LogUtil.log('RollInterceptor._executeLocalRoll - requestData', [requestData, originalConfig, dialogResult]);\n    \n    const dialogConfig = {\n      configure: false, // Skip dialog since we already configured\n      isRollRequest: false\n    };\n    \n    const messageConfig = {\n      rollMode: requestData.config.rollMode,\n      create: true,\n      isRollRequest: false\n    };\n    \n    try {\n      // Map roll types to handler names\n      const handlerMap = ROLL_TYPES;\n      // {\n      //   [ROLL_TYPES.SAVE]: 'save',\n      //   [ROLL_TYPES.SAVING_THROW]: 'savingthrow',\n      //   [ROLL_TYPES.ABILITY]: 'ability',\n      //   [ROLL_TYPES.ABILITY_CHECK]: 'abilitycheck',\n      //   [ROLL_TYPES.SKILL]: 'skill',\n      //   [ROLL_TYPES.TOOL]: 'tool',\n      //   [ROLL_TYPES.CONCENTRATION]: 'concentration',\n      //   [ROLL_TYPES.INITIATIVE]: 'initiative',\n      //   [ROLL_TYPES.DEATH_SAVE]: 'deathsave',\n      //   [ROLL_TYPES.HIT_DIE]: 'hitdie'\n      // };\n      \n      // const handlerName = handlerMap[normalizedRollType];\n      const handler = RollHandlers[normalizedRollType];\n      LogUtil.log('RollInterceptor._executeLocalRoll - handler 1', [handler, normalizedRollType, RollHandlers[normalizedRollType]]);\n      \n      if (handler) {\n        // Special handling for attack and damage rolls\n        if (normalizedRollType === ROLL_TYPES.ATTACK || normalizedRollType === ROLL_TYPES.DAMAGE || normalizedRollType === ROLL_TYPES.SAVE) {\n          requestData.rollKey = originalConfig.subject?.item?.id;\n          requestData.activityId = originalConfig.subject?.id;\n        }\n        \n        LogUtil.log('RollInterceptor._executeLocalRoll - handler 2', [requestData, rollConfig, dialogConfig, messageConfig]);\n        // Call the handler with the properly formatted data\n        await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        LogUtil.warn(`No handler found for roll type: ${normalizedRollType}`);\n      }\n    } catch (error) {\n      LogUtil.error(\"RollInterceptor._executeLocalRoll\", [error]);\n    }\n  }\n  \n  /**\n   * Show configuration dialog to GM before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showConfigurationDialog(actor, owner, rollType, config, dialog, message) {\n    LogUtil.log('RollInterceptor._showConfigurationDialog', [actor, owner, rollType, config, dialog, message]);\n\n    try {\n      // Create a wrapper function that will be called instead of the normal roll\n      const rollWrapper = async (finalConfig) => {\n        // Send the configured roll request to the player\n        this._sendRollRequest(actor, owner, rollType, finalConfig);\n        // Return a fake roll to satisfy the dialog\n        return new Roll(\"1d20\").evaluate({async: false});\n      };\n      \n      // Replace the roll method in config with our wrapper\n      const modifiedConfig = {\n        ...config,\n        _rollMethod: rollWrapper,\n        configured: false // Force dialog to show\n      };\n      \n      // Create and render the dialog\n      const DialogClass = dialog.cls;\n      const rollDialog = new DialogClass(modifiedConfig, dialog.options);\n      \n      // Render the dialog\n      const result = await rollDialog.render(true);\n      \n    } catch (error) {\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n\n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  static _getActorOwner(actor) {\n    LogUtil.log('_getActorOwner', [actor]);\n    // Find the first active player who owns this actor\n    const ownership = actor.ownership || {};\n    \n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Send a roll request to the player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {BasicRollProcessConfiguration} config - The roll process configuration\n   */\n  static _sendRollRequest(actor, owner, rollType, config) {\n    LogUtil.log('_sendRollRequest', [actor, owner, rollType, config]);\n    LogUtil.log('_sendRollRequest - config.rolls check', [\n      'config.rolls:', config.rolls,\n      'config.rolls[0]:', config.rolls?.[0],\n      'config.rolls[0].data:', config.rolls?.[0]?.data,\n      'config.rolls[0].data.situational:', config.rolls?.[0]?.data?.situational\n    ]);\n    const SETTINGS = getSettings();\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    let normalizedRollType = rollType?.toLowerCase();\n    \n    // Convert INITIATIVE to INITIATIVE_DIALOG for player requests\n    // This ensures players get the proper dialog when GM intercepts initiative rolls\n    if (normalizedRollType === ROLL_TYPES.INITIATIVE) {\n      normalizedRollType = ROLL_TYPES.INITIATIVE_DIALOG;\n    }\n    \n    // Extract the roll key based on roll type\n    let rollKey = null;\n    let activityId = null;\n    switch (normalizedRollType) {\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.SAVE:\n        rollKey = config.ability;\n        break;\n      case ROLL_TYPES.SKILL:\n        rollKey = config.skill;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollKey = config.tool;\n        break;\n      case ROLL_TYPES.ATTACK:\n      case ROLL_TYPES.DAMAGE:\n        LogUtil.log('_sendRollRequest - Attack/Damage roll config', [rollType, config]);\n        // for activities, config.subject is the activity itself\n        rollKey = config.subject.item?.id;\n        activityId = config.subject.id;\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        // For hit die rolls, the first parameter might be the denomination string\n        rollKey = typeof config === 'string' ? config : config.denomination;\n        break;\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n      case ROLL_TYPES.INITIATIVE:\n        // Initiative doesn't need a specific rollKey\n        rollKey = null;\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        // Death save doesn't need a specific rollKey\n        rollKey = null;\n        break;\n      default:\n        // Unknown roll type\n        LogUtil.warn(`Unknown roll type: ${rollType}`);\n        return;\n    }\n    \n    // Build the request data with proper rollProcessConfig\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType: normalizedRollType,\n      rollKey,\n      activityId,\n      rollProcessConfig: {\n        ...config,\n        _requestedBy: game.user.name  // Add who requested the roll\n      },\n      skipDialog: skipDialogs,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    // Send request to player via socket\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    // Show notification to GM\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent', { \n      player: owner.name,\n      actor: actor.name \n    }));\n  }\n}","/**\n * Helper functions for the Flash Rolls 5e module\n */\n\nimport { MODULE, ROLL_TYPES } from '../../constants/General.mjs';\n\n/**\n * Get display name for roll type with optional details\n * @param {string} rollType - The type of roll\n * @param {string} rollKey - Optional key for the specific roll (ability, skill, etc.)\n * @returns {string} Formatted display string\n */\nexport function getRollTypeDisplay(rollType, rollKey) {\n  let display = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollType}`) || rollType;\n  \n  // Normalize rollType to lowercase for consistent comparisons\n  const normalizedRollType = rollType?.toLowerCase();\n  \n  if (rollKey) {\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        display += ` (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.SAVE:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.ABILITY:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          display += ` (${toolItem?.name || rollKey})`;\n        } else {\n          display += ` (${rollKey})`;\n        }\n        break;\n      case ROLL_TYPES.CUSTOM:\n        display = `${display}: ${rollKey}`;\n        break;\n    }\n  }\n  \n  return display;\n}\n\n/**\n * Show batched notifications to player\n * @param {Array} pendingNotifications - Array of notification objects\n * @param {Function} getRollTypeDisplayFn - Function to get roll type display (default: getRollTypeDisplay)\n */\nexport function showBatchedNotifications(pendingNotifications, getRollTypeDisplayFn = getRollTypeDisplay) {\n  if (pendingNotifications.length === 0) return;\n  \n  // Group by roll type\n  const notificationsByType = {};\n  for (const notif of pendingNotifications) {\n    const key = `${notif.rollType}_${notif.rollKey || ''}`;\n    if (!notificationsByType[key]) {\n      notificationsByType[key] = {\n        rollType: notif.rollType,\n        rollKey: notif.rollKey,\n        actors: [],\n        gm: notif.gm\n      };\n    }\n    notificationsByType[key].actors.push(notif.actor);\n  }\n  \n  const entries = Object.values(notificationsByType);\n  if (entries.length === 1 && entries[0].actors.length === 1) {\n    // Single roll request - use original format\n    const entry = entries[0];\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived', {\n      gm: entry.gm,\n      rollType: getRollTypeDisplayFn(entry.rollType, entry.rollKey)\n    }));\n  } else {\n    // Multiple requests - create consolidated message\n    const messages = [];\n    for (const entry of entries) {\n      const rollTypeDisplay = getRollTypeDisplayFn(entry.rollType, entry.rollKey);\n      const actorNames = entry.actors.join(\", \");\n      messages.push(`${rollTypeDisplay} (${actorNames})`);\n    }\n    \n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestsReceivedMultiple', {\n      gm: entries[0].gm,\n      requests: messages.join(\"; \")\n    }));\n  }\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {User|null} The player owner, or null if not player-owned\n */\nexport function getPlayerOwner(actor) {\n  const ownership = actor.ownership || {};\n  \n  for (const [userId, level] of Object.entries(ownership)) {\n    if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n      const user = game.users.get(userId);\n      if (user && !user.isGM) {\n        return user;\n      }\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Get actor stats for display (ability scores and modifiers)\n * @param {Actor} actor - The actor to get stats for\n * @returns {Array} Array of stat objects with name, value, and modifier\n */\nexport function getActorStats(actor) {\n  if (!actor?.system?.abilities) return [];\n  \n  return Object.entries(actor.system.abilities).map(([key, ability]) => ({\n    name: key.toUpperCase(),\n    value: ability.value || 10,\n    modifier: ability.mod >= 0 ? `+${ability.mod}` : `${ability.mod}`\n  }));\n}\n\n/**\n * Apply target tokens to user\n * @param {Array<string>} tokenIds - Array of token IDs to target\n * @param {User} user - User to apply targets for (default: game.user)\n */\nexport function applyTargetTokens(tokenIds, user = game.user) {\n  if (!tokenIds?.length) return;\n  \n  const tokens = tokenIds\n    .map(id => canvas.tokens.get(id))\n    .filter(t => t);\n    \n  tokens.forEach(t => t.setTarget(true, { user }));\n}\n\n/**\n * Clear all target tokens for user\n * @param {User} user - User to clear targets for (default: game.user)\n */\nexport function clearTargetTokens(user = game.user) {\n  user.targets.forEach(t => t.setTarget(false, { user }));\n}\n\n/**\n * Format a notification message for multiple actors\n * @param {Array<string>} actorNames - Array of actor names\n * @param {string} action - The action being performed\n * @returns {string} Formatted message\n */\nexport function formatMultiActorNotification(actorNames, action) {\n  if (actorNames.length === 0) return \"\";\n  if (actorNames.length === 1) return `${actorNames[0]} ${action}`;\n  \n  const and = game.i18n.localize(\"CRLNGN_ROLLS.common.and\");\n  \n  if (actorNames.length === 2) return `${actorNames[0]} ${and} ${actorNames[1]} ${action}`;\n  \n  const lastActor = actorNames[actorNames.length - 1];\n  const otherActors = actorNames.slice(0, -1).join(\", \");\n  return `${otherActors}, ${and} ${lastActor} ${action}`;\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if owned by a player\n */\nexport function isPlayerOwned(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  return Object.entries(actor.ownership)\n    .some(([userId, level]) => {\n      const user = game.users.get(userId);\n      return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n    });\n}\n\n/**\n * Check if actor has token in current scene\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if actor has token in current scene\n */\nexport function hasTokenInScene(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  const currentScene = game.scenes.active;\n  return currentScene && currentScene.tokens.some(token => token.actorId === actor.id);\n}\n\n/**\n * Update token selection on canvas based on actor selection\n * @param {string} actorId - The actor ID\n * @param {boolean} selected - Whether to select or deselect\n */\nexport function updateCanvasTokenSelection(actorId, selected) {\n  const scene = game.scenes.active;\n  if (!scene) return;\n  \n  // Find all tokens for this actor in the current scene\n  const tokens = canvas.tokens.placeables.filter(t => t.actor?.id === actorId);\n  \n  for (const token of tokens) {\n    if (selected) {\n      // Add to selection without clearing others\n      token.control({ releaseOthers: false });\n    } else {\n      // Release this token\n      token.release();\n    }\n  }\n}\n\n/**\n * Delay execution for a specified time\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise} Promise that resolves after the delay\n */\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Check if the sidebar is expanded\n * @returns {boolean} True if sidebar is expanded\n */\nexport function isSidebarExpanded() {\n  return !ui?.sidebar?._collapsed;\n}\n\n/**\n * Update body class based on sidebar state\n * @param {boolean} isExpanded - Whether sidebar is expanded\n */\nexport function updateSidebarClass(isExpanded) {\n  const body = document.querySelector(\"body\");\n  if (isExpanded) {\n    body.classList.add(\"sidebar-expanded\");\n  } else {\n    body.classList.remove(\"sidebar-expanded\");\n  }\n}\n\n/**\n * Build roll types array for a selected request type\n * @param {string} selectedRequestType - The type of roll request\n * @param {Set} selectedActors - Set of selected actor IDs\n * @returns {Array} Array of roll type objects with id, name, and rollable properties\n */\nexport function buildRollTypes(selectedRequestType, selectedActors) {\n  const rollTypes = [];\n  \n  if (!selectedRequestType || selectedActors.size === 0) {\n    return rollTypes;\n  }\n  \n  const selectedOption = MODULE.ROLL_REQUEST_OPTIONS[selectedRequestType];\n  if (!selectedOption || !selectedOption.subList) {\n    return rollTypes;\n  }\n  \n  // Get first selected actor as reference for available options\n  const firstActorId = Array.from(selectedActors)[0];\n  const actor = game.actors.get(firstActorId);\n  \n  // Special handling for tools - show all available tools\n  if (selectedOption.subList === 'tools') {\n    // Get all tools from CONFIG.DND5E.tools or enrichmentLookup\n    const allTools = CONFIG.DND5E.enrichmentLookup?.tools || CONFIG.DND5E.tools || {};\n    \n    for (const [key, toolData] of Object.entries(allTools)) {\n      let label = key;\n      \n      // Use enrichmentLookup to get tool UUID and then fetch the name\n      if (toolData?.id) {\n        // Get the tool name using Trait.getBaseItem\n        const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n        label = toolItem?.name || key;\n      }\n      // Fallback - format the key\n      else {\n        label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n      }\n      \n      rollTypes.push({\n        id: key,\n        name: label,\n        rollable: true\n      });\n    }\n    \n    // Sort tools alphabetically by name\n    rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n  }\n  // For other types, use actor data\n  else if (actor && selectedOption.actorPath) {\n    const rollData = foundry.utils.getProperty(actor, selectedOption.actorPath) || {};\n    \n    // Check if we should use CONFIG.DND5E for enrichment\n    const configData = CONFIG.DND5E[selectedOption.subList];\n    \n    for (const [key, data] of Object.entries(rollData)) {\n      let label = '';\n      \n      // For skills, use CONFIG.DND5E.skills for full names\n      if (selectedOption.subList === 'skills' && configData?.[key]) {\n        label = configData[key].label;\n      }\n      // For abilities (saving throws), use the label from data\n      else if (selectedOption.subList === 'abilities' && configData?.[key]) {\n        label = configData[key].label;\n      }\n      // Default fallback\n      else {\n        label = data.label || game.i18n.localize(data.name || key) || key;\n      }\n      \n      rollTypes.push({\n        id: key,\n        name: label,\n        rollable: true\n      });\n    }\n    \n    // Sort skills alphabetically by name\n    if (selectedOption.subList === 'skills') {\n      rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n    }\n  }\n  \n  return rollTypes;\n}\n\n/**\n * Unified notification system with batching support\n */\nexport class NotificationManager {\n  static pendingNotifications = [];\n  static notificationTimer = null;\n  static NOTIFICATION_BATCH_DELAY = 500; // ms to wait for additional notifications\n  \n  /**\n   * Show a notification with optional batching for roll requests\n   * @param {string} type - Notification type (info, warn, error)\n   * @param {string} message - Message to display\n   * @param {Object} options - Options for the notification\n   * @param {boolean} options.batch - Whether to batch this notification\n   * @param {Object} options.batchData - Data for batched notifications\n   */\n  static notify(type, message, options = {}) {\n    // If not batching, show immediately\n    if (!options.batch) {\n      ui.notifications[type](message);\n      return;\n    }\n    \n    // Add to pending notifications for batching\n    if (options.batchData) {\n      NotificationManager.pendingNotifications.push(options.batchData);\n      \n      // Clear existing timer and set new one\n      if (NotificationManager.notificationTimer) {\n        clearTimeout(NotificationManager.notificationTimer);\n      }\n      \n      NotificationManager.notificationTimer = setTimeout(() => {\n        showBatchedNotifications(NotificationManager.pendingNotifications);\n        NotificationManager.pendingNotifications = [];\n        NotificationManager.notificationTimer = null;\n      }, NotificationManager.NOTIFICATION_BATCH_DELAY);\n    }\n  }\n  \n  /**\n   * Show roll request sent notifications (GM side)\n   * @param {Object} requestsByPlayer - Grouped requests by player\n   * @param {string} rollTypeName - Display name of the roll type\n   */\n  static notifyRollRequestsSent(requestsByPlayer, rollTypeName) {\n    const successfulRequests = Object.entries(requestsByPlayer);\n    \n    if (successfulRequests.length === 0) return;\n    \n    // Single player, single actor\n    if (successfulRequests.length === 1) {\n      const playerData = Object.values(requestsByPlayer)[0];\n      const actorNames = playerData.actors.map(a => a.name).join(\", \");\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentSingle\", { \n        rollType: rollTypeName,\n        actors: actorNames,\n        player: playerData.player.name\n      }));\n    } else {\n      // Multiple players\n      const playerSummaries = successfulRequests.map(([playerId, data]) => {\n        const actorNames = data.actors.map(a => a.name).join(\", \");\n        return `${data.player.name} (${actorNames})`;\n      });\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentMultiple\", { \n        rollType: rollTypeName,\n        count: successfulRequests.length,\n        players: playerSummaries.join(\"; \")\n      }));\n    }\n  }\n  \n  /**\n   * Clear any pending notifications\n   */\n  static clearPending() {\n    if (NotificationManager.notificationTimer) {\n      clearTimeout(NotificationManager.notificationTimer);\n      NotificationManager.notificationTimer = null;\n    }\n    NotificationManager.pendingNotifications = [];\n  }\n}\n\n/**\n * Filter actors based on death save requirements\n * @param {Actor[]} actors - Array of actors to filter\n * @returns {Actor[]} Array of actors that need death saves\n */\nexport function filterActorsForDeathSaves(actors) {\n  const actorsNeedingDeathSaves = [];\n  const actorsSkippingDeathSaves = [];\n  \n  for (const actor of actors) {\n    const hp = actor.system.attributes.hp?.value || 0;\n    const deathSaves = actor.system.attributes.death || {};\n    const successes = deathSaves.success || 0;\n    const failures = deathSaves.failure || 0;\n    \n    // Check if actor needs a death save\n    if (hp <= 0 && successes < 3 && failures < 3) {\n      actorsNeedingDeathSaves.push(actor);\n    } else {\n      actorsSkippingDeathSaves.push(actor.name);\n    }\n  }\n  \n  // Notify about actors that don't need death saves\n  if (actorsSkippingDeathSaves.length > 0) {\n    NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.actorsSkippingDeathSave\", {\n      actors: actorsSkippingDeathSaves.join(\", \")\n    }));\n  }\n  \n  return actorsNeedingDeathSaves;\n}\n\n/**\n * Categorize actors by ownership (PC vs NPC)\n * @param {Actor[]} actors - Array of actors to categorize\n * @returns {{pcActors: Array, npcActors: Actor[]}} Object with categorized actors\n */\nexport function categorizeActorsByOwnership(actors) {\n  const pcActors = [];\n  const npcActors = [];\n  \n  for (const actor of actors) {\n    const owner = getPlayerOwner(actor);\n    if (owner) {\n      pcActors.push({ actor, owner });\n    } else {\n      npcActors.push(actor);\n    }\n  }\n  \n  return { pcActors, npcActors };\n}\n\n\nexport function addHDUpdate(updates, newUpdate){\n  const existingIndex = updates.findIndex(update => update._id === newUpdate._id);\n  if(existingIndex > -1){\n    updates[existingIndex] = foundry.utils.mergeObject(\n      updates[existingIndex],\n      newUpdate\n    )\n  }else{\n    updates.push(newUpdate);\n  }\n}","/**\n * Helper functions for roll validation and preparation\n */\n\nimport { NotificationManager } from './Helpers.mjs';\n\n/**\n * Ensure combat exists for initiative rolls\n * @returns {Promise<boolean>} True if combat is ready, false if cancelled\n */\nexport async function ensureCombatForInitiative() {\n  if (!game.combat) {\n    const createCombat = await Dialog.confirm({\n      title: game.i18n.localize(\"COMBAT.Create\"),\n      content: \"<p>\" + game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.noCombatActive\") + \"</p>\",\n      yes: () => true,\n      no: () => false,\n      defaultYes: true,\n      options: {\n        classes: [\"crlngn-rolls-dialog\"]\n      }\n    });\n    \n    if (createCombat) {\n      // Create a new combat encounter\n      const combat = await game.combats.documentClass.create({scene: game.scenes.active.id});\n      await combat.activate();\n      NotificationManager.notify('info', game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.combatCreated\"));\n      return true;\n    } else {\n      // User chose not to create combat\n      return false;\n    }\n  }\n  \n  return true; // Combat already exists\n}\n\n/**\n * Filter actors for initiative rolls, handling re-rolls\n * @param {string[]} actorIds - Array of actor IDs to filter\n * @param {Game} game - The game instance\n * @returns {Promise<string[]>} Filtered array of actor IDs\n */\nexport async function filterActorsForInitiative(actorIds, game) {\n  if (!game.combat) return actorIds;\n  \n  const actors = actorIds\n    .map(id => game.actors.get(id))\n    .filter(actor => actor);\n  \n  // Check which actors already have initiative\n  const actorsWithInitiative = [];\n  const actorIdsWithInitiative = new Set();\n  \n  for (const actor of actors) {\n    const combatant = game.combat.getCombatantByActor(actor.id);\n    if (combatant && combatant.initiative !== null) {\n      actorsWithInitiative.push(actor.name);\n      actorIdsWithInitiative.add(actor.id);\n    }\n  }\n  \n  // If any actors already have initiative, confirm re-roll\n  if (actorsWithInitiative.length > 0) {\n    const reroll = await Dialog.confirm({\n      title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiativeTitle\"),\n      content: \"<p>\" + game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiative\", {\n        actors: actorsWithInitiative.join(\", \")\n      }) + \"</p>\",\n      yes: () => true,\n      no: () => false,\n      defaultYes: false,\n      options: {\n        classes: [\"crlngn-rolls-dialog\"]\n      }\n    });\n    \n    if (!reroll) {\n      // User chose not to re-roll, filter out actors with initiative\n      const filteredIds = actorIds.filter(id => !actorIdsWithInitiative.has(id));\n      \n      // If no actors left to roll, notify\n      if (filteredIds.length === 0) {\n        NotificationManager.notify('info', game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.allActorsHaveInitiative\"));\n      }\n      \n      return filteredIds;\n    } else {\n      // User chose to re-roll, clear initiative for actors that have it\n      for (const actorId of actorIdsWithInitiative) {\n        const combatant = game.combat.getCombatantByActor(actorId);\n        if (combatant) {\n          await combatant.update({ initiative: null });\n        }\n      }\n      \n      return actorIds; // Return all actors since we cleared their initiative\n    }\n  }\n  \n  return actorIds; // No actors had initiative\n}","import { MODULE, ROLL_TYPES } from '../constants/General.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog, GMHitDieConfigDialog } from './dialogs/GMRollConfigDialog.mjs';\nimport { SidebarUtil } from './SidebarUtil.mjs';\nimport { getPlayerOwner, isPlayerOwned, hasTokenInScene, updateCanvasTokenSelection, delay, buildRollTypes, NotificationManager, filterActorsForDeathSaves, categorizeActorsByOwnership } from './helpers/Helpers.mjs';\nimport { RollHandlers } from './RollHandlers.mjs';\nimport { RollHelpers } from './helpers/RollHelpers.mjs';\nimport { CustomRollDialog } from './dialogs/CustomRollDialog.mjs';\nimport { ensureCombatForInitiative, filterActorsForInitiative } from './helpers/RollValidationHelpers.mjs';\n\n/**\n * Roll Requests Menu Application\n * Extends Foundry's ApplicationV2 with Handlebars support to provide a menu interface for GMs to request rolls from players\n */\nexport default class RollRequestsMenu extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2) {\n  /**\n   * Singleton instance of the menu\n   * @type {RollRequestsMenu|null}\n   */\n  static #instance = null;\n\n  constructor(options = {}) {\n    LogUtil.log('RollRequestsMenu.constructor');\n    super(options);\n    \n    // Track selected actors and current state\n    this.selectedActors = new Set();\n    this.currentTab = 'pc'; // 'pc' or 'npc'\n    this.selectedRequestType = null;\n    this.isLocked = false; // Track lock state\n    // Get options expanded state from user flag\n    this.optionsExpanded = game.user.getFlag(MODULE.ID, 'menuOptionsExpanded') ?? false;\n    \n    // Initialize with actors from selected tokens\n    this._initializeFromSelectedTokens();\n  }\n\n  static DEFAULT_OPTIONS = {\n    id: 'crlngn-requests-menu',\n    classes: ['roll-requests-menu'],\n    tag: 'div',\n    window: {\n      frame: false,\n      resizable: false,\n      minimizable: false\n    },\n    position: null\n  };\n\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/requests-menus.hbs`\n    }\n  };\n\n  /**\n   * Prepare data for the template\n   */\n  async _prepareContext(options) {\n    LogUtil.log('_prepareContext');\n    const context = await super._prepareContext(options);\n    \n    // Get all actors and separate by ownership\n    const actors = game.actors.contents;\n    const pcActors = [];\n    const npcActors = [];\n    \n    // Get current scene to check for NPC tokens\n    const currentScene = game.scenes.active;\n    \n    for (const actor of actors) {\n      // Skip non-character actors\n      if (actor.type !== 'character' && actor.type !== 'npc') continue;\n      \n      const actorData = {\n        id: actor.id,\n        uuid: actor.uuid,\n        name: actor.name,\n        img: actor.img,\n        selected: this.selectedActors.has(actor.id),\n        crlngnStats: this._getActorStats(actor)\n      };\n      \n      // Check if owned by a player (not GM)\n      const isPlayerOwned = Object.entries(actor.ownership)\n        .some(([userId, level]) => {\n          const user = game.users.get(userId);\n          return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        });\n      \n      if (isPlayerOwned) {\n        pcActors.push(actorData);\n      } else {\n        // For NPCs, only include if they have a token in the current scene\n        if (currentScene) {\n          const hasTokenInScene = currentScene.tokens.some(token => token.actorId === actor.id);\n          if (hasTokenInScene) {\n            npcActors.push(actorData);\n          }\n        }\n      }\n    }\n    \n    // Get current settings\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Check if all actors in current tab are selected\n    const currentActors = this.currentTab === 'pc' ? pcActors : npcActors;\n    const selectAllOn = currentActors.length > 0 && \n      currentActors.every(actor => this.selectedActors.has(actor.id));\n    \n    // Build request types array for template\n    const requestTypes = [];\n    if (this.selectedActors.size > 0) {\n      for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n        requestTypes.push({\n          id: key,\n          name: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${option.name}`) || option.label,\n          rollable: option.subList == null,\n          hasSubList: !!option.subList,\n          selected: this.selectedRequestType === key\n        });\n      }\n    }\n    \n    // Build roll types array based on selected request type\n    const rollTypes = buildRollTypes(this.selectedRequestType, this.selectedActors);\n    \n    return {\n      ...context,\n      actors: currentActors,\n      currentTab: this.currentTab,\n      isPCTab: this.currentTab === 'pc',\n      isNPCTab: this.currentTab === 'npc',\n      selectedTab: this.currentTab,\n      rollRequestsEnabled,\n      skipDialogs,\n      selectAllOn,\n      hasSelectedActors: this.selectedActors.size > 0,\n      requestTypes,\n      rollTypes,\n      showNames: true, // You can make this configurable later\n      actorsLocked: this.isLocked,\n      optionsExpanded: this.optionsExpanded\n    };\n  }\n\n  /**\n   * Get formatted stats for an actor\n   */\n  _getActorStats(actor) {\n    LogUtil.log('_getActorStats');\n    const system = actor.system;\n    const stats = [];\n    \n    // HP\n    if (system.attributes?.hp) {\n      stats.push({\n        abbrev: 'HP',\n        value: system.attributes.hp.value\n      });\n    }\n    \n    // AC\n    if (system.attributes?.ac) {\n      stats.push({\n        abbrev: 'AC',\n        value: system.attributes.ac.value\n      });\n    }\n    \n    // Spell DC - check both old and new locations for compatibility\n    const spellDC = system.attributes?.spell?.dc;\n    if (spellDC) {\n      stats.push({\n        abbrev: 'DC',\n        value: spellDC\n      });\n    }\n    \n    // Passive Perception\n    if (system.skills?.prc?.passive) {\n      stats.push({\n        abbrev: 'PRC',\n        value: system.skills.prc.passive\n      });\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Called after the application is rendered\n   */\n  _onRender(context, options) {\n    LogUtil.log('_onRender');\n    super._onRender(context, options);\n    this._attachListeners();\n    \n    // Apply expanded state if saved\n    if (this.optionsExpanded) {\n      const optionsToggle = this.element.querySelector('.options-toggle');\n      const optionsElement = this.element.querySelector('li.options');\n      if (optionsToggle) {\n        optionsToggle.classList.add('expanded');\n      }\n      if (optionsElement) {\n        optionsElement.classList.add('expanded');\n      }\n    }\n    \n    // Add click outside listener with capture to catch events early\n    setTimeout(() => {\n      document.addEventListener('click', this._onClickOutside, true);\n    }, 100);\n    \n    // Hook into token control changes\n    this._tokenControlHook = Hooks.on('controlToken', this._onTokenControlChange.bind(this));\n  }\n  \n  /**\n   * Handle token control changes\n   */\n  _onTokenControlChange(token, controlled) {\n    LogUtil.log('_onTokenControlChange');\n    // Only process if menu is rendered\n    if (!this.rendered) return;\n    \n    // Ignore if we're programmatically updating tokens\n    if (this._ignoreTokenControl) return;\n    \n    // Debounce updates to avoid multiple renders when selecting multiple tokens\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n    }\n    \n    this._tokenUpdateTimeout = setTimeout(() => {\n      // Update selections from current controlled tokens\n      this._initializeFromSelectedTokens();\n      \n      // Re-render to update UI\n      this.render();\n      \n      this._tokenUpdateTimeout = null;\n    }, 100); // 100ms debounce\n  }\n  \n  /**\n   * Handle clicks outside the menu\n   */\n  _onClickOutside = (event) => {\n    LogUtil.log('_onClickOutside');\n    if (this.isLocked) return;\n    const menu = this.element;\n    if (!menu) return;\n    if (event.target.closest('.roll-requests-menu')) return;\n    if (menu.contains(event.target)) return;\n    if (event.target.closest('#crlngn-requests-icon')) return;\n    if (event.target.closest('.dialog, .app, .notification')) return;\n    this.close();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachListeners() {\n    LogUtil.log('_attachListeners');\n    \n    const html = this.element;\n    \n    // Settings toggles\n    html.querySelector('#crlngn-requests-toggle')?.addEventListener('change', this._onToggleRollRequests.bind(this));\n    html.querySelector('#crlngn-skip-dialogs')?.addEventListener('change', this._onToggleSkipDialogs.bind(this));\n    html.querySelector('#crlngn-actors-all')?.addEventListener('change', this._onToggleSelectAll.bind(this));\n    \n    // Lock toggle\n    html.querySelector('#crlngn-actors-lock')?.addEventListener('click', this._onToggleLock.bind(this));\n    \n    // Options toggle\n    html.querySelector('.options-toggle')?.addEventListener('click', this._onToggleOptions.bind(this));\n    \n    // Tab switching\n    const tabs = html.querySelectorAll('.actor-tab');\n    tabs.forEach(tab => {\n      tab.addEventListener('click', this._onTabClick.bind(this));\n    });\n    \n    // Actor selection - handle clicks on actor rows or select buttons\n    html.querySelectorAll('.actor').forEach(actor => {\n      actor.addEventListener('click', this._onActorClick.bind(this));\n    });\n    \n    html.querySelectorAll('.actor-select').forEach(selectBtn => {\n      selectBtn.addEventListener('click', this._onActorSelectClick.bind(this));\n    });\n    \n    // Request type selection - use event delegation for dynamic content\n    const requestTypesContainer = html.querySelector('.request-types');\n    if (requestTypesContainer) {\n      requestTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRequestTypeClick(customEvent);\n        }\n      });\n    }\n    \n    // Roll type selection - use event delegation for dynamic content\n    const rollTypesContainer = html.querySelector('.roll-types');\n    if (rollTypesContainer) {\n      rollTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRollTypeClick(customEvent);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle roll requests toggle\n   */\n  async _onToggleRollRequests(event) {\n    LogUtil.log('_onToggleRollRequests');\n    const SETTINGS = getSettings();\n    const enabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, enabled);\n    \n    // Update the icon in the chat controls\n    SidebarUtil.updateRollRequestsIcon(enabled);\n    \n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleSkipDialogs(event) {\n    LogUtil.log('_onToggleSkipDialogs');\n    const SETTINGS = getSettings();\n    const skip = event.target.checked;\n    await SettingsUtil.set(SETTINGS.skipDialogs.tag, skip);\n  }\n\n  /**\n   * Handle select all toggle\n   */\n  _onToggleSelectAll(event) {\n    LogUtil.log('_onToggleSelectAll');\n    const selectAll = event.target.checked;\n    this._ignoreTokenControl = true; // To avoid loop\n    \n    const actors = this.currentTab === 'pc' ? \n      game.actors.contents.filter(a => isPlayerOwned(a)) :\n      game.actors.contents.filter(a => !isPlayerOwned(a) && hasTokenInScene(a));\n    \n    actors.forEach(actor => {\n      if (selectAll) {\n        this.selectedActors.add(actor.id);\n        updateCanvasTokenSelection(actor.id, true);\n      } else {\n        this.selectedActors.delete(actor.id);\n        updateCanvasTokenSelection(actor.id, false);\n      }\n    });\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 200);\n    \n    this.render();\n    this._updateRequestTypesVisibility();\n  }\n  \n  /**\n   * Handle lock toggle\n   */\n  _onToggleLock(event) {\n    LogUtil.log('_onToggleLock');\n    event.preventDefault();\n    this.isLocked = !this.isLocked;\n    \n    // Update the icon - the currentTarget IS the icon element\n    const lockIcon = event.currentTarget;\n    lockIcon.classList.remove('fa-lock-keyhole', 'fa-lock-keyhole-open');\n    lockIcon.classList.add(this.isLocked ? 'fa-lock-keyhole' : 'fa-lock-keyhole-open');\n  }\n  \n  /**\n   * Handle options toggle\n   */\n  async _onToggleOptions(event) {\n    LogUtil.log('_onToggleOptions');\n    event.preventDefault();\n    \n    // Toggle the state\n    this.optionsExpanded = !this.optionsExpanded;\n    \n    // Save state to user flag\n    await game.user.setFlag(MODULE.ID, 'menuOptionsExpanded', this.optionsExpanded);\n    \n    // Toggle expanded class on the clicked element\n    const optionsToggle = event.currentTarget || event.target.closest('.options-toggle');\n    if (optionsToggle) {\n      optionsToggle.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n    // Find the li.options sibling and toggle expanded class on it\n    const optionsElement = this.element.querySelector('li.options');\n    if (optionsElement) {\n      optionsElement.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n  }\n  \n  /**\n   * Initialize selected actors from currently selected tokens\n   */\n  _initializeFromSelectedTokens() {\n    LogUtil.log('_initializeFromSelectedTokens');\n    const controlledTokens = canvas.tokens?.controlled || [];\n    this.selectedActors.clear();\n    \n    for (const token of controlledTokens) {\n      if (token.actor) {\n        this.selectedActors.add(token.actor.id);\n        \n        if (this.selectedActors.size === 1) {\n          const isPC = isPlayerOwned(token.actor);\n          this.currentTab = isPC ? 'pc' : 'npc';\n        }\n      }\n    }\n    \n  }\n  \n\n  /**\n   * Handle tab click\n   */\n  async _onTabClick(event) {\n    LogUtil.log('_onTabClick');\n    const tab = event.currentTarget.dataset.tab;\n    if (tab === this.currentTab) return;\n    \n    this.selectedActors.clear();\n    canvas.tokens?.releaseAll();\n    this.selectedRequestType = null;\n    \n    this.currentTab = tab;\n    await this.render();\n  }\n\n  /**\n   * Handle click on actor row\n   */\n  _onActorClick(event) {\n    LogUtil.log('_onActorClick');\n    if (event.target.closest('.actor-select')) return;\n    \n    const actorElement = event.currentTarget;\n    const actorId = actorElement.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Handle click on actor select button\n   */\n  _onActorSelectClick(event) {\n    LogUtil.log('_onActorSelectClick');\n    event.stopPropagation();\n    const actorId = event.currentTarget.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Toggle actor selection state\n   */\n  _toggleActorSelection(actorId) {\n    LogUtil.log('_toggleActorSelection');\n    // Temporarily disable token control hook to avoid feedback loop\n    this._ignoreTokenControl = true;\n    \n    if (this.selectedActors.has(actorId)) {\n      this.selectedActors.delete(actorId);\n      updateCanvasTokenSelection(actorId, false);\n    } else {\n      this.selectedActors.add(actorId);\n      updateCanvasTokenSelection(actorId, true);\n    }\n    \n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 100);\n    \n    // Re-render to update the UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    this._updateSelectAllState();\n  }\n  \n\n  /**\n   * Update request types visibility based on actor selection\n   */\n  _updateRequestTypesVisibility() {\n    LogUtil.log('_updateRequestTypesVisibility');\n    // re-render when actor selection changes\n    this.render();\n  }\n\n  /**\n   * Update select all checkbox state\n   */\n  _updateSelectAllState() {\n    LogUtil.log('_updateSelectAllState');\n    const selectAllCheckbox = this.element.querySelector('#crlngn-actors-all');\n    const currentActors = this.currentTab === 'pc' ? 'pc' : 'npc';\n    const checkboxes = this.element.querySelectorAll(`.${currentActors}-actors .actor-item input[type=\"checkbox\"]`);\n    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;\n    \n    selectAllCheckbox.checked = checkedCount > 0 && checkedCount === checkboxes.length;\n    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n  }\n\n  /**\n   * Handle request type click\n   */\n  async _onRequestTypeClick(event) {\n    const requestItem = event.currentTarget;\n    const requestType = requestItem.dataset.id;\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    LogUtil.log('_onRequestTypeClick', [requestType, requestItem.dataset, rollOption]);\n    \n    if (!rollOption) {\n      LogUtil.error('Unknown request type:', requestType);\n      return;\n    }\n    \n    if (this.selectedRequestType === requestType) {\n      this.selectedRequestType = null;\n    } else {\n      this.selectedRequestType = requestType;\n    }\n    \n    if (rollOption.subList) {\n      await this.render();\n    } else if (this.selectedRequestType) {\n      this._triggerRoll(requestType, null);\n    }\n  }\n\n  /**\n   * Handle roll type click\n   */\n  _onRollTypeClick(event) {\n    LogUtil.log('_onRollTypeClick');\n    const rollKey = event.currentTarget.dataset.id;\n    this._triggerRoll(this.selectedRequestType, rollKey);\n  }\n\n  /**\n   * Get valid actor IDs based on current tab\n   * @param {Array<string>} selectedActorIds - Array of selected actor IDs\n   * @returns {Array<string>} Filtered array of valid actor IDs\n   */\n  _getValidActorIds(selectedActorIds) {\n    return selectedActorIds.filter(actorId => {\n      const actor = game.actors.get(actorId);\n      if (!actor) return false;\n      const isPC = isPlayerOwned(actor);\n      const isNPC = !isPC && hasTokenInScene(actor);\n      \n      return (this.currentTab === 'pc' && isPC) || (this.currentTab === 'npc' && isNPC);\n    });\n  }\n\n  /**\n   * Handle custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  async _handleCustomRoll() {\n    const formula = await this._showCustomRollDialog();\n    return formula; // Will be null if cancelled\n  }\n\n  /**\n   * Get roll configuration from dialog or create default\n   * @param {Actor[]} actors - Actors being rolled for\n   * @param {string} rollMethodName - The roll method name\n   * @param {string} rollKey - The roll key\n   * @param {boolean} skipDialogs - Whether to skip dialogs\n   * @param {Array} pcActors - PC actors with owners\n   * @returns {Promise<BasicRollProcessConfiguration|null>} Process configuration or null if cancelled\n   */\n  async _getRollConfiguration(actors, rollMethodName, rollKey, skipDialogs, pcActors) {\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Show GM configuration dialog (unless skip dialogs is enabled or it's a custom roll)\n    if (!skipDialogs && rollMethodName !== ROLL_TYPES.CUSTOM) {\n      // Use appropriate dialog based on roll type\n      let DialogClass;\n      if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(rollMethodName)) {\n        DialogClass = GMSkillToolConfigDialog;\n      } else if (rollMethodName === ROLL_TYPES.HIT_DIE) {\n        DialogClass = GMHitDieConfigDialog;\n      } else {\n        DialogClass = GMRollConfigDialog;\n      }\n      const config = await DialogClass.getConfiguration(actors, rollMethodName, rollKey, { \n        skipDialogs,\n        defaultSendRequest: rollRequestsEnabled // Pass the setting as default \n      });\n      LogUtil.log('_getRollConfiguration', [config]);\n      \n      return config; // Will be null if cancelled\n    } else {\n      // Use default BasicRollProcessConfiguration when skipping dialogs\n      const config = {\n        rolls: [{\n          parts: [],\n          data: {},\n          options: {}\n        }],\n        advantage: false,\n        disadvantage: false,\n        rollMode: game.settings.get(\"core\", \"rollMode\"),\n        chatMessage: true,\n        isRollRequest: false,  // Don't intercept when rolling locally\n        skipDialog: true,  // Pass skipDialog as true when skipping\n        sendRequest: rollRequestsEnabled && pcActors.length > 0  // Only send if enabled AND there are PC actors\n      };\n      \n      // Death saves always have DC 10\n      if (rollMethodName === ROLL_TYPES.DEATH_SAVE) {\n        config.target = 10;\n      }\n      \n      // For skill/tool checks, add the default ability when skipping dialog\n      if ([ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(rollMethodName) && actors.length > 0) {\n        const actor = actors[0];\n        let defaultAbility = null;\n        \n        if (rollMethodName === ROLL_TYPES.SKILL) {\n          const skill = actor.system.skills?.[rollKey];\n          defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n        } else if (rollMethodName === ROLL_TYPES.TOOL) {\n          const tool = actor.system.tools?.[rollKey];\n          defaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n        }\n        \n        if (defaultAbility) {\n          config.ability = defaultAbility;\n        }\n      }\n      \n      return config;\n    }\n  }\n\n  /**\n   * Orchestrate and distribute rolls for PC and NPC actors\n   * @param {Object} config - Roll configuration\n   * @param {Array} pcActors - PC actors with owners\n   * @param {Actor[]} npcActors - NPC actors\n   * @param {string} rollMethodName - The roll method name\n   * @param {string} rollKey - The roll key\n   */\n  async _orchestrateRollsForActors(config, pcActors, npcActors, rollMethodName, rollKey) {\n    const SETTINGS = getSettings();\n    \n    // Handle PC actors - send roll requests (if sendRequest is true)\n    const successfulRequests = []; // Track successful requests for consolidated notification\n    const offlinePlayerActors = []; // Track offline player actors separately\n    LogUtil.log('_orchestrateRollsForActors', [{\n      config,\n      rollMethodName,\n      rollKey\n    }]);\n    if (config.sendRequest) {\n      for (const { actor, owner } of pcActors) {\n        if (!owner.active) {\n          if(SettingsUtil.get(SETTINGS.showOfflineNotifications.tag)) {\n            NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.playerOffline\", { \n              player: owner.name \n            }));\n          }\n\n          // Track offline player actors separately to ensure dialog is skipped\n          offlinePlayerActors.push(actor);\n          continue;\n        }\n        \n        await this._sendRollRequestToPlayer(actor, owner, rollMethodName, rollKey, config, true); // true = suppress individual notification\n        successfulRequests.push({ actor, owner });\n        \n        await delay(100); // to avoid lag\n      }\n      \n      // Unify notification for all successful requests\n      if (successfulRequests.length > 0) {\n        this._showConsolidatedNotification(successfulRequests, rollMethodName, rollKey);\n      }\n    } else {\n      // if requests are off, add to NPC list to roll locally\n      npcActors.push(...pcActors.map(({ actor }) => actor));\n    }\n    \n    // For actors owned by offline players, GM rolls locally\n    // No more dialog since the GM already configured the roll\n    if (offlinePlayerActors.length > 0) {\n      const offlineConfig = { ...config, skipDialog: true };\n      await this._handleGMRolls(offlinePlayerActors, rollMethodName, rollKey, offlineConfig);\n    }\n    \n    // For NPC actors, GM rolls locally\n    if (npcActors.length > 0) {\n      const npcConfig = { ...config };\n      npcConfig.fastForward = true;\n      npcConfig.skipDialog = true;\n      await this._handleGMRolls(npcActors, rollMethodName, rollKey, npcConfig);\n    }\n  }\n\n  /**\n   * Method called from menu items to trigger the roll for selected actors\n   * @param {string} requestType - The type of roll request (e.g., 'skill', 'ability')\n   * @param {string} rollKey - The specific roll key (e.g., 'acr' for Acrobatics)\n   */\n  async _triggerRoll(requestType, rollKey) {\n    LogUtil.log('_triggerRoll', [requestType, rollKey]);\n    const SETTINGS = getSettings();\n    const selectedActorIds = Array.from(this.selectedActors);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Validate and filter actors\n    const validActorIds = this._getValidActorIds(selectedActorIds);\n    let actors = validActorIds\n      .map(id => game.actors.get(id))\n      .filter(actor => actor);\n    \n    // Get roll method name\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    const rollMethodName = (rollOption?.name || requestType)?.toLowerCase();\n    \n    switch(rollMethodName) {\n      case ROLL_TYPES.CUSTOM:\n        rollKey = await this._handleCustomRoll();\n        if (!rollKey) return;\n        break;\n      case ROLL_TYPES.INITIATIVE:\n      case ROLL_TYPES.INITIATIVE_DIALOG:\n        const combatReady = await ensureCombatForInitiative();\n        if (!combatReady) return;\n        if (game.combat) {\n          const filteredActorIds = await filterActorsForInitiative(validActorIds, game);\n\n          LogUtil.log(\"_triggerRoll filteredActorIds\", [filteredActorIds]);\n          if (!filteredActorIds.length) return;\n          // Convert IDs back to actors\n          actors = filteredActorIds\n            .map(id => game.actors.get(id))\n            .filter(actor => actor);\n        }\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        actors = await filterActorsForDeathSaves(actors);\n        break;\n      default:\n        break;\n    }\n    \n    if (!actors.length) {\n      NotificationManager.notify('warn', \"No valid actors selected\");\n      return;\n    }\n    \n    // Categorize actors\n    const { pcActors, npcActors } = categorizeActorsByOwnership(actors);\n    \n    // Get roll configuration\n    const config = await this._getRollConfiguration(\n      actors, \n      rollMethodName, \n      rollKey, \n      skipDialogs, \n      pcActors\n    );\n    LogUtil.log(\"_triggerRoll config\", [config]);\n    if (!config) return;\n    \n    // Execute rolls\n    await this._orchestrateRollsForActors(config, pcActors, npcActors, rollMethodName, rollKey);\n    \n    // Close menu\n    setTimeout(() => this.close(), 500);\n  }\n  \n  \n  /**\n   * Send a roll request to a player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config - Roll configuration from dialog\n   * @param {boolean} suppressNotification - If true, don't show individual notification\n   */\n  async _sendRollRequestToPlayer(actor, owner, requestType, rollKey, config, suppressNotification = false) {\n    LogUtil.log('_sendRollRequestToPlayer #A', [requestType, rollKey]);\n    const SETTINGS = getSettings();\n    \n    let rollType = requestType?.toLowerCase();\n    \n    // Mapping for compound types\n    if (rollType === ROLL_TYPES.ABILITY_CHECK) {\n      rollType = ROLL_TYPES.ABILITY;\n    } else if (rollType === ROLL_TYPES.SAVING_THROW) {\n      rollType = ROLL_TYPES.SAVE;\n    } else if (rollType === ROLL_TYPES.INITIATIVE_DIALOG) {\n      rollType = ROLL_TYPES.INITIATIVE;\n    }\n    \n    if (rollType === ROLL_TYPES.HIT_DIE) {\n      const hdData = actor.system.attributes.hd; // First available hit die denomination\n      \n      if (hdData.value > 0) {\n        rollKey = hdData.largestAvailable;\n      } else {\n        // No hit dice available - show dialog to GM\n        const dialogResult = await foundry.applications.api.DialogV2.confirm({\n          window: {\n            title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillTitle\") || \"No Hit Dice Available\",\n            classes: [\"crlngn-hit-die-dialog\"]\n          },\n          position: {\n            width: 420\n          },\n          content: `<p>${game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillMessage\", { \n            actor: actor.name \n          }) || \"\"}</p>`,\n          modal: true,\n          rejectClose: false,\n          yes: {\n            label: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refillAndSend\") || \"Refill & Send\",\n            icon: \"\"\n          },\n          no: {\n            label: game.i18n.localize(\"Cancel\") || \"Cancel\",\n            icon: \"\"\n          }\n        });\n        \n        if (dialogResult) {\n          // const maxHitDice = actor.system.attributes.hd.max;\n          // const hitDieResult = {};\n          // actor._getRestHitDiceRecovery({ maxHitDice, type: \"long\" }, hitDieResult);\n\n          // const updates = hitDieResult.updateItems ?? [];\n          // const actorUpdates = hitDieResult.updateData;\n          // const hitDiceRecovered = hitDieResult.deltas?.hitDice ?? 0;\n          \n          // await actor.updateEmbeddedDocuments(\"Item\", updates);\n          // if (actorUpdates) {\n          //   await actor.update(actorUpdates);\n          // }\n          \n          try {\n            LogUtil.log('About to call handleHitDieRecovery for', [actor.name]);\n            const hitDieResult = await RollHandlers.handleHitDieRecovery(actor);\n            LogUtil.log('handleHitDieRecovery completed', [hitDieResult]);\n          } catch (error) {\n            LogUtil.error('Error calling handleHitDieRecovery:', [error]);\n          }\n          \n          // Get the largest available hit die after refill\n          rollKey = actor.system.attributes.hd.largestAvailable;\n          LogUtil.log('_sendRollRequestToPlayer - Hit Die REFILL', [{\n            hdData: actor.system.attributes.hd\n          }]);\n          \n          NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.hitDie.refilled\", { \n            actor: actor.name \n          }) || `Hit dice refilled for ${actor.name}`);\n        } else {\n          // User cancelled - don't send the request\n          return;\n        }\n      }\n    }\n\n    LogUtil.log('_sendRollRequestToPlayer - Hit Die Debug', [{\n      rollType,\n      rollKey,\n      actor: actor.name\n    }]);\n    \n    // Build the request data with proper rollProcessConfig\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      activityId: null,  // Menu-initiated rolls don't use activities\n      rollProcessConfig: {\n        ...config,\n        _requestedBy: game.user.name  // Add who requested the roll\n      },\n      skipDialog: false, // Never skip to player when it's a request\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    \n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    if (!suppressNotification) {\n      NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent\", { \n        player: owner.name,\n        actor: actor.name \n      }));\n    }\n  }\n  \n  /**\n   * Send a consolidated notification for multiple roll requests\n   * @param {Array} successfulRequests - Array of {actor, owner} objects\n   * @param {string} rollMethodName - The type of roll being requested\n   * @param {string} rollKey - The specific roll key (if applicable)\n   */\n  _showConsolidatedNotification(successfulRequests, rollMethodName, rollKey) {\n    LogUtil.log('_showConsolidatedNotification');\n    // Group requests by player\n    const requestsByPlayer = {};\n    for (const { actor, owner } of successfulRequests) {\n      if (!requestsByPlayer[owner.id]) {\n        requestsByPlayer[owner.id] = {\n          player: owner,\n          actors: []\n        };\n      }\n      requestsByPlayer[owner.id].actors.push(actor);\n    }\n    \n    // Get roll type name for display\n    // Find the option key that matches this rollMethodName\n    let rollOptionKey = null;\n    for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n      if (option.name === rollMethodName) {\n        rollOptionKey = key;\n        break;\n      }\n    }\n    \n    const rollTypeKey = rollMethodName;\n    let rollTypeName = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollTypeKey}`) || rollTypeKey;\n    \n    // Add specific roll details if applicable\n    if (rollKey) {\n      const normalizedRollTypeKey = rollTypeKey.toLowerCase();\n      if (normalizedRollTypeKey === ROLL_TYPES.SKILL) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.SAVING_THROW) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.ABILITY_CHECK) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.TOOL) {\n        // Try to get tool name from enrichmentLookup\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          rollTypeName = `${rollTypeName} (${toolItem?.name || rollKey})`;\n        } else {\n          rollTypeName = `${rollTypeName} (${rollKey})`;\n        }\n      } else if (normalizedRollTypeKey === ROLL_TYPES.CUSTOM) {\n        rollTypeName = `${rollTypeName}: ${rollKey}`;\n      }\n    }\n    \n    // Use NotificationManager for consolidated roll request notifications\n    NotificationManager.notifyRollRequestsSent(requestsByPlayer, rollTypeName);\n  }\n  \n  /**\n   * Handle rolling for NPC actors locally\n   * @param {Actor[]} actors \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {BasicRollProcessConfiguration} rollProcessConfig - Process configuration from GM dialog\n   */\n  async _handleGMRolls(actors, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_handleGMRolls', [actors, requestType, rollKey, rollProcessConfig]);\n    \n    for (const actor of actors) {\n      await this._executeActorRoll(actor, requestType, rollKey, rollProcessConfig);\n      // Delay between rolls to prevent lag and improve chat readability\n      await delay(100);\n    }\n  }\n  \n  /**\n   * Execute a roll for a specific actor\n   * @param {Actor} actor \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {BasicRollProcessConfiguration} rollProcessConfig - Process configuration from GM dialog\n   */\n  async _executeActorRoll(actor, requestType, rollKey, rollProcessConfig) {\n    LogUtil.log('_executeActorRoll', [requestType, rollKey, rollProcessConfig]);\n    try {\n      // Normalize the requestType to ensure case matching\n      const normalizedType = requestType.toLowerCase();\n      \n      // Special handling for Hit Die rolls - get the denomination from the actor\n      let actualRollKey = rollKey;\n      if (normalizedType === ROLL_TYPES.HIT_DIE) {\n        // Get the first available hit die denomination for this actor\n        const hdData = actor.system.attributes.hd;\n        if (hdData) {\n          // Find the first denomination with available uses\n          const denominations = ['d6', 'd8', 'd10', 'd12', 'd20'];\n          for (const denom of denominations) {\n            const available = hdData[denom]?.value || 0;\n            if (available > 0) {\n              actualRollKey = denom;\n              break;\n            }\n          }\n        }\n        if (!actualRollKey) {\n          // No hit dice available\n          LogUtil.log('_executeActorRoll - No hit dice available', [actor.name]);\n          NotificationManager.notify('warn', game.i18n.format(\"DND5E.HitDiceWarn\", { name: actor.name }));\n          return;\n        }\n      }\n      \n      // Extract situational bonus from the rolls array if present\n      const situational = rollProcessConfig.rolls?.[0]?.data?.situational || \"\";\n      \n      // Build requestData structure expected by RollHandlers\n      const requestData = {\n        rollKey: actualRollKey,\n        config: {\n          ...rollProcessConfig,\n          situational: situational,\n          rollMode: rollProcessConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n          advantage: rollProcessConfig.advantage || false,\n          disadvantage: rollProcessConfig.disadvantage || false,\n          target: rollProcessConfig.target\n        }\n      };\n      \n      // Dialog configuration\n      const dialogConfig = {\n        configure: !rollProcessConfig.fastForward && !rollProcessConfig.skipDialog\n      };\n      \n      // Message configuration\n      const messageConfig = {\n        rollMode: rollProcessConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        create: rollProcessConfig.chatMessage !== false\n      };\n      \n      // Pass the proper roll configuration structure\n      const rollConfig = rollProcessConfig.rolls?.[0] || {};\n      LogUtil.log('_executeActorRoll - rollConfig', [rollConfig, requestData]);\n      \n      // Use the roll handler for the requested roll type\n      const handler = RollHandlers[normalizedType];\n      if (handler) {\n        LogUtil.log('_executeActorRoll - handler', [handler]);\n        await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        NotificationManager.notify('warn', `Unknown roll type: ${requestType}`);\n      }\n    } catch (error) {\n      LogUtil.error('executeActorRoll', [error]);\n      NotificationManager.notify('error', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollError\", { \n        actor: actor.name \n      }));\n    }\n  }\n\n  /**\n   * Clean up when closing\n   */\n  async _onClose(options) {\n    LogUtil.log('_onClose');\n    await super._onClose(options);\n    \n    // Reset state\n    this.selectedActors.clear();\n    this.selectedRequestType = null;\n    \n    // Remove click outside listener (with capture flag to match addEventListener)\n    document.removeEventListener('click', this._onClickOutside, true);\n    \n    // Remove token control hook\n    if (this._tokenControlHook) {\n      Hooks.off('controlToken', this._tokenControlHook);\n      this._tokenControlHook = null;\n    }\n    \n    // Clear any pending token update timeout\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n      this._tokenUpdateTimeout = null;\n    }\n  }\n\n  /**\n   * Override render positioning to use CSS instead of inline styles\n   */\n  setPosition(position={}) {\n    LogUtil.log('setPosition');\n    // Don't set any inline position styles - let CSS handle it\n    return this;\n  }\n  \n  /**\n   * Show custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  async _showCustomRollDialog() {\n    LogUtil.log('_showCustomRollDialog');\n    return CustomRollDialog.prompt({\n      formula: \"\",\n      readonly: false\n    });\n  }\n\n  /**\n   * Toggle the roll requests menu open/closed\n   * @static\n   */\n  static toggle() {\n    LogUtil.log('RollRequestsMenu.toggle');\n    if (!this.#instance) {\n      this.#instance = new RollRequestsMenu();\n      this.#instance.render(true);\n    } else {\n      if (this.#instance.rendered) {\n        this.#instance.close();\n      } else {\n        this.#instance._initializeFromSelectedTokens();\n        this.#instance.render(true);\n      }\n    }\n  }\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\n\n/**\n * Utility class for managing sidebar controls\n */\nexport class SidebarUtil {\n  /**\n   * Add the roll request bolt icon to sidebar\n   * @param {SidebarTab} app - The sidebar tab application\n   * @param {jQuery} html - The rendered HTML\n   * @param {Object} options - Render options\n   */\n  static addSidebarControls(app, html, options) {\n    if (!game.user.isGM || app.id !== \"chat\") return;\n    \n    const htmlElement = html[0] || html;\n    \n    // Find the chat controls container\n    const chatControls = htmlElement.querySelector(\"#chat-controls\");\n    if (!chatControls || chatControls.querySelector('.roll-requests-icon')) {\n      return;\n    }\n    \n    // Get current settings to determine initial state\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Create the roll request icon\n    const rollRequestIcon = document.createElement('a');\n    rollRequestIcon.id = \"crlngn-requests-icon\";\n    rollRequestIcon.setAttribute(\"data-tooltip-direction\", \"RIGHT\");\n    rollRequestIcon.className = `chat-control-icon roll-requests-icon${rollRequestsEnabled ? ' active' : ''}`;\n    rollRequestIcon.title = game.i18n.localize('CRLNGN_ROLLS.ui.menus.rollRequestsTitle');\n    rollRequestIcon.innerHTML = `<i class=\"fas fa-bolt${rollRequestsEnabled ? '' : '-slash'}\"></i>`;\n    \n    // Insert before the d20 dice icon\n    const firstChatControlIcon = chatControls.querySelector('.chat-control-icon');\n    if (firstChatControlIcon) {\n      firstChatControlIcon.parentNode.insertBefore(rollRequestIcon, firstChatControlIcon);\n    } else {\n      chatControls.insertBefore(rollRequestIcon, chatControls.firstChild);\n    }\n    \n    // Add click listener\n    rollRequestIcon.addEventListener(\"click\", () => {\n      RollRequestsMenu.toggle();\n    });\n  }\n  \n  /**\n   * Update the roll requests icon based on enabled state\n   * @param {boolean} enabled - Whether roll requests are enabled\n   */\n  static updateRollRequestsIcon(enabled) {\n    const icon = document.querySelector('#crlngn-requests-icon i');\n    if (icon) {\n      icon.className = `fas fa-bolt${enabled ? '' : '-slash'}`;\n    }\n  }\n}","import { HOOKS_CORE, HOOKS_DND5E } from \"../constants/Hooks.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { RollInterceptor } from \"./RollInterceptor.mjs\";\nimport { updateSidebarClass, isSidebarExpanded } from \"./helpers/Helpers.mjs\";\nimport { SidebarUtil } from \"./SidebarUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for managing all module hooks in one place\n */\nexport class HooksUtil {\n  /**\n   * Registered hook IDs for cleanup\n   * @type {Map<string, number>}\n   */\n  static registeredHooks = new Map();\n  \n  /**\n   * Initialize main module hooks\n   */\n  static initialize() {\n    Hooks.once(HOOKS_CORE.INIT, this._onInit.bind(this));\n    Hooks.once(HOOKS_CORE.READY, this._onReady.bind(this));\n  }\n  \n  /**\n   * Triggered when Foundry initializes\n   */\n  static _onInit() {\n    const SETTINGS = getSettings();\n    document.body.classList.add(\"crlngn-rolls\");\n    SettingsUtil.registerSettings();\n    DiceConfigUtil.initialize();\n    \n    // Register sidebar control hook\n    this._registerHook(HOOKS_CORE.RENDER_SIDEBAR_TAB, this._onRenderSidebarTab.bind(this));\n  }\n  \n  /**\n   * Triggered when Foundry is ready (fully loaded)\n   */\n  static _onReady() {\n    const SETTINGS = getSettings();\n    const isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n    if (isDebugOn) {\n      CONFIG.debug.hooks = true;\n    }\n    RollInterceptor.initialize();\n    \n    this._registerDnd5eHooks();\n\n    if (game.user.isGM) {\n      this._registerGMHooks();\n    }else{\n      DiceConfigUtil.getDiceConfig();\n      this._registerPlayerHooks();\n    }\n    updateSidebarClass(isSidebarExpanded());\n  }\n  \n  /**\n   * Register D&D5e specific hooks\n   */\n  static _registerDnd5eHooks() {\n    this._registerHook(HOOKS_DND5E.POST_ROLL_CONFIG, this._onPostRollConfig.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessage.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessageFlavor.bind(this));\n    this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderRollConfigDialog.bind(this));\n    this._registerHook(HOOKS_DND5E.RENDER_SKILL_TOOL_ROLL_DIALOG, this._onRenderSkillToolDialog.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_USE_ACTIVITY, this._onPreUseActivity.bind(this));\n  }\n  \n  /**\n   * Register GM-specific hooks\n   */\n  static _registerGMHooks() {\n    this._registerHook(HOOKS_CORE.USER_CONNECTED, this._onUserConnected.bind(this));\n    \n    // Request dice config from all active users\n    game.users.forEach(user => {\n      this._onUserConnected(user);\n    });\n  }\n\n  static _registerPlayerHooks() {\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._onPreRollHitDieV2.bind(this));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG_V2, this._onPreRollInitiativeDialogV2.bind(this));\n    \n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._onPreRollAttackV2.bind(this));\n    // this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderRollConfigDialog.bind(this));\n    // this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._onPreRollDamageV2.bind(this));\n  }\n  \n  /**\n   * Handle data after roll configuration\n   */\n  static _onPostRollConfig(rolls, config, dialog, message) {\n    if (config._showRequestedBy && rolls.length > 0) {\n      message.data = message.data || {};\n      message.data._showRequestedBy = true;\n      message.data._requestedBy = config._requestedBy;\n    }\n  }\n  \n  /**\n   * Handle data before creating chat message for requested rolls\n   */\n  static _onPreCreateChatMessage(chatMessage, data, options, userId) {\n    if (data._showRequestedBy && data.rolls?.length > 0) {\n      const requestedBy = data._requestedBy || 'GM';\n      const requestedText = game.i18n.format('CRLNGN_ROLL_REQUESTS.chat.requestedBy', { gm: requestedBy });\n      \n      const currentFlavor = data.flavor || '';\n      data.flavor = currentFlavor ? `${currentFlavor} ${requestedText}` : requestedText;\n    }\n  }\n  \n  /**\n   * Handle flavor data before creating chat message\n   */\n  static _onPreCreateChatMessageFlavor(message, data, options, userId) {\n    // Check if this is a roll message with our custom flavor\n    if (data.rolls?.length > 0 && data.rolls[0]) {\n      try {\n        // The roll data includes the options directly\n        const rollData = data.rolls[0];\n        if (rollData.options?._customFlavor) {\n          data.flavor = rollData.options._customFlavor;\n        }\n      } catch (error) {\n        // Silently ignore errors\n      }\n    }\n  }\n  \n  /**\n   * Triggered whenever roll configuration dialog is rendered. \n   * Used to add custom situational bonus from data, since the default DnD5e dialog does not seem to handle that\n   */\n  static _onRenderRollConfigDialog(app, html, data) {\n    LogUtil.log(\"_onRenderRollConfigDialog triggered\", [ app, data ]);\n    \n    // Check if this is a hit die dialog first\n    const title = html.querySelector('.window-title')?.textContent;\n    if (title && title.includes('Hit Die')) {\n      this._onRenderHitDieDialog(app, html, data);\n      return;\n    }\n    \n    // Do not continue if we've already triggered\n    if (app._situationalTriggered) return;\n    \n    // Does the dialog have a situational input field?\n    const situationalInputs = html.querySelectorAll('input[name*=\"situational\"]');\n    LogUtil.log(\"Situational inputs:\", [situationalInputs.length]);\n    \n    let hasTriggered = false;\n    situationalInputs.forEach((input, index) => {      \n      // check if we need to populate the value\n      if (!input.value && (app.config?.rolls?.[0]?.data?.situational) && app.config?.isConcentration) {\n        input.value = app.config.rolls[0].data.situational;\n        hasTriggered = true;\n      }\n      \n      if (input.value && !hasTriggered) {\n        // Apply flag to prevent re-render loop\n        app._situationalTriggered = true;\n        hasTriggered = true;\n        \n        // Dispatch a change event to trigger formula update\n        setTimeout(() => {\n          input.dispatchEvent(new Event('change', {\n            bubbles: true,\n            cancelable: false\n          }));\n          \n          // Clear the situational value from the roll config data to prevent re-population\n          if (app.config?.rolls?.[0]?.data) {\n            delete app.config.rolls[0].data.situational;\n          }\n        }, 50);\n      }\n    });\n  }\n  \n  /**\n   * Request dice configuration from the connected user\n   */\n  static _onUserConnected(user) {\n    if (user.active && user.id !== game.user.id) {\n      DiceConfigUtil.requestDiceConfigFromUser(user.id);\n    }\n  }\n  \n  /**\n   * Handle render sidebar tab\n   */\n  static _onRenderSidebarTab(app, html, options) {\n    SidebarUtil.addSidebarControls(app, html, options);\n  }\n  \n  // /**\n  //  * Handle pre-configure initiative hook to add situational bonus\n  //  */\n  // static _onPreConfigureInitiative(actor, config) {\n  //   // Check if there's a stored situational bonus for this actor\n  //   if (actor._initiativeSituationalBonus) {\n  //     LogUtil.log(\"Adding situational bonus to initiative:\", [\n  //       \"actor:\", actor.name,\n  //       \"situational:\", actor._initiativeSituationalBonus,\n  //       \"config before:\", config\n  //     ]);\n      \n  //     // Initialize rolls array if needed\n  //     if (!config.rolls || config.rolls.length === 0) {\n  //       config.rolls = [{\n  //         parts: [],\n  //         data: {},\n  //         options: {}\n  //       }];\n  //     }\n      \n  //     // Add situational bonus to the roll data\n  //     // config.situational = actor._initiativeSituationalBonus;\n  //     config.rolls[0].data.situational = actor._initiativeSituationalBonus;\n      \n  //     LogUtil.log(\"Flash Rolls 5e | Initiative config after adding situational:\", [config]);\n  //   }\n  // }\n  \n  /**\n   * Register a hook and track it\n   * @param {string} hookName - The hook name\n   * @param {Function} handler - The handler function\n   * @private\n   */\n  static _registerHook(hookName, handler) {\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.set(`${hookName}_${hookId}`, hookId);\n    return hookId;\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterAll() {\n    this.registeredHooks.forEach((hookId, key) => {\n      const hookName = key.split('_')[0];\n      Hooks.off(hookName, hookId);\n    });\n    this.registeredHooks.clear();\n  }\n  \n  /**\n   * Check if a hook is registered\n   * @param {string} hookName - The hook name to check\n   * @returns {boolean}\n   */\n  static isRegistered(hookName) {\n    for (const key of this.registeredHooks.keys()) {\n      if (key.startsWith(`${hookName}_`)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * Handle pre-roll hit die hook to consolidate situational bonus\n   */\n  static _onPreRollHitDieV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollHitDieV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    // Check if we have multiple rolls\n    if (config.rolls && config.rolls.length > 1) {\n      // Check if second roll has situational bonus to consolidate\n      const secondRoll = config.rolls[1];\n      if (secondRoll && secondRoll.data && secondRoll.data.situational) {\n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        config.rolls[0].data.situational = secondRoll.data.situational;\n      }\n      \n      // Remove any empty or invalid rolls (keep only the first valid roll)\n      config.rolls = config.rolls.slice(0, 1);\n      \n      LogUtil.log(\"Cleaned up hit die rolls\", config.rolls);\n    }\n  }\n  \n  /**\n   * Handle pre-roll initiative dialog hook to add situational bonus\n   */\n  static _onPreRollInitiativeDialogV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollInitiativeDialogV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    // Check if actor has stored situational bonus\n    const actor = config.subject;\n    if (actor && actor._initiativeSituationalBonus) {\n      if (!config.rolls || config.rolls.length === 0) {\n        const initiativeConfig = actor.getInitiativeRollConfig({});\n        config.rolls = initiativeConfig.rolls || [];\n      }\n      \n      // Add situational bonus\n      if (config.rolls.length > 0) {\n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        config.rolls[0].data.situational = actor._initiativeSituationalBonus;\n        \n        LogUtil.log(\"Added situational bonus to initiative dialog\", [{\n          bonus: actor._initiativeSituationalBonus,\n          rolls: config.rolls\n        }]);\n        \n        // Clean up the temporary storage\n        delete actor._initiativeSituationalBonus;\n      }\n    }\n  }\n  \n  /**\n   * Handle pre-roll attack hook to restore GM-configured options\n   */\n  static _onPreRollAttackV2(config, dialogOptions, messageOptions) {\n    LogUtil.log(\"_onPreRollAttackV2 triggered\", [config, dialogOptions, messageOptions]);\n    \n    // Check if this is from a roll request with stored configuration\n    // The activity stores the flag on its parent item\n    const stored = config.subject?.item?.getFlag(MODULE_ID, 'tempAttackConfig');\n    if (stored) {\n      LogUtil.log(\"_onPreRollAttackV2 - Found stored request config from flag\", [stored]);\n      \n      if(stored.isRollRequest === false || stored.skipDialog === true || stored.sendRequest === false) {\n        LogUtil.log(\"_onPreRollAttackV2 - Not a roll request, skipping\", [stored]);\n        return;\n      }\n\n      // Merge attack options\n      if (stored.attackMode) config.attackMode = stored.attackMode;\n      if (stored.ammunition) config.ammunition = stored.ammunition;\n      if (stored.mastery !== undefined) config.mastery = stored.mastery;\n      \n      // Set advantage/disadvantage\n      if (stored.advantage) config.advantage = true;\n      if (stored.disadvantage) config.disadvantage = true;\n      \n      // Set situational bonus\n      if (stored.situational) {\n        // Ensure rolls array exists\n        if (!config.rolls || config.rolls.length === 0) {\n          config.rolls = [{\n            parts: [],\n            data: {},\n            options: {}\n          }];\n        }\n        \n        // Add situational bonus to first roll\n        if (!config.rolls[0].data) {\n          config.rolls[0].data = {};\n        }\n        config.rolls[0].data.situational = stored.situational;\n      }\n      LogUtil.log(\"_onPreRollAttackV2 - Applied stored configuration to attack roll\", [config]);\n    }\n  }\n  \n  /**\n   * Handle pre-use activity hook to prevent usage messages when GM intercepts rolls\n   */\n  static _onPreUseActivity(activity, config, dialog, message) {\n    LogUtil.log(\"_onPreUseActivity triggered\", [activity, config, dialog, message]);\n    \n    // Only proceed if user is GM\n    if (!game.user.isGM) return;\n    activity.item.unsetFlag(MODULE_ID, 'tempAttackConfig');\n    \n    // Check if roll requests are enabled\n    const SETTINGS = getSettings();\n    const requestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    if (!requestsEnabled) return;\n    \n    // Check if the actor has player ownership\n    const actor = activity.actor;\n    if (!actor) return;\n    \n    const hasPlayerOwner = Object.entries(actor.ownership).some(([userId, level]) => {\n      const user = game.users.get(userId);\n      return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n    });\n    \n    if (hasPlayerOwner) {\n      // Prevent the usage message from being created\n      LogUtil.log(\"Preventing usage message for player-owned actor\", [actor.name]);\n      message.create = false;\n    }\n  }\n  \n  /**\n   * Handle rendering of skill/tool configuration dialog to fix message flavor\n   */\n  static _onRenderSkillToolDialog(app, html, data) {\n    LogUtil.log(\"_onRenderSkillToolDialog triggered\", [app]);\n    \n    // Only process if this is from a roll request and has a pre-selected ability\n    if (!app.config?.isRollRequest || !app.config?.ability) return;\n    \n    // Check if we've already processed this dialog to avoid infinite loops\n    if (app._abilityFlavorFixed) return;\n    \n    // Find the ability selector\n    const abilitySelect = html.querySelector('select[name=\"ability\"]');\n    if (!abilitySelect) return;\n    \n    const selectedAbility = abilitySelect.value;\n    const configAbility = app.config.ability;\n\n    // Is the selected ability the same as the config ability?\n    if (selectedAbility === configAbility) {\n      // Mark that we've fixed this dialog\n      app._abilityFlavorFixed = true;\n      \n      // Trigger a change event to force message flavor to update\n      setTimeout(() => {\n        const changeEvent = new Event('change', {\n          bubbles: true,\n          cancelable: true\n        });\n        abilitySelect.dispatchEvent(changeEvent);\n      }, 50);\n    }\n  }\n  \n  /**\n   * Handle rendering of hit die dialog to add denomination selector for multiclass\n   */\n  static _onRenderHitDieDialog(app, html, data) {\n    // Only process hit die dialogs - check window title\n    const title = html.querySelector('.window-title')?.textContent;\n    if (!title || !title.includes('Hit Die')) return;\n    \n    const actor = app.config?.subject;\n    if (!actor) return;\n    \n    LogUtil.log(\"_onRenderHitDieDialog triggered\", [{\n      app,\n      actor: actor.name,\n      hd: actor.system.attributes.hd\n    }]);\n    \n    // Get available hit dice from the actor's classes\n    const hdData = actor.system.attributes.hd;\n    const availableDice = [];\n    \n    // Get hit dice from actor's classes\n    for (const cls of Object.values(actor.classes || {})) {\n      const denom = cls.system.hitDice;\n      const classHD = cls.system.levels;\n      const usedHD = cls.system.hitDiceUsed || 0;\n      const availableHD = classHD - usedHD;\n      \n      if (availableHD > 0) {\n        // Check if we already have this denomination\n        const existing = availableDice.find(d => d.denomination === denom);\n        if (existing) {\n          existing.available += availableHD;\n          existing.classes.push(cls.name);\n        } else {\n          availableDice.push({\n            denomination: denom,\n            available: availableHD,\n            max: classHD,\n            classes: [cls.name]\n          });\n        }\n      }\n    }\n    \n    // Only add selector if multiple dice types are available\n    if (availableDice.length > 1) {\n      // Find the formula section\n      const formulaSection = html.querySelector('.formulas');\n      if (!formulaSection) return;\n      \n      // Get current denomination from the roll\n      const currentDenom = app.config.rolls?.[0]?.options?.denomination || hdData.largestAvailable;\n      \n      // Create hit die selector\n      const selectorHtml = `\n        <div class=\"form-group\">\n          <label>${game.i18n.localize(\"DND5E.HitDice\")}</label>\n          <select name=\"hitDieSelector\" class=\"hit-die-selector\">\n            ${availableDice.map(die => `\n              <option value=\"${die.denomination}\" ${die.denomination === currentDenom ? 'selected' : ''}>\n                ${die.denomination} (${die.available} ${game.i18n.localize(\"DND5E.available\")}) - ${die.classes.join(', ')}\n              </option>\n            `).join('')}\n          </select>\n        </div>\n      `;\n      \n      // Insert before the first form group\n      const firstFormGroup = formulaSection.querySelector('.form-group');\n      if (firstFormGroup) {\n        firstFormGroup.insertAdjacentHTML('beforebegin', selectorHtml);\n        \n        // Add change handler\n        const selector = html.querySelector('.hit-die-selector');\n        selector?.addEventListener('change', async (event) => {\n          const newDenom = event.target.value;\n          \n          // Update the roll configuration\n          if (app.config.rolls?.[0]?.options) {\n            app.config.rolls[0].options.denomination = newDenom;\n          }\n          \n          // Recalculate the formula\n          const conMod = actor.system.abilities.con.mod;\n          const newFormula = `max(0, 1${newDenom} + ${conMod})`;\n          \n          if (app.config.rolls?.[0]) {\n            app.config.rolls[0].formula = newFormula;\n            \n            // Re-evaluate the roll to update the preview\n            const roll = new CONFIG.Dice.D20Roll(newFormula, actor.getRollData());\n            await roll.evaluate({async: false});\n            app.config.rolls[0] = roll;\n          }\n          \n          // Force re-render of the dialog\n          app.render(true);\n          \n          LogUtil.log(\"Updated hit die denomination\", [{\n            newDenom,\n            newFormula,\n            conMod\n          }]);\n        });\n      }\n    }\n  }\n}","import { ROLL_TYPES } from \"../constants/General.mjs\";\nimport { getRollTypeDisplay, applyTargetTokens, NotificationManager } from \"./helpers/Helpers.mjs\";\nimport { RollHandlers } from \"./RollHandlers.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * @typedef {Object} RollRequestData\n * @property {string} type - Always \"rollRequest\"\n * @property {string} requestId - Unique identifier for this request\n * @property {string} actorId - ID of the actor to roll for\n * @property {string} rollType - Type of roll (ability, save, skill, etc.) from ROLL_TYPES\n * @property {string} rollKey - Specific roll key (e.g., \"str\", \"acr\", \"perception\")\n * @property {string|null} activityId - Activity ID for item-based rolls\n * @property {BasicRollProcessConfiguration} rollProcessConfig - D&D5e roll process configuration\n * @property {boolean} skipDialog - Whether to skip the roll configuration dialog\n * @property {string[]} targetTokenIds - Array of targeted token IDs\n * @property {boolean} preserveTargets - Whether to apply GM's targets to the player\n */\n\n/**\n * Utility class for handling roll requests from GM to players\n */\nexport class RollRequestUtil {\n  /**\n   * Handle roll request from GM on player side\n   * @param {RollRequestData} requestData - The roll request data\n   */\n  static async handleRequest(requestData) {\n    LogUtil.log('handleRequest', [requestData]);\n    if (game.user.isGM) return;\n    \n    const actor = game.actors.get(requestData.actorId);\n    if (!actor || !actor.isOwner) {\n      return;\n    }\n    \n    if (requestData.preserveTargets && \n        requestData.targetTokenIds?.length > 0 && \n        game.user.targets.size === 0) {\n      applyTargetTokens(requestData.targetTokenIds);\n    }\n    \n    NotificationManager.notify('info', '', {\n      batch: true,\n      batchData: {\n        actor: actor.name,\n        rollType: requestData.rollType,\n        rollKey: requestData.rollKey,\n        gm: requestData.rollProcessConfig._requestedBy || 'GM'\n      }\n    });\n    \n    RollRequestUtil.executePlayerRollRequest(actor, requestData);\n  }\n  \n  /**\n   * Execute a roll request received by a player\n   * @param {Actor} actor - The actor performing the roll\n   * @param {RollRequestData} requestData - The roll request data from GM\n   */\n  static async executePlayerRollRequest(actor, requestData) {\n    LogUtil.log('executePlayerRollRequest', [actor, requestData]);\n    LogUtil.log('executePlayerRollRequest - checking rolls', [\n      'rollProcessConfig:', requestData.rollProcessConfig,\n      'rollProcessConfig.rolls:', requestData.rollProcessConfig.rolls,\n      'rollProcessConfig.rolls[0]:', requestData.rollProcessConfig.rolls?.[0],\n      'rollProcessConfig.rolls[0].data:', requestData.rollProcessConfig.rolls?.[0]?.data\n    ]);\n    \n    try {\n      // Normalize rollType to lowercase for consistent comparisons\n      const normalizedRollType = requestData.rollType?.toLowerCase();\n      \n      // Extract the individual roll configuration from the process config\n      const rollConfig = requestData.rollProcessConfig.rolls?.[0] || {\n        parts: [],\n        data: {},\n        options: {}\n      };\n      \n      // Dialog configuration\n      const shouldSkipDialog = game.user.isGM ? requestData.skipDialog : false;\n      \n      const dialogConfig = {\n        configure: !shouldSkipDialog\n      };\n      \n      // Message configuration\n      const messageConfig = {\n        rollMode: requestData.rollProcessConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        create: true // requestData.rollProcessConfig.chatMessage !== false\n      };\n      \n      // Build requestData structure expected by handlers\n      const handlerRequestData = {\n        rollKey: requestData.rollKey,\n        activityId: requestData.activityId, // Include activityId for attack/damage rolls\n        config: requestData.rollProcessConfig\n        // config: {\n        //   advantage: requestData.rollProcessConfig.advantage,\n        //   disadvantage: requestData.rollProcessConfig.disadvantage,\n        //   situational: rollConfig.data?.situational || \"\",\n        //   rollMode: requestData.rollProcessConfig.rollMode,\n        //   target: requestData.rollProcessConfig.target,\n        //   requestedBy: requestData.rollProcessConfig._requestedBy\n        // }\n      };\n      \n      LogUtil.log('executePlayerRollRequest', [handlerRequestData, rollConfig]);\n\n      // Use the roll handler for the requested roll type\n      const handler = RollHandlers[normalizedRollType];\n      if (handler) {\n        await handler(actor, handlerRequestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        LogUtil.warn(`No handler found for roll type: ${normalizedRollType}`);\n        NotificationManager.notify('warn', game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollError', { \n          actor: actor.name || 'Unknown Actor'\n        }));\n      }\n    } catch (error) {\n      LogUtil.error('Error executing roll request:', [error]);\n      NotificationManager.notify('error', game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollError', { \n        actor: actor.name || 'Unknown Actor'\n      }));\n    }\n  }\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SOCKET_CALLS } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { HooksUtil } from \"./HooksUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { RollRequestUtil } from \"./RollRequestUtil.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    SocketUtil.initialize(Main.registerSocketCalls);\n    HooksUtil.initialize();\n  }\n\n  // Wrapper methods for socket calls to DiceConfigUtil\n  static getDiceConfig() {\n    return DiceConfigUtil.getDiceConfig();\n  }\n  \n  static receiveDiceConfig(userId, diceConfig) {\n    DiceConfigUtil.receiveDiceConfig(userId, diceConfig);\n  }\n\n  /**\n   * Handle roll request from GM on player side\n   * @param {import('./RollRequestUtil.mjs').RollRequestData} requestData - The roll request data\n   */\n  static async handleRollRequest(requestData) {\n    return RollRequestUtil.handleRequest(requestData);\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.handleRollRequest, Main.handleRollRequest);\n  }\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\n// Initialize the module\nMain.init();\n"],"names":["SETTING_INPUT","SETTING_SCOPE","getSettings","MODULE_ID","DEBUG_TAG","SOCKET_CALLS","ROLL_TYPES","ROLL_REQUEST_OPTIONS","MODULE","HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","__publicField","LogUtil","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","name","func","value","callback","handler","parameters","userId","executionKey","SocketUtil","DiceConfigUtil","clientSettings","diceConfig","_b","user","SettingsUtil","SETTINGS","entry","setting","settingObj","settingName","moduleName","selectedSetting","newValue","requestsIcon","ModuleHelpers","moduleId","module","ActivityUtil","item","rollType","activities","attackActivities","damageAttackActivities","damageActivities","saveActivities","itemSaveActivities","activityType","actor","itemId","activityId","config","_c","_d","_e","_f","_g","_h","_i","_j","activity","normalizedRollType","rollRequestConfig","workflow","MidiQOL","damageConfig","formulas","part","f","defaultConfig","defaultOptions","formula","ignoreCrit","damageType","GMRollConfigMixin","Base","message","formData","index","abilityFromForm","dcFromForm","situational","idx","dcValue","formConfig","event","sendRequestCheckbox","dcInput","action","finalizedRolls","context","GMRollConfigDialog","dialog","partId","configSection","templateData","template","wrapper","button","actors","rollKey","actorId","a","showDC","rollClass","rollConfig","messageConfig","dialogConfig","app","resolve","firstRoll","advantage","disadvantage","target","rollProcessConfig","defaultRollMode","defaultAbility","level","_k","_l","_m","title","skillLabel","skill","abilityLabel","saveAbility","checkAbility","toolData","toolLabel","toolItem","GMHitDieConfigDialog","form","GMSkillToolConfigDialog","skillConfig","tool","GMDamageConfigDialog","buttonGroup","originalConfig","originalDialog","position","dialogOptions","GMAttackConfigDialog","RollHelpers","requestData","additionalConfig","CustomRollDialog","htmlElement","formulaInput","validationMessage","messageElement","die","currentFormula","diceRegex","diceMap","remainingFormula","match","count","dieType","newDieType","diceParts","RollHandlers","processConfig","rollOptions","activityConfig","confirmedFormula","updateResult","itemUpdateResult","error","RollInterceptor","hookName","hookId","hookNames","isInitiativeRoll","moduleFlags","owner","_n","rollRequestsEnabled","DialogClass","skipDialogs","configWithoutEvent","finalConfig","dialogResult","handlerMap","modifiedConfig","ownership","t","getRollTypeDisplay","display","showBatchedNotifications","pendingNotifications","getRollTypeDisplayFn","notificationsByType","notif","key","entries","messages","rollTypeDisplay","actorNames","getPlayerOwner","applyTargetTokens","tokenIds","id","isPlayerOwned","hasTokenInScene","currentScene","token","updateCanvasTokenSelection","selected","tokens","delay","ms","isSidebarExpanded","updateSidebarClass","isExpanded","body","buildRollTypes","selectedRequestType","selectedActors","rollTypes","selectedOption","firstActorId","allTools","label","str","b","rollData","configData","_NotificationManager","type","requestsByPlayer","rollTypeName","successfulRequests","playerData","playerSummaries","playerId","NotificationManager","filterActorsForDeathSaves","actorsNeedingDeathSaves","actorsSkippingDeathSaves","hp","deathSaves","successes","failures","categorizeActorsByOwnership","pcActors","npcActors","ensureCombatForInitiative","filterActorsForInitiative","actorIds","game","actorsWithInitiative","actorIdsWithInitiative","combatant","filteredIds","_instance","_RollRequestsMenu","menu","actorData","currentActors","selectAllOn","requestTypes","option","system","stats","spellDC","optionsToggle","optionsElement","controlled","html","tab","selectBtn","requestTypesContainer","listItem","customEvent","rollTypesContainer","enabled","SidebarUtil","skip","selectAll","lockIcon","controlledTokens","isPC","selectAllCheckbox","checkboxes","checkedCount","cb","requestItem","requestType","rollOption","selectedActorIds","isNPC","rollMethodName","offlinePlayerActors","offlineConfig","npcConfig","validActorIds","filteredActorIds","suppressNotification","hdData","hitDieResult","rollTypeKey","normalizedRollTypeKey","normalizedType","actualRollKey","denominations","denom","__privateGet","__privateSet","__privateAdd","RollRequestsMenu","chatControls","rollRequestIcon","firstChatControlIcon","icon","HooksUtil","chatMessage","requestedBy","requestedText","currentFlavor","situationalInputs","hasTriggered","input","messageOptions","secondRoll","initiativeConfig","stored","abilitySelect","selectedAbility","configAbility","changeEvent","availableDice","cls","classHD","usedHD","availableHD","existing","d","formulaSection","currentDenom","selectorHtml","firstFormGroup","selector","newDenom","conMod","newFormula","RollRequestUtil","handlerRequestData","Main"],"mappings":"ufAAO,MAAMA,EAAgB,CAE3B,SAAU,UACZ,EACaC,EAAgB,CAC3B,OAAQ,SACR,MAAO,OACT,EAMaC,EAAc,KAClB,CACL,UAAW,CACT,IAAK,aACL,MAAO,KAAK,KAAK,SAAS,uCAAuC,EACjE,KAAM,KAAK,KAAK,SAAS,sCAAsC,EAC/D,SAAU,QACV,UAAWF,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,OACrB,OAAQ,EACT,EACD,oBAAqB,CACnB,IAAK,wBACL,MAAO,KAAK,KAAK,SAAS,iDAAiD,EAC3E,KAAM,KAAK,KAAK,SAAS,gDAAgD,EACzE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,YAAa,CACX,IAAK,eACL,MAAO,KAAK,KAAK,SAAS,yCAAyC,EACnE,KAAM,KAAK,KAAK,SAAS,wCAAwC,EACjE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,kBAAmB,CACjB,IAAK,uBACL,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,KAAM,KAAK,KAAK,SAAS,8CAA8C,EACvE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,wBAAyB,CACvB,IAAK,4BACL,MAAO,KAAK,KAAK,SAAS,qDAAqD,EAC/E,KAAM,KAAK,KAAK,SAAS,oDAAoD,EAC7E,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,yBAA0B,CACxB,IAAK,6BACL,MAAO,KAAK,KAAK,SAAS,sDAAsD,EAChF,KAAM,KAAK,KAAK,SAAS,qDAAqD,EAC9E,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACd,CAEG,GCvEUE,EAAY,uBAOZC,GAAY,CACvB,mBACA,8CACA,GACF,EAEaC,GAAe,CAC1B,kBAAmB,oBACnB,cAAe,gBACf,kBAAmB,mBACrB,EAsDaC,EAAa,CACxB,QAAS,UACT,cAAe,eACf,OAAQ,SACR,cAAe,gBACf,OAAQ,SACR,WAAY,YACZ,QAAS,UACT,OAAQ,SACR,QAAS,UACT,QAAS,SACT,WAAY,aACZ,kBAAmB,mBACnB,UAAW,WACX,KAAM,OACN,aAAc,cACd,MAAO,QACP,KAAM,MACR,EAEaC,GAAuB,CAClC,cAAe,CAAE,KAAMD,EAAW,cAAe,MAAO,gBAAiB,QAAS,YAAa,UAAW,kBAAoB,EAC9H,aAAc,CAAE,KAAMA,EAAW,aAAc,MAAO,eAAgB,QAAS,YAAa,UAAW,kBAAoB,EAC3H,MAAO,CAAE,KAAMA,EAAW,MAAO,MAAO,cAAe,QAAS,SAAU,UAAW,eAAiB,EACtG,KAAM,CAAE,KAAMA,EAAW,KAAM,MAAO,aAAc,QAAS,QAAS,UAAW,cAAgB,EACjG,cAAe,CAAE,KAAMA,EAAW,cAAe,MAAO,sBAAuB,QAAS,KAAM,UAAW,EAAI,EAC7G,WAAY,CAAE,KAAMA,EAAW,kBAAmB,MAAO,kBAAmB,QAAS,KAAM,UAAW,EAAI,EAC1G,WAAY,CAAE,KAAMA,EAAW,WAAY,MAAO,aAAc,QAAS,KAAM,UAAW,EAAI,EAE9F,QAAS,CAAE,KAAMA,EAAW,QAAS,MAAO,UAAW,QAAS,KAAM,UAAW,EAAI,EACrF,OAAQ,CAAE,KAAMA,EAAW,OAAQ,MAAO,cAAe,QAAS,KAAM,UAAW,EAAI,CACzF,EAOaE,EAAS,CACpB,GAAIL,EACJ,qBAAsBI,EACxB,EChHaE,EAAa,CACxB,KAAM,OACN,MAAO,QAEP,mBAAoB,mBAIpB,eAAgB,gBAChB,wBAAyB,sBAI3B,EAKaC,GAAe,CAC1B,MAAO,iBACT,EAKaC,EAAc,CAKzB,iBAAkB,uBAIlB,uBAAwB,8BACxB,sBAAuB,6BAmBvB,uBAAwB,2BAKxB,kBAAmB,uBACnB,iBAAkB,sBAKlB,oBAAqB,wBAYrB,8BAA+B,kCAC/B,oBAAqB,0BAIrB,mBAAoB,wBAKpB,mBAAoB,wBAkBpB,iBAAkB,8BAClB,iCAAkC,gCAClC,8BAA+B,wCAEjC,EC5GaC,GAAN,MAAMA,EAAQ,CAUnB,OAAO,IAAIC,EAAI,GAAIC,EAAK,CAAE,EAAEC,EAAe,GAAO,CAChD,GAAI,CACF,MAAMC,EAAe,KAAK,SAAS,IAAIb,EAAW,YAAY,GAAKS,GAAQ,QAE3E,GAAG,EADmBG,GAAkBC,GACnB,OACrB,QAAQ,IAAI,GAAGZ,GAAWS,EAAK,GAAGC,CAAI,CACvC,MAAU,EAELC,GAAkBH,GAAQ,UAC5B,QAAQ,IAAI,GAAGR,GAAWS,EAAK,GAAGC,CAAI,CAE9C,CACA,CAOE,OAAO,KAAKD,EAAI,GAAIC,EAAK,CAAA,EAAI,CAC3B,QAAQ,KAAK,GAAGV,GAAWS,EAAK,GAAGC,CAAI,CAC3C,CAWE,OAAO,MAAMG,EAAQC,EAAU,CAAE,GAAI,GAAO,QAAS,GAAM,UAAW,IAAS,CHhD1E,IAAAC,EGiDAD,EAAQ,MACTC,EAAA,GAAG,gBAAH,MAAAA,EAAkB,MAAMF,EAAQ,CAAE,SAAU,GAAM,UAAWC,EAAQ,aAEpEA,EAAQ,SAAS,QAAQ,MAAM,GAAGd,GAAWa,CAAM,CAC1D,CACA,EA9CEG,EAFWR,GAEJ,UAAU,IAFZ,IAAMS,EAANT,GCCA,MAAMU,EAAN,MAAMA,CAAW,CAqItB,OAAO,sBAAsBR,EAAMS,EAAS,GAAO,CAGjD,OAFAF,EAAQ,IAAI,wBAAyB,CAACP,EAAMS,CAAQ,CAAC,EAEjDT,GAAQ,MAERS,GAAYT,EAAK,OAAS,MAAM,QAAQA,EAAK,KAAK,IAGpDA,EAAK,MAAQA,EAAK,MAAM,IAAIU,GACvBA,aAAa,KACGA,EAAE,OAAQ,EAGpBA,CAEV,GAGIV,CACX,CAOE,OAAO,yBAAyBA,EAAMS,EAAS,GAAO,CACpDF,EAAQ,IAAI,2BAA4B,CAACP,EAAMS,CAAQ,CAAC,EACxD,IAAIE,EAAS,CAAE,GAAGX,CAAM,EACxB,GAAI,CAACA,EAAM,OAAOW,EAElB,GAAGF,GAAYT,EAAK,OAASA,EAAK,MAAM,OAAS,EAAE,CACjD,MAAMY,EAAQD,EAAO,MAAM,IAAID,GAAK,CAClC,IAAIG,EAAOH,EACX,OAAG,OAAOA,GAAM,SACdG,EAAO,KAAK,SAASH,CAAC,EAEtBG,EAAO,KAAK,SAAS,KAAK,UAAUH,CAAC,CAAC,EAEjCG,CACR,CAAA,EACD,OAAAF,EAAO,MAAQ,CAAC,GAAGC,CAAK,EACjBD,CACb,CAEI,OAAOA,CACX,CAEA,EApLEL,EADWE,EACJ,UACPF,EAFWE,EAEJ,oBAAoB,IAAI,KAQ/BF,EAVWE,EAUJ,aAAcM,GAAiB,CACpCP,EAAQ,IAAI,aAAc,CAACO,CAAY,CAAC,EAExC,MAAM,KAAKlB,GAAa,MAAO,IAAM,CAEnC,GAAI,OAAO,UAAc,IAAa,CACpCW,EAAQ,MAAM,gFAAgF,EAC9F,GAAG,cAAc,MAAM,KAAK,KAAK,SAAS,6CAA6C,EAAG,CAAC,UAAW,EAAI,CAAC,EAC3G,MACR,CAEM,GAAI,CAEFC,EAAW,OAAS,UAAU,eAAenB,CAAS,EAGlDyB,GACFA,EAAc,CAGjB,MAAW,CAClB,CACA,CAAK,CACL,GAQER,EAzCWE,EAyCJ,eAAe,CAACO,EAAMC,IAAS,CACpCT,EAAQ,IAAI,eAAgB,CAACQ,CAAI,CAAC,EAC9BP,EAAW,QACbA,EAAW,OAAO,SAASO,EAAMC,CAAI,CAG3C,GAQEV,EAvDWE,EAuDJ,cAAc,CAACS,EAAOC,IAAa,CACxCX,EAAQ,IAAI,cAAe,CAACU,CAAK,CAAC,EAC9BC,GACAA,EAAU,CAElB,GASEZ,EArEWE,EAqEJ,aAAa,MAAOW,KAAYC,IAAe,CAEpD,GADAb,EAAQ,IAAI,aAAc,CAACY,EAAS,GAAGC,CAAU,CAAC,EAC9C,EAACZ,EAAW,OAGhB,OAAO,MAAMA,EAAW,OAAO,iBAAiBW,EAAS,GAAGC,CAAU,CAC1E,GASEd,EApFWE,EAoFJ,aAAa,MAAOW,KAAYC,IAAe,CACpD,GAAKZ,EAAW,OAGhB,OAAO,MAAMA,EAAW,OAAO,mBAAmBW,EAAS,GAAGC,CAAU,CAC5E,GAUEd,EAnGWE,EAmGJ,cAAc,MAAOW,EAASE,KAAWD,IAAe,CAE7D,GADAb,EAAQ,IAAI,cAAe,CAACY,EAASE,EAAQ,GAAGD,CAAU,CAAC,EACvD,CAACZ,EAAW,OACZ,OAGJ,GAAGa,IAAW,KAAK,KAAK,GACtB,OAAO,KAET,MAAMC,EAAe,GAAGH,CAAO,IAAIE,CAAM,GAGzC,GAAIb,EAAW,kBAAkB,IAAIc,CAAY,EAC7C,OAAO,KAGXd,EAAW,kBAAkB,IAAIc,EAAc,EAAI,EAEnD,GAAI,CAEA,OADa,MAAMd,EAAW,OAAO,cAAcW,EAASE,EAAQ,GAAGD,CAAU,CAEpF,MAAe,CACZ,OAAO,IACf,QAAc,CAENZ,EAAW,kBAAkB,OAAOc,CAAY,CACxD,CACA,GA9HO,IAAMC,EAANf,ECFA,MAAMgB,CAAe,CAc1B,OAAO,YAAa,CAClB,KAAK,cAAe,CACxB,CAME,OAAO,eAAgB,CACrB,GAAI,CAAC,KAAK,KAAM,MAAO,CAAE,EAEzB,MAAMC,EAAiB,KAAK,SAAS,QAAQ,IAAI,QAAQ,EACzD,YAAK,WAAaA,EAAe,wBAAwB,GAAK,GAEvD,KAAK,UAChB,CAME,OAAO,eAAgB,CACrB,OAAK,KAAK,MAGV,KAAK,cAAe,EAGhB,KAAK,KAAK,MACZ,KAAK,qBAAsB,EAGtB,KAAK,YAVW,CAAE,CAW7B,CAME,OAAO,sBAAuB,CAC5BF,EAAW,WAAW,oBAAqB,KAAK,KAAK,GAAI,KAAK,UAAU,CAC5E,CAOE,OAAO,kBAAkBF,EAAQK,EAAY,CLnExC,IAAArB,EAAAsB,IKoECtB,EAAA,KAAK,OAAL,MAAAA,EAAW,MAAQgB,MAAWM,EAAA,KAAK,OAAL,YAAAA,EAAW,OAC3C,KAAK,kBAAkBN,CAAM,EAAIK,EAAa,KAAK,MAAMA,CAAU,EAAI,CAAE,EAE/E,CAOE,OAAO,kBAAkBL,EAAQ,CL9E5B,IAAAhB,EK+EH,OAAIgB,MAAWhB,EAAA,KAAK,OAAL,YAAAA,EAAW,IACjB,KAAK,WAGP,KAAK,kBAAkBgB,CAAM,GAAK,CAAE,CAC/C,CAME,OAAO,0BAA0BA,EAAQ,CACvCE,EAAW,YAAY,gBAAiBF,CAAM,CAClD,CAKE,OAAO,iCAAkC,CLjGpC,IAAAhB,GKkGEA,EAAA,KAAK,OAAL,MAAAA,EAAW,MAEhB,KAAK,MAAM,QAAQuB,GAAQ,CACrBA,EAAK,QAAU,CAACA,EAAK,MAAQA,EAAK,KAAO,KAAK,KAAK,IACrD,KAAK,0BAA0BA,EAAK,EAAE,CAE9C,CAAK,CACL,CAKE,OAAO,oBAAqB,CAC1B,KAAK,kBAAoB,CAAE,CAC/B,CAOE,OAAO,cAAcP,EAAQ,CLvHxB,IAAAhB,EKwHH,OAAIgB,MAAWhB,EAAA,KAAK,OAAL,YAAAA,EAAW,IACjB,CAAC,CAAC,KAAK,WAGT,CAAC,CAAC,KAAK,kBAAkBgB,CAAM,CAC1C,CACA,CArHEf,EAJWkB,EAIJ,aAAa,CAAE,GAKtBlB,EATWkB,EASJ,oBAAoB,CAAE,GCPxB,MAAMK,CAAa,CAKxB,OAAO,kBAAmB,CACxB,MAAMC,EAAW1C,EAAa,EAGT,OAAO,QAAQ0C,CAAQ,EAC/B,QAAQ,MAAMC,GAAU,CACnC,MAAMC,EAAUD,EAAM,CAAC,EAEjBE,EAAa,CACjB,KAAMD,EAAQ,MACd,KAAMA,EAAQ,KACd,QAASA,EAAQ,QACjB,KAAMA,EAAQ,SACd,MAAOA,EAAQ,MACf,OAAQA,EAAQ,OAChB,eAAgBA,EAAQ,gBAAkB,GAC1C,SAAUf,GAASY,EAAa,MAAMG,EAAQ,IAAKf,CAAK,CAChE,EACSe,EAAQ,UACTC,EAAW,QAAUD,EAAQ,SAG/B,MAAM,KAAK,SAAS,SAAS3C,EAAW2C,EAAQ,IAAKC,CAAU,GAG5DJ,EAAa,IAAIG,EAAQ,GAAG,IAAI,QAAaH,EAAa,IAAIG,EAAQ,GAAG,IAAI,OAC9EH,EAAa,IAAIG,EAAQ,IAAKA,EAAQ,OAAO,CAErD,CAAK,CACL,CAQE,OAAO,IAAIE,EAAaC,EAAW9C,EAAU,CAC3C,GAAG,CAAC6C,EAAc,OAAO,KAEzB,IAAIF,EAAU,GAEd,GAAGG,IAAa9C,EACd2C,EAAU,KAAK,SAAS,IAAIG,EAAYD,CAAW,MAChD,CAEH,IAAIE,EADW,KAAK,SAAS,QAAQ,IAAI,QAAQ,EACpB,GAAGD,CAAU,IAAID,CAAW,EAAE,EAExDE,IAAkB,SAEnBA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGD,CAAU,IAAID,CAAW,EAAE,EACjEF,EAAUI,GAAA,YAAAA,EAAiB,MAEnC,CAEI,OAAOJ,CACX,CASE,OAAO,IAAIE,EAAaG,EAAUF,EAAW9C,EAAU,CACrD,GAAG,CAAC6C,EAAc,MAAO,GAEzB,IAAIE,EAAkB,KAAK,SAAS,QAAQ,IAAI,QAAQ,EAAE,GAAGD,CAAU,IAAID,CAAW,EAAE,EAEpFE,IAEFA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGD,CAAU,IAAID,CAAW,EAAE,GAGnE,GAAG,CACD,KAAK,SAAS,IAAIC,EAAYD,EAAaG,CAAQ,CACpD,MAAQ,CACb,CAEI,MAAO,EACX,CAEE,OAAO,MAAMH,EAAaG,EAAS,CACjC,MAAMP,EAAW1C,EAAa,EAC9B,OAAO8C,EAAW,CAChB,KAAKJ,EAAS,oBAAoB,IAChCD,EAAa,yBAAyBQ,CAAQ,EAC9C,KAGR,CACA,CAEE,OAAO,yBAAyBA,EAAS,CACvC,MAAMC,EAAe,SAAS,cAAc,sDAAsD,EAC9FA,IAEDD,EACDC,EAAa,UAAU,IAAI,QAAQ,EAEnCA,EAAa,UAAU,OAAO,QAAQ,EAE5C,CACA,CCjHO,MAAMC,EAAc,CAMzB,OAAO,eAAeC,EAAU,CAC9B,MAAMC,EAAS,KAAK,QAAQ,IAAID,CAAQ,EACxC,OAAOC,GAAUA,EAAO,MAC5B,CAME,OAAO,YAAa,CAClB,OAAI,KAAK,gBAAe,GAAM,OAAO,QAAY,IACxC,QAEF,IACX,CACA,CCSO,MAAMC,EAAa,CAQxB,OAAO,oBAAoBC,EAAMC,EAAU,CRzCtC,IAAAvC,EQ0CH,GAAI,GAACA,EAAAsC,GAAA,YAAAA,EAAM,SAAN,MAAAtC,EAAc,YAAY,OAAO,KAEtC,MAAMwC,EAAaF,EAAK,OAAO,WAG/B,OAF2BC,GAAA,YAAAA,EAAU,cAEX,CACxB,KAAKpD,EAAW,OACd,MAAMsD,EAAmBD,EAAW,UAAU,QAAQ,EACtD,OAAOC,GAAA,YAAAA,EAAmB,KAAM,KAElC,KAAKtD,EAAW,OACd,MAAMuD,EAAyBF,EAAW,UAAU,QAAQ,EAC5D,IAAIE,GAAA,YAAAA,EAAwB,QAAS,EAAG,OAAOA,EAAuB,CAAC,EAEvE,MAAMC,EAAmBH,EAAW,UAAU,QAAQ,EACtD,IAAIG,GAAA,YAAAA,EAAkB,QAAS,EAAG,OAAOA,EAAiB,CAAC,EAE3D,MAAMC,EAAiBJ,EAAW,UAAU,MAAM,EAClD,OAAII,GAAA,YAAAA,EAAgB,QAAS,EAAUA,EAAe,CAAC,EAEhD,KAET,KAAKzD,EAAW,UACd,MAAM0D,EAAqBL,EAAW,UAAU,MAAM,EACtD,OAAOK,GAAA,YAAAA,EAAqB,KAAM,KAEpC,QACE,OAAO,IACf,CACA,CAQE,OAAO,oBAAoBP,EAAMQ,EAAc,CR/E1C,IAAA9C,EQgFH,OAAKA,EAAAsC,GAAA,YAAAA,EAAM,SAAN,MAAAtC,EAAc,WACZsC,EAAK,OAAO,WAAW,UAAUQ,CAAY,EADd,CAAE,CAE5C,CAQE,OAAO,mBAAmBR,EAAMC,EAAU,CACxC,OAAArC,EAAQ,IAAI,qBAAsB,CAACoC,EAAMC,CAAQ,CAAC,EAC3C,CAAC,CAAC,KAAK,oBAAoBD,EAAMC,CAAQ,CACpD,CAaE,aAAa,oBAAoBQ,EAAOR,EAAUS,EAAQC,EAAYC,EAAQ,CR1GzE,IAAAlD,EAAAsB,EAAA6B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EQ2GHxD,EAAQ,IAAI,sBAAuB,CAAC6C,EAAOR,EAAUS,EAAQC,EAAYC,CAAM,CAAC,EAChF,MAAMZ,EAAOS,EAAM,MAAM,IAAIC,CAAM,EACnC,GAAI,CAACV,EACH,MAAM,IAAI,MAAM,QAAQU,CAAM,uBAAuBD,EAAM,IAAI,EAAE,EAGnE,IAAIY,EAAW,KAQf,GALIV,IACFU,GAAW3D,EAAAsC,EAAK,OAAO,aAAZ,YAAAtC,EAAwB,IAAIiD,IAEzCU,EAAWA,GAAY,KAAK,oBAAoBrB,EAAMC,CAAQ,EAE1D,CAACoB,EACH,MAAM,IAAI,MAAM,8BAA8BrB,EAAK,IAAI,EAAE,EAE3DpC,EAAQ,IAAI,iCAAkC,CAACyD,EAAUpB,CAAQ,CAAC,EAGlE,MAAMqB,EAAqBrB,GAAA,YAAAA,EAAU,cAGrC,GAAIoB,EACF,OAAQC,EAAkB,CACxB,KAAKzE,EAAW,OACde,EAAQ,IAAI,2CAA4C,CAACgD,CAAM,CAAC,EAIhE,MAAMW,EAAoB,CACxB,WAAYX,EAAO,MAAM,WACzB,WAAYA,EAAO,MAAM,WACzB,QAASA,EAAO,MAAM,QACtB,aAAaE,GAAAD,GAAA7B,EAAA4B,EAAO,MAAM,QAAb,YAAA5B,EAAqB,KAArB,YAAA6B,EAAyB,OAAzB,YAAAC,EAA+B,YAC5C,UAAWF,EAAO,MAAM,UACxB,aAAcA,EAAO,MAAM,YAE5B,EACD,MAAMS,EAAS,KAAK,QAAQ3E,EAAW,mBAAoB6E,CAAiB,EAE5E3D,EAAQ,IAAI,mDAAoD,CAAC2D,CAAiB,CAAC,EAEnF,GAAI,CACF,GAAG3B,GAAc,eAAe,UAAU,GACxBA,GAAc,WAAY,EAC7B,CACX,MAAM4B,EAAW,MAAMzB,GAAa,kBAAkBC,EAAM,CAC1D,GAAGY,CACrB,CAAiB,EACD,MAChB,CAEY,MAAMS,EAAS,IAAIT,EAAO,MAAOA,EAAO,OAAQA,EAAO,OAAO,CAC1E,QAAoB,CAER,MAAMS,EAAS,KAAK,UAAU3E,EAAW,kBAAkB,CACvE,CACU,OACF,KAAKG,EAAW,OACd,GAAG+C,GAAc,eAAe,UAAU,EAAG,CAC3C,MAAM6B,EAAU7B,GAAc,WAAY,EAC1C,GAAI6B,EAAS,CACX,MAAMD,GAAWT,EAAAU,EAAQ,WAAR,YAAAV,EAAkB,YAAYM,EAAS,MACrC,MAAMG,EAAS,SAAS,WAAW,CACpD,GAAGZ,EACH,SAAUY,CACX,CAAA,EACD,MACd,CACA,CAGU5D,EAAQ,IAAI,oCAAqC,CAACyD,EAAUT,CAAM,CAAC,EAGnE,MAAMc,EAAe,CACnB,SAAUd,EAAO,MAAM,UAAY,GACnC,MAAOA,EAAO,MAAM,MACpB,UAAUI,EAAAJ,EAAO,UAAP,YAAAI,EAAgB,SAC1B,SAAQC,EAAAL,EAAO,UAAP,YAAAK,EAAgB,UAAW,EACpC,EAUD,OAPIG,GAAAD,GAAAD,EAAAN,EAAO,MAAM,QAAb,YAAAM,EAAqB,KAArB,YAAAC,EAAyB,OAAzB,MAAAC,EAA+B,cAC5BM,EAAa,OAAMA,EAAa,KAAO,CAAE,GAC9CA,EAAa,KAAK,YAAcd,EAAO,MAAM,MAAM,CAAC,EAAE,KAAK,aAG7DhD,EAAQ,IAAI,uDAAwD,CAAC8D,CAAY,CAAC,EAE/EL,GAAA,MAAAA,EAAU,gBAAkBA,GAAA,MAAAA,EAAU,WAChC,MAAMA,EAAS,WAAWK,EAAcd,EAAO,OAAQA,EAAO,OAAO,EAEvE,MAAMS,EAAS,WAAWK,EAAcd,EAAO,OAAQA,EAAO,OAAO,EAC9E,KAAK/D,EAAW,UAEd,OAAO,MAAMmD,EAAK,IAAI,CAAE,SAAUqB,EAAS,EAAE,EAAI,CAAE,WAAYT,EAAO,WAAW,CAAE,EACrF,QACEhD,EAAQ,IAAI,0CAA2C,CAAC0D,CAAkB,CAAC,EAC3E,MACV,CAGI,MAAM,IAAI,MAAM,gCAAgCA,CAAkB,YAAYtB,EAAK,IAAI,EAAE,CAC7F,CAOE,OAAO,uBAAuBqB,EAAU,CAEtC,OADAzD,EAAQ,IAAI,yBAA0B,CAACyD,CAAQ,CAAC,EAC3CA,EAEE,CACL,KAAMA,EAAS,MAAQA,EAAS,YAAY,SAAS,MACrD,KAAMA,EAAS,KACf,KAAMA,EAAS,YAAY,SAAS,KACpC,UAAWA,EAAS,OAAS,SAC7B,UAAW,CAAC,SAAU,SAAU,MAAM,EAAE,SAASA,EAAS,IAAI,EAC9D,QAASA,EAAS,OAAS,MAC5B,EATqB,IAU1B,CAOE,OAAO,iBAAiBA,EAAU,CR9O7B,IAAA3D,EAAAsB,EQgPH,GADApB,EAAQ,IAAI,mBAAoB,CAACyD,CAAQ,CAAC,EACtC,GAACrC,GAAAtB,EAAA2D,GAAA,YAAAA,EAAU,SAAV,YAAA3D,EAAkB,QAAlB,MAAAsB,EAAyB,QAAQ,OAAO,KAG7C,MAAM2C,EAAWN,EAAS,OAAO,MAAM,IAAIO,GAAQA,EAAK,OAAO,EAAE,OAAOC,GAAKA,CAAC,EAC9E,OAAOF,EAAS,OAAS,EAAIA,EAAS,KAAK,KAAK,EAAI,IACxD,CAEE,aAAa,kBAAkB3B,EAAMY,EAAS,GAAI,CAChDhD,EAAQ,IAAI,oBAAqB,CAACoC,EAAMY,CAAM,CAAC,EAC/C,MAAMa,EAAU7B,GAAc,WAAY,EAC1C,GAAI,CAAC6B,EAAS,CACZ7D,EAAQ,KAAK,uBAAuB,EACpC,MACN,CAEI,IAAIkE,EAAgB,CAChB,aAAc,GACd,iBAAkB,EACrB,EACGC,EAAiB,CAEnB,gBAAiB,GAEjB,gBAAiB,CACf,eAAgB,GAChB,eAAgB,GAChB,eAAgB,OAChB,eAAgB,EACxB,CACK,EAGD,OAAAnB,EAAS,CAAC,GAAGkB,EAAe,GAAGlB,CAAM,EAC9B,MAAMa,EAAQ,gBAAgBzB,EAAMY,EAAQmB,CAAc,CACrE,CAEE,aAAa,cAAcP,EAAUQ,EAAS,CAAC,WAAAC,EAAa,GAAO,WAAAC,CAAU,EAAI,GAAI,CACnFF,EAAU,OAAOA,CAAO,EACpBR,EAAS,YAAc,CAACS,IAAYD,EAAU,MAAM,UAAU,mBAAmBA,EAASR,EAAS,KAAK,YAAW,CAAE,GACzH,IAAItD,EAAO,MAAM,IAAI,OAAO,KAAK,WAAW8D,CAAO,EAAE,SAAU,EAE/D,aAAMR,EAAS,eAAe,CAACtD,CAAI,CAAC,EAE7BA,CACX,CACA,CCzRA,MAAM,KAAK,QAAS,IAAM,CACnB,MAAM,aAAa,KAAK,+BAC3BN,EAAQ,KAAK,oEAAoE,CAErF,CAAC,EAOM,SAASuE,GAAkBC,EAAM,CACtC,OAAO,cAAcA,CAAK,CACxB,YAAYxB,EAAS,CAAE,EAAEyB,EAAU,CAAE,EAAE5E,EAAU,GAAI,CTjBlD,IAAAC,EAAAsB,ESkBD,MAAM4B,EAAQyB,EAAS5E,CAAO,EAG9B,KAAK,OAASA,EAAQ,QAAU,CAAE,EAClC,KAAK,YAAcA,EAAQ,oBAAsBA,EAAQ,aAAe,GACxE,KAAK,OAASA,EAAQ,QAAU,GAChC,KAAK,QAAUA,EAAQ,SAAW,KAGlC,KAAK,QAAUA,EAAQ,SAAWmD,EAAO,OAASA,EAAO,SAAW,KACpE,KAAK,eAAiBnD,EAAQ,gBAAkB,KAGhD,KAAK,cAAcC,EAAAD,EAAQ,SAAR,YAAAC,EAAgB,QAAS,GAC5C,KAAK,iBAAiBsB,EAAAvB,EAAQ,SAAR,YAAAuB,EAAgB,WAAY,EACxD,CAYI,aAAa4B,EAAQ0B,EAAUC,EAAO,CAEpC,MAAMC,EAAkBF,GAAA,YAAAA,EAAU,IAAI,WAChCG,EAAaH,GAAA,YAAAA,EAAU,IAAI,MAG3BI,EAAcJ,GAAA,YAAAA,EAAU,IAAI,SAASC,CAAK,gBAEhD,GADA3E,EAAQ,IAAI,eAAgB,CAAC8E,EAAaJ,EAAU1B,CAAM,CAAC,EACvD8B,GAAgB9B,EAAO,cAAgB,GACpCA,EAAO,QAAOA,EAAO,MAAQ,CAAE,GACpCA,EAAO,MAAM,KAAK,cAAc,EAC3BA,EAAO,OAAMA,EAAO,KAAO,CAAE,GAClCA,EAAO,KAAK,YAAc8B,UAClB9B,EAAO,MAAO,CAEtB,MAAM+B,EAAM/B,EAAO,MAAM,QAAQ,cAAc,EAC3C+B,IAAQ,IAAI/B,EAAO,MAAM,OAAO+B,EAAK,CAAC,CAClD,CAGUH,IACF5B,EAAO,QAAU4B,EAEjB,KAAK,OAAO,QAAUA,GAGxB,MAAMxE,EAAS,MAAM,aAAa4C,EAAQ0B,EAAUC,CAAK,EAGzD,GAAIE,EAAY,CACd,MAAMG,EAAU,SAASH,CAAU,EAC9B,MAAMG,CAAO,IAChB5E,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAAS4E,EAElC,MAAiB,KAAK,UAAY,QAAa,KAAK,UAAY,OACxD5E,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAAS,KAAK,SAG/B,OAAAJ,EAAQ,IAAI,GAAG,KAAK,YAAY,IAAI,gBAAiB,CAAC,KAAK,OAAQ0E,EAAUtE,CAAM,CAAC,EAC7EA,CACb,CASI,cAAc6E,EAAYC,EAAO,CAC/B,MAAM,cAAcD,EAAYC,CAAK,EAGrC,MAAMC,EAAsB,KAAK,QAAQ,cAAc,mCAAmC,EACtFA,IACF,KAAK,YAAcA,EAAoB,SAGzC,MAAMC,EAAU,KAAK,QAAQ,cAAc,kBAAkB,EACzDA,GAAWA,EAAQ,QACrB,KAAK,QAAU,SAASA,EAAQ,KAAK,GAAK,KAElD,CASI,eAAeC,EAAQ,CACrB,MAAMC,EAAiB,MAAM,eAAeD,CAAM,EAIlD,GAHArF,EAAQ,IAAI,iBAAkB,CAACsF,CAAc,CAAC,EAG1C,KAAK,UAAY,QAAa,KAAK,UAAY,KACjD,UAAWhF,KAAQgF,EACjBhF,EAAK,QAAQ,OAAS,KAAK,QAK/B,YAAK,OAAO,YAAc,KAAK,YAExBgF,CACb,CAWI,MAAM,UAAUC,EAAS1F,EAAS,CThJ/B,IAAAC,EAAAsB,EAAA6B,ESiJD,MAAM,MAAM,UAAUsC,EAAS1F,CAAO,IAGlCoD,GAAA7B,GAAAtB,EAAA,KAAK,OAAO,QAAZ,YAAAA,EAAoB,KAApB,YAAAsB,EAAwB,OAAxB,MAAA6B,EAA8B,aAAe,KAAK,OAAO,eAC3DjD,EAAQ,IAAI,GAAG,KAAK,YAAY,IAAI,aAAc,CAAC,kDAAkD,CAAC,EAEtG,WAAW,IAAM,CACf,KAAK,QAAS,CACf,EAAE,GAAG,EAEd,CACG,CACH,CAMO,MAAMwF,UAA2BjB,GAAkB,MAAM,aAAa,KAAK,0BAA0B,CAAE,CAgB5G,YAAYvB,EAAS,CAAE,EAAEyB,EAAU,CAAE,EAAE5E,EAAU,GAAI,CACnDA,EAAQ,SAAWA,EAAQ,UAAY,OAAO,KAAK,QACnD,MAAMmD,EAAQyB,EAAS5E,CAAO,EAE9BG,EAAQ,IAAI,uCAAwC,CAACgD,EAAQyB,EAAS5E,CAAO,CAAC,CAClF,CAQE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,gBAAgB,CAChE,CAAK,CACL,CASE,IAAI,OAAQ,CACV,OAAO,KAAK,aAAe,MAAM,KACrC,CAmBE,0BAA0BS,EAAM0C,EAAQyC,EAAQhB,EAAS,CACvDzE,EAAQ,IAAI,4BAA6B,CAACM,EAAM0C,EAAQyC,EAAQhB,CAAO,CAAC,EACxE,MAAMhF,EAAO,MAAM,0BAA0Ba,EAAM0C,EAAQyC,EAAQhB,CAAO,EAG1E,OAAAhF,EAAK,OAAS,KAAK,OACnBA,EAAK,QAAU,KAAK,QACpBA,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAiBE,MAAM,oBAAoBiG,EAAQH,EAAS1F,EAAS,CAClD,OAAAG,EAAQ,IAAI,sBAAuB,CAAC0F,EAAQH,EAAS1F,CAAO,CAAC,EAC7D0F,EAAU,MAAM,MAAM,oBAAoBG,EAAQH,EAAS1F,CAAO,EAE9D6F,IAAW,kBAEbH,EAAQ,OAAS,KAAK,OACtBA,EAAQ,QAAU,KAAK,QACvBA,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,QAG5BA,CACX,CAYE,MAAM,UAAUA,EAAS1F,EAAS,CAMhC,GALAG,EAAQ,IAAI,YAAa,CAACuF,EAAS1F,CAAO,CAAC,EAC3C,MAAM,UAAU0F,EAAS1F,CAAO,EAI5B,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAIF,IAAI8F,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EAKjE,GAAIA,IAAkB,KAAK,QAAU,KAAK,OAAO,OAAS,GAAI,CAE5D,MAAMC,EAAe,CACnB,OAAQ,KAAK,OACb,QAAS,KAAK,QACd,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM,eAAe,WAAW/G,CAAS,uCAAwC8G,CAAY,EAGxGE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAGpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CAGI,KAAK,uBAAwB,CACjC,CAQE,wBAAyB,CACvB3F,EAAQ,IAAI,yBAA0B,CAAC,KAAK,OAAO,CAAC,EACpC,KAAK,QAAQ,iBAAiB,iFAAiF,EACvH,QAAQ+F,GAAU,CACxBA,EAAO,iBAAiB,QAAUb,GAAU,CAC3BA,EAAM,cAAc,QAAQ,MACnD,CAAO,CACP,CAAK,CACL,CAoBE,aAAa,iBAAiBc,EAAQ3D,EAAU4D,EAASpG,EAAU,CAAA,EAAI,CTjWlE,IAAAC,EAAAsB,EAAA6B,EAAAC,EAAAC,EAAAC,EAAAC,ESmWC2C,EAAO,OAAS,GAAK,OAAOA,EAAO,CAAC,GAAM,WAC5CA,EAASA,EAAO,IAAIE,GAAW,KAAK,OAAO,IAAIA,CAAO,CAAC,EAAE,OAAOC,GAAKA,CAAC,GAExEnG,EAAQ,IAAI,sCAAuC,CACjDgG,EACAA,EAAO,IAAIG,GAAKA,EAAE,IAAI,EACtB9D,EACA4D,EACApG,CACN,CAAK,EAGD,MAAM6D,EAAqBrB,GAAA,YAAAA,EAAU,cAG/B+D,EAAS,CACbnH,EAAW,KACXA,EAAW,aACXA,EAAW,QACXA,EAAW,cACXA,EAAW,aACjB,EAAM,SAASyE,CAAkB,EAGvBb,EAAQmD,EAAO,CAAC,EACtB,GAAI,CAACnD,EAAO,OAAO,KAGnB,IAAIwD,EAAY,OAAO,KAAK,QACxB,CAACpH,EAAW,OAAQA,EAAW,OAAO,EAAE,SAASyE,CAAkB,EACrE2C,EAAY,OAAO,KAAK,YAAc,OAAO,KAAK,UACzC,CAACpH,EAAW,QAASA,EAAW,OAAQA,EAAW,OAAO,EAAE,SAASyE,CAAkB,IAChG2C,EAAY,OAAO,KAAK,WAI1B,MAAMC,EAAa,CACjB,KAAMzD,EAAM,YAAa,EACzB,QAASA,EACT,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMA,EAAM,YAAa,EACzB,QAAS,CAAA,CACV,CAAA,CACF,EAGD,OAAQa,EAAkB,CACxB,KAAKzE,EAAW,MACdqH,EAAW,MAAQL,EACnB,MACF,KAAKhH,EAAW,KAChB,KAAKA,EAAW,aACdqH,EAAW,QAAUL,EACrB,MACF,KAAKhH,EAAW,QAChB,KAAKA,EAAW,cACdqH,EAAW,QAAUL,EACrB,MACF,KAAKhH,EAAW,QAEdqH,EAAW,MAAM,CAAC,EAAE,MAAQ,CAAE,EAC9BA,EAAW,MAAM,CAAC,EAAE,QAAQ,OAAS,UACrC,KACR,CAGI,MAAMC,EAAgB,CACpB,OAAQ,GACR,KAAM,CACJ,QAAS,YAAY,WAAW,CAAE,MAAA1D,CAAO,CAAA,CACjD,CACK,EAGK2D,EAAe,CACnB,QAAS,CACP,OAAAR,EACA,YAAaA,EAAO,KAAKG,GAAK,KAAK,eAAeA,CAAC,CAAC,EACpD,OAAAC,EACA,QAAAH,EACA,SAAUI,EACV,eAAgB3C,EAChB,OAAQ,CACN,MAAO8B,EAAmB,cAAc9B,EAAoBuC,EAASpD,CAAK,EAC1E,SAAU2C,EAAmB,aAAaQ,CAAM,CACjD,EACD,GAAGnG,CACX,CACK,EAKK4G,EAAM,IAAI,KAAKH,EAAYC,EAAeC,EAAa,OAAO,EAG9DpG,EAAS,MAAM,IAAI,QAAQsG,GAAW,CAC1CD,EAAI,iBAAiB,QAAS,IAAM,CAElCC,EAAQ,CACN,MAAOD,EAAI,MACX,OAAQA,EAAI,OACZ,QAASA,EAAI,QACb,YAAaA,EAAI,WAC3B,CAAS,CACT,EAAS,CAAE,KAAM,GAAM,EACjBA,EAAI,OAAO,CAAE,MAAO,EAAI,CAAE,CAChC,CAAK,EAID,GAAI,CAACrG,EAAO,OAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAGvD,MAAMuG,EAAYvG,EAAO,MAAM,CAAC,EAChC,IAAIwG,EAAY,GACZC,EAAe,KAEf/G,EAAA6G,GAAA,YAAAA,EAAW,UAAX,YAAA7G,EAAoB,iBAAkB,SACxC8G,EAAYD,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,UAC7EE,EAAeF,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,cAIlF,IAAI7B,IAAc1D,EAAAuF,GAAA,YAAAA,EAAW,OAAX,YAAAvF,EAAiB,cAAe,GACtCuF,GAAA,MAAAA,EAAW,MACvB,IAAIG,GAAS7D,EAAA0D,GAAA,YAAAA,EAAW,UAAX,YAAA1D,EAAoB,OAGjC,MAAM8D,EAAoB,CACxB,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMjC,EAAc,CAAE,YAAAA,CAAW,EAAK,CAAE,EACxC,QAASgC,EAAS,CAAE,OAAAA,GAAW,CAAA,CACvC,CAAO,EACD,QAASjE,EACT,UAAA+D,EACA,aAAAC,EACA,OAAAC,EAEA,YAAa1G,EAAO,YACpB,cAAeA,EAAO,YACtB,WAAYP,EAAQ,aAAe,GACnC,YAAa,EACd,EAGKmH,EAAkB,KAAK,SAAS,IAAI,OAAQ,UAAU,EAM5D,GALI5G,EAAO,QAAQ,UAAYA,EAAO,QAAQ,WAAa4G,IACzDD,EAAkB,SAAW3G,EAAO,QAAQ,UAI1CA,EAAO,OAAO,SAAW,CAACnB,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASyE,CAAkB,EAAG,CAE7F,MAAMuD,IAAiB9D,GAAAD,EAAAL,EAAM,OAAO,SAAb,YAAAK,EAAsB+C,KAAtB,YAAA9C,EAAgC,YAAWE,GAAAD,EAAA,OAAO,MAAM,SAAb,YAAAA,EAAsB6C,KAAtB,YAAA5C,EAAgC,SAC9FjD,EAAO,OAAO,UAAY6G,IAC5BF,EAAkB,QAAU3G,EAAO,OAAO,QAElD,CAGI,OAAA2G,EAAkB,UAAYP,EAAa,QAAQ,OAAO,MAC1DO,EAAkB,SAAWrD,EAC7BqD,EAAkB,QAAUd,EAErBc,CACX,CAME,OAAO,eAAelE,EAAO,CAC3B,OAAA7C,EAAQ,IAAI,oCAAqC,CAAC6C,CAAK,CAAC,EACjD,OAAO,QAAQA,EAAM,SAAS,EAClC,KAAK,CAAC,CAAC/B,EAAQoG,CAAK,IAAM,CACzB,MAAM7F,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,OAAOO,GAAQ,CAACA,EAAK,MAAQ6F,GAAS,MAAM,0BAA0B,KAC9E,CAAO,CACP,CAUE,OAAO,cAAc7E,EAAU4D,EAASpD,EAAO,CTliB1C,IAAA/C,EAAAsB,EAAA6B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA2D,EAAAC,EAAAC,ESmiBHrH,EAAQ,IAAI,mCAAoC,CAACqC,EAAU4D,EAASpD,CAAK,CAAC,EAG1E7C,EAAQ,IAAI,8CAA+C,CACzD,SAAAqC,EACA,QAAA4D,EACA,UAAWpD,GAAA,YAAAA,EAAO,KAClB,gBAAgB/C,EAAA+C,GAAA,YAAAA,EAAO,SAAP,MAAA/C,EAAe,UAAY,OAAO,KAAK+C,EAAM,OAAO,SAAS,EAAI,CAAE,EACnF,aAAazB,EAAAyB,GAAA,YAAAA,EAAO,SAAP,MAAAzB,EAAe,OAAS,OAAO,KAAKyB,EAAM,OAAO,MAAM,EAAI,CAAE,EAC1E,kBAAkBM,GAAAD,GAAAD,EAAAJ,GAAA,YAAAA,EAAO,SAAP,YAAAI,EAAe,aAAf,YAAAC,EAA2B,OAA3B,YAAAC,EAAiC,OACzD,CAAK,EAED,IAAImE,EAAQ,GAGZ,MAAM5D,EAAqBrB,GAAA,YAAAA,EAAU,cAOrC,OAJI,CAACpD,EAAW,KAAMA,EAAW,QAASA,EAAW,aAAa,EAAE,SAASyE,CAAkB,GAAK,CAACuC,GACnGjG,EAAQ,KAAK,gCAAiC,CAAC0D,EAAoBuC,CAAO,CAAC,EAGrEvC,EAAkB,CACxB,KAAKzE,EAAW,MACd,MAAMsI,IAAanE,EAAA,OAAO,MAAM,OAAO6C,CAAO,IAA3B,YAAA7C,EAA8B,QAAS6C,EAEpDuB,GAAQnE,EAAAR,GAAA,YAAAA,EAAO,OAAO,SAAd,YAAAQ,EAAuB4C,GAC/BgB,GAAiBO,GAAA,YAAAA,EAAO,YAAWlE,EAAA,OAAO,MAAM,OAAO2C,CAAO,IAA3B,YAAA3C,EAA8B,UAAW,MAC5EmE,IAAelE,EAAA,OAAO,MAAM,UAAU0D,CAAc,IAArC,YAAA1D,EAAwC,QAAS0D,EAEtEK,EAAQ,KAAK,KAAK,OAAO,yBAA0B,CACjD,MAAOC,EACP,QAASE,CACnB,CAAS,EACD,MACF,KAAKxI,EAAW,KAChB,KAAKA,EAAW,aACd,MAAMyI,IAAclE,EAAA,OAAO,MAAM,UAAUyC,CAAO,IAA9B,YAAAzC,EAAiC,QAASyC,EAC9DqB,EAAQ,KAAK,KAAK,OAAO,wBAAyB,CAAE,QAASI,EAAa,EAC1E,MACF,KAAKzI,EAAW,QAChB,KAAKA,EAAW,cACd,MAAM0I,IAAeR,EAAA,OAAO,MAAM,UAAUlB,CAAO,IAA9B,YAAAkB,EAAiC,QAASlB,EAC/DqB,EAAQ,KAAK,KAAK,OAAO,2BAA4B,CAAE,QAASK,EAAc,EAC9E,MACF,KAAK1I,EAAW,cACdqI,EAAQ,KAAK,KAAK,SAAS,qBAAqB,EAChD,MACF,KAAKrI,EAAW,KACd,MAAM2I,GAAWP,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuCpB,GACxD,IAAI4B,EAAY5B,EAChB,GAAI2B,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFC,GAAYC,GAAA,YAAAA,EAAU,OAAQ7B,CACxC,CACQqB,EAAQ,KAAK,KAAK,OAAO,wBAAyB,CAAE,KAAMO,EAAW,EACrE,MACF,KAAK5I,EAAW,WACdqI,EAAQ,KAAK,KAAK,SAAS,iBAAiB,EAC5C,MACF,KAAKrI,EAAW,WAChB,KAAKA,EAAW,kBACdqI,EAAQ,KAAK,KAAK,SAAS,kBAAkB,EAC7C,MACF,QACEA,EAAQ,KAAK,KAAK,SAAS,YAAY,CAC/C,CACI,OAAAtH,EAAQ,IAAI,gBAAiB,CAAC0D,EAAoB4D,CAAK,CAAC,EAEjDA,CACX,CAEE,OAAO,aAAatB,EAAS,GAAI,CAC/B,OAAIA,EAAO,SAAW,EACbA,EAAO,CAAC,EAAE,KACRA,EAAO,OAAS,EAClB,KAAK,KAAK,SAAS,wCAAwC,EAE3D,EAEb,CACA,CAOO,MAAM+B,WAA6BxD,GAAkB,MAAM,aAAa,KAAK,uBAAuB,CAAE,CAW3G,YAAYvB,EAAS,CAAE,EAAEyB,EAAU,CAAE,EAAE5E,EAAU,GAAI,CAEnDA,EAAQ,SAAW,OAAO,KAAK,WAAa,KAC5CA,EAAQ,OAAS,GAEjB,MAAMmD,EAAQyB,EAAS5E,CAAO,EAE9BG,EAAQ,IAAI,cAAe,CAACgD,EAAQyB,EAAS5E,CAAO,CAAC,CACzD,CASE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,iBAAkB,gBAAgB,CAClF,CAAK,CACL,CAcE,0BAA0BS,EAAM0C,EAAQyC,EAAQhB,EAAS,CACvDzE,EAAQ,IAAI,4BAA6B,CAACM,EAAM0C,EAAQyC,EAAQhB,CAAO,CAAC,EACxE,MAAMhF,EAAO,MAAM,0BAA0Ba,EAAM0C,EAAQyC,EAAQhB,CAAO,EAG1E,OAAAhF,EAAK,QAAU,4BACfA,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAYE,MAAM,oBAAoBiG,EAAQH,EAAS1F,EAAS,CAClD,OAAA0F,EAAU,MAAM,MAAM,oBAAoBG,EAAQH,EAAS1F,CAAO,EAE9D6F,IAAW,kBACbH,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,OAEjCA,EAAQ,QAAU,6BAGbA,CACX,CAWE,MAAM,UAAUA,EAAS1F,EAAS,CAIhC,GAHA,MAAM,UAAU0F,EAAS1F,CAAO,EAG5B,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAIF,IAAI8F,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EAEjE,GAAIA,GAAiB,KAAK,OAAO,OAAS,EAAG,CAC3C,MAAMC,EAAe,CACnB,OAAQ,GACR,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM,eAAe,WAAW/G,CAAS,uCAAwC8G,CAAY,EAExGE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAEpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CACA,CAYE,MAAM,mBAAmBT,EAAO8C,EAAMtD,EAAU,CAC9C,MAAM,MAAM,mBAAmBQ,EAAO8C,EAAMtD,CAAQ,EAEpD,KAAK,YAAcA,EAAS,IAAI,qBAAqB,IAAM,QAE3D1E,EAAQ,IAAI,qBAAsB,CAAC0E,EAAU,KAAK,MAAM,CAAC,CAC7D,CAUE,eAAeW,EAAQ,CACrB,MAAMC,EAAiB,MAAM,eAAeD,CAAM,EAGlD,YAAK,OAAO,YAAc,KAAK,YAExBC,CACX,CAaE,aAAa,iBAAiBU,EAAQ3D,EAAU4D,EAASpG,EAAU,CAAA,EAAI,CT/xBlE,IAAAC,EAAAsB,EAAA6B,ESgyBHjD,EAAQ,IAAI,sCAAuC,CAACgG,EAAQ3D,EAAU4D,EAASpG,CAAO,CAAC,EAEvF,MAAMgD,EAAQmD,EAAO,CAAC,EACtB,GAAI,CAACnD,EAAO,OAAO,KAGnB,MAAMyD,EAAa,CACjB,KAAMzD,EAAM,YAAa,EACzB,QAASA,EACT,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMA,EAAM,YAAa,EACzB,QAAS,CACP,OAAQ,cAClB,CACO,CAAA,CACF,EAEK0D,EAAgB,CACpB,OAAQ,GACR,KAAM,CACJ,QAAS,YAAY,WAAW,CAAE,MAAA1D,CAAO,CAAA,CACjD,CACK,EAEK2D,EAAe,CACnB,QAAS,CACP,OAAAR,EACA,YAAaA,EAAO,KAAKG,GAAKX,EAAmB,eAAeW,CAAC,CAAC,EAClE,QAAAF,EACA,SAAU,OAAO,KAAK,WAAa,KACnC,OAAQ,CACN,MAAO,KAAK,KAAK,SAAS,eAAe,EACzC,SAAUT,EAAmB,aAAaQ,CAAM,CACjD,EACD,GAAGnG,CACX,CACK,EAGK4G,EAAM,IAAI,KAAKH,EAAYC,EAAeC,EAAa,OAAO,EAE9DpG,EAAS,MAAM,IAAI,QAAQsG,GAAW,CAC1CD,EAAI,iBAAiB,QAAS,IAAM,CAClCC,EAAQ,CACN,MAAOD,EAAI,MACX,OAAQA,EAAI,OACZ,QAASA,EAAI,QACb,YAAaA,EAAI,WAC3B,CAAS,CACT,EAAS,CAAE,KAAM,GAAM,EACjBA,EAAI,OAAO,CAAE,MAAO,EAAI,CAAE,CAChC,CAAK,EAED,GAAI,CAACrG,EAAO,OAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAGvD,MAAMuG,EAAYvG,EAAO,MAAM,CAAC,EAChC,IAAIwG,EAAY,GACZC,EAAe,KAEf/G,EAAA6G,GAAA,YAAAA,EAAW,UAAX,YAAA7G,EAAoB,iBAAkB,SACxC8G,EAAYD,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,UAC7EE,EAAeF,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,cAIlF,MAAM7B,IAAc1D,EAAAuF,GAAA,YAAAA,EAAW,OAAX,YAAAvF,EAAiB,cAAe,GAC9C0F,GAAS7D,EAAA0D,GAAA,YAAAA,EAAW,UAAX,YAAA1D,EAAoB,OAG7B8D,EAAoB,CACxB,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMjC,EAAc,CAAE,YAAAA,CAAW,EAAK,CAAE,EACxC,QAASgC,EAAS,CAAE,OAAAA,GAAW,CAAA,CACvC,CAAO,EACD,QAASd,EAAO,CAAC,EACjB,UAAAY,EACA,aAAAC,EACA,OAAAC,EAEA,YAAa1G,EAAO,YACpB,cAAeA,EAAO,YACtB,WAAYP,EAAQ,aAAe,GACnC,YAAa,EACd,EAGKmH,EAAkB,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC5D,OAAI5G,EAAO,QAAQ,UAAYA,EAAO,QAAQ,WAAa4G,IACzDD,EAAkB,SAAW3G,EAAO,QAAQ,UAI1CA,EAAO,OAAO,UAChB2G,EAAkB,QAAU3G,EAAO,OAAO,SAGrC2G,CACX,CACA,CAOO,MAAMkB,WAAgC1D,GAAkB,MAAM,aAAa,KAAK,gCAAgC,CAAE,CAevH,YAAYvB,EAAS,CAAE,EAAEyB,EAAU,CAAE,EAAE5E,EAAU,GAAI,CAEnD,MAAMqI,EAAc,QAAQ,MAAM,YAAYlF,EAAQ,CACpD,cAAe,EACrB,CAAK,EAGDnD,EAAQ,SAAWA,EAAQ,UAAY,OAAO,KAAK,QAGnD,MAAMqI,EAAazD,EAAS5E,CAAO,EAEnCG,EAAQ,IAAI,cAAe,CAACgD,EAAQyB,EAAS5E,CAAO,CAAC,CACzD,CAKE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,gBAAgB,CAChE,CAAK,CACL,CAcE,0BAA0BS,EAAM0C,EAAQyC,EAAQhB,EAAS,CACvDzE,EAAQ,IAAI,4BAA6B,CAACM,EAAM0C,EAAQyC,EAAQhB,CAAO,CAAC,EACxE,MAAMhF,EAAO,MAAM,0BAA0Ba,EAAM0C,EAAQyC,EAAQhB,CAAO,EAG1E,OAAAhF,EAAK,OAAS,KAAK,OACnBA,EAAK,QAAU,KAAK,QACpBA,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAYE,MAAM,oBAAoBiG,EAAQH,EAAS1F,EAAS,CAClD,OAAAG,EAAQ,IAAI,sBAAuB,CAAC0F,EAAQH,EAAS1F,CAAO,CAAC,EAC7D0F,EAAU,MAAM,MAAM,oBAAoBG,EAAQH,EAAS1F,CAAO,EAE9D6F,IAAW,kBAEbH,EAAQ,OAAS,KAAK,OACtBA,EAAQ,QAAU,KAAK,QACvBA,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,QAG5BA,CACX,CAWE,MAAM,UAAUA,EAAS1F,EAAS,CAMhC,GALAG,EAAQ,IAAI,YAAa,CAACuF,EAAS1F,CAAO,CAAC,EAC3C,MAAM,UAAU0F,EAAS1F,CAAO,EAI5B,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAKF,IAAI8F,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EASjE,GAAIA,IAAkB,KAAK,QAAU,KAAK,OAAO,OAAS,GAAI,CAE5D,MAAMC,EAAe,CACnB,OAAQ,KAAK,OACb,QAAS,KAAK,QACd,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM,eAAe,WAAW/G,CAAS,uCAAwC8G,CAAY,EAGxGE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAGpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CAGI,KAAK,uBAAwB,CACjC,CAQE,wBAAyB,CACvB3F,EAAQ,IAAI,yBAA0B,EAAE,EAExB,KAAK,QAAQ,iBAAiB,iFAAiF,EACvH,QAAQ+F,GAAU,CACxBA,EAAO,iBAAiB,QAAUb,GAAU,CAC3BA,EAAM,cAAc,QAAQ,MACnD,CAAO,CACP,CAAK,CACL,CAiBE,aAAa,iBAAiBc,EAAQ3D,EAAU4D,EAASpG,EAAU,CAAA,EAAI,CT3jClE,IAAAC,EAAAsB,EAAA6B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,ES4jCHtD,EAAQ,IAAI,mBAAoB,CAACgG,EAAQ3D,EAAU4D,EAASpG,CAAO,CAAC,EAGpE,MAAM6D,EAAqBrB,GAAA,YAAAA,EAAU,cAG/B+D,EAAS,CAACnH,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASyE,CAAkB,EAGxEb,EAAQmD,EAAO,CAAC,EACtB,GAAI,CAACnD,EAAO,OAAO,KAGnB,MAAMwD,EAAY,OAAO,KAAK,QAG9B,IAAIY,EAAiB,KACrB,GAAIvD,IAAuBzE,EAAW,MAAO,CAC3C,MAAMuI,EAAQ3E,EAAM,OAAO,OAAOoD,CAAO,EACzCgB,GAAiBO,GAAA,YAAAA,EAAO,YAAW1H,EAAA,OAAO,MAAM,OAAOmG,CAAO,IAA3B,YAAAnG,EAA8B,UAAW,KAClF,SAAe4D,IAAuBzE,EAAW,KAAM,CAEjD,MAAMkJ,GAAO/G,EAAAyB,EAAM,OAAO,QAAb,YAAAzB,EAAqB6E,GAClCgB,GAAiBkB,GAAA,YAAAA,EAAM,YAAWhF,GAAAD,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuC+C,KAAvC,YAAA9C,EAAiD,UAAW,KACpG,CAGI,MAAMmD,EAAa,CACjB,KAAMzD,EAAM,YAAa,EACzB,QAASA,EACT,QAASoE,EACT,cAAe,GACf,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMpE,EAAM,YAAa,EACzB,QAAS,CAAA,CACV,CAAA,CACF,EAGGa,IAAuBzE,EAAW,MACpCqH,EAAW,MAAQL,EACVvC,IAAuBzE,EAAW,OAC3CqH,EAAW,KAAOL,GAIpB,MAAMM,EAAgB,CACpB,OAAQ,GACR,KAAM,CACJ,QAAS,YAAY,WAAW,CAAE,MAAA1D,CAAO,CAAA,CACjD,CACK,EAGK2D,EAAe,CACnB,QAAS,CACP,OAAAR,EACA,YAAaA,EAAO,KAAKG,GAAKX,EAAmB,eAAeW,CAAC,CAAC,EAClE,OAAAC,EACA,QAAAH,EACA,SAAUI,EACV,OAAQ,CACN,MAAOb,EAAmB,cAAc9B,EAAoBuC,EAASpD,CAAK,EAC1E,SAAU2C,EAAmB,aAAaQ,CAAM,CACjD,EACD,GAAGnG,CACX,CACK,EAGK4G,EAAM,IAAI,KAAKH,EAAYC,EAAeC,EAAa,OAAO,EAG9DpG,EAAS,MAAM,IAAI,QAAQsG,GAAW,CAC1CD,EAAI,iBAAiB,QAAS,IAAM,CAElCC,EAAQ,CACN,MAAOD,EAAI,MACX,OAAQA,EAAI,OACZ,QAASA,EAAI,QACb,YAAaA,EAAI,WAC3B,CAAS,CACT,EAAS,CAAE,KAAM,GAAM,EACjBA,EAAI,OAAO,CAAE,MAAO,EAAI,CAAE,CAChC,CAAK,EAID,GAAI,CAACrG,EAAO,OAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAGvD,MAAMuG,EAAYvG,EAAO,MAAM,CAAC,EAChC,IAAIwG,EAAY,GACZC,EAAe,KAEfzD,EAAAuD,GAAA,YAAAA,EAAW,UAAX,YAAAvD,EAAoB,iBAAkB,SACxCwD,EAAYD,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,UAC7EE,EAAeF,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,cAIlF,MAAM7B,IAAczB,EAAAsD,GAAA,YAAAA,EAAW,OAAX,YAAAtD,EAAiB,cAAe,GAC9CyD,GAASxD,EAAAqD,GAAA,YAAAA,EAAW,UAAX,YAAArD,EAAoB,OAG7ByD,EAAoB,CACxB,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMjC,EAAc,CAAE,YAAAA,CAAW,EAAK,CAAE,EACxC,QAASgC,EAAS,CAAE,OAAAA,GAAW,CAAA,CACvC,CAAO,EACD,QAASd,EAAO,CAAC,EACjB,UAAAY,EACA,aAAAC,EACA,OAAAC,EAEA,YAAa1G,EAAO,YACpB,cAAeA,EAAO,YACtB,WAAYP,EAAQ,aAAe,GACnC,YAAa,EACd,EAGKmH,EAAkB,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC5D,OAAI5G,EAAO,QAAQ,UAAYA,EAAO,QAAQ,WAAa4G,IACzDD,EAAkB,SAAW3G,EAAO,QAAQ,UAI1CA,EAAO,OAAO,SAAW,CAACnB,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASyE,CAAkB,IAC1FqD,EAAkB,QAAU3G,EAAO,OAAO,SAI5C2G,EAAkB,UAAYP,EAAa,QAAQ,OAAO,MAC1DO,EAAkB,SAAWrD,EAC7BqD,EAAkB,QAAUd,EAErBc,CACX,CACA,CAOO,MAAMqB,WAA6B7D,GAAkB,MAAM,aAAa,KAAK,6BAA6B,CAAE,CAUjH,YAAYvB,EAAS,CAAE,EAAEyB,EAAU,CAAE,EAAE5E,EAAU,GAAI,CAEnD,MAAM2G,EAAe,QAAQ,MAAM,YAAY,CAC7C,UAAW,EACZ,EAAExD,CAAM,EAET,MAAMwD,EAAc/B,EAAS5E,CAAO,EAEpCG,EAAQ,IAAI,mCAAoC,CAACwG,EAAc/B,EAAS5E,CAAO,CAAC,CACpF,CAKE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,cAAe,gBAAgB,CAC/E,CAAK,CACL,CAYE,0BAA0BS,EAAM0C,EAAQyC,EAAQhB,EAAS,CACvDzE,EAAQ,IAAI,iDAAkD,CAACM,EAAM0C,EAAQyC,EAAQhB,CAAO,CAAC,EAC7F,MAAMhF,EAAO,MAAM,0BAA0Ba,EAAM0C,EAAQyC,EAAQhB,CAAO,EAG1E,OAAAhF,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAWE,MAAM,UAAU8F,EAAS1F,EAAS,CAIhC,GAHA,MAAM,MAAM,UAAU0F,EAAS1F,CAAO,EAGlC,KAAK,OAAO,OAAS,EAAG,CAC1B,MAAMwI,EAAc,KAAK,QAAQ,cAAc,0BAA0B,EACzE,GAAIA,GAAe,CAAC,KAAK,QAAQ,cAAc,wBAAwB,EAAG,CACxE,MAAMvC,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAY;AAAA;AAAA;AAAA,kEAGsC,KAAK,YAAc,UAAY,EAAE;AAAA,gBACnF,KAAK,KAAK,SAAS,sDAAsD,CAAC;AAAA;AAAA;AAAA,UAIlFuC,EAAY,sBAAsB,cAAevC,CAAO,CAChE,CACA,CACA,CAYE,aAAa,iBAAiBE,EAAQ3D,EAAU4D,EAASpG,EAAU,CAAE,EAAEyI,EAAiB,CAAA,EAAIC,EAAiB,GAAI,CT5yC5G,IAAAzI,ES6yCHE,EAAQ,IAAI,wCAAyC,CAACgG,EAAQ3D,EAAU4D,EAASpG,EAASyI,EAAgBC,CAAc,CAAC,EAEzH,MAAM1F,EAAQmD,EAAO,CAAC,EACtB,GAAI,CAACnD,EAAO,OAAO,KAGnB,MAAMa,EAAqBrB,GAAA,YAAAA,EAAU,cAG/BiE,EAAa,CACjB,QAASgC,EAAe,QACxB,KAAMzF,EAAM,YAAa,EACzB,SAAUyF,EAAe,UAAY,GACrC,MAAOA,EAAe,OAAS,CAAC,CAC9B,MAAO,CAAE,EACT,KAAMzF,EAAM,YAAa,EACzB,QAAS,CAAA,CACV,CAAA,CACF,EAGK0D,EAAgB,CACpB,OAAQ,GACR,KAAM,CACJ,QAAS,YAAY,WAAW,CAAE,MAAA1D,CAAO,CAAA,CACjD,CACK,EAEK,CAAE,SAAA2F,EAAU,GAAGC,CAAe,GAAGF,GAAA,YAAAA,EAAgB,UAAW,CAAE,EAG9D/B,EAAe,CACnB,QAAS,CACP,OAAAR,EACA,YAAaA,EAAO,KAAKG,GAAKX,EAAmB,eAAeW,CAAC,CAAC,EAClE,QAAAF,EACA,SAAU,OAAO,KAAK,YAAc,OAAO,KAAK,UAChD,eAAgBvC,EAChB,OAAQ,CACN,MAAO,KAAK,KAAK,SAAS,kBAAkB,EAC5C,SAAU8B,EAAmB,aAAaQ,CAAM,CACjD,EACD,GAAGyC,EACH,GAAG5I,CACX,CACK,EAGK4G,EAAM,IAAI,KAAKH,EAAYC,EAAeC,EAAa,OAAO,EAE9DpG,EAAS,MAAM,IAAI,QAAQsG,GAAW,CAC1CD,EAAI,iBAAiB,QAAS,IAAM,CTh2CnC,IAAA3G,ESi2CC4G,EAAQ,CACN,MAAOD,EAAI,MACX,YAAaA,EAAI,YACjB,UAAWA,EAAI,OAAO,UACtB,aAAcA,EAAI,OAAO,aACzB,SAAUA,EAAI,OAAO,SACrB,UAAU3G,EAAA2G,EAAI,UAAJ,YAAA3G,EAAa,QACjC,CAAS,CACT,EAAS,CAAE,KAAM,GAAM,EACjB2G,EAAI,OAAO,EAAI,CACrB,CAAK,EAGD,GAAI,GAAC3G,EAAAM,EAAO,QAAP,MAAAN,EAAc,QACjB,OAAAE,EAAQ,IAAI,mDAAmD,EACxD,KAGTA,EAAQ,IAAI,iDAAkD,CAACI,CAAM,CAAC,EAGtE,MAAM2G,EAAoB,CACxB,MAAO3G,EAAO,MACd,YAAaA,EAAO,YACpB,SAAUA,EAAO,SACjB,WAAYP,EAAQ,aAAe,GACnC,YAAa,EACd,EAGKmH,EAAkB,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC5D,OAAI5G,EAAO,UAAYA,EAAO,WAAa4G,IACzCD,EAAkB,SAAW3G,EAAO,UAItC2G,EAAkB,UAAYP,EAAa,QAAQ,OAAO,MAC1DO,EAAkB,SAAWrD,EAC7BqD,EAAkB,QAAUd,EAE5BjG,EAAQ,IAAI,uDAAwD,CAAC+G,CAAiB,CAAC,EAEhFA,CACX,CACA,CAOO,MAAM2B,WAA6BnE,GAAkB,MAAM,aAAa,KAAK,6BAA6B,CAAE,CAUjH,YAAYvB,EAAS,CAAE,EAAEyB,EAAU,CAAE,EAAE5E,EAAU,GAAI,CACnD,MAAMmD,EAAQyB,EAAS5E,CAAO,EAE9BG,EAAQ,IAAI,mCAAoC,CAACgD,EAAQyB,EAAS5E,CAAO,CAAC,CAC9E,CAKE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,gBAAgB,CAChE,CAAK,CACL,CAYE,0BAA0BS,EAAM0C,EAAQyC,EAAQhB,EAAS,CACvDzE,EAAQ,IAAI,iDAAkD,CAACM,EAAM0C,EAAQyC,EAAQhB,CAAO,CAAC,EAC7F,MAAMhF,EAAO,MAAM,0BAA0Ba,EAAM0C,EAAQyC,EAAQhB,CAAO,EAG1E,OAAAhF,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAWE,MAAM,oBAAoBiG,EAAQH,EAAS1F,EAAS,CAClD,OAAA0F,EAAU,MAAM,MAAM,oBAAoBG,EAAQH,EAAS1F,CAAO,EAE9D6F,IAAW,kBACbH,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,QAG5BA,CACX,CAUE,MAAM,UAAUA,EAAS1F,EAAS,CAIhC,GAHA,MAAM,MAAM,UAAU0F,EAAS1F,CAAO,EAGlC,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAIF,IAAI8F,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EAEjE,GAAIA,GAAiB,KAAK,OAAO,OAAS,EAAG,CAC3C,MAAMC,EAAe,CACnB,OAAQ,GACR,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM,eAAe,WAAW/G,CAAS,uCAAwC8G,CAAY,EAExGE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAEpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CACA,CASE,eAAeN,EAAQ,CAErB,YAAK,OAAO,YAAc,KAAK,YAI3B,CAAC,KAAK,aAAe,KAAK,OAAO,gBAEnC,KAAK,OAAO,cAAgB,IAGvB,MAAM,eAAeA,CAAM,CACtC,CAeE,aAAa,iBAAiBW,EAAQ3D,EAAU4D,EAASpG,EAAU,CAAE,EAAEyI,EAAiB,CAAA,EAAIC,EAAiB,GAAI,CT5hD5G,IAAAzI,EAAAsB,EAAA6B,EAAAC,EAAAC,EAAAC,ES6hDHpD,EAAQ,IAAI,wCAAyC,CAACgG,EAAQ3D,EAAU4D,EAASpG,EAASyI,EAAgBC,CAAc,CAAC,EAGzH,MAAM1F,EAAQmD,EAAO,CAAC,EACtB,GAAI,CAACnD,EAAO,OAAO,KAGnB,MAAMa,EAAqBrB,GAAA,YAAAA,EAAU,cAG/BiE,EAAa,CACjB,QAASgC,EAAe,SAAWzF,EACnC,KAAMA,EAAM,YAAa,EACzB,SAAU,MAAM,gBAAgB,OAChC,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMA,EAAM,YAAa,EACzB,QAAS,CAAE,CACZ,CAAA,CACF,EAQK0D,EAAgB,CACpB,OAAQ,GACR,KAAM,CACJ,QAAS,YAAY,WAAW,CAAE,MAAA1D,CAAO,CAAA,CACjD,CACK,EAEK,CAAE,SAAA2F,EAAU,GAAGC,CAAe,GAAGF,GAAA,YAAAA,EAAgB,UAAW,CAAE,EAE9D/B,EAAe,CACnB,QAAS,CACP,OAAAR,EACA,YAAaA,EAAO,KAAKG,GAAKX,EAAmB,eAAeW,CAAC,CAAC,EAClE,QAAAF,EACA,SAAU,OAAO,KAAK,QACtB,eAAgBvC,EAChB,OAAQ,CACN,MAAO,KAAK,KAAK,SAAS,cAAc,EACxC,SAAU8B,EAAmB,aAAaQ,CAAM,CACjD,EAGD,GAAGyC,EACH,GAAG5I,CACX,CACK,EAGK4G,EAAM,IAAI,KAAKH,EAAYC,EAAeC,EAAa,OAAO,EAE9DpG,EAAS,MAAM,IAAI,QAAQsG,GAAW,CAC1CD,EAAI,iBAAiB,QAAS,IAAM,CAClCC,EAAQ,CACN,MAAOD,EAAI,MACX,OAAQA,EAAI,OACZ,QAASA,EAAI,QACb,YAAaA,EAAI,WAC3B,CAAS,CACT,EAAS,CAAE,KAAM,GAAM,EACjBA,EAAI,OAAO,CAAE,MAAO,EAAI,CAAE,CAChC,CAAK,EAID,GAHAzG,EAAQ,IAAI,wCAAyC,CAACyG,EAAI,WAAW,CAAC,EAGlE,CAACrG,EAAO,OAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAGvD,MAAMuG,EAAYvG,EAAO,MAAM,CAAC,EAChC,IAAIwG,EAAY,GACZC,EAAe,KAEf/G,EAAA6G,GAAA,YAAAA,EAAW,UAAX,YAAA7G,EAAoB,iBAAkB,SACxC8G,EAAYD,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,UAC7EE,EAAeF,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,cAIlF,MAAM7B,IAAc1D,EAAAuF,GAAA,YAAAA,EAAW,OAAX,YAAAvF,EAAiB,cAAe,GAC9C0F,GAAS7D,EAAA0D,GAAA,YAAAA,EAAW,UAAX,YAAA1D,EAAoB,OAG7B8D,EAAoB,CACxB,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMjC,EAAc,CAAE,YAAAA,CAAW,EAAK,CAAE,EACxC,QAAS,CACP,GAAIgC,GAAU,CAAE,OAAAA,GAEhB,KAAI5D,EAAAyD,GAAA,YAAAA,EAAW,UAAX,YAAAzD,EAAoB,aAAc,CAAE,WAAYyD,EAAU,QAAQ,YACtE,KAAIxD,EAAAwD,GAAA,YAAAA,EAAW,UAAX,YAAAxD,EAAoB,aAAc,CAAE,WAAYwD,EAAU,QAAQ,YACtE,KAAIvD,EAAAuD,GAAA,YAAAA,EAAW,UAAX,YAAAvD,EAAoB,WAAY,QAAa,CAAE,QAASuD,EAAU,QAAQ,OAAS,CACjG,CACA,CAAO,EACD,QAAS2B,EAAe,SAAWzF,EACnC,UAAA+D,EACA,aAAAC,EACA,OAAAC,EAEA,YAAa1G,EAAO,YACpB,cAAeA,EAAO,YACtB,WAAYP,EAAQ,aAAe,GACnC,YAAa,EACd,EAGKmH,EAAkB,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC5D,OAAI5G,EAAO,QAAQ,UAAYA,EAAO,QAAQ,WAAa4G,IACzDD,EAAkB,SAAW3G,EAAO,QAAQ,UAI9C2G,EAAkB,UAAYP,EAAa,QAAQ,OAAO,MAC1DO,EAAkB,SAAWrD,EAC7BqD,EAAkB,QAAUd,EAE5BjG,EAAQ,IAAI,4DAA6D,CAAC+G,CAAiB,CAAC,EAErFA,CACX,CACA,CCtpDO,MAAM4B,EAAc,CAOzB,oBAAoB3F,EAAQ8B,EAAa,CVZpC,IAAAhF,EAAAsB,EAAA6B,EUaH,OAAAjD,EAAQ,IAAI,8BAA+B,CAAC8E,GAAahF,EAAAkD,EAAO,QAAP,YAAAlD,EAAe,EAAE,CAAC,EACvEgF,KAAe1D,EAAA4B,EAAO,QAAP,MAAA5B,EAAe,MAE3B4B,EAAO,MAAM,CAAC,EAAE,QAAOA,EAAO,MAAM,CAAC,EAAE,MAAQ,CAAE,GACjDA,EAAO,MAAM,CAAC,EAAE,OAAMA,EAAO,MAAM,CAAC,EAAE,KAAO,CAAE,GAEpDA,EAAO,MAAM,CAAC,EAAE,KAAK,YAAc8B,EACnC9B,EAAO,YAAc,GACrBA,EAAO,MAAM,CAAC,EAAE,MAAM,KAAK,cAAc,EAEzChD,EAAQ,IAAI,6BAA8B,EAACiD,EAAAD,EAAO,QAAP,YAAAC,EAAe,EAAE,CAAC,GAExDD,CACR,EAkBD,gBAAgB4F,EAAatC,EAAYuC,EAAmB,CAAA,EAAI,CAE9D,MAAM7F,EAAS,CACb,MAAO,CAAC,CACN,MAAOsD,EAAW,OAAS,CAAE,EAC7B,KAAMA,EAAW,MAAQ,CAAE,EAC3B,QAASA,EAAW,SAAW,CAAA,CACvC,CAAO,EACD,UAAWsC,EAAY,OAAO,WAAa,GAC3C,aAAcA,EAAY,OAAO,cAAgB,GACjD,OAAQA,EAAY,OAAO,OAC3B,QAAS,KACT,YAAa,GACb,OAAQ,GACR,GAAGC,CACJ,EAGK/D,EAAc8D,EAAY,OAAO,aAAetC,EAAW,KAAK,aAAe,GACrF,OAAIxB,GACF,KAAK,oBAAoB9B,EAAQ8B,CAAW,EAGvC,KAAK,gBAAgB9B,EAAQ4F,CAAW,CAChD,EAUD,gBAAgB5F,EAAQ4F,EAAa,CACnC,OAAA5F,EAAO,cAAgB,MAAK,KAAK,KACjCA,EAAO,iBAAmB,GAC1BA,EAAO,aAAe4F,EAAY,OAAO,aAAe,KAEjD5F,CACX,CACA,EC/EO,MAAM8F,WAAyB,QAAQ,aAAa,IAAI,2BAA2B,QAAQ,aAAa,IAAI,aAAa,CAAE,CAChI,YAAYjJ,EAAU,GAAI,CACxB,MAAMA,CAAO,EACb,KAAK,QAAUA,EAAQ,SAAW,GAClC,KAAK,SAAWA,EAAQ,UAAY,GACpC,KAAK,MAAQA,EAAQ,MACrB,KAAK,SAAWA,EAAQ,SACxB,KAAK,WAAa,CAAE,CACxB,CAyBE,eAAeqF,EAAO4B,EAAQ,CAE5B,OADeA,EAAO,QAAQ,OAChB,CACZ,IAAK,WACH,OAAO,KAAK,SAAS5B,EAAO4B,CAAM,EACpC,IAAK,SACH,OAAO,KAAK,OAAO5B,EAAO4B,CAAM,EAClC,IAAK,SACH,OAAO,KAAK,OAAO5B,EAAO4B,CAAM,CACxC,CACA,CAKE,MAAM,gBAAgBjH,EAAU,GAAI,CAElC,MAAO,CACL,GAFc,MAAM,MAAM,gBAAgBA,CAAO,EAGjD,QAAS,KAAK,QACd,SAAU,KAAK,QAChB,CACL,CAiBE,qBAAqB6F,EAAQqD,EAAalJ,EAAS,CACjD,MAAM,qBAAqB6F,EAAQqD,EAAalJ,CAAO,EAEvD,MAAMmJ,EAAeD,EAAY,cAAc,sBAAsB,EAC/DE,EAAoBF,EAAY,cAAc,6BAA6B,EAE7EC,GAAgB,CAAC,KAAK,WAExBA,EAAa,iBAAiB,QAAU9D,GAAU,CAChD,KAAK,QAAUA,EAAM,OAAO,MAAM,KAAM,EACxC,KAAK,wBAAwB+D,CAAiB,CACtD,CAAO,EAGG,KAAK,SACP,KAAK,wBAAwBA,CAAiB,EAGtD,CAME,wBAAwBC,EAAgB,CACtC,GAAI,CAACA,EAAgB,OAErB,GAAI,CAAC,KAAK,QAAS,CACjBA,EAAe,YAAc,SAC7BA,EAAe,UAAU,OAAO,QAAS,SAAS,EAClD,MACN,CAEoB,KAAK,gBAAgB,KAAK,OAAO,GAG/CA,EAAe,YAAc,KAAK,KAAK,SAAS,sCAAsC,EACtFA,EAAe,UAAU,OAAO,OAAO,EACvCA,EAAe,UAAU,IAAI,SAAS,IAEtCA,EAAe,YAAc,KAAK,KAAK,SAAS,wCAAwC,EACxFA,EAAe,UAAU,OAAO,SAAS,EACzCA,EAAe,UAAU,IAAI,OAAO,EAE1C,CAOE,OAAOhE,EAAO4B,EAAQ,CACpB,MAAMqC,EAAMrC,EAAO,QAAQ,IAGrBkC,EAAe,KAAK,QAAQ,cAAc,sBAAsB,EACtE,GAAI,CAACA,EAAc,OAEnB,MAAMI,EAAiBJ,EAAa,MAAM,KAAM,EAGhD,GAAII,EAAgB,CAElB,MAAMC,EAAY,eACZC,EAAU,IAAI,IAGpB,IAAIC,EAAmBH,EACnBI,EAEJ,MAAQA,EAAQH,EAAU,KAAKD,CAAc,KAAO,MAAM,CACxD,MAAMK,EAAQ,SAASD,EAAM,CAAC,GAAK,GAAG,EAChCE,EAAUF,EAAM,CAAC,EACvBF,EAAQ,IAAII,GAAUJ,EAAQ,IAAII,CAAO,GAAK,GAAKD,CAAK,EACxDF,EAAmBA,EAAiB,QAAQC,EAAM,CAAC,EAAG,EAAE,EAAE,KAAM,CACxE,CAGM,MAAMG,EAAaR,EAAI,UAAU,CAAC,EAClCG,EAAQ,IAAIK,GAAaL,EAAQ,IAAIK,CAAU,GAAK,GAAK,CAAC,EAG1D,MAAMC,EAAY,CAAE,EACpB,SAAW,CAACF,EAASD,CAAK,IAAKH,EAC7BM,EAAU,KAAK,GAAGH,CAAK,IAAIC,CAAO,EAAE,EAItCH,EAAmBA,EAAiB,QAAQ,+BAAgC,EAAE,EAAE,KAAM,EAGlFA,GAAoBA,IAAqB,IAC3C,KAAK,QAAU,GAAGK,EAAU,KAAK,KAAK,CAAC,MAAML,CAAgB,GAE7D,KAAK,QAAUK,EAAU,KAAK,KAAK,CAE3C,MAEM,KAAK,QAAU,IAAIT,CAAG,GAIxBH,EAAa,MAAQ,KAAK,QAG1BA,EAAa,cAAc,IAAI,MAAM,OAAO,CAAC,CACjD,CAOE,gBAAgB5E,EAAS,CX/LpB,IAAAtE,EWgMH,GAAI,CAACsE,GAAWA,EAAQ,KAAI,IAAO,GAAI,MAAO,GAE9C,GAAI,CAEF,OAAO,KAAK,SAASA,CAAO,CAC7B,MAAe,CAEd,GAAI,CACF,WAAI,KAAKA,IAAStE,EAAA,KAAK,QAAL,YAAAA,EAAY,gBAAiB,EAAE,EAC1C,EACR,MAAW,CACV,MAAO,EACf,CACA,CACA,CAKE,MAAM,UAAW,CAIf,GAHAE,EAAQ,IAAI,UAAU,EAGlB,CAAC,KAAK,gBAAgB,KAAK,OAAO,EAAG,CACvC,GAAG,cAAc,MAAM,KAAK,KAAK,OAAO,+CAAgD,CACtF,QAAS,KAAK,SAAW,OACjC,CAAO,CAAC,EACF,MACN,CAGQ,KAAK,UACP,MAAM,KAAK,SAAS,KAAK,OAAO,EAGlC,KAAK,MAAO,CAChB,CAKE,QAAS,CACP,KAAK,MAAO,CAChB,CAOE,aAAa,OAAOH,EAAU,GAAI,CAChC,OAAO,IAAI,QAAS6G,GAAY,CAC9B,MAAMjB,EAAS,IAAI,KAAK,CACtB,GAAG5F,EACH,SAAWuE,GAAYsC,EAAQtC,CAAO,CAC9C,CAAO,EAEDqB,EAAO,iBAAiB,QAAS,IAAM,CAEhCA,EAAO,WACViB,EAAQ,IAAI,CAEtB,CAAO,EAEDjB,EAAO,OAAO,EAAI,CACxB,CAAK,CACL,CAKE,MAAM,MAAM5F,EAAU,GAAI,CACxB,YAAK,UAAY,GACV,MAAM,MAAMA,CAAO,CAC9B,CACA,CAxPEE,EAbW+I,GAaJ,kBAAkB,CACvB,GAAI,4BACJ,QAAS,CAAC,sBAAuB,2BAA2B,EAC5D,IAAK,MACL,OAAQ,CACN,MAAO,0CACP,KAAM,kBACN,UAAW,GACX,WAAY,GACZ,MAAO,EACR,EACD,SAAU,CACR,MAAO,IACP,OAAQ,MACd,CACG,GAgCD/I,EA5DW+I,GA4DJ,QAAQ,CACb,KAAM,CACJ,SAAU,WAAW3J,EAAO,EAAE,mCAC/B,EACD,OAAQ,CACN,SAAU,WAAWA,EAAO,EAAE,0CACpC,CACG,GCnEI,MAAM0K,EAAe,CAC1B,QAAS,MAAOhH,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CZP3E,IAAAzG,EYQHE,EAAQ,IAAI,0BAA2B,CAACsG,CAAU,CAAC,EACnD,MAAMtD,EAAS2F,EAAY,gBAAgBC,EAAatC,EAAY,CAClE,QAASsC,EAAY,OAC3B,CAAK,EACD5I,EAAQ,IAAI,0BAA2B,EAACF,EAAAkD,EAAO,QAAP,YAAAlD,EAAe,EAAE,CAAC,EAC1D,MAAM+C,EAAM,iBAAiBG,EAAQwD,EAAcD,CAAa,CACjE,EAED,aAAc,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAC1DsD,EAAa,QAAQhH,EAAO+F,EAAatC,EAAYE,EAAcD,CAAa,EAGzF,KAAM,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CAC3E,MAAMvD,EAAS2F,EAAY,gBAAgBC,EAAatC,EAAY,CAClE,QAASsC,EAAY,OAC3B,CAAK,EACD,MAAM/F,EAAM,gBAAgBG,EAAQwD,EAAcD,CAAa,CAChE,EAED,YAAa,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IACzDsD,EAAa,KAAKhH,EAAO+F,EAAatC,EAAYE,EAAcD,CAAa,EAGtF,MAAO,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CAC5E,MAAMvD,EAAS2F,EAAY,gBAAgBC,EAAatC,EAAY,CAClE,MAAOsC,EAAY,QACnB,cAAe,GACf,QAASA,EAAY,OAAO,SAAW,MAC7C,CAAK,EACD,MAAM/F,EAAM,UAAUG,EAAQwD,EAAcD,CAAa,CAC1D,EAED,KAAM,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CAC3E,MAAMvD,EAAS2F,EAAY,gBAAgBC,EAAatC,EAAY,CAClE,KAAMsC,EAAY,QAClB,cAAe,GACf,QAASA,EAAY,OAAO,SAAW,MAC7C,CAAK,EACD,MAAM/F,EAAM,cAAcG,EAAQwD,EAAcD,CAAa,CAC9D,EAED,cAAe,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CACpF,MAAMvD,EAAS2F,EAAY,gBAAgBC,EAAatC,CAAU,EAClE,MAAMzD,EAAM,kBAAkBG,EAAQwD,EAAcD,CAAa,CAClE,EAED,OAAQ,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CAC7E,MAAMsD,EAAa,mBAAmBhH,EAAO5D,EAAW,OAAQ2J,EAAatC,EAAYE,EAAcD,CAAa,CACrH,EAED,OAAQ,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CAC7E,MAAMsD,EAAa,mBAAmBhH,EAAO5D,EAAW,OAAQ2J,EAAatC,EAAYE,EAAcD,CAAa,CACrH,EAED,SAAU,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CAC/E,MAAMsD,EAAa,mBAAmBhH,EAAO5D,EAAW,UAAW2J,EAAatC,EAAYE,EAAcD,CAAa,CACxH,EAED,WAAY,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CAEjF,GAAI,CAAC,KAAK,OAAQ,CAChB,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,mBAAmB,CAAC,EAC7D,MACN,CAEI,MAAMvD,EAAS2F,EAAY,gBAAgBC,EAAatC,CAAU,EAClEtG,EAAQ,IAAI,gBAAiB,CAAC4I,EAAatC,EAAYtD,CAAM,CAAC,EAE9D,MAAM8B,EAAc8D,EAAY,OAAO,aAAetC,EAAW,KAAK,aAAe,GACjFxB,GAAe0B,EAAa,WAAa,CAAC,KAAK,KAAK,OACtD3D,EAAM,4BAA8BiC,GAGlC0B,EAAa,WAAa,CAAC,KAAK,KAAK,KACvC,MAAM3D,EAAM,qBAAqBG,CAAM,EAEvC,MAAMH,EAAM,eAAe,CAAC,iBAAkB,EAAI,EAAGG,CAAM,CAE9D,EAGD,iBAAkB,MAAOH,EAAO+F,EAAatC,EAAYE,EAAcD,IAC9DsD,EAAa,WAAWhH,EAAO+F,EAAatC,EAAYE,EAAcD,CAAa,EAG5F,UAAW,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CAChF,MAAMvD,EAAS2F,EAAY,gBAAgBC,EAAatC,CAAU,EAClE,MAAMzD,EAAM,cAAcG,EAAQwD,EAAcD,CAAa,CAC9D,EAED,OAAQ,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CAC7EC,EAAa,UAAY,KAAK,KAAK,KAAOA,EAAa,UAAY,GAEnE,MAAMxD,EAAS2F,EAAY,gBAAgBC,EAAatC,EAAY,CAClE,aAAcsC,EAAY,OAChC,CAAK,EACD,MAAM/F,EAAM,WAAWG,EAAQwD,EAAcD,CAAa,CAC3D,EAED,OAAQ,MAAO1D,EAAO+F,EAAatC,EAAYE,EAAcD,IAAkB,CAC7E,MAAMsD,EAAa,iBAAiBhH,EAAO+F,CAAW,CACvD,EAkBD,MAAM,mBAAmB/F,EAAOR,EAAUuG,EAAatC,EAAYE,EAAcD,EAAe,CZ/H3F,IAAAzG,EAAAsB,EAAA6B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA2D,EAAAC,EYiIH,GADApH,EAAQ,IAAI,kCAAmC,CAACqC,EAAUuG,EAAatC,CAAU,CAAC,EAC9EsC,EAAY,QAAS,CAGvB,MAAMkB,EAAgBnB,EAAY,gBAAgBC,EAAatC,CAAU,EAInEyD,IAAc3I,GAAAtB,EAAAgK,EAAc,QAAd,YAAAhK,EAAsB,KAAtB,YAAAsB,EAA0B,UAAW,CAAE,EACrD4I,EAAiB,CACrB,MAAO,CACL,GAAGpB,EAAY,OACf,MAAOkB,EAAc,MAErB,GAAIC,EAAY,YAAc,CAAE,WAAYA,EAAY,UAAU,EAClE,GAAIA,EAAY,YAAc,CAAE,WAAYA,EAAY,UAAU,EAClE,GAAIA,EAAY,UAAY,QAAa,CAAE,QAASA,EAAY,OAAS,CAC1E,EACD,OAAQvD,EACR,QAASD,CACV,EAEDvG,EAAQ,IAAI,6CAA8C,CACxDgK,EACA,gBAAgB5G,GAAAD,GAAAD,GAAAD,EAAA+G,EAAe,QAAf,YAAA/G,EAAsB,QAAtB,YAAAC,EAA8B,KAA9B,YAAAC,EAAkC,OAAlC,YAAAC,EAAwC,YACxD,iBAAiBG,GAAAD,GAAAD,EAAA2G,EAAe,QAAf,YAAA3G,EAAsB,QAAtB,YAAAC,EAA8B,KAA9B,YAAAC,EAAkC,QACnD,4BAA6B,CAC3B,YAAYC,EAAAwG,EAAe,QAAf,YAAAxG,EAAsB,WAClC,YAAY2D,EAAA6C,EAAe,QAAf,YAAA7C,EAAsB,WAClC,SAASC,EAAA4C,EAAe,QAAf,YAAA5C,EAAsB,OACzC,CACA,CAAO,EAED,MAAMjF,GAAa,oBACjBU,EACAR,EACAuG,EAAY,QACZA,EAAY,WACZoB,CACD,CACP,CACG,EAYD,MAAM,iBAAiBnH,EAAO+F,EAAa,CACzC,MAAMxE,EAAUwE,EAAY,QAGb,IAAIE,GAAiB,CAClC,QAAS1E,EACT,SAAU,GACV,MAAOvB,EACP,SAAU,MAAOoH,GAAqB,CACpC,GAAI,CACF,MAAM3J,EAAO,IAAI,KAAK2J,EAAkBpH,EAAM,YAAW,CAAE,EAG3DvC,EAAK,QAAUA,EAAK,SAAW,CAAE,EACjCA,EAAK,QAAQ,cAAgB,GAE7B,MAAMA,EAAK,SAAS,CAAC,MAAO,EAAI,CAAC,EAGjC,MAAMA,EAAK,UAAU,CACnB,QAAS,YAAY,WAAW,CAAC,MAAAuC,CAAK,CAAC,EACvC,OAAQ,KAAK,KAAK,SAAS,0BAA0B5D,EAAW,MAAM,EAAE,EACxE,SAAU2J,EAAY,OAAO,SAC7B,cAAe,GACf,iBAAkB,GAClB,aAAcA,EAAY,OAAO,aAAe,IAC5D,CAAW,CACF,MAAe,CACd,GAAG,cAAc,MAAM,KAAK,KAAK,OAAO,+CAAgD,CAAC,QAASqB,CAAgB,CAAC,CAAC,CAC9H,CACA,CACA,CAAK,EAEM,OAAO,EAAI,CACnB,EAOD,MAAM,qBAAqBpH,EAAO,CAChC,MAAMzC,EAAS,QAAQ,MAAM,YAAY,CACvC,KAAM,OACN,OAAQ,CACN,QAAS,CACV,EACD,OAAQ,GACR,MAAO,CAAE,EACT,WAAY,CAAE,EACd,YAAa,CAAA,CACd,EAAE,EAAE,EAEA,QAASA,IAASA,EAAO,OAAO,QAAUA,EAAO,KAEtDyC,EAAM,wBAAwB,CAAE,WAAYA,EAAM,OAAO,WAAW,GAAG,IAAK,KAAM,MAAM,EAAIzC,CAAM,EAElGA,EAAO,IAAMA,EAAO,OAAO,QAC3BA,EAAO,SAAW,GAElB,GAAI,CACF,GAAIA,EAAO,YAAc,OAAO,KAAKA,EAAO,UAAU,EAAE,OAAS,EAAG,CAClE,MAAM8J,EAAe,MAAMrH,EAAM,OAAOzC,EAAO,WAAY,CAAE,OAAQ,GAAO,CACpF,MACQJ,EAAQ,IAAI,8BAA+B,EAAE,EAG/C,GAAII,EAAO,aAAeA,EAAO,YAAY,OAAS,EAAG,CACvD,MAAM+J,EAAmB,MAAMtH,EAAM,wBAAwB,OAAQzC,EAAO,YAAa,CAAE,OAAQ,GAAO,CAClH,MACQJ,EAAQ,IAAI,6BAA8B,EAAE,CAE/C,OAAQoK,EAAO,CACd,MAAApK,EAAQ,MAAM,gDAAiD,CAACoK,CAAK,CAAC,EAChEA,CACZ,CAEI,OAAApK,EAAQ,IAAI,0BAA2B,CAACI,CAAM,CAAC,EAExCA,CACX,CACA,EC1PO,MAAMiK,EAAgB,CAS3B,OAAO,YAAa,CAClBrK,EAAQ,IAAI,4BAA4B,EAGnC,KAAK,KAAK,MAEf,KAAK,cAAe,CACxB,CAKE,OAAO,eAAgB,CACrBA,EAAQ,IAAI,+BAA+B,EAC3C,KAAK,cAAcV,EAAY,uBAAwB,KAAK,eAAe,KAAK,KAAML,EAAW,OAAO,CAAC,EACzG,KAAK,cAAcK,EAAY,sBAAuB,KAAK,eAAe,KAAK,KAAML,EAAW,IAAI,CAAC,EACrG,KAAK,cAAcK,EAAY,kBAAmB,KAAK,eAAe,KAAK,KAAML,EAAW,KAAK,CAAC,EAClG,KAAK,cAAcK,EAAY,iBAAkB,KAAK,eAAe,KAAK,KAAML,EAAW,IAAI,CAAC,EAChG,KAAK,cAAcK,EAAY,mBAAoB,KAAK,eAAe,KAAK,KAAML,EAAW,MAAM,CAAC,EACpG,KAAK,cAAcK,EAAY,mBAAoB,KAAK,eAAe,KAAK,KAAML,EAAW,MAAM,CAAC,EACpG,KAAK,cAAcK,EAAY,oBAAqB,KAAK,eAAe,KAAK,KAAML,EAAW,UAAU,CAAC,EACzG,KAAK,cAAcK,EAAY,8BAA+B,KAAK,eAAe,KAAK,KAAML,EAAW,UAAU,CAAC,EACnH,KAAK,cAAcK,EAAY,uBAAwB,KAAK,eAAe,KAAK,KAAML,EAAW,UAAU,CAAC,EAC5G,KAAK,cAAcK,EAAY,oBAAqB,KAAK,eAAe,KAAK,KAAML,EAAW,OAAO,CAAC,CAE1G,CAOE,OAAO,cAAcqL,EAAU1J,EAAS,CACtCZ,EAAQ,IAAI,+BAA+B,EAC3C,MAAMuK,EAAS,MAAM,GAAGD,EAAU1J,CAAO,EACzC,KAAK,gBAAgB,IAAI,CAAE,SAAA0J,EAAU,OAAAC,CAAM,CAAE,CACjD,CAKE,OAAO,iBAAkB,CACvBvK,EAAQ,IAAI,iCAAiC,EAC7C,SAAW,CAAE,SAAAsK,EAAU,OAAAC,CAAM,IAAM,KAAK,gBACtC,MAAM,IAAID,EAAUC,CAAM,EAE5B,KAAK,gBAAgB,MAAO,CAChC,CAUE,OAAO,eAAelI,EAAUW,EAAQyC,EAAQhB,EAAS,Cb9EpD,IAAA3E,EAAAsB,EAAA6B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EagFH,GAAI,CAAC,KAAK,KAAK,MAAQN,EAAO,gBAAkB,GAAO,OAEvD,MAAMwH,GAAYxH,GAAA,YAAAA,EAAQ,aAAayC,GAAA,YAAAA,EAAQ,aAAahB,GAAA,YAAAA,EAAS,YAAa,CAAE,EAC9EgG,EAAmBD,EAAU,SAAS,kBAAkB,GAAKA,EAAU,SAAS,YAAY,EAElG,GAAGnI,IAAapD,EAAW,OAAO,CAChCe,EAAQ,IAAI,kDAAmD,EAACF,EAAAkD,EAAO,UAAP,YAAAlD,EAAgB,IAAI,CAAC,EACrF,MAAM4K,GAAczH,GAAA7B,EAAA4B,EAAO,UAAP,YAAA5B,EAAgB,OAAhB,YAAA6B,EAAsB,QAAQnE,EAAW,oBAC7D,GAAG4L,EAAY,CACb1K,EAAQ,IAAI,6EAA8E,CAAC0K,CAAW,CAAC,EACvG,MACR,CACA,CAEI,GAAGrI,IAAapD,EAAW,OAAO,CAChCe,EAAQ,IAAI,kDAAmD,CAACgD,CAAM,CAAC,EAEvE,MAAM0H,GAAcvH,GAAAD,EAAAF,EAAO,UAAP,YAAAE,EAAgB,OAAhB,YAAAC,EAAsB,QAAQrE,EAAW,oBAC7D,GAAG4L,EAAY,CACb1K,EAAQ,IAAI,6EAA8E,CAAC0K,CAAW,CAAC,EACvG,MACR,CACA,CAQI,GANID,GAAoBpI,IAAapD,EAAW,UAC9Ce,EAAQ,IAAI,oEAAqE,CAACwK,CAAS,CAAC,EAC5FnI,EAAWpD,EAAW,YAIpB+D,GAAA,MAAAA,EAAQ,eAAiByC,GAAA,MAAAA,EAAQ,eAAiBhB,GAAA,MAAAA,EAAS,cAC7D,OAGF,IAAI5B,EACAR,IAAapD,EAAW,YAAc+D,aAAkB,MAC1DH,EAAQG,EACCX,IAAapD,EAAW,QACjC4D,IAAQO,EAAAqC,GAAA,YAAAA,EAAQ,UAAR,YAAArC,EAAiB,SAASqC,GAAA,YAAAA,EAAQ,WAAWA,GAAA,YAAAA,EAAQ,OACrDpD,IAAapD,EAAW,QAAUoD,IAAapD,EAAW,OAClE4D,GAAQQ,EAAAL,EAAO,UAAP,YAAAK,EAAgB,MAExBR,IAAQS,EAAAN,EAAO,UAAP,YAAAM,EAAgB,QAASN,EAAO,SAAWA,EAAO,MAG5D,MAAMzB,EAAW1C,EAAa,EAI9B,GAAG,CAH6ByC,EAAa,IAAIC,EAAS,wBAAwB,GAAG,GAInF,CAACsB,GAASA,EAAM,eAAiB,QACjC,OAIF7C,EAAQ,IAAI,iBAAkB,CAACgD,EAAQyB,CAAO,CAAC,EAC/C,MAAMkG,EAAQ,KAAK,eAAe9H,CAAK,EACvC,GAAI,GAAC8H,GAASA,EAAM,KAAO,KAAK,KAAK,IACjClF,EAAO,YAAY,IAASzC,EAAO,gBAAgB,IAASA,EAAO,aAAa,IAAQA,EAAO,cAAc,IAIjH,OAAAhD,EAAQ,IAAI,wCAAyC,CAACgD,EAAQyB,CAAO,CAAC,EAElEpC,IAAapD,EAAW,SAC1BwF,EAAU,CACR,GAAGA,EACH,SAAU,MAAM,gBAAgB,MACjC,GAEHzE,EAAQ,IAAI,wCAAyC,CAACgD,EAAQyB,CAAO,CAAC,EAGtE,KAAK,oBAAoB5B,EAAO8H,EAAOtI,EAAUW,EAAQyC,EAAQhB,CAAO,EAGjE,EACX,CAWE,aAAa,oBAAoB5B,EAAO8H,EAAOtI,EAAUW,EAAQyC,EAAQhB,EAAS,CbxK7E,IAAA3E,EAAAsB,EAAA6B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA2D,EAAAC,EAAAC,EAAAuD,EayKH5K,EAAQ,IAAI,+BAAgC,CAACqC,EAAUW,CAAM,CAAC,EAC9D,MAAMzB,EAAW1C,EAAa,EACEyC,EAAa,IAAIC,EAAS,wBAAwB,GAAG,EACrF,MAAMsJ,EAAsBvJ,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EAO7E,GAAI,CAEF,MAAMmC,EAAqBrB,GAAA,YAAAA,EAAU,cAGrC,IAAIyI,EACA,CAAC7L,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASyE,CAAkB,EACjEoH,EAAc7C,GACLvE,IAAuBzE,EAAW,QAC3C6L,EAAc/C,GACLrE,IAAuBzE,EAAW,OAC3C6L,EAAcpC,GACLhF,IAAuBzE,EAAW,QAEvCmC,GAAAtB,EAAA,MAAM,eAAN,YAAAA,EAAoB,OAApB,MAAAsB,EAA0B,8BAC5B0J,EAAc1C,IAGdpI,EAAQ,IAAI,mEAAmE,EAC/E8K,EAActF,GAGhBsF,EAActF,EAIhB,IAAIc,EAAa,CACf,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACV,CAAA,CACF,EAGD,OAAQ5C,EAAkB,CACxB,KAAKzE,EAAW,QACdqH,EAAW,QAAUtD,EAAO,WAAWC,EAAAD,EAAO,UAAP,YAAAC,EAAgB,SACvD,MACF,KAAKhE,EAAW,KACdqH,EAAW,QAAUtD,EAAO,WAAWE,EAAAF,EAAO,UAAP,YAAAE,EAAgB,SAEnDF,EAAO,UAAY,OAASA,EAAO,cAAgB,SACrDX,EAAWpD,EAAW,eAExB,MACF,KAAKA,EAAW,MACdqH,EAAW,MAAQtD,EAAO,MAC1BsD,EAAW,QAAUtD,EAAO,QAC5B,MACF,KAAK/D,EAAW,KACdqH,EAAW,KAAOtD,EAAO,KACzBsD,EAAW,QAAUtD,EAAO,QAC5B,MACF,KAAK/D,EAAW,cACdqH,EAAW,QAAU,MACrB,MACF,KAAKrH,EAAW,WAEd,MACF,KAAKA,EAAW,QAEdqH,EAAW,aAAe,OAAOtD,GAAW,SAAWA,EAAUA,EAAO,gBAAgBG,EAAAH,EAAO,UAAP,YAAAG,EAAgB,cACxG,MACF,KAAKlE,EAAW,OACVwG,GAAA,MAAAA,EAAQ,UACVa,EAAW,WAAab,EAAO,QAAQ,WACvCa,EAAW,WAAab,EAAO,QAAQ,WACvCa,EAAW,QAAUb,EAAO,QAAQ,SAEtC,MACF,KAAKxG,EAAW,OAEdqH,EAAW,MAAOlD,EAAAJ,EAAO,UAAP,YAAAI,EAAgB,KAClCkD,EAAW,QAAUtD,EAAO,QAC5BsD,EAAW,SAAWtD,EAAO,UAAY,GACzC,KACV,CAGM,MAAMzB,EAAW1C,EAAa,EACxBkM,EAAczJ,EAAa,IAAIC,EAAS,YAAY,GAAG,EAEvD1B,EAAU,CACd,OAAQ,CAACgD,CAAK,EACd,SAAUa,EACV,OAAQ,GACR,mBAAoB,GACpB,YAAaqH,CACd,EAED,IAAI3K,EACJ,GAAK2K,EAiDH3K,EAAS,CACP,YAAa,GACb,UAAW,GACX,aAAc,GACd,YAAa,GACb,SAAU,KAAK,SAAS,IAAI,OAAQ,UAAU,CAC/C,MAvDe,CAEhB,IAAI6F,EAAU,KACd,OAAQvC,EAAkB,CACxB,KAAKzE,EAAW,MACdgH,EAAUjD,EAAO,MACjB,MACF,KAAK/D,EAAW,KACdgH,EAAUjD,EAAO,KACjB,MACF,KAAK/D,EAAW,QAChB,KAAKA,EAAW,KACdgH,EAAUjD,EAAO,WAAWK,EAAAL,EAAO,UAAP,YAAAK,EAAgB,SAC5C,MACF,KAAKpE,EAAW,cACdgH,EAAU,MACV,MACF,KAAKhH,EAAW,WACdgH,IAAU1C,GAAAD,EAAAT,EAAM,OAAO,aAAb,YAAAS,EAAyB,OAAzB,YAAAC,EAA+B,UAAW,MACpD,MACF,KAAKtE,EAAW,QACdgH,EAAU,OAAOjD,GAAW,SAAWA,EAAUA,EAAO,gBAAgBQ,EAAAR,EAAO,UAAP,YAAAQ,EAAgB,cACxF,MACF,KAAKvE,EAAW,OACdgH,GAAUmB,GAAAD,EAAAnE,EAAO,UAAP,YAAAmE,EAAgB,OAAhB,YAAAC,EAAsB,GAChC,MACF,KAAKnI,EAAW,OACdgH,GAAU2E,GAAAvD,EAAArE,EAAO,UAAP,YAAAqE,EAAgB,OAAhB,YAAAuD,EAAsB,GAChC,KACZ,CAEQ,GAAI,CAACE,EAAY,iBACf,MAAA9K,EAAQ,MAAM,yCAA0C,CAAC8K,EAAaA,EAAY,IAAI,CAAC,EACjF,IAAI,MAAM,eAAeA,EAAY,IAAI,wCAAwC,EAGrFpH,IAAuBzE,EAAW,QAAUyE,IAAuBzE,EAAW,OAChFmB,EAAS,MAAM0K,EAAY,iBAAiB,CAACjI,CAAK,EAAGa,EAAoBuC,EAAS,CAChF,YAAa,GACb,mBAAoB,EAChC,EAAajD,EAAQyC,CAAM,EAEjBrF,EAAS,MAAM0K,EAAY,iBAAiB,CAACjI,CAAK,EAAGa,EAAoBuC,EAAS,CAChF,YAAa,GACb,mBAAoB,EAChC,CAAW,CAEX,CAYM,GAAI,CAAC7F,EAAQ,CACXJ,EAAQ,IAAI,wCAAwC,EACpD,MACR,CAIM,GADAA,EAAQ,IAAI,kDAAmD,CAACqC,EAAUW,EAAQ5C,CAAM,CAAC,EACrF,CAACA,EAAO,aAAe,CAACyK,EAAqB,CAC/C,MAAM,KAAK,kBAAkBhI,EAAOR,EAAUW,EAAQ5C,CAAM,EAC5D,MACR,CAKM,KAAM,CAAE,MAAA8E,EAAO,GAAG8F,EAAkB,EAAKhI,EACnCiI,GAAc,CAClB,GAAGD,GACH,GAAG5K,EACH,MAAOA,EAAO,MACd,YAAa,KAAK,KAAK,KAEvB,GAAIiC,IAAapD,EAAW,QAAU,CAAE,YAAa,EAAO,CAC7D,EAEDe,EAAQ,IAAI,oDAAqD,CAC/D,YAAaqC,EACb,UAAWjC,EACX,gBAAiBA,EAAO,MACxB,eAAgB6K,GAChB,qBAAsBA,GAAY,KAC1C,CAAO,EAED,KAAK,iBAAiBpI,EAAO8H,EAAOtI,EAAU4I,EAAW,CAE1D,MAAe,CAEd,KAAK,iBAAiBpI,EAAO8H,EAAOtI,EAAUW,CAAM,CAC1D,CACA,CASE,aAAa,kBAAkBH,EAAOR,EAAUiG,EAAgB4C,EAAc,Cb1XzE,IAAApL,EAAAsB,EAAA6B,EAAAC,EAAAC,Ea2XHnD,EAAQ,IAAI,oCAAqC,CAAC6C,EAAOR,EAAUiG,EAAgB4C,CAAY,CAAC,EAEhG,MAAMxH,EAAqBrB,GAAA,YAAAA,EAAU,cAG/BiE,IAAaxG,EAAAoL,EAAa,QAAb,YAAApL,EAAqB,KAAM,CAAE,EAG1CgF,IAAc1D,EAAAkF,EAAW,OAAX,YAAAlF,EAAiB,cAAe,GAG9CwH,EAAc,CAClB,QAASN,EAAe,SAAWA,EAAe,OAASA,EAAe,MAAQA,EAAe,aACjG,OAAQ,CACN,UAAW4C,EAAa,WAAa5C,EAAe,UACpD,aAAc4C,EAAa,cAAgB5C,EAAe,aAC1D,OAAQ4C,EAAa,QAAUA,EAAa,IAAM5C,EAAe,OACjE,SAAU4C,EAAa,UAAY5C,EAAe,SAClD,YAAaxD,EACb,cAAe,EACvB,CACK,EACD9E,EAAQ,IAAI,kDAAmD,CAAC4I,EAAaN,EAAgB4C,CAAY,CAAC,EAE1G,MAAM1E,EAAe,CACnB,UAAW,GACX,cAAe,EAChB,EAEKD,EAAgB,CACpB,SAAUqC,EAAY,OAAO,SAC7B,OAAQ,GACR,cAAe,EAChB,EAED,GAAI,CAEF,MAAMuC,EAAalM,EAeb2B,EAAUiJ,EAAanG,CAAkB,EAC/C1D,EAAQ,IAAI,gDAAiD,CAACY,EAAS8C,EAAoBmG,EAAanG,CAAkB,CAAC,CAAC,EAExH9C,IAEE8C,IAAuBzE,EAAW,QAAUyE,IAAuBzE,EAAW,QAAUyE,IAAuBzE,EAAW,QAC5H2J,EAAY,SAAU1F,GAAAD,EAAAqF,EAAe,UAAf,YAAArF,EAAwB,OAAxB,YAAAC,EAA8B,GACpD0F,EAAY,YAAazF,EAAAmF,EAAe,UAAf,YAAAnF,EAAwB,IAGnDnD,EAAQ,IAAI,gDAAiD,CAAC4I,EAAatC,EAAYE,EAAcD,CAAa,CAAC,EAEnH,MAAM3F,EAAQiC,EAAO+F,EAAatC,EAAYE,EAAcD,CAAa,GAEzEvG,EAAQ,KAAK,mCAAmC0D,CAAkB,EAAE,CAEvE,OAAQ0G,EAAO,CACdpK,EAAQ,MAAM,oCAAqC,CAACoK,CAAK,CAAC,CAChE,CACA,CAWE,aAAa,yBAAyBvH,EAAO8H,EAAOtI,EAAUW,EAAQyC,EAAQhB,EAAS,CACrFzE,EAAQ,IAAI,2CAA4C,CAAC6C,EAAO8H,EAAOtI,EAAUW,EAAQyC,EAAQhB,CAAO,CAAC,EAEzG,GAAI,CAUF,MAAM2G,EAAiB,CACrB,GAAGpI,EACH,YAVkB,MAAOiI,IAEzB,KAAK,iBAAiBpI,EAAO8H,EAAOtI,EAAU4I,CAAW,EAElD,IAAI,KAAK,MAAM,EAAE,SAAS,CAAC,MAAO,EAAK,CAAC,GAO/C,WAAY,EACb,EAGKH,EAAcrF,EAAO,IAIrBrF,EAAS,MAHI,IAAI0K,EAAYM,EAAgB3F,EAAO,OAAO,EAGjC,OAAO,EAAI,CAE5C,MAAe,CAEd,KAAK,iBAAiB5C,EAAO8H,EAAOtI,EAAUW,CAAM,CAC1D,CACA,CAOE,OAAO,eAAeH,EAAO,CAC3B7C,EAAQ,IAAI,iBAAkB,CAAC6C,CAAK,CAAC,EAErC,MAAMwI,EAAYxI,EAAM,WAAa,CAAE,EAEvC,SAAW,CAAC/B,EAAQoG,CAAK,IAAK,OAAO,QAAQmE,CAAS,EACpD,GAAInE,GAAS,MAAM,0BAA0B,MAAO,CAClD,MAAM7F,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,GAAIO,GAAQ,CAACA,EAAK,KAChB,OAAOA,CAEjB,CAGI,OAAO,IACX,CASE,OAAO,iBAAiBwB,EAAO8H,EAAOtI,EAAUW,EAAQ,Cb1gBnD,IAAAlD,EAAAsB,EAAA6B,EAAAC,EAAAC,EAAAC,EAAAC,Ea2gBHrD,EAAQ,IAAI,mBAAoB,CAAC6C,EAAO8H,EAAOtI,EAAUW,CAAM,CAAC,EAChEhD,EAAQ,IAAI,wCAAyC,CACnD,gBAAiBgD,EAAO,MACxB,oBAAoBlD,EAAAkD,EAAO,QAAP,YAAAlD,EAAe,GACnC,yBAAyBmD,GAAA7B,EAAA4B,EAAO,QAAP,YAAA5B,EAAe,KAAf,YAAA6B,EAAmB,KAC5C,qCAAqCG,GAAAD,GAAAD,EAAAF,EAAO,QAAP,YAAAE,EAAe,KAAf,YAAAC,EAAmB,OAAnB,YAAAC,EAAyB,WACpE,CAAK,EACD,MAAM7B,EAAW1C,EAAa,EACxBkM,EAAczJ,EAAa,IAAIC,EAAS,YAAY,GAAG,EAG7D,IAAImC,EAAqBrB,GAAA,YAAAA,EAAU,cAI/BqB,IAAuBzE,EAAW,aACpCyE,EAAqBzE,EAAW,mBAIlC,IAAIgH,EAAU,KACVlD,EAAa,KACjB,OAAQW,EAAkB,CACxB,KAAKzE,EAAW,QAChB,KAAKA,EAAW,KACdgH,EAAUjD,EAAO,QACjB,MACF,KAAK/D,EAAW,MACdgH,EAAUjD,EAAO,MACjB,MACF,KAAK/D,EAAW,KACdgH,EAAUjD,EAAO,KACjB,MACF,KAAK/D,EAAW,OAChB,KAAKA,EAAW,OACde,EAAQ,IAAI,+CAAgD,CAACqC,EAAUW,CAAM,CAAC,EAE9EiD,GAAU5C,EAAAL,EAAO,QAAQ,OAAf,YAAAK,EAAqB,GAC/BN,EAAaC,EAAO,QAAQ,GAC5B,MACF,KAAK/D,EAAW,QAEdgH,EAAU,OAAOjD,GAAW,SAAWA,EAASA,EAAO,aACvD,MACF,KAAK/D,EAAW,kBAChB,KAAKA,EAAW,WAEdgH,EAAU,KACV,MACF,KAAKhH,EAAW,WAEdgH,EAAU,KACV,MACF,QAEEjG,EAAQ,KAAK,sBAAsBqC,CAAQ,EAAE,EAC7C,MACR,CAGI,MAAMuG,EAAc,CAClB,KAAM,cACN,UAAW,QAAQ,MAAM,SAAU,EACnC,QAAS/F,EAAM,GACf,SAAUa,EACV,QAAAuC,EACA,WAAAlD,EACA,kBAAmB,CACjB,GAAGC,EACH,aAAc,KAAK,KAAK,IACzB,EACD,WAAY+H,EACZ,eAAgB,MAAM,KAAK,KAAK,KAAK,OAAO,EAAE,IAAIO,GAAKA,EAAE,EAAE,EAC3D,gBAAiBhK,EAAa,IAAIC,EAAS,kBAAkB,GAAG,CACjE,EAGDP,EAAW,YAAY,oBAAqB2J,EAAM,GAAI/B,CAAW,EAGjE,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,qDAAsD,CAC3F,OAAQ+B,EAAM,KACd,MAAO9H,EAAM,IACnB,CAAK,CAAC,CACN,CACA,CAhlBE9C,EAJWsK,GAIJ,kBAAkB,IAAI,KCJxB,SAASkB,GAAmBlJ,EAAU4D,EAAS,CdZ/C,IAAAnG,EAAAsB,EAAA6B,EAAAC,EAAAC,EcaL,IAAIqI,EAAU,KAAK,KAAK,SAAS,0BAA0BnJ,CAAQ,EAAE,GAAKA,EAG1E,MAAMqB,EAAqBrB,GAAA,YAAAA,EAAU,cAErC,GAAI4D,EACF,OAAQvC,EAAkB,CACxB,KAAKzE,EAAW,MACduM,GAAW,OAAK1L,EAAA,OAAO,MAAM,OAAOmG,CAAO,IAA3B,YAAAnG,EAA8B,QAASmG,CAAO,IAC9D,MACF,KAAKhH,EAAW,KACduM,GAAW,OAAKpK,EAAA,OAAO,MAAM,UAAU6E,CAAO,IAA9B,YAAA7E,EAAiC,QAAS6E,CAAO,IACjE,MACF,KAAKhH,EAAW,QACduM,GAAW,OAAKvI,EAAA,OAAO,MAAM,UAAUgD,CAAO,IAA9B,YAAAhD,EAAiC,QAASgD,CAAO,IACjE,MACF,KAAKhH,EAAW,KACd,MAAM2I,GAAWzE,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuC8C,GACxD,GAAI2B,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnF4D,GAAW,MAAK1D,GAAA,YAAAA,EAAU,OAAQ7B,CAAO,GACnD,MACUuF,GAAW,KAAKvF,CAAO,IAEzB,MACF,KAAKhH,EAAW,OACduM,EAAU,GAAGA,CAAO,KAAKvF,CAAO,GAChC,KACR,CAGE,OAAOuF,CACT,CAOO,SAASC,GAAyBC,EAAsBC,EAAuBJ,GAAoB,CACxG,GAAIG,EAAqB,SAAW,EAAG,OAGvC,MAAME,EAAsB,CAAE,EAC9B,UAAWC,KAASH,EAAsB,CACxC,MAAMI,EAAM,GAAGD,EAAM,QAAQ,IAAIA,EAAM,SAAW,EAAE,GAC/CD,EAAoBE,CAAG,IAC1BF,EAAoBE,CAAG,EAAI,CACzB,SAAUD,EAAM,SAChB,QAASA,EAAM,QACf,OAAQ,CAAE,EACV,GAAIA,EAAM,EACX,GAEHD,EAAoBE,CAAG,EAAE,OAAO,KAAKD,EAAM,KAAK,CACpD,CAEE,MAAME,EAAU,OAAO,OAAOH,CAAmB,EACjD,GAAIG,EAAQ,SAAW,GAAKA,EAAQ,CAAC,EAAE,OAAO,SAAW,EAAG,CAE1D,MAAMvK,EAAQuK,EAAQ,CAAC,EACvB,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,yDAA0D,CAC/F,GAAIvK,EAAM,GACV,SAAUmK,EAAqBnK,EAAM,SAAUA,EAAM,OAAO,CAClE,CAAK,CAAC,CACN,KAAS,CAEL,MAAMwK,EAAW,CAAE,EACnB,UAAWxK,KAASuK,EAAS,CAC3B,MAAME,EAAkBN,EAAqBnK,EAAM,SAAUA,EAAM,OAAO,EACpE0K,EAAa1K,EAAM,OAAO,KAAK,IAAI,EACzCwK,EAAS,KAAK,GAAGC,CAAe,KAAKC,CAAU,GAAG,CACxD,CAEI,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,kEAAmE,CACxG,GAAIH,EAAQ,CAAC,EAAE,GACf,SAAUC,EAAS,KAAK,IAAI,CAClC,CAAK,CAAC,CACN,CACA,CAOO,SAASG,GAAetJ,EAAO,CACpC,MAAMwI,EAAYxI,EAAM,WAAa,CAAE,EAEvC,SAAW,CAAC/B,EAAQoG,CAAK,IAAK,OAAO,QAAQmE,CAAS,EACpD,GAAInE,GAAS,MAAM,0BAA0B,MAAO,CAClD,MAAM7F,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,GAAIO,GAAQ,CAACA,EAAK,KAChB,OAAOA,CAEf,CAGE,OAAO,IACT,CAsBO,SAAS+K,GAAkBC,EAAUhL,EAAO,KAAK,KAAM,CAC5D,GAAI,EAACgL,GAAA,MAAAA,EAAU,QAAQ,OAERA,EACZ,IAAIC,GAAM,OAAO,OAAO,IAAIA,CAAE,CAAC,EAC/B,OAAOhB,GAAKA,CAAC,EAET,QAAQA,GAAKA,EAAE,UAAU,GAAM,CAAE,KAAAjK,CAAI,CAAE,CAAC,CACjD,CAkCO,SAASkL,GAAc1J,EAAO,CAEnC,OAAIA,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAc,GAExD,OAAO,QAAQA,EAAM,SAAS,EAClC,KAAK,CAAC,CAAC/B,EAAQoG,CAAK,IAAM,CACzB,MAAM7F,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,OAAOO,GAAQ,CAACA,EAAK,MAAQ6F,GAAS,MAAM,0BAA0B,KAC5E,CAAK,CACL,CAOO,SAASsF,GAAgB3J,EAAO,CAErC,GAAIA,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAO,MAAO,GAE/D,MAAM4J,EAAe,KAAK,OAAO,OACjC,OAAOA,GAAgBA,EAAa,OAAO,KAAKC,GAASA,EAAM,UAAY7J,EAAM,EAAE,CACrF,CAOO,SAAS8J,GAA2BzG,EAAS0G,EAAU,CAE5D,GAAI,CADU,KAAK,OAAO,OACd,OAGZ,MAAMC,EAAS,OAAO,OAAO,WAAW,OAAOvB,GAAC,CdlN3C,IAAAxL,EckN+C,QAAAA,EAAAwL,EAAE,QAAF,YAAAxL,EAAS,MAAOoG,EAAO,EAE3E,UAAWwG,KAASG,EACdD,EAEFF,EAAM,QAAQ,CAAE,cAAe,EAAK,CAAE,EAGtCA,EAAM,QAAS,CAGrB,CAOO,SAASI,GAAMC,EAAI,CACxB,OAAO,IAAI,QAAQrG,GAAW,WAAWA,EAASqG,CAAE,CAAC,CACvD,CAMO,SAASC,IAAoB,Cd5O7B,IAAAlN,Ec6OL,MAAO,GAACA,EAAA,mBAAI,UAAJ,MAAAA,EAAa,WACvB,CAMO,SAASmN,GAAmBC,EAAY,CAC7C,MAAMC,EAAO,SAAS,cAAc,MAAM,EACtCD,EACFC,EAAK,UAAU,IAAI,kBAAkB,EAErCA,EAAK,UAAU,OAAO,kBAAkB,CAE5C,CAQO,SAASC,GAAeC,EAAqBC,EAAgB,CdnQ7D,IAAAxN,EcoQL,MAAMyN,EAAY,CAAE,EAEpB,GAAI,CAACF,GAAuBC,EAAe,OAAS,EAClD,OAAOC,EAGT,MAAMC,EAAiBrO,EAAO,qBAAqBkO,CAAmB,EACtE,GAAI,CAACG,GAAkB,CAACA,EAAe,QACrC,OAAOD,EAIT,MAAME,EAAe,MAAM,KAAKH,CAAc,EAAE,CAAC,EAC3CzK,EAAQ,KAAK,OAAO,IAAI4K,CAAY,EAG1C,GAAID,EAAe,UAAY,QAAS,CAEtC,MAAME,IAAW5N,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAAS,OAAO,MAAM,OAAS,CAAE,EAEjF,SAAW,CAACgM,EAAKlE,CAAQ,IAAK,OAAO,QAAQ8F,CAAQ,EAAG,CACtD,IAAIC,EAAQ7B,EAGZ,GAAIlE,GAAA,MAAAA,EAAU,GAAI,CAEhB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnF+F,GAAQ7F,GAAA,YAAAA,EAAU,OAAQgE,CAClC,MAGQ6B,EAAQ7B,EAAI,QAAQ,WAAY,KAAK,EAAE,QAAQ,KAAM8B,GAAOA,EAAI,YAAa,CAAA,EAAE,KAAM,EAGvFL,EAAU,KAAK,CACb,GAAIzB,EACJ,KAAM6B,EACN,SAAU,EAClB,CAAO,CACP,CAGIJ,EAAU,KAAK,CAACpH,EAAG0H,IAAM1H,EAAE,KAAK,cAAc0H,EAAE,IAAI,CAAC,CACzD,SAEWhL,GAAS2K,EAAe,UAAW,CAC1C,MAAMM,EAAW,QAAQ,MAAM,YAAYjL,EAAO2K,EAAe,SAAS,GAAK,CAAE,EAG3EO,EAAa,OAAO,MAAMP,EAAe,OAAO,EAEtD,SAAW,CAAC1B,EAAKrM,CAAI,IAAK,OAAO,QAAQqO,CAAQ,EAAG,CAClD,IAAIH,EAAQ,GAGRH,EAAe,UAAY,WAAYO,GAAA,MAAAA,EAAajC,KAI/C0B,EAAe,UAAY,cAAeO,GAAA,MAAAA,EAAajC,IAH9D6B,EAAQI,EAAWjC,CAAG,EAAE,MAQxB6B,EAAQlO,EAAK,OAAS,KAAK,KAAK,SAASA,EAAK,MAAQqM,CAAG,GAAKA,EAGhEyB,EAAU,KAAK,CACb,GAAIzB,EACJ,KAAM6B,EACN,SAAU,EAClB,CAAO,CACP,CAGQH,EAAe,UAAY,UAC7BD,EAAU,KAAK,CAACpH,EAAG0H,IAAM1H,EAAE,KAAK,cAAc0H,EAAE,IAAI,CAAC,CAE3D,CAEE,OAAON,CACT,CAKO,MAAMS,EAAN,MAAMA,CAAoB,CAa/B,OAAO,OAAOC,EAAMxJ,EAAS5E,EAAU,CAAA,EAAI,CAEzC,GAAI,CAACA,EAAQ,MAAO,CAClB,GAAG,cAAcoO,CAAI,EAAExJ,CAAO,EAC9B,MACN,CAGQ5E,EAAQ,YACVmO,EAAoB,qBAAqB,KAAKnO,EAAQ,SAAS,EAG3DmO,EAAoB,mBACtB,aAAaA,EAAoB,iBAAiB,EAGpDA,EAAoB,kBAAoB,WAAW,IAAM,CACvDvC,GAAyBuC,EAAoB,oBAAoB,EACjEA,EAAoB,qBAAuB,CAAE,EAC7CA,EAAoB,kBAAoB,IAChD,EAASA,EAAoB,wBAAwB,EAErD,CAOE,OAAO,uBAAuBE,EAAkBC,EAAc,CAC5D,MAAMC,EAAqB,OAAO,QAAQF,CAAgB,EAE1D,GAAIE,EAAmB,SAAW,EAGlC,GAAIA,EAAmB,SAAW,EAAG,CACnC,MAAMC,EAAa,OAAO,OAAOH,CAAgB,EAAE,CAAC,EAC9ChC,EAAamC,EAAW,OAAO,IAAIlI,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,EAC/D,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,4DAA6D,CAClG,SAAUgI,EACV,OAAQjC,EACR,OAAQmC,EAAW,OAAO,IAClC,CAAO,CAAC,CACR,KAAW,CAEL,MAAMC,EAAkBF,EAAmB,IAAI,CAAC,CAACG,EAAU9O,CAAI,IAAM,CACnE,MAAMyM,EAAazM,EAAK,OAAO,IAAI0G,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,EACzD,MAAO,GAAG1G,EAAK,OAAO,IAAI,KAAKyM,CAAU,GACjD,CAAO,EACD,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,8DAA+D,CACpG,SAAUiC,EACV,MAAOC,EAAmB,OAC1B,QAASE,EAAgB,KAAK,IAAI,CAC1C,CAAO,CAAC,CACR,CACA,CAKE,OAAO,cAAe,CAChBN,EAAoB,oBACtB,aAAaA,EAAoB,iBAAiB,EAClDA,EAAoB,kBAAoB,MAE1CA,EAAoB,qBAAuB,CAAE,CACjD,CACA,EA/EEjO,EADWiO,EACJ,uBAAuB,CAAE,GAChCjO,EAFWiO,EAEJ,oBAAoB,MAC3BjO,EAHWiO,EAGJ,2BAA2B,KAH7B,IAAMQ,EAANR,EAuFA,SAASS,GAA0BzI,EAAQ,Cdjb3C,IAAAlG,EckbL,MAAM4O,EAA0B,CAAE,EAC5BC,EAA2B,CAAE,EAEnC,UAAW9L,KAASmD,EAAQ,CAC1B,MAAM4I,IAAK9O,EAAA+C,EAAM,OAAO,WAAW,KAAxB,YAAA/C,EAA4B,QAAS,EAC1C+O,EAAahM,EAAM,OAAO,WAAW,OAAS,CAAE,EAChDiM,EAAYD,EAAW,SAAW,EAClCE,EAAWF,EAAW,SAAW,EAGnCD,GAAM,GAAKE,EAAY,GAAKC,EAAW,EACzCL,EAAwB,KAAK7L,CAAK,EAElC8L,EAAyB,KAAK9L,EAAM,IAAI,CAE9C,CAGE,OAAI8L,EAAyB,OAAS,GACpCH,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,6DAA8D,CAChH,OAAQG,EAAyB,KAAK,IAAI,CAChD,CAAK,CAAC,EAGGD,CACT,CAOO,SAASM,GAA4BhJ,EAAQ,CAClD,MAAMiJ,EAAW,CAAE,EACbC,EAAY,CAAE,EAEpB,UAAWrM,KAASmD,EAAQ,CAC1B,MAAM2E,EAAQwB,GAAetJ,CAAK,EAC9B8H,EACFsE,EAAS,KAAK,CAAE,MAAApM,EAAO,MAAA8H,CAAK,CAAE,EAE9BuE,EAAU,KAAKrM,CAAK,CAE1B,CAEE,MAAO,CAAE,SAAAoM,EAAU,UAAAC,CAAW,CAChC,CCtdO,eAAeC,IAA4B,CAChD,OAAK,KAAK,OAwBH,GAvBgB,MAAM,OAAO,QAAQ,CACxC,MAAO,KAAK,KAAK,SAAS,eAAe,EACzC,QAAS,MAAQ,KAAK,KAAK,SAAS,wCAAwC,EAAI,OAChF,IAAK,IAAM,GACX,GAAI,IAAM,GACV,WAAY,GACZ,QAAS,CACP,QAAS,CAAC,qBAAqB,CACvC,CACA,CAAK,GAKC,MADe,MAAM,KAAK,QAAQ,cAAc,OAAO,CAAC,MAAO,KAAK,OAAO,OAAO,EAAE,CAAC,GACxE,SAAU,EACvBX,EAAoB,OAAO,OAAQ,KAAK,KAAK,SAAS,kDAAkD,CAAC,EAClG,IAGA,EAKb,CAQO,eAAeY,GAA0BC,EAAUC,EAAM,CAC9D,GAAI,CAACA,EAAK,OAAQ,OAAOD,EAEzB,MAAMrJ,EAASqJ,EACZ,IAAI/C,GAAMgD,EAAK,OAAO,IAAIhD,CAAE,CAAC,EAC7B,OAAOzJ,GAASA,CAAK,EAGlB0M,EAAuB,CAAE,EACzBC,EAAyB,IAAI,IAEnC,UAAW3M,KAASmD,EAAQ,CAC1B,MAAMyJ,EAAYH,EAAK,OAAO,oBAAoBzM,EAAM,EAAE,EACtD4M,GAAaA,EAAU,aAAe,OACxCF,EAAqB,KAAK1M,EAAM,IAAI,EACpC2M,EAAuB,IAAI3M,EAAM,EAAE,EAEzC,CAGE,GAAI0M,EAAqB,OAAS,EAchC,GAbe,MAAM,OAAO,QAAQ,CAClC,MAAOD,EAAK,KAAK,SAAS,+CAA+C,EACzE,QAAS,MAAQA,EAAK,KAAK,OAAO,2CAA4C,CAC5E,OAAQC,EAAqB,KAAK,IAAI,CACvC,CAAA,EAAI,OACL,IAAK,IAAM,GACX,GAAI,IAAM,GACV,WAAY,GACZ,QAAS,CACP,QAAS,CAAC,qBAAqB,CACvC,CACA,CAAK,EAYM,CAEL,UAAWrJ,KAAWsJ,EAAwB,CAC5C,MAAMC,EAAYH,EAAK,OAAO,oBAAoBpJ,CAAO,EACrDuJ,GACF,MAAMA,EAAU,OAAO,CAAE,WAAY,IAAI,CAAE,CAErD,CAEM,OAAOJ,CACb,KApBiB,CAEX,MAAMK,EAAcL,EAAS,OAAO/C,GAAM,CAACkD,EAAuB,IAAIlD,CAAE,CAAC,EAGzE,OAAIoD,EAAY,SAAW,GACzBlB,EAAoB,OAAO,OAAQc,EAAK,KAAK,SAAS,4DAA4D,CAAC,EAG9GI,CACb,CAaE,OAAOL,CACT,CftGO,IAAAM,EgBkBQ,MAAMC,GAAN,MAAMA,WAAyB,QAAQ,aAAa,IAAI,2BAA2B,QAAQ,aAAa,IAAI,aAAa,CAAE,CAOxI,YAAY/P,EAAU,GAAI,CACxBG,EAAQ,IAAI,8BAA8B,EAC1C,MAAMH,CAAO,EAqOfE,EAAA,uBAAmBmF,GAAU,CAE3B,GADAlF,EAAQ,IAAI,iBAAiB,EACzB,KAAK,SAAU,OACnB,MAAM6P,EAAO,KAAK,QACbA,IACD3K,EAAM,OAAO,QAAQ,qBAAqB,GAC1C2K,EAAK,SAAS3K,EAAM,MAAM,GAC1BA,EAAM,OAAO,QAAQ,uBAAuB,GAC5CA,EAAM,OAAO,QAAQ,8BAA8B,GACvD,KAAK,MAAO,EAChB,GA5OI,KAAK,eAAiB,IAAI,IAC1B,KAAK,WAAa,KAClB,KAAK,oBAAsB,KAC3B,KAAK,SAAW,GAEhB,KAAK,gBAAkB,KAAK,KAAK,QAAQ/F,EAAO,GAAI,qBAAqB,GAAK,GAG9E,KAAK,8BAA+B,CACxC,CAuBE,MAAM,gBAAgBU,EAAS,CAC7BG,EAAQ,IAAI,iBAAiB,EAC7B,MAAMuF,EAAU,MAAM,MAAM,gBAAgB1F,CAAO,EAG7CmG,EAAS,KAAK,OAAO,SACrBiJ,EAAW,CAAE,EACbC,EAAY,CAAE,EAGdzC,EAAe,KAAK,OAAO,OAEjC,UAAW5J,KAASmD,EAAQ,CAE1B,GAAInD,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAO,SAExD,MAAMiN,EAAY,CAChB,GAAIjN,EAAM,GACV,KAAMA,EAAM,KACZ,KAAMA,EAAM,KACZ,IAAKA,EAAM,IACX,SAAU,KAAK,eAAe,IAAIA,EAAM,EAAE,EAC1C,YAAa,KAAK,eAAeA,CAAK,CACvC,EAGqB,OAAO,QAAQA,EAAM,SAAS,EACjD,KAAK,CAAC,CAAC/B,EAAQoG,CAAK,IAAM,CACzB,MAAM7F,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,OAAOO,GAAQ,CAACA,EAAK,MAAQ6F,GAAS,MAAM,0BAA0B,KAChF,CAAS,EAGD+H,EAAS,KAAKa,CAAS,EAGnBrD,GACsBA,EAAa,OAAO,KAAKC,GAASA,EAAM,UAAY7J,EAAM,EAAE,GAElFqM,EAAU,KAAKY,CAAS,CAIpC,CAGI,MAAMvO,EAAW1C,EAAa,EACxBgM,EAAsBvJ,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EACvEwJ,EAAczJ,EAAa,IAAIC,EAAS,YAAY,GAAG,EAGvDwO,EAAgB,KAAK,aAAe,KAAOd,EAAWC,EACtDc,EAAcD,EAAc,OAAS,GACzCA,EAAc,MAAMlN,GAAS,KAAK,eAAe,IAAIA,EAAM,EAAE,CAAC,EAG1DoN,EAAe,CAAE,EACvB,GAAI,KAAK,eAAe,KAAO,EAC7B,SAAW,CAACnE,EAAKoE,CAAM,IAAK,OAAO,QAAQ/Q,EAAO,oBAAoB,EACpE8Q,EAAa,KAAK,CAChB,GAAInE,EACJ,KAAM,KAAK,KAAK,SAAS,0BAA0BoE,EAAO,IAAI,EAAE,GAAKA,EAAO,MAC5E,SAAUA,EAAO,SAAW,KAC5B,WAAY,CAAC,CAACA,EAAO,QACrB,SAAU,KAAK,sBAAwBpE,CACjD,CAAS,EAKL,MAAMyB,EAAYH,GAAe,KAAK,oBAAqB,KAAK,cAAc,EAE9E,MAAO,CACL,GAAG7H,EACH,OAAQwK,EACR,WAAY,KAAK,WACjB,QAAS,KAAK,aAAe,KAC7B,SAAU,KAAK,aAAe,MAC9B,YAAa,KAAK,WAClB,oBAAAlF,EACA,YAAAE,EACA,YAAAiF,EACA,kBAAmB,KAAK,eAAe,KAAO,EAC9C,aAAAC,EACA,UAAA1C,EACA,UAAW,GACX,aAAc,KAAK,SACnB,gBAAiB,KAAK,eACvB,CACL,CAKE,eAAe1K,EAAO,ChB5JjB,IAAA/C,EAAAsB,EAAA6B,EAAAC,EAAAC,EAAAC,EgB6JHpD,EAAQ,IAAI,gBAAgB,EAC5B,MAAMmQ,EAAStN,EAAM,OACfuN,EAAQ,CAAE,GAGZtQ,EAAAqQ,EAAO,aAAP,MAAArQ,EAAmB,IACrBsQ,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,WAAW,GAAG,KACpC,CAAO,GAIC/O,EAAA+O,EAAO,aAAP,MAAA/O,EAAmB,IACrBgP,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,WAAW,GAAG,KACpC,CAAO,EAIH,MAAME,GAAUnN,GAAAD,EAAAkN,EAAO,aAAP,YAAAlN,EAAmB,QAAnB,YAAAC,EAA0B,GAC1C,OAAImN,GACFD,EAAM,KAAK,CACT,OAAQ,KACR,MAAOC,CACf,CAAO,GAICjN,GAAAD,EAAAgN,EAAO,SAAP,YAAAhN,EAAe,MAAf,MAAAC,EAAoB,SACtBgN,EAAM,KAAK,CACT,OAAQ,MACR,MAAOD,EAAO,OAAO,IAAI,OACjC,CAAO,EAGIC,CACX,CAKE,UAAU7K,EAAS1F,EAAS,CAM1B,GALAG,EAAQ,IAAI,WAAW,EACvB,MAAM,UAAUuF,EAAS1F,CAAO,EAChC,KAAK,iBAAkB,EAGnB,KAAK,gBAAiB,CACxB,MAAMyQ,EAAgB,KAAK,QAAQ,cAAc,iBAAiB,EAC5DC,EAAiB,KAAK,QAAQ,cAAc,YAAY,EAC1DD,GACFA,EAAc,UAAU,IAAI,UAAU,EAEpCC,GACFA,EAAe,UAAU,IAAI,UAAU,CAE/C,CAGI,WAAW,IAAM,CACf,SAAS,iBAAiB,QAAS,KAAK,gBAAiB,EAAI,CAC9D,EAAE,GAAG,EAGN,KAAK,kBAAoB,MAAM,GAAG,eAAgB,KAAK,sBAAsB,KAAK,IAAI,CAAC,CAC3F,CAKE,sBAAsB7D,EAAO8D,EAAY,CACvCxQ,EAAQ,IAAI,uBAAuB,EAE9B,KAAK,WAGN,KAAK,sBAGL,KAAK,qBACP,aAAa,KAAK,mBAAmB,EAGvC,KAAK,oBAAsB,WAAW,IAAM,CAE1C,KAAK,8BAA+B,EAGpC,KAAK,OAAQ,EAEb,KAAK,oBAAsB,IAC5B,EAAE,GAAG,GACV,CAoBE,kBAAmB,ChB/Qd,IAAAF,EAAAsB,EAAA6B,EAAAC,EAAAC,EgBgRHnD,EAAQ,IAAI,kBAAkB,EAE9B,MAAMyQ,EAAO,KAAK,SAGlB3Q,EAAA2Q,EAAK,cAAc,yBAAyB,IAA5C,MAAA3Q,EAA+C,iBAAiB,SAAU,KAAK,sBAAsB,KAAK,IAAI,IAC9GsB,EAAAqP,EAAK,cAAc,sBAAsB,IAAzC,MAAArP,EAA4C,iBAAiB,SAAU,KAAK,qBAAqB,KAAK,IAAI,IAC1G6B,EAAAwN,EAAK,cAAc,oBAAoB,IAAvC,MAAAxN,EAA0C,iBAAiB,SAAU,KAAK,mBAAmB,KAAK,IAAI,IAGtGC,EAAAuN,EAAK,cAAc,qBAAqB,IAAxC,MAAAvN,EAA2C,iBAAiB,QAAS,KAAK,cAAc,KAAK,IAAI,IAGjGC,EAAAsN,EAAK,cAAc,iBAAiB,IAApC,MAAAtN,EAAuC,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,GAGnFsN,EAAK,iBAAiB,YAAY,EAC1C,QAAQC,GAAO,CAClBA,EAAI,iBAAiB,QAAS,KAAK,YAAY,KAAK,IAAI,CAAC,CAC/D,CAAK,EAGDD,EAAK,iBAAiB,QAAQ,EAAE,QAAQ5N,GAAS,CAC/CA,EAAM,iBAAiB,QAAS,KAAK,cAAc,KAAK,IAAI,CAAC,CACnE,CAAK,EAED4N,EAAK,iBAAiB,eAAe,EAAE,QAAQE,GAAa,CAC1DA,EAAU,iBAAiB,QAAS,KAAK,oBAAoB,KAAK,IAAI,CAAC,CAC7E,CAAK,EAGD,MAAMC,EAAwBH,EAAK,cAAc,gBAAgB,EAC7DG,GACFA,EAAsB,iBAAiB,QAAU1L,GAAU,CACzD,MAAM2L,EAAW3L,EAAM,OAAO,QAAQ,IAAI,EAC1C,GAAI2L,GAAYA,EAAS,QAAQ,GAAI,CAEnC,MAAMC,EAAc,CAClB,GAAG5L,EACH,cAAe2L,CAChB,EACD,KAAK,oBAAoBC,CAAW,CAC9C,CACA,CAAO,EAIH,MAAMC,EAAqBN,EAAK,cAAc,aAAa,EACvDM,GACFA,EAAmB,iBAAiB,QAAU7L,GAAU,CACtD,MAAM2L,EAAW3L,EAAM,OAAO,QAAQ,IAAI,EAC1C,GAAI2L,GAAYA,EAAS,QAAQ,GAAI,CAEnC,MAAMC,EAAc,CAClB,GAAG5L,EACH,cAAe2L,CAChB,EACD,KAAK,iBAAiBC,CAAW,CAC3C,CACA,CAAO,CAEP,CAKE,MAAM,sBAAsB5L,EAAO,CACjClF,EAAQ,IAAI,uBAAuB,EACnC,MAAMuB,EAAW1C,EAAa,EACxBmS,EAAU9L,EAAM,OAAO,QAC7B,MAAM5D,EAAa,IAAIC,EAAS,oBAAoB,IAAKyP,CAAO,EAGhEC,GAAY,uBAAuBD,CAAO,CAE9C,CAKE,MAAM,qBAAqB9L,EAAO,CAChClF,EAAQ,IAAI,sBAAsB,EAClC,MAAMuB,EAAW1C,EAAa,EACxBqS,EAAOhM,EAAM,OAAO,QAC1B,MAAM5D,EAAa,IAAIC,EAAS,YAAY,IAAK2P,CAAI,CACzD,CAKE,mBAAmBhM,EAAO,CACxBlF,EAAQ,IAAI,oBAAoB,EAChC,MAAMmR,EAAYjM,EAAM,OAAO,QAC/B,KAAK,oBAAsB,IAEZ,KAAK,aAAe,KACjC,KAAK,OAAO,SAAS,OAAOiB,GAAKoG,GAAcpG,CAAC,CAAC,EACjD,KAAK,OAAO,SAAS,OAAOA,GAAK,CAACoG,GAAcpG,CAAC,GAAKqG,GAAgBrG,CAAC,CAAC,GAEnE,QAAQtD,GAAS,CAClBsO,GACF,KAAK,eAAe,IAAItO,EAAM,EAAE,EAChC8J,GAA2B9J,EAAM,GAAI,EAAI,IAEzC,KAAK,eAAe,OAAOA,EAAM,EAAE,EACnC8J,GAA2B9J,EAAM,GAAI,EAAK,EAElD,CAAK,EAED,WAAW,IAAM,CACf,KAAK,oBAAsB,EAC5B,EAAE,GAAG,EAEN,KAAK,OAAQ,EACb,KAAK,8BAA+B,CACxC,CAKE,cAAcqC,EAAO,CACnBlF,EAAQ,IAAI,eAAe,EAC3BkF,EAAM,eAAgB,EACtB,KAAK,SAAW,CAAC,KAAK,SAGtB,MAAMkM,EAAWlM,EAAM,cACvBkM,EAAS,UAAU,OAAO,kBAAmB,sBAAsB,EACnEA,EAAS,UAAU,IAAI,KAAK,SAAW,kBAAoB,sBAAsB,CACrF,CAKE,MAAM,iBAAiBlM,EAAO,CAC5BlF,EAAQ,IAAI,kBAAkB,EAC9BkF,EAAM,eAAgB,EAGtB,KAAK,gBAAkB,CAAC,KAAK,gBAG7B,MAAM,KAAK,KAAK,QAAQ/F,EAAO,GAAI,sBAAuB,KAAK,eAAe,EAG9E,MAAMmR,EAAgBpL,EAAM,eAAiBA,EAAM,OAAO,QAAQ,iBAAiB,EAC/EoL,GACFA,EAAc,UAAU,OAAO,WAAY,KAAK,eAAe,EAIjE,MAAMC,EAAiB,KAAK,QAAQ,cAAc,YAAY,EAC1DA,GACFA,EAAe,UAAU,OAAO,WAAY,KAAK,eAAe,CAGtE,CAKE,+BAAgC,ChBjb3B,IAAAzQ,EgBkbHE,EAAQ,IAAI,+BAA+B,EAC3C,MAAMqR,IAAmBvR,EAAA,OAAO,SAAP,YAAAA,EAAe,aAAc,CAAE,EACxD,KAAK,eAAe,MAAO,EAE3B,UAAW4M,KAAS2E,EAClB,GAAI3E,EAAM,QACR,KAAK,eAAe,IAAIA,EAAM,MAAM,EAAE,EAElC,KAAK,eAAe,OAAS,GAAG,CAClC,MAAM4E,EAAO/E,GAAcG,EAAM,KAAK,EACtC,KAAK,WAAa4E,EAAO,KAAO,KAC1C,CAIA,CAME,MAAM,YAAYpM,EAAO,ChBvcpB,IAAApF,EgBwcHE,EAAQ,IAAI,aAAa,EACzB,MAAM0Q,EAAMxL,EAAM,cAAc,QAAQ,IACpCwL,IAAQ,KAAK,aAEjB,KAAK,eAAe,MAAO,GAC3B5Q,EAAA,OAAO,SAAP,MAAAA,EAAe,aACf,KAAK,oBAAsB,KAE3B,KAAK,WAAa4Q,EAClB,MAAM,KAAK,OAAQ,EACvB,CAKE,cAAcxL,EAAO,CAEnB,GADAlF,EAAQ,IAAI,eAAe,EACvBkF,EAAM,OAAO,QAAQ,eAAe,EAAG,OAG3C,MAAMgB,EADehB,EAAM,cACE,QAAQ,GACrC,KAAK,sBAAsBgB,CAAO,CACtC,CAKE,oBAAoBhB,EAAO,CACzBlF,EAAQ,IAAI,qBAAqB,EACjCkF,EAAM,gBAAiB,EACvB,MAAMgB,EAAUhB,EAAM,cAAc,QAAQ,GAC5C,KAAK,sBAAsBgB,CAAO,CACtC,CAKE,sBAAsBA,EAAS,CAC7BlG,EAAQ,IAAI,uBAAuB,EAEnC,KAAK,oBAAsB,GAEvB,KAAK,eAAe,IAAIkG,CAAO,GACjC,KAAK,eAAe,OAAOA,CAAO,EAClCyG,GAA2BzG,EAAS,EAAK,IAEzC,KAAK,eAAe,IAAIA,CAAO,EAC/ByG,GAA2BzG,EAAS,EAAI,GAG1C,WAAW,IAAM,CACf,KAAK,oBAAsB,EAC5B,EAAE,GAAG,EAGN,KAAK,OAAQ,EAEb,KAAK,8BAA+B,EACpC,KAAK,sBAAuB,CAChC,CAME,+BAAgC,CAC9BlG,EAAQ,IAAI,+BAA+B,EAE3C,KAAK,OAAQ,CACjB,CAKE,uBAAwB,CACtBA,EAAQ,IAAI,uBAAuB,EACnC,MAAMuR,EAAoB,KAAK,QAAQ,cAAc,oBAAoB,EACnExB,EAAgB,KAAK,aAAe,KAAO,KAAO,MAClDyB,EAAa,KAAK,QAAQ,iBAAiB,IAAIzB,CAAa,4CAA4C,EACxG0B,EAAe,MAAM,KAAKD,CAAU,EAAE,OAAOE,GAAMA,EAAG,OAAO,EAAE,OAErEH,EAAkB,QAAUE,EAAe,GAAKA,IAAiBD,EAAW,OAC5ED,EAAkB,cAAgBE,EAAe,GAAKA,EAAeD,EAAW,MACpF,CAKE,MAAM,oBAAoBtM,EAAO,CAC/B,MAAMyM,EAAczM,EAAM,cACpB0M,EAAcD,EAAY,QAAQ,GAClCE,EAAa1S,EAAO,qBAAqByS,CAAW,EAG1D,GAFA5R,EAAQ,IAAI,sBAAuB,CAAC4R,EAAaD,EAAY,QAASE,CAAU,CAAC,EAE7E,CAACA,EAAY,CACf7R,EAAQ,MAAM,wBAAyB4R,CAAW,EAClD,MACN,CAEQ,KAAK,sBAAwBA,EAC/B,KAAK,oBAAsB,KAE3B,KAAK,oBAAsBA,EAGzBC,EAAW,QACb,MAAM,KAAK,OAAQ,EACV,KAAK,qBACd,KAAK,aAAaD,EAAa,IAAI,CAEzC,CAKE,iBAAiB1M,EAAO,CACtBlF,EAAQ,IAAI,kBAAkB,EAC9B,MAAMiG,EAAUf,EAAM,cAAc,QAAQ,GAC5C,KAAK,aAAa,KAAK,oBAAqBe,CAAO,CACvD,CAOE,kBAAkB6L,EAAkB,CAClC,OAAOA,EAAiB,OAAO5L,GAAW,CACxC,MAAMrD,EAAQ,KAAK,OAAO,IAAIqD,CAAO,EACrC,GAAI,CAACrD,EAAO,MAAO,GACnB,MAAMyO,EAAO/E,GAAc1J,CAAK,EAC1BkP,EAAQ,CAACT,GAAQ9E,GAAgB3J,CAAK,EAE5C,OAAQ,KAAK,aAAe,MAAQyO,GAAU,KAAK,aAAe,OAASS,CACjF,CAAK,CACL,CAME,MAAM,mBAAoB,CAExB,OADgB,MAAM,KAAK,sBAAuB,CAEtD,CAWE,MAAM,sBAAsB/L,EAAQgM,EAAgB/L,EAAS8E,EAAakE,EAAU,ChBnmB/E,IAAAnP,EAAAsB,EAAA6B,EAAAC,EAAAC,EAAAC,EgBomBH,MAAM7B,EAAW1C,EAAa,EACxBgM,EAAsBvJ,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EAG7E,GAAI,CAACwJ,GAAeiH,IAAmB/S,EAAW,OAAQ,CAExD,IAAI6L,EACA,CAAC7L,EAAW,MAAOA,EAAW,IAAI,EAAE,SAAS+S,CAAc,EAC7DlH,EAAc7C,GACL+J,IAAmB/S,EAAW,QACvC6L,EAAc/C,GAEd+C,EAActF,EAEhB,MAAMxC,EAAS,MAAM8H,EAAY,iBAAiB9E,EAAQgM,EAAgB/L,EAAS,CACjF,YAAA8E,EACA,mBAAoBF,CAC5B,CAAO,EACD,OAAA7K,EAAQ,IAAI,wBAAyB,CAACgD,CAAM,CAAC,EAEtCA,CACb,KAAW,CAEL,MAAMA,EAAS,CACb,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACnB,CAAS,EACD,UAAW,GACX,aAAc,GACd,SAAU,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC9C,YAAa,GACb,cAAe,GACf,WAAY,GACZ,YAAa6H,GAAuBoE,EAAS,OAAS,CACvD,EAQD,GALI+C,IAAmB/S,EAAW,aAChC+D,EAAO,OAAS,IAId,CAAC/D,EAAW,MAAOA,EAAW,IAAI,EAAE,SAAS+S,CAAc,GAAKhM,EAAO,OAAS,EAAG,CACrF,MAAMnD,EAAQmD,EAAO,CAAC,EACtB,IAAIiB,EAAiB,KAErB,GAAI+K,IAAmB/S,EAAW,MAAO,CACvC,MAAMuI,GAAQ1H,EAAA+C,EAAM,OAAO,SAAb,YAAA/C,EAAsBmG,GACpCgB,GAAiBO,GAAA,YAAAA,EAAO,YAAWpG,EAAA,OAAO,MAAM,OAAO6E,CAAO,IAA3B,YAAA7E,EAA8B,UAAW,KACtF,SAAmB4Q,IAAmB/S,EAAW,KAAM,CAC7C,MAAMkJ,GAAOlF,EAAAJ,EAAM,OAAO,QAAb,YAAAI,EAAqBgD,GAClCgB,GAAiBkB,GAAA,YAAAA,EAAM,YAAW/E,GAAAD,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuC8C,KAAvC,YAAA7C,EAAiD,UAAW,KACxG,CAEY6D,IACFjE,EAAO,QAAUiE,EAE3B,CAEM,OAAOjE,CACb,CACA,CAUE,MAAM,2BAA2BA,EAAQiM,EAAUC,EAAW8C,EAAgB/L,EAAS,CACrF,MAAM1E,EAAW1C,EAAa,EAGxBuP,EAAqB,CAAA,EACrB6D,EAAsB,CAAA,EAM5B,GALAjS,EAAQ,IAAI,6BAA8B,CAAC,CACzC,OAAAgD,EACA,eAAAgP,EACA,QAAA/L,CACN,CAAK,CAAC,EACEjD,EAAO,YAAa,CACtB,SAAW,CAAE,MAAAH,EAAO,MAAA8H,CAAK,IAAMsE,EAAU,CACvC,GAAI,CAACtE,EAAM,OAAQ,CACdrJ,EAAa,IAAIC,EAAS,yBAAyB,GAAG,GACvDiN,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,mDAAoD,CACtG,OAAQ7D,EAAM,IAC5B,CAAa,CAAC,EAIJsH,EAAoB,KAAKpP,CAAK,EAC9B,QACV,CAEQ,MAAM,KAAK,yBAAyBA,EAAO8H,EAAOqH,EAAgB/L,EAASjD,EAAQ,EAAI,EACvFoL,EAAmB,KAAK,CAAE,MAAAvL,EAAO,MAAA8H,CAAK,CAAE,EAExC,MAAMmC,GAAM,GAAG,CACvB,CAGUsB,EAAmB,OAAS,GAC9B,KAAK,8BAA8BA,EAAoB4D,EAAgB/L,CAAO,CAEtF,MAEMiJ,EAAU,KAAK,GAAGD,EAAS,IAAI,CAAC,CAAE,MAAApM,CAAK,IAAOA,CAAK,CAAC,EAKtD,GAAIoP,EAAoB,OAAS,EAAG,CAClC,MAAMC,EAAgB,CAAE,GAAGlP,EAAQ,WAAY,EAAM,EACrD,MAAM,KAAK,eAAeiP,EAAqBD,EAAgB/L,EAASiM,CAAa,CAC3F,CAGI,GAAIhD,EAAU,OAAS,EAAG,CACxB,MAAMiD,EAAY,CAAE,GAAGnP,CAAQ,EAC/BmP,EAAU,YAAc,GACxBA,EAAU,WAAa,GACvB,MAAM,KAAK,eAAejD,EAAW8C,EAAgB/L,EAASkM,CAAS,CAC7E,CACA,CAOE,MAAM,aAAaP,EAAa3L,EAAS,ChB1uBpC,IAAAnG,EgB2uBHE,EAAQ,IAAI,eAAgB,CAAC4R,EAAa3L,CAAO,CAAC,EAClD,MAAM1E,EAAW1C,EAAa,EACxBiT,EAAmB,MAAM,KAAK,KAAK,cAAc,EACjD/G,EAAczJ,EAAa,IAAIC,EAAS,YAAY,GAAG,EAGvD6Q,EAAgB,KAAK,kBAAkBN,CAAgB,EAC7D,IAAI9L,EAASoM,EACV,IAAI9F,GAAM,KAAK,OAAO,IAAIA,CAAE,CAAC,EAC7B,OAAOzJ,GAASA,CAAK,EAGxB,MAAMgP,EAAa1S,EAAO,qBAAqByS,CAAW,EACpDI,GAAkBlS,GAAA+R,GAAA,YAAAA,EAAY,OAAQD,IAApB,YAAA9R,EAAkC,cAE1D,OAAOkS,EAAc,CACnB,KAAK/S,EAAW,OAEd,GADAgH,EAAU,MAAM,KAAK,kBAAmB,EACpC,CAACA,EAAS,OACd,MACF,KAAKhH,EAAW,WAChB,KAAKA,EAAW,kBAEd,GAAI,CADgB,MAAMkQ,GAA2B,EACnC,OAClB,GAAI,KAAK,OAAQ,CACf,MAAMkD,EAAmB,MAAMjD,GAA0BgD,EAAe,IAAI,EAG5E,GADApS,EAAQ,IAAI,gCAAiC,CAACqS,CAAgB,CAAC,EAC3D,CAACA,EAAiB,OAAQ,OAE9BrM,EAASqM,EACN,IAAI/F,GAAM,KAAK,OAAO,IAAIA,CAAE,CAAC,EAC7B,OAAOzJ,GAASA,CAAK,CAClC,CACQ,MACF,KAAK5D,EAAW,WACd+G,EAAS,MAAMyI,GAA0BzI,CAAM,EAC/C,KAGR,CAEI,GAAI,CAACA,EAAO,OAAQ,CAClBwI,EAAoB,OAAO,OAAQ,0BAA0B,EAC7D,MACN,CAGI,KAAM,CAAE,SAAAS,EAAU,UAAAC,GAAcF,GAA4BhJ,CAAM,EAG5DhD,EAAS,MAAM,KAAK,sBACxBgD,EACAgM,EACA/L,EACA8E,EACAkE,CACD,EACDjP,EAAQ,IAAI,sBAAuB,CAACgD,CAAM,CAAC,EACtCA,IAGL,MAAM,KAAK,2BAA2BA,EAAQiM,EAAUC,EAAW8C,EAAgB/L,CAAO,EAG1F,WAAW,IAAM,KAAK,MAAK,EAAI,GAAG,EACtC,CAYE,MAAM,yBAAyBpD,EAAO8H,EAAOiH,EAAa3L,EAASjD,EAAQsP,EAAuB,GAAO,CACvGtS,EAAQ,IAAI,8BAA+B,CAAC4R,EAAa3L,CAAO,CAAC,EACjE,MAAM1E,EAAW1C,EAAa,EAE9B,IAAIwD,EAAWuP,GAAA,YAAAA,EAAa,cAW5B,GARIvP,IAAapD,EAAW,cAC1BoD,EAAWpD,EAAW,QACboD,IAAapD,EAAW,aACjCoD,EAAWpD,EAAW,KACboD,IAAapD,EAAW,oBACjCoD,EAAWpD,EAAW,YAGpBoD,IAAapD,EAAW,QAAS,CACnC,MAAMsT,EAAS1P,EAAM,OAAO,WAAW,GAEvC,GAAI0P,EAAO,MAAQ,EACjBtM,EAAUsM,EAAO,yBAGI,MAAM,QAAQ,aAAa,IAAI,SAAS,QAAQ,CACnE,OAAQ,CACN,MAAO,KAAK,KAAK,SAAS,4CAA4C,GAAK,wBAC3E,QAAS,CAAC,uBAAuB,CAClC,EACD,SAAU,CACR,MAAO,GACR,EACD,QAAS,MAAM,KAAK,KAAK,OAAO,+CAAgD,CAC9E,MAAO1P,EAAM,IACzB,CAAW,GAAK,EAAE,OACR,MAAO,GACP,YAAa,GACb,IAAK,CACH,MAAO,KAAK,KAAK,SAAS,8CAA8C,GAAK,gBAC7E,KAAM,EACP,EACD,GAAI,CACF,MAAO,KAAK,KAAK,SAAS,QAAQ,GAAK,SACvC,KAAM,EAClB,CACA,CAAS,EAEiB,CAchB,GAAI,CACF7C,EAAQ,IAAI,yCAA0C,CAAC6C,EAAM,IAAI,CAAC,EAClE,MAAM2P,EAAe,MAAM3I,EAAa,qBAAqBhH,CAAK,EAClE7C,EAAQ,IAAI,iCAAkC,CAACwS,CAAY,CAAC,CAC7D,OAAQpI,EAAO,CACdpK,EAAQ,MAAM,sCAAuC,CAACoK,CAAK,CAAC,CACxE,CAGUnE,EAAUpD,EAAM,OAAO,WAAW,GAAG,iBACrC7C,EAAQ,IAAI,4CAA6C,CAAC,CACxD,OAAQ6C,EAAM,OAAO,WAAW,EAC5C,CAAW,CAAC,EAEF2L,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,0CAA2C,CAC7F,MAAO3L,EAAM,IACd,CAAA,GAAK,yBAAyBA,EAAM,IAAI,EAAE,CACrD,KAEU,OAGV,CAEI7C,EAAQ,IAAI,2CAA4C,CAAC,CACvD,SAAAqC,EACA,QAAA4D,EACA,MAAOpD,EAAM,IACnB,CAAK,CAAC,EAGF,MAAM+F,EAAc,CAClB,KAAM,cACN,UAAW,QAAQ,MAAM,SAAU,EACnC,QAAS/F,EAAM,GACf,SAAAR,EACA,QAAA4D,EACA,WAAY,KACZ,kBAAmB,CACjB,GAAGjD,EACH,aAAc,KAAK,KAAK,IACzB,EACD,WAAY,GACZ,eAAgB,MAAM,KAAK,KAAK,KAAK,OAAO,EAAE,IAAIsI,GAAKA,EAAE,EAAE,EAC3D,gBAAiBhK,EAAa,IAAIC,EAAS,kBAAkB,GAAG,CACjE,EAGDP,EAAW,YAAY,oBAAqB2J,EAAM,GAAI/B,CAAW,EAE5D0J,GACH9D,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,qDAAsD,CACxG,OAAQ7D,EAAM,KACd,MAAO9H,EAAM,IACrB,CAAO,CAAC,CAER,CAQE,8BAA8BuL,EAAoB4D,EAAgB/L,EAAS,ChBp7BtE,IAAAnG,EAAAsB,EAAA6B,EAAAC,EAAAC,EgBq7BHnD,EAAQ,IAAI,+BAA+B,EAE3C,MAAMkO,EAAmB,CAAE,EAC3B,SAAW,CAAE,MAAArL,EAAO,MAAA8H,CAAK,IAAMyD,EACxBF,EAAiBvD,EAAM,EAAE,IAC5BuD,EAAiBvD,EAAM,EAAE,EAAI,CAC3B,OAAQA,EACR,OAAQ,CAAA,CACT,GAEHuD,EAAiBvD,EAAM,EAAE,EAAE,OAAO,KAAK9H,CAAK,EAM9C,SAAW,CAACiJ,EAAKoE,CAAM,IAAK,OAAO,QAAQ/Q,EAAO,oBAAoB,EACpE,GAAI+Q,EAAO,OAAS8B,EAElB,MAIJ,MAAMS,EAAcT,EACpB,IAAI7D,EAAe,KAAK,KAAK,SAAS,0BAA0BsE,CAAW,EAAE,GAAKA,EAGlF,GAAIxM,EAAS,CACX,MAAMyM,EAAwBD,EAAY,YAAa,EACvD,GAAIC,IAA0BzT,EAAW,MACvCkP,EAAe,GAAGA,CAAY,OAAKrO,EAAA,OAAO,MAAM,OAAOmG,CAAO,IAA3B,YAAAnG,EAA8B,QAASmG,CAAO,YACxEyM,IAA0BzT,EAAW,aAC9CkP,EAAe,GAAGA,CAAY,OAAK/M,EAAA,OAAO,MAAM,UAAU6E,CAAO,IAA9B,YAAA7E,EAAiC,QAAS6E,CAAO,YAC3EyM,IAA0BzT,EAAW,cAC9CkP,EAAe,GAAGA,CAAY,OAAKlL,EAAA,OAAO,MAAM,UAAUgD,CAAO,IAA9B,YAAAhD,EAAiC,QAASgD,CAAO,YAC3EyM,IAA0BzT,EAAW,KAAM,CAEpD,MAAM2I,GAAWzE,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuC8C,GACxD,GAAI2B,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFuG,EAAe,GAAGA,CAAY,MAAKrG,GAAA,YAAAA,EAAU,OAAQ7B,CAAO,GACtE,MACUkI,EAAe,GAAGA,CAAY,KAAKlI,CAAO,GAEpD,MAAiByM,IAA0BzT,EAAW,SAC9CkP,EAAe,GAAGA,CAAY,KAAKlI,CAAO,GAElD,CAGIuI,EAAoB,uBAAuBN,EAAkBC,CAAY,CAC7E,CASE,MAAM,eAAenI,EAAQ4L,EAAa3L,EAASc,EAAmB,CACpE/G,EAAQ,IAAI,iBAAkB,CAACgG,EAAQ4L,EAAa3L,EAASc,CAAiB,CAAC,EAE/E,UAAWlE,KAASmD,EAClB,MAAM,KAAK,kBAAkBnD,EAAO+O,EAAa3L,EAASc,CAAiB,EAE3E,MAAM+F,GAAM,GAAG,CAErB,CASE,MAAM,kBAAkBjK,EAAO+O,EAAa3L,EAASc,EAAmB,ChBlgCnE,IAAAjH,EAAAsB,EAAA6B,EAAAC,EAAAC,EgBmgCHnD,EAAQ,IAAI,oBAAqB,CAAC4R,EAAa3L,EAASc,CAAiB,CAAC,EAC1E,GAAI,CAEF,MAAM4L,EAAiBf,EAAY,YAAa,EAGhD,IAAIgB,EAAgB3M,EACpB,GAAI0M,IAAmB1T,EAAW,QAAS,CAEzC,MAAMsT,EAAS1P,EAAM,OAAO,WAAW,GACvC,GAAI0P,EAAQ,CAEV,MAAMM,EAAgB,CAAC,KAAM,KAAM,MAAO,MAAO,KAAK,EACtD,UAAWC,KAASD,EAElB,MADkB/S,EAAAyS,EAAOO,CAAK,IAAZ,YAAAhT,EAAe,QAAS,GAC1B,EAAG,CACjB8S,EAAgBE,EAChB,KACd,CAEA,CACQ,GAAI,CAACF,EAAe,CAElB5S,EAAQ,IAAI,4CAA6C,CAAC6C,EAAM,IAAI,CAAC,EACrE2L,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,oBAAqB,CAAE,KAAM3L,EAAM,IAAM,CAAA,CAAC,EAC9F,MACV,CACA,CAGM,MAAMiC,IAAc5B,GAAAD,GAAA7B,EAAA2F,EAAkB,QAAlB,YAAA3F,EAA0B,KAA1B,YAAA6B,EAA8B,OAA9B,YAAAC,EAAoC,cAAe,GAGjE0F,EAAc,CAClB,QAASgK,EACT,OAAQ,CACN,GAAG7L,EACH,YAAajC,EACb,SAAUiC,EAAkB,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC5E,UAAWA,EAAkB,WAAa,GAC1C,aAAcA,EAAkB,cAAgB,GAChD,OAAQA,EAAkB,MACpC,CACO,EAGKP,EAAe,CACnB,UAAW,CAACO,EAAkB,aAAe,CAACA,EAAkB,UACjE,EAGKR,EAAgB,CACpB,SAAUQ,EAAkB,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC5E,OAAQA,EAAkB,cAAgB,EAC3C,EAGKT,IAAanD,EAAA4D,EAAkB,QAAlB,YAAA5D,EAA0B,KAAM,CAAE,EACrDnD,EAAQ,IAAI,iCAAkC,CAACsG,EAAYsC,CAAW,CAAC,EAGvE,MAAMhI,EAAUiJ,EAAa8I,CAAc,EACvC/R,GACFZ,EAAQ,IAAI,8BAA+B,CAACY,CAAO,CAAC,EACpD,MAAMA,EAAQiC,EAAO+F,EAAatC,EAAYE,EAAcD,CAAa,GAEzEiI,EAAoB,OAAO,OAAQ,sBAAsBoD,CAAW,EAAE,CAEzE,OAAQxH,EAAO,CACdpK,EAAQ,MAAM,mBAAoB,CAACoK,CAAK,CAAC,EACzCoE,EAAoB,OAAO,QAAS,KAAK,KAAK,OAAO,+CAAgD,CACnG,MAAO3L,EAAM,IACrB,CAAO,CAAC,CACR,CACA,CAKE,MAAM,SAAShD,EAAS,CACtBG,EAAQ,IAAI,UAAU,EACtB,MAAM,MAAM,SAASH,CAAO,EAG5B,KAAK,eAAe,MAAO,EAC3B,KAAK,oBAAsB,KAG3B,SAAS,oBAAoB,QAAS,KAAK,gBAAiB,EAAI,EAG5D,KAAK,oBACP,MAAM,IAAI,eAAgB,KAAK,iBAAiB,EAChD,KAAK,kBAAoB,MAIvB,KAAK,sBACP,aAAa,KAAK,mBAAmB,EACrC,KAAK,oBAAsB,KAEjC,CAKE,YAAY2I,EAAS,GAAI,CACvB,OAAAxI,EAAQ,IAAI,aAAa,EAElB,IACX,CAME,MAAM,uBAAwB,CAC5B,OAAAA,EAAQ,IAAI,uBAAuB,EAC5B8I,GAAiB,OAAO,CAC7B,QAAS,GACT,SAAU,EAChB,CAAK,CACL,CAME,OAAO,QAAS,CACd9I,EAAQ,IAAI,yBAAyB,EAChC+S,EAAA,KAAKpD,GAIJoD,EAAA,KAAKpD,GAAU,SACjBoD,EAAA,KAAKpD,GAAU,MAAO,GAEtBoD,EAAA,KAAKpD,GAAU,8BAA+B,EAC9CoD,EAAA,KAAKpD,GAAU,OAAO,EAAI,IAP5BqD,GAAA,KAAKrD,EAAY,IAAIC,IACrBmD,EAAA,KAAKpD,GAAU,OAAO,EAAI,EAShC,CACA,EA1nCSA,EAAA,YAAPsD,GALmBrD,GAKZD,EAAY,MAkBnB5P,EAvBmB6P,GAuBZ,kBAAkB,CACvB,GAAI,uBACJ,QAAS,CAAC,oBAAoB,EAC9B,IAAK,MACL,OAAQ,CACN,MAAO,GACP,UAAW,GACX,YAAa,EACd,EACD,SAAU,IACX,GAED7P,EAnCmB6P,GAmCZ,QAAQ,CACb,KAAM,CACJ,SAAU,WAAWzQ,EAAO,EAAE,+BACpC,CACG,GAvCY,IAAM+T,GAANtD,GCXR,MAAMqB,EAAY,CAOvB,OAAO,mBAAmBxK,EAAKgK,EAAM5Q,EAAS,CAC5C,GAAI,CAAC,KAAK,KAAK,MAAQ4G,EAAI,KAAO,OAAQ,OAK1C,MAAM0M,GAHc1C,EAAK,CAAC,GAAKA,GAGE,cAAc,gBAAgB,EAC/D,GAAI,CAAC0C,GAAgBA,EAAa,cAAc,qBAAqB,EACnE,OAIF,MAAM5R,EAAW1C,EAAa,EACxBgM,EAAsBvJ,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EAGvE6R,EAAkB,SAAS,cAAc,GAAG,EAClDA,EAAgB,GAAK,uBACrBA,EAAgB,aAAa,yBAA0B,OAAO,EAC9DA,EAAgB,UAAY,uCAAuCvI,EAAsB,UAAY,EAAE,GACvGuI,EAAgB,MAAQ,KAAK,KAAK,SAAS,yCAAyC,EACpFA,EAAgB,UAAY,wBAAwBvI,EAAsB,GAAK,QAAQ,SAGvF,MAAMwI,EAAuBF,EAAa,cAAc,oBAAoB,EACxEE,EACFA,EAAqB,WAAW,aAAaD,EAAiBC,CAAoB,EAElFF,EAAa,aAAaC,EAAiBD,EAAa,UAAU,EAIpEC,EAAgB,iBAAiB,QAAS,IAAM,CAC9CF,GAAiB,OAAQ,CAC/B,CAAK,CACL,CAME,OAAO,uBAAuBlC,EAAS,CACrC,MAAMsC,EAAO,SAAS,cAAc,yBAAyB,EACzDA,IACFA,EAAK,UAAY,cAActC,EAAU,GAAK,QAAQ,GAE5D,CACA,CChDO,MAAMuC,EAAU,CAUrB,OAAO,YAAa,CAClB,MAAM,KAAKnU,EAAW,KAAM,KAAK,QAAQ,KAAK,IAAI,CAAC,EACnD,MAAM,KAAKA,EAAW,MAAO,KAAK,SAAS,KAAK,IAAI,CAAC,CACzD,CAKE,OAAO,SAAU,CACEP,EAAW,EAC5B,SAAS,KAAK,UAAU,IAAI,cAAc,EAC1CyC,EAAa,iBAAkB,EAC/BL,EAAe,WAAY,EAG3B,KAAK,cAAc7B,EAAW,mBAAoB,KAAK,oBAAoB,KAAK,IAAI,CAAC,CACzF,CAKE,OAAO,UAAW,CAChB,MAAMmC,EAAW1C,EAAa,EACZyC,EAAa,IAAIC,EAAS,UAAU,GAAG,IAEvD,OAAO,MAAM,MAAQ,IAEvB8I,GAAgB,WAAY,EAE5B,KAAK,oBAAqB,EAEtB,KAAK,KAAK,KACZ,KAAK,iBAAkB,GAEvBpJ,EAAe,cAAe,EAC9B,KAAK,qBAAsB,GAE7BgM,GAAmBD,GAAiB,CAAE,CAC1C,CAKE,OAAO,qBAAsB,CAC3B,KAAK,cAAc1N,EAAY,iBAAkB,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAClF,KAAK,cAAcF,EAAW,wBAAyB,KAAK,wBAAwB,KAAK,IAAI,CAAC,EAC9F,KAAK,cAAcA,EAAW,wBAAyB,KAAK,8BAA8B,KAAK,IAAI,CAAC,EACpG,KAAK,cAAcE,EAAY,iCAAkC,KAAK,0BAA0B,KAAK,IAAI,CAAC,EAC1G,KAAK,cAAcA,EAAY,8BAA+B,KAAK,yBAAyB,KAAK,IAAI,CAAC,EACtG,KAAK,cAAcA,EAAY,iBAAkB,KAAK,kBAAkB,KAAK,IAAI,CAAC,CACtF,CAKE,OAAO,kBAAmB,CACxB,KAAK,cAAcF,EAAW,eAAgB,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAG9E,KAAK,MAAM,QAAQiC,GAAQ,CACzB,KAAK,iBAAiBA,CAAI,CAChC,CAAK,CACL,CAEE,OAAO,sBAAuB,CAC5B,KAAK,cAAc/B,EAAY,oBAAqB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACtF,KAAK,cAAcA,EAAY,8BAA+B,KAAK,6BAA6B,KAAK,IAAI,CAAC,EAE1G,KAAK,cAAcA,EAAY,mBAAoB,KAAK,mBAAmB,KAAK,IAAI,CAAC,CAGzF,CAKE,OAAO,kBAAkBe,EAAO2C,EAAQyC,EAAQhB,EAAS,CACnDzB,EAAO,kBAAoB3C,EAAM,OAAS,IAC5CoE,EAAQ,KAAOA,EAAQ,MAAQ,CAAE,EACjCA,EAAQ,KAAK,iBAAmB,GAChCA,EAAQ,KAAK,aAAezB,EAAO,aAEzC,CAKE,OAAO,wBAAwBwQ,EAAa/T,EAAMI,EAASiB,EAAQ,ClB9G9D,IAAAhB,EkB+GH,GAAIL,EAAK,oBAAoBK,EAAAL,EAAK,QAAL,YAAAK,EAAY,QAAS,EAAG,CACnD,MAAM2T,EAAchU,EAAK,cAAgB,KACnCiU,EAAgB,KAAK,KAAK,OAAO,wCAAyC,CAAE,GAAID,EAAa,EAE7FE,EAAgBlU,EAAK,QAAU,GACrCA,EAAK,OAASkU,EAAgB,GAAGA,CAAa,IAAID,CAAa,GAAKA,CAC1E,CACA,CAKE,OAAO,8BAA8BjP,EAAShF,EAAMI,EAASiB,EAAQ,ClB3HhE,IAAAhB,EAAAsB,EkB6HH,KAAItB,EAAAL,EAAK,QAAL,YAAAK,EAAY,QAAS,GAAKL,EAAK,MAAM,CAAC,EACxC,GAAI,CAEF,MAAMqO,EAAWrO,EAAK,MAAM,CAAC,GACzB2B,EAAA0M,EAAS,UAAT,MAAA1M,EAAkB,gBACpB3B,EAAK,OAASqO,EAAS,QAAQ,cAElC,MAAe,CAEtB,CAEA,CAME,OAAO,0BAA0BrH,EAAKgK,EAAMhR,EAAM,ClB9I7C,IAAAK,EkB+IHE,EAAQ,IAAI,sCAAuC,CAAEyG,EAAKhH,CAAI,CAAE,EAGhE,MAAM6H,GAAQxH,EAAA2Q,EAAK,cAAc,eAAe,IAAlC,YAAA3Q,EAAqC,YACnD,GAAIwH,GAASA,EAAM,SAAS,SAAS,EAAG,CACtC,KAAK,sBAAsBb,EAAKgK,EAAMhR,CAAI,EAC1C,MACN,CAGI,GAAIgH,EAAI,sBAAuB,OAG/B,MAAMmN,EAAoBnD,EAAK,iBAAiB,4BAA4B,EAC5EzQ,EAAQ,IAAI,sBAAuB,CAAC4T,EAAkB,MAAM,CAAC,EAE7D,IAAIC,EAAe,GACnBD,EAAkB,QAAQ,CAACE,EAAOnP,IAAU,ClBhKzC,IAAA7E,EAAAsB,EAAA6B,EAAAC,EAAAC,EkBkKG,CAAC2Q,EAAM,SAAU5Q,GAAAD,GAAA7B,GAAAtB,EAAA2G,EAAI,SAAJ,YAAA3G,EAAY,QAAZ,YAAAsB,EAAoB,KAApB,YAAA6B,EAAwB,OAAxB,MAAAC,EAA8B,gBAAgBC,EAAAsD,EAAI,SAAJ,MAAAtD,EAAY,mBAC7E2Q,EAAM,MAAQrN,EAAI,OAAO,MAAM,CAAC,EAAE,KAAK,YACvCoN,EAAe,IAGbC,EAAM,OAAS,CAACD,IAElBpN,EAAI,sBAAwB,GAC5BoN,EAAe,GAGf,WAAW,IAAM,ClB7KlB,IAAA/T,EAAAsB,EAAA6B,EkB8KG6Q,EAAM,cAAc,IAAI,MAAM,SAAU,CACtC,QAAS,GACT,WAAY,EACxB,CAAW,CAAC,GAGE7Q,GAAA7B,GAAAtB,EAAA2G,EAAI,SAAJ,YAAA3G,EAAY,QAAZ,YAAAsB,EAAoB,KAApB,MAAA6B,EAAwB,MAC1B,OAAOwD,EAAI,OAAO,MAAM,CAAC,EAAE,KAAK,WAEnC,EAAE,EAAE,EAEb,CAAK,CACL,CAKE,OAAO,iBAAiBpF,EAAM,CACxBA,EAAK,QAAUA,EAAK,KAAO,KAAK,KAAK,IACvCJ,EAAe,0BAA0BI,EAAK,EAAE,CAEtD,CAKE,OAAO,oBAAoBoF,EAAKgK,EAAM5Q,EAAS,CAC7CoR,GAAY,mBAAmBxK,EAAKgK,EAAM5Q,CAAO,CACrD,CAqCE,OAAO,cAAcyK,EAAU1J,EAAS,CACtC,MAAM2J,EAAS,MAAM,GAAGD,EAAU1J,CAAO,EACzC,YAAK,gBAAgB,IAAI,GAAG0J,CAAQ,IAAIC,CAAM,GAAIA,CAAM,EACjDA,CACX,CAKE,OAAO,eAAgB,CACrB,KAAK,gBAAgB,QAAQ,CAACA,EAAQuB,IAAQ,CAC5C,MAAMxB,EAAWwB,EAAI,MAAM,GAAG,EAAE,CAAC,EACjC,MAAM,IAAIxB,EAAUC,CAAM,CAChC,CAAK,EACD,KAAK,gBAAgB,MAAO,CAChC,CAOE,OAAO,aAAaD,EAAU,CAC5B,UAAWwB,KAAO,KAAK,gBAAgB,KAAI,EACzC,GAAIA,EAAI,WAAW,GAAGxB,CAAQ,GAAG,EAC/B,MAAO,GAGX,MAAO,EACX,CAKE,OAAO,mBAAmBtH,EAAQyF,EAAesL,EAAgB,CAI/D,GAHA/T,EAAQ,IAAI,+BAAgC,CAACgD,EAAQyF,EAAesL,CAAc,CAAC,EAG/E/Q,EAAO,OAASA,EAAO,MAAM,OAAS,EAAG,CAE3C,MAAMgR,EAAahR,EAAO,MAAM,CAAC,EAC7BgR,GAAcA,EAAW,MAAQA,EAAW,KAAK,cAC9ChR,EAAO,MAAM,CAAC,EAAE,OACnBA,EAAO,MAAM,CAAC,EAAE,KAAO,CAAE,GAE3BA,EAAO,MAAM,CAAC,EAAE,KAAK,YAAcgR,EAAW,KAAK,aAIrDhR,EAAO,MAAQA,EAAO,MAAM,MAAM,EAAG,CAAC,EAEtChD,EAAQ,IAAI,2BAA4BgD,EAAO,KAAK,CAC1D,CACA,CAKE,OAAO,6BAA6BA,EAAQyF,EAAesL,EAAgB,CACzE/T,EAAQ,IAAI,yCAA0C,CAACgD,EAAQyF,EAAesL,CAAc,CAAC,EAG7F,MAAMlR,EAAQG,EAAO,QACrB,GAAIH,GAASA,EAAM,4BAA6B,CAC9C,GAAI,CAACG,EAAO,OAASA,EAAO,MAAM,SAAW,EAAG,CAC9C,MAAMiR,EAAmBpR,EAAM,wBAAwB,EAAE,EACzDG,EAAO,MAAQiR,EAAiB,OAAS,CAAE,CACnD,CAGUjR,EAAO,MAAM,OAAS,IACnBA,EAAO,MAAM,CAAC,EAAE,OACnBA,EAAO,MAAM,CAAC,EAAE,KAAO,CAAE,GAE3BA,EAAO,MAAM,CAAC,EAAE,KAAK,YAAcH,EAAM,4BAEzC7C,EAAQ,IAAI,+CAAgD,CAAC,CAC3D,MAAO6C,EAAM,4BACb,MAAOG,EAAO,KACxB,CAAS,CAAC,EAGF,OAAOH,EAAM,4BAErB,CACA,CAKE,OAAO,mBAAmBG,EAAQyF,EAAesL,EAAgB,ClBzU5D,IAAAjU,EAAAsB,EkB0UHpB,EAAQ,IAAI,+BAAgC,CAACgD,EAAQyF,EAAesL,CAAc,CAAC,EAInF,MAAMG,GAAS9S,GAAAtB,EAAAkD,EAAO,UAAP,YAAAlD,EAAgB,OAAhB,YAAAsB,EAAsB,QAAQtC,EAAW,oBACxD,GAAIoV,EAAQ,CAGV,GAFAlU,EAAQ,IAAI,6DAA8D,CAACkU,CAAM,CAAC,EAE/EA,EAAO,gBAAkB,IAASA,EAAO,aAAe,IAAQA,EAAO,cAAgB,GAAO,CAC/FlU,EAAQ,IAAI,oDAAqD,CAACkU,CAAM,CAAC,EACzE,MACR,CAGUA,EAAO,aAAYlR,EAAO,WAAakR,EAAO,YAC9CA,EAAO,aAAYlR,EAAO,WAAakR,EAAO,YAC9CA,EAAO,UAAY,SAAWlR,EAAO,QAAUkR,EAAO,SAGtDA,EAAO,YAAWlR,EAAO,UAAY,IACrCkR,EAAO,eAAclR,EAAO,aAAe,IAG3CkR,EAAO,eAEL,CAAClR,EAAO,OAASA,EAAO,MAAM,SAAW,KAC3CA,EAAO,MAAQ,CAAC,CACd,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACrB,CAAW,GAIEA,EAAO,MAAM,CAAC,EAAE,OACnBA,EAAO,MAAM,CAAC,EAAE,KAAO,CAAE,GAE3BA,EAAO,MAAM,CAAC,EAAE,KAAK,YAAckR,EAAO,aAE5ClU,EAAQ,IAAI,mEAAoE,CAACgD,CAAM,CAAC,CAC9F,CACA,CAKE,OAAO,kBAAkBS,EAAUT,EAAQyC,EAAQhB,EAAS,CAI1D,GAHAzE,EAAQ,IAAI,8BAA+B,CAACyD,EAAUT,EAAQyC,EAAQhB,CAAO,CAAC,EAG1E,CAAC,KAAK,KAAK,KAAM,OACrBhB,EAAS,KAAK,UAAU3E,EAAW,kBAAkB,EAGrD,MAAMyC,EAAW1C,EAAa,EAE9B,GAAI,CADoByC,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EACnD,OAGtB,MAAMsB,EAAQY,EAAS,MACvB,GAAI,CAACZ,EAAO,OAEW,OAAO,QAAQA,EAAM,SAAS,EAAE,KAAK,CAAC,CAAC/B,EAAQoG,CAAK,IAAM,CAC/E,MAAM7F,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,OAAOO,GAAQ,CAACA,EAAK,MAAQ6F,GAAS,MAAM,0BAA0B,KAC5E,CAAK,IAIClH,EAAQ,IAAI,kDAAmD,CAAC6C,EAAM,IAAI,CAAC,EAC3E4B,EAAQ,OAAS,GAEvB,CAKE,OAAO,yBAAyBgC,EAAKgK,EAAMhR,EAAM,ClBvZ5C,IAAAK,EAAAsB,EkB8ZH,GANApB,EAAQ,IAAI,qCAAsC,CAACyG,CAAG,CAAC,EAGnD,GAAC3G,EAAA2G,EAAI,SAAJ,MAAA3G,EAAY,gBAAiB,GAACsB,EAAAqF,EAAI,SAAJ,MAAArF,EAAY,UAG3CqF,EAAI,oBAAqB,OAG7B,MAAM0N,EAAgB1D,EAAK,cAAc,wBAAwB,EACjE,GAAI,CAAC0D,EAAe,OAEpB,MAAMC,EAAkBD,EAAc,MAChCE,EAAgB5N,EAAI,OAAO,QAG7B2N,IAAoBC,IAEtB5N,EAAI,oBAAsB,GAG1B,WAAW,IAAM,CACf,MAAM6N,EAAc,IAAI,MAAM,SAAU,CACtC,QAAS,GACT,WAAY,EACtB,CAAS,EACDH,EAAc,cAAcG,CAAW,CACxC,EAAE,EAAE,EAEX,CAKE,OAAO,sBAAsB7N,EAAKgK,EAAMhR,EAAM,ClB1bzC,IAAAK,EAAAsB,EAAA6B,EAAAC,EAAAC,EkB4bH,MAAMmE,GAAQxH,EAAA2Q,EAAK,cAAc,eAAe,IAAlC,YAAA3Q,EAAqC,YACnD,GAAI,CAACwH,GAAS,CAACA,EAAM,SAAS,SAAS,EAAG,OAE1C,MAAMzE,GAAQzB,EAAAqF,EAAI,SAAJ,YAAArF,EAAY,QAC1B,GAAI,CAACyB,EAAO,OAEZ7C,EAAQ,IAAI,kCAAmC,CAAC,CAC9C,IAAAyG,EACA,MAAO5D,EAAM,KACb,GAAIA,EAAM,OAAO,WAAW,EAClC,CAAK,CAAC,EAGF,MAAM0P,EAAS1P,EAAM,OAAO,WAAW,GACjC0R,EAAgB,CAAE,EAGxB,UAAWC,KAAO,OAAO,OAAO3R,EAAM,SAAW,CAAA,CAAE,EAAG,CACpD,MAAMiQ,EAAQ0B,EAAI,OAAO,QACnBC,EAAUD,EAAI,OAAO,OACrBE,EAASF,EAAI,OAAO,aAAe,EACnCG,EAAcF,EAAUC,EAE9B,GAAIC,EAAc,EAAG,CAEnB,MAAMC,EAAWL,EAAc,KAAKM,GAAKA,EAAE,eAAiB/B,CAAK,EAC7D8B,GACFA,EAAS,WAAaD,EACtBC,EAAS,QAAQ,KAAKJ,EAAI,IAAI,GAE9BD,EAAc,KAAK,CACjB,aAAczB,EACd,UAAW6B,EACX,IAAKF,EACL,QAAS,CAACD,EAAI,IAAI,CAC9B,CAAW,CAEX,CACA,CAGI,GAAID,EAAc,OAAS,EAAG,CAE5B,MAAMO,EAAiBrE,EAAK,cAAc,WAAW,EACrD,GAAI,CAACqE,EAAgB,OAGrB,MAAMC,IAAe5R,GAAAD,GAAAD,EAAAwD,EAAI,OAAO,QAAX,YAAAxD,EAAmB,KAAnB,YAAAC,EAAuB,UAAvB,YAAAC,EAAgC,eAAgBoP,EAAO,iBAGtEyC,EAAe;AAAA;AAAA,mBAER,KAAK,KAAK,SAAS,eAAe,CAAC;AAAA;AAAA,cAExCT,EAAc,IAAIpL,GAAO;AAAA,+BACRA,EAAI,YAAY,KAAKA,EAAI,eAAiB4L,EAAe,WAAa,EAAE;AAAA,kBACrF5L,EAAI,YAAY,KAAKA,EAAI,SAAS,IAAI,KAAK,KAAK,SAAS,iBAAiB,CAAC,OAAOA,EAAI,QAAQ,KAAK,IAAI,CAAC;AAAA;AAAA,aAE7G,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,QAMX8L,EAAiBH,EAAe,cAAc,aAAa,EACjE,GAAIG,EAAgB,CAClBA,EAAe,mBAAmB,cAAeD,CAAY,EAG7D,MAAME,EAAWzE,EAAK,cAAc,mBAAmB,EACvDyE,GAAA,MAAAA,EAAU,iBAAiB,SAAU,MAAOhQ,GAAU,ClBlgBvD,IAAApF,EAAAsB,EAAA6B,EkBmgBG,MAAMkS,EAAWjQ,EAAM,OAAO,OAG1B9D,GAAAtB,EAAA2G,EAAI,OAAO,QAAX,YAAA3G,EAAmB,KAAnB,MAAAsB,EAAuB,UACzBqF,EAAI,OAAO,MAAM,CAAC,EAAE,QAAQ,aAAe0O,GAI7C,MAAMC,EAASvS,EAAM,OAAO,UAAU,IAAI,IACpCwS,EAAa,WAAWF,CAAQ,MAAMC,CAAM,IAElD,IAAInS,EAAAwD,EAAI,OAAO,QAAX,MAAAxD,EAAmB,GAAI,CACzBwD,EAAI,OAAO,MAAM,CAAC,EAAE,QAAU4O,EAG9B,MAAM/U,EAAO,IAAI,OAAO,KAAK,QAAQ+U,EAAYxS,EAAM,aAAa,EACpE,MAAMvC,EAAK,SAAS,CAAC,MAAO,EAAK,CAAC,EAClCmG,EAAI,OAAO,MAAM,CAAC,EAAInG,CAClC,CAGUmG,EAAI,OAAO,EAAI,EAEfzG,EAAQ,IAAI,+BAAgC,CAAC,CAC3C,SAAAmV,EACA,WAAAE,EACA,OAAAD,CACZ,CAAW,CAAC,CACZ,EACA,CACA,CACA,CACA,CAjhBErV,EALWwT,GAKJ,kBAAkB,IAAI,KCIxB,MAAM+B,EAAgB,CAK3B,aAAa,cAAc1M,EAAa,CnB3BnC,IAAA9I,EmB6BH,GADAE,EAAQ,IAAI,gBAAiB,CAAC4I,CAAW,CAAC,EACtC,KAAK,KAAK,KAAM,OAEpB,MAAM/F,EAAQ,KAAK,OAAO,IAAI+F,EAAY,OAAO,EAC7C,CAAC/F,GAAS,CAACA,EAAM,UAIjB+F,EAAY,mBACZ9I,EAAA8I,EAAY,iBAAZ,YAAA9I,EAA4B,QAAS,GACrC,KAAK,KAAK,QAAQ,OAAS,GAC7BsM,GAAkBxD,EAAY,cAAc,EAG9C4F,EAAoB,OAAO,OAAQ,GAAI,CACrC,MAAO,GACP,UAAW,CACT,MAAO3L,EAAM,KACb,SAAU+F,EAAY,SACtB,QAASA,EAAY,QACrB,GAAIA,EAAY,kBAAkB,cAAgB,IAC1D,CACA,CAAK,EAED0M,GAAgB,yBAAyBzS,EAAO+F,CAAW,EAC/D,CAOE,aAAa,yBAAyB/F,EAAO+F,EAAa,CnB5DrD,IAAA9I,EAAAsB,EAAA6B,EAAAC,EAAAC,EmB6DHnD,EAAQ,IAAI,2BAA4B,CAAC6C,EAAO+F,CAAW,CAAC,EAC5D5I,EAAQ,IAAI,4CAA6C,CACvD,qBAAsB4I,EAAY,kBAClC,2BAA4BA,EAAY,kBAAkB,MAC1D,+BAA+B9I,EAAA8I,EAAY,kBAAkB,QAA9B,YAAA9I,EAAsC,GACrE,oCAAoCmD,GAAA7B,EAAAwH,EAAY,kBAAkB,QAA9B,YAAAxH,EAAsC,KAAtC,YAAA6B,EAA0C,IACpF,CAAK,EAED,GAAI,CAEF,MAAMS,GAAqBR,EAAA0F,EAAY,WAAZ,YAAA1F,EAAsB,cAG3CoD,IAAanD,EAAAyF,EAAY,kBAAkB,QAA9B,YAAAzF,EAAsC,KAAM,CAC7D,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACV,EAKKqD,EAAe,CACnB,UAAW,EAHY,KAAK,KAAK,KAAOoC,EAAY,WAAa,GAIlE,EAGKrC,EAAgB,CACpB,SAAUqC,EAAY,kBAAkB,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EACxF,OAAQ,EACT,EAGK2M,EAAqB,CACzB,QAAS3M,EAAY,QACrB,WAAYA,EAAY,WACxB,OAAQA,EAAY,iBASrB,EAED5I,EAAQ,IAAI,2BAA4B,CAACuV,EAAoBjP,CAAU,CAAC,EAGxE,MAAM1F,EAAUiJ,EAAanG,CAAkB,EAC3C9C,EACF,MAAMA,EAAQiC,EAAO0S,EAAoBjP,EAAYE,EAAcD,CAAa,GAEhFvG,EAAQ,KAAK,mCAAmC0D,CAAkB,EAAE,EACpE8K,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,+CAAgD,CAClG,MAAO3L,EAAM,MAAQ,eAC/B,CAAS,CAAC,EAEL,OAAQuH,EAAO,CACdpK,EAAQ,MAAM,gCAAiC,CAACoK,CAAK,CAAC,EACtDoE,EAAoB,OAAO,QAAS,KAAK,KAAK,OAAO,+CAAgD,CACnG,MAAO3L,EAAM,MAAQ,eAC7B,CAAO,CAAC,CACR,CACA,CACA,CCnHO,MAAM2S,CAAK,CAKhB,OAAO,MAAM,CACXxU,EAAW,WAAWwU,EAAK,mBAAmB,EAC9CjC,GAAU,WAAY,CAC1B,CAGE,OAAO,eAAgB,CACrB,OAAOtS,EAAe,cAAe,CACzC,CAEE,OAAO,kBAAkBH,EAAQK,EAAY,CAC3CF,EAAe,kBAAkBH,EAAQK,CAAU,CACvD,CAME,aAAa,kBAAkByH,EAAa,CAC1C,OAAO0M,GAAgB,cAAc1M,CAAW,CACpD,CAKE,OAAO,qBAAsB,CAC3B5H,EAAW,aAAahC,GAAa,cAAewW,EAAK,aAAa,EACtExU,EAAW,aAAahC,GAAa,kBAAmBwW,EAAK,iBAAiB,EAC9ExU,EAAW,aAAahC,GAAa,kBAAmBwW,EAAK,iBAAiB,CAClF,CACA,CCzCAA,EAAK,KAAM"}