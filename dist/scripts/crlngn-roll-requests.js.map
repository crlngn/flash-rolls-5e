{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Hooks.mjs","../../src/constants/General.mjs","../../src/components/LogUtil.mjs","../../src/constants/Settings.mjs","../../src/components/SettingsUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/RollInterceptor.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  RENDER_SIDEBAR_TAB: \"renderSidebarTab\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheck\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrow\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheck\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrow\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cRoll That For Me`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", requestType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", requestType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", requestType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", requestType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", requestType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", requestType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" }, // Recharge rolls\n\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" }, // D20 test\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" }, // Short rest\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" }, // Long rest\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: \"abilityCheck\", label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: \"savingThrow\", label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SKILL: { name: \"skill\", label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: \"tool\", label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: \"concentration\", label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: \"initiativeDialog\", label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: \"deathSave\", label: \"Death Save\", subList: null, actorPath: '' },\n  CUSTOM: { name: \"custom\", label: \"Custom Roll\", subList: null, actorPath: '' },\n  // HIT_DIE: { name: \"hitDie\", label: \"Hit Die\", subList: null, actorPath: '' }\n}\n\n/**\n * Module configuration object\n * @constant\n * @type {Object}\n */\nexport const MODULE = {\n  ID: MODULE_ID,\n  ROLL_REQUEST_OPTIONS: ROLL_REQUEST_OPTIONS\n}\n","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debug-mode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      // If settings aren't available yet, check bypassSettings\n      if (bypassSettings || LogUtil.debugOn) {\n        console.log(...DEBUG_TAG, ref, ...data);\n      }\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n}","export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    skipDialogs: {\n      tag: \"skip-dialogs\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    rollInterceptionEnabled: {\n      tag: \"roll-interception-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n      LogUtil.log(\"Registering... \",[entry]);\n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined || SettingsUtil.get(setting.tag)===null){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n      LogUtil.log(\"registerSettings\",[setting.tag, SettingsUtil.get(setting.tag)]);\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n      LogUtil.log(\"GET Setting\", [selectedSetting, setting]);\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n    LogUtil.log(\"Setting\",[settingName, selectedSetting]);\n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n      LogUtil.log(\"Unable to change setting\",[settingName, selectedSetting]);\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsEnabled(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsEnabled(newValue){\n    const requestsIcon = document.querySelector(\"#chat-controls .chat-control-icon.roll-requests-icon\");\n    if(!requestsIcon){ return; }\n    \n    if(newValue){\n      requestsIcon.classList.add(\"active\");\n    }else{\n      requestsIcon.classList.remove(\"active\");\n    }\n  }\n}\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      LogUtil.log(`Attempting to register module...`);\n\n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n        LogUtil.log(`SocketUtil | Module registered`, [SocketUtil.socket]);\n      } catch (e) {\n          LogUtil.log(`Problem registering module`, [e]);\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n      LogUtil.log(`SocketUtil - Registered callback`, [SocketUtil.socket, name]);\n    } else {\n      LogUtil.log(`SocketUtil - Failed to register callback (socket not initialized)`, [SocketUtil.socket, name]);\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log(`SocketUtil - sendMessage`, [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as GM.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute for all clients.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    if (!SocketUtil.socket) {\n        LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as user.\");\n        return;\n    }\n\n    if(userId === game.user.id){\n      LogUtil.log(\"SocketUtil - Preventing recursive call\", [userId]);\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        LogUtil.log(\"SocketUtil - Preventing recursive call\", [executionKey]);\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n        const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n        LogUtil.log(\"SocketUtil - Executed as user.\", [resp]);\n        return resp;\n    } catch (error) {\n        LogUtil.log(\"SocketUtil - Error executing as user\", [error]);\n        return null;\n    } finally {\n        // Always clean up, even if there was an error\n        SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    LogUtil.log(\"ROLLS DATA\", [data, data.subject]);\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { MODULE } from '../constants/General.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { Main } from './Main.mjs';\n\n/**\n * Roll Requests Menu Application\n * Extends Foundry's ApplicationV2 with Handlebars support to provide a menu interface for GMs to request rolls from players\n */\nexport default class RollRequestsMenu extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2) {\n  constructor(options = {}) {\n    super(options);\n    \n    // Track selected actors and current state\n    this.selectedActors = new Set();\n    this.currentTab = 'pc'; // 'pc' or 'npc'\n    this.selectedRequestType = null;\n  }\n\n  static DEFAULT_OPTIONS = {\n    id: 'crlngn-requests-menu',\n    classes: ['roll-requests-menu'],\n    tag: 'div',\n    window: {\n      frame: false,\n      resizable: false,\n      minimizable: false\n    },\n    position: null\n  };\n\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/requests-menus.hbs`\n    }\n  };\n\n  /**\n   * Prepare data for the template\n   */\n  async _prepareContext(options) {\n    const context = await super._prepareContext(options);\n    \n    // Get all actors and separate by ownership\n    const actors = game.actors.contents;\n    const pcActors = [];\n    const npcActors = [];\n    \n    // Get current scene to check for NPC tokens\n    const currentScene = game.scenes.active;\n    \n    for (const actor of actors) {\n      // Skip non-character actors\n      if (actor.type !== 'character' && actor.type !== 'npc') continue;\n      \n      const actorData = {\n        id: actor.id,\n        uuid: actor.uuid,\n        name: actor.name,\n        img: actor.img,\n        selected: this.selectedActors.has(actor.id),\n        crlngnStats: this._getActorStats(actor)\n      };\n      \n      // Check if owned by a player (not GM)\n      const isPlayerOwned = Object.entries(actor.ownership)\n        .some(([userId, level]) => {\n          const user = game.users.get(userId);\n          return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        });\n      \n      if (isPlayerOwned) {\n        pcActors.push(actorData);\n      } else {\n        // For NPCs, only include if they have a token in the current scene\n        if (currentScene) {\n          const hasTokenInScene = currentScene.tokens.some(token => token.actorId === actor.id);\n          if (hasTokenInScene) {\n            npcActors.push(actorData);\n          }\n        }\n      }\n    }\n    \n    // Get current settings\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Check if all actors in current tab are selected\n    const currentActors = this.currentTab === 'pc' ? pcActors : npcActors;\n    const selectAllOn = currentActors.length > 0 && \n      currentActors.every(actor => this.selectedActors.has(actor.id));\n    \n    // Build request types array for template\n    const requestTypes = [];\n    if (this.selectedActors.size > 0) {\n      for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n        requestTypes.push({\n          id: key,\n          name: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${option.name}`) || option.label,\n          rollable: option.subList == null,\n          hasSubList: !!option.subList\n        });\n      }\n    }\n    \n    // Build roll types array based on selected request type\n    const rollTypes = [];\n    if (this.selectedRequestType && this.selectedActors.size > 0) {\n      const selectedOption = MODULE.ROLL_REQUEST_OPTIONS[this.selectedRequestType];\n      if (selectedOption && selectedOption.subList) {\n        // Get first selected actor as reference for available options\n        const firstActorId = Array.from(this.selectedActors)[0];\n        const actor = game.actors.get(firstActorId);\n        \n        // Special handling for tools - show all available tools\n        if (selectedOption.subList === 'tools') {\n          // Get all tools from CONFIG.DND5E.tools or enrichmentLookup\n          const allTools = CONFIG.DND5E.enrichmentLookup?.tools || CONFIG.DND5E.tools || {};\n          \n          for (const [key, toolData] of Object.entries(allTools)) {\n            let label = key;\n            \n            // Use enrichmentLookup to get tool UUID and then fetch the name\n            if (toolData?.id) {\n              // Get the tool name using Trait.getBaseItem\n              const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n              label = toolItem?.name || key;\n            }\n            // Fallback - format the key\n            else {\n              label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n            }\n            \n            rollTypes.push({\n              id: key,\n              name: label,\n              rollable: true\n            });\n          }\n          \n          // Sort tools alphabetically by name\n          rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n        }\n        // For other types, use actor data\n        else if (actor && selectedOption.actorPath) {\n          const rollData = foundry.utils.getProperty(actor, selectedOption.actorPath) || {};\n          \n          // Check if we should use CONFIG.DND5E for enrichment\n          const configData = CONFIG.DND5E[selectedOption.subList];\n          \n          for (const [key, data] of Object.entries(rollData)) {\n            let label = '';\n            \n            // For skills, use CONFIG.DND5E.skills for full names\n            if (selectedOption.subList === 'skills' && configData?.[key]) {\n              label = configData[key].label;\n            }\n            // For abilities (saving throws), use the label from data\n            else if (selectedOption.subList === 'abilities' && configData?.[key]) {\n              label = configData[key].label;\n            }\n            // Default fallback\n            else {\n              label = data.label || game.i18n.localize(data.name || key) || key;\n            }\n            \n            rollTypes.push({\n              id: key,\n              name: label,\n              rollable: true\n            });\n          }\n          \n          // Sort skills alphabetically by name\n          if (selectedOption.subList === 'skills') {\n            rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n          }\n        }\n      }\n    }\n    \n    return {\n      ...context,\n      actors: currentActors,\n      currentTab: this.currentTab,\n      isPCTab: this.currentTab === 'pc',\n      isNPCTab: this.currentTab === 'npc',\n      selectedTab: this.currentTab,\n      rollRequestsEnabled,\n      skipDialogs,\n      selectAllOn,\n      hasSelectedActors: this.selectedActors.size > 0,\n      requestTypes,\n      rollTypes,\n      showNames: true // You can make this configurable later\n    };\n  }\n\n  /**\n   * Get formatted stats for an actor\n   */\n  _getActorStats(actor) {\n    const system = actor.system;\n    const stats = [];\n    \n    // HP\n    if (system.attributes?.hp) {\n      stats.push({\n        abbrev: 'HP',\n        value: system.attributes.hp.value\n      });\n    }\n    \n    // AC\n    if (system.attributes?.ac) {\n      stats.push({\n        abbrev: 'AC',\n        value: system.attributes.ac.value\n      });\n    }\n    \n    // Spell DC\n    if (system.attributes?.spelldc) {\n      stats.push({\n        abbrev: 'DC',\n        value: system.attributes.spelldc\n      });\n    }\n    \n    // Passive Perception\n    if (system.skills?.prc?.passive) {\n      stats.push({\n        abbrev: 'PP',\n        value: system.skills.prc.passive\n      });\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Called after the application is rendered\n   */\n  _onRender(context, options) {\n    super._onRender(context, options);\n    this._attachListeners();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachListeners() {\n    LogUtil.log('Attaching listeners');\n    \n    const html = this.element;\n    \n    // Settings toggles\n    html.querySelector('#crlngn-requests-toggle')?.addEventListener('change', this._onToggleRollRequests.bind(this));\n    html.querySelector('#crlngn-skip-dialogs')?.addEventListener('change', this._onToggleSkipDialogs.bind(this));\n    html.querySelector('#crlngn-actors-all')?.addEventListener('change', this._onToggleSelectAll.bind(this));\n    \n    // Tab switching\n    const tabs = html.querySelectorAll('.actor-tab');\n    LogUtil.log('Found tabs:', [tabs.length]);\n    tabs.forEach(tab => {\n      tab.addEventListener('click', this._onTabClick.bind(this));\n    });\n    \n    // Actor selection - handle clicks on actor rows or select buttons\n    html.querySelectorAll('.actor').forEach(actor => {\n      actor.addEventListener('click', this._onActorClick.bind(this));\n    });\n    \n    html.querySelectorAll('.actor-select').forEach(selectBtn => {\n      selectBtn.addEventListener('click', this._onActorSelectClick.bind(this));\n    });\n    \n    // Request type selection - use event delegation for dynamic content\n    const requestTypesContainer = html.querySelector('.request-types');\n    if (requestTypesContainer) {\n      requestTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem) {\n          this._onRequestTypeClick(event);\n        }\n      });\n    }\n    \n    // Roll type selection - use event delegation for dynamic content\n    const rollTypesContainer = html.querySelector('.roll-types');\n    if (rollTypesContainer) {\n      rollTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem) {\n          event.currentTarget = listItem; // Set currentTarget for the handler\n          this._onRollTypeClick(event);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle roll requests toggle\n   */\n  async _onToggleRollRequests(event) {\n    const SETTINGS = getSettings();\n    const enabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, enabled);\n    \n    // Update the icon in the chat controls\n    Main.updateRollRequestsIcon(enabled);\n    \n    LogUtil.log('Roll requests enabled:', [enabled]);\n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleSkipDialogs(event) {\n    const SETTINGS = getSettings();\n    const skip = event.target.checked;\n    await SettingsUtil.set(SETTINGS.skipDialogs.tag, skip);\n    LogUtil.log('Skip dialogs:', [skip]);\n  }\n\n  /**\n   * Handle select all toggle\n   */\n  _onToggleSelectAll(event) {\n    const selectAll = event.target.checked;\n    \n    // Get the current actors based on the active tab\n    const actors = this.currentTab === 'pc' ? \n      game.actors.contents.filter(a => this._isPlayerOwned(a)) :\n      game.actors.contents.filter(a => !this._isPlayerOwned(a) && this._hasTokenInScene(a));\n    \n    // Update selection for all visible actors\n    actors.forEach(actor => {\n      if (selectAll) {\n        this.selectedActors.add(actor.id);\n      } else {\n        this.selectedActors.delete(actor.id);\n      }\n    });\n    \n    // Re-render to update UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    LogUtil.log('Select all:', [selectAll, 'for', this.currentTab]);\n  }\n  \n  /**\n   * Check if actor is player owned\n   */\n  _isPlayerOwned(actor) {\n    // Skip non-character actors\n    if (actor.type !== 'character' && actor.type !== 'npc') return false;\n    \n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n  \n  /**\n   * Check if actor has token in current scene\n   */\n  _hasTokenInScene(actor) {\n    // Skip non-character actors\n    if (actor.type !== 'character' && actor.type !== 'npc') return false;\n    \n    const currentScene = game.scenes.active;\n    return currentScene && currentScene.tokens.some(token => token.actorId === actor.id);\n  }\n\n  /**\n   * Handle tab click\n   */\n  async _onTabClick(event) {\n    const tab = event.currentTarget.dataset.tab;\n    LogUtil.log('Tab clicked:', [tab, this.currentTab]);\n    if (tab === this.currentTab) return;\n    \n    this.currentTab = tab;\n    await this.render();\n    LogUtil.log('Switched to tab:', [tab]);\n  }\n\n  /**\n   * Handle click on actor row\n   */\n  _onActorClick(event) {\n    // Ignore if clicking on the select button itself\n    if (event.target.closest('.actor-select')) return;\n    \n    const actorElement = event.currentTarget;\n    const actorId = actorElement.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Handle click on actor select button\n   */\n  _onActorSelectClick(event) {\n    event.stopPropagation(); // Prevent triggering the actor row click\n    const actorId = event.currentTarget.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Toggle actor selection state\n   */\n  _toggleActorSelection(actorId) {\n    if (this.selectedActors.has(actorId)) {\n      this.selectedActors.delete(actorId);\n    } else {\n      this.selectedActors.add(actorId);\n    }\n    \n    // Re-render to update the UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    this._updateSelectAllState();\n    LogUtil.log('Actor selected:', [actorId, this.selectedActors.has(actorId)]);\n  }\n\n  /**\n   * Update request types visibility based on actor selection\n   */\n  _updateRequestTypesVisibility() {\n    // Since we're now controlling visibility through template data,\n    // we need to re-render when actor selection changes\n    this.render();\n  }\n\n  /**\n   * Update select all checkbox state\n   */\n  _updateSelectAllState() {\n    const selectAllCheckbox = this.element.querySelector('#crlngn-actors-all');\n    const currentActors = this.currentTab === 'pc' ? 'pc' : 'npc';\n    const checkboxes = this.element.querySelectorAll(`.${currentActors}-actors .actor-item input[type=\"checkbox\"]`);\n    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;\n    \n    selectAllCheckbox.checked = checkedCount > 0 && checkedCount === checkboxes.length;\n    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n  }\n\n  /**\n   * Handle request type click\n   */\n  async _onRequestTypeClick(event) {\n    const requestItem = event.currentTarget;\n    const requestType = requestItem.dataset.id;\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    \n    if (!rollOption) {\n      LogUtil.error('Unknown request type:', requestType);\n      return;\n    }\n    \n    this.selectedRequestType = requestType;\n    \n    // If this type has a sublist, re-render to show roll types\n    if (rollOption.subList) {\n      await this.render();\n    } else {\n      // Direct roll without sublist\n      this._triggerRoll(requestType, null);\n    }\n    \n    LogUtil.log('Request type selected:', requestType);\n  }\n\n  // Note: _populateRollTypes method removed as we now handle this in _prepareContext\n\n  /**\n   * Handle roll type click\n   */\n  _onRollTypeClick(event) {\n    LogUtil.log('Roll type clicked!', event.currentTarget);\n    const rollKey = event.currentTarget.dataset.id;\n    LogUtil.log('Roll type selected:', rollKey);\n    this._triggerRoll(this.selectedRequestType, rollKey);\n  }\n\n  /**\n   * Trigger the roll (placeholder for now)\n   */\n  _triggerRoll(requestType, rollKey) {\n    const SETTINGS = getSettings();\n    const selectedActorIds = Array.from(this.selectedActors);\n    LogUtil.log('Roll triggered!', {\n      actors: selectedActorIds,\n      requestType,\n      rollKey,\n      skipDialogs: SettingsUtil.get(SETTINGS.skipDialogs.tag)\n    });\n    \n    // Close the menu after triggering\n    this.close();\n  }\n\n  /**\n   * Clean up when closing\n   */\n  async _onClose(options) {\n    await super._onClose(options);\n    \n    // Reset state\n    this.selectedActors.clear();\n    this.selectedRequestType = null;\n  }\n\n  /**\n   * Override render positioning to use CSS instead of inline styles\n   */\n  setPosition(position={}) {\n    // Don't set any inline position styles - let CSS handle it\n    return this;\n  }\n}","import { HOOKS_DND5E } from '../constants/Hooks.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { MODULE_ID } from '../constants/General.mjs';\n\n/**\n * Handles intercepting D&D5e rolls on the GM side and redirecting them to players\n */\nexport class RollInterceptor {  \n  /**\n   * @type {Set<string>} - Set of registered hook IDs for cleanup\n   */\n  static registeredHooks = new Set();\n  \n  /**\n   * Initialize the roll interceptor\n   */\n  static initialize() {\n    LogUtil.log('RollInterceptor.initialize', ['Called, checking if user is GM', game.user.isGM]);\n    \n    // Only initialize for GM users\n    if (!game.user.isGM) return;\n    \n    LogUtil.log('RollInterceptor.initialize', ['Initializing roll interceptor for GM']);\n    this.registerHooks();\n  }\n  \n  /**\n   * Register all necessary hooks for roll interception\n   */\n  static registerHooks() {\n    // Always register hooks so they can be toggled via settings without reload\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, this._handlePreRoll.bind(this, 'ability'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, this._handlePreRoll.bind(this, 'save'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SKILL_V2, this._handlePreRoll.bind(this, 'skill'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_TOOL_V2, this._handlePreRoll.bind(this, 'tool'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._handlePreRoll.bind(this, 'attack'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._handlePreRoll.bind(this, 'damage'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE, this._handlePreRoll.bind(this, 'initiative'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, this._handlePreRoll.bind(this, 'death'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._handlePreRoll.bind(this, 'hitDie'));\n    \n    LogUtil.log('RollInterceptor.registerHooks', ['Registered roll interception hooks']);\n  }\n  \n  /**\n   * Helper to register a hook and track it for cleanup\n   * @param {string} hookName \n   * @param {Function} handler \n   */\n  static _registerHook(hookName, handler) {\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.add({ hookName, hookId });\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterHooks() {\n    for (const { hookName, hookId } of this.registeredHooks) {\n      Hooks.off(hookName, hookId);\n    }\n    this.registeredHooks.clear();\n    LogUtil.log('RollInterceptor.unregisterHooks', ['Unregistered all hooks']);\n  }\n  \n  /**\n   * Handle pre-roll hooks to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Object} config - Roll configuration object\n   * @param {Object} dialog - Dialog options\n   * @param {Object} message - Message options\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRoll(rollType, config, dialog, message) {\n    // Only intercept on GM side\n    if (!game.user.isGM) return;\n    \n    // Check if roll interception is enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    if (!rollInterceptionEnabled) return;\n    \n    // Extract actor from the config\n    // For D&D5e v2 hooks: config.subject can be an Activity (which has .actor) or the Actor itself\n    const actor = config.subject?.actor || config.subject || config.actor;\n    if (!actor || actor.constructor.name !== 'Actor5e') {\n      LogUtil.log('RollInterceptor._handlePreRoll', ['No valid Actor5e found in roll config', config]);\n      return;\n    }\n    \n    // Check if the actor is owned by a player (not the GM)\n    const owner = this._getActorOwner(actor);\n    if (!owner || owner.id === game.user.id) {\n      // Actor is owned by GM or has no owner, allow normal roll\n      return;\n    }\n    \n    // Check if the owner is online\n    if (!owner.active) {\n      ui.notifications.warn(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.playerOffline', { player: owner.name }));\n      return false; // Prevent the roll\n    }\n    \n    LogUtil.log('RollInterceptor._handlePreRoll', ['Intercepting GM roll for player character', { \n      rollType, \n      actorId: actor.id, \n      actorName: actor.name,\n      ownerId: owner.id,\n      ownerName: owner.name \n    }]);\n    \n    // For now, send the request immediately without showing dialog to GM\n    // TODO: Implement GM configuration dialog in Phase 1.2\n    this._sendRollRequest(actor, owner, rollType, config);\n    \n    // Prevent the normal roll\n    return false;\n  }\n  \n  /**\n   * Show configuration dialog to GM before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showConfigurationDialog(actor, owner, rollType, config, dialog, message) {\n    try {\n      LogUtil.log('RollInterceptor._showConfigurationDialog', ['Showing dialog', { rollType, dialog: dialog.cls.name }]);\n      \n      // Create a wrapper function that will be called instead of the normal roll\n      const rollWrapper = async (finalConfig) => {\n        LogUtil.log('RollInterceptor._showConfigurationDialog', ['Dialog submitted with config', finalConfig]);\n        // Send the configured roll request to the player\n        this._sendRollRequest(actor, owner, rollType, finalConfig);\n        // Return a fake roll to satisfy the dialog\n        return new Roll(\"1d20\").evaluate({async: false});\n      };\n      \n      // Replace the roll method in config with our wrapper\n      const modifiedConfig = {\n        ...config,\n        _rollMethod: rollWrapper,\n        configured: false // Force dialog to show\n      };\n      \n      // Create and render the dialog\n      const DialogClass = dialog.cls;\n      const rollDialog = new DialogClass(modifiedConfig, dialog.options);\n      \n      // Render the dialog\n      const result = await rollDialog.render(true);\n      \n    } catch (error) {\n      LogUtil.log('RollInterceptor._showConfigurationDialog', ['Error showing configuration dialog', error]);\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n\n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  static _getActorOwner(actor) {\n    // Find the first active player who owns this actor\n    const ownership = actor.ownership || {};\n    \n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Send a roll request to the player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   */\n  static _sendRollRequest(actor, owner, rollType, config) {\n    const SETTINGS = getSettings();\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Extract the roll key based on roll type\n    let rollKey = null;\n    switch (rollType) {\n      case 'ability':\n      case 'save':\n        rollKey = config.ability;\n        break;\n      case 'skill':\n        rollKey = config.skill;\n        break;\n      case 'tool':\n        rollKey = config.tool;\n        break;\n      case 'attack':\n      case 'damage':\n        if (config.subject?.item) {\n          rollKey = config.subject.item.id;\n        }\n        break;\n      case 'hitDie':\n        rollKey = config.denomination;\n        break;\n    }\n    \n    // Clean up config to remove non-serializable properties\n    const cleanConfig = {\n      advantage: config.advantage || false,\n      disadvantage: config.disadvantage || false,\n      situational: config.situational || 0,\n      parts: config.parts || [],\n      rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      elvenAccuracy: config.elvenAccuracy || false,\n      halflingLucky: config.halflingLucky || false,\n      reliableTalent: config.reliableTalent || false,\n      minimum: config.minimum,\n      maximize: config.maximize,\n      critical: config.critical,\n      fumble: config.fumble,\n      targetValue: config.targetValue,\n      fastForward: config.fastForward || false,\n      chatMessage: config.chatMessage !== false,\n      flavor: config.flavor,\n      title: config.title,\n      dialogOptions: config.dialogOptions,\n      messageData: config.messageData\n    };\n    \n    // Remove undefined values\n    Object.keys(cleanConfig).forEach(key => {\n      if (cleanConfig[key] === undefined) {\n        delete cleanConfig[key];\n      }\n    });\n    \n    // Build the request data according to Phase 1 spec\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      config: cleanConfig,\n      skipDialog: skipDialogs,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    // Send request to player via socket\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    // Show notification to GM\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent', { \n      player: owner.name,\n      actor: actor.name \n    }));\n  }\n}","import { HOOKS_CORE } from \"../constants/Hooks.mjs\"; \nimport { LogUtil } from \"./LogUtil.mjs\"; \nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\nimport { RollInterceptor } from \"./RollInterceptor.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  static diceConfig = {};\n  static playerDiceConfigs = {};\n  static rollRequestsMenu = null;\n  static SOCKET_CALLS = {\n    receiveDiceConfig: \"receiveDiceConfig\",\n    getDiceConfig: \"getDiceConfig\",\n    handleRollRequest: \"handleRollRequest\"\n  };\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    // Initialize socketlib\n    SocketUtil.initialize(Main.registerSocketCalls);\n    Hooks.once(HOOKS_CORE.INIT, () => { \n      const SETTINGS = getSettings();\n      LogUtil.log(\"Initiating module...\", [], true);\n      SettingsUtil.registerSettings();\n      Main.setDiceConfig();\n      \n      // Register sidebar tab hook to add chat control\n      Hooks.on(HOOKS_CORE.RENDER_SIDEBAR_TAB, Main.addChatControl);\n    });\n\n    Hooks.once(HOOKS_CORE.READY, () => {\n      LogUtil.log(\"Core Ready!!\", [ui?.sidebar, ui?.sidebar?._collapsed], true);\n      const SETTINGS = getSettings();\n      \n      var isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n      if(isDebugOn){CONFIG.debug.hooks = true};\n      \n      // Initialize RollInterceptor for all users\n      RollInterceptor.initialize();\n      \n      if(game.user.isGM){\n        Hooks.on(HOOKS_CORE.USER_CONNECTED, Main.onUserConnected);\n        // Only run this on the GM client\n        game.users.forEach(user => {\n          Main.onUserConnected(user);\n        });\n        Main.checkSideBar(!ui?.sidebar?._collapsed);\n      }else{\n        Main.getDiceConfig();\n      }\n    });\n  }\n\n  /**\n   * Adds or removes the sidebar-expanded class based on the isExpanded parameter\n   * @param {boolean} isExpanded \n   */\n  static checkSideBar = (isExpanded) => {\n    const body = document.querySelector(\"body\");\n    if(isExpanded){\n      body.classList.add(\"sidebar-expanded\");\n    }else{\n      body.classList.remove(\"sidebar-expanded\");\n    }\n  }\n\n  /**\n   * Request dice configuration from the connected user\n   * @param {*} user \n   * @returns \n   */\n  static onUserConnected(user) {\n    // Request dice configuration from the connected user\n    if (user.active && user.id !== game.user.id) {\n      LogUtil.log(\"onUserConnected\", [user]);\n      SocketUtil.execForUser(Main.SOCKET_CALLS.getDiceConfig, user.id);\n    }\n  }\n\n  static setDiceConfig(){\n    if(!game.user) return;\n    const clientSettings = game.settings.storage.get(\"client\"); \n    Main.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    LogUtil.log(`getDiceConfig`, [Main.diceConfig]);\n    return Main.diceConfig;\n  }\n  \n  // Add the getDiceConfig method that will be called on the player's client\n  static getDiceConfig() { \n    if(!game.user) return;\n    Main.setDiceConfig();\n    \n    if(game.user.isGM) {\n      SocketUtil.execForGMs(Main.SOCKET_CALLS.receiveDiceConfig, game.user.id, Main.diceConfig);\n      return;\n    }\n  }\n\n  // Add the receiveDiceConfig method that will be called on the GM's client\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId===game.user.id){ // for GM or own user\n      // Store the dice configuration for this user\n      if (!Main.playerDiceConfigs) Main.playerDiceConfigs = {};\n      Main.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n      \n      LogUtil.log(`Received dice configuration from user ${userId}`, [Main.playerDiceConfigs]);\n    }\n  }\n\n  /**\n   * Handle roll request from GM on player side\n   * @param {Object} requestData - The roll request data\n   */\n  static async handleRollRequest(requestData) {\n    // Only handle on player side\n    if (game.user.isGM) return;\n    \n    LogUtil.log(\"handleRollRequest\", [\"Received roll request\", requestData]);\n    \n    // Get the actor\n    const actor = game.actors.get(requestData.actorId);\n    if (!actor) {\n      LogUtil.log(\"handleRollRequest\", [\"Actor not found\", requestData.actorId]);\n      return;\n    }\n    \n    // Check if the user owns this actor\n    if (!actor.isOwner) {\n      LogUtil.log(\"handleRollRequest\", [\"User does not own actor\", requestData.actorId]);\n      return;\n    }\n    \n    // Apply GM targets if configured\n    if (requestData.preserveTargets && \n        requestData.targetTokenIds?.length > 0 && \n        game.user.targets.size === 0) {\n      // Set targets to match GM's\n      const tokens = requestData.targetTokenIds\n        .map(id => canvas.tokens.get(id))\n        .filter(t => t);\n      tokens.forEach(t => t.setTarget(true, {user: game.user}));\n    }\n    \n    // Show notification to player\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived', {\n      gm: requestData.config.requestedBy || 'GM',\n      rollType: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${requestData.rollType}`)\n    }));\n    \n    // Execute the requested roll\n    Main._executeRequestedRoll(actor, requestData);\n  }\n\n  /**\n   * Execute a roll based on the request data\n   * @param {Actor} actor \n   * @param {Object} requestData \n   */\n  static async _executeRequestedRoll(actor, requestData) {\n    try {\n      // Apply GM config as defaults\n      const config = {\n        ...requestData.config,\n        isRollRequest: true // Custom flag\n      };\n      \n      // Control dialog display based on skipDialog setting\n      // In D&D5e 4.x, dialog.configure controls whether to show the dialog\n      if (requestData.skipDialog) {\n        config.dialog = { configure: false };\n      }\n      \n      switch (requestData.rollType) {\n        case 'ability':\n          await actor.rollAbilityCheck(requestData.rollKey, config);\n          break;\n        case 'save':\n          await actor.rollSavingThrow(requestData.rollKey, config);\n          break;\n        case 'skill':\n          await actor.rollSkill(requestData.rollKey, config);\n          break;\n        case 'tool':\n          await actor.rollTool(requestData.rollKey, config);\n          break;\n        case 'attack':\n          if (requestData.rollKey) {\n            const item = actor.items.get(requestData.rollKey);\n            if (item) await item.rollAttack(config);\n          }\n          break;\n        case 'damage':\n          if (requestData.rollKey) {\n            const item = actor.items.get(requestData.rollKey);\n            if (item) await item.rollDamage(config);\n          }\n          break;\n        case 'initiative':\n          await actor.rollInitiative(config);\n          break;\n        case 'death':\n          await actor.rollDeathSave(config);\n          break;\n        case 'hitDie':\n          await actor.rollHitDie(requestData.rollKey, config);\n          break;\n      }\n    } catch (error) {\n      LogUtil.log(\"_executeRequestedRoll\", [\"Error executing roll\", error]);\n      ui.notifications.error(game.i18n.localize('CRLNGN_ROLL_REQUESTS.notifications.rollError'));\n    }\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(Main.SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(Main.SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    SocketUtil.registerCall(Main.SOCKET_CALLS.handleRollRequest, Main.handleRollRequest);\n  }\n\n  /**\n   * Add the roll request icon to chat controls\n   * @param {SidebarTab} app - The sidebar tab application\n   * @param {jQuery} html - The rendered HTML\n   * @param {Object} options - Render options\n   */\n  static addChatControl(app, html, options) {\n    // Only add to chat tab for GM users\n    if (!game.user.isGM || app.id !== \"chat\") return;\n    \n    LogUtil.log(\"Adding chat control for chat tab\");\n    \n    // Get the HTML element from jQuery object\n    const htmlElement = html[0] || html;\n    \n    // Find the chat controls container\n    const chatControls = htmlElement.querySelector(\"#chat-controls\");\n    \n    if (!chatControls) {\n      LogUtil.log(\"Could not find #chat-controls\");\n      return;\n    }\n    \n    // Check if icon already exists\n    if (chatControls.querySelector('.roll-requests-icon')) {\n      return;\n    }\n    \n    // Get current settings to determine initial state\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Create the roll request icon\n    const rollRequestIcon = document.createElement('a');\n    rollRequestIcon.id = \"crlngn-requests-icon\";\n    rollRequestIcon.setAttribute(\"data-tooltip-direction\", \"RIGHT\");\n    rollRequestIcon.className = `chat-control-icon roll-requests-icon${rollRequestsEnabled ? ' active' : ''}`;\n    rollRequestIcon.title = game.i18n.localize('CRLNGN_ROLLS.ui.menus.rollRequestsTitle');\n    rollRequestIcon.innerHTML = `<i class=\"fas fa-bolt${rollRequestsEnabled ? '' : '-slash'}\"></i>`;\n    \n    // Find the first .chat-control-icon (the d20 dice icon)\n    const firstChatControlIcon = chatControls.querySelector('.chat-control-icon');\n    \n    if (firstChatControlIcon) {\n      // Insert before the d20 dice icon\n      firstChatControlIcon.parentNode.insertBefore(rollRequestIcon, firstChatControlIcon);\n    } else {\n      // If no chat-control-icon found, append to chat controls\n      chatControls.appendChild(rollRequestIcon);\n    }\n    \n    // Add click listener\n    rollRequestIcon.addEventListener(\"click\", Main.toggleRollRequestsMenu);\n    \n    LogUtil.log(\"Added roll requests icon to chat controls\");\n  }\n\n  /**\n   * Toggle the roll requests menu open/closed\n   */\n  static toggleRollRequestsMenu() {\n    if (!Main.rollRequestsMenu) {\n      Main.rollRequestsMenu = new RollRequestsMenu();\n      Main.rollRequestsMenu.render(true);\n    } else {\n      // Toggle visibility of existing menu\n      if (Main.rollRequestsMenu.rendered) {\n        Main.rollRequestsMenu.close();\n        LogUtil.log(\"Closed roll requests menu\");\n      } else {\n        Main.rollRequestsMenu.render(true);\n        LogUtil.log(\"Opened roll requests menu\");\n      }\n    }\n  }\n\n  /**\n   * Update the roll requests icon based on enabled state\n   */\n  static updateRollRequestsIcon(enabled) {\n    const icon = document.querySelector('#crlngn-requests-icon i');\n    if (icon) {\n      icon.className = `fas fa-bolt${enabled ? '' : '-slash'}`;\n    }\n  }\n\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\n// Initialize the module\nMain.init();\n"],"names":["HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","MODULE_ID","DEBUG_TAG","ROLL_REQUEST_OPTIONS","MODULE","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","__publicField","LogUtil","SETTING_INPUT","SETTING_SCOPE","getSettings","SettingsUtil","SETTINGS","entry","setting","settingObj","value","settingName","moduleName","selectedSetting","newValue","requestsIcon","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","e","name","func","callback","handler","parameters","userId","executionKey","resp","error","SocketUtil","RollRequestsMenu","context","actors","pcActors","npcActors","currentScene","actor","actorData","level","user","token","rollRequestsEnabled","skipDialogs","currentActors","selectAllOn","requestTypes","key","option","rollTypes","selectedOption","firstActorId","allTools","toolData","label","toolItem","str","a","b","rollData","configData","_b","_c","_d","_e","system","stats","html","tabs","tab","selectBtn","requestTypesContainer","event","rollTypesContainer","listItem","enabled","Main","skip","selectAll","actorId","selectAllCheckbox","checkboxes","checkedCount","cb","requestType","rollOption","rollKey","selectedActorIds","position","RollInterceptor","hookName","hookId","rollType","config","dialog","message","owner","modifiedConfig","finalConfig","DialogClass","ownership","cleanConfig","requestData","t","_Main","isDebugOn","clientSettings","diceConfig","id","item","app","chatControls","rollRequestIcon","firstChatControlIcon","icon","isExpanded","body"],"mappings":"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"}