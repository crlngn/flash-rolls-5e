{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Settings.mjs","../../src/constants/General.mjs","../../src/constants/Hooks.mjs","../../src/components/LogUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/DiceConfigUtil.mjs","../../src/components/SettingsUtil.mjs","../../src/components/ActivityUtil.mjs","../../src/components/GMRollConfigDialog.mjs","../../src/components/RollInterceptor.mjs","../../src/components/helpers/Helpers.mjs","../../src/components/helpers/LocalRollHandlers.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/SidebarUtil.mjs","../../src/components/HooksUtil.mjs","../../src/components/helpers/RollHandlers.mjs","../../src/components/RollRequestUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    skipDialogs: {\n      tag: \"skip-dialogs\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    rollInterceptionEnabled: {\n      tag: \"roll-interception-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    showOfflineNotifications: {\n      tag: \"show-offline-notifications\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cFlash Rolls 5e`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const SOCKET_CALLS = {\n  receiveDiceConfig: \"receiveDiceConfig\",\n  getDiceConfig: \"getDiceConfig\",\n  handleRollRequest: \"handleRollRequest\"\n};\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", requestType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", requestType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", requestType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", requestType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", requestType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", requestType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" }, // Recharge rolls\n\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" }, // D20 test\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" }, // Short rest\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" }, // Long rest\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\n/**\n * Roll types used throughout the module\n * @constant\n * @type {Object}\n */\nexport const ROLL_TYPES = {\n  ABILITY: \"ability\",\n  ABILITY_CHECK: \"abilitycheck\",\n  SAVE: \"save\",\n  SAVING_THROW: \"savingthrow\",\n  SKILL: \"skill\",\n  TOOL: \"tool\",\n  CONCENTRATION: \"concentration\",\n  ATTACK: \"attack\",\n  DAMAGE: \"damage\",\n  INITIATIVE: \"initiative\",\n  INITIATIVE_DIALOG: \"initiativedialog\",\n  DEATH_SAVE: \"deathsave\",\n  HIT_DIE: \"hitDie\",\n  ITEM_SAVE: \"itemSave\",\n  CUSTOM: \"custom\",\n  HEALING: \"healing\",\n  FORMULA: \"formula\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: ROLL_TYPES.ABILITY_CHECK, label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: ROLL_TYPES.SAVING_THROW, label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SKILL: { name: ROLL_TYPES.SKILL, label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: ROLL_TYPES.TOOL, label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: ROLL_TYPES.CONCENTRATION, label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: ROLL_TYPES.INITIATIVE_DIALOG, label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: ROLL_TYPES.DEATH_SAVE, label: \"Death Save\", subList: null, actorPath: '' },\n  CUSTOM: { name: ROLL_TYPES.CUSTOM, label: \"Custom Roll\", subList: null, actorPath: '' },\n  // HIT_DIE: { name: \"hitDie\", label: \"Hit Die\", subList: null, actorPath: '' }\n}\n\n/**\n * Module configuration object\n * @constant\n * @type {Object}\n */\nexport const MODULE = {\n  ID: MODULE_ID,\n  ROLL_REQUEST_OPTIONS: ROLL_REQUEST_OPTIONS\n}\n","/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  RENDER_SIDEBAR_TAB: \"renderSidebarTab\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheckV2\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrowV2\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheckV2\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrowV2\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_CONFIGURE_INITIATIVE: \"dnd5e.preConfigureInitiative\",\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE_DIALOG_V2: \"dnd5e.preRollInitiativeDialogV2\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_BUILD_ROLL_CONFIG: \"dnd5e.postBuildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debug-mode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      // If settings aren't available yet, check bypassSettings\n      if (bypassSettings || LogUtil.debugOn) {\n        console.log(...DEBUG_TAG, ref, ...data);\n      }\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n\n  /**\n   * Logs with automatic method name detection\n   * Creates a logging function that automatically includes the class and method name\n   * @param {Object} classInstance - The class instance (use 'this' for instance methods, or the class itself for static methods)\n   * @param {string} methodName - The method name\n   * @returns {Function} A logging function that includes the method name\n   * @example\n   * // In a class method:\n   * const log = LogUtil.method(this, 'myMethod');\n   * log('some data', [data1, data2]);\n   * \n   * // In a static method:\n   * const log = LogUtil.method(MyClass, 'myStaticMethod');\n   * log('some data', [data1, data2]);\n   */\n  static method(classInstance, methodName) {\n    const className = classInstance.constructor?.name || classInstance.name || 'Unknown';\n    const fullMethodName = `${className}.${methodName}`;\n    \n    return (ref = \"\", data = [], bypassSettings = false) => {\n      const fullRef = ref ? `${fullMethodName} - ${ref}` : fullMethodName;\n      this.log(fullRef, data, bypassSettings);\n    };\n  }\n\n  /**\n   * Decorator function to automatically log method entry\n   * @param {Function} method - The method to wrap\n   * @param {string} className - The class name\n   * @param {string} methodName - The method name\n   * @returns {Function} The wrapped method\n   * @example\n   * // Define once at class level:\n   * static _getRollTitle = LogUtil.traced(\n   *   function(rollType, rollKey, actor) {\n   *     // method implementation\n   *   },\n   *   'GMRollConfigDialog',\n   *   '_getRollTitle'\n   * );\n   */\n  static traced(method, className, methodName) {\n    return function(...args) {\n      LogUtil.log(`${className}.${methodName}`, ['called with args:', args]);\n      return method.apply(this, args);\n    };\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    const log = LogUtil.method(SocketUtil, 'initialize');\n    log('initializing socket', [callbackFunc]);\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n\n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n      } catch (e) {\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    const log = LogUtil.method(SocketUtil, 'registerCall');\n    log('registering call', [name]);\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n    } else {\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    const log = LogUtil.method(SocketUtil, 'sendMessage');\n    log('sending message', [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    const log = LogUtil.method(SocketUtil, 'execForGMs');\n    log('executing for GMs', [handler, ...parameters]);\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    const log = LogUtil.method(SocketUtil, 'execForUser');\n    log('executing for user', [handler, userId, ...parameters]);\n    if (!SocketUtil.socket) {\n        return;\n    }\n\n    if(userId === game.user.id){\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n        const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n        return resp;\n    } catch (error) {\n        return null;\n    } finally {\n        // Always clean up, even if there was an error\n        SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    const log = LogUtil.method(SocketUtil, 'serializeForTransport');\n    log('serializing for transport', [data, hasRolls]);\n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    const log = LogUtil.method(SocketUtil, 'deserializeFromTransport');\n    log('deserializing from transport', [data, hasRolls]);\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { SocketUtil } from './SocketUtil.mjs';\n\n/**\n * Utility class for managing dice configurations across users\n */\nexport class DiceConfigUtil {\n  /**\n   * @type {Object} Current user's dice configuration\n   */\n  static diceConfig = {};\n  \n  /**\n   * @type {Object} All player dice configurations (GM only)\n   */\n  static playerDiceConfigs = {};\n  \n  /**\n   * Initialize the dice configuration for current user\n   */\n  static initialize() {\n    this.setDiceConfig();\n  }\n  \n  /**\n   * Set dice configuration from client settings\n   * @returns {Object} The dice configuration\n   */\n  static setDiceConfig() {\n    if (!game.user) return {};\n    \n    const clientSettings = game.settings.storage.get(\"client\");\n    this.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Get the current user's dice configuration\n   * @returns {Object} The dice configuration\n   */\n  static getDiceConfig() {\n    if (!game.user) return {};\n    \n    // Ensure we have the latest configuration\n    this.setDiceConfig();\n    \n    // If GM, send config to GMs via socket\n    if (game.user.isGM) {\n      this._sendDiceConfigToGMs();\n    }\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Send dice configuration to all GMs\n   * @private\n   */\n  static _sendDiceConfigToGMs() {\n    SocketUtil.execForGMs('receiveDiceConfig', game.user.id, this.diceConfig);\n  }\n  \n  /**\n   * Receive and store dice configuration from a player\n   * @param {string} userId - The user ID\n   * @param {string} diceConfig - The serialized dice configuration\n   */\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId === game.user?.id) {\n      this.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n    }\n  }\n  \n  /**\n   * Get dice configuration for a specific user\n   * @param {string} userId - The user ID\n   * @returns {Object} The user's dice configuration\n   */\n  static getUserDiceConfig(userId) {\n    if (userId === game.user?.id) {\n      return this.diceConfig;\n    }\n    \n    return this.playerDiceConfigs[userId] || {};\n  }\n  \n  /**\n   * Request dice configuration from a specific user\n   * @param {string} userId - The user ID to request from\n   */\n  static requestDiceConfigFromUser(userId) {\n    SocketUtil.execForUser('getDiceConfig', userId);\n  }\n  \n  /**\n   * Request dice configuration from all active non-GM users\n   */\n  static requestDiceConfigFromAllPlayers() {\n    if (!game.user?.isGM) return;\n    \n    game.users.forEach(user => {\n      if (user.active && !user.isGM && user.id !== game.user.id) {\n        this.requestDiceConfigFromUser(user.id);\n      }\n    });\n  }\n  \n  /**\n   * Clear all stored player dice configurations\n   */\n  static clearPlayerConfigs() {\n    this.playerDiceConfigs = {};\n  }\n  \n  /**\n   * Check if a user has dice configuration stored\n   * @param {string} userId - The user ID\n   * @returns {boolean} True if configuration exists\n   */\n  static hasUserConfig(userId) {\n    if (userId === game.user?.id) {\n      return !!this.diceConfig;\n    }\n    \n    return !!this.playerDiceConfigs[userId];\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined || SettingsUtil.get(setting.tag)===null){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsEnabled(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsEnabled(newValue){\n    const requestsIcon = document.querySelector(\"#chat-controls .chat-control-icon.roll-requests-icon\");\n    if(!requestsIcon){ return; }\n    \n    if(newValue){\n      requestsIcon.classList.add(\"active\");\n    }else{\n      requestsIcon.classList.remove(\"active\");\n    }\n  }\n}\n","import { LogUtil } from './LogUtil.mjs';\nimport { ROLL_TYPES } from '../constants/General.mjs';\n\n/**\n * Utility class for handling D&D5e 4.x activities\n */\nexport class ActivityUtil {\n  \n  /**\n   * Find the appropriate activity for a given roll type on an item\n   * @param {Item5e} item - The item to search for activities\n   * @param {string} rollType - The type of roll (attack, damage, itemSave)\n   * @returns {Activity5e|null} - The found activity or null\n   */\n  static findActivityForRoll(item, rollType) {\n    if (!item?.system?.activities) return null;\n    \n    const activities = item.system.activities;\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.ATTACK:\n        const attackActivities = activities.getByType(\"attack\");\n        return attackActivities?.[0] || null;\n        \n      case ROLL_TYPES.DAMAGE:\n        // For damage rolls, check attack activities first, then damage, then save\n        const damageAttackActivities = activities.getByType(\"attack\");\n        if (damageAttackActivities?.length > 0) return damageAttackActivities[0];\n        \n        const damageActivities = activities.getByType(\"damage\");\n        if (damageActivities?.length > 0) return damageActivities[0];\n        \n        const saveActivities = activities.getByType(\"save\");\n        if (saveActivities?.length > 0) return saveActivities[0];\n        \n        return null;\n        \n      case ROLL_TYPES.ITEM_SAVE:\n        const itemSaveActivities = activities.getByType(\"save\");\n        return itemSaveActivities?.[0] || null;\n        \n      default:\n        return null;\n    }\n  }\n  \n  /**\n   * Get all activities of a specific type from an item\n   * @param {Item5e} item - The item to search\n   * @param {string} activityType - The activity type (attack, damage, save, etc.)\n   * @returns {Activity5e[]} - Array of activities\n   */\n  static getActivitiesByType(item, activityType) {\n    if (!item?.system?.activities) return [];\n    return item.system.activities.getByType(activityType);\n  }\n  \n  /**\n   * Check if an item has activities suitable for a given roll type\n   * @param {Item5e} item - The item to check\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} - Whether the item has suitable activities\n   */\n  static hasActivityForRoll(item, rollType) {\n    const log = LogUtil.method(ActivityUtil, 'hasActivityForRoll');\n    log('checking activity', [item, rollType]);\n    return !!this.findActivityForRoll(item, rollType);\n  }\n  \n  /**\n   * Execute a roll using the appropriate activity method\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {string} itemId - The item ID\n   * @param {string} activityId - The activity ID (optional)\n   * @param {Object} config - Roll configuration\n   */\n  static async executeActivityRoll(actor, rollType, itemId, activityId, config) {\n    const log = LogUtil.method(ActivityUtil, 'executeActivityRoll');\n    log('executing activity roll', [actor, rollType, itemId, activityId, config]);\n    const item = actor.items.get(itemId);\n    if (!item) {\n      throw new Error(`Item ${itemId} not found on actor ${actor.name}`);\n    }\n    \n    let activity = null;\n    \n    // If activity ID provided, use it directly\n    if (activityId) {\n      activity = item.system.activities?.get(activityId);\n      if (!activity) {\n      }\n    }\n    \n    // If no activity found yet, search by roll type\n    if (!activity) {\n      activity = this.findActivityForRoll(item, rollType);\n    }\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Execute the roll based on type\n    if (activity) {\n      switch (normalizedRollType) {\n        case ROLL_TYPES.ATTACK:\n          const dialogConfig = {\n            configure: true  // Always true for players receiving roll requests\n          };\n \n          if(MidiQOL) {\n            const workflow = await ActivityUtil.syntheticItemRoll(item, {\n              ...config\n            });\n            return;\n          }else{\n            return await activity.use(usageConfig, dialogConfig);\n          }\n        case ROLL_TYPES.DAMAGE:\n          if(MidiQOL) {\n            const workflow = MidiQOL?.Workflow?.getWorkflow(activity.uuid);\n            const damageRoll = await workflow.activity.rollDamage({\n              ...config,\n              workflow: workflow\n            });\n            return;\n          }else{\n            return await activity.rollDamage(config);\n            // return await activity.use(usageConfig, dialogConfig);\n          }\n          \n          \n        case ROLL_TYPES.ITEM_SAVE:\n          // For save activities, use the item's use() method to show the save card\n          return await item.use({ activity: activity.id }, { skipDialog: config.fastForward });\n          \n        default:\n          throw new Error(`Unknown roll type: ${normalizedRollType}`);\n      }\n    } else {\n      // Fallback to legacy methods if no activity found\n      \n      switch (normalizedRollType) {\n        case ROLL_TYPES.ATTACK:\n          if (item.rollAttack) {\n            return await item.rollAttack(config);\n          }\n          break;\n          \n        case ROLL_TYPES.DAMAGE:\n          if (item.rollDamage) {\n            return await item.rollDamage(config);\n          }\n          break;\n          \n        case ROLL_TYPES.ITEM_SAVE:\n          // Try to use the item directly\n          return await item.use({}, { skipDialog: config.fastForward });\n      }\n      \n      throw new Error(`No suitable method found for ${normalizedRollType} on item ${item.name}`);\n    }\n  }\n  \n  /**\n   * Get display information for an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {Object} - Display information\n   */\n  static getActivityDisplayInfo(activity) {\n    const log = LogUtil.method(ActivityUtil, 'getActivityDisplayInfo');\n    log('getting activity display info', [activity]);\n    if (!activity) return null;\n    \n    return {\n      name: activity.name || activity.constructor.metadata.label,\n      type: activity.type,\n      icon: activity.constructor.metadata.icon,\n      canAttack: activity.type === 'attack',\n      canDamage: ['attack', 'damage', 'save'].includes(activity.type),\n      canSave: activity.type === 'save'\n    };\n  }\n  \n  /**\n   * Get damage formula string from an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {string|null} - Combined damage formula or null\n   */\n  static getDamageFormula(activity) {\n    const log = LogUtil.method(ActivityUtil, 'getDamageFormula');\n    log('getting damage formula', [activity]);\n    if (!activity?.damage?.parts?.length) return null;\n    \n    // Extract all damage formulas and combine them\n    const formulas = activity.damage.parts.map(part => part.formula).filter(f => f);\n    return formulas.length > 0 ? formulas.join(' + ') : null;\n  }\n\n  static async syntheticItemRoll(item, config = {}) {\n    const log = LogUtil.method(ActivityUtil, 'syntheticItemRoll');\n    log('performing synthetic item roll', [item, config]);\n    let defaultConfig = {\n        consumeUsage: false,\n        consumeSpellSlot: false\n    };\n    let defaultOptions = {\n      // targetUuids: targets.map(i => i.document.uuid),\n      configureDialog: true,\n      // ignoreUserTargets: true,\n      workflowOptions: {\n        autoRollAttack: false,\n        autoFastAttack: false,\n        autoRollDamage: 'none',\n        autoFastDamage: false\n      }\n    };\n\n    // options = genericUtils.mergeObject(defaultOptions, options);\n    config = {...defaultConfig, ...config};\n    return await MidiQOL.completeItemUse(item, config, defaultOptions);\n  }\n\n  static async replaceDamage(workflow, formula, {ignoreCrit = false, damageType} = {}) {\n    formula = String(formula);\n    if (workflow.isCritical && !ignoreCrit) formula = await rollUtils.getCriticalFormula(formula, workflow.item.getRollData());\n    let roll = await new CONFIG.Dice.DamageRoll(formula).evaluate();\n\n    await workflow.setDamageRolls([roll]);\n    \n    return roll;\n  }\n}","import { LogUtil } from \"./LogUtil.mjs\";\nimport { MODULE_ID, ROLL_TYPES } from \"../constants/General.mjs\";\n\n/**\n * GM Roll Configuration Dialog\n * Extends the standard D&D5e roll configuration dialogs to add DC field and send request toggle\n */\nexport class GMRollConfigDialog extends dnd5e.applications.dice.D20RollConfigurationDialog {\n  constructor(config = {}, message = {}, options = {}) {\n    // Ensure rollType is set in options\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    \n    // D20RollConfigurationDialog expects (config, message, options)\n    super(config, message, options);\n    \n    const log = LogUtil.method(this, 'constructor');\n    log('initializing', [config, message, options]);\n    \n    // Store GM-specific options\n    this.actors = options.actors || [];\n    \n    // Use defaultSendRequest if provided, otherwise use sendRequest, otherwise default to true\n    this.sendRequest = options.defaultSendRequest ?? options.sendRequest ?? true;\n    \n    this.showDC = options.showDC || false;\n    this.dcValue = options.dcValue || null;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for a roll.\n   * Extends parent to add DC and send request options\n   * @param {D20Roll} roll    The roll being configured.\n   * @param {object} [config] Configuration for the roll.\n   * @param {object} [dialog] Configuration for the dialog.\n   * @param {object} [message] Configuration for the chat message.\n   * @returns {object}\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    const log = LogUtil.method(this, '_prepareConfigurationData');\n    log('preparing', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context that is provided to all rendered parts.\n   * Extends parent to add DC field context\n   * @param {ApplicationRenderOptions} options  Render options provided to the render method.\n   * @returns {object}\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    const log = LogUtil.method(this, '_preparePartContext');\n    log('preparing part context', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _onRender(context, options) {\n    const log = LogUtil.method(this, '_onRender');\n    log('rendering dialog', [context, options]);\n    super._onRender(context, options);\n    \n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas').parentNode;\n    // }\n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n    \n    // If we have initial situational bonus, trigger a rebuild to update the formula\n    if (this.config.rolls?.[0]?.data?.situational || this.config.situational) {\n      LogUtil.log('GMRollConfigDialog._onRender', ['Triggering rebuild for initial situational bonus']);\n      // Use a small delay to ensure the form is fully rendered\n      setTimeout(() => {\n        this.rebuild();\n      }, 100);\n    }\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons\n   * @private\n   */\n  _attachButtonListeners() {\n    const log = LogUtil.method(this, '_attachButtonListeners');\n    log('attaching button listeners');\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _onChangeForm(formConfig, event) {\n    const log = LogUtil.method(this, '_onChangeForm');\n    log('form changed', [formConfig, event]);\n    super._onChangeForm(formConfig, event);\n    \n    // Capture the current state of our custom fields before re-render\n    const sendRequestCheckbox = this.element.querySelector('input[name=\"crlngn-send-request\"]');\n    if (sendRequestCheckbox) {\n      this.sendRequest = sendRequestCheckbox.checked;\n    }\n    \n    const dcInput = this.element.querySelector('input[name=\"dc\"]');\n    if (dcInput && dcInput.value) {\n      this.dcValue = parseInt(dcInput.value) || null;\n    }\n    \n  }\n  \n  /**\n   * Override _buildConfig to log what's happening\n   * @protected\n   */\n  _buildConfig(config, formData, index) {\n    const log = LogUtil.method(this, '_buildConfig');\n    log('building config', [config, formData, index]);\n    // Extract ability from form data if present (for skill/tool dialogs)\n    const abilityFromForm = formData?.get(\"ability\");\n    const dcFromForm = formData?.get(\"dc\");\n    \n    \n    // If ability is in form data, update the config\n    if (abilityFromForm) {\n      config.ability = abilityFromForm;\n      // Also update this.config.ability to persist the selection\n      this.config.ability = abilityFromForm;\n    }\n    \n    const result = super._buildConfig(config, formData, index);\n    \n    // Apply DC if we have one\n    if (dcFromForm) {\n      const dcValue = parseInt(dcFromForm);\n      if (!isNaN(dcValue)) {\n        result.options = result.options || {};\n        result.options.target = dcValue;\n      }\n    } else if (this.dcValue !== undefined && this.dcValue !== null) {\n      result.options = result.options || {};\n      result.options.target = this.dcValue;\n    }\n    \n    \n    return result;\n  }\n  \n  /**\n   * Process form submission.\n   * @param {SubmitEvent} event             The originating form submission event.\n   * @param {HTMLFormElement} form          The form element that was submitted.\n   * @param {FormDataExtended} formData     Processed data for the submitted form.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _processSubmitData(event, form, formData) {\n    const log = LogUtil.method(this, '_processSubmitData');\n    log('processing submit', [event, form, formData]);\n    \n    await super._processSubmitData(event, form, formData);\n    \n    // Extract DC value if present\n    if (formData.has(\"dc\") && formData.get(\"dc\") !== \"\") {\n      const dcValue = parseInt(formData.get(\"dc\"));\n      if (!isNaN(dcValue)) {\n        // Store DC value to apply later\n        this.dcValue = dcValue;\n        \n        // Try to add DC to all rolls as target if they exist\n        if (this.config.rolls && this.config.rolls.length > 0) {\n          for (const roll of this.config.rolls) {\n            roll.options.target = dcValue;\n          }\n        }\n      }\n    }\n    \n    // Store send request preference\n    this.sendRequest = formData.get(\"crlngn-send-request\") !== \"false\";\n  }\n  \n  /**\n   * Finalize the rolls and handle the results.\n   * @param {string} action     The action button that was clicked\n   * @returns {D20Roll[]}\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    const log = LogUtil.method(this, '_finalizeRolls');\n    log('finalizing rolls', [action]);\n    \n    // Let parent handle advantage/disadvantage mode\n    const finalizedRolls = super._finalizeRolls(action);\n    \n    // Apply DC if we have one stored\n    if (this.dcValue !== undefined && this.dcValue !== null) {\n      for (const roll of finalizedRolls) {\n        roll.options.target = this.dcValue;\n      }\n    }\n    \n    // Store our custom properties\n    this.config.sendRequest = this.sendRequest;\n    \n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the dialog\n   * @param {Actor[]} actors - The actors to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {object} options - Additional options\n   * @returns {Promise<object|null>} The configured roll data or null if cancelled\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    const log = LogUtil.method(GMRollConfigDialog, 'getConfiguration');\n    log('getting configuration', [actors, rollType, rollKey, options]);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Determine if we should show DC field\n    const showDC = [\n      ROLL_TYPES.SAVE,\n      ROLL_TYPES.SAVING_THROW,\n      ROLL_TYPES.ABILITY,\n      ROLL_TYPES.ABILITY_CHECK,\n      ROLL_TYPES.CONCENTRATION\n    ].includes(normalizedRollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Determine the appropriate roll class based on roll type\n    let rollClass = CONFIG.Dice.D20Roll;\n    if ([ROLL_TYPES.DAMAGE, ROLL_TYPES.HEALING].includes(normalizedRollType)) {\n      rollClass = CONFIG.Dice.DamageRoll || CONFIG.Dice.BasicRoll;\n    } else if ([ROLL_TYPES.FORMULA, ROLL_TYPES.CUSTOM].includes(normalizedRollType)) {\n      rollClass = CONFIG.Dice.BasicRoll;\n    }\n    \n    // Fallback to D20Roll if class not found\n    if (!rollClass) {\n      rollClass = CONFIG.Dice.D20Roll;\n    }\n    \n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add roll-specific data\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        rollConfig.skill = rollKey;\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        rollConfig.ability = rollKey;\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        rollConfig.ability = rollKey;\n        break;\n    }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => this._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: actors.map(a => a.name).join(\", \")\n        },\n        ...options\n      }\n    };\n    \n    // Create and render the dialog\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Build return configuration with only modified properties\n    const finalConfig = {\n      chatMessage: true,\n      isRollRequest: result.sendRequest,  // Only true when sending to players\n      skipDialog: options.skipDialogs || false,\n      sendRequest: result.sendRequest\n    };\n    \n    // Only add properties that were actually changed from defaults\n    if (advantage) finalConfig.advantage = true;\n    if (disadvantage) finalConfig.disadvantage = true;\n    \n    // Check if rollMode differs from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      finalConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add situational bonus if provided\n    // The situational bonus might be in different places depending on roll type\n    \n    // Check various possible locations for situational bonus\n    let situational = firstRoll?.options?.situational || \n                      firstRoll?.data?.situational || \n                      result.config?.data?.situational || \"\";\n    \n    // Also check if it's in the roll parts\n    if (!situational && firstRoll?.parts?.length > 0) {\n      // Look for parts that contain @situational\n      const situationalPart = firstRoll.parts.find(part => part.includes('@situational'));\n      if (situationalPart && firstRoll.data?.situational) {\n        situational = firstRoll.data.situational;\n      }\n    }\n    \n    if (situational) {\n      finalConfig.situational = situational;\n      finalConfig.parts = [\"@situational\"];  // Use @situational placeholder, not the actual value\n    }\n    \n    // Add DC if provided\n    if (firstRoll?.options?.target) {\n      finalConfig.target = firstRoll.options.target;\n    }\n    \n    // Add ability for skills/tools if it was selected and differs from default\n    if (result.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      // Check if this differs from the default ability for this skill/tool\n      const defaultAbility = actor.system.skills?.[rollKey]?.ability || CONFIG.DND5E.skills?.[rollKey]?.ability;\n      if (result.config.ability !== defaultAbility) {\n        finalConfig.ability = result.config.ability;\n      }\n    }\n    \n    // Add the roll title from the dialog window\n    finalConfig.rollTitle = dialogConfig.options.window.title;\n    \n    \n    return finalConfig;\n  }\n  \n  /**\n   * Check if actor is player owned\n   * @private\n   */\n  static _isPlayerOwned(actor) {\n    const log = LogUtil.method(GMRollConfigDialog, '_isPlayerOwned');\n    log('checking ownership', [actor]);\n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n  \n  /**\n   * Get a formatted title for the roll type\n   * @private\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {Actor} actor - The actor (used to get default ability for skills)\n   * @returns {string} The formatted title\n   */\n  static _getRollTitle(rollType, rollKey, actor) {\n    const log = LogUtil.method(GMRollConfigDialog, '_getRollTitle');\n    log('getting title', [rollType, rollKey, actor]);\n    let title = \"\";\n    \n    // Convert rollType to lowercase for comparison\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        // Get the default ability for this skill\n        const skill = actor?.system.skills?.[rollKey];\n        const defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n        const abilityLabel = CONFIG.DND5E.abilities[defaultAbility]?.label || defaultAbility;\n        // D&D5e format: \"Wisdom (Arcana) Check\"\n        title = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: abilityLabel \n        });\n        break;\n      case ROLL_TYPES.SAVE:\n      case ROLL_TYPES.SAVING_THROW:\n        const saveAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.SavePromptTitle\", { ability: saveAbility });\n        break;\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.ABILITY_CHECK:\n        const checkAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.AbilityPromptTitle\", { ability: checkAbility });\n        break;\n      case ROLL_TYPES.CONCENTRATION:\n        title = game.i18n.localize(\"DND5E.Concentration\");\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        title = game.i18n.format(\"DND5E.ToolPromptTitle\", { tool: toolLabel });\n        break;\n      case ROLL_TYPES.DEATH_SAVE:\n        title = game.i18n.localize(\"DND5E.DeathSave\");\n        break;\n      case ROLL_TYPES.INITIATIVE: \n      case ROLL_TYPES.INITIATIVE_DIALOG: // Handle alternate case\n        title = game.i18n.localize(\"DND5E.Initiative\");\n        break;\n      default:\n        title = game.i18n.localize(\"DND5E.Roll\");\n    }\n    LogUtil.log('_getRollTitle', [normalizedRollType, title]);\n    \n    return title;\n  }\n}\n\n/**\n * GM Skill/Tool Configuration Dialog\n * Extends SkillToolRollConfigurationDialog for ability selection\n */\nexport class GMSkillToolConfigDialog extends dnd5e.applications.dice.SkillToolRollConfigurationDialog {\n  constructor(config = {}, message = {}, options = {}) {\n    // Force ability selection\n    const skillConfig = foundry.utils.mergeObject(config, {\n      chooseAbility: true\n    });\n    \n    // Ensure rollType is set in options\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    \n    // SkillToolRollConfigurationDialog expects (config, message, options)\n    super(skillConfig, message, options);\n    \n    const log = LogUtil.method(this, 'constructor');\n    log('initializing skill/tool dialog', [config, message, options]);\n    \n    // Store GM-specific options\n    this.actors = options.actors || [];\n    \n    // Use defaultSendRequest if provided, otherwise use sendRequest, otherwise default to true\n    this.sendRequest = options.defaultSendRequest ?? options.sendRequest ?? true;\n    \n    this.showDC = options.showDC || false;\n    this.dcValue = options.dcValue || null;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    const log = LogUtil.method(this, '_prepareConfigurationData');\n    log('preparing skill/tool config data', [roll, config, dialog, message]);\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _preparePartContext(partId, context, options) {\n    const log = LogUtil.method(this, '_preparePartContext');\n    log('preparing part context', [partId, context, options]);\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _onRender(context, options) {\n    const log = LogUtil.method(this, '_onRender');\n    log('rendering dialog', [context, options]);\n    super._onRender(context, options);\n    \n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    // Try multiple selectors to find the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas fieldset');\n    // }\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('fieldset').parentNode;\n    // }\n    \n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n    \n    // If we have initial situational bonus, trigger a rebuild to update the formula\n    if (this.config.rolls?.[0]?.data?.situational || this.config.situational) {\n      // Use a small delay to ensure the form is fully rendered\n      setTimeout(() => {\n        this.rebuild();\n      }, 100);\n    }\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons\n   * @private\n   */\n  _attachButtonListeners() {\n    const log = LogUtil.method(this, '_attachButtonListeners');\n    log('attaching button listeners');\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _onChangeForm(formConfig, event) {\n    const log = LogUtil.method(this, '_onChangeForm');\n    log('skill/tool form changed', [formConfig, event]);\n    super._onChangeForm(formConfig, event);\n    \n    // Capture the current state of our custom fields before re-render\n    const sendRequestCheckbox = this.element.querySelector('input[name=\"crlngn-send-request\"]');\n    if (sendRequestCheckbox) {\n      this.sendRequest = sendRequestCheckbox.checked;\n    }\n    \n    const dcInput = this.element.querySelector('input[name=\"dc\"]');\n    if (dcInput && dcInput.value) {\n      this.dcValue = parseInt(dcInput.value) || null;\n    }\n    \n    // If ability selection changed, update the config\n    if (event.target?.name === \"ability\" && event.target?.value) {\n      this.config.ability = event.target.value;\n    }\n    \n  }\n  \n  /**\n   * Override _buildConfig to log what's happening\n   * @protected\n   */\n  _buildConfig(config, formData, index) {\n    const log = LogUtil.method(this, '_buildConfig');\n    log('building skill/tool config', [config, formData, index]);\n    // Extract ability from form data if present\n    const abilityFromForm = formData?.get(\"ability\");\n    const dcFromForm = formData?.get(\"dc\");\n    \n    \n    // If ability is in form data, update the config\n    if (abilityFromForm) {\n      config.ability = abilityFromForm;\n      // Also update this.config.ability to persist the selection\n      this.config.ability = abilityFromForm;\n    }\n    \n    const result = super._buildConfig(config, formData, index);\n    \n    // Apply DC if we have one\n    if (dcFromForm) {\n      const dcValue = parseInt(dcFromForm);\n      if (!isNaN(dcValue)) {\n        result.options = result.options || {};\n        result.options.target = dcValue;\n      }\n    } else if (this.dcValue !== undefined && this.dcValue !== null) {\n      result.options = result.options || {};\n      result.options.target = this.dcValue;\n    }\n    \n    \n    return result;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _processSubmitData(event, form, formData) {\n    const log = LogUtil.method(this, '_processSubmitData');\n    log('processing skill/tool submit', [event, form, formData]);\n    \n    await super._processSubmitData(event, form, formData);\n    \n    // Extract DC value if present\n    if (formData.has(\"dc\") && formData.get(\"dc\") !== \"\") {\n      const dcValue = parseInt(formData.get(\"dc\"));\n      if (!isNaN(dcValue)) {\n        // Store DC value to apply later\n        this.dcValue = dcValue;\n        \n        // Try to add DC to all rolls as target if they exist\n        if (this.config.rolls && this.config.rolls.length > 0) {\n          for (const roll of this.config.rolls) {\n            roll.options.target = dcValue;\n          }\n        }\n      }\n    }\n    \n    // Store send request preference\n    this.sendRequest = formData.get(\"crlngn-send-request\") !== \"false\";\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _finalizeRolls(action) {\n    const log = LogUtil.method(this, '_finalizeRolls');\n    log('finalizing skill/tool rolls', [action]);\n    \n    // Let parent handle advantage/disadvantage mode\n    const finalizedRolls = super._finalizeRolls(action);\n    \n    // Apply DC if we have one stored\n    if (this.dcValue !== undefined && this.dcValue !== null) {\n      for (const roll of finalizedRolls) {\n        roll.options.target = this.dcValue;\n      }\n    }\n    \n    // Store our custom properties\n    this.config.sendRequest = this.sendRequest;\n    \n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the dialog\n   * @param {Actor[]} actors - The actors to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {object} options - Additional options\n   * @returns {Promise<object|null>} The configured roll data or null if cancelled\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    const log = LogUtil.method(GMSkillToolConfigDialog, 'getConfiguration');\n    log('getting skill/tool configuration', [actors, rollType, rollKey, options]);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Determine if we should show DC field\n    const showDC = [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Skills and tools always use D20Roll\n    const rollClass = CONFIG.Dice.D20Roll;\n    \n    // Get the default ability for the skill or tool\n    let defaultAbility = null;\n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      const skill = actor.system.skills[rollKey];\n      defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      // For tools, check if the actor has a specific ability set for this tool\n      const tool = actor.system.tools?.[rollKey];\n      defaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n    }\n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      ability: defaultAbility,\n      chooseAbility: true,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add the appropriate property for skill or tool\n    if (normalizedRollType === ROLL_TYPES.SKILL) {\n      rollConfig.skill = rollKey;\n    } else if (normalizedRollType === ROLL_TYPES.TOOL) {\n      rollConfig.tool = rollKey;\n    }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => GMRollConfigDialog._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        window: {\n          title: GMRollConfigDialog._getRollTitle(normalizedRollType, rollKey, actor),\n          subtitle: actors.map(a => a.name).join(\", \")\n        },\n        ...options\n      }\n    };\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Build return configuration with only modified properties\n    const finalConfig = {\n      chatMessage: true,\n      isRollRequest: result.sendRequest,  // Only true when sending to players\n      skipDialog: options.skipDialogs || false,\n      sendRequest: result.sendRequest\n    };\n    \n    // Only add properties that were actually changed\n    if (advantage) finalConfig.advantage = true;\n    if (disadvantage) finalConfig.disadvantage = true;\n    \n    // Check if rollMode differs from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      finalConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add situational bonus if provided\n    // Check both options.situational and data.situational\n    const situational = firstRoll?.options?.situational || firstRoll?.data?.situational || \"\";\n    if (situational) {\n      finalConfig.situational = situational;\n      finalConfig.parts = [situational];\n    }\n    \n    // Add DC if provided\n    if (firstRoll?.options?.target) {\n      finalConfig.target = firstRoll.options.target;\n    }\n    \n    // Add ability if it was selected (always include for skills/tools to ensure proper dialog display)\n    if (result.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n      finalConfig.ability = result.config.ability;\n    }\n    \n    // Add the roll title from the dialog window\n    finalConfig.rollTitle = dialogConfig.options.window.title;\n    \n    \n    return finalConfig;\n  }\n}","import { HOOKS_DND5E } from '../constants/Hooks.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { MODULE_ID, ROLL_TYPES } from '../constants/General.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog } from './GMRollConfigDialog.mjs';\n\n/**\n * Handles intercepting D&D5e rolls on the GM side and redirecting them to players\n */\nexport class RollInterceptor {  \n  /**\n   * @type {Set<string>} - Set of registered hook IDs for cleanup\n   */\n  static registeredHooks = new Set();\n  \n  /**\n   * Initialize the roll interceptor\n   */\n  static initialize() {\n    const log = LogUtil.method(RollInterceptor, 'initialize');\n    log('initializing');\n    \n    // Only initialize for GM users\n    if (!game.user.isGM) return;\n    \n    this.registerHooks();\n  }\n  \n  /**\n   * Register all necessary hooks for roll interception\n   */\n  static registerHooks() {\n    const log = LogUtil.method(RollInterceptor, 'registerHooks');\n    log('registering hooks');\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, this._handlePreRoll.bind(this, ROLL_TYPES.ABILITY));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, this._handlePreRoll.bind(this, ROLL_TYPES.SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SKILL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.SKILL));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_TOOL_V2, this._handlePreRoll.bind(this, ROLL_TYPES.TOOL));\n    // Note: Concentration rolls are Constitution saving throws, handled by PRE_ROLL_SAVING_THROW\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._handlePreRoll.bind(this, ROLL_TYPES.ATTACK));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DAMAGE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE, this._handlePreRoll.bind(this, ROLL_TYPES.INITIATIVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.DEATH_SAVE));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._handlePreRoll.bind(this, ROLL_TYPES.HIT_DIE));\n    \n  }\n  \n  /**\n   * Helper to register a hook and track it for cleanup\n   * @param {string} hookName \n   * @param {Function} handler \n   */\n  static _registerHook(hookName, handler) {\n    const log = LogUtil.method(RollInterceptor, '_registerHook');\n    log('registering hook', [hookName]);\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.add({ hookName, hookId });\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterHooks() {\n    const log = LogUtil.method(RollInterceptor, 'unregisterHooks');\n    log('unregistering all hooks');\n    for (const { hookName, hookId } of this.registeredHooks) {\n      Hooks.off(hookName, hookId);\n    }\n    this.registeredHooks.clear();\n  }\n  \n  /**\n   * Handle generic pre-roll v2 hook to intercept all rolls\n   * @param {Object} config - Roll configuration (first parameter)\n   * @param {Object} options - Additional options (second parameter)\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handleGenericPreRoll(config, options) {\n    const log = LogUtil.method(RollInterceptor, '_handleGenericPreRoll');\n    log('handling generic pre-roll', [config, options]);\n    // Only intercept on GM side\n    if (!game.user.isGM) return;\n    \n    \n    // Check to avoid loops\n    if (config?.isRollRequest) return;\n    \n    // or non activity rolls, config.subject is the actor\n    const actor = config?.subject;\n    \n    // Check if roll interception and requests are enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    if (!rollInterceptionEnabled || !rollRequestsEnabled) {\n      // Allow the roll to proceed normally when either setting is disabled\n      return;\n    }\n\n    \n    if (!actor || actor.documentName !== 'Actor') {\n      return;\n    }\n    \n    // Check if the actor is owned by a player (not the GM)\n    const owner = this._getActorOwner(actor);\n    if (!owner || owner.id === game.user.id) {\n      return;\n    }\n    \n    // Check if the owner is online\n    if (!owner.active) {\n      return;\n    }\n    \n    // Determine roll type from the config\n    let rollType = 'unknown';\n    let rollKey = null;\n    \n    // Check config for more specific information\n    if (config?.ability) {\n      rollType = config.save ? ROLL_TYPES.SAVE : ROLL_TYPES.ABILITY;\n      rollKey = config.ability;\n    } else if (config?.skill) {\n      rollType = ROLL_TYPES.SKILL;\n      rollKey = config.skill;\n    } else if (config?.tool) {\n      rollType = ROLL_TYPES.TOOL;\n      rollKey = config.tool;\n    }\n    \n    // Pass the roll key along with the config if we found it\n    if (rollKey && config) {\n      config = { ...config, ability: rollKey };\n    }\n    this._sendRollRequest(actor, owner, rollType, config);\n    \n    // Prevent the normal roll\n    return false;\n  }\n\n  /**\n   * Handle pre-roll hooks to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Object} config - Roll configuration object (or Actor for initiative)\n   * @param {Object} dialog - Dialog options\n   * @param {Object} message - Message options\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRoll(rollType, config, dialog, message) {\n    const log = LogUtil.method(RollInterceptor, '_handlePreRoll');\n    log('handling pre-roll', [rollType, config, dialog, message]);\n    // Only intercept on GM side\n    if (!game.user.isGM) return;\n    \n    \n    // Special handling for initiative - first parameter is the actor\n    let actor;\n    if (rollType === ROLL_TYPES.INITIATIVE && config instanceof Actor) {\n      actor = config;\n      // For initiative, check if second parameter (options) has isRollRequest flag\n      // if (dialog?.isRollRequest) return;\n      // Also check third parameter for rollInitiative calls\n      // if (message?.isRollRequest) return;\n    } else {\n      // Check all three parameters for isRollRequest flag to avoid loops\n      if (config?.isRollRequest || dialog?.isRollRequest || message?.isRollRequest) {\n        return;\n      }\n      \n      // Extract actor from the config\n      actor = config.subject?.actor || config.subject || config.actor;\n    }\n    \n    // Check if roll interception and requests are enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    if (!rollInterceptionEnabled || !rollRequestsEnabled) {\n      // Allow the roll to proceed normally when either setting is disabled\n      return;\n    }\n    \n    if (!actor || actor.documentName !== 'Actor') {\n      return;\n    }\n    \n    // Check if the actor is owned by a player (not the GM)\n    const owner = this._getActorOwner(actor);\n    if (!owner || owner.id === game.user.id) {\n      // Actor is owned by GM or has no owner, allow normal roll\n      return;\n    }\n    \n    // Check if the owner is online\n    if (!owner.active) {\n      // Player is offline - allow GM to roll normally\n      return; // Don't intercept, let the roll proceed\n    }\n    \n    \n    // Show GM configuration dialog before sending to player\n    this._showGMConfigDialog(actor, owner, rollType, config, dialog, message);\n    \n    // Prevent the normal roll\n    return false;\n  }\n  \n  /**\n   * Show GM configuration dialog before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showGMConfigDialog(actor, owner, rollType, config, dialog, message) {\n    const log = LogUtil.method(RollInterceptor, '_showGMConfigDialog');\n    log('showing GM config dialog', [actor, owner, rollType, config, dialog, message]);\n    try {\n      // Normalize rollType to lowercase for consistent comparisons\n      const normalizedRollType = rollType?.toLowerCase();\n      \n      // Determine appropriate dialog class based on roll type\n      const DialogClass = [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType) ? GMSkillToolConfigDialog : GMRollConfigDialog;\n      \n      // Create base roll config based on roll type\n      let rollConfig = {\n        rolls: [{\n          parts: [],\n          data: {},\n          options: {}\n        }]\n      };\n      \n      // Add specific configuration based on roll type\n      switch (normalizedRollType) {\n        case ROLL_TYPES.ABILITY:\n          rollConfig.ability = config.ability || config.subject?.ability;\n          break;\n        case ROLL_TYPES.SAVE:\n          rollConfig.ability = config.ability || config.subject?.ability;\n          // Check if this is actually a concentration save\n          if (config.ability === 'con' && config.targetValue !== undefined) {\n            rollType = ROLL_TYPES.CONCENTRATION; // Update rollType for proper handling\n          }\n          break;\n        case ROLL_TYPES.SKILL:\n          rollConfig.skill = config.skill;\n          rollConfig.ability = config.ability;\n          break;\n        case ROLL_TYPES.TOOL:\n          rollConfig.tool = config.tool;\n          rollConfig.ability = config.ability;\n          break;\n        case ROLL_TYPES.CONCENTRATION:\n          rollConfig.ability = 'con';\n          break;\n      }\n      \n      const options = {\n        actors: [actor],\n        rollType: normalizedRollType,\n        showDC: true,\n        defaultSendRequest: true,\n        skipDialogs: false\n      };\n      \n      // Create and render the GM dialog\n      const gmDialog = new DialogClass(rollConfig, {}, options);\n      const result = await gmDialog.render(true);\n      \n      \n      // If dialog was cancelled or sendRequest is false, allow normal roll\n      if (!result || !result.sendRequest) {\n        \n        // Re-create the roll with the original method\n        // We need to return true from _handlePreRoll to allow the original roll to proceed\n        // But we can't do that from here since we already returned false\n        // Instead, we'll execute the roll ourselves with the updated config\n        await this._executeLocalRoll(actor, rollType, config, result || {});\n        return;\n      }\n      \n      // Send the roll request to the player with the configured settings\n      const finalConfig = {\n        ...config,\n        ...result,\n        requestedBy: game.user.name\n      };\n      \n      this._sendRollRequest(actor, owner, rollType, finalConfig);\n      \n    } catch (error) {\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n  \n  /**\n   * Execute a roll locally on the GM side\n   * @param {Actor} actor \n   * @param {string} rollType \n   * @param {Object} originalConfig\n   * @param {Object} dialogResult\n   */\n  static async _executeLocalRoll(actor, rollType, originalConfig, dialogResult) {\n    const log = LogUtil.method(RollInterceptor, '_executeLocalRoll');\n    log('executing local roll', [actor, rollType, originalConfig, dialogResult]);\n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Build config for local roll\n    const config = {\n      ...originalConfig,\n      advantage: dialogResult.advantage || originalConfig.advantage,\n      disadvantage: dialogResult.disadvantage || originalConfig.disadvantage,\n      bonus: dialogResult.situational || originalConfig.bonus,\n      target: dialogResult.dc || originalConfig.target,\n      rollMode: dialogResult.rollMode || originalConfig.rollMode,\n      isRollRequest: false // Ensure we don't intercept this roll\n    };\n    \n    const dialogConfig = {\n      configure: false, // Skip dialog since we already configured\n      isRollRequest: false\n    };\n    \n    const messageConfig = {\n      rollMode: config.rollMode,\n      create: true,\n      isRollRequest: false\n    };\n    \n    try {\n      switch (normalizedRollType) {\n        case ROLL_TYPES.SAVE:\n          await actor.rollSavingThrow(originalConfig.ability, config, dialogConfig, messageConfig);\n          break;\n        case ROLL_TYPES.ABILITY:\n          await actor.rollAbilityCheck(originalConfig.ability, config, dialogConfig, messageConfig);\n          break;\n        case ROLL_TYPES.SKILL:\n          await actor.rollSkill(originalConfig.skill, config, dialogConfig, messageConfig);\n          break;\n        case ROLL_TYPES.TOOL:\n          await actor.rollToolCheck(originalConfig.tool, config, dialogConfig, messageConfig);\n          break;\n        case ROLL_TYPES.CONCENTRATION:\n          await actor.rollConcentration(config, dialogConfig, messageConfig);\n          break;\n        // Add other roll types as needed\n      }\n    } catch (error) {\n    }\n  }\n  \n  /**\n   * Show configuration dialog to GM before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showConfigurationDialog(actor, owner, rollType, config, dialog, message) {\n    const log = LogUtil.method(RollInterceptor, '_showConfigurationDialog');\n    log('showing configuration dialog', [actor, owner, rollType, config, dialog, message]);\n    try {\n      \n      // Create a wrapper function that will be called instead of the normal roll\n      const rollWrapper = async (finalConfig) => {\n        // Send the configured roll request to the player\n        this._sendRollRequest(actor, owner, rollType, finalConfig);\n        // Return a fake roll to satisfy the dialog\n        return new Roll(\"1d20\").evaluate({async: false});\n      };\n      \n      // Replace the roll method in config with our wrapper\n      const modifiedConfig = {\n        ...config,\n        _rollMethod: rollWrapper,\n        configured: false // Force dialog to show\n      };\n      \n      // Create and render the dialog\n      const DialogClass = dialog.cls;\n      const rollDialog = new DialogClass(modifiedConfig, dialog.options);\n      \n      // Render the dialog\n      const result = await rollDialog.render(true);\n      \n    } catch (error) {\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n\n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  static _getActorOwner(actor) {\n    const log = LogUtil.method(RollInterceptor, '_getActorOwner');\n    log('getting actor owner', [actor]);\n    // Find the first active player who owns this actor\n    const ownership = actor.ownership || {};\n    \n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Send a roll request to the player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   */\n  static _sendRollRequest(actor, owner, rollType, config) {\n    const log = LogUtil.method(RollInterceptor, '_sendRollRequest');\n    log('sending roll request', [actor, owner, rollType, config]);\n    const SETTINGS = getSettings();\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Normalize rollType to lowercase for consistent comparisons\n    const normalizedRollType = rollType?.toLowerCase();\n    \n    // Extract the roll key based on roll type\n    let rollKey = null;\n    let activityId = null;\n    switch (normalizedRollType) {\n      case ROLL_TYPES.ABILITY:\n      case ROLL_TYPES.SAVE:\n        rollKey = config.ability;\n        break;\n      case ROLL_TYPES.SKILL:\n        rollKey = config.skill;\n        break;\n      case ROLL_TYPES.TOOL:\n        rollKey = config.tool;\n        break;\n      case ROLL_TYPES.ATTACK:\n      case ROLL_TYPES.DAMAGE:\n        if (config.subject?.item) {\n          rollKey = config.subject.item.id;\n          // Find the appropriate activity\n          const activity = ActivityUtil.findActivityForRoll(config.subject.item, rollType);\n          if (activity) {\n            activityId = activity.id;\n          }\n        }\n        break;\n      case ROLL_TYPES.HIT_DIE:\n        rollKey = config.denomination;\n        break;\n      default:\n        // Unknown roll type\n        LogUtil.warn(`Unknown roll type: ${rollType}`);\n        return;\n    }\n    \n    // Clean up config to remove non-serializable properties\n    const cleanConfig = {\n      advantage: config.advantage || false,\n      disadvantage: config.disadvantage || false,\n      situational: config.situational || 0,\n      parts: config.parts || [],\n      rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      elvenAccuracy: config.elvenAccuracy || false,\n      halflingLucky: config.halflingLucky || false,\n      reliableTalent: config.reliableTalent || false,\n      minimum: config.minimum,\n      maximize: config.maximize,\n      critical: config.critical,\n      fumble: config.fumble,\n      targetValue: config.targetValue,\n      fastForward: config.fastForward || false,\n      chatMessage: config.chatMessage !== false,\n      flavor: config.flavor,\n      title: config.title,\n      dialogOptions: config.dialogOptions,\n      messageData: config.messageData\n    };\n    \n    // Remove undefined values\n    Object.keys(cleanConfig).forEach(key => {\n      if (cleanConfig[key] === undefined) {\n        delete cleanConfig[key];\n      }\n    });\n    \n    // Build the request data according to Phase 1 spec\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType: normalizedRollType,\n      rollKey,\n      activityId,\n      config: cleanConfig,\n      skipDialog: skipDialogs,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    // Send request to player via socket\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    // Show notification to GM\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent', { \n      player: owner.name,\n      actor: actor.name \n    }));\n  }\n}","/**\n * Helper functions for the Flash Rolls 5e module\n */\n\nimport { MODULE, ROLL_TYPES } from '../../constants/General.mjs';\n\n/**\n * Get display name for roll type with optional details\n * @param {string} rollType - The type of roll\n * @param {string} rollKey - Optional key for the specific roll (ability, skill, etc.)\n * @returns {string} Formatted display string\n */\nexport function getRollTypeDisplay(rollType, rollKey) {\n  let display = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollType}`) || rollType;\n  \n  // Normalize rollType to lowercase for consistent comparisons\n  const normalizedRollType = rollType?.toLowerCase();\n  \n  if (rollKey) {\n    switch (normalizedRollType) {\n      case ROLL_TYPES.SKILL:\n        display += ` (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.SAVE:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.ABILITY:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          display += ` (${toolItem?.name || rollKey})`;\n        } else {\n          display += ` (${rollKey})`;\n        }\n        break;\n      case ROLL_TYPES.CUSTOM:\n        display = `${display}: ${rollKey}`;\n        break;\n    }\n  }\n  \n  return display;\n}\n\n/**\n * Show batched notifications to player\n * @param {Array} pendingNotifications - Array of notification objects\n * @param {Function} getRollTypeDisplayFn - Function to get roll type display (default: getRollTypeDisplay)\n */\nexport function showBatchedNotifications(pendingNotifications, getRollTypeDisplayFn = getRollTypeDisplay) {\n  if (pendingNotifications.length === 0) return;\n  \n  // Group by roll type\n  const notificationsByType = {};\n  for (const notif of pendingNotifications) {\n    const key = `${notif.rollType}_${notif.rollKey || ''}`;\n    if (!notificationsByType[key]) {\n      notificationsByType[key] = {\n        rollType: notif.rollType,\n        rollKey: notif.rollKey,\n        actors: [],\n        gm: notif.gm\n      };\n    }\n    notificationsByType[key].actors.push(notif.actor);\n  }\n  \n  const entries = Object.values(notificationsByType);\n  if (entries.length === 1 && entries[0].actors.length === 1) {\n    // Single roll request - use original format\n    const entry = entries[0];\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived', {\n      gm: entry.gm,\n      rollType: getRollTypeDisplayFn(entry.rollType, entry.rollKey)\n    }));\n  } else {\n    // Multiple requests - create consolidated message\n    const messages = [];\n    for (const entry of entries) {\n      const rollTypeDisplay = getRollTypeDisplayFn(entry.rollType, entry.rollKey);\n      const actorNames = entry.actors.join(\", \");\n      messages.push(`${rollTypeDisplay} (${actorNames})`);\n    }\n    \n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestsReceivedMultiple', {\n      gm: entries[0].gm,\n      requests: messages.join(\"; \")\n    }));\n  }\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {User|null} The player owner, or null if not player-owned\n */\nexport function getPlayerOwner(actor) {\n  const ownership = actor.ownership || {};\n  \n  for (const [userId, level] of Object.entries(ownership)) {\n    if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n      const user = game.users.get(userId);\n      if (user && !user.isGM) {\n        return user;\n      }\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Get actor stats for display (ability scores and modifiers)\n * @param {Actor} actor - The actor to get stats for\n * @returns {Array} Array of stat objects with name, value, and modifier\n */\nexport function getActorStats(actor) {\n  if (!actor?.system?.abilities) return [];\n  \n  return Object.entries(actor.system.abilities).map(([key, ability]) => ({\n    name: key.toUpperCase(),\n    value: ability.value || 10,\n    modifier: ability.mod >= 0 ? `+${ability.mod}` : `${ability.mod}`\n  }));\n}\n\n/**\n * Apply target tokens to user\n * @param {Array<string>} tokenIds - Array of token IDs to target\n * @param {User} user - User to apply targets for (default: game.user)\n */\nexport function applyTargetTokens(tokenIds, user = game.user) {\n  if (!tokenIds?.length) return;\n  \n  const tokens = tokenIds\n    .map(id => canvas.tokens.get(id))\n    .filter(t => t);\n    \n  tokens.forEach(t => t.setTarget(true, { user }));\n}\n\n/**\n * Clear all target tokens for user\n * @param {User} user - User to clear targets for (default: game.user)\n */\nexport function clearTargetTokens(user = game.user) {\n  user.targets.forEach(t => t.setTarget(false, { user }));\n}\n\n/**\n * Format a notification message for multiple actors\n * @param {Array<string>} actorNames - Array of actor names\n * @param {string} action - The action being performed\n * @returns {string} Formatted message\n */\nexport function formatMultiActorNotification(actorNames, action) {\n  if (actorNames.length === 0) return \"\";\n  if (actorNames.length === 1) return `${actorNames[0]} ${action}`;\n  \n  const and = game.i18n.localize(\"CRLNGN_ROLLS.common.and\");\n  \n  if (actorNames.length === 2) return `${actorNames[0]} ${and} ${actorNames[1]} ${action}`;\n  \n  const lastActor = actorNames[actorNames.length - 1];\n  const otherActors = actorNames.slice(0, -1).join(\", \");\n  return `${otherActors}, ${and} ${lastActor} ${action}`;\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if owned by a player\n */\nexport function isPlayerOwned(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  return Object.entries(actor.ownership)\n    .some(([userId, level]) => {\n      const user = game.users.get(userId);\n      return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n    });\n}\n\n/**\n * Check if actor has token in current scene\n * @param {Actor} actor - The actor to check\n * @returns {boolean} True if actor has token in current scene\n */\nexport function hasTokenInScene(actor) {\n  // Skip non-character actors\n  if (actor.type !== 'character' && actor.type !== 'npc') return false;\n  \n  const currentScene = game.scenes.active;\n  return currentScene && currentScene.tokens.some(token => token.actorId === actor.id);\n}\n\n/**\n * Update token selection on canvas based on actor selection\n * @param {string} actorId - The actor ID\n * @param {boolean} selected - Whether to select or deselect\n */\nexport function updateCanvasTokenSelection(actorId, selected) {\n  const scene = game.scenes.active;\n  if (!scene) return;\n  \n  // Find all tokens for this actor in the current scene\n  const tokens = canvas.tokens.placeables.filter(t => t.actor?.id === actorId);\n  \n  for (const token of tokens) {\n    if (selected) {\n      // Add to selection without clearing others\n      token.control({ releaseOthers: false });\n    } else {\n      // Release this token\n      token.release();\n    }\n  }\n}\n\n/**\n * Delay execution for a specified time\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise} Promise that resolves after the delay\n */\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Check if the sidebar is expanded\n * @returns {boolean} True if sidebar is expanded\n */\nexport function isSidebarExpanded() {\n  return !ui?.sidebar?._collapsed;\n}\n\n/**\n * Update body class based on sidebar state\n * @param {boolean} isExpanded - Whether sidebar is expanded\n */\nexport function updateSidebarClass(isExpanded) {\n  const body = document.querySelector(\"body\");\n  if (isExpanded) {\n    body.classList.add(\"sidebar-expanded\");\n  } else {\n    body.classList.remove(\"sidebar-expanded\");\n  }\n}\n\n/**\n * Build roll types array for a selected request type\n * @param {string} selectedRequestType - The type of roll request\n * @param {Set} selectedActors - Set of selected actor IDs\n * @returns {Array} Array of roll type objects with id, name, and rollable properties\n */\nexport function buildRollTypes(selectedRequestType, selectedActors) {\n  const rollTypes = [];\n  \n  if (!selectedRequestType || selectedActors.size === 0) {\n    return rollTypes;\n  }\n  \n  const selectedOption = MODULE.ROLL_REQUEST_OPTIONS[selectedRequestType];\n  if (!selectedOption || !selectedOption.subList) {\n    return rollTypes;\n  }\n  \n  // Get first selected actor as reference for available options\n  const firstActorId = Array.from(selectedActors)[0];\n  const actor = game.actors.get(firstActorId);\n  \n  // Special handling for tools - show all available tools\n  if (selectedOption.subList === 'tools') {\n    // Get all tools from CONFIG.DND5E.tools or enrichmentLookup\n    const allTools = CONFIG.DND5E.enrichmentLookup?.tools || CONFIG.DND5E.tools || {};\n    \n    for (const [key, toolData] of Object.entries(allTools)) {\n      let label = key;\n      \n      // Use enrichmentLookup to get tool UUID and then fetch the name\n      if (toolData?.id) {\n        // Get the tool name using Trait.getBaseItem\n        const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n        label = toolItem?.name || key;\n      }\n      // Fallback - format the key\n      else {\n        label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n      }\n      \n      rollTypes.push({\n        id: key,\n        name: label,\n        rollable: true\n      });\n    }\n    \n    // Sort tools alphabetically by name\n    rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n  }\n  // For other types, use actor data\n  else if (actor && selectedOption.actorPath) {\n    const rollData = foundry.utils.getProperty(actor, selectedOption.actorPath) || {};\n    \n    // Check if we should use CONFIG.DND5E for enrichment\n    const configData = CONFIG.DND5E[selectedOption.subList];\n    \n    for (const [key, data] of Object.entries(rollData)) {\n      let label = '';\n      \n      // For skills, use CONFIG.DND5E.skills for full names\n      if (selectedOption.subList === 'skills' && configData?.[key]) {\n        label = configData[key].label;\n      }\n      // For abilities (saving throws), use the label from data\n      else if (selectedOption.subList === 'abilities' && configData?.[key]) {\n        label = configData[key].label;\n      }\n      // Default fallback\n      else {\n        label = data.label || game.i18n.localize(data.name || key) || key;\n      }\n      \n      rollTypes.push({\n        id: key,\n        name: label,\n        rollable: true\n      });\n    }\n    \n    // Sort skills alphabetically by name\n    if (selectedOption.subList === 'skills') {\n      rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n    }\n  }\n  \n  return rollTypes;\n}\n\n/**\n * Unified notification system with batching support\n */\nexport class NotificationManager {\n  static pendingNotifications = [];\n  static notificationTimer = null;\n  static NOTIFICATION_BATCH_DELAY = 500; // ms to wait for additional notifications\n  \n  /**\n   * Show a notification with optional batching for roll requests\n   * @param {string} type - Notification type (info, warn, error)\n   * @param {string} message - Message to display\n   * @param {Object} options - Options for the notification\n   * @param {boolean} options.batch - Whether to batch this notification\n   * @param {Object} options.batchData - Data for batched notifications\n   */\n  static notify(type, message, options = {}) {\n    // If not batching, show immediately\n    if (!options.batch) {\n      ui.notifications[type](message);\n      return;\n    }\n    \n    // Add to pending notifications for batching\n    if (options.batchData) {\n      NotificationManager.pendingNotifications.push(options.batchData);\n      \n      // Clear existing timer and set new one\n      if (NotificationManager.notificationTimer) {\n        clearTimeout(NotificationManager.notificationTimer);\n      }\n      \n      NotificationManager.notificationTimer = setTimeout(() => {\n        showBatchedNotifications(NotificationManager.pendingNotifications);\n        NotificationManager.pendingNotifications = [];\n        NotificationManager.notificationTimer = null;\n      }, NotificationManager.NOTIFICATION_BATCH_DELAY);\n    }\n  }\n  \n  /**\n   * Show roll request sent notifications (GM side)\n   * @param {Object} requestsByPlayer - Grouped requests by player\n   * @param {string} rollTypeName - Display name of the roll type\n   */\n  static notifyRollRequestsSent(requestsByPlayer, rollTypeName) {\n    const successfulRequests = Object.entries(requestsByPlayer);\n    \n    if (successfulRequests.length === 0) return;\n    \n    // Single player, single actor\n    if (successfulRequests.length === 1) {\n      const playerData = Object.values(requestsByPlayer)[0];\n      const actorNames = playerData.actors.map(a => a.name).join(\", \");\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentSingle\", { \n        rollType: rollTypeName,\n        actors: actorNames,\n        player: playerData.player.name\n      }));\n    } else {\n      // Multiple players\n      const playerSummaries = successfulRequests.map(([playerId, data]) => {\n        const actorNames = data.actors.map(a => a.name).join(\", \");\n        return `${data.player.name} (${actorNames})`;\n      });\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentMultiple\", { \n        rollType: rollTypeName,\n        count: successfulRequests.length,\n        players: playerSummaries.join(\"; \")\n      }));\n    }\n  }\n  \n  /**\n   * Clear any pending notifications\n   */\n  static clearPending() {\n    if (NotificationManager.notificationTimer) {\n      clearTimeout(NotificationManager.notificationTimer);\n      NotificationManager.notificationTimer = null;\n    }\n    NotificationManager.pendingNotifications = [];\n  }\n}","import { ROLL_TYPES } from \"../../constants/General.mjs\";\n\n/**\n * Helper functions for local roll handling (NPC rolls)\n */\nexport const LocalRollHelpers = {\n  /**\n   * Ensure an actor is added to the active combat\n   * @param {Actor} actor - The actor to add to combat\n   * @returns {Promise<Combatant|null>} The combatant or null if failed\n   */\n  async ensureActorInCombat(actor) {\n    if (!game.combat) {\n      return null;\n    }\n    \n    // Check if actor is already in combat\n    let combatant = game.combat.getCombatantByActor(actor.id);\n    if (combatant) {\n      return combatant;\n    }\n    \n    // Try to add actor to combat\n    const tokens = actor.getActiveTokens();\n    try {\n      if (tokens.length) {\n        // Actor has token on scene\n        const combatantData = await game.combat.createEmbeddedDocuments(\"Combatant\", [{\n          tokenId: tokens[0].id,\n          actorId: actor.id\n        }]);\n        return combatantData[0];\n      } else {\n        // No token on scene, create combatant with just actor\n        const combatantData = await game.combat.createEmbeddedDocuments(\"Combatant\", [{\n          actorId: actor.id\n        }]);\n        return combatantData[0];\n      }\n    } catch (error) {\n      console.error(`Failed to add actor ${actor.name} to combat:`, error);\n      return null;\n    }\n  },\n  /**\n   * Build ability check configuration\n   * @param {string} rollKey - The ability key\n   * @param {Object} config - Base configuration\n   * @returns {Array} Configuration array for D&D5e roll methods\n   */\n  buildAbilityCheckConfig(rollKey, config) {\n    const rollConfig = {\n      ability: rollKey,\n      advantage: config.advantage,\n      disadvantage: config.disadvantage,\n      target: config.target,\n      isRollRequest: config.isRollRequest\n    };\n    \n    // Add situational bonus if present\n    if (config.situational) {\n      rollConfig.rolls = [{\n        parts: [\"@situational\"],\n        data: { situational: config.situational },\n        options: {},\n        situational: true\n      }];\n    }\n    \n    const dialogConfig = {\n      configure: !config.fastForward\n    };\n    \n    const messageConfig = {\n      rollMode: config.rollMode,\n      create: config.chatMessage !== false\n    };\n    \n    return [rollConfig, dialogConfig, messageConfig];\n  },\n\n  /**\n   * Build skill check configuration\n   * @param {string} rollKey - The skill key\n   * @param {Object} config - Base configuration\n   * @returns {Array} Configuration array for D&D5e roll methods\n   */\n  buildSkillCheckConfig(rollKey, config) {\n    const rollConfig = {\n      skill: rollKey,\n      advantage: config.advantage,\n      disadvantage: config.disadvantage,\n      ability: config.ability,\n      chooseAbility: !config.ability\n    };\n    \n    if (config.situational) rollConfig.bonus = config.situational;\n    if (config.target) rollConfig.target = config.target;\n    \n    const dialogConfig = {\n      configure: !config.fastForward\n    };\n    \n    const messageConfig = {\n      rollMode: config.rollMode,\n      create: config.chatMessage !== false,\n      data: {}\n    };\n    \n    // Add custom flavor if provided\n    if (config.rollTitle) {\n      messageConfig.data.flavor = config.rollTitle;\n    } else if (config.ability) {\n      const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n      const abilityLabel = CONFIG.DND5E.abilities[config.ability]?.label || config.ability;\n      messageConfig.data.flavor = game.i18n.format(\"DND5E.SkillPromptTitle\", {\n        skill: skillLabel,\n        ability: abilityLabel\n      });\n    }\n    \n    return [rollConfig, dialogConfig, messageConfig];\n  },\n\n  /**\n   * Build tool check configuration\n   * @param {string} rollKey - The tool key\n   * @param {Object} config - Base configuration\n   * @returns {Array} Configuration array for D&D5e roll methods\n   */\n  buildToolCheckConfig(rollKey, config) {\n    const rollConfig = {\n      tool: rollKey,\n      advantage: config.advantage,\n      disadvantage: config.disadvantage,\n      ability: config.ability,\n      chooseAbility: !config.ability\n    };\n    \n    if (config.situational) rollConfig.bonus = config.situational;\n    if (config.target) rollConfig.target = config.target;\n    \n    const dialogConfig = {\n      configure: !config.fastForward\n    };\n    \n    const messageConfig = {\n      rollMode: config.rollMode,\n      create: config.chatMessage !== false,\n      data: {}\n    };\n    \n    // Add custom flavor if provided\n    if (config.rollTitle) {\n      messageConfig.data.flavor = config.rollTitle;\n    } else if (config.ability) {\n      // Get tool label\n      let toolLabel = rollKey;\n      const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n      if (toolData?.id) {\n        const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n        toolLabel = toolItem?.name || rollKey;\n      }\n      const abilityLabel = CONFIG.DND5E.abilities[config.ability]?.label || config.ability;\n      // D&D5e doesn't have a tool format with ability, so create custom flavor\n      messageConfig.data.flavor = `${abilityLabel} (${toolLabel}) ${game.i18n.localize(\"DND5E.Check\")}`;\n    }\n    \n    return [rollConfig, dialogConfig, messageConfig];\n  }\n};\n\n/**\n * Handlers for each local roll type\n */\nexport const LOCAL_ROLL_HANDLERS = {\n  [ROLL_TYPES.ABILITY_CHECK]: async (actor, rollKey, config) => {\n    const [rollConfig, dialogConfig, messageConfig] = LocalRollHelpers.buildAbilityCheckConfig(rollKey, config);\n    await actor.rollAbilityCheck(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.SAVING_THROW]: async (actor, rollKey, config) => {\n    const [rollConfig, dialogConfig, messageConfig] = LocalRollHelpers.buildAbilityCheckConfig(rollKey, config);\n    await actor.rollSavingThrow(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.SKILL]: async (actor, rollKey, config) => {\n    const [rollConfig, dialogConfig, messageConfig] = LocalRollHelpers.buildSkillCheckConfig(rollKey, config);\n    await actor.rollSkill(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.TOOL]: async (actor, rollKey, config) => {\n    const [rollConfig, dialogConfig, messageConfig] = LocalRollHelpers.buildToolCheckConfig(rollKey, config);\n    await actor.rollToolCheck(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.CONCENTRATION]: async (actor, rollKey, config) => {\n    const rollConfig = {\n      advantage: config.advantage,\n      disadvantage: config.disadvantage,\n      target: config.target\n    };\n    \n    // Add situational bonus if present\n    if (config.situational) {\n      rollConfig.bonus = config.situational;\n    }\n    \n    const dialogConfig = { configure: !config.fastForward && !config.skipDialog };\n    const messageConfig = {\n      rollMode: config.rollMode,\n      create: config.chatMessage !== false\n    };\n    await actor.rollConcentration(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.INITIATIVE_DIALOG]: async (actor, rollKey, config) => {\n    // Initiative rolls require an active combat\n    if (!game.combat) {\n      ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n      return;\n    }\n    \n    // Ensure actor is in combat before rolling\n    const combatant = await LocalRollHelpers.ensureActorInCombat(actor);\n    if (!combatant) {\n      ui.notifications.warn(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.actorNotInCombat\", {\n        actor: actor.name\n      }));\n      return;\n    }\n    \n    const rollConfig = {\n      advantage: config.advantage,\n      disadvantage: config.disadvantage\n    };\n    \n    // Add situational bonus if present\n    if (config.situational) {\n      rollConfig.bonus = config.situational;\n    }\n    \n    const dialogConfig = { configure: !config.fastForward && !config.skipDialog };\n    const messageConfig = {\n      rollMode: config.rollMode,\n      create: config.chatMessage !== false\n    };\n    \n    // Use rollInitiative (without dialog) when skipDialog is true\n    await (config.skipDialog || config.fastForward \n      ? actor.rollInitiative(rollConfig, dialogConfig, messageConfig)\n      : actor.rollInitiativeDialog(rollConfig, dialogConfig, messageConfig));\n  },\n\n  [ROLL_TYPES.DEATH_SAVE]: async (actor, rollKey, config) => {\n    const rollConfig = {\n      advantage: config.advantage,\n      disadvantage: config.disadvantage,\n      target: config.target\n    };\n    \n    // Add situational bonus if present\n    if (config.situational) {\n      rollConfig.bonus = config.situational;\n    }\n    \n    const dialogConfig = { configure: !config.fastForward && !config.skipDialog };\n    const messageConfig = {\n      rollMode: config.rollMode,\n      create: config.chatMessage !== false\n    };\n    await actor.rollDeathSave(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.CUSTOM]: async (actor, rollKey, config) => {\n    // Custom rolls use the formula in rollKey\n    try {\n      const roll = new Roll(rollKey, actor.getRollData());\n      await roll.evaluate({async: true});\n      await roll.toMessage({\n        speaker: ChatMessage.getSpeaker({actor}),\n        flavor: game.i18n.localize(\"CRLNGN_ROLLS.rollTypes.custom\")\n      });\n    } catch (error) {\n      ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula: rollKey}));\n    }\n  }\n};","import { MODULE, ROLL_TYPES } from '../constants/General.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog } from './GMRollConfigDialog.mjs';\nimport { SidebarUtil } from './SidebarUtil.mjs';\nimport { getPlayerOwner, isPlayerOwned, hasTokenInScene, updateCanvasTokenSelection, delay, buildRollTypes, NotificationManager } from './helpers/Helpers.mjs';\nimport { LOCAL_ROLL_HANDLERS } from './helpers/LocalRollHandlers.mjs';\n\n/**\n * Roll Requests Menu Application\n * Extends Foundry's ApplicationV2 with Handlebars support to provide a menu interface for GMs to request rolls from players\n */\nexport default class RollRequestsMenu extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2) {\n  /**\n   * Singleton instance of the menu\n   * @type {RollRequestsMenu|null}\n   */\n  static #instance = null;\n\n  constructor(options = {}) {\n    const log = LogUtil.method(RollRequestsMenu, 'constructor');\n    super(options);\n    \n    // Track selected actors and current state\n    this.selectedActors = new Set();\n    this.currentTab = 'pc'; // 'pc' or 'npc'\n    this.selectedRequestType = null;\n    this.isLocked = false; // Track lock state\n    // Get options expanded state from user flag\n    this.optionsExpanded = game.user.getFlag(MODULE.ID, 'menuOptionsExpanded') ?? false;\n    \n    // Initialize with actors from selected tokens\n    this._initializeFromSelectedTokens();\n  }\n\n  static DEFAULT_OPTIONS = {\n    id: 'crlngn-requests-menu',\n    classes: ['roll-requests-menu'],\n    tag: 'div',\n    window: {\n      frame: false,\n      resizable: false,\n      minimizable: false\n    },\n    position: null\n  };\n\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/requests-menus.hbs`\n    }\n  };\n\n  /**\n   * Prepare data for the template\n   */\n  async _prepareContext(options) {\n    const log = LogUtil.method(this, '_prepareContext');\n    const context = await super._prepareContext(options);\n    \n    // Get all actors and separate by ownership\n    const actors = game.actors.contents;\n    const pcActors = [];\n    const npcActors = [];\n    \n    // Get current scene to check for NPC tokens\n    const currentScene = game.scenes.active;\n    \n    for (const actor of actors) {\n      // Skip non-character actors\n      if (actor.type !== 'character' && actor.type !== 'npc') continue;\n      \n      const actorData = {\n        id: actor.id,\n        uuid: actor.uuid,\n        name: actor.name,\n        img: actor.img,\n        selected: this.selectedActors.has(actor.id),\n        crlngnStats: this._getActorStats(actor)\n      };\n      \n      // Check if owned by a player (not GM)\n      const isPlayerOwned = Object.entries(actor.ownership)\n        .some(([userId, level]) => {\n          const user = game.users.get(userId);\n          return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        });\n      \n      if (isPlayerOwned) {\n        pcActors.push(actorData);\n      } else {\n        // For NPCs, only include if they have a token in the current scene\n        if (currentScene) {\n          const hasTokenInScene = currentScene.tokens.some(token => token.actorId === actor.id);\n          if (hasTokenInScene) {\n            npcActors.push(actorData);\n          }\n        }\n      }\n    }\n    \n    // Get current settings\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Check if all actors in current tab are selected\n    const currentActors = this.currentTab === 'pc' ? pcActors : npcActors;\n    const selectAllOn = currentActors.length > 0 && \n      currentActors.every(actor => this.selectedActors.has(actor.id));\n    \n    // Build request types array for template\n    const requestTypes = [];\n    if (this.selectedActors.size > 0) {\n      for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n        requestTypes.push({\n          id: key,\n          name: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${option.name}`) || option.label,\n          rollable: option.subList == null,\n          hasSubList: !!option.subList,\n          selected: this.selectedRequestType === key\n        });\n      }\n    }\n    \n    // Build roll types array based on selected request type\n    const rollTypes = buildRollTypes(this.selectedRequestType, this.selectedActors);\n    \n    return {\n      ...context,\n      actors: currentActors,\n      currentTab: this.currentTab,\n      isPCTab: this.currentTab === 'pc',\n      isNPCTab: this.currentTab === 'npc',\n      selectedTab: this.currentTab,\n      rollRequestsEnabled,\n      skipDialogs,\n      selectAllOn,\n      hasSelectedActors: this.selectedActors.size > 0,\n      requestTypes,\n      rollTypes,\n      showNames: true, // You can make this configurable later\n      actorsLocked: this.isLocked,\n      optionsExpanded: this.optionsExpanded\n    };\n  }\n\n  /**\n   * Get formatted stats for an actor\n   */\n  _getActorStats(actor) {\n    const log = LogUtil.method(this, '_getActorStats');\n    const system = actor.system;\n    const stats = [];\n    \n    // HP\n    if (system.attributes?.hp) {\n      stats.push({\n        abbrev: 'HP',\n        value: system.attributes.hp.value\n      });\n    }\n    \n    // AC\n    if (system.attributes?.ac) {\n      stats.push({\n        abbrev: 'AC',\n        value: system.attributes.ac.value\n      });\n    }\n    \n    // Spell DC\n    if (system.attributes?.spelldc) {\n      stats.push({\n        abbrev: 'DC',\n        value: system.attributes.spelldc\n      });\n    }\n    \n    // Passive Perception\n    if (system.skills?.prc?.passive) {\n      stats.push({\n        abbrev: 'PP',\n        value: system.skills.prc.passive\n      });\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Called after the application is rendered\n   */\n  _onRender(context, options) {\n    const log = LogUtil.method(this, '_onRender');\n    super._onRender(context, options);\n    this._attachListeners();\n    \n    // Apply expanded state if saved\n    if (this.optionsExpanded) {\n      const optionsToggle = this.element.querySelector('.options-toggle');\n      const optionsElement = this.element.querySelector('li.options');\n      if (optionsToggle) {\n        optionsToggle.classList.add('expanded');\n      }\n      if (optionsElement) {\n        optionsElement.classList.add('expanded');\n      }\n    }\n    \n    // Add click outside listener with capture to catch events early\n    setTimeout(() => {\n      document.addEventListener('click', this._onClickOutside, true);\n    }, 100);\n    \n    // Hook into token control changes\n    this._tokenControlHook = Hooks.on('controlToken', this._onTokenControlChange.bind(this));\n  }\n  \n  /**\n   * Handle token control changes\n   */\n  _onTokenControlChange(token, controlled) {\n    const log = LogUtil.method(this, '_onTokenControlChange');\n    // Only process if menu is rendered\n    if (!this.rendered) return;\n    \n    // Ignore if we're programmatically updating tokens\n    if (this._ignoreTokenControl) return;\n    \n    // Debounce updates to avoid multiple renders when selecting multiple tokens\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n    }\n    \n    this._tokenUpdateTimeout = setTimeout(() => {\n      // Update selections from current controlled tokens\n      this._initializeFromSelectedTokens();\n      \n      // Re-render to update UI\n      this.render();\n      \n      this._tokenUpdateTimeout = null;\n    }, 100); // 100ms debounce\n  }\n  \n  /**\n   * Handle clicks outside the menu\n   */\n  _onClickOutside = (event) => {\n    const log = LogUtil.method(this, '_onClickOutside');\n    // Don't close if locked\n    if (this.isLocked) return;\n    \n    // Check if click was outside the menu\n    const menu = this.element;\n    if (!menu) return;\n    \n    // Check if the click started inside the menu (for drag operations)\n    if (event.target.closest('.roll-requests-menu')) return;\n    \n    // Check if the click target is the menu itself or any of its children\n    if (menu.contains(event.target)) return;\n    \n    // Check if click was on the roll request icon that toggles the menu\n    if (event.target.closest('#crlngn-requests-icon')) return;\n    \n    // Check if this is a dialog or other overlay\n    if (event.target.closest('.dialog, .app, .notification')) return;\n    \n    // If we got here, the click was outside - close the menu\n    this.close();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachListeners() {\n    const log = LogUtil.method(this, '_attachListeners');\n    \n    const html = this.element;\n    \n    // Settings toggles\n    html.querySelector('#crlngn-requests-toggle')?.addEventListener('change', this._onToggleRollRequests.bind(this));\n    html.querySelector('#crlngn-skip-dialogs')?.addEventListener('change', this._onToggleSkipDialogs.bind(this));\n    html.querySelector('#crlngn-actors-all')?.addEventListener('change', this._onToggleSelectAll.bind(this));\n    \n    // Lock toggle\n    html.querySelector('#crlngn-actors-lock')?.addEventListener('click', this._onToggleLock.bind(this));\n    \n    // Options toggle\n    html.querySelector('.options-toggle')?.addEventListener('click', this._onToggleOptions.bind(this));\n    \n    // Tab switching\n    const tabs = html.querySelectorAll('.actor-tab');\n    tabs.forEach(tab => {\n      tab.addEventListener('click', this._onTabClick.bind(this));\n    });\n    \n    // Actor selection - handle clicks on actor rows or select buttons\n    html.querySelectorAll('.actor').forEach(actor => {\n      actor.addEventListener('click', this._onActorClick.bind(this));\n    });\n    \n    html.querySelectorAll('.actor-select').forEach(selectBtn => {\n      selectBtn.addEventListener('click', this._onActorSelectClick.bind(this));\n    });\n    \n    // Request type selection - use event delegation for dynamic content\n    const requestTypesContainer = html.querySelector('.request-types');\n    if (requestTypesContainer) {\n      requestTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRequestTypeClick(customEvent);\n        }\n      });\n    }\n    \n    // Roll type selection - use event delegation for dynamic content\n    const rollTypesContainer = html.querySelector('.roll-types');\n    if (rollTypesContainer) {\n      rollTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRollTypeClick(customEvent);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle roll requests toggle\n   */\n  async _onToggleRollRequests(event) {\n    const log = LogUtil.method(this, '_onToggleRollRequests');\n    const SETTINGS = getSettings();\n    const enabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, enabled);\n    \n    // Update the icon in the chat controls\n    SidebarUtil.updateRollRequestsIcon(enabled);\n    \n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleSkipDialogs(event) {\n    const log = LogUtil.method(this, '_onToggleSkipDialogs');\n    const SETTINGS = getSettings();\n    const skip = event.target.checked;\n    await SettingsUtil.set(SETTINGS.skipDialogs.tag, skip);\n  }\n\n  /**\n   * Handle select all toggle\n   */\n  _onToggleSelectAll(event) {\n    const log = LogUtil.method(this, '_onToggleSelectAll');\n    const selectAll = event.target.checked;\n    \n    // Temporarily disable token control hook to avoid feedback loop\n    this._ignoreTokenControl = true;\n    \n    // Get the current actors based on the active tab\n    const actors = this.currentTab === 'pc' ? \n      game.actors.contents.filter(a => isPlayerOwned(a)) :\n      game.actors.contents.filter(a => !isPlayerOwned(a) && hasTokenInScene(a));\n    \n    // Update selection for all visible actors\n    actors.forEach(actor => {\n      if (selectAll) {\n        this.selectedActors.add(actor.id);\n        updateCanvasTokenSelection(actor.id, true);\n      } else {\n        this.selectedActors.delete(actor.id);\n        updateCanvasTokenSelection(actor.id, false);\n      }\n    });\n    \n    // Re-enable token control hook after a short delay\n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 200);\n    \n    // Re-render to update UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n  }\n  \n  /**\n   * Handle lock toggle\n   */\n  _onToggleLock(event) {\n    const log = LogUtil.method(this, '_onToggleLock');\n    event.preventDefault();\n    this.isLocked = !this.isLocked;\n    \n    // Update the icon - the currentTarget IS the icon element\n    const lockIcon = event.currentTarget;\n    lockIcon.classList.remove('fa-lock-keyhole', 'fa-lock-keyhole-open');\n    lockIcon.classList.add(this.isLocked ? 'fa-lock-keyhole' : 'fa-lock-keyhole-open');\n    \n  }\n  \n  /**\n   * Handle options toggle\n   */\n  async _onToggleOptions(event) {\n    const log = LogUtil.method(this, '_onToggleOptions');\n    event.preventDefault();\n    \n    // Toggle the state\n    this.optionsExpanded = !this.optionsExpanded;\n    \n    // Save state to user flag\n    await game.user.setFlag(MODULE.ID, 'menuOptionsExpanded', this.optionsExpanded);\n    \n    // Toggle expanded class on the clicked element\n    const optionsToggle = event.currentTarget || event.target.closest('.options-toggle');\n    if (optionsToggle) {\n      optionsToggle.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n    // Find the li.options sibling and toggle expanded class on it\n    const optionsElement = this.element.querySelector('li.options');\n    if (optionsElement) {\n      optionsElement.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n  }\n  \n  /**\n   * Initialize selected actors from currently selected tokens\n   */\n  _initializeFromSelectedTokens() {\n    const log = LogUtil.method(this, '_initializeFromSelectedTokens');\n    // Get controlled tokens\n    const controlledTokens = canvas.tokens?.controlled || [];\n    \n    // Clear existing selections first\n    this.selectedActors.clear();\n    \n    // Add actors from controlled tokens\n    for (const token of controlledTokens) {\n      if (token.actor) {\n        this.selectedActors.add(token.actor.id);\n        \n        // Set the current tab based on first selected token's actor type\n        if (this.selectedActors.size === 1) {\n          // Check if this is a PC or NPC\n          const isPC = isPlayerOwned(token.actor);\n          this.currentTab = isPC ? 'pc' : 'npc';\n        }\n      }\n    }\n    \n  }\n  \n\n  /**\n   * Handle tab click\n   */\n  async _onTabClick(event) {\n    const log = LogUtil.method(this, '_onTabClick');\n    const tab = event.currentTarget.dataset.tab;\n    if (tab === this.currentTab) return;\n    \n    // Clear selected actors when switching tabs\n    this.selectedActors.clear();\n    \n    // Also clear any canvas token selections\n    canvas.tokens?.releaseAll();\n    \n    // Reset selected request type since it may not apply to new tab\n    this.selectedRequestType = null;\n    \n    this.currentTab = tab;\n    await this.render();\n  }\n\n  /**\n   * Handle click on actor row\n   */\n  _onActorClick(event) {\n    const log = LogUtil.method(this, '_onActorClick');\n    // Ignore if clicking on the select button itself\n    if (event.target.closest('.actor-select')) return;\n    \n    const actorElement = event.currentTarget;\n    const actorId = actorElement.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Handle click on actor select button\n   */\n  _onActorSelectClick(event) {\n    const log = LogUtil.method(this, '_onActorSelectClick');\n    event.stopPropagation(); // Prevent triggering the actor row click\n    const actorId = event.currentTarget.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Toggle actor selection state\n   */\n  _toggleActorSelection(actorId) {\n    const log = LogUtil.method(this, '_toggleActorSelection');\n    // Temporarily disable token control hook to avoid feedback loop\n    this._ignoreTokenControl = true;\n    \n    if (this.selectedActors.has(actorId)) {\n      this.selectedActors.delete(actorId);\n      // Deselect token on canvas\n      updateCanvasTokenSelection(actorId, false);\n    } else {\n      this.selectedActors.add(actorId);\n      // Select token on canvas\n      updateCanvasTokenSelection(actorId, true);\n    }\n    \n    // Re-enable token control hook after a short delay\n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 100);\n    \n    // Re-render to update the UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    this._updateSelectAllState();\n  }\n  \n\n  /**\n   * Update request types visibility based on actor selection\n   */\n  _updateRequestTypesVisibility() {\n    const log = LogUtil.method(this, '_updateRequestTypesVisibility');\n    // Since we're now controlling visibility through template data,\n    // we need to re-render when actor selection changes\n    this.render();\n  }\n\n  /**\n   * Update select all checkbox state\n   */\n  _updateSelectAllState() {\n    const log = LogUtil.method(this, '_updateSelectAllState');\n    const selectAllCheckbox = this.element.querySelector('#crlngn-actors-all');\n    const currentActors = this.currentTab === 'pc' ? 'pc' : 'npc';\n    const checkboxes = this.element.querySelectorAll(`.${currentActors}-actors .actor-item input[type=\"checkbox\"]`);\n    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;\n    \n    selectAllCheckbox.checked = checkedCount > 0 && checkedCount === checkboxes.length;\n    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n  }\n\n  /**\n   * Handle request type click\n   */\n  async _onRequestTypeClick(event) {\n    const log = LogUtil.method(this, '_onRequestTypeClick');\n    const requestItem = event.currentTarget;\n    const requestType = requestItem.dataset.id;\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    \n    if (!rollOption) {\n      LogUtil.error('Unknown request type:', requestType);\n      return;\n    }\n    \n    // Toggle selection - if clicking the same type, deselect it\n    if (this.selectedRequestType === requestType) {\n      this.selectedRequestType = null;\n    } else {\n      this.selectedRequestType = requestType;\n    }\n    \n    // If this type has a sublist, re-render to show/hide roll types\n    if (rollOption.subList) {\n      await this.render();\n    } else if (this.selectedRequestType) {\n      // Direct roll without sublist (only if we just selected it)\n      this._triggerRoll(requestType, null);\n    }\n  }\n\n  // Note: _populateRollTypes method removed as we now handle this in _prepareContext\n\n  /**\n   * Handle roll type click\n   */\n  _onRollTypeClick(event) {\n    const log = LogUtil.method(this, '_onRollTypeClick');\n    const rollKey = event.currentTarget.dataset.id;\n    this._triggerRoll(this.selectedRequestType, rollKey);\n  }\n\n  /**\n   * Trigger the roll for selected actors\n   * @param {string} requestType - The type of roll request (e.g., 'skill', 'ability')\n   * @param {string} rollKey - The specific roll key (e.g., 'acr' for Acrobatics)\n   */\n  async _triggerRoll(requestType, rollKey) {\n    const log = LogUtil.method(this, '_triggerRoll');\n    const SETTINGS = getSettings();\n    const selectedActorIds = Array.from(this.selectedActors);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Safety check: Filter selected actors to only include those from current tab\n    const validActorIds = selectedActorIds.filter(actorId => {\n      const actor = game.actors.get(actorId);\n      if (!actor) return false;\n      \n      const isPC = isPlayerOwned(actor);\n      const isNPC = !isPC && hasTokenInScene(actor);\n      \n      // Only include actors that match the current tab\n      return (this.currentTab === 'pc' && isPC) || (this.currentTab === 'npc' && isNPC);\n    });\n    \n    // Get the roll option to get the actual method name\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    const rollMethodName = (rollOption?.name || requestType)?.toLowerCase();\n    \n    // Handle custom rolls with a dialog\n    if (rollMethodName === ROLL_TYPES.CUSTOM) {\n      const formula = await this._showCustomRollDialog();\n      if (!formula) return; // User cancelled\n      \n      // Store the custom formula as the rollKey\n      rollKey = formula;\n    }\n    \n    // Check for initiative rolls without active combat\n    if (rollMethodName === ROLL_TYPES.INITIATIVE_DIALOG && !game.combat) {\n      const createCombat = await Dialog.confirm({\n        title: game.i18n.localize(\"COMBAT.Create\"),\n        content: \"<p>\" + game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.noCombatActive\") + \"</p>\",\n        yes: () => true,\n        no: () => false,\n        defaultYes: true,\n        options: {\n          classes: [\"crlngn-rolls-dialog\"]\n        }\n      });\n      \n      if (createCombat) {\n        // Create a new combat encounter\n        const combat = await game.combats.documentClass.create({scene: game.scenes.active.id});\n        await combat.activate();\n        NotificationManager.notify('info', game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.combatCreated\"));\n      } else {\n        // User chose not to create combat, abort the roll\n        return;\n      }\n    }\n    \n    // Filter actors for initiative rolls based on existing initiative\n    let actorIdsToRoll = validActorIds;\n    if (rollMethodName === ROLL_TYPES.INITIATIVE_DIALOG && game.combat) {\n      const actors = validActorIds\n        .map(id => game.actors.get(id))\n        .filter(actor => actor);\n      \n      // Check which actors already have initiative\n      const actorsWithInitiative = [];\n      const actorIdsWithInitiative = new Set();\n      for (const actor of actors) {\n        const combatant = game.combat.getCombatantByActor(actor.id);\n        if (combatant && combatant.initiative !== null) {\n          actorsWithInitiative.push(actor.name);\n          actorIdsWithInitiative.add(actor.id);\n        }\n      }\n      \n      // If any actors already have initiative, confirm re-roll\n      if (actorsWithInitiative.length > 0) {\n        const reroll = await Dialog.confirm({\n          title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiativeTitle\"),\n          content: \"<p>\" + game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiative\", {\n            actors: actorsWithInitiative.join(\", \")\n          }) + \"</p>\",\n          yes: () => true,\n          no: () => false,\n          defaultYes: false,\n          options: {\n            classes: [\"crlngn-rolls-dialog\"]\n          }\n        });\n        \n        if (!reroll) {\n          // User chose not to re-roll, filter out actors with initiative\n          actorIdsToRoll = validActorIds.filter(id => !actorIdsWithInitiative.has(id));\n          \n          // If no actors left to roll, abort\n          if (actorIdsToRoll.length === 0) {\n            NotificationManager.notify('info', game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.allActorsHaveInitiative\"));\n            return;\n          }\n        } else {\n          // User chose to re-roll, clear initiative for actors that have it\n          for (const actorId of actorIdsWithInitiative) {\n            const combatant = game.combat.getCombatantByActor(actorId);\n            if (combatant) {\n              await combatant.update({ initiative: null });\n            }\n          }\n        }\n      }\n    }\n    \n    // Get the actual actors\n    let actors = actorIdsToRoll\n      .map(id => game.actors.get(id))\n      .filter(actor => actor);\n    \n    // Filter actors for death saves\n    if (rollMethodName === ROLL_TYPES.DEATH_SAVE) {\n      const actorsNeedingDeathSaves = [];\n      const actorsSkippingDeathSaves = [];\n      \n      for (const actor of actors) {\n        const hp = actor.system.attributes.hp?.value || 0;\n        const deathSaves = actor.system.attributes.death || {};\n        const successes = deathSaves.success || 0;\n        const failures = deathSaves.failure || 0;\n        \n        // Check if actor needs a death save\n        if (hp <= 0 && successes < 3 && failures < 3) {\n          actorsNeedingDeathSaves.push(actor);\n        } else {\n          actorsSkippingDeathSaves.push(actor.name);\n        }\n      }\n      \n      // Notify about actors that don't need death saves\n      if (actorsSkippingDeathSaves.length > 0) {\n        NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.actorsSkippingDeathSave\", {\n          actors: actorsSkippingDeathSaves.join(\", \")\n        }));\n      }\n      \n      // Update actors list to only include those needing death saves\n      actors = actorsNeedingDeathSaves;\n    }\n    \n    if (!actors.length) {\n      NotificationManager.notify('warn', \"No valid actors selected\");\n      return;\n    }\n    \n    // Separate PC and NPC actors\n    const pcActors = [];\n    const npcActors = [];\n    \n    for (const actor of actors) {\n      const owner = getPlayerOwner(actor);\n      if (owner) {\n        pcActors.push({ actor, owner });\n      } else {\n        npcActors.push(actor);\n      }\n    }\n    \n    // Get rollRequestsEnabled setting to determine default sendRequest value\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Show GM configuration dialog (unless skip dialogs is enabled)\n    let config = null;\n    if (!skipDialogs) {\n      // Use appropriate dialog based on roll type\n      const DialogClass = [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(rollMethodName) ? GMSkillToolConfigDialog : GMRollConfigDialog;\n      config = await DialogClass.getConfiguration(actors, rollMethodName, rollKey, { \n        skipDialogs,\n        defaultSendRequest: rollRequestsEnabled // Pass the setting as default \n      });\n      \n      \n      // User cancelled the dialog\n      if (!config) {\n        return;\n      }\n    } else {\n      // Use default configuration when skipping dialogs\n      config = {\n        advantage: false,\n        disadvantage: false,\n        situational: \"\",\n        parts: [],\n        rollMode: game.settings.get(\"core\", \"rollMode\"),\n        chatMessage: true,\n        isRollRequest: false,  // Don't intercept when rolling locally\n        skipDialog: true,  // Pass skipDialog as true when skipping\n        sendRequest: rollRequestsEnabled && pcActors.length > 0  // Only send if enabled AND there are PC actors\n      };\n      \n      // Death saves always have DC 10\n      if (rollMethodName === ROLL_TYPES.DEATH_SAVE) {\n        config.target = 10;\n      }\n    }\n    \n    // Handle PC actors - send roll requests (if sendRequest is true)\n    const successfulRequests = []; // Track successful requests for consolidated notification\n    const offlinePlayerActors = []; // Track offline player actors separately\n    \n    if (config.sendRequest) {\n      for (const { actor, owner } of pcActors) {\n        if (!owner.active) {\n          if(SettingsUtil.get(SETTINGS.showOfflineNotifications.tag)) {\n            NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.playerOffline\", { \n              player: owner.name \n            }));\n          }\n\n          // Track offline player actors separately to ensure dialog is skipped\n          offlinePlayerActors.push(actor);\n          continue;\n        }\n        \n        this._sendRollRequestToPlayer(actor, owner, rollMethodName, rollKey, config, true); // true = suppress individual notification\n        successfulRequests.push({ actor, owner });\n        \n        // Add a delay between roll requests to prevent lag\n        await delay(100);\n      }\n      \n      // Send consolidated notification for all successful requests\n      if (successfulRequests.length > 0) {\n        this._sendConsolidatedNotification(successfulRequests, rollMethodName, rollKey);\n      }\n    } else {\n      // If not sending requests, add PC actors to NPC list to roll locally\n      npcActors.push(...pcActors.map(({ actor }) => actor));\n    }\n    \n    // Handle offline player actors - roll locally without dialog\n    if (offlinePlayerActors.length > 0) {\n      // Force skip dialog for offline players\n      const offlineConfig = { ...config, skipDialog: true };\n      await this._handleNPCRolls(offlinePlayerActors, rollMethodName, rollKey, offlineConfig);\n    }\n    \n    // Handle NPC actors - roll locally\n    if (npcActors.length > 0) {\n      // Ensure skipDialog is passed correctly for local NPC rolls\n      const npcConfig = { ...config };\n      // Always skip individual dialogs for local rolls when we've already configured them\n      // Either through the GM dialog (!skipDialogs) or when skipDialogs is true\n      npcConfig.fastForward = true;  // Use fastForward for NPC rolls\n      npcConfig.skipDialog = true;\n      await this._handleNPCRolls(npcActors, rollMethodName, rollKey, npcConfig);\n    }\n    \n    // Close the menu after all rolls are complete\n    // Add a small delay to ensure async operations complete\n    setTimeout(() => this.close(), 500);\n  }\n  \n  \n  /**\n   * Send a roll request to a player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config - Roll configuration from dialog\n   * @param {boolean} suppressNotification - If true, don't show individual notification\n   */\n  _sendRollRequestToPlayer(actor, owner, requestType, rollKey, config, suppressNotification = false) {\n    const log = LogUtil.method(this, '_sendRollRequestToPlayer');\n    const SETTINGS = getSettings();\n    \n    // Normalize requestType to lowercase for consistent comparisons\n    const normalizedRequestType = requestType?.toLowerCase();\n    \n    // (e.g., \"abilitycheck\", \"savingthrow\")\n    let rollType = normalizedRequestType;\n    \n    // Special mapping for compound types that need to map to their base type\n    if (normalizedRequestType === ROLL_TYPES.ABILITY_CHECK) {\n      rollType = ROLL_TYPES.ABILITY;\n    } else if (normalizedRequestType === ROLL_TYPES.SAVING_THROW) {\n      rollType = ROLL_TYPES.SAVE;\n    } else if (normalizedRequestType === ROLL_TYPES.INITIATIVE_DIALOG) {\n      rollType = ROLL_TYPES.INITIATIVE;\n    }\n    \n    // Build the request data according to Phase 1 spec\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      activityId: null,  // Menu-initiated rolls don't use activities\n      config: {\n        rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        advantage: config.advantage || false,\n        disadvantage: config.disadvantage || false,\n        situational: config.situational || \"\",\n        parts: config.parts || [],\n        chatMessage: config.chatMessage !== false,\n        target: config.target,  // DC value if provided\n        ability: config.ability,  // Ability override for skills/tools\n        attackMode: config.attackMode,  // Attack mode for attack rolls\n        rollTitle: config.rollTitle  // Title from the dialog window\n      },\n      skipDialog: config.skipDialog || false,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    \n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    if (!suppressNotification) {\n      NotificationManager.notify('info', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent\", { \n        player: owner.name,\n        actor: actor.name \n      }));\n    }\n  }\n  \n  /**\n   * Send a consolidated notification for multiple roll requests\n   * @param {Array} successfulRequests - Array of {actor, owner} objects\n   * @param {string} rollMethodName - The type of roll being requested\n   * @param {string} rollKey - The specific roll key (if applicable)\n   */\n  _sendConsolidatedNotification(successfulRequests, rollMethodName, rollKey) {\n    const log = LogUtil.method(this, '_sendConsolidatedNotification');\n    // Group requests by player\n    const requestsByPlayer = {};\n    for (const { actor, owner } of successfulRequests) {\n      if (!requestsByPlayer[owner.id]) {\n        requestsByPlayer[owner.id] = {\n          player: owner,\n          actors: []\n        };\n      }\n      requestsByPlayer[owner.id].actors.push(actor);\n    }\n    \n    // Get roll type name for display\n    // Find the option key that matches this rollMethodName\n    let rollOptionKey = null;\n    for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n      if (option.name === rollMethodName) {\n        rollOptionKey = key;\n        break;\n      }\n    }\n    \n    const rollTypeKey = rollMethodName;\n    let rollTypeName = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollTypeKey}`) || rollTypeKey;\n    \n    // Add specific roll details if applicable\n    if (rollKey) {\n      const normalizedRollTypeKey = rollTypeKey.toLowerCase();\n      if (normalizedRollTypeKey === ROLL_TYPES.SKILL) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.SAVING_THROW) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.ABILITY_CHECK) {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (normalizedRollTypeKey === ROLL_TYPES.TOOL) {\n        // Try to get tool name from enrichmentLookup\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          rollTypeName = `${rollTypeName} (${toolItem?.name || rollKey})`;\n        } else {\n          rollTypeName = `${rollTypeName} (${rollKey})`;\n        }\n      } else if (normalizedRollTypeKey === ROLL_TYPES.CUSTOM) {\n        rollTypeName = `${rollTypeName}: ${rollKey}`;\n      }\n    }\n    \n    // Use NotificationManager for consolidated roll request notifications\n    NotificationManager.notifyRollRequestsSent(requestsByPlayer, rollTypeName);\n  }\n  \n  /**\n   * Handle rolling for NPC actors locally\n   * @param {Actor[]} actors \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} dialogConfig - Configuration from GM dialog\n   */\n  async _handleNPCRolls(actors, requestType, rollKey, dialogConfig) {\n    const log = LogUtil.method(this, '_handleNPCRolls');\n    // Build config for local rolls\n    const config = {\n      advantage: dialogConfig.advantage || false,\n      disadvantage: dialogConfig.disadvantage || false,\n      situational: dialogConfig.situational || \"\",\n      parts: dialogConfig.parts || [],\n      rollMode: dialogConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      fastForward: dialogConfig.skipDialog || false,\n      skipDialog: dialogConfig.skipDialog || false,  // Add skipDialog flag\n      chatMessage: dialogConfig.chatMessage !== false,\n      isRollRequest: false,  // Always false for local rolls to prevent interception\n      target: dialogConfig.target,  // DC value if provided\n      ability: dialogConfig.ability,  // Ability override for skills/tools\n      attackMode: dialogConfig.attackMode  // Attack mode for attack rolls\n    };\n    \n    // Roll for each NPC with a small delay between rolls\n    for (const actor of actors) {\n      await this._executeActorRoll(actor, requestType, rollKey, config);\n      // Delay between rolls to prevent lag and improve chat readability\n      await delay(100);\n    }\n  }\n  \n  /**\n   * Execute a roll for a specific actor\n   * @param {Actor} actor \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config \n   */\n  async _executeActorRoll(actor, requestType, rollKey, config) {\n    const log = LogUtil.method(this, '_executeActorRoll');\n    try {\n      // Normalize the requestType to ensure case matching\n      const normalizedType = requestType.toLowerCase();\n      \n      // Use the local roll handler for the requested roll type\n      const handler = LOCAL_ROLL_HANDLERS[normalizedType];\n      if (handler) {\n        await handler(actor, rollKey, config);\n      } else {\n        NotificationManager.notify('warn', `Unknown roll type: ${requestType}`);\n      }\n    } catch (error) {\n      NotificationManager.notify('error', game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollError\", { \n        actor: actor.name \n      }));\n    }\n  }\n\n  /**\n   * Clean up when closing\n   */\n  async _onClose(options) {\n    const log = LogUtil.method(this, '_onClose');\n    await super._onClose(options);\n    \n    // Reset state\n    this.selectedActors.clear();\n    this.selectedRequestType = null;\n    \n    // Remove click outside listener (with capture flag to match addEventListener)\n    document.removeEventListener('click', this._onClickOutside, true);\n    \n    // Remove token control hook\n    if (this._tokenControlHook) {\n      Hooks.off('controlToken', this._tokenControlHook);\n      this._tokenControlHook = null;\n    }\n    \n    // Clear any pending token update timeout\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n      this._tokenUpdateTimeout = null;\n    }\n  }\n\n  /**\n   * Override render positioning to use CSS instead of inline styles\n   */\n  setPosition(position={}) {\n    const log = LogUtil.method(this, 'setPosition');\n    // Don't set any inline position styles - let CSS handle it\n    return this;\n  }\n  \n  /**\n   * Show custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  async _showCustomRollDialog() {\n    const log = LogUtil.method(this, '_showCustomRollDialog');\n    return new Promise(async (resolve) => {\n      // Render the template\n      const content = await renderTemplate(`modules/${MODULE.ID}/templates/custom-roll-dialog.hbs`, {\n        formula: \"\",\n        readonly: false\n      });\n      \n      const dialog = new Dialog({\n        title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.customRollTitle\"),\n        content,\n        buttons: {\n          roll: {\n            icon: '<i class=\"fas fa-dice-d20\"></i>',\n            label: game.i18n.localize(\"Roll\"),\n            callback: (html) => {\n              const formulaElement = html[0] || html;\n              const formula = formulaElement.querySelector('#custom-roll-formula').value.trim();\n              resolve(formula || null);\n            }\n          },\n          cancel: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: game.i18n.localize(\"Cancel\"),\n            callback: () => resolve(null)\n          }\n        },\n        default: \"roll\",\n        render: (html) => {\n          const htmlElement = html[0] || html;\n          const formulaInput = htmlElement.querySelector('#custom-roll-formula');\n          const diceCounts = {};\n          \n          // Handle dice button clicks\n          htmlElement.querySelectorAll('.dice-button').forEach(button => {\n            button.addEventListener('click', (event) => {\n              const die = event.currentTarget.dataset.die;\n              diceCounts[die] = (diceCounts[die] || 0) + 1;\n              \n              // Build formula from dice counts\n              const parts = [];\n              for (const [dieType, count] of Object.entries(diceCounts)) {\n                if (count > 0) {\n                  parts.push(`${count}${dieType}`);\n                }\n              }\n              formulaInput.value = parts.join(' + ');\n            });\n          });\n        }\n      }, {\n        classes: [\"crlngn-rolls-dialog\", \"crlngn-custom-roll-dialog\"]\n      });\n      \n      dialog.render(true);\n    });\n  }\n\n  /**\n   * Toggle the roll requests menu open/closed\n   * @static\n   */\n  static toggle() {\n    const log = LogUtil.method(RollRequestsMenu, 'toggle');\n    if (!this.#instance) {\n      this.#instance = new RollRequestsMenu();\n      this.#instance.render(true);\n    } else {\n      if (this.#instance.rendered) {\n        this.#instance.close();\n      } else {\n        this.#instance._initializeFromSelectedTokens();\n        this.#instance.render(true);\n      }\n    }\n  }\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\n\n/**\n * Utility class for managing sidebar controls\n */\nexport class SidebarUtil {\n  /**\n   * Add the roll request bolt icon to sidebar\n   * @param {SidebarTab} app - The sidebar tab application\n   * @param {jQuery} html - The rendered HTML\n   * @param {Object} options - Render options\n   */\n  static addSidebarControls(app, html, options) {\n    if (!game.user.isGM || app.id !== \"chat\") return;\n    \n    const htmlElement = html[0] || html;\n    \n    // Find the chat controls container\n    const chatControls = htmlElement.querySelector(\"#chat-controls\");\n    if (!chatControls || chatControls.querySelector('.roll-requests-icon')) {\n      return;\n    }\n    \n    // Get current settings to determine initial state\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Create the roll request icon\n    const rollRequestIcon = document.createElement('a');\n    rollRequestIcon.id = \"crlngn-requests-icon\";\n    rollRequestIcon.setAttribute(\"data-tooltip-direction\", \"RIGHT\");\n    rollRequestIcon.className = `chat-control-icon roll-requests-icon${rollRequestsEnabled ? ' active' : ''}`;\n    rollRequestIcon.title = game.i18n.localize('CRLNGN_ROLLS.ui.menus.rollRequestsTitle');\n    rollRequestIcon.innerHTML = `<i class=\"fas fa-bolt${rollRequestsEnabled ? '' : '-slash'}\"></i>`;\n    \n    // Insert before the d20 dice icon\n    const firstChatControlIcon = chatControls.querySelector('.chat-control-icon');\n    if (firstChatControlIcon) {\n      firstChatControlIcon.parentNode.insertBefore(rollRequestIcon, firstChatControlIcon);\n    } else {\n      chatControls.insertBefore(rollRequestIcon, chatControls.firstChild);\n    }\n    \n    // Add click listener\n    rollRequestIcon.addEventListener(\"click\", () => {\n      RollRequestsMenu.toggle();\n    });\n  }\n  \n  /**\n   * Update the roll requests icon based on enabled state\n   * @param {boolean} enabled - Whether roll requests are enabled\n   */\n  static updateRollRequestsIcon(enabled) {\n    const icon = document.querySelector('#crlngn-requests-icon i');\n    if (icon) {\n      icon.className = `fas fa-bolt${enabled ? '' : '-slash'}`;\n    }\n  }\n}","import { HOOKS_CORE, HOOKS_DND5E } from \"../constants/Hooks.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { RollInterceptor } from \"./RollInterceptor.mjs\";\nimport { updateSidebarClass, isSidebarExpanded } from \"./helpers/Helpers.mjs\";\nimport { SidebarUtil } from \"./SidebarUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing all module hooks in one place\n */\nexport class HooksUtil {\n  /**\n   * Registered hook IDs for cleanup\n   * @type {Map<string, number>}\n   */\n  static registeredHooks = new Map();\n  \n  /**\n   * Initialize main module hooks\n   */\n  static initialize() {\n    Hooks.once(HOOKS_CORE.INIT, this._onInit.bind(this));\n    Hooks.once(HOOKS_CORE.READY, this._onReady.bind(this));\n  }\n  \n  /**\n   * Triggered when Foundry initializes\n   */\n  static _onInit() {\n    const SETTINGS = getSettings();\n    document.body.classList.add(\"crlngn-rolls\");\n    SettingsUtil.registerSettings();\n    DiceConfigUtil.initialize();\n    \n    // Register sidebar control hook\n    this._registerHook(HOOKS_CORE.RENDER_SIDEBAR_TAB, this._onRenderSidebarTab.bind(this));\n  }\n  \n  /**\n   * Triggered when Foundry is ready (fully loaded)\n   */\n  static _onReady() {\n    const SETTINGS = getSettings();\n    const isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n    if (isDebugOn) {\n      CONFIG.debug.hooks = true;\n    }\n    RollInterceptor.initialize();\n    this._registerDnd5eHooks();\n\n    if (game.user.isGM) {\n      this._registerGMHooks();\n    }else{\n      DiceConfigUtil.getDiceConfig();\n    }\n    updateSidebarClass(isSidebarExpanded());\n  }\n  \n  /**\n   * Register D&D5e specific hooks\n   */\n  static _registerDnd5eHooks() {\n    this._registerHook(HOOKS_DND5E.POST_ROLL_CONFIG, this._onPostRollConfig.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessage.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessageFlavor.bind(this));\n    this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderRollConfigDialog.bind(this));\n    // this._registerHook(HOOKS_DND5E.PRE_CONFIGURE_INITIATIVE, this._onPreConfigureInitiative.bind(this));\n  }\n  \n  /**\n   * Register GM-specific hooks\n   */\n  static _registerGMHooks() {\n    this._registerHook(HOOKS_CORE.USER_CONNECTED, this._onUserConnected.bind(this));\n    \n    // Request dice config from all active users\n    game.users.forEach(user => {\n      this._onUserConnected(user);\n    });\n  }\n  \n  /**\n   * Handle data after roll configuration\n   */\n  static _onPostRollConfig(rolls, config, dialog, message) {\n    if (config._showRequestedBy && rolls.length > 0) {\n      message.data = message.data || {};\n      message.data._showRequestedBy = true;\n      message.data._requestedBy = config._requestedBy;\n    }\n  }\n  \n  /**\n   * Handle data before creating chat message for requested rolls\n   */\n  static _onPreCreateChatMessage(chatMessage, data, options, userId) {\n    if (data._showRequestedBy && data.rolls?.length > 0) {\n      const requestedBy = data._requestedBy || 'GM';\n      const requestedText = game.i18n.format('CRLNGN_ROLL_REQUESTS.chat.requestedBy', { gm: requestedBy });\n      \n      const currentFlavor = data.flavor || '';\n      data.flavor = currentFlavor ? `${currentFlavor} ${requestedText}` : requestedText;\n    }\n  }\n  \n  /**\n   * Handle flavor data before creating chat message\n   */\n  static _onPreCreateChatMessageFlavor(message, data, options, userId) {\n    // Check if this is a roll message with our custom flavor\n    if (data.rolls?.length > 0 && data.rolls[0]) {\n      try {\n        // The roll data includes the options directly\n        const rollData = data.rolls[0];\n        if (rollData.options?._customFlavor) {\n          data.flavor = rollData.options._customFlavor;\n        }\n      } catch (error) {\n        // Silently ignore errors\n      }\n    }\n  }\n  \n  /**\n   * Triggered whenever roll configuration dialog is rendered. \n   * Used to add custom situational bonus from data, since the default DnD5e dialog does not seem to handle that\n   */\n  static _onRenderRollConfigDialog(app, html, data) {\n    LogUtil.log(\"_onRenderRollConfigDialog triggered\", [{\n      app,\n      config: app.config,\n      rolls: app.config?.rolls,\n      situational: app.config?.situational,\n      bonus: app.config?.bonus,\n      data\n    }]);\n\n    \n    // Do not continue if we've already triggered\n    if (app._situationalTriggered) return;\n\n    // if(app.config?.rolls?.[0]?.data?.situational){\n    //   app.config.situational = app.config.rolls[0].data.situational;\n    //   app.config.bonus = app.config.rolls[0].data.situational;\n    // }\n    \n    // Does the dialog have a situational input field?\n    const situationalInputs = html.querySelectorAll('input[name*=\"situational\"]');\n    LogUtil.log(\"Found situational inputs:\", [situationalInputs.length]);\n    \n    let hasTriggered = false;\n    app.config.bonus = app.config.bonus || app.config.rolls[0].data.situational;\n    \n    situationalInputs.forEach((input, index) => {\n      LogUtil.log(`Situational input ${index}:`, [{\n        name: input.name,\n        value: input.value,\n        type: input.type\n      }]);\n      \n      // check if we need to populate the value\n      if (!input.value && (app.config?.bonus || app.config?.rolls?.[0]?.data?.situational) && app.config?.isConcentration) {\n        LogUtil.log(\"Populating concentration situational bonus:\", app.config.bonus);\n        input.value = app.config.bonus || app.config.rolls[0].data.situational;\n        hasTriggered = true;\n      }\n      \n      if (input.value && !hasTriggered) {\n        // Apply flag to prevent re-render loop\n        app._situationalTriggered = true;\n        hasTriggered = true;\n        \n        // Dispatch a change event to trigger formula update\n        setTimeout(() => {\n          input.dispatchEvent(new Event('change', {\n            bubbles: true,\n            cancelable: false\n          }));\n          \n          // Clear the situational value from the roll config data to prevent re-population\n          if (app.config?.rolls?.[0]?.data) {\n            delete app.config.rolls[0].data.situational;\n          }\n        }, 50);\n      }\n    });\n  }\n  \n  /**\n   * Request dice configuration from the connected user\n   */\n  static _onUserConnected(user) {\n    if (user.active && user.id !== game.user.id) {\n      DiceConfigUtil.requestDiceConfigFromUser(user.id);\n    }\n  }\n  \n  /**\n   * Handle render sidebar tab\n   */\n  static _onRenderSidebarTab(app, html, options) {\n    SidebarUtil.addSidebarControls(app, html, options);\n  }\n  \n  /**\n   * Handle pre-configure initiative hook to add situational bonus\n   */\n  static _onPreConfigureInitiative(actor, config) {\n    // Check if there's a stored situational bonus for this actor\n    if (actor._initiativeSituationalBonus) {\n      LogUtil.log(\"Adding situational bonus to initiative:\", [\n        \"actor:\", actor.name,\n        \"situational:\", actor._initiativeSituationalBonus,\n        \"config before:\", config\n      ]);\n      \n      // Initialize rolls array if needed\n      if (!config.rolls || config.rolls.length === 0) {\n        config.rolls = [{\n          parts: [],\n          data: {},\n          options: {}\n        }];\n      }\n      \n      // Add situational bonus to the roll data\n      // config.situational = actor._initiativeSituationalBonus;\n      // config.bonus = actor._initiativeSituationalBonus;\n      config.rolls[0].data.situational = actor._initiativeSituationalBonus;\n      \n      LogUtil.log(\"Flash Rolls 5e | Initiative config after adding situational:\", config);\n    }\n  }\n  \n  /**\n   * Register a hook and track it\n   * @param {string} hookName - The hook name\n   * @param {Function} handler - The handler function\n   * @private\n   */\n  static _registerHook(hookName, handler) {\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.set(`${hookName}_${hookId}`, hookId);\n    return hookId;\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterAll() {\n    this.registeredHooks.forEach((hookId, key) => {\n      const hookName = key.split('_')[0];\n      Hooks.off(hookName, hookId);\n    });\n    this.registeredHooks.clear();\n  }\n  \n  /**\n   * Check if a hook is registered\n   * @param {string} hookName - The hook name to check\n   * @returns {boolean}\n   */\n  static isRegistered(hookName) {\n    for (const key of this.registeredHooks.keys()) {\n      if (key.startsWith(`${hookName}_`)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}","import { ROLL_TYPES, MODULE_ID } from \"../../constants/General.mjs\";\nimport { ActivityUtil } from \"../ActivityUtil.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\n\n/**\n * Helper functions for roll handling\n */\nexport const RollHelpers = {\n  /**\n   * Add situational bonus to a roll configuration\n   * @param {Object} config - The roll configuration\n   * @param {string} situational - The situational bonus formula\n   * @returns {Object} The modified config\n   */\n  addSituationalBonus(config, situational) {\n    if (situational) {\n      LogUtil.log(\"Flash Rolls 5e | Adding situational bonus:\", [situational, \"to config:\", config]);\n      config.bonus = situational;\n      config.situational = situational;\n      \n      // For ability checks and saves, we need the rolls array for the dialog\n      if (!config.rolls || config.rolls.length === 0) {\n        config.rolls = [{\n          parts: [],\n          data: {},\n          options: {}\n        }];\n        // Only add to rolls array if we created it\n        config.rolls[0].data.situational = situational;\n      }\n      \n      LogUtil.log(\"Flash Rolls 5e | Config after adding bonus:\", [config]);\n    }\n    return config;\n  },\n\n  /**\n   * Build base configuration for ability-based rolls\n   * @param {Object} requestData - The roll request data\n   * @param {Object} rollConfig - Base roll configuration\n   * @returns {Object} The ability configuration\n   */\n  buildAbilityConfig(requestData, rollConfig) {\n    return {\n      ability: requestData.rollKey,\n      advantage: requestData.config.advantage || false,\n      disadvantage: requestData.config.disadvantage || false,\n      target: requestData.config.target,\n      isRollRequest: true,\n      _showRequestedBy: true,\n      _requestedBy: requestData.config.requestedBy || 'GM'\n    };\n  },\n\n  /**\n   * Execute an activity-based roll\n   * @param {Actor} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {Object} requestData - The roll request data\n   * @param {Object} rollConfig - Roll configuration\n   * @param {Object} dialogConfig - Dialog configuration\n   * @param {Object} messageConfig - Message configuration\n   */\n  async executeActivityRoll(actor, rollType, requestData, rollConfig, dialogConfig, messageConfig) {\n    if (requestData.rollKey) {\n      await ActivityUtil.executeActivityRoll(\n        actor, \n        rollType, \n        requestData.rollKey, \n        requestData.activityId, \n        {\n          ...rollConfig,\n          dialog: dialogConfig,\n          message: messageConfig\n        }\n      );\n    }\n  },\n\n  /**\n   * Handle a custom roll, creating a custom dialog\n   * @param {Actor} actor - The actor performing the roll\n   * @param {Object} requestData - The roll request data\n   */\n  async handleCustomRoll(actor, requestData) {\n    const formula = requestData.rollKey; // Formula is stored in rollKey\n    \n    // Render the template with readonly formula\n    const content = await renderTemplate(`modules/${MODULE_ID}/templates/custom-roll-dialog.hbs`, {\n      formula: formula,\n      readonly: true\n    });\n    \n    const dialog = new Dialog({\n      title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.customRollTitle\"),\n      content,\n      buttons: {\n        roll: {\n          icon: '<i class=\"fas fa-dice-d20\"></i>',\n          label: game.i18n.localize(\"Roll\"),\n          callback: async () => {\n            try {\n              // Create and evaluate the roll\n              const roll = new Roll(formula, actor.getRollData());\n              await roll.evaluate({async: true});\n              \n              // Post to chat\n              await roll.toMessage({\n                speaker: ChatMessage.getSpeaker({actor}),\n                flavor: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${ROLL_TYPES.CUSTOM}`)\n              });\n            } catch (error) {\n              ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula}));\n            }\n          }\n        },\n        cancel: {\n          icon: '<i class=\"fas fa-times\"></i>',\n          label: game.i18n.localize(\"Cancel\")\n        }\n      },\n      default: \"roll\"\n    }, {\n      classes: [\"crlngn-rolls-dialog\", \"crlngn-custom-roll-dialog\"]\n    });\n    \n    dialog.render(true);\n  }\n};\n\n/**\n * Roll handlers for each roll type\n */\nexport const ROLL_HANDLERS = {\n  [ROLL_TYPES.ABILITY]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildAbilityConfig(requestData, rollConfig);\n    RollHelpers.addSituationalBonus(config, requestData.config.situational);\n    await actor.rollAbilityCheck(config, dialogConfig, messageConfig);\n  },\n  \n  // Alias for ABILITY_CHECK\n  [ROLL_TYPES.ABILITY_CHECK]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return ROLL_HANDLERS[ROLL_TYPES.ABILITY](actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.SAVE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildAbilityConfig(requestData, rollConfig);\n    RollHelpers.addSituationalBonus(config, requestData.config.situational);\n    await actor.rollSavingThrow(config, dialogConfig, messageConfig);\n  },\n  \n  // Alias for SAVING_THROW\n  [ROLL_TYPES.SAVING_THROW]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return ROLL_HANDLERS[ROLL_TYPES.SAVE](actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.SKILL]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = {\n      ...rollConfig,\n      skill: requestData.rollKey,\n      chooseAbility: true\n    };\n    if (requestData.config.ability) {\n      config.ability = requestData.config.ability;\n    }\n    await actor.rollSkill(config, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.TOOL]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = {\n      ...rollConfig,\n      tool: requestData.rollKey,\n      chooseAbility: true\n    };\n    if (requestData.config.ability) {\n      config.ability = requestData.config.ability;\n    }\n    await actor.rollToolCheck(config, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.CONCENTRATION]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    // Set legacy = false to prevent the config from being cleared\n    rollConfig.legacy = false;\n    // Use the same approach as saving throws\n    RollHelpers.addSituationalBonus(rollConfig, requestData.config.situational);\n    await actor.rollConcentration(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.ATTACK]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.executeActivityRoll(actor, ROLL_TYPES.ATTACK, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.DAMAGE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.executeActivityRoll(actor, ROLL_TYPES.DAMAGE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.ITEM_SAVE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.executeActivityRoll(actor, ROLL_TYPES.ITEM_SAVE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.INITIATIVE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    // Initiative rolls require an active combat\n    if (!game.combat) {\n      ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n      return;\n    }\n    \n    // rollInitiativeDialog expects rollOptions with specific structure\n    // const rollOptions = {\n    //   advantage: rollConfig.advantage,\n    //   disadvantage: rollConfig.disadvantage,\n    //   bonus: requestData.config.situational || rollConfig.bonus,\n    //   situational: requestData.config.situational || rollConfig.bonus,\n    // };\n    // Debug: Test what getInitiativeRollConfig returns\n    // const testConfig = actor.getInitiativeRollConfig(rollOptions);\n    // LogUtil.log(\"Initiative roll config test:\", [\n    //   \"rollOptions:\", rollOptions,\n    //   \"getInitiativeRollConfig result:\", testConfig,\n    //   \"parts:\", testConfig?.parts,\n    //   \"data:\", testConfig?.data,\n    //   \"options:\", testConfig?.options\n    // ]);\n    const rollOptions = actor.getInitiativeRollConfig(rollConfig);\n    RollHelpers.addSituationalBonus(rollOptions, requestData.config.situational);\n    \n    await actor.rollInitiativeDialog(rollOptions);\n  },\n  \n  // Alias for INITIATIVE_DIALOG\n  [ROLL_TYPES.INITIATIVE_DIALOG]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    return ROLL_HANDLERS[ROLL_TYPES.INITIATIVE](actor, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.DEATH_SAVE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    // Set legacy = false to prevent the config from being cleared\n    rollConfig.legacy = false;\n    RollHelpers.addSituationalBonus(rollConfig, requestData.config.situational);\n    await actor.rollDeathSave(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.HIT_DIE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    rollConfig.denomination = requestData.rollKey;\n    await actor.rollHitDie(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.CUSTOM]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.handleCustomRoll(actor, requestData);\n  }\n};","import { ROLL_TYPES } from \"../constants/General.mjs\";\nimport { getRollTypeDisplay, applyTargetTokens, NotificationManager } from \"./helpers/Helpers.mjs\";\nimport { ROLL_HANDLERS } from \"./helpers/RollHandlers.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for handling roll requests from GM to players\n */\nexport class RollRequestUtil {\n  \n  /**\n   * Handle roll request from GM on player side\n   * @param {Object} requestData - The roll request data\n   */\n  static async handleRequest(requestData) {\n    const log = LogUtil.method(RollRequestUtil, 'handleRequest');\n    log('handling roll request', [requestData]);\n    // Only handle on player side\n    if (game.user.isGM) return;\n    \n    // Get the actor\n    const actor = game.actors.get(requestData.actorId);\n    if (!actor || !actor.isOwner) {\n      return;\n    }\n    \n    // Apply GM targets if configured\n    if (requestData.preserveTargets && \n        requestData.targetTokenIds?.length > 0 && \n        game.user.targets.size === 0) {\n      applyTargetTokens(requestData.targetTokenIds);\n    }\n    \n    // Add to pending notifications for batching\n    NotificationManager.notify('info', '', {\n      batch: true,\n      batchData: {\n        actor: actor.name,\n        rollType: requestData.rollType,\n        rollKey: requestData.rollKey,\n        gm: requestData.config.requestedBy || 'GM'\n      }\n    });\n    \n    // Execute the requested roll\n    RollRequestUtil.executeRequest(actor, requestData);\n  }\n  \n  /**\n   * Execute a roll based on the request data\n   * @param {Actor} actor \n   * @param {Object} requestData \n   */\n  static async executeRequest(actor, requestData) {\n    const log = LogUtil.method(RollRequestUtil, 'executeRequest');\n    log('executing roll request', [actor, requestData]);\n    try {\n      // Normalize rollType to lowercase for consistent comparisons\n      const normalizedRollType = requestData.rollType?.toLowerCase();\n      \n      const rollConfig = {\n        advantage: requestData.config.advantage || false,\n        disadvantage: requestData.config.disadvantage || false,\n        isRollRequest: true, // Custom flag to prevent re-interception\n        target: requestData.config.target, // DC value\n        _showRequestedBy: true, // Flag to show who requested the roll in chat\n        _requestedBy: requestData.config.requestedBy || 'GM' // Who requested the roll\n      };\n      \n      // Add situational bonus if provided\n      if (requestData.config.situational) {\n        rollConfig.bonus = requestData.config.situational;\n      }\n      \n      // Add ability for skills/tools if provided\n      if (requestData.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(normalizedRollType)) {\n        rollConfig.ability = requestData.config.ability;\n      }\n      \n      // Dialog configuration (second parameter)\n      const dialogConfig = {\n        configure: !requestData.skipDialog,\n        options: {\n          defaultButton: requestData.config.advantage ? 'advantage' : \n                         requestData.config.disadvantage ? 'disadvantage' : 'normal',\n          // Add dialog window configuration\n          window: {\n            title: requestData.config.rollTitle || getRollTypeDisplay(normalizedRollType, requestData.rollKey),\n            subtitle: actor.name\n          }\n        }\n      };\n      \n      // Message configuration (third parameter)\n      const messageConfig = {\n        rollMode: requestData.config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        create: requestData.config.chatMessage !== false\n      };\n      \n      // Use the roll handler for the requested roll type\n      const handler = ROLL_HANDLERS[normalizedRollType];\n      if (handler) {\n        await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        LogUtil.warn(`No handler found for roll type: ${normalizedRollType}`);\n        NotificationManager.notify('warn', game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollError', { \n          actor: actor.name || 'Unknown Actor'\n        }));\n      }\n    } catch (error) {\n      LogUtil.error('Error executing roll request:', error);\n      NotificationManager.notify('error', game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollError', { \n        actor: actor.name || 'Unknown Actor'\n      }));\n    }\n  }\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SOCKET_CALLS } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { HooksUtil } from \"./HooksUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { RollRequestUtil } from \"./RollRequestUtil.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    SocketUtil.initialize(Main.registerSocketCalls);\n    HooksUtil.initialize();\n  }\n\n  // Wrapper methods for socket calls to DiceConfigUtil\n  static getDiceConfig() {\n    return DiceConfigUtil.getDiceConfig();\n  }\n  \n  static receiveDiceConfig(userId, diceConfig) {\n    DiceConfigUtil.receiveDiceConfig(userId, diceConfig);\n  }\n\n  /**\n   * Handle roll request from GM on player side\n   * @param {Object} requestData - The roll request data\n   */\n  static async handleRollRequest(requestData) {\n    return RollRequestUtil.handleRequest(requestData);\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.handleRollRequest, Main.handleRollRequest);\n  }\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\n// Initialize the module\nMain.init();\n"],"names":["SETTING_INPUT","SETTING_SCOPE","getSettings","MODULE_ID","DEBUG_TAG","SOCKET_CALLS","ROLL_TYPES","ROLL_REQUEST_OPTIONS","MODULE","HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","classInstance","methodName","fullMethodName","fullRef","method","className","args","__publicField","LogUtil","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","name","func","value","callback","handler","parameters","userId","executionKey","SocketUtil","DiceConfigUtil","clientSettings","diceConfig","_b","user","SettingsUtil","SETTINGS","entry","setting","settingObj","settingName","moduleName","selectedSetting","newValue","requestsIcon","ActivityUtil","item","rollType","activities","attackActivities","damageAttackActivities","damageActivities","saveActivities","itemSaveActivities","activityType","actor","itemId","activityId","config","activity","normalizedRollType","dialogConfig","workflow","formulas","part","f","defaultConfig","defaultOptions","formula","ignoreCrit","damageType","GMRollConfigDialog","message","dialog","partId","context","_c","configSection","templateData","template","wrapper","button","event","formConfig","sendRequestCheckbox","dcInput","formData","index","abilityFromForm","dcFromForm","dcValue","form","action","finalizedRolls","actors","rollKey","_d","_e","_f","_g","_h","_i","_j","_k","_l","showDC","rollClass","rollConfig","messageConfig","a","app","resolve","firstRoll","advantage","disadvantage","finalConfig","defaultRollMode","situational","defaultAbility","level","title","skillLabel","skill","abilityLabel","saveAbility","checkAbility","toolData","toolLabel","toolItem","GMSkillToolConfigDialog","skillConfig","tool","_RollInterceptor","hookName","hookId","rollInterceptionEnabled","rollRequestsEnabled","owner","DialogClass","originalConfig","dialogResult","modifiedConfig","ownership","skipDialogs","cleanConfig","key","requestData","t","RollInterceptor","getRollTypeDisplay","display","showBatchedNotifications","pendingNotifications","getRollTypeDisplayFn","notificationsByType","notif","entries","messages","rollTypeDisplay","actorNames","getPlayerOwner","applyTargetTokens","tokenIds","id","isPlayerOwned","hasTokenInScene","currentScene","token","updateCanvasTokenSelection","actorId","selected","tokens","delay","ms","isSidebarExpanded","updateSidebarClass","isExpanded","body","buildRollTypes","selectedRequestType","selectedActors","rollTypes","selectedOption","firstActorId","allTools","label","str","b","rollData","configData","_NotificationManager","type","requestsByPlayer","rollTypeName","successfulRequests","playerData","playerSummaries","playerId","NotificationManager","LocalRollHelpers","combatant","error","LOCAL_ROLL_HANDLERS","_instance","_RollRequestsMenu","menu","pcActors","npcActors","actorData","currentActors","selectAllOn","requestTypes","option","system","stats","optionsToggle","optionsElement","controlled","html","tab","selectBtn","requestTypesContainer","listItem","customEvent","rollTypesContainer","enabled","SidebarUtil","skip","selectAll","lockIcon","controlledTokens","isPC","selectAllCheckbox","checkboxes","checkedCount","cb","requestType","rollOption","selectedActorIds","validActorIds","isNPC","rollMethodName","actorIdsToRoll","actorsWithInitiative","actorIdsWithInitiative","actorsNeedingDeathSaves","actorsSkippingDeathSaves","hp","deathSaves","successes","failures","offlinePlayerActors","offlineConfig","npcConfig","suppressNotification","normalizedRequestType","rollTypeKey","normalizedRollTypeKey","normalizedType","position","content","htmlElement","formulaInput","diceCounts","die","parts","dieType","count","__privateGet","__privateSet","__privateAdd","RollRequestsMenu","chatControls","rollRequestIcon","firstChatControlIcon","icon","HooksUtil","chatMessage","requestedBy","requestedText","currentFlavor","situationalInputs","hasTriggered","input","RollHelpers","ROLL_HANDLERS","rollOptions","RollRequestUtil","Main"],"mappings":"ufAAO,MAAMA,EAAgB,CAE3B,SAAU,UACZ,EACaC,EAAgB,CAC3B,OAAQ,SACR,MAAO,OACT,EAMaC,EAAc,KAClB,CACL,UAAW,CACT,IAAK,aACL,MAAO,KAAK,KAAK,SAAS,uCAAuC,EACjE,KAAM,KAAK,KAAK,SAAS,sCAAsC,EAC/D,SAAU,QACV,UAAWF,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,OACrB,OAAQ,EACT,EACD,oBAAqB,CACnB,IAAK,wBACL,MAAO,KAAK,KAAK,SAAS,iDAAiD,EAC3E,KAAM,KAAK,KAAK,SAAS,gDAAgD,EACzE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,YAAa,CACX,IAAK,eACL,MAAO,KAAK,KAAK,SAAS,yCAAyC,EACnE,KAAM,KAAK,KAAK,SAAS,wCAAwC,EACjE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,kBAAmB,CACjB,IAAK,uBACL,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,KAAM,KAAK,KAAK,SAAS,8CAA8C,EACvE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,wBAAyB,CACvB,IAAK,4BACL,MAAO,KAAK,KAAK,SAAS,qDAAqD,EAC/E,KAAM,KAAK,KAAK,SAAS,oDAAoD,EAC7E,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,yBAA0B,CACxB,IAAK,6BACL,MAAO,KAAK,KAAK,SAAS,sDAAsD,EAChF,KAAM,KAAK,KAAK,SAAS,qDAAqD,EAC9E,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACd,CAEG,GCvEUE,EAAY,uBAOZC,GAAY,CACvB,mBACA,8CACA,GACF,EAEaC,GAAe,CAC1B,kBAAmB,oBACnB,cAAe,gBACf,kBAAmB,mBACrB,EAsDaC,EAAa,CACxB,QAAS,UACT,cAAe,eACf,KAAM,OACN,aAAc,cACd,MAAO,QACP,KAAM,OACN,cAAe,gBACf,OAAQ,SACR,OAAQ,SACR,WAAY,aACZ,kBAAmB,mBACnB,WAAY,YACZ,QAAS,SACT,UAAW,WACX,OAAQ,SACR,QAAS,UACT,QAAS,SACX,EAEaC,GAAuB,CAClC,cAAe,CAAE,KAAMD,EAAW,cAAe,MAAO,gBAAiB,QAAS,YAAa,UAAW,kBAAoB,EAC9H,aAAc,CAAE,KAAMA,EAAW,aAAc,MAAO,eAAgB,QAAS,YAAa,UAAW,kBAAoB,EAC3H,MAAO,CAAE,KAAMA,EAAW,MAAO,MAAO,cAAe,QAAS,SAAU,UAAW,eAAiB,EACtG,KAAM,CAAE,KAAMA,EAAW,KAAM,MAAO,aAAc,QAAS,QAAS,UAAW,cAAgB,EACjG,cAAe,CAAE,KAAMA,EAAW,cAAe,MAAO,sBAAuB,QAAS,KAAM,UAAW,EAAI,EAC7G,WAAY,CAAE,KAAMA,EAAW,kBAAmB,MAAO,kBAAmB,QAAS,KAAM,UAAW,EAAI,EAC1G,WAAY,CAAE,KAAMA,EAAW,WAAY,MAAO,aAAc,QAAS,KAAM,UAAW,EAAI,EAC9F,OAAQ,CAAE,KAAMA,EAAW,OAAQ,MAAO,cAAe,QAAS,KAAM,UAAW,EAAI,CAEzF,EAOaE,EAAS,CACpB,GAAIL,EACJ,qBAAsBI,EACxB,EC/GaE,EAAa,CACxB,KAAM,OACN,MAAO,QAEP,mBAAoB,mBAIpB,eAAgB,gBAChB,wBAAyB,sBAI3B,EAKaC,GAAe,CAC1B,MAAO,iBACT,EAKaC,EAAc,CASzB,uBAAwB,8BACxB,sBAAuB,6BAmBvB,uBAAwB,2BAKxB,kBAAmB,uBACnB,iBAAkB,sBAKlB,oBAAqB,wBAarB,oBAAqB,0BAIrB,mBAAoB,wBAKpB,mBAAoB,wBAkBpB,iBAAkB,8BAClB,iCAAkC,+BAGpC,EC5GaC,EAAN,MAAMA,CAAQ,CAUnB,OAAO,IAAIC,EAAI,GAAIC,EAAK,CAAE,EAAEC,EAAe,GAAO,CAChD,GAAI,CACF,MAAMC,EAAe,KAAK,SAAS,IAAIb,EAAW,YAAY,GAAKS,EAAQ,QAE3E,GAAG,EADmBG,GAAkBC,GACnB,OACrB,QAAQ,IAAI,GAAGZ,GAAWS,EAAK,GAAGC,CAAI,CACvC,MAAU,EAELC,GAAkBH,EAAQ,UAC5B,QAAQ,IAAI,GAAGR,GAAWS,EAAK,GAAGC,CAAI,CAE9C,CACA,CAOE,OAAO,KAAKD,EAAI,GAAIC,EAAK,CAAA,EAAI,CAC3B,QAAQ,KAAK,GAAGV,GAAWS,EAAK,GAAGC,CAAI,CAC3C,CAWE,OAAO,MAAMG,EAAQC,EAAU,CAAE,GAAI,GAAO,QAAS,GAAM,UAAW,IAAS,CHhD1E,IAAAC,EGiDAD,EAAQ,MACTC,EAAA,GAAG,gBAAH,MAAAA,EAAkB,MAAMF,EAAQ,CAAE,SAAU,GAAM,UAAWC,EAAQ,aAEpEA,EAAQ,SAAS,QAAQ,MAAM,GAAGd,GAAWa,CAAM,CAC1D,CAiBE,OAAO,OAAOG,EAAeC,EAAY,CHtEpC,IAAAF,EGwEH,MAAMG,EAAiB,KADLH,EAAAC,EAAc,cAAd,YAAAD,EAA2B,OAAQC,EAAc,MAAQ,SACxC,IAAIC,CAAU,GAEjD,MAAO,CAACR,EAAM,GAAIC,EAAO,CAAE,EAAEC,EAAiB,KAAU,CACtD,MAAMQ,EAAUV,EAAM,GAAGS,CAAc,MAAMT,CAAG,GAAKS,EACrD,KAAK,IAAIC,EAAST,EAAMC,CAAc,CACvC,CACL,CAkBE,OAAO,OAAOS,EAAQC,EAAWJ,EAAY,CAC3C,OAAO,YAAYK,EAAM,CACvB,OAAAd,EAAQ,IAAI,GAAGa,CAAS,IAAIJ,CAAU,GAAI,CAAC,oBAAqBK,CAAI,CAAC,EAC9DF,EAAO,MAAM,KAAME,CAAI,CAC/B,CACL,CACA,EA9FEC,EAFWf,EAEJ,UAAU,IAFZ,IAAMgB,EAANhB,ECCA,MAAMiB,EAAN,MAAMA,CAAW,CA0ItB,OAAO,sBAAsBf,EAAMgB,EAAS,GAAO,CAIjD,OAHYF,EAAQ,OAAOC,EAAY,uBAAuB,EAC1D,4BAA6B,CAACf,EAAMgB,CAAQ,CAAC,EAE7ChB,GAAQ,MAERgB,GAAYhB,EAAK,OAAS,MAAM,QAAQA,EAAK,KAAK,IAGpDA,EAAK,MAAQA,EAAK,MAAM,IAAIiB,GACvBA,aAAa,KACGA,EAAE,OAAQ,EAGpBA,CAEV,GAGIjB,CACX,CAOE,OAAO,yBAAyBA,EAAMgB,EAAS,GAAO,CACxCF,EAAQ,OAAOC,EAAY,0BAA0B,EAC7D,+BAAgC,CAACf,EAAMgB,CAAQ,CAAC,EACpD,IAAIE,EAAS,CAAE,GAAGlB,CAAM,EACxB,GAAI,CAACA,EAAM,OAAOkB,EAElB,GAAGF,GAAYhB,EAAK,OAASA,EAAK,MAAM,OAAS,EAAE,CACjD,MAAMmB,EAAQD,EAAO,MAAM,IAAID,GAAK,CAClC,IAAIG,EAAOH,EACX,OAAG,OAAOA,GAAM,SACdG,EAAO,KAAK,SAASH,CAAC,EAEtBG,EAAO,KAAK,SAAS,KAAK,UAAUH,CAAC,CAAC,EAEjCG,CACR,CAAA,EACD,OAAAF,EAAO,MAAQ,CAAC,GAAGC,CAAK,EACjBD,CACb,CAEI,OAAOA,CACX,CAEA,EA3LEL,EADWE,EACJ,UACPF,EAFWE,EAEJ,oBAAoB,IAAI,KAQ/BF,EAVWE,EAUJ,aAAcM,GAAiB,CACxBP,EAAQ,OAAOC,EAAY,YAAY,EAC/C,sBAAuB,CAACM,CAAY,CAAC,EACzC,MAAM,KAAKzB,GAAa,MAAO,IAAM,CAGnC,GAAI,OAAO,UAAc,IAAa,CACpCkB,EAAQ,MAAM,gFAAgF,EAC9F,GAAG,cAAc,MAAM,KAAK,KAAK,SAAS,6CAA6C,EAAG,CAAC,UAAW,EAAI,CAAC,EAC3G,MACR,CAEM,GAAI,CAEFC,EAAW,OAAS,UAAU,eAAe1B,CAAS,EAGlDgC,GACFA,EAAc,CAGjB,MAAW,CAClB,CACA,CAAK,CACL,GAQER,EA1CWE,EA0CJ,eAAe,CAACO,EAAMC,IAAS,CACxBT,EAAQ,OAAOC,EAAY,cAAc,EACjD,mBAAoB,CAACO,CAAI,CAAC,EAC1BP,EAAW,QACbA,EAAW,OAAO,SAASO,EAAMC,CAAI,CAG3C,GAQEV,EAzDWE,EAyDJ,cAAc,CAACS,EAAOC,IAAa,CAC5BX,EAAQ,OAAOC,EAAY,aAAa,EAChD,kBAAmB,CAACS,CAAK,CAAC,EAC1BC,GACAA,EAAU,CAElB,GASEZ,EAxEWE,EAwEJ,aAAa,MAAOW,KAAYC,IAAe,CAGpD,GAFYb,EAAQ,OAAOC,EAAY,YAAY,EAC/C,oBAAqB,CAACW,EAAS,GAAGC,CAAU,CAAC,EAC7C,EAACZ,EAAW,OAGhB,OAAO,MAAMA,EAAW,OAAO,iBAAiBW,EAAS,GAAGC,CAAU,CAC1E,GASEd,EAxFWE,EAwFJ,aAAa,MAAOW,KAAYC,IAAe,CACpD,GAAKZ,EAAW,OAGhB,OAAO,MAAMA,EAAW,OAAO,mBAAmBW,EAAS,GAAGC,CAAU,CAC5E,GAUEd,EAvGWE,EAuGJ,cAAc,MAAOW,EAASE,KAAWD,IAAe,CAG7D,GAFYb,EAAQ,OAAOC,EAAY,aAAa,EAChD,qBAAsB,CAACW,EAASE,EAAQ,GAAGD,CAAU,CAAC,EACtD,CAACZ,EAAW,OACZ,OAGJ,GAAGa,IAAW,KAAK,KAAK,GACtB,OAAO,KAET,MAAMC,EAAe,GAAGH,CAAO,IAAIE,CAAM,GAGzC,GAAIb,EAAW,kBAAkB,IAAIc,CAAY,EAC7C,OAAO,KAGXd,EAAW,kBAAkB,IAAIc,EAAc,EAAI,EAEnD,GAAI,CAEA,OADa,MAAMd,EAAW,OAAO,cAAcW,EAASE,EAAQ,GAAGD,CAAU,CAEpF,MAAe,CACZ,OAAO,IACf,QAAc,CAENZ,EAAW,kBAAkB,OAAOc,CAAY,CACxD,CACA,GAnIO,IAAMC,EAANf,ECFA,MAAMgB,CAAe,CAc1B,OAAO,YAAa,CAClB,KAAK,cAAe,CACxB,CAME,OAAO,eAAgB,CACrB,GAAI,CAAC,KAAK,KAAM,MAAO,CAAE,EAEzB,MAAMC,EAAiB,KAAK,SAAS,QAAQ,IAAI,QAAQ,EACzD,YAAK,WAAaA,EAAe,wBAAwB,GAAK,GAEvD,KAAK,UAChB,CAME,OAAO,eAAgB,CACrB,OAAK,KAAK,MAGV,KAAK,cAAe,EAGhB,KAAK,KAAK,MACZ,KAAK,qBAAsB,EAGtB,KAAK,YAVW,CAAE,CAW7B,CAME,OAAO,sBAAuB,CAC5BF,EAAW,WAAW,oBAAqB,KAAK,KAAK,GAAI,KAAK,UAAU,CAC5E,CAOE,OAAO,kBAAkBF,EAAQK,EAAY,CLnExC,IAAA5B,EAAA6B,IKoEC7B,EAAA,KAAK,OAAL,MAAAA,EAAW,MAAQuB,MAAWM,EAAA,KAAK,OAAL,YAAAA,EAAW,OAC3C,KAAK,kBAAkBN,CAAM,EAAIK,EAAa,KAAK,MAAMA,CAAU,EAAI,CAAE,EAE/E,CAOE,OAAO,kBAAkBL,EAAQ,CL9E5B,IAAAvB,EK+EH,OAAIuB,MAAWvB,EAAA,KAAK,OAAL,YAAAA,EAAW,IACjB,KAAK,WAGP,KAAK,kBAAkBuB,CAAM,GAAK,CAAE,CAC/C,CAME,OAAO,0BAA0BA,EAAQ,CACvCE,EAAW,YAAY,gBAAiBF,CAAM,CAClD,CAKE,OAAO,iCAAkC,CLjGpC,IAAAvB,GKkGEA,EAAA,KAAK,OAAL,MAAAA,EAAW,MAEhB,KAAK,MAAM,QAAQ8B,GAAQ,CACrBA,EAAK,QAAU,CAACA,EAAK,MAAQA,EAAK,KAAO,KAAK,KAAK,IACrD,KAAK,0BAA0BA,EAAK,EAAE,CAE9C,CAAK,CACL,CAKE,OAAO,oBAAqB,CAC1B,KAAK,kBAAoB,CAAE,CAC/B,CAOE,OAAO,cAAcP,EAAQ,CLvHxB,IAAAvB,EKwHH,OAAIuB,MAAWvB,EAAA,KAAK,OAAL,YAAAA,EAAW,IACjB,CAAC,CAAC,KAAK,WAGT,CAAC,CAAC,KAAK,kBAAkBuB,CAAM,CAC1C,CACA,CArHEf,EAJWkB,EAIJ,aAAa,CAAE,GAKtBlB,EATWkB,EASJ,oBAAoB,CAAE,GCPxB,MAAMK,CAAa,CAKxB,OAAO,kBAAmB,CACxB,MAAMC,EAAWjD,EAAa,EAGT,OAAO,QAAQiD,CAAQ,EAC/B,QAAQ,MAAMC,GAAU,CACnC,MAAMC,EAAUD,EAAM,CAAC,EAEjBE,EAAa,CACjB,KAAMD,EAAQ,MACd,KAAMA,EAAQ,KACd,QAASA,EAAQ,QACjB,KAAMA,EAAQ,SACd,MAAOA,EAAQ,MACf,OAAQA,EAAQ,OAChB,eAAgBA,EAAQ,gBAAkB,GAC1C,SAAUf,GAASY,EAAa,MAAMG,EAAQ,IAAKf,CAAK,CAChE,EACSe,EAAQ,UACTC,EAAW,QAAUD,EAAQ,SAG/B,MAAM,KAAK,SAAS,SAASlD,EAAWkD,EAAQ,IAAKC,CAAU,GAG5DJ,EAAa,IAAIG,EAAQ,GAAG,IAAI,QAAaH,EAAa,IAAIG,EAAQ,GAAG,IAAI,OAC9EH,EAAa,IAAIG,EAAQ,IAAKA,EAAQ,OAAO,CAErD,CAAK,CACL,CAQE,OAAO,IAAIE,EAAaC,EAAWrD,EAAU,CAC3C,GAAG,CAACoD,EAAc,OAAO,KAEzB,IAAIF,EAAU,GAEd,GAAGG,IAAarD,EACdkD,EAAU,KAAK,SAAS,IAAIG,EAAYD,CAAW,MAChD,CAEH,IAAIE,EADW,KAAK,SAAS,QAAQ,IAAI,QAAQ,EACpB,GAAGD,CAAU,IAAID,CAAW,EAAE,EAExDE,IAAkB,SAEnBA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGD,CAAU,IAAID,CAAW,EAAE,EACjEF,EAAUI,GAAA,YAAAA,EAAiB,MAEnC,CAEI,OAAOJ,CACX,CASE,OAAO,IAAIE,EAAaG,EAAUF,EAAWrD,EAAU,CACrD,GAAG,CAACoD,EAAc,MAAO,GAEzB,IAAIE,EAAkB,KAAK,SAAS,QAAQ,IAAI,QAAQ,EAAE,GAAGD,CAAU,IAAID,CAAW,EAAE,EAEpFE,IAEFA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGD,CAAU,IAAID,CAAW,EAAE,GAGnE,GAAG,CACD,KAAK,SAAS,IAAIC,EAAYD,EAAaG,CAAQ,CACpD,MAAQ,CACb,CAEI,MAAO,EACX,CAEE,OAAO,MAAMH,EAAaG,EAAS,CACjC,MAAMP,EAAWjD,EAAa,EAC9B,OAAOqD,EAAW,CAChB,KAAKJ,EAAS,oBAAoB,IAChCD,EAAa,yBAAyBQ,CAAQ,EAC9C,KAGR,CACA,CAEE,OAAO,yBAAyBA,EAAS,CACvC,MAAMC,EAAe,SAAS,cAAc,sDAAsD,EAC9FA,IAEDD,EACDC,EAAa,UAAU,IAAI,QAAQ,EAEnCA,EAAa,UAAU,OAAO,QAAQ,EAE5C,CACA,CC9GO,MAAMC,CAAa,CAQxB,OAAO,oBAAoBC,EAAMC,EAAU,CPdtC,IAAA3C,EOeH,GAAI,GAACA,EAAA0C,GAAA,YAAAA,EAAM,SAAN,MAAA1C,EAAc,YAAY,OAAO,KAEtC,MAAM4C,EAAaF,EAAK,OAAO,WAK/B,OAF2BC,GAAA,YAAAA,EAAU,cAEX,CACxB,KAAKxD,EAAW,OACd,MAAM0D,EAAmBD,EAAW,UAAU,QAAQ,EACtD,OAAOC,GAAA,YAAAA,EAAmB,KAAM,KAElC,KAAK1D,EAAW,OAEd,MAAM2D,EAAyBF,EAAW,UAAU,QAAQ,EAC5D,IAAIE,GAAA,YAAAA,EAAwB,QAAS,EAAG,OAAOA,EAAuB,CAAC,EAEvE,MAAMC,EAAmBH,EAAW,UAAU,QAAQ,EACtD,IAAIG,GAAA,YAAAA,EAAkB,QAAS,EAAG,OAAOA,EAAiB,CAAC,EAE3D,MAAMC,EAAiBJ,EAAW,UAAU,MAAM,EAClD,OAAII,GAAA,YAAAA,EAAgB,QAAS,EAAUA,EAAe,CAAC,EAEhD,KAET,KAAK7D,EAAW,UACd,MAAM8D,EAAqBL,EAAW,UAAU,MAAM,EACtD,OAAOK,GAAA,YAAAA,EAAqB,KAAM,KAEpC,QACE,OAAO,IACf,CACA,CAQE,OAAO,oBAAoBP,EAAMQ,EAAc,CPvD1C,IAAAlD,EOwDH,OAAKA,EAAA0C,GAAA,YAAAA,EAAM,SAAN,MAAA1C,EAAc,WACZ0C,EAAK,OAAO,WAAW,UAAUQ,CAAY,EADd,CAAE,CAE5C,CAQE,OAAO,mBAAmBR,EAAMC,EAAU,CAExC,OADYlC,EAAQ,OAAOgC,EAAc,oBAAoB,EACzD,oBAAqB,CAACC,EAAMC,CAAQ,CAAC,EAClC,CAAC,CAAC,KAAK,oBAAoBD,EAAMC,CAAQ,CACpD,CAUE,aAAa,oBAAoBQ,EAAOR,EAAUS,EAAQC,EAAYC,EAAQ,CPhFzE,IAAAtD,EAAA6B,EOiFSpB,EAAQ,OAAOgC,EAAc,qBAAqB,EAC1D,0BAA2B,CAACU,EAAOR,EAAUS,EAAQC,EAAYC,CAAM,CAAC,EAC5E,MAAMZ,EAAOS,EAAM,MAAM,IAAIC,CAAM,EACnC,GAAI,CAACV,EACH,MAAM,IAAI,MAAM,QAAQU,CAAM,uBAAuBD,EAAM,IAAI,EAAE,EAGnE,IAAII,EAAW,KAGXF,IACFE,GAAWvD,EAAA0C,EAAK,OAAO,aAAZ,YAAA1C,EAAwB,IAAIqD,IAMpCE,IACHA,EAAW,KAAK,oBAAoBb,EAAMC,CAAQ,GAIpD,MAAMa,EAAqBb,GAAA,YAAAA,EAAU,cAGrC,GAAIY,EACF,OAAQC,EAAkB,CACxB,KAAKrE,EAAW,OACd,MAAMsE,EAAe,CACnB,UAAW,EACZ,EAED,GAAG,QAAS,CACO,MAAMhB,EAAa,kBAAkBC,EAAM,CAC1D,GAAGY,CACJ,CAAA,EACD,MACZ,KACY,QAAO,MAAMC,EAAS,IAAI,YAAaE,CAAY,EAEvD,KAAKtE,EAAW,OACd,GAAG,QAAS,CACV,MAAMuE,GAAW7B,EAAA,6BAAS,WAAT,YAAAA,EAAmB,YAAY0B,EAAS,MACtC,MAAMG,EAAS,SAAS,WAAW,CACpD,GAAGJ,EACH,SAAUI,CACX,CAAA,EACD,MACZ,KACY,QAAO,MAAMH,EAAS,WAAWD,CAAM,EAK3C,KAAKnE,EAAW,UAEd,OAAO,MAAMuD,EAAK,IAAI,CAAE,SAAUa,EAAS,EAAE,EAAI,CAAE,WAAYD,EAAO,WAAW,CAAE,EAErF,QACE,MAAM,IAAI,MAAM,sBAAsBE,CAAkB,EAAE,CACpE,KACW,CAGL,OAAQA,EAAkB,CACxB,KAAKrE,EAAW,OACd,GAAIuD,EAAK,WACP,OAAO,MAAMA,EAAK,WAAWY,CAAM,EAErC,MAEF,KAAKnE,EAAW,OACd,GAAIuD,EAAK,WACP,OAAO,MAAMA,EAAK,WAAWY,CAAM,EAErC,MAEF,KAAKnE,EAAW,UAEd,OAAO,MAAMuD,EAAK,IAAI,CAAA,EAAI,CAAE,WAAYY,EAAO,YAAa,CACtE,CAEM,MAAM,IAAI,MAAM,gCAAgCE,CAAkB,YAAYd,EAAK,IAAI,EAAE,CAC/F,CACA,CAOE,OAAO,uBAAuBa,EAAU,CAGtC,OAFY9C,EAAQ,OAAOgC,EAAc,wBAAwB,EAC7D,gCAAiC,CAACc,CAAQ,CAAC,EAC1CA,EAEE,CACL,KAAMA,EAAS,MAAQA,EAAS,YAAY,SAAS,MACrD,KAAMA,EAAS,KACf,KAAMA,EAAS,YAAY,SAAS,KACpC,UAAWA,EAAS,OAAS,SAC7B,UAAW,CAAC,SAAU,SAAU,MAAM,EAAE,SAASA,EAAS,IAAI,EAC9D,QAASA,EAAS,OAAS,MAC5B,EATqB,IAU1B,CAOE,OAAO,iBAAiBA,EAAU,CPhM7B,IAAAvD,EAAA6B,EOmMH,GAFYpB,EAAQ,OAAOgC,EAAc,kBAAkB,EACvD,yBAA0B,CAACc,CAAQ,CAAC,EACpC,GAAC1B,GAAA7B,EAAAuD,GAAA,YAAAA,EAAU,SAAV,YAAAvD,EAAkB,QAAlB,MAAA6B,EAAyB,QAAQ,OAAO,KAG7C,MAAM8B,EAAWJ,EAAS,OAAO,MAAM,IAAIK,GAAQA,EAAK,OAAO,EAAE,OAAOC,GAAKA,CAAC,EAC9E,OAAOF,EAAS,OAAS,EAAIA,EAAS,KAAK,KAAK,EAAI,IACxD,CAEE,aAAa,kBAAkBjB,EAAMY,EAAS,GAAI,CACpC7C,EAAQ,OAAOgC,EAAc,mBAAmB,EACxD,iCAAkC,CAACC,EAAMY,CAAM,CAAC,EACpD,IAAIQ,EAAgB,CAChB,aAAc,GACd,iBAAkB,EACrB,EACGC,EAAiB,CAEnB,gBAAiB,GAEjB,gBAAiB,CACf,eAAgB,GAChB,eAAgB,GAChB,eAAgB,OAChB,eAAgB,EACxB,CACK,EAGD,OAAAT,EAAS,CAAC,GAAGQ,EAAe,GAAGR,CAAM,EAC9B,MAAM,QAAQ,gBAAgBZ,EAAMY,EAAQS,CAAc,CACrE,CAEE,aAAa,cAAcL,EAAUM,EAAS,CAAC,WAAAC,EAAa,GAAO,WAAAC,CAAU,EAAI,GAAI,CACnFF,EAAU,OAAOA,CAAO,EACpBN,EAAS,YAAc,CAACO,IAAYD,EAAU,MAAM,UAAU,mBAAmBA,EAASN,EAAS,KAAK,YAAW,CAAE,GACzH,IAAI3C,EAAO,MAAM,IAAI,OAAO,KAAK,WAAWiD,CAAO,EAAE,SAAU,EAE/D,aAAMN,EAAS,eAAe,CAAC3C,CAAI,CAAC,EAE7BA,CACX,CACA,CCpOO,MAAMoD,UAA2B,MAAM,aAAa,KAAK,0BAA2B,CACzF,YAAYb,EAAS,CAAE,EAAEc,EAAU,CAAE,EAAErE,EAAU,GAAI,CAEnDA,EAAQ,SAAWA,EAAQ,UAAY,OAAO,KAAK,QAGnD,MAAMuD,EAAQc,EAASrE,CAAO,EAElBU,EAAQ,OAAO,KAAM,aAAa,EAC1C,eAAgB,CAAC6C,EAAQc,EAASrE,CAAO,CAAC,EAG9C,KAAK,OAASA,EAAQ,QAAU,CAAE,EAGlC,KAAK,YAAcA,EAAQ,oBAAsBA,EAAQ,aAAe,GAExE,KAAK,OAASA,EAAQ,QAAU,GAChC,KAAK,QAAUA,EAAQ,SAAW,IACtC,CAKE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,gBAAgB,CAChE,CAAK,CACL,CAaE,0BAA0BgB,EAAMuC,EAAQe,EAAQD,EAAS,CAC3C3D,EAAQ,OAAO,KAAM,2BAA2B,EACxD,YAAa,CAACM,EAAMuC,EAAQe,EAAQD,CAAO,CAAC,EAChD,MAAMzE,EAAO,MAAM,0BAA0BoB,EAAMuC,EAAQe,EAAQD,CAAO,EAG1E,OAAAzE,EAAK,OAAS,KAAK,OACnBA,EAAK,QAAU,KAAK,QACpBA,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAUE,MAAM,oBAAoB2E,EAAQC,EAASxE,EAAS,CAElD,OADYU,EAAQ,OAAO,KAAM,qBAAqB,EAClD,yBAA0B,CAAC6D,EAAQC,EAASxE,CAAO,CAAC,EACxDwE,EAAU,MAAM,MAAM,oBAAoBD,EAAQC,EAASxE,CAAO,EAE9DuE,IAAW,kBAEbC,EAAQ,OAAS,KAAK,OACtBA,EAAQ,QAAU,KAAK,QACvBA,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,QAG5BA,CACX,CAKE,MAAM,UAAUA,EAASxE,EAAS,CRzF7B,IAAAC,EAAA6B,EAAA2C,EQgGH,GANY/D,EAAQ,OAAO,KAAM,WAAW,EACxC,mBAAoB,CAAC8D,EAASxE,CAAO,CAAC,EAC1C,MAAM,UAAUwE,EAASxE,CAAO,EAI5B,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAIF,IAAI0E,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EAKjE,GAAIA,IAAkB,KAAK,QAAU,KAAK,OAAO,OAAS,GAAI,CAE5D,MAAMC,EAAe,CACnB,OAAQ,KAAK,OACb,QAAS,KAAK,QACd,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM,eAAe,WAAW3F,CAAS,uCAAwC0F,CAAY,EAGxGE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAGpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CAGI,KAAK,uBAAwB,IAGzBD,GAAA3C,GAAA7B,EAAA,KAAK,OAAO,QAAZ,YAAAA,EAAoB,KAApB,YAAA6B,EAAwB,OAAxB,MAAA2C,EAA8B,aAAe,KAAK,OAAO,eAC3D/D,EAAQ,IAAI,+BAAgC,CAAC,kDAAkD,CAAC,EAEhG,WAAW,IAAM,CACf,KAAK,QAAS,CACf,EAAE,GAAG,EAEZ,CAME,wBAAyB,CACXA,EAAQ,OAAO,KAAM,wBAAwB,EACrD,4BAA4B,EAChB,KAAK,QAAQ,iBAAiB,iFAAiF,EACvH,QAAQoE,GAAU,CACxBA,EAAO,iBAAiB,QAAUC,GAAU,CAC3BA,EAAM,cAAc,QAAQ,MACnD,CAAO,CACP,CAAK,CACL,CAKE,cAAcC,EAAYD,EAAO,CACnBrE,EAAQ,OAAO,KAAM,eAAe,EAC5C,eAAgB,CAACsE,EAAYD,CAAK,CAAC,EACvC,MAAM,cAAcC,EAAYD,CAAK,EAGrC,MAAME,EAAsB,KAAK,QAAQ,cAAc,mCAAmC,EACtFA,IACF,KAAK,YAAcA,EAAoB,SAGzC,MAAMC,EAAU,KAAK,QAAQ,cAAc,kBAAkB,EACzDA,GAAWA,EAAQ,QACrB,KAAK,QAAU,SAASA,EAAQ,KAAK,GAAK,KAGhD,CAME,aAAa3B,EAAQ4B,EAAUC,EAAO,CACxB1E,EAAQ,OAAO,KAAM,cAAc,EAC3C,kBAAmB,CAAC6C,EAAQ4B,EAAUC,CAAK,CAAC,EAEhD,MAAMC,EAAkBF,GAAA,YAAAA,EAAU,IAAI,WAChCG,EAAaH,GAAA,YAAAA,EAAU,IAAI,MAI7BE,IACF9B,EAAO,QAAU8B,EAEjB,KAAK,OAAO,QAAUA,GAGxB,MAAMvE,EAAS,MAAM,aAAayC,EAAQ4B,EAAUC,CAAK,EAGzD,GAAIE,EAAY,CACd,MAAMC,EAAU,SAASD,CAAU,EAC9B,MAAMC,CAAO,IAChBzE,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAASyE,EAEhC,MAAe,KAAK,UAAY,QAAa,KAAK,UAAY,OACxDzE,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAAS,KAAK,SAI/B,OAAOA,CACX,CAWE,MAAM,mBAAmBiE,EAAOS,EAAML,EAAU,CAO9C,GANYzE,EAAQ,OAAO,KAAM,oBAAoB,EACjD,oBAAqB,CAACqE,EAAOS,EAAML,CAAQ,CAAC,EAEhD,MAAM,MAAM,mBAAmBJ,EAAOS,EAAML,CAAQ,EAGhDA,EAAS,IAAI,IAAI,GAAKA,EAAS,IAAI,IAAI,IAAM,GAAI,CACnD,MAAMI,EAAU,SAASJ,EAAS,IAAI,IAAI,CAAC,EAC3C,GAAI,CAAC,MAAMI,CAAO,IAEhB,KAAK,QAAUA,EAGX,KAAK,OAAO,OAAS,KAAK,OAAO,MAAM,OAAS,GAClD,UAAWvE,KAAQ,KAAK,OAAO,MAC7BA,EAAK,QAAQ,OAASuE,CAIlC,CAGI,KAAK,YAAcJ,EAAS,IAAI,qBAAqB,IAAM,OAC/D,CASE,eAAeM,EAAQ,CACT/E,EAAQ,OAAO,KAAM,gBAAgB,EAC7C,mBAAoB,CAAC+E,CAAM,CAAC,EAGhC,MAAMC,EAAiB,MAAM,eAAeD,CAAM,EAGlD,GAAI,KAAK,UAAY,QAAa,KAAK,UAAY,KACjD,UAAWzE,KAAQ0E,EACjB1E,EAAK,QAAQ,OAAS,KAAK,QAK/B,YAAK,OAAO,YAAc,KAAK,YAExB0E,CACX,CAUE,aAAa,iBAAiBC,EAAQ/C,EAAUgD,EAAS5F,EAAU,CAAA,EAAI,CR1RlE,IAAAC,EAAA6B,EAAA2C,EAAAoB,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,EAAAC,GQ2RS3F,EAAQ,OAAO0D,EAAoB,kBAAkB,EAC7D,wBAAyB,CAACuB,EAAQ/C,EAAUgD,EAAS5F,CAAO,CAAC,EAGjE,MAAMyD,EAAqBb,GAAA,YAAAA,EAAU,cAG/B0D,EAAS,CACblH,EAAW,KACXA,EAAW,aACXA,EAAW,QACXA,EAAW,cACXA,EAAW,aACjB,EAAM,SAASqE,CAAkB,EAGvBL,EAAQuC,EAAO,CAAC,EACtB,GAAI,CAACvC,EAAO,OAAO,KAGnB,IAAImD,EAAY,OAAO,KAAK,QACxB,CAACnH,EAAW,OAAQA,EAAW,OAAO,EAAE,SAASqE,CAAkB,EACrE8C,EAAY,OAAO,KAAK,YAAc,OAAO,KAAK,UACzC,CAACnH,EAAW,QAASA,EAAW,MAAM,EAAE,SAASqE,CAAkB,IAC5E8C,EAAY,OAAO,KAAK,WAIrBA,IACHA,EAAY,OAAO,KAAK,SAK1B,MAAMC,EAAa,CACjB,KAAMpD,EAAM,YAAa,EACzB,QAASA,EACT,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMA,EAAM,YAAa,EACzB,QAAS,CAAA,CACV,CAAA,CACF,EAGD,OAAQK,EAAkB,CACxB,KAAKrE,EAAW,MACdoH,EAAW,MAAQZ,EACnB,MACF,KAAKxG,EAAW,KAChB,KAAKA,EAAW,aACdoH,EAAW,QAAUZ,EACrB,MACF,KAAKxG,EAAW,QAChB,KAAKA,EAAW,cACdoH,EAAW,QAAUZ,EACrB,KACR,CAGI,MAAMa,EAAgB,CACpB,OAAQ,GACR,KAAM,CACJ,QAAS,YAAY,WAAW,CAAE,MAAArD,CAAO,CAAA,CACjD,CACK,EAGKM,EAAe,CACnB,QAAS,CACP,OAAAiC,EACA,YAAaA,EAAO,KAAKe,GAAK,KAAK,eAAeA,CAAC,CAAC,EACpD,OAAAJ,EACA,QAAAV,EACA,SAAUW,EACV,OAAQ,CACN,MAAOnC,EAAmB,cAAcX,EAAoBmC,EAASxC,CAAK,EAC1E,SAAUuC,EAAO,IAAIe,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,CAC5C,EACD,GAAG1G,CACX,CACK,EAKK2G,EAAM,IAAI,KAAKH,EAAYC,EAAe/C,EAAa,OAAO,EAG9D5C,EAAS,MAAM,IAAI,QAAQ8F,GAAW,CAC1CD,EAAI,iBAAiB,QAAS,IAAM,CAElCC,EAAQ,CACN,MAAOD,EAAI,MACX,OAAQA,EAAI,OACZ,QAASA,EAAI,QACb,YAAaA,EAAI,WAC3B,CAAS,CACT,EAAS,CAAE,KAAM,GAAM,EACjBA,EAAI,OAAO,CAAE,MAAO,EAAI,CAAE,CAChC,CAAK,EAID,GAAI,CAAC7F,EAAO,OAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAGvD,MAAM+F,EAAY/F,EAAO,MAAM,CAAC,EAChC,IAAIgG,EAAY,GACZC,EAAe,KAEf9G,EAAA4G,GAAA,YAAAA,EAAW,UAAX,YAAA5G,EAAoB,iBAAkB,SACxC6G,EAAYD,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,UAC7EE,EAAeF,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,cAIlF,MAAMG,EAAc,CAClB,YAAa,GACb,cAAelG,EAAO,YACtB,WAAYd,EAAQ,aAAe,GACnC,YAAac,EAAO,WACrB,EAGGgG,IAAWE,EAAY,UAAY,IACnCD,IAAcC,EAAY,aAAe,IAG7C,MAAMC,EAAkB,KAAK,SAAS,IAAI,OAAQ,UAAU,EACxDnG,EAAO,QAAQ,UAAYA,EAAO,QAAQ,WAAamG,IACzDD,EAAY,SAAWlG,EAAO,QAAQ,UAOxC,IAAIoG,IAAcpF,EAAA+E,GAAA,YAAAA,EAAW,UAAX,YAAA/E,EAAoB,gBACpB2C,EAAAoC,GAAA,YAAAA,EAAW,OAAX,YAAApC,EAAiB,gBACjBqB,GAAAD,EAAA/E,EAAO,SAAP,YAAA+E,EAAe,OAAf,YAAAC,EAAqB,cAAe,GAsBtD,GAnBI,CAACoB,KAAenB,EAAAc,GAAA,YAAAA,EAAW,QAAX,YAAAd,EAAkB,QAAS,GAErBc,EAAU,MAAM,KAAKhD,IAAQA,GAAK,SAAS,cAAc,CAAC,IAC3DmC,GAAAa,EAAU,OAAV,MAAAb,GAAgB,cACrCkB,EAAcL,EAAU,KAAK,aAI7BK,IACFF,EAAY,YAAcE,EAC1BF,EAAY,MAAQ,CAAC,cAAc,IAIjCf,GAAAY,GAAA,YAAAA,EAAW,UAAX,MAAAZ,GAAoB,SACtBe,EAAY,OAASH,EAAU,QAAQ,QAIrC/F,EAAO,OAAO,SAAW,CAAC1B,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASqE,CAAkB,EAAG,CAE7F,MAAM0D,IAAiBhB,IAAAD,GAAA9C,EAAM,OAAO,SAAb,YAAA8C,GAAsBN,KAAtB,YAAAO,GAAgC,YAAWE,IAAAD,EAAA,OAAO,MAAM,SAAb,YAAAA,EAAsBR,KAAtB,YAAAS,GAAgC,SAC9FvF,EAAO,OAAO,UAAYqG,IAC5BH,EAAY,QAAUlG,EAAO,OAAO,QAE5C,CAGI,OAAAkG,EAAY,UAAYtD,EAAa,QAAQ,OAAO,MAG7CsD,CACX,CAME,OAAO,eAAe5D,EAAO,CAE3B,OADY1C,EAAQ,OAAO0D,EAAoB,gBAAgB,EAC3D,qBAAsB,CAAChB,CAAK,CAAC,EAC1B,OAAO,QAAQA,EAAM,SAAS,EAClC,KAAK,CAAC,CAAC5B,EAAQ4F,CAAK,IAAM,CACzB,MAAMrF,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,OAAOO,GAAQ,CAACA,EAAK,MAAQqF,GAAS,MAAM,0BAA0B,KAC9E,CAAO,CACP,CAUE,OAAO,cAAcxE,EAAUgD,EAASxC,EAAO,CRle1C,IAAAnD,EAAA6B,EAAA2C,EAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,EQmeSvF,EAAQ,OAAO0D,EAAoB,eAAe,EAC1D,gBAAiB,CAACxB,EAAUgD,EAASxC,CAAK,CAAC,EAC/C,IAAIiE,EAAQ,GAGZ,MAAM5D,EAAqBb,GAAA,YAAAA,EAAU,cAErC,OAAQa,EAAkB,CACxB,KAAKrE,EAAW,MACd,MAAMkI,IAAarH,EAAA,OAAO,MAAM,OAAO2F,CAAO,IAA3B,YAAA3F,EAA8B,QAAS2F,EAEpD2B,GAAQzF,EAAAsB,GAAA,YAAAA,EAAO,OAAO,SAAd,YAAAtB,EAAuB8D,GAC/BuB,GAAiBI,GAAA,YAAAA,EAAO,YAAW9C,EAAA,OAAO,MAAM,OAAOmB,CAAO,IAA3B,YAAAnB,EAA8B,UAAW,MAC5E+C,IAAe3B,EAAA,OAAO,MAAM,UAAUsB,CAAc,IAArC,YAAAtB,EAAwC,QAASsB,EAEtEE,EAAQ,KAAK,KAAK,OAAO,yBAA0B,CACjD,MAAOC,EACP,QAASE,CACnB,CAAS,EACD,MACF,KAAKpI,EAAW,KAChB,KAAKA,EAAW,aACd,MAAMqI,IAAc3B,EAAA,OAAO,MAAM,UAAUF,CAAO,IAA9B,YAAAE,EAAiC,QAASF,EAC9DyB,EAAQ,KAAK,KAAK,OAAO,wBAAyB,CAAE,QAASI,EAAa,EAC1E,MACF,KAAKrI,EAAW,QAChB,KAAKA,EAAW,cACd,MAAMsI,IAAe3B,EAAA,OAAO,MAAM,UAAUH,CAAO,IAA9B,YAAAG,EAAiC,QAASH,EAC/DyB,EAAQ,KAAK,KAAK,OAAO,2BAA4B,CAAE,QAASK,EAAc,EAC9E,MACF,KAAKtI,EAAW,cACdiI,EAAQ,KAAK,KAAK,SAAS,qBAAqB,EAChD,MACF,KAAKjI,EAAW,KACd,MAAMuI,GAAW1B,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuCL,GACxD,IAAIgC,EAAYhC,EAChB,GAAI+B,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFC,GAAYC,GAAA,YAAAA,EAAU,OAAQjC,CACxC,CACQyB,EAAQ,KAAK,KAAK,OAAO,wBAAyB,CAAE,KAAMO,EAAW,EACrE,MACF,KAAKxI,EAAW,WACdiI,EAAQ,KAAK,KAAK,SAAS,iBAAiB,EAC5C,MACF,KAAKjI,EAAW,WAChB,KAAKA,EAAW,kBACdiI,EAAQ,KAAK,KAAK,SAAS,kBAAkB,EAC7C,MACF,QACEA,EAAQ,KAAK,KAAK,SAAS,YAAY,CAC/C,CACI,OAAA3G,EAAQ,IAAI,gBAAiB,CAAC+C,EAAoB4D,CAAK,CAAC,EAEjDA,CACX,CACA,CAMO,MAAMS,WAAgC,MAAM,aAAa,KAAK,gCAAiC,CACpG,YAAYvE,EAAS,CAAE,EAAEc,EAAU,CAAE,EAAErE,EAAU,GAAI,CAEnD,MAAM+H,EAAc,QAAQ,MAAM,YAAYxE,EAAQ,CACpD,cAAe,EACrB,CAAK,EAGDvD,EAAQ,SAAWA,EAAQ,UAAY,OAAO,KAAK,QAGnD,MAAM+H,EAAa1D,EAASrE,CAAO,EAEvBU,EAAQ,OAAO,KAAM,aAAa,EAC1C,iCAAkC,CAAC6C,EAAQc,EAASrE,CAAO,CAAC,EAGhE,KAAK,OAASA,EAAQ,QAAU,CAAE,EAGlC,KAAK,YAAcA,EAAQ,oBAAsBA,EAAQ,aAAe,GAExE,KAAK,OAASA,EAAQ,QAAU,GAChC,KAAK,QAAUA,EAAQ,SAAW,IACtC,CAKE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,gBAAgB,CAChE,CAAK,CACL,CAKE,0BAA0BgB,EAAMuC,EAAQe,EAAQD,EAAS,CAC3C3D,EAAQ,OAAO,KAAM,2BAA2B,EACxD,mCAAoC,CAACM,EAAMuC,EAAQe,EAAQD,CAAO,CAAC,EACvE,MAAMzE,EAAO,MAAM,0BAA0BoB,EAAMuC,EAAQe,EAAQD,CAAO,EAG1E,OAAAzE,EAAK,OAAS,KAAK,OACnBA,EAAK,QAAU,KAAK,QACpBA,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAKE,MAAM,oBAAoB2E,EAAQC,EAASxE,EAAS,CAElD,OADYU,EAAQ,OAAO,KAAM,qBAAqB,EAClD,yBAA0B,CAAC6D,EAAQC,EAASxE,CAAO,CAAC,EACxDwE,EAAU,MAAM,MAAM,oBAAoBD,EAAQC,EAASxE,CAAO,EAE9DuE,IAAW,kBAEbC,EAAQ,OAAS,KAAK,OACtBA,EAAQ,QAAU,KAAK,QACvBA,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,QAG5BA,CACX,CAKE,MAAM,UAAUA,EAASxE,EAAS,CR3mB7B,IAAAC,EAAA6B,EAAA2C,EQknBH,GANY/D,EAAQ,OAAO,KAAM,WAAW,EACxC,mBAAoB,CAAC8D,EAASxE,CAAO,CAAC,EAC1C,MAAM,UAAUwE,EAASxE,CAAO,EAI5B,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAKF,IAAI0E,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EASjE,GAAIA,IAAkB,KAAK,QAAU,KAAK,OAAO,OAAS,GAAI,CAE5D,MAAMC,EAAe,CACnB,OAAQ,KAAK,OACb,QAAS,KAAK,QACd,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM,eAAe,WAAW3F,CAAS,uCAAwC0F,CAAY,EAGxGE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAGpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CAGI,KAAK,uBAAwB,IAGzBD,GAAA3C,GAAA7B,EAAA,KAAK,OAAO,QAAZ,YAAAA,EAAoB,KAApB,YAAA6B,EAAwB,OAAxB,MAAA2C,EAA8B,aAAe,KAAK,OAAO,cAE3D,WAAW,IAAM,CACf,KAAK,QAAS,CACf,EAAE,GAAG,CAEZ,CAME,wBAAyB,CACX/D,EAAQ,OAAO,KAAM,wBAAwB,EACrD,4BAA4B,EAChB,KAAK,QAAQ,iBAAiB,iFAAiF,EACvH,QAAQoE,GAAU,CACxBA,EAAO,iBAAiB,QAAUC,GAAU,CAC3BA,EAAM,cAAc,QAAQ,MACnD,CAAO,CACP,CAAK,CACL,CAKE,cAAcC,EAAYD,EAAO,CRnrB5B,IAAA9E,EAAA6B,EQorBSpB,EAAQ,OAAO,KAAM,eAAe,EAC5C,0BAA2B,CAACsE,EAAYD,CAAK,CAAC,EAClD,MAAM,cAAcC,EAAYD,CAAK,EAGrC,MAAME,EAAsB,KAAK,QAAQ,cAAc,mCAAmC,EACtFA,IACF,KAAK,YAAcA,EAAoB,SAGzC,MAAMC,EAAU,KAAK,QAAQ,cAAc,kBAAkB,EACzDA,GAAWA,EAAQ,QACrB,KAAK,QAAU,SAASA,EAAQ,KAAK,GAAK,QAIxCjF,EAAA8E,EAAM,SAAN,YAAA9E,EAAc,QAAS,aAAa6B,EAAAiD,EAAM,SAAN,MAAAjD,EAAc,SACpD,KAAK,OAAO,QAAUiD,EAAM,OAAO,MAGzC,CAME,aAAaxB,EAAQ4B,EAAUC,EAAO,CACxB1E,EAAQ,OAAO,KAAM,cAAc,EAC3C,6BAA8B,CAAC6C,EAAQ4B,EAAUC,CAAK,CAAC,EAE3D,MAAMC,EAAkBF,GAAA,YAAAA,EAAU,IAAI,WAChCG,EAAaH,GAAA,YAAAA,EAAU,IAAI,MAI7BE,IACF9B,EAAO,QAAU8B,EAEjB,KAAK,OAAO,QAAUA,GAGxB,MAAMvE,EAAS,MAAM,aAAayC,EAAQ4B,EAAUC,CAAK,EAGzD,GAAIE,EAAY,CACd,MAAMC,EAAU,SAASD,CAAU,EAC9B,MAAMC,CAAO,IAChBzE,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAASyE,EAEhC,MAAe,KAAK,UAAY,QAAa,KAAK,UAAY,OACxDzE,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAAS,KAAK,SAI/B,OAAOA,CACX,CAKE,MAAM,mBAAmBiE,EAAOS,EAAML,EAAU,CAO9C,GANYzE,EAAQ,OAAO,KAAM,oBAAoB,EACjD,+BAAgC,CAACqE,EAAOS,EAAML,CAAQ,CAAC,EAE3D,MAAM,MAAM,mBAAmBJ,EAAOS,EAAML,CAAQ,EAGhDA,EAAS,IAAI,IAAI,GAAKA,EAAS,IAAI,IAAI,IAAM,GAAI,CACnD,MAAMI,EAAU,SAASJ,EAAS,IAAI,IAAI,CAAC,EAC3C,GAAI,CAAC,MAAMI,CAAO,IAEhB,KAAK,QAAUA,EAGX,KAAK,OAAO,OAAS,KAAK,OAAO,MAAM,OAAS,GAClD,UAAWvE,KAAQ,KAAK,OAAO,MAC7BA,EAAK,QAAQ,OAASuE,CAIlC,CAGI,KAAK,YAAcJ,EAAS,IAAI,qBAAqB,IAAM,OAC/D,CAKE,eAAeM,EAAQ,CACT/E,EAAQ,OAAO,KAAM,gBAAgB,EAC7C,8BAA+B,CAAC+E,CAAM,CAAC,EAG3C,MAAMC,EAAiB,MAAM,eAAeD,CAAM,EAGlD,GAAI,KAAK,UAAY,QAAa,KAAK,UAAY,KACjD,UAAWzE,KAAQ0E,EACjB1E,EAAK,QAAQ,OAAS,KAAK,QAK/B,YAAK,OAAO,YAAc,KAAK,YAExB0E,CACX,CAUE,aAAa,iBAAiBC,EAAQ/C,EAAUgD,EAAS5F,EAAU,CAAA,EAAI,CR3yBlE,IAAAC,EAAA6B,EAAA2C,EAAAoB,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GQ4yBSxF,EAAQ,OAAOoH,GAAyB,kBAAkB,EAClE,mCAAoC,CAACnC,EAAQ/C,EAAUgD,EAAS5F,CAAO,CAAC,EAG5E,MAAMyD,EAAqBb,GAAA,YAAAA,EAAU,cAG/B0D,EAAS,CAAClH,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASqE,CAAkB,EAGxEL,EAAQuC,EAAO,CAAC,EACtB,GAAI,CAACvC,EAAO,OAAO,KAGnB,MAAMmD,EAAY,OAAO,KAAK,QAG9B,IAAIY,EAAiB,KACrB,GAAI1D,IAAuBrE,EAAW,MAAO,CAC3C,MAAMmI,EAAQnE,EAAM,OAAO,OAAOwC,CAAO,EACzCuB,GAAiBI,GAAA,YAAAA,EAAO,YAAWtH,EAAA,OAAO,MAAM,OAAO2F,CAAO,IAA3B,YAAA3F,EAA8B,UAAW,KAClF,SAAewD,IAAuBrE,EAAW,KAAM,CAEjD,MAAM4I,GAAOlG,EAAAsB,EAAM,OAAO,QAAb,YAAAtB,EAAqB8D,GAClCuB,GAAiBa,GAAA,YAAAA,EAAM,YAAWlC,GAAAD,GAAApB,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAoB,EAAuCD,KAAvC,YAAAE,EAAiD,UAAW,KACpG,CAGI,MAAMU,EAAa,CACjB,KAAMpD,EAAM,YAAa,EACzB,QAASA,EACT,QAAS+D,EACT,cAAe,GACf,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAM/D,EAAM,YAAa,EACzB,QAAS,CAAA,CACV,CAAA,CACF,EAGGK,IAAuBrE,EAAW,MACpCoH,EAAW,MAAQZ,EACVnC,IAAuBrE,EAAW,OAC3CoH,EAAW,KAAOZ,GAIpB,MAAMa,EAAgB,CACpB,OAAQ,GACR,KAAM,CACJ,QAAS,YAAY,WAAW,CAAE,MAAArD,CAAO,CAAA,CACjD,CACK,EAGKM,EAAe,CACnB,QAAS,CACP,OAAAiC,EACA,YAAaA,EAAO,KAAKe,GAAKtC,EAAmB,eAAesC,CAAC,CAAC,EAClE,OAAAJ,EACA,QAAAV,EACA,SAAUW,EACV,OAAQ,CACN,MAAOnC,EAAmB,cAAcX,EAAoBmC,EAASxC,CAAK,EAC1E,SAAUuC,EAAO,IAAIe,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,CAC5C,EACD,GAAG1G,CACX,CACK,EAGK2G,EAAM,IAAI,KAAKH,EAAYC,EAAe/C,EAAa,OAAO,EAG9D5C,EAAS,MAAM,IAAI,QAAQ8F,GAAW,CAC1CD,EAAI,iBAAiB,QAAS,IAAM,CAElCC,EAAQ,CACN,MAAOD,EAAI,MACX,OAAQA,EAAI,OACZ,QAASA,EAAI,QACb,YAAaA,EAAI,WAC3B,CAAS,CACT,EAAS,CAAE,KAAM,GAAM,EACjBA,EAAI,OAAO,CAAE,MAAO,EAAI,CAAE,CAChC,CAAK,EAID,GAAI,CAAC7F,EAAO,OAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAGvD,MAAM+F,EAAY/F,EAAO,MAAM,CAAC,EAChC,IAAIgG,EAAY,GACZC,EAAe,KAEfhB,GAAAc,GAAA,YAAAA,EAAW,UAAX,YAAAd,GAAoB,iBAAkB,SACxCe,EAAYD,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,UAC7EE,EAAeF,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,cAIlF,MAAMG,EAAc,CAClB,YAAa,GACb,cAAelG,EAAO,YACtB,WAAYd,EAAQ,aAAe,GACnC,YAAac,EAAO,WACrB,EAGGgG,IAAWE,EAAY,UAAY,IACnCD,IAAcC,EAAY,aAAe,IAG7C,MAAMC,EAAkB,KAAK,SAAS,IAAI,OAAQ,UAAU,EACxDnG,EAAO,QAAQ,UAAYA,EAAO,QAAQ,WAAamG,IACzDD,EAAY,SAAWlG,EAAO,QAAQ,UAKxC,MAAMoG,IAAclB,GAAAa,GAAA,YAAAA,EAAW,UAAX,YAAAb,GAAoB,gBAAeC,GAAAY,GAAA,YAAAA,EAAW,OAAX,YAAAZ,GAAiB,cAAe,GACvF,OAAIiB,IACFF,EAAY,YAAcE,EAC1BF,EAAY,MAAQ,CAACE,CAAW,IAI9BhB,GAAAW,GAAA,YAAAA,EAAW,UAAX,MAAAX,GAAoB,SACtBc,EAAY,OAASH,EAAU,QAAQ,QAIrC/F,EAAO,OAAO,SAAW,CAAC1B,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASqE,CAAkB,IAC1FuD,EAAY,QAAUlG,EAAO,OAAO,SAItCkG,EAAY,UAAYtD,EAAa,QAAQ,OAAO,MAG7CsD,CACX,CACA,CCh7BO,MAAMiB,EAAN,MAAMA,CAAgB,CAS3B,OAAO,YAAa,CACNvH,EAAQ,OAAOuH,EAAiB,YAAY,EACpD,cAAc,EAGb,KAAK,KAAK,MAEf,KAAK,cAAe,CACxB,CAKE,OAAO,eAAgB,CACTvH,EAAQ,OAAOuH,EAAiB,eAAe,EACvD,mBAAmB,EACvB,KAAK,cAAcxI,EAAY,uBAAwB,KAAK,eAAe,KAAK,KAAML,EAAW,OAAO,CAAC,EACzG,KAAK,cAAcK,EAAY,sBAAuB,KAAK,eAAe,KAAK,KAAML,EAAW,IAAI,CAAC,EACrG,KAAK,cAAcK,EAAY,kBAAmB,KAAK,eAAe,KAAK,KAAML,EAAW,KAAK,CAAC,EAClG,KAAK,cAAcK,EAAY,iBAAkB,KAAK,eAAe,KAAK,KAAML,EAAW,IAAI,CAAC,EAEhG,KAAK,cAAcK,EAAY,mBAAoB,KAAK,eAAe,KAAK,KAAML,EAAW,MAAM,CAAC,EACpG,KAAK,cAAcK,EAAY,mBAAoB,KAAK,eAAe,KAAK,KAAML,EAAW,MAAM,CAAC,EACpG,KAAK,cAAcK,EAAY,oBAAqB,KAAK,eAAe,KAAK,KAAML,EAAW,UAAU,CAAC,EACzG,KAAK,cAAcK,EAAY,uBAAwB,KAAK,eAAe,KAAK,KAAML,EAAW,UAAU,CAAC,EAC5G,KAAK,cAAcK,EAAY,oBAAqB,KAAK,eAAe,KAAK,KAAML,EAAW,OAAO,CAAC,CAE1G,CAOE,OAAO,cAAc8I,EAAU5G,EAAS,CAC1BZ,EAAQ,OAAOuH,EAAiB,eAAe,EACvD,mBAAoB,CAACC,CAAQ,CAAC,EAClC,MAAMC,EAAS,MAAM,GAAGD,EAAU5G,CAAO,EACzC,KAAK,gBAAgB,IAAI,CAAE,SAAA4G,EAAU,OAAAC,CAAM,CAAE,CACjD,CAKE,OAAO,iBAAkB,CACXzH,EAAQ,OAAOuH,EAAiB,iBAAiB,EACzD,yBAAyB,EAC7B,SAAW,CAAE,SAAAC,EAAU,OAAAC,CAAM,IAAM,KAAK,gBACtC,MAAM,IAAID,EAAUC,CAAM,EAE5B,KAAK,gBAAgB,MAAO,CAChC,CAQE,OAAO,sBAAsB5E,EAAQvD,EAAS,CAQ5C,GAPYU,EAAQ,OAAOuH,EAAiB,uBAAuB,EAC/D,4BAA6B,CAAC1E,EAAQvD,CAAO,CAAC,EAE9C,CAAC,KAAK,KAAK,MAIXuD,GAAA,MAAAA,EAAQ,cAAe,OAG3B,MAAMH,EAAQG,GAAA,YAAAA,EAAQ,QAGhBtB,EAAWjD,EAAa,EACxBoJ,EAA0BpG,EAAa,IAAIC,EAAS,wBAAwB,GAAG,EAC/EoG,EAAsBrG,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EAO7E,GANI,CAACmG,GAA2B,CAACC,GAM7B,CAACjF,GAASA,EAAM,eAAiB,QACnC,OAIF,MAAMkF,EAAQ,KAAK,eAAelF,CAAK,EAMvC,GALI,CAACkF,GAASA,EAAM,KAAO,KAAK,KAAK,IAKjC,CAACA,EAAM,OACT,OAIF,IAAI1F,EAAW,UACXgD,EAAU,KAGd,OAAIrC,GAAA,MAAAA,EAAQ,SACVX,EAAWW,EAAO,KAAOnE,EAAW,KAAOA,EAAW,QACtDwG,EAAUrC,EAAO,SACRA,GAAA,MAAAA,EAAQ,OACjBX,EAAWxD,EAAW,MACtBwG,EAAUrC,EAAO,OACRA,GAAA,MAAAA,EAAQ,OACjBX,EAAWxD,EAAW,KACtBwG,EAAUrC,EAAO,MAIfqC,GAAWrC,IACbA,EAAS,CAAE,GAAGA,EAAQ,QAASqC,CAAS,GAE1C,KAAK,iBAAiBxC,EAAOkF,EAAO1F,EAAUW,CAAM,EAG7C,EACX,CAUE,OAAO,eAAeX,EAAUW,EAAQe,EAAQD,EAAS,CTxJpD,IAAApE,ES4JH,GAHYS,EAAQ,OAAOuH,EAAiB,gBAAgB,EACxD,oBAAqB,CAACrF,EAAUW,EAAQe,EAAQD,CAAO,CAAC,EAExD,CAAC,KAAK,KAAK,KAAM,OAIrB,IAAIjB,EACJ,GAAIR,IAAaxD,EAAW,YAAcmE,aAAkB,MAC1DH,EAAQG,MAKH,CAEL,GAAIA,GAAA,MAAAA,EAAQ,eAAiBe,GAAA,MAAAA,EAAQ,eAAiBD,GAAA,MAAAA,EAAS,cAC7D,OAIFjB,IAAQnD,EAAAsD,EAAO,UAAP,YAAAtD,EAAgB,QAASsD,EAAO,SAAWA,EAAO,KAChE,CAGI,MAAMtB,EAAWjD,EAAa,EACxBoJ,EAA0BpG,EAAa,IAAIC,EAAS,wBAAwB,GAAG,EAC/EoG,EAAsBrG,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EAM7E,GALI,CAACmG,GAA2B,CAACC,GAK7B,CAACjF,GAASA,EAAM,eAAiB,QACnC,OAIF,MAAMkF,EAAQ,KAAK,eAAelF,CAAK,EACvC,GAAI,GAACkF,GAASA,EAAM,KAAO,KAAK,KAAK,KAMhCA,EAAM,OAOX,YAAK,oBAAoBlF,EAAOkF,EAAO1F,EAAUW,EAAQe,EAAQD,CAAO,EAGjE,EACX,CAWE,aAAa,oBAAoBjB,EAAOkF,EAAO1F,EAAUW,EAAQe,EAAQD,EAAS,CT5N7E,IAAApE,EAAA6B,ES6NSpB,EAAQ,OAAOuH,EAAiB,qBAAqB,EAC7D,2BAA4B,CAAC7E,EAAOkF,EAAO1F,EAAUW,EAAQe,EAAQD,CAAO,CAAC,EACjF,GAAI,CAEF,MAAMZ,EAAqBb,GAAA,YAAAA,EAAU,cAG/B2F,EAAc,CAACnJ,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASqE,CAAkB,EAAIqE,GAA0B1D,EAGjH,IAAIoC,EAAa,CACf,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACV,CAAA,CACF,EAGD,OAAQ/C,EAAkB,CACxB,KAAKrE,EAAW,QACdoH,EAAW,QAAUjD,EAAO,WAAWtD,EAAAsD,EAAO,UAAP,YAAAtD,EAAgB,SACvD,MACF,KAAKb,EAAW,KACdoH,EAAW,QAAUjD,EAAO,WAAWzB,EAAAyB,EAAO,UAAP,YAAAzB,EAAgB,SAEnDyB,EAAO,UAAY,OAASA,EAAO,cAAgB,SACrDX,EAAWxD,EAAW,eAExB,MACF,KAAKA,EAAW,MACdoH,EAAW,MAAQjD,EAAO,MAC1BiD,EAAW,QAAUjD,EAAO,QAC5B,MACF,KAAKnE,EAAW,KACdoH,EAAW,KAAOjD,EAAO,KACzBiD,EAAW,QAAUjD,EAAO,QAC5B,MACF,KAAKnE,EAAW,cACdoH,EAAW,QAAU,MACrB,KACV,CAEM,MAAMxG,EAAU,CACd,OAAQ,CAACoD,CAAK,EACd,SAAUK,EACV,OAAQ,GACR,mBAAoB,GACpB,YAAa,EACd,EAIK3C,EAAS,MADE,IAAIyH,EAAY/B,EAAY,CAAA,EAAIxG,CAAO,EAC1B,OAAO,EAAI,EAIzC,GAAI,CAACc,GAAU,CAACA,EAAO,YAAa,CAMlC,MAAM,KAAK,kBAAkBsC,EAAOR,EAAUW,EAAQzC,GAAU,EAAE,EAClE,MACR,CAGM,MAAMkG,EAAc,CAClB,GAAGzD,EACH,GAAGzC,EACH,YAAa,KAAK,KAAK,IACxB,EAED,KAAK,iBAAiBsC,EAAOkF,EAAO1F,EAAUoE,CAAW,CAE1D,MAAe,CAEd,KAAK,iBAAiB5D,EAAOkF,EAAO1F,EAAUW,CAAM,CAC1D,CACA,CASE,aAAa,kBAAkBH,EAAOR,EAAU4F,EAAgBC,EAAc,CAChE/H,EAAQ,OAAOuH,EAAiB,mBAAmB,EAC3D,uBAAwB,CAAC7E,EAAOR,EAAU4F,EAAgBC,CAAY,CAAC,EAE3E,MAAMhF,EAAqBb,GAAA,YAAAA,EAAU,cAG/BW,EAAS,CACb,GAAGiF,EACH,UAAWC,EAAa,WAAaD,EAAe,UACpD,aAAcC,EAAa,cAAgBD,EAAe,aAC1D,MAAOC,EAAa,aAAeD,EAAe,MAClD,OAAQC,EAAa,IAAMD,EAAe,OAC1C,SAAUC,EAAa,UAAYD,EAAe,SAClD,cAAe,EAChB,EAEK9E,EAAe,CACnB,UAAW,GACX,cAAe,EAChB,EAEK+C,EAAgB,CACpB,SAAUlD,EAAO,SACjB,OAAQ,GACR,cAAe,EAChB,EAED,GAAI,CACF,OAAQE,EAAkB,CACxB,KAAKrE,EAAW,KACd,MAAMgE,EAAM,gBAAgBoF,EAAe,QAASjF,EAAQG,EAAc+C,CAAa,EACvF,MACF,KAAKrH,EAAW,QACd,MAAMgE,EAAM,iBAAiBoF,EAAe,QAASjF,EAAQG,EAAc+C,CAAa,EACxF,MACF,KAAKrH,EAAW,MACd,MAAMgE,EAAM,UAAUoF,EAAe,MAAOjF,EAAQG,EAAc+C,CAAa,EAC/E,MACF,KAAKrH,EAAW,KACd,MAAMgE,EAAM,cAAcoF,EAAe,KAAMjF,EAAQG,EAAc+C,CAAa,EAClF,MACF,KAAKrH,EAAW,cACd,MAAMgE,EAAM,kBAAkBG,EAAQG,EAAc+C,CAAa,EACjE,KAEV,CACK,MAAe,CACpB,CACA,CAWE,aAAa,yBAAyBrD,EAAOkF,EAAO1F,EAAUW,EAAQe,EAAQD,EAAS,CACzE3D,EAAQ,OAAOuH,EAAiB,0BAA0B,EAClE,+BAAgC,CAAC7E,EAAOkF,EAAO1F,EAAUW,EAAQe,EAAQD,CAAO,CAAC,EACrF,GAAI,CAWF,MAAMqE,EAAiB,CACrB,GAAGnF,EACH,YAVkB,MAAOyD,IAEzB,KAAK,iBAAiB5D,EAAOkF,EAAO1F,EAAUoE,CAAW,EAElD,IAAI,KAAK,MAAM,EAAE,SAAS,CAAC,MAAO,EAAK,CAAC,GAO/C,WAAY,EACb,EAGKuB,EAAcjE,EAAO,IAIrBxD,EAAS,MAHI,IAAIyH,EAAYG,EAAgBpE,EAAO,OAAO,EAGjC,OAAO,EAAI,CAE5C,MAAe,CAEd,KAAK,iBAAiBlB,EAAOkF,EAAO1F,EAAUW,CAAM,CAC1D,CACA,CAOE,OAAO,eAAeH,EAAO,CACf1C,EAAQ,OAAOuH,EAAiB,gBAAgB,EACxD,sBAAuB,CAAC7E,CAAK,CAAC,EAElC,MAAMuF,EAAYvF,EAAM,WAAa,CAAE,EAEvC,SAAW,CAAC5B,EAAQ4F,CAAK,IAAK,OAAO,QAAQuB,CAAS,EACpD,GAAIvB,GAAS,MAAM,0BAA0B,MAAO,CAClD,MAAMrF,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,GAAIO,GAAQ,CAACA,EAAK,KAChB,OAAOA,CAEjB,CAGI,OAAO,IACX,CASE,OAAO,iBAAiBqB,EAAOkF,EAAO1F,EAAUW,EAAQ,CTjbnD,IAAAtD,ESkbSS,EAAQ,OAAOuH,EAAiB,kBAAkB,EAC1D,uBAAwB,CAAC7E,EAAOkF,EAAO1F,EAAUW,CAAM,CAAC,EAC5D,MAAMtB,EAAWjD,EAAa,EACxB4J,EAAc5G,EAAa,IAAIC,EAAS,YAAY,GAAG,EAGvDwB,EAAqBb,GAAA,YAAAA,EAAU,cAGrC,IAAIgD,EAAU,KACVtC,EAAa,KACjB,OAAQG,EAAkB,CACxB,KAAKrE,EAAW,QAChB,KAAKA,EAAW,KACdwG,EAAUrC,EAAO,QACjB,MACF,KAAKnE,EAAW,MACdwG,EAAUrC,EAAO,MACjB,MACF,KAAKnE,EAAW,KACdwG,EAAUrC,EAAO,KACjB,MACF,KAAKnE,EAAW,OAChB,KAAKA,EAAW,OACd,IAAIa,EAAAsD,EAAO,UAAP,MAAAtD,EAAgB,KAAM,CACxB2F,EAAUrC,EAAO,QAAQ,KAAK,GAE9B,MAAMC,EAAWd,EAAa,oBAAoBa,EAAO,QAAQ,KAAMX,CAAQ,EAC3EY,IACFF,EAAaE,EAAS,GAElC,CACQ,MACF,KAAKpE,EAAW,QACdwG,EAAUrC,EAAO,aACjB,MACF,QAEE7C,EAAQ,KAAK,sBAAsBkC,CAAQ,EAAE,EAC7C,MACR,CAGI,MAAMiG,EAAc,CAClB,UAAWtF,EAAO,WAAa,GAC/B,aAAcA,EAAO,cAAgB,GACrC,YAAaA,EAAO,aAAe,EACnC,MAAOA,EAAO,OAAS,CAAE,EACzB,SAAUA,EAAO,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EACjE,cAAeA,EAAO,eAAiB,GACvC,cAAeA,EAAO,eAAiB,GACvC,eAAgBA,EAAO,gBAAkB,GACzC,QAASA,EAAO,QAChB,SAAUA,EAAO,SACjB,SAAUA,EAAO,SACjB,OAAQA,EAAO,OACf,YAAaA,EAAO,YACpB,YAAaA,EAAO,aAAe,GACnC,YAAaA,EAAO,cAAgB,GACpC,OAAQA,EAAO,OACf,MAAOA,EAAO,MACd,cAAeA,EAAO,cACtB,YAAaA,EAAO,WACrB,EAGD,OAAO,KAAKsF,CAAW,EAAE,QAAQC,GAAO,CAClCD,EAAYC,CAAG,IAAM,QACvB,OAAOD,EAAYC,CAAG,CAE9B,CAAK,EAGD,MAAMC,EAAc,CAClB,KAAM,cACN,UAAW,QAAQ,MAAM,SAAU,EACnC,QAAS3F,EAAM,GACf,SAAUK,EACV,QAAAmC,EACA,WAAAtC,EACA,OAAQuF,EACR,WAAYD,EACZ,eAAgB,MAAM,KAAK,KAAK,KAAK,OAAO,EAAE,IAAII,GAAKA,EAAE,EAAE,EAC3D,gBAAiBhH,EAAa,IAAIC,EAAS,kBAAkB,GAAG,CACjE,EAGDP,EAAW,YAAY,oBAAqB4G,EAAM,GAAIS,CAAW,EAGjE,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,qDAAsD,CAC3F,OAAQT,EAAM,KACd,MAAOlF,EAAM,IACnB,CAAK,CAAC,CACN,CACA,EAjgBE3C,EAJWwH,EAIJ,kBAAkB,IAAI,KAJxB,IAAMgB,GAANhB,ECAA,SAASiB,GAAmBtG,EAAUgD,EAAS,CVZ/C,IAAA3F,EAAA6B,EAAA2C,EAAAoB,EAAAC,EUaL,IAAIqD,EAAU,KAAK,KAAK,SAAS,0BAA0BvG,CAAQ,EAAE,GAAKA,EAG1E,MAAMa,EAAqBb,GAAA,YAAAA,EAAU,cAErC,GAAIgD,EACF,OAAQnC,EAAkB,CACxB,KAAKrE,EAAW,MACd+J,GAAW,OAAKlJ,EAAA,OAAO,MAAM,OAAO2F,CAAO,IAA3B,YAAA3F,EAA8B,QAAS2F,CAAO,IAC9D,MACF,KAAKxG,EAAW,KACd+J,GAAW,OAAKrH,EAAA,OAAO,MAAM,UAAU8D,CAAO,IAA9B,YAAA9D,EAAiC,QAAS8D,CAAO,IACjE,MACF,KAAKxG,EAAW,QACd+J,GAAW,OAAK1E,EAAA,OAAO,MAAM,UAAUmB,CAAO,IAA9B,YAAAnB,EAAiC,QAASmB,CAAO,IACjE,MACF,KAAKxG,EAAW,KACd,MAAMuI,GAAW7B,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuCF,GACxD,GAAI+B,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFwB,GAAW,MAAKtB,GAAA,YAAAA,EAAU,OAAQjC,CAAO,GACnD,MACUuD,GAAW,KAAKvD,CAAO,IAEzB,MACF,KAAKxG,EAAW,OACd+J,EAAU,GAAGA,CAAO,KAAKvD,CAAO,GAChC,KACR,CAGE,OAAOuD,CACT,CAOO,SAASC,GAAyBC,EAAsBC,EAAuBJ,GAAoB,CACxG,GAAIG,EAAqB,SAAW,EAAG,OAGvC,MAAME,EAAsB,CAAE,EAC9B,UAAWC,KAASH,EAAsB,CACxC,MAAMP,EAAM,GAAGU,EAAM,QAAQ,IAAIA,EAAM,SAAW,EAAE,GAC/CD,EAAoBT,CAAG,IAC1BS,EAAoBT,CAAG,EAAI,CACzB,SAAUU,EAAM,SAChB,QAASA,EAAM,QACf,OAAQ,CAAE,EACV,GAAIA,EAAM,EACX,GAEHD,EAAoBT,CAAG,EAAE,OAAO,KAAKU,EAAM,KAAK,CACpD,CAEE,MAAMC,EAAU,OAAO,OAAOF,CAAmB,EACjD,GAAIE,EAAQ,SAAW,GAAKA,EAAQ,CAAC,EAAE,OAAO,SAAW,EAAG,CAE1D,MAAMvH,EAAQuH,EAAQ,CAAC,EACvB,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,yDAA0D,CAC/F,GAAIvH,EAAM,GACV,SAAUoH,EAAqBpH,EAAM,SAAUA,EAAM,OAAO,CAClE,CAAK,CAAC,CACN,KAAS,CAEL,MAAMwH,EAAW,CAAE,EACnB,UAAWxH,KAASuH,EAAS,CAC3B,MAAME,EAAkBL,EAAqBpH,EAAM,SAAUA,EAAM,OAAO,EACpE0H,EAAa1H,EAAM,OAAO,KAAK,IAAI,EACzCwH,EAAS,KAAK,GAAGC,CAAe,KAAKC,CAAU,GAAG,CACxD,CAEI,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,kEAAmE,CACxG,GAAIH,EAAQ,CAAC,EAAE,GACf,SAAUC,EAAS,KAAK,IAAI,CAClC,CAAK,CAAC,CACN,CACA,CAOO,SAASG,GAAezG,EAAO,CACpC,MAAMuF,EAAYvF,EAAM,WAAa,CAAE,EAEvC,SAAW,CAAC5B,EAAQ4F,CAAK,IAAK,OAAO,QAAQuB,CAAS,EACpD,GAAIvB,GAAS,MAAM,0BAA0B,MAAO,CAClD,MAAMrF,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,GAAIO,GAAQ,CAACA,EAAK,KAChB,OAAOA,CAEf,CAGE,OAAO,IACT,CAsBO,SAAS+H,GAAkBC,EAAUhI,EAAO,KAAK,KAAM,CAC5D,GAAI,EAACgI,GAAA,MAAAA,EAAU,QAAQ,OAERA,EACZ,IAAIC,GAAM,OAAO,OAAO,IAAIA,CAAE,CAAC,EAC/B,OAAOhB,GAAKA,CAAC,EAET,QAAQA,GAAKA,EAAE,UAAU,GAAM,CAAE,KAAAjH,CAAI,CAAE,CAAC,CACjD,CAkCO,SAASkI,GAAc7G,EAAO,CAEnC,OAAIA,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAc,GAExD,OAAO,QAAQA,EAAM,SAAS,EAClC,KAAK,CAAC,CAAC5B,EAAQ4F,CAAK,IAAM,CACzB,MAAMrF,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,OAAOO,GAAQ,CAACA,EAAK,MAAQqF,GAAS,MAAM,0BAA0B,KAC5E,CAAK,CACL,CAOO,SAAS8C,GAAgB9G,EAAO,CAErC,GAAIA,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAO,MAAO,GAE/D,MAAM+G,EAAe,KAAK,OAAO,OACjC,OAAOA,GAAgBA,EAAa,OAAO,KAAKC,GAASA,EAAM,UAAYhH,EAAM,EAAE,CACrF,CAOO,SAASiH,GAA2BC,EAASC,EAAU,CAE5D,GAAI,CADU,KAAK,OAAO,OACd,OAGZ,MAAMC,EAAS,OAAO,OAAO,WAAW,OAAOxB,GAAC,CVlN3C,IAAA/I,EUkN+C,QAAAA,EAAA+I,EAAE,QAAF,YAAA/I,EAAS,MAAOqK,EAAO,EAE3E,UAAWF,KAASI,EACdD,EAEFH,EAAM,QAAQ,CAAE,cAAe,EAAK,CAAE,EAGtCA,EAAM,QAAS,CAGrB,CAOO,SAASK,GAAMC,EAAI,CACxB,OAAO,IAAI,QAAQ9D,GAAW,WAAWA,EAAS8D,CAAE,CAAC,CACvD,CAMO,SAASC,IAAoB,CV5O7B,IAAA1K,EU6OL,MAAO,GAACA,EAAA,mBAAI,UAAJ,MAAAA,EAAa,WACvB,CAMO,SAAS2K,GAAmBC,EAAY,CAC7C,MAAMC,EAAO,SAAS,cAAc,MAAM,EACtCD,EACFC,EAAK,UAAU,IAAI,kBAAkB,EAErCA,EAAK,UAAU,OAAO,kBAAkB,CAE5C,CAQO,SAASC,GAAeC,EAAqBC,EAAgB,CVnQ7D,IAAAhL,EUoQL,MAAMiL,EAAY,CAAE,EAEpB,GAAI,CAACF,GAAuBC,EAAe,OAAS,EAClD,OAAOC,EAGT,MAAMC,EAAiB7L,EAAO,qBAAqB0L,CAAmB,EACtE,GAAI,CAACG,GAAkB,CAACA,EAAe,QACrC,OAAOD,EAIT,MAAME,EAAe,MAAM,KAAKH,CAAc,EAAE,CAAC,EAC3C7H,EAAQ,KAAK,OAAO,IAAIgI,CAAY,EAG1C,GAAID,EAAe,UAAY,QAAS,CAEtC,MAAME,IAAWpL,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAAS,OAAO,MAAM,OAAS,CAAE,EAEjF,SAAW,CAAC6I,EAAKnB,CAAQ,IAAK,OAAO,QAAQ0D,CAAQ,EAAG,CACtD,IAAIC,EAAQxC,EAGZ,GAAInB,GAAA,MAAAA,EAAU,GAAI,CAEhB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnF2D,GAAQzD,GAAA,YAAAA,EAAU,OAAQiB,CAClC,MAGQwC,EAAQxC,EAAI,QAAQ,WAAY,KAAK,EAAE,QAAQ,KAAMyC,GAAOA,EAAI,YAAa,CAAA,EAAE,KAAM,EAGvFL,EAAU,KAAK,CACb,GAAIpC,EACJ,KAAMwC,EACN,SAAU,EAClB,CAAO,CACP,CAGIJ,EAAU,KAAK,CAACxE,EAAG8E,IAAM9E,EAAE,KAAK,cAAc8E,EAAE,IAAI,CAAC,CACzD,SAEWpI,GAAS+H,EAAe,UAAW,CAC1C,MAAMM,EAAW,QAAQ,MAAM,YAAYrI,EAAO+H,EAAe,SAAS,GAAK,CAAE,EAG3EO,EAAa,OAAO,MAAMP,EAAe,OAAO,EAEtD,SAAW,CAACrC,EAAKlJ,CAAI,IAAK,OAAO,QAAQ6L,CAAQ,EAAG,CAClD,IAAIH,EAAQ,GAGRH,EAAe,UAAY,WAAYO,GAAA,MAAAA,EAAa5C,KAI/CqC,EAAe,UAAY,cAAeO,GAAA,MAAAA,EAAa5C,IAH9DwC,EAAQI,EAAW5C,CAAG,EAAE,MAQxBwC,EAAQ1L,EAAK,OAAS,KAAK,KAAK,SAASA,EAAK,MAAQkJ,CAAG,GAAKA,EAGhEoC,EAAU,KAAK,CACb,GAAIpC,EACJ,KAAMwC,EACN,SAAU,EAClB,CAAO,CACP,CAGQH,EAAe,UAAY,UAC7BD,EAAU,KAAK,CAACxE,EAAG8E,IAAM9E,EAAE,KAAK,cAAc8E,EAAE,IAAI,CAAC,CAE3D,CAEE,OAAON,CACT,CAKO,MAAMS,EAAN,MAAMA,CAAoB,CAa/B,OAAO,OAAOC,EAAMvH,EAASrE,EAAU,CAAA,EAAI,CAEzC,GAAI,CAACA,EAAQ,MAAO,CAClB,GAAG,cAAc4L,CAAI,EAAEvH,CAAO,EAC9B,MACN,CAGQrE,EAAQ,YACV2L,EAAoB,qBAAqB,KAAK3L,EAAQ,SAAS,EAG3D2L,EAAoB,mBACtB,aAAaA,EAAoB,iBAAiB,EAGpDA,EAAoB,kBAAoB,WAAW,IAAM,CACvDvC,GAAyBuC,EAAoB,oBAAoB,EACjEA,EAAoB,qBAAuB,CAAE,EAC7CA,EAAoB,kBAAoB,IAChD,EAASA,EAAoB,wBAAwB,EAErD,CAOE,OAAO,uBAAuBE,EAAkBC,EAAc,CAC5D,MAAMC,EAAqB,OAAO,QAAQF,CAAgB,EAE1D,GAAIE,EAAmB,SAAW,EAGlC,GAAIA,EAAmB,SAAW,EAAG,CACnC,MAAMC,EAAa,OAAO,OAAOH,CAAgB,EAAE,CAAC,EAC9CjC,EAAaoC,EAAW,OAAO,IAAI,GAAK,EAAE,IAAI,EAAE,KAAK,IAAI,EAC/D,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,4DAA6D,CAClG,SAAUF,EACV,OAAQlC,EACR,OAAQoC,EAAW,OAAO,IAClC,CAAO,CAAC,CACR,KAAW,CAEL,MAAMC,EAAkBF,EAAmB,IAAI,CAAC,CAACG,EAAUtM,CAAI,IAAM,CACnE,MAAMgK,EAAahK,EAAK,OAAO,IAAI8G,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,EACzD,MAAO,GAAG9G,EAAK,OAAO,IAAI,KAAKgK,CAAU,GACjD,CAAO,EACD,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,8DAA+D,CACpG,SAAUkC,EACV,MAAOC,EAAmB,OAC1B,QAASE,EAAgB,KAAK,IAAI,CAC1C,CAAO,CAAC,CACR,CACA,CAKE,OAAO,cAAe,CAChBN,EAAoB,oBACtB,aAAaA,EAAoB,iBAAiB,EAClDA,EAAoB,kBAAoB,MAE1CA,EAAoB,qBAAuB,CAAE,CACjD,CACA,EA/EElL,EADWkL,EACJ,uBAAuB,CAAE,GAChClL,EAFWkL,EAEJ,oBAAoB,MAC3BlL,EAHWkL,EAGJ,2BAA2B,KAH7B,IAAMQ,EAANR,ECrVA,MAAMS,GAAmB,CAM9B,MAAM,oBAAoBhJ,EAAO,CAC/B,GAAI,CAAC,KAAK,OACR,OAAO,KAIT,IAAIiJ,EAAY,KAAK,OAAO,oBAAoBjJ,EAAM,EAAE,EACxD,GAAIiJ,EACF,OAAOA,EAIT,MAAM7B,EAASpH,EAAM,gBAAiB,EACtC,GAAI,CACF,OAAIoH,EAAO,QAEa,MAAM,KAAK,OAAO,wBAAwB,YAAa,CAAC,CAC5E,QAASA,EAAO,CAAC,EAAE,GACnB,QAASpH,EAAM,EACzB,CAAS,CAAC,GACmB,CAAC,GAGA,MAAM,KAAK,OAAO,wBAAwB,YAAa,CAAC,CAC5E,QAASA,EAAM,EACzB,CAAS,CAAC,GACmB,CAAC,CAEzB,OAAQkJ,EAAO,CACd,eAAQ,MAAM,uBAAuBlJ,EAAM,IAAI,cAAekJ,CAAK,EAC5D,IACb,CACG,EAOD,wBAAwB1G,EAASrC,EAAQ,CACvC,MAAMiD,EAAa,CACjB,QAASZ,EACT,UAAWrC,EAAO,UAClB,aAAcA,EAAO,aACrB,OAAQA,EAAO,OACf,cAAeA,EAAO,aACvB,EAGGA,EAAO,cACTiD,EAAW,MAAQ,CAAC,CAClB,MAAO,CAAC,cAAc,EACtB,KAAM,CAAE,YAAajD,EAAO,WAAa,EACzC,QAAS,CAAE,EACX,YAAa,EACrB,CAAO,GAGH,MAAMG,EAAe,CACnB,UAAW,CAACH,EAAO,WACpB,EAEKkD,EAAgB,CACpB,SAAUlD,EAAO,SACjB,OAAQA,EAAO,cAAgB,EAChC,EAED,MAAO,CAACiD,EAAY9C,EAAc+C,CAAa,CAChD,EAQD,sBAAsBb,EAASrC,EAAQ,CXvFlC,IAAAtD,EAAA6B,EWwFH,MAAM0E,EAAa,CACjB,MAAOZ,EACP,UAAWrC,EAAO,UAClB,aAAcA,EAAO,aACrB,QAASA,EAAO,QAChB,cAAe,CAACA,EAAO,OACxB,EAEGA,EAAO,cAAaiD,EAAW,MAAQjD,EAAO,aAC9CA,EAAO,SAAQiD,EAAW,OAASjD,EAAO,QAE9C,MAAMG,EAAe,CACnB,UAAW,CAACH,EAAO,WACpB,EAEKkD,EAAgB,CACpB,SAAUlD,EAAO,SACjB,OAAQA,EAAO,cAAgB,GAC/B,KAAM,CAAA,CACP,EAGD,GAAIA,EAAO,UACTkD,EAAc,KAAK,OAASlD,EAAO,kBAC1BA,EAAO,QAAS,CACzB,MAAM+D,IAAarH,EAAA,OAAO,MAAM,OAAO2F,CAAO,IAA3B,YAAA3F,EAA8B,QAAS2F,EACpD4B,IAAe1F,EAAA,OAAO,MAAM,UAAUyB,EAAO,OAAO,IAArC,YAAAzB,EAAwC,QAASyB,EAAO,QAC7EkD,EAAc,KAAK,OAAS,KAAK,KAAK,OAAO,yBAA0B,CACrE,MAAOa,EACP,QAASE,CACjB,CAAO,CACP,CAEI,MAAO,CAAChB,EAAY9C,EAAc+C,CAAa,CAChD,EAQD,qBAAqBb,EAASrC,EAAQ,CXlIjC,IAAAtD,EAAA6B,EAAA2C,EWmIH,MAAM+B,EAAa,CACjB,KAAMZ,EACN,UAAWrC,EAAO,UAClB,aAAcA,EAAO,aACrB,QAASA,EAAO,QAChB,cAAe,CAACA,EAAO,OACxB,EAEGA,EAAO,cAAaiD,EAAW,MAAQjD,EAAO,aAC9CA,EAAO,SAAQiD,EAAW,OAASjD,EAAO,QAE9C,MAAMG,EAAe,CACnB,UAAW,CAACH,EAAO,WACpB,EAEKkD,EAAgB,CACpB,SAAUlD,EAAO,SACjB,OAAQA,EAAO,cAAgB,GAC/B,KAAM,CAAA,CACP,EAGD,GAAIA,EAAO,UACTkD,EAAc,KAAK,OAASlD,EAAO,kBAC1BA,EAAO,QAAS,CAEzB,IAAIqE,EAAYhC,EAChB,MAAM+B,GAAW7F,GAAA7B,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAA6B,EAAuC8D,GACxD,GAAI+B,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFC,GAAYC,GAAA,YAAAA,EAAU,OAAQjC,CACtC,CACM,MAAM4B,IAAe/C,EAAA,OAAO,MAAM,UAAUlB,EAAO,OAAO,IAArC,YAAAkB,EAAwC,QAASlB,EAAO,QAE7EkD,EAAc,KAAK,OAAS,GAAGe,CAAY,KAAKI,CAAS,KAAK,KAAK,KAAK,SAAS,aAAa,CAAC,EACrG,CAEI,MAAO,CAACpB,EAAY9C,EAAc+C,CAAa,CACnD,CACA,EAKa8F,GAAsB,CACjC,CAACnN,EAAW,aAAa,EAAG,MAAOgE,EAAOwC,EAASrC,IAAW,CAC5D,KAAM,CAACiD,EAAY9C,EAAc+C,CAAa,EAAI2F,GAAiB,wBAAwBxG,EAASrC,CAAM,EAC1G,MAAMH,EAAM,iBAAiBoD,EAAY9C,EAAc+C,CAAa,CACrE,EAED,CAACrH,EAAW,YAAY,EAAG,MAAOgE,EAAOwC,EAASrC,IAAW,CAC3D,KAAM,CAACiD,EAAY9C,EAAc+C,CAAa,EAAI2F,GAAiB,wBAAwBxG,EAASrC,CAAM,EAC1G,MAAMH,EAAM,gBAAgBoD,EAAY9C,EAAc+C,CAAa,CACpE,EAED,CAACrH,EAAW,KAAK,EAAG,MAAOgE,EAAOwC,EAASrC,IAAW,CACpD,KAAM,CAACiD,EAAY9C,EAAc+C,CAAa,EAAI2F,GAAiB,sBAAsBxG,EAASrC,CAAM,EACxG,MAAMH,EAAM,UAAUoD,EAAY9C,EAAc+C,CAAa,CAC9D,EAED,CAACrH,EAAW,IAAI,EAAG,MAAOgE,EAAOwC,EAASrC,IAAW,CACnD,KAAM,CAACiD,EAAY9C,EAAc+C,CAAa,EAAI2F,GAAiB,qBAAqBxG,EAASrC,CAAM,EACvG,MAAMH,EAAM,cAAcoD,EAAY9C,EAAc+C,CAAa,CAClE,EAED,CAACrH,EAAW,aAAa,EAAG,MAAOgE,EAAOwC,EAASrC,IAAW,CAC5D,MAAMiD,EAAa,CACjB,UAAWjD,EAAO,UAClB,aAAcA,EAAO,aACrB,OAAQA,EAAO,MAChB,EAGGA,EAAO,cACTiD,EAAW,MAAQjD,EAAO,aAG5B,MAAMG,EAAe,CAAE,UAAW,CAACH,EAAO,aAAe,CAACA,EAAO,UAAY,EACvEkD,EAAgB,CACpB,SAAUlD,EAAO,SACjB,OAAQA,EAAO,cAAgB,EAChC,EACD,MAAMH,EAAM,kBAAkBoD,EAAY9C,EAAc+C,CAAa,CACtE,EAED,CAACrH,EAAW,iBAAiB,EAAG,MAAOgE,EAAOwC,EAASrC,IAAW,CAEhE,GAAI,CAAC,KAAK,OAAQ,CAChB,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,mBAAmB,CAAC,EAC7D,MACN,CAII,GAAI,CADc,MAAM6I,GAAiB,oBAAoBhJ,CAAK,EAClD,CACd,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,sDAAuD,CAC5F,MAAOA,EAAM,IACrB,CAAO,CAAC,EACF,MACN,CAEI,MAAMoD,EAAa,CACjB,UAAWjD,EAAO,UAClB,aAAcA,EAAO,YACtB,EAGGA,EAAO,cACTiD,EAAW,MAAQjD,EAAO,aAG5B,MAAMG,EAAe,CAAE,UAAW,CAACH,EAAO,aAAe,CAACA,EAAO,UAAY,EACvEkD,EAAgB,CACpB,SAAUlD,EAAO,SACjB,OAAQA,EAAO,cAAgB,EAChC,EAGD,MAAOA,EAAO,YAAcA,EAAO,YAC/BH,EAAM,eAAeoD,EAAY9C,EAAc+C,CAAa,EAC5DrD,EAAM,qBAAqBoD,EAAY9C,EAAc+C,CAAa,EACvE,EAED,CAACrH,EAAW,UAAU,EAAG,MAAOgE,EAAOwC,EAASrC,IAAW,CACzD,MAAMiD,EAAa,CACjB,UAAWjD,EAAO,UAClB,aAAcA,EAAO,aACrB,OAAQA,EAAO,MAChB,EAGGA,EAAO,cACTiD,EAAW,MAAQjD,EAAO,aAG5B,MAAMG,EAAe,CAAE,UAAW,CAACH,EAAO,aAAe,CAACA,EAAO,UAAY,EACvEkD,EAAgB,CACpB,SAAUlD,EAAO,SACjB,OAAQA,EAAO,cAAgB,EAChC,EACD,MAAMH,EAAM,cAAcoD,EAAY9C,EAAc+C,CAAa,CAClE,EAED,CAACrH,EAAW,MAAM,EAAG,MAAOgE,EAAOwC,EAASrC,IAAW,CAErD,GAAI,CACF,MAAMvC,EAAO,IAAI,KAAK4E,EAASxC,EAAM,YAAW,CAAE,EAClD,MAAMpC,EAAK,SAAS,CAAC,MAAO,EAAI,CAAC,EACjC,MAAMA,EAAK,UAAU,CACnB,QAAS,YAAY,WAAW,CAAC,MAAAoC,CAAK,CAAC,EACvC,OAAQ,KAAK,KAAK,SAAS,+BAA+B,CAClE,CAAO,CACF,MAAe,CACd,GAAG,cAAc,MAAM,KAAK,KAAK,OAAO,+CAAgD,CAAC,QAASwC,CAAO,CAAC,CAAC,CACjH,CACA,CACA,EX/RO,IAAA4G,EYeQ,MAAMC,EAAN,MAAMA,UAAyB,QAAQ,aAAa,IAAI,2BAA2B,QAAQ,aAAa,IAAI,aAAa,CAAE,CAOxI,YAAYzM,EAAU,GAAI,CACZU,EAAQ,OAAO+L,EAAkB,aAAa,EAC1D,MAAMzM,CAAO,EAoOfS,EAAA,uBAAmBsE,GAAU,CAG3B,GAFYrE,EAAQ,OAAO,KAAM,iBAAiB,EAE9C,KAAK,SAAU,OAGnB,MAAMgM,EAAO,KAAK,QACbA,IAGD3H,EAAM,OAAO,QAAQ,qBAAqB,GAG1C2H,EAAK,SAAS3H,EAAM,MAAM,GAG1BA,EAAM,OAAO,QAAQ,uBAAuB,GAG5CA,EAAM,OAAO,QAAQ,8BAA8B,GAGvD,KAAK,MAAO,EAChB,GAxPI,KAAK,eAAiB,IAAI,IAC1B,KAAK,WAAa,KAClB,KAAK,oBAAsB,KAC3B,KAAK,SAAW,GAEhB,KAAK,gBAAkB,KAAK,KAAK,QAAQzF,EAAO,GAAI,qBAAqB,GAAK,GAG9E,KAAK,8BAA+B,CACxC,CAuBE,MAAM,gBAAgBU,EAAS,CACjBU,EAAQ,OAAO,KAAM,iBAAiB,EAClD,MAAM8D,EAAU,MAAM,MAAM,gBAAgBxE,CAAO,EAG7C2F,EAAS,KAAK,OAAO,SACrBgH,EAAW,CAAE,EACbC,EAAY,CAAE,EAGdzC,EAAe,KAAK,OAAO,OAEjC,UAAW/G,KAASuC,EAAQ,CAE1B,GAAIvC,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAO,SAExD,MAAMyJ,EAAY,CAChB,GAAIzJ,EAAM,GACV,KAAMA,EAAM,KACZ,KAAMA,EAAM,KACZ,IAAKA,EAAM,IACX,SAAU,KAAK,eAAe,IAAIA,EAAM,EAAE,EAC1C,YAAa,KAAK,eAAeA,CAAK,CACvC,EAGqB,OAAO,QAAQA,EAAM,SAAS,EACjD,KAAK,CAAC,CAAC5B,EAAQ4F,CAAK,IAAM,CACzB,MAAMrF,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,OAAOO,GAAQ,CAACA,EAAK,MAAQqF,GAAS,MAAM,0BAA0B,KAChF,CAAS,EAGDuF,EAAS,KAAKE,CAAS,EAGnB1C,GACsBA,EAAa,OAAO,KAAKC,GAASA,EAAM,UAAYhH,EAAM,EAAE,GAElFwJ,EAAU,KAAKC,CAAS,CAIpC,CAGI,MAAM5K,EAAWjD,EAAa,EACxBqJ,EAAsBrG,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EACvE2G,EAAc5G,EAAa,IAAIC,EAAS,YAAY,GAAG,EAGvD6K,EAAgB,KAAK,aAAe,KAAOH,EAAWC,EACtDG,EAAcD,EAAc,OAAS,GACzCA,EAAc,MAAM1J,GAAS,KAAK,eAAe,IAAIA,EAAM,EAAE,CAAC,EAG1D4J,EAAe,CAAE,EACvB,GAAI,KAAK,eAAe,KAAO,EAC7B,SAAW,CAAClE,EAAKmE,CAAM,IAAK,OAAO,QAAQ3N,EAAO,oBAAoB,EACpE0N,EAAa,KAAK,CAChB,GAAIlE,EACJ,KAAM,KAAK,KAAK,SAAS,0BAA0BmE,EAAO,IAAI,EAAE,GAAKA,EAAO,MAC5E,SAAUA,EAAO,SAAW,KAC5B,WAAY,CAAC,CAACA,EAAO,QACrB,SAAU,KAAK,sBAAwBnE,CACjD,CAAS,EAKL,MAAMoC,EAAYH,GAAe,KAAK,oBAAqB,KAAK,cAAc,EAE9E,MAAO,CACL,GAAGvG,EACH,OAAQsI,EACR,WAAY,KAAK,WACjB,QAAS,KAAK,aAAe,KAC7B,SAAU,KAAK,aAAe,MAC9B,YAAa,KAAK,WAClB,oBAAAzE,EACA,YAAAO,EACA,YAAAmE,EACA,kBAAmB,KAAK,eAAe,KAAO,EAC9C,aAAAC,EACA,UAAA9B,EACA,UAAW,GACX,aAAc,KAAK,SACnB,gBAAiB,KAAK,eACvB,CACL,CAKE,eAAe9H,EAAO,CZzJjB,IAAAnD,EAAA6B,EAAA2C,EAAAoB,EAAAC,EY0JSpF,EAAQ,OAAO,KAAM,gBAAgB,EACjD,MAAMwM,EAAS9J,EAAM,OACf+J,EAAQ,CAAE,EAGhB,OAAIlN,EAAAiN,EAAO,aAAP,MAAAjN,EAAmB,IACrBkN,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,WAAW,GAAG,KACpC,CAAO,GAICpL,EAAAoL,EAAO,aAAP,MAAApL,EAAmB,IACrBqL,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,WAAW,GAAG,KACpC,CAAO,GAICzI,EAAAyI,EAAO,aAAP,MAAAzI,EAAmB,SACrB0I,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,WAAW,OACjC,CAAO,GAICpH,GAAAD,EAAAqH,EAAO,SAAP,YAAArH,EAAe,MAAf,MAAAC,EAAoB,SACtBqH,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,OAAO,IAAI,OACjC,CAAO,EAGIC,CACX,CAKE,UAAU3I,EAASxE,EAAS,CAM1B,GALYU,EAAQ,OAAO,KAAM,WAAW,EAC5C,MAAM,UAAU8D,EAASxE,CAAO,EAChC,KAAK,iBAAkB,EAGnB,KAAK,gBAAiB,CACxB,MAAMoN,EAAgB,KAAK,QAAQ,cAAc,iBAAiB,EAC5DC,EAAiB,KAAK,QAAQ,cAAc,YAAY,EAC1DD,GACFA,EAAc,UAAU,IAAI,UAAU,EAEpCC,GACFA,EAAe,UAAU,IAAI,UAAU,CAE/C,CAGI,WAAW,IAAM,CACf,SAAS,iBAAiB,QAAS,KAAK,gBAAiB,EAAI,CAC9D,EAAE,GAAG,EAGN,KAAK,kBAAoB,MAAM,GAAG,eAAgB,KAAK,sBAAsB,KAAK,IAAI,CAAC,CAC3F,CAKE,sBAAsBjD,EAAOkD,EAAY,CAC3B5M,EAAQ,OAAO,KAAM,uBAAuB,EAEnD,KAAK,WAGN,KAAK,sBAGL,KAAK,qBACP,aAAa,KAAK,mBAAmB,EAGvC,KAAK,oBAAsB,WAAW,IAAM,CAE1C,KAAK,8BAA+B,EAGpC,KAAK,OAAQ,EAEb,KAAK,oBAAsB,IAC5B,EAAE,GAAG,GACV,CAiCE,kBAAmB,CZxRd,IAAAT,EAAA6B,EAAA2C,EAAAoB,EAAAC,EYyRSpF,EAAQ,OAAO,KAAM,kBAAkB,EAEnD,MAAM6M,EAAO,KAAK,SAGlBtN,EAAAsN,EAAK,cAAc,yBAAyB,IAA5C,MAAAtN,EAA+C,iBAAiB,SAAU,KAAK,sBAAsB,KAAK,IAAI,IAC9G6B,EAAAyL,EAAK,cAAc,sBAAsB,IAAzC,MAAAzL,EAA4C,iBAAiB,SAAU,KAAK,qBAAqB,KAAK,IAAI,IAC1G2C,EAAA8I,EAAK,cAAc,oBAAoB,IAAvC,MAAA9I,EAA0C,iBAAiB,SAAU,KAAK,mBAAmB,KAAK,IAAI,IAGtGoB,EAAA0H,EAAK,cAAc,qBAAqB,IAAxC,MAAA1H,EAA2C,iBAAiB,QAAS,KAAK,cAAc,KAAK,IAAI,IAGjGC,EAAAyH,EAAK,cAAc,iBAAiB,IAApC,MAAAzH,EAAuC,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,GAGnFyH,EAAK,iBAAiB,YAAY,EAC1C,QAAQC,GAAO,CAClBA,EAAI,iBAAiB,QAAS,KAAK,YAAY,KAAK,IAAI,CAAC,CAC/D,CAAK,EAGDD,EAAK,iBAAiB,QAAQ,EAAE,QAAQnK,GAAS,CAC/CA,EAAM,iBAAiB,QAAS,KAAK,cAAc,KAAK,IAAI,CAAC,CACnE,CAAK,EAEDmK,EAAK,iBAAiB,eAAe,EAAE,QAAQE,GAAa,CAC1DA,EAAU,iBAAiB,QAAS,KAAK,oBAAoB,KAAK,IAAI,CAAC,CAC7E,CAAK,EAGD,MAAMC,EAAwBH,EAAK,cAAc,gBAAgB,EAC7DG,GACFA,EAAsB,iBAAiB,QAAU3I,GAAU,CACzD,MAAM4I,EAAW5I,EAAM,OAAO,QAAQ,IAAI,EAC1C,GAAI4I,GAAYA,EAAS,QAAQ,GAAI,CAEnC,MAAMC,EAAc,CAClB,GAAG7I,EACH,cAAe4I,CAChB,EACD,KAAK,oBAAoBC,CAAW,CAC9C,CACA,CAAO,EAIH,MAAMC,EAAqBN,EAAK,cAAc,aAAa,EACvDM,GACFA,EAAmB,iBAAiB,QAAU9I,GAAU,CACtD,MAAM4I,EAAW5I,EAAM,OAAO,QAAQ,IAAI,EAC1C,GAAI4I,GAAYA,EAAS,QAAQ,GAAI,CAEnC,MAAMC,EAAc,CAClB,GAAG7I,EACH,cAAe4I,CAChB,EACD,KAAK,iBAAiBC,CAAW,CAC3C,CACA,CAAO,CAEP,CAKE,MAAM,sBAAsB7I,EAAO,CACrBrE,EAAQ,OAAO,KAAM,uBAAuB,EACxD,MAAMuB,EAAWjD,EAAa,EACxB8O,EAAU/I,EAAM,OAAO,QAC7B,MAAM/C,EAAa,IAAIC,EAAS,oBAAoB,IAAK6L,CAAO,EAGhEC,GAAY,uBAAuBD,CAAO,CAE9C,CAKE,MAAM,qBAAqB/I,EAAO,CACpBrE,EAAQ,OAAO,KAAM,sBAAsB,EACvD,MAAMuB,EAAWjD,EAAa,EACxBgP,EAAOjJ,EAAM,OAAO,QAC1B,MAAM/C,EAAa,IAAIC,EAAS,YAAY,IAAK+L,CAAI,CACzD,CAKE,mBAAmBjJ,EAAO,CACZrE,EAAQ,OAAO,KAAM,oBAAoB,EACrD,MAAMuN,EAAYlJ,EAAM,OAAO,QAG/B,KAAK,oBAAsB,IAGZ,KAAK,aAAe,KACjC,KAAK,OAAO,SAAS,OAAO2B,GAAKuD,GAAcvD,CAAC,CAAC,EACjD,KAAK,OAAO,SAAS,OAAOA,GAAK,CAACuD,GAAcvD,CAAC,GAAKwD,GAAgBxD,CAAC,CAAC,GAGnE,QAAQtD,GAAS,CAClB6K,GACF,KAAK,eAAe,IAAI7K,EAAM,EAAE,EAChCiH,GAA2BjH,EAAM,GAAI,EAAI,IAEzC,KAAK,eAAe,OAAOA,EAAM,EAAE,EACnCiH,GAA2BjH,EAAM,GAAI,EAAK,EAElD,CAAK,EAGD,WAAW,IAAM,CACf,KAAK,oBAAsB,EAC5B,EAAE,GAAG,EAGN,KAAK,OAAQ,EAEb,KAAK,8BAA+B,CACxC,CAKE,cAAc2B,EAAO,CACPrE,EAAQ,OAAO,KAAM,eAAe,EAChDqE,EAAM,eAAgB,EACtB,KAAK,SAAW,CAAC,KAAK,SAGtB,MAAMmJ,EAAWnJ,EAAM,cACvBmJ,EAAS,UAAU,OAAO,kBAAmB,sBAAsB,EACnEA,EAAS,UAAU,IAAI,KAAK,SAAW,kBAAoB,sBAAsB,CAErF,CAKE,MAAM,iBAAiBnJ,EAAO,CAChBrE,EAAQ,OAAO,KAAM,kBAAkB,EACnDqE,EAAM,eAAgB,EAGtB,KAAK,gBAAkB,CAAC,KAAK,gBAG7B,MAAM,KAAK,KAAK,QAAQzF,EAAO,GAAI,sBAAuB,KAAK,eAAe,EAG9E,MAAM8N,EAAgBrI,EAAM,eAAiBA,EAAM,OAAO,QAAQ,iBAAiB,EAC/EqI,GACFA,EAAc,UAAU,OAAO,WAAY,KAAK,eAAe,EAIjE,MAAMC,EAAiB,KAAK,QAAQ,cAAc,YAAY,EAC1DA,GACFA,EAAe,UAAU,OAAO,WAAY,KAAK,eAAe,CAGtE,CAKE,+BAAgC,CZlc3B,IAAApN,EYmcSS,EAAQ,OAAO,KAAM,+BAA+B,EAEhE,MAAMyN,IAAmBlO,EAAA,OAAO,SAAP,YAAAA,EAAe,aAAc,CAAE,EAGxD,KAAK,eAAe,MAAO,EAG3B,UAAWmK,KAAS+D,EAClB,GAAI/D,EAAM,QACR,KAAK,eAAe,IAAIA,EAAM,MAAM,EAAE,EAGlC,KAAK,eAAe,OAAS,GAAG,CAElC,MAAMgE,EAAOnE,GAAcG,EAAM,KAAK,EACtC,KAAK,WAAagE,EAAO,KAAO,KAC1C,CAIA,CAME,MAAM,YAAYrJ,EAAO,CZ9dpB,IAAA9E,EY+dSS,EAAQ,OAAO,KAAM,aAAa,EAC9C,MAAM8M,EAAMzI,EAAM,cAAc,QAAQ,IACpCyI,IAAQ,KAAK,aAGjB,KAAK,eAAe,MAAO,GAG3BvN,EAAA,OAAO,SAAP,MAAAA,EAAe,aAGf,KAAK,oBAAsB,KAE3B,KAAK,WAAauN,EAClB,MAAM,KAAK,OAAQ,EACvB,CAKE,cAAczI,EAAO,CAGnB,GAFYrE,EAAQ,OAAO,KAAM,eAAe,EAE5CqE,EAAM,OAAO,QAAQ,eAAe,EAAG,OAG3C,MAAMuF,EADevF,EAAM,cACE,QAAQ,GACrC,KAAK,sBAAsBuF,CAAO,CACtC,CAKE,oBAAoBvF,EAAO,CACbrE,EAAQ,OAAO,KAAM,qBAAqB,EACtDqE,EAAM,gBAAe,EACrB,MAAMuF,EAAUvF,EAAM,cAAc,QAAQ,GAC5C,KAAK,sBAAsBuF,CAAO,CACtC,CAKE,sBAAsBA,EAAS,CACjB5J,EAAQ,OAAO,KAAM,uBAAuB,EAExD,KAAK,oBAAsB,GAEvB,KAAK,eAAe,IAAI4J,CAAO,GACjC,KAAK,eAAe,OAAOA,CAAO,EAElCD,GAA2BC,EAAS,EAAK,IAEzC,KAAK,eAAe,IAAIA,CAAO,EAE/BD,GAA2BC,EAAS,EAAI,GAI1C,WAAW,IAAM,CACf,KAAK,oBAAsB,EAC5B,EAAE,GAAG,EAGN,KAAK,OAAQ,EAEb,KAAK,8BAA+B,EACpC,KAAK,sBAAuB,CAChC,CAME,+BAAgC,CAClB5J,EAAQ,OAAO,KAAM,+BAA+B,EAGhE,KAAK,OAAQ,CACjB,CAKE,uBAAwB,CACVA,EAAQ,OAAO,KAAM,uBAAuB,EACxD,MAAM2N,EAAoB,KAAK,QAAQ,cAAc,oBAAoB,EACnEvB,EAAgB,KAAK,aAAe,KAAO,KAAO,MAClDwB,EAAa,KAAK,QAAQ,iBAAiB,IAAIxB,CAAa,4CAA4C,EACxGyB,EAAe,MAAM,KAAKD,CAAU,EAAE,OAAOE,GAAMA,EAAG,OAAO,EAAE,OAErEH,EAAkB,QAAUE,EAAe,GAAKA,IAAiBD,EAAW,OAC5ED,EAAkB,cAAgBE,EAAe,GAAKA,EAAeD,EAAW,MACpF,CAKE,MAAM,oBAAoBvJ,EAAO,CACnBrE,EAAQ,OAAO,KAAM,qBAAqB,EAEtD,MAAM+N,EADc1J,EAAM,cACM,QAAQ,GAClC2J,EAAapP,EAAO,qBAAqBmP,CAAW,EAE1D,GAAI,CAACC,EAAY,CACfhO,EAAQ,MAAM,wBAAyB+N,CAAW,EAClD,MACN,CAGQ,KAAK,sBAAwBA,EAC/B,KAAK,oBAAsB,KAE3B,KAAK,oBAAsBA,EAIzBC,EAAW,QACb,MAAM,KAAK,OAAQ,EACV,KAAK,qBAEd,KAAK,aAAaD,EAAa,IAAI,CAEzC,CAOE,iBAAiB1J,EAAO,CACVrE,EAAQ,OAAO,KAAM,kBAAkB,EACnD,MAAMkF,EAAUb,EAAM,cAAc,QAAQ,GAC5C,KAAK,aAAa,KAAK,oBAAqBa,CAAO,CACvD,CAOE,MAAM,aAAa6I,EAAa7I,EAAS,CZ5mBpC,IAAA3F,EAAA6B,EY6mBSpB,EAAQ,OAAO,KAAM,cAAc,EAC/C,MAAMuB,EAAWjD,EAAa,EACxB2P,EAAmB,MAAM,KAAK,KAAK,cAAc,EACjD/F,EAAc5G,EAAa,IAAIC,EAAS,YAAY,GAAG,EAGvD2M,EAAgBD,EAAiB,OAAOrE,GAAW,CACvD,MAAMlH,EAAQ,KAAK,OAAO,IAAIkH,CAAO,EACrC,GAAI,CAAClH,EAAO,MAAO,GAEnB,MAAMgL,EAAOnE,GAAc7G,CAAK,EAC1ByL,EAAQ,CAACT,GAAQlE,GAAgB9G,CAAK,EAG5C,OAAQ,KAAK,aAAe,MAAQgL,GAAU,KAAK,aAAe,OAASS,CACjF,CAAK,EAGKH,EAAapP,EAAO,qBAAqBmP,CAAW,EACpDK,GAAkB7O,GAAAyO,GAAA,YAAAA,EAAY,OAAQD,IAApB,YAAAxO,EAAkC,cAG1D,GAAI6O,IAAmB1P,EAAW,OAAQ,CACxC,MAAM6E,EAAU,MAAM,KAAK,sBAAuB,EAClD,GAAI,CAACA,EAAS,OAGd2B,EAAU3B,CAChB,CAGI,GAAI6K,IAAmB1P,EAAW,mBAAqB,CAAC,KAAK,OAY3D,GAXqB,MAAM,OAAO,QAAQ,CACxC,MAAO,KAAK,KAAK,SAAS,eAAe,EACzC,QAAS,MAAQ,KAAK,KAAK,SAAS,wCAAwC,EAAI,OAChF,IAAK,IAAM,GACX,GAAI,IAAM,GACV,WAAY,GACZ,QAAS,CACP,QAAS,CAAC,qBAAqB,CACzC,CACA,CAAO,EAKC,MADe,MAAM,KAAK,QAAQ,cAAc,OAAO,CAAC,MAAO,KAAK,OAAO,OAAO,EAAE,CAAC,GACxE,SAAU,EACvB+M,EAAoB,OAAO,OAAQ,KAAK,KAAK,SAAS,kDAAkD,CAAC,MAGzG,QAKJ,IAAI4C,EAAiBH,EACrB,GAAIE,IAAmB1P,EAAW,mBAAqB,KAAK,OAAQ,CAClE,MAAMuG,EAASiJ,EACZ,IAAI5E,GAAM,KAAK,OAAO,IAAIA,CAAE,CAAC,EAC7B,OAAO5G,GAASA,CAAK,EAGlB4L,EAAuB,CAAE,EACzBC,EAAyB,IAAI,IACnC,UAAW7L,KAASuC,EAAQ,CAC1B,MAAM0G,EAAY,KAAK,OAAO,oBAAoBjJ,EAAM,EAAE,EACtDiJ,GAAaA,EAAU,aAAe,OACxC2C,EAAqB,KAAK5L,EAAM,IAAI,EACpC6L,EAAuB,IAAI7L,EAAM,EAAE,EAE7C,CAGM,GAAI4L,EAAqB,OAAS,GAchC,GAbe,MAAM,OAAO,QAAQ,CAClC,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,QAAS,MAAQ,KAAK,KAAK,OAAO,2CAA4C,CAC5E,OAAQA,EAAqB,KAAK,IAAI,CACvC,CAAA,EAAI,OACL,IAAK,IAAM,GACX,GAAI,IAAM,GACV,WAAY,GACZ,QAAS,CACP,QAAS,CAAC,qBAAqB,CAC3C,CACA,CAAS,EAaC,UAAW1E,KAAW2E,EAAwB,CAC5C,MAAM5C,EAAY,KAAK,OAAO,oBAAoB/B,CAAO,EACrD+B,GACF,MAAMA,EAAU,OAAO,CAAE,WAAY,IAAI,CAAE,CAEzD,SAdU0C,EAAiBH,EAAc,OAAO5E,GAAM,CAACiF,EAAuB,IAAIjF,CAAE,CAAC,EAGvE+E,EAAe,SAAW,EAAG,CAC/B5C,EAAoB,OAAO,OAAQ,KAAK,KAAK,SAAS,4DAA4D,CAAC,EACnH,MACZ,EAWA,CAGI,IAAIxG,EAASoJ,EACV,IAAI/E,GAAM,KAAK,OAAO,IAAIA,CAAE,CAAC,EAC7B,OAAO5G,GAASA,CAAK,EAGxB,GAAI0L,IAAmB1P,EAAW,WAAY,CAC5C,MAAM8P,EAA0B,CAAE,EAC5BC,EAA2B,CAAE,EAEnC,UAAW/L,KAASuC,EAAQ,CAC1B,MAAMyJ,IAAKtN,EAAAsB,EAAM,OAAO,WAAW,KAAxB,YAAAtB,EAA4B,QAAS,EAC1CuN,EAAajM,EAAM,OAAO,WAAW,OAAS,CAAE,EAChDkM,EAAYD,EAAW,SAAW,EAClCE,EAAWF,EAAW,SAAW,EAGnCD,GAAM,GAAKE,EAAY,GAAKC,EAAW,EACzCL,EAAwB,KAAK9L,CAAK,EAElC+L,EAAyB,KAAK/L,EAAM,IAAI,CAElD,CAGU+L,EAAyB,OAAS,GACpChD,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,6DAA8D,CAChH,OAAQgD,EAAyB,KAAK,IAAI,CACpD,CAAS,CAAC,EAIJxJ,EAASuJ,CACf,CAEI,GAAI,CAACvJ,EAAO,OAAQ,CAClBwG,EAAoB,OAAO,OAAQ,0BAA0B,EAC7D,MACN,CAGI,MAAMQ,EAAW,CAAE,EACbC,EAAY,CAAE,EAEpB,UAAWxJ,KAASuC,EAAQ,CAC1B,MAAM2C,EAAQuB,GAAezG,CAAK,EAC9BkF,EACFqE,EAAS,KAAK,CAAE,MAAAvJ,EAAO,MAAAkF,CAAK,CAAE,EAE9BsE,EAAU,KAAKxJ,CAAK,CAE5B,CAGI,MAAMiF,EAAsBrG,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EAG7E,IAAIsB,EAAS,KACb,GAAKqF,EAeHrF,EAAS,CACP,UAAW,GACX,aAAc,GACd,YAAa,GACb,MAAO,CAAE,EACT,SAAU,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC9C,YAAa,GACb,cAAe,GACf,WAAY,GACZ,YAAa8E,GAAuBsE,EAAS,OAAS,CACvD,EAGGmC,IAAmB1P,EAAW,aAChCmE,EAAO,OAAS,YA1BlBA,EAAS,MADW,CAACnE,EAAW,MAAOA,EAAW,IAAI,EAAE,SAAS0P,CAAc,EAAIhH,GAA0B1D,GAClF,iBAAiBuB,EAAQmJ,EAAgBlJ,EAAS,CAC3E,YAAAgD,EACA,mBAAoBP,CAC5B,CAAO,EAIG,CAAC9E,EACH,OAuBJ,MAAMwI,EAAqB,CAAA,EACrByD,EAAsB,CAAA,EAE5B,GAAIjM,EAAO,YAAa,CACtB,SAAW,CAAE,MAAAH,EAAO,MAAAkF,CAAK,IAAMqE,EAAU,CACvC,GAAI,CAACrE,EAAM,OAAQ,CACdtG,EAAa,IAAIC,EAAS,yBAAyB,GAAG,GACvDkK,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,mDAAoD,CACtG,OAAQ7D,EAAM,IAC5B,CAAa,CAAC,EAIJkH,EAAoB,KAAKpM,CAAK,EAC9B,QACV,CAEQ,KAAK,yBAAyBA,EAAOkF,EAAOwG,EAAgBlJ,EAASrC,EAAQ,EAAI,EACjFwI,EAAmB,KAAK,CAAE,MAAA3I,EAAO,MAAAkF,CAAK,CAAE,EAGxC,MAAMmC,GAAM,GAAG,CACvB,CAGUsB,EAAmB,OAAS,GAC9B,KAAK,8BAA8BA,EAAoB+C,EAAgBlJ,CAAO,CAEtF,MAEMgH,EAAU,KAAK,GAAGD,EAAS,IAAI,CAAC,CAAE,MAAAvJ,CAAK,IAAOA,CAAK,CAAC,EAItD,GAAIoM,EAAoB,OAAS,EAAG,CAElC,MAAMC,EAAgB,CAAE,GAAGlM,EAAQ,WAAY,EAAM,EACrD,MAAM,KAAK,gBAAgBiM,EAAqBV,EAAgBlJ,EAAS6J,CAAa,CAC5F,CAGI,GAAI7C,EAAU,OAAS,EAAG,CAExB,MAAM8C,EAAY,CAAE,GAAGnM,CAAQ,EAG/BmM,EAAU,YAAc,GACxBA,EAAU,WAAa,GACvB,MAAM,KAAK,gBAAgB9C,EAAWkC,EAAgBlJ,EAAS8J,CAAS,CAC9E,CAII,WAAW,IAAM,KAAK,MAAK,EAAI,GAAG,CACtC,CAYE,yBAAyBtM,EAAOkF,EAAOmG,EAAa7I,EAASrC,EAAQoM,EAAuB,GAAO,CACrFjP,EAAQ,OAAO,KAAM,0BAA0B,EAC3D,MAAMuB,EAAWjD,EAAa,EAGxB4Q,EAAwBnB,GAAA,YAAAA,EAAa,cAG3C,IAAI7L,EAAWgN,EAGXA,IAA0BxQ,EAAW,cACvCwD,EAAWxD,EAAW,QACbwQ,IAA0BxQ,EAAW,aAC9CwD,EAAWxD,EAAW,KACbwQ,IAA0BxQ,EAAW,oBAC9CwD,EAAWxD,EAAW,YAIxB,MAAM2J,EAAc,CAClB,KAAM,cACN,UAAW,QAAQ,MAAM,SAAU,EACnC,QAAS3F,EAAM,GACf,SAAAR,EACA,QAAAgD,EACA,WAAY,KACZ,OAAQ,CACN,SAAUrC,EAAO,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EACjE,UAAWA,EAAO,WAAa,GAC/B,aAAcA,EAAO,cAAgB,GACrC,YAAaA,EAAO,aAAe,GACnC,MAAOA,EAAO,OAAS,CAAE,EACzB,YAAaA,EAAO,cAAgB,GACpC,OAAQA,EAAO,OACf,QAASA,EAAO,QAChB,WAAYA,EAAO,WACnB,UAAWA,EAAO,SACnB,EACD,WAAYA,EAAO,YAAc,GACjC,eAAgB,MAAM,KAAK,KAAK,KAAK,OAAO,EAAE,IAAIyF,GAAKA,EAAE,EAAE,EAC3D,gBAAiBhH,EAAa,IAAIC,EAAS,kBAAkB,GAAG,CACjE,EAGDP,EAAW,YAAY,oBAAqB4G,EAAM,GAAIS,CAAW,EAE5D4G,GACHxD,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,qDAAsD,CACxG,OAAQ7D,EAAM,KACd,MAAOlF,EAAM,IACrB,CAAO,CAAC,CAER,CAQE,8BAA8B2I,EAAoB+C,EAAgBlJ,EAAS,CZp7BtE,IAAA3F,EAAA6B,EAAA2C,EAAAoB,EAAAC,EYq7BSpF,EAAQ,OAAO,KAAM,+BAA+B,EAEhE,MAAMmL,EAAmB,CAAE,EAC3B,SAAW,CAAE,MAAAzI,EAAO,MAAAkF,CAAK,IAAMyD,EACxBF,EAAiBvD,EAAM,EAAE,IAC5BuD,EAAiBvD,EAAM,EAAE,EAAI,CAC3B,OAAQA,EACR,OAAQ,CAAA,CACT,GAEHuD,EAAiBvD,EAAM,EAAE,EAAE,OAAO,KAAKlF,CAAK,EAM9C,SAAW,CAAC0F,EAAKmE,CAAM,IAAK,OAAO,QAAQ3N,EAAO,oBAAoB,EACpE,GAAI2N,EAAO,OAAS6B,EAElB,MAIJ,MAAMe,EAAcf,EACpB,IAAIhD,EAAe,KAAK,KAAK,SAAS,0BAA0B+D,CAAW,EAAE,GAAKA,EAGlF,GAAIjK,EAAS,CACX,MAAMkK,EAAwBD,EAAY,YAAa,EACvD,GAAIC,IAA0B1Q,EAAW,MACvC0M,EAAe,GAAGA,CAAY,OAAK7L,EAAA,OAAO,MAAM,OAAO2F,CAAO,IAA3B,YAAA3F,EAA8B,QAAS2F,CAAO,YACxEkK,IAA0B1Q,EAAW,aAC9C0M,EAAe,GAAGA,CAAY,OAAKhK,EAAA,OAAO,MAAM,UAAU8D,CAAO,IAA9B,YAAA9D,EAAiC,QAAS8D,CAAO,YAC3EkK,IAA0B1Q,EAAW,cAC9C0M,EAAe,GAAGA,CAAY,OAAKrH,EAAA,OAAO,MAAM,UAAUmB,CAAO,IAA9B,YAAAnB,EAAiC,QAASmB,CAAO,YAC3EkK,IAA0B1Q,EAAW,KAAM,CAEpD,MAAMuI,GAAW7B,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuCF,GACxD,GAAI+B,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFmE,EAAe,GAAGA,CAAY,MAAKjE,GAAA,YAAAA,EAAU,OAAQjC,CAAO,GACtE,MACUkG,EAAe,GAAGA,CAAY,KAAKlG,CAAO,GAEpD,MAAiBkK,IAA0B1Q,EAAW,SAC9C0M,EAAe,GAAGA,CAAY,KAAKlG,CAAO,GAElD,CAGIuG,EAAoB,uBAAuBN,EAAkBC,CAAY,CAC7E,CASE,MAAM,gBAAgBnG,EAAQ8I,EAAa7I,EAASlC,EAAc,CACpDhD,EAAQ,OAAO,KAAM,iBAAiB,EAElD,MAAM6C,EAAS,CACb,UAAWG,EAAa,WAAa,GACrC,aAAcA,EAAa,cAAgB,GAC3C,YAAaA,EAAa,aAAe,GACzC,MAAOA,EAAa,OAAS,CAAE,EAC/B,SAAUA,EAAa,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EACvE,YAAaA,EAAa,YAAc,GACxC,WAAYA,EAAa,YAAc,GACvC,YAAaA,EAAa,cAAgB,GAC1C,cAAe,GACf,OAAQA,EAAa,OACrB,QAASA,EAAa,QACtB,WAAYA,EAAa,UAC1B,EAGD,UAAWN,KAASuC,EAClB,MAAM,KAAK,kBAAkBvC,EAAOqL,EAAa7I,EAASrC,CAAM,EAEhE,MAAMkH,GAAM,GAAG,CAErB,CASE,MAAM,kBAAkBrH,EAAOqL,EAAa7I,EAASrC,EAAQ,CAC/C7C,EAAQ,OAAO,KAAM,mBAAmB,EACpD,GAAI,CAEF,MAAMqP,EAAiBtB,EAAY,YAAa,EAG1CnN,EAAUiL,GAAoBwD,CAAc,EAC9CzO,EACF,MAAMA,EAAQ8B,EAAOwC,EAASrC,CAAM,EAEpC4I,EAAoB,OAAO,OAAQ,sBAAsBsC,CAAW,EAAE,CAEzE,MAAe,CACdtC,EAAoB,OAAO,QAAS,KAAK,KAAK,OAAO,+CAAgD,CACnG,MAAO/I,EAAM,IACrB,CAAO,CAAC,CACR,CACA,CAKE,MAAM,SAASpD,EAAS,CACVU,EAAQ,OAAO,KAAM,UAAU,EAC3C,MAAM,MAAM,SAASV,CAAO,EAG5B,KAAK,eAAe,MAAO,EAC3B,KAAK,oBAAsB,KAG3B,SAAS,oBAAoB,QAAS,KAAK,gBAAiB,EAAI,EAG5D,KAAK,oBACP,MAAM,IAAI,eAAgB,KAAK,iBAAiB,EAChD,KAAK,kBAAoB,MAIvB,KAAK,sBACP,aAAa,KAAK,mBAAmB,EACrC,KAAK,oBAAsB,KAEjC,CAKE,YAAYgQ,EAAS,GAAI,CACX,OAAAtP,EAAQ,OAAO,KAAM,aAAa,EAEvC,IACX,CAME,MAAM,uBAAwB,CAChB,OAAAA,EAAQ,OAAO,KAAM,uBAAuB,EACjD,IAAI,QAAQ,MAAOkG,GAAY,CAEpC,MAAMqJ,EAAU,MAAM,eAAe,WAAW3Q,EAAO,EAAE,oCAAqC,CAC5F,QAAS,GACT,SAAU,EAClB,CAAO,EAEc,IAAI,OAAO,CACxB,MAAO,KAAK,KAAK,SAAS,yCAAyC,EACnE,QAAA2Q,EACA,QAAS,CACP,KAAM,CACJ,KAAM,kCACN,MAAO,KAAK,KAAK,SAAS,MAAM,EAChC,SAAW1C,GAAS,CAElB,MAAMtJ,GADiBsJ,EAAK,CAAC,GAAKA,GACH,cAAc,sBAAsB,EAAE,MAAM,KAAM,EACjF3G,EAAQ3C,GAAW,IAAI,CACrC,CACW,EACD,OAAQ,CACN,KAAM,+BACN,MAAO,KAAK,KAAK,SAAS,QAAQ,EAClC,SAAU,IAAM2C,EAAQ,IAAI,CACxC,CACS,EACD,QAAS,OACT,OAAS2G,GAAS,CAChB,MAAM2C,EAAc3C,EAAK,CAAC,GAAKA,EACzB4C,EAAeD,EAAY,cAAc,sBAAsB,EAC/DE,EAAa,CAAE,EAGrBF,EAAY,iBAAiB,cAAc,EAAE,QAAQpL,GAAU,CAC7DA,EAAO,iBAAiB,QAAUC,GAAU,CAC1C,MAAMsL,EAAMtL,EAAM,cAAc,QAAQ,IACxCqL,EAAWC,CAAG,GAAKD,EAAWC,CAAG,GAAK,GAAK,EAG3C,MAAMC,EAAQ,CAAE,EAChB,SAAW,CAACC,EAASC,CAAK,IAAK,OAAO,QAAQJ,CAAU,EAClDI,EAAQ,GACVF,EAAM,KAAK,GAAGE,CAAK,GAAGD,CAAO,EAAE,EAGnCJ,EAAa,MAAQG,EAAM,KAAK,KAAK,CACnD,CAAa,CACb,CAAW,CACX,CACA,EAAS,CACD,QAAS,CAAC,sBAAuB,2BAA2B,CACpE,CAAO,EAEM,OAAO,EAAI,CACxB,CAAK,CACL,CAME,OAAO,QAAS,CACF5P,EAAQ,OAAO+L,EAAkB,QAAQ,EAChDgE,EAAA,KAAKjE,GAIJiE,EAAA,KAAKjE,GAAU,SACjBiE,EAAA,KAAKjE,GAAU,MAAO,GAEtBiE,EAAA,KAAKjE,GAAU,8BAA+B,EAC9CiE,EAAA,KAAKjE,GAAU,OAAO,EAAI,IAP5BkE,GAAA,KAAKlE,EAAY,IAAIC,GACrBgE,EAAA,KAAKjE,GAAU,OAAO,EAAI,EAShC,CACA,EAvoCSA,EAAA,YAAPmE,GALmBlE,EAKZD,EAAY,MAkBnB/L,EAvBmBgM,EAuBZ,kBAAkB,CACvB,GAAI,uBACJ,QAAS,CAAC,oBAAoB,EAC9B,IAAK,MACL,OAAQ,CACN,MAAO,GACP,UAAW,GACX,YAAa,EACd,EACD,SAAU,IACX,GAEDhM,EAnCmBgM,EAmCZ,QAAQ,CACb,KAAM,CACJ,SAAU,WAAWnN,EAAO,EAAE,+BACpC,CACG,GAvCY,IAAMsR,GAANnE,ECRR,MAAMsB,EAAY,CAOvB,OAAO,mBAAmBpH,EAAK4G,EAAMvN,EAAS,CAC5C,GAAI,CAAC,KAAK,KAAK,MAAQ2G,EAAI,KAAO,OAAQ,OAK1C,MAAMkK,GAHctD,EAAK,CAAC,GAAKA,GAGE,cAAc,gBAAgB,EAC/D,GAAI,CAACsD,GAAgBA,EAAa,cAAc,qBAAqB,EACnE,OAIF,MAAM5O,EAAWjD,EAAa,EACxBqJ,EAAsBrG,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EAGvE6O,EAAkB,SAAS,cAAc,GAAG,EAClDA,EAAgB,GAAK,uBACrBA,EAAgB,aAAa,yBAA0B,OAAO,EAC9DA,EAAgB,UAAY,uCAAuCzI,EAAsB,UAAY,EAAE,GACvGyI,EAAgB,MAAQ,KAAK,KAAK,SAAS,yCAAyC,EACpFA,EAAgB,UAAY,wBAAwBzI,EAAsB,GAAK,QAAQ,SAGvF,MAAM0I,EAAuBF,EAAa,cAAc,oBAAoB,EACxEE,EACFA,EAAqB,WAAW,aAAaD,EAAiBC,CAAoB,EAElFF,EAAa,aAAaC,EAAiBD,EAAa,UAAU,EAIpEC,EAAgB,iBAAiB,QAAS,IAAM,CAC9CF,GAAiB,OAAQ,CAC/B,CAAK,CACL,CAME,OAAO,uBAAuB9C,EAAS,CACrC,MAAMkD,EAAO,SAAS,cAAc,yBAAyB,EACzDA,IACFA,EAAK,UAAY,cAAclD,EAAU,GAAK,QAAQ,GAE5D,CACA,CCjDO,MAAMmD,EAAU,CAUrB,OAAO,YAAa,CAClB,MAAM,KAAK1R,EAAW,KAAM,KAAK,QAAQ,KAAK,IAAI,CAAC,EACnD,MAAM,KAAKA,EAAW,MAAO,KAAK,SAAS,KAAK,IAAI,CAAC,CACzD,CAKE,OAAO,SAAU,CACEP,EAAW,EAC5B,SAAS,KAAK,UAAU,IAAI,cAAc,EAC1CgD,EAAa,iBAAkB,EAC/BL,EAAe,WAAY,EAG3B,KAAK,cAAcpC,EAAW,mBAAoB,KAAK,oBAAoB,KAAK,IAAI,CAAC,CACzF,CAKE,OAAO,UAAW,CAChB,MAAM0C,EAAWjD,EAAa,EACZgD,EAAa,IAAIC,EAAS,UAAU,GAAG,IAEvD,OAAO,MAAM,MAAQ,IAEvBgH,GAAgB,WAAY,EAC5B,KAAK,oBAAqB,EAEtB,KAAK,KAAK,KACZ,KAAK,iBAAkB,EAEvBtH,EAAe,cAAe,EAEhCiJ,GAAmBD,GAAiB,CAAE,CAC1C,CAKE,OAAO,qBAAsB,CAC3B,KAAK,cAAclL,EAAY,iBAAkB,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAClF,KAAK,cAAcF,EAAW,wBAAyB,KAAK,wBAAwB,KAAK,IAAI,CAAC,EAC9F,KAAK,cAAcA,EAAW,wBAAyB,KAAK,8BAA8B,KAAK,IAAI,CAAC,EACpG,KAAK,cAAcE,EAAY,iCAAkC,KAAK,0BAA0B,KAAK,IAAI,CAAC,CAE9G,CAKE,OAAO,kBAAmB,CACxB,KAAK,cAAcF,EAAW,eAAgB,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAG9E,KAAK,MAAM,QAAQwC,GAAQ,CACzB,KAAK,iBAAiBA,CAAI,CAChC,CAAK,CACL,CAKE,OAAO,kBAAkBhB,EAAOwC,EAAQe,EAAQD,EAAS,CACnDd,EAAO,kBAAoBxC,EAAM,OAAS,IAC5CsD,EAAQ,KAAOA,EAAQ,MAAQ,CAAE,EACjCA,EAAQ,KAAK,iBAAmB,GAChCA,EAAQ,KAAK,aAAed,EAAO,aAEzC,CAKE,OAAO,wBAAwB2N,EAAatR,EAAMI,EAASwB,EAAQ,CdjG9D,IAAAvB,EckGH,GAAIL,EAAK,oBAAoBK,EAAAL,EAAK,QAAL,YAAAK,EAAY,QAAS,EAAG,CACnD,MAAMkR,EAAcvR,EAAK,cAAgB,KACnCwR,EAAgB,KAAK,KAAK,OAAO,wCAAyC,CAAE,GAAID,EAAa,EAE7FE,EAAgBzR,EAAK,QAAU,GACrCA,EAAK,OAASyR,EAAgB,GAAGA,CAAa,IAAID,CAAa,GAAKA,CAC1E,CACA,CAKE,OAAO,8BAA8B/M,EAASzE,EAAMI,EAASwB,EAAQ,Cd9GhE,IAAAvB,EAAA6B,EcgHH,KAAI7B,EAAAL,EAAK,QAAL,YAAAK,EAAY,QAAS,GAAKL,EAAK,MAAM,CAAC,EACxC,GAAI,CAEF,MAAM6L,EAAW7L,EAAK,MAAM,CAAC,GACzBkC,EAAA2J,EAAS,UAAT,MAAA3J,EAAkB,gBACpBlC,EAAK,OAAS6L,EAAS,QAAQ,cAElC,MAAe,CAEtB,CAEA,CAME,OAAO,0BAA0B9E,EAAK4G,EAAM3N,EAAM,CdjI7C,IAAAK,EAAA6B,EAAA2C,Ec6IH,GAXA/D,EAAQ,IAAI,sCAAuC,CAAC,CAClD,IAAAiG,EACA,OAAQA,EAAI,OACZ,OAAO1G,EAAA0G,EAAI,SAAJ,YAAA1G,EAAY,MACnB,aAAa6B,EAAA6E,EAAI,SAAJ,YAAA7E,EAAY,YACzB,OAAO2C,EAAAkC,EAAI,SAAJ,YAAAlC,EAAY,MACnB,KAAA7E,CACN,CAAK,CAAC,EAIE+G,EAAI,sBAAuB,OAQ/B,MAAM2K,EAAoB/D,EAAK,iBAAiB,4BAA4B,EAC5E7M,EAAQ,IAAI,4BAA6B,CAAC4Q,EAAkB,MAAM,CAAC,EAEnE,IAAIC,EAAe,GACnB5K,EAAI,OAAO,MAAQA,EAAI,OAAO,OAASA,EAAI,OAAO,MAAM,CAAC,EAAE,KAAK,YAEhE2K,EAAkB,QAAQ,CAACE,EAAOpM,IAAU,Cd3JzC,IAAAnF,EAAA6B,EAAA2C,EAAAoB,EAAAC,EAAAC,Ec4JDrF,EAAQ,IAAI,qBAAqB0E,CAAK,IAAK,CAAC,CAC1C,KAAMoM,EAAM,KACZ,MAAOA,EAAM,MACb,KAAMA,EAAM,IACpB,CAAO,CAAC,EAGE,CAACA,EAAM,SAAUvR,EAAA0G,EAAI,SAAJ,MAAA1G,EAAY,QAAS6F,GAAAD,GAAApB,GAAA3C,EAAA6E,EAAI,SAAJ,YAAA7E,EAAY,QAAZ,YAAA2C,EAAoB,KAApB,YAAAoB,EAAwB,OAAxB,MAAAC,EAA8B,gBAAgBC,EAAAY,EAAI,SAAJ,MAAAZ,EAAY,mBAClGrF,EAAQ,IAAI,8CAA+CiG,EAAI,OAAO,KAAK,EAC3E6K,EAAM,MAAQ7K,EAAI,OAAO,OAASA,EAAI,OAAO,MAAM,CAAC,EAAE,KAAK,YAC3D4K,EAAe,IAGbC,EAAM,OAAS,CAACD,IAElB5K,EAAI,sBAAwB,GAC5B4K,EAAe,GAGf,WAAW,IAAM,Cd/KlB,IAAAtR,EAAA6B,EAAA2C,EcgLG+M,EAAM,cAAc,IAAI,MAAM,SAAU,CACtC,QAAS,GACT,WAAY,EACxB,CAAW,CAAC,GAGE/M,GAAA3C,GAAA7B,EAAA0G,EAAI,SAAJ,YAAA1G,EAAY,QAAZ,YAAA6B,EAAoB,KAApB,MAAA2C,EAAwB,MAC1B,OAAOkC,EAAI,OAAO,MAAM,CAAC,EAAE,KAAK,WAEnC,EAAE,EAAE,EAEb,CAAK,CACL,CAKE,OAAO,iBAAiB5E,EAAM,CACxBA,EAAK,QAAUA,EAAK,KAAO,KAAK,KAAK,IACvCJ,EAAe,0BAA0BI,EAAK,EAAE,CAEtD,CAKE,OAAO,oBAAoB4E,EAAK4G,EAAMvN,EAAS,CAC7C+N,GAAY,mBAAmBpH,EAAK4G,EAAMvN,CAAO,CACrD,CAKE,OAAO,0BAA0BoD,EAAOG,EAAQ,CAE1CH,EAAM,8BACR1C,EAAQ,IAAI,0CAA2C,CACrD,SAAU0C,EAAM,KAChB,eAAgBA,EAAM,4BACtB,iBAAkBG,CAC1B,CAAO,GAGG,CAACA,EAAO,OAASA,EAAO,MAAM,SAAW,KAC3CA,EAAO,MAAQ,CAAC,CACd,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACnB,CAAS,GAMHA,EAAO,MAAM,CAAC,EAAE,KAAK,YAAcH,EAAM,4BAEzC1C,EAAQ,IAAI,+DAAgE6C,CAAM,EAExF,CAQE,OAAO,cAAc2E,EAAU5G,EAAS,CACtC,MAAM6G,EAAS,MAAM,GAAGD,EAAU5G,CAAO,EACzC,YAAK,gBAAgB,IAAI,GAAG4G,CAAQ,IAAIC,CAAM,GAAIA,CAAM,EACjDA,CACX,CAKE,OAAO,eAAgB,CACrB,KAAK,gBAAgB,QAAQ,CAACA,EAAQW,IAAQ,CAC5C,MAAMZ,EAAWY,EAAI,MAAM,GAAG,EAAE,CAAC,EACjC,MAAM,IAAIZ,EAAUC,CAAM,CAChC,CAAK,EACD,KAAK,gBAAgB,MAAO,CAChC,CAOE,OAAO,aAAaD,EAAU,CAC5B,UAAWY,KAAO,KAAK,gBAAgB,KAAI,EACzC,GAAIA,EAAI,WAAW,GAAGZ,CAAQ,GAAG,EAC/B,MAAO,GAGX,MAAO,EACX,CACA,CA/PEzH,EALWwQ,GAKJ,kBAAkB,IAAI,KCVxB,MAAMQ,EAAc,CAOzB,oBAAoBlO,EAAQ2D,EAAa,CACvC,OAAIA,IACFxG,EAAQ,IAAI,6CAA8C,CAACwG,EAAa,aAAc3D,CAAM,CAAC,EAC7FA,EAAO,MAAQ2D,EACf3D,EAAO,YAAc2D,GAGjB,CAAC3D,EAAO,OAASA,EAAO,MAAM,SAAW,KAC3CA,EAAO,MAAQ,CAAC,CACd,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACnB,CAAS,EAEDA,EAAO,MAAM,CAAC,EAAE,KAAK,YAAc2D,GAGrCxG,EAAQ,IAAI,8CAA+C,CAAC6C,CAAM,CAAC,GAE9DA,CACR,EAQD,mBAAmBwF,EAAavC,EAAY,CAC1C,MAAO,CACL,QAASuC,EAAY,QACrB,UAAWA,EAAY,OAAO,WAAa,GAC3C,aAAcA,EAAY,OAAO,cAAgB,GACjD,OAAQA,EAAY,OAAO,OAC3B,cAAe,GACf,iBAAkB,GAClB,aAAcA,EAAY,OAAO,aAAe,IACjD,CACF,EAWD,MAAM,oBAAoB3F,EAAOR,EAAUmG,EAAavC,EAAY9C,EAAc+C,EAAe,CAC3FsC,EAAY,SACd,MAAMrG,EAAa,oBACjBU,EACAR,EACAmG,EAAY,QACZA,EAAY,WACZ,CACE,GAAGvC,EACH,OAAQ9C,EACR,QAAS+C,CACnB,CACO,CAEJ,EAOD,MAAM,iBAAiBrD,EAAO2F,EAAa,CACzC,MAAM9E,EAAU8E,EAAY,QAGtBkH,EAAU,MAAM,eAAe,WAAWhR,CAAS,oCAAqC,CAC5F,QAASgF,EACT,SAAU,EAChB,CAAK,EAEc,IAAI,OAAO,CACxB,MAAO,KAAK,KAAK,SAAS,yCAAyC,EACnE,QAAAgM,EACA,QAAS,CACP,KAAM,CACJ,KAAM,kCACN,MAAO,KAAK,KAAK,SAAS,MAAM,EAChC,SAAU,SAAY,CACpB,GAAI,CAEF,MAAMjP,EAAO,IAAI,KAAKiD,EAASb,EAAM,YAAW,CAAE,EAClD,MAAMpC,EAAK,SAAS,CAAC,MAAO,EAAI,CAAC,EAGjC,MAAMA,EAAK,UAAU,CACnB,QAAS,YAAY,WAAW,CAAC,MAAAoC,CAAK,CAAC,EACvC,OAAQ,KAAK,KAAK,SAAS,0BAA0BhE,EAAW,MAAM,EAAE,CACxF,CAAe,CACF,MAAe,CACd,GAAG,cAAc,MAAM,KAAK,KAAK,OAAO,+CAAgD,CAAC,QAAA6E,CAAO,CAAC,CAAC,CAChH,CACA,CACS,EACD,OAAQ,CACN,KAAM,+BACN,MAAO,KAAK,KAAK,SAAS,QAAQ,CAC5C,CACO,EACD,QAAS,MACf,EAAO,CACD,QAAS,CAAC,sBAAuB,2BAA2B,CAClE,CAAK,EAEM,OAAO,EAAI,CACtB,CACA,EAKayN,GAAgB,CAC3B,CAACtS,EAAW,OAAO,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CAC3F,MAAMlD,EAASkO,EAAY,mBAAmB1I,EAAavC,CAAU,EACrEiL,EAAY,oBAAoBlO,EAAQwF,EAAY,OAAO,WAAW,EACtE,MAAM3F,EAAM,iBAAiBG,EAAQG,EAAc+C,CAAa,CACjE,EAGD,CAACrH,EAAW,aAAa,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IACxEiL,GAActS,EAAW,OAAO,EAAEgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,CAAa,EAGtG,CAACrH,EAAW,IAAI,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CACxF,MAAMlD,EAASkO,EAAY,mBAAmB1I,EAAavC,CAAU,EACrEiL,EAAY,oBAAoBlO,EAAQwF,EAAY,OAAO,WAAW,EACtE,MAAM3F,EAAM,gBAAgBG,EAAQG,EAAc+C,CAAa,CAChE,EAGD,CAACrH,EAAW,YAAY,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IACvEiL,GAActS,EAAW,IAAI,EAAEgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,CAAa,EAGnG,CAACrH,EAAW,KAAK,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CACzF,MAAMlD,EAAS,CACb,GAAGiD,EACH,MAAOuC,EAAY,QACnB,cAAe,EAChB,EACGA,EAAY,OAAO,UACrBxF,EAAO,QAAUwF,EAAY,OAAO,SAEtC,MAAM3F,EAAM,UAAUG,EAAQG,EAAc+C,CAAa,CAC1D,EAED,CAACrH,EAAW,IAAI,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CACxF,MAAMlD,EAAS,CACb,GAAGiD,EACH,KAAMuC,EAAY,QAClB,cAAe,EAChB,EACGA,EAAY,OAAO,UACrBxF,EAAO,QAAUwF,EAAY,OAAO,SAEtC,MAAM3F,EAAM,cAAcG,EAAQG,EAAc+C,CAAa,CAC9D,EAED,CAACrH,EAAW,aAAa,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CAEjGD,EAAW,OAAS,GAEpBiL,EAAY,oBAAoBjL,EAAYuC,EAAY,OAAO,WAAW,EAC1E,MAAM3F,EAAM,kBAAkBoD,EAAY9C,EAAc+C,CAAa,CACtE,EAED,CAACrH,EAAW,MAAM,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CAC1F,MAAMgL,EAAY,oBAAoBrO,EAAOhE,EAAW,OAAQ2J,EAAavC,EAAY9C,EAAc+C,CAAa,CACrH,EAED,CAACrH,EAAW,MAAM,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CAC1F,MAAMgL,EAAY,oBAAoBrO,EAAOhE,EAAW,OAAQ2J,EAAavC,EAAY9C,EAAc+C,CAAa,CACrH,EAED,CAACrH,EAAW,SAAS,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CAC7F,MAAMgL,EAAY,oBAAoBrO,EAAOhE,EAAW,UAAW2J,EAAavC,EAAY9C,EAAc+C,CAAa,CACxH,EAED,CAACrH,EAAW,UAAU,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CAE9F,GAAI,CAAC,KAAK,OAAQ,CAChB,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,mBAAmB,CAAC,EAC7D,MACN,CAkBI,MAAMkL,EAAcvO,EAAM,wBAAwBoD,CAAU,EAC5DiL,EAAY,oBAAoBE,EAAa5I,EAAY,OAAO,WAAW,EAE3E,MAAM3F,EAAM,qBAAqBuO,CAAW,CAC7C,EAGD,CAACvS,EAAW,iBAAiB,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAC5EiL,GAActS,EAAW,UAAU,EAAEgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,CAAa,EAGzG,CAACrH,EAAW,UAAU,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CAE9FD,EAAW,OAAS,GACpBiL,EAAY,oBAAoBjL,EAAYuC,EAAY,OAAO,WAAW,EAC1E,MAAM3F,EAAM,cAAcoD,EAAY9C,EAAc+C,CAAa,CAClE,EAED,CAACrH,EAAW,OAAO,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CAC3FD,EAAW,aAAeuC,EAAY,QACtC,MAAM3F,EAAM,WAAWoD,EAAY9C,EAAc+C,CAAa,CAC/D,EAED,CAACrH,EAAW,MAAM,EAAG,MAAOgE,EAAO2F,EAAavC,EAAY9C,EAAc+C,IAAkB,CAC1F,MAAMgL,EAAY,iBAAiBrO,EAAO2F,CAAW,CACzD,CACA,ECjPO,MAAM6I,EAAgB,CAM3B,aAAa,cAAc7I,EAAa,ChBdnC,IAAA9I,EgBkBH,GAHYS,EAAQ,OAAOkR,GAAiB,eAAe,EACvD,wBAAyB,CAAC7I,CAAW,CAAC,EAEtC,KAAK,KAAK,KAAM,OAGpB,MAAM3F,EAAQ,KAAK,OAAO,IAAI2F,EAAY,OAAO,EAC7C,CAAC3F,GAAS,CAACA,EAAM,UAKjB2F,EAAY,mBACZ9I,EAAA8I,EAAY,iBAAZ,YAAA9I,EAA4B,QAAS,GACrC,KAAK,KAAK,QAAQ,OAAS,GAC7B6J,GAAkBf,EAAY,cAAc,EAI9CoD,EAAoB,OAAO,OAAQ,GAAI,CACrC,MAAO,GACP,UAAW,CACT,MAAO/I,EAAM,KACb,SAAU2F,EAAY,SACtB,QAASA,EAAY,QACrB,GAAIA,EAAY,OAAO,aAAe,IAC9C,CACA,CAAK,EAGD6I,GAAgB,eAAexO,EAAO2F,CAAW,EACrD,CAOE,aAAa,eAAe3F,EAAO2F,EAAa,ChBrD3C,IAAA9I,EgBsDSS,EAAQ,OAAOkR,GAAiB,gBAAgB,EACxD,yBAA0B,CAACxO,EAAO2F,CAAW,CAAC,EAClD,GAAI,CAEF,MAAMtF,GAAqBxD,EAAA8I,EAAY,WAAZ,YAAA9I,EAAsB,cAE3CuG,EAAa,CACjB,UAAWuC,EAAY,OAAO,WAAa,GAC3C,aAAcA,EAAY,OAAO,cAAgB,GACjD,cAAe,GACf,OAAQA,EAAY,OAAO,OAC3B,iBAAkB,GAClB,aAAcA,EAAY,OAAO,aAAe,IACjD,EAGGA,EAAY,OAAO,cACrBvC,EAAW,MAAQuC,EAAY,OAAO,aAIpCA,EAAY,OAAO,SAAW,CAAC3J,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASqE,CAAkB,IAC/F+C,EAAW,QAAUuC,EAAY,OAAO,SAI1C,MAAMrF,EAAe,CACnB,UAAW,CAACqF,EAAY,WACxB,QAAS,CACP,cAAeA,EAAY,OAAO,UAAY,YAC/BA,EAAY,OAAO,aAAe,eAAiB,SAElE,OAAQ,CACN,MAAOA,EAAY,OAAO,WAAaG,GAAmBzF,EAAoBsF,EAAY,OAAO,EACjG,SAAU3F,EAAM,IAC5B,CACA,CACO,EAGKqD,EAAgB,CACpB,SAAUsC,EAAY,OAAO,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC7E,OAAQA,EAAY,OAAO,cAAgB,EAC5C,EAGKzH,EAAUoQ,GAAcjO,CAAkB,EAC5CnC,EACF,MAAMA,EAAQ8B,EAAO2F,EAAavC,EAAY9C,EAAc+C,CAAa,GAEzE/F,EAAQ,KAAK,mCAAmC+C,CAAkB,EAAE,EACpE0I,EAAoB,OAAO,OAAQ,KAAK,KAAK,OAAO,+CAAgD,CAClG,MAAO/I,EAAM,MAAQ,eAC/B,CAAS,CAAC,EAEL,OAAQkJ,EAAO,CACd5L,EAAQ,MAAM,gCAAiC4L,CAAK,EACpDH,EAAoB,OAAO,QAAS,KAAK,KAAK,OAAO,+CAAgD,CACnG,MAAO/I,EAAM,MAAQ,eAC7B,CAAO,CAAC,CACR,CACA,CACA,CCxGO,MAAMyO,CAAK,CAKhB,OAAO,MAAM,CACXnQ,EAAW,WAAWmQ,EAAK,mBAAmB,EAC9CZ,GAAU,WAAY,CAC1B,CAGE,OAAO,eAAgB,CACrB,OAAOtP,EAAe,cAAe,CACzC,CAEE,OAAO,kBAAkBH,EAAQK,EAAY,CAC3CF,EAAe,kBAAkBH,EAAQK,CAAU,CACvD,CAME,aAAa,kBAAkBkH,EAAa,CAC1C,OAAO6I,GAAgB,cAAc7I,CAAW,CACpD,CAKE,OAAO,qBAAsB,CAC3BrH,EAAW,aAAavC,GAAa,cAAe0S,EAAK,aAAa,EACtEnQ,EAAW,aAAavC,GAAa,kBAAmB0S,EAAK,iBAAiB,EAC9EnQ,EAAW,aAAavC,GAAa,kBAAmB0S,EAAK,iBAAiB,CAClF,CACA,CCzCAA,EAAK,KAAM"}