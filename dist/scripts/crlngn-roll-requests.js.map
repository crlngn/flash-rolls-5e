{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Hooks.mjs","../../src/constants/General.mjs","../../src/components/LogUtil.mjs","../../src/constants/Settings.mjs","../../src/components/GeneralUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/RollUtil.mjs","../../src/components/SettingsUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheck\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrow\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheck\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrow\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_CHECK_V2: \"dnd5e.preRollToolCheckV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_CHECK_V2: \"dnd5e.rollToolCheckV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Item Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\"\n}","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cRoll That For Me`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ABILITY_CHECK: { name: \"abilitycheck\", activityType: \"abilitycheck\" }, // Ability checks\n  SAVING_THROW: { name: \"savingthrow\", activityType: \"savingthrow\" }, // Saving throws\n  CONCENTRATION: { name: \"concentration\", activityType: \"concentration\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", activityType: \"deathsave\" }, // Death saving throws\n  SKILL: { name: \"skill\", activityType: \"skill\" }, // Skill checks\n  TOOL_CHECK: { name: \"toolcheck\", activityType: \"toolcheck\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", activityType: \"hitdie\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", activityType: \"initiative\" }, // Initiative rolls\n  ATTACK: { name: \"attack\", activityType: \"attack\" }, // Attack rolls\n  DAMAGE: { name: \"damage\", activityType: \"damage\" }, // Damage rolls\n  FORMULA: { name: \"formula\", activityType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", activityType: \"recharge\" }, // Recharge rolls\n};\n","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debugMode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      console.log(...DEBUG_TAG, ref, ...data);\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n}","export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","import { LogUtil } from \"./LogUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\n\nexport class GeneralUtil {\n  /**\n   * Identifies the current selected or targeted tokens\n   * @param {User5e} user\n   * @returns {Set} A set of targeted tokens\n   */\n  static getTargets(user) {\n    let gm = game.users.find(us=>us.isGM===true);\n    let targetTokens = user.targets || gm.targets; // || canvas.tokens?.controlled;\n\n    return new Set([...targetTokens]);\n  }\n\n  static getClientTargets = () => {\n    if (!game.user) return [];\n\n    // Convert the Set of targets to an array\n    const selectedTargets = Array.from(game.user.targets);//.filter(target => target.actor);\n\n    LogUtil.log(\"Selected Targets\", [ \n      game.user.id, \n      selectedTargets, \n      selectedTargets.filter(target => target.actor) \n    ]);\n    return selectedTargets;\n  };\n\n\n\n  /**\n  * Grab the targeted tokens and return relevant information for hit calculation\n  * @returns {TargetDescriptor[]}\n  */\n  static getTargetDescriptors = () => {\n    const targets = new Map();\n    for ( const token of game.user.targets ) {\n      const { name } = token;\n      const { img, system, uuid, statuses } = token.actor ?? {};\n      if ( uuid ) {\n        const ac = statuses.has(\"coverTotal\") ? null : system.attributes?.ac?.value;\n        targets.set(uuid, { name, img, uuid, ac: ac ?? null });\n      }\n    }\n    return Array.from(targets.values());\n  }\n\n  /**\n   * \n   * @param {String} itemUuid \n   * @returns {Actor5e}\n   */\n  static getActorFromItem(itemUuid){\n    const actorId = itemUuid.split(\".\")[1];\n    const actor = game.actors.get(actorId);\n\n    return actor;\n  }\n\n  static findItemFromActor = (actorId, itemId, actionName) => {\n    const actor = game.actors.get(actorId);\n    LogUtil.log(\"findItemFromActor\", [itemId, actionName]);\n    if(!actor) return null;\n\n    let item = itemId ? actor.items.find((it) => {\n      return it.id === itemId; \n    }) : null; \n\n    if(!item){ \n      // match exact name\n      item = actionName ? actor.items.find((it) => it.name.toLowerCase() === actionName.toLowerCase()) : null;\n      // if no exact name, look for the name with \"(Legacy)\" tag\n      if(!item){ item = actor.items.find((it) => it.name.toLowerCase() === (actionName + \" (Legacy)\").toLowerCase()) };\n    } \n\n    return item;\n  }\n\n  /**\n   * Checks if module is currently installed and active\n   * @param {string} moduleName \n   * @returns \n   */\n  static isModuleOn(moduleName){\n    const module = game.modules?.get(moduleName);\n    return module?.active ? true : false;\n  }\n\n  /**\n   * checks roll mode to determine if its mode is blind / private\n   * @param {String} mode \n   */\n  static isPrivateRoll(mode){\n    return mode === CONST.DICE_ROLL_MODES.BLIND || mode === CONST.DICE_ROLL_MODES.PRIVATE;\n  }\n\n  /**\n   * Removes the MeasuredTemplate \n   * @param {Item5e} item \n   */\n  static removeTemplateForItem (item) {\n    LogUtil.log(\"removeTemplateForItem - A\", [item]);\n    const removeTemplateSettingOn = SettingsUtil.get(\"remove-template\");\n    LogUtil.log(\"removeTemplateForItem - B\", [removeTemplateSettingOn]);\n    if(!removeTemplateSettingOn){ return; }\n    const templates = canvas.templates.objects.children.filter(mt => {\n      return mt.document.flags.dnd5e.item === item?.uuid;\n    });\n\n    canvas.scene.deleteEmbeddedDocuments('MeasuredTemplate', templates.map(i=>i.id));\n  }\n\n  static getUserFromActor(actorId){\n    let owner;\n    if(!actorId){ return null; }\n    const actor = actorId ? game.actors.get(actorId) : null;\n    \n    let assignedPlayer = game.users.players.find(pl=>{\n      return pl.active === true && pl.character.id === actorId;\n    });\n    owner = assignedPlayer;\n\n    if(!owner){ \n      // owner = game.users.find(u => u.isGM===true); \n      game.users.players.forEach(pl => {\n        if(pl.active && actor.testUserPermission(pl, foundry.CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER, { exact:true })){\n          owner = pl;\n        }\n      });\n    }\n\n    // let gm = game.users.find(u => u.isGM===true);\n    LogUtil.log(\"getUserFromActor\", [actorId, owner]);\n\n    return owner;\n  }\n\n\n  static html(parent, selector) {\n    return parent.querySelector(selector);\n  }\n\n  /**\n   * Adds css rules to a <style> element at the body\n   * @param {string} varName \n   * @param {string} varValue \n   */\n  static addCSSVars = (varName, varValue) => {\n    let bodyStyle = document.querySelector('#crlngn-chat-vars');\n    \n    if (!bodyStyle) {\n      // Create style element if it doesn't exist\n      const body = document.querySelector('body');\n      bodyStyle = document.createElement('style');\n      bodyStyle.id = 'crlngn-chat-vars';\n      bodyStyle.textContent = 'body.crlngn-chat {\\n}\\n';\n      body.prepend(bodyStyle);\n    }\n    \n    // Parse the current CSS content\n    let cssText = bodyStyle.textContent;\n    \n    // Find or create the rule block\n    let ruleStart = cssText.indexOf('body.crlngn-chat {');\n    let ruleEnd = cssText.indexOf('}', ruleStart);\n    \n    if (ruleStart === -1) {\n      // If rule doesn't exist, create it\n      cssText = 'body.crlngn-chat {\\n}\\n';\n      ruleStart = 0;\n      ruleEnd = cssText.indexOf('}');\n    }\n    \n    // Get all the current declarations\n    const rulePart = cssText.substring(ruleStart + 'body.crlngn-chat {'.length, ruleEnd);\n    \n    // Split by semicolons to get individual declarations\n    const declarations = rulePart.split(';')\n      .map(decl => decl.trim())\n      .filter(decl => decl !== '');\n    \n    // Create a map of existing variables\n    const varsMap = {};\n    declarations.forEach(decl => {\n      const parts = decl.split(':');\n      if (parts.length >= 2) {\n        const name = parts[0].trim();\n        const value = parts.slice(1).join(':').trim(); // Handle values that might contain colons\n        if (name) varsMap[name] = value;\n      }\n    });\n    \n    // Format the value if it appears to need quotes\n    // For string values used in content properties (i18n text)\n    if (varName.includes('i18n') && \n        typeof varValue === 'string' && \n        !varValue.startsWith('\"') && \n        !varValue.startsWith(\"'\") && \n        !varValue.match(/^url\\(|^rgba?\\(|^hsla?\\(/)) {\n      varValue = `\"${varValue}\"`;\n    }\n    \n    // Update or add the new variable\n    varsMap[varName] = varValue;\n    \n    // Rebuild the rule content\n    const newRuleContent = Object.entries(varsMap)\n      .map(([name, value]) => `  ${name}: ${value};`)\n      .join('\\n');\n    \n    // Rebuild the entire CSS\n    const newCss = \n      cssText.substring(0, ruleStart) + \n      'body.crlngn-chat {\\n' + \n      newRuleContent + \n      '\\n}' + \n      cssText.substring(ruleEnd + 1);\n    \n    // Update the style element\n    bodyStyle.textContent = newCss;\n  };\n}\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      LogUtil.log(`Attempting to register module...`);\n\n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n        LogUtil.log(`SocketUtil | Module registered`, [SocketUtil.socket]);\n      } catch (e) {\n          LogUtil.log(`Problem registering module`, [e]);\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n      LogUtil.log(`SocketUtil - Registered callback`, [SocketUtil.socket, name]);\n    } else {\n      LogUtil.log(`SocketUtil - Failed to register callback (socket not initialized)`, [SocketUtil.socket, name]);\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log(`SocketUtil - sendMessage`, [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as GM.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute for all clients.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    if (!SocketUtil.socket) {\n        LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as user.\");\n        return;\n    }\n    \n    // We need to use the original handler, but we'll handle deserialization on reception\n    const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n    LogUtil.log(\"SocketUtil - Executed as user.\", [resp]);\n    return resp;\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) {\n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let test = r.toJSON();\n          return test;\n        }else{\n          return r;\n        }\n      });\n    }\n    LogUtil.log(\"ROLLS DATA\", [data]);\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    let result = {};\n    // Handle null or undefined\n    if (data == null) return data;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      // rolls = data.rolls.map(r => Roll.fromJSON(JSON.stringify(r)));\n      \n      result = {\n        ...data,\n        rolls: data.rolls.map(r => {\n          if(typeof r === 'string'){\n            return Roll.fromJSON(r);\n          }else{\n            return Roll.fromJSON(JSON.stringify(r));\n          }\n        })\n      }\n    }\n    LogUtil.log(\"ROLLS RESULT\", [result]);\n    \n    return result;\n  }\n\n}\n","import { HOOKS_DND5E, HOOKS_CORE } from \"@/constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { HOOK_NAMES, MODULE_ID } from \"@/constants/General.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { getSettings } from \"@/constants/Settings.mjs\";\n\n/**\n * Utility class for handling roll-related functionality\n * More information on DnD5e hooks here:\n * https://github.com/foundryvtt/dnd5e/wiki/Hooks\n */\nexport class RollUtil {\n  static requestsEnabled = false;\n  static SOCKET_CALLS = {\n    receiveDiceConfig: \"receiveDiceConfig\",\n    sendDiceConfig: \"sendDiceConfig\",\n    triggerRollSkillV2: \"triggerRollSkillV2\"\n  };\n  static diceConfig = {};\n  static playerDiceConfigs = {};\n  \n  static init() {\n    // General Rolling Process\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_V2, RollUtil.#onPreRollV2);\n    Hooks.on(HOOKS_CORE.RENDER_ROLL_RESOLVER, RollUtil.#onRenderRollResolver)\n    \n    // Ability Checks & Saving Throws\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, RollUtil.#onPreRollAbilityCheck);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, RollUtil.#onPreRollSavingThrow);\n    \n    // Concentration\n    Hooks.on(HOOKS_DND5E.PRE_BEGIN_CONCENTRATING, RollUtil.#onPreBeginConcentrating);\n    Hooks.on(HOOKS_DND5E.PRE_END_CONCENTRATION, RollUtil.#onPreEndConcentration);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_CONCENTRATION_V2, RollUtil.#onPreRollConcentrationV2);\n    \n    // Death Saves\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, RollUtil.#onPreRollDeathSaveV2);\n    \n    // Skills & Tools\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_SKILL_V2, RollUtil.#onPreRollSkillV2);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_TOOL_CHECK_V2, RollUtil.#onPreRollToolCheckV2);\n    \n    // Hit Dice\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, RollUtil.#onPreRollHitDieV2);\n    \n    // Hit Points\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_CLASS_HIT_POINTS, RollUtil.#onPreRollClassHitPoints);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_NPC_HIT_POINTS, RollUtil.#onPreRollNPCHitPoints);\n    \n    // Initiative\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG, RollUtil.#onPreRollInitiativeDialog);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_INITIATIVE, RollUtil.#onPreRollInitiative);\n    \n    // Attacks\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, RollUtil.#onPreRollAttackV2);\n    \n    // Damage Rolls\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, RollUtil.#onPreRollDamageV2);\n    \n    // Formula Rolls\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_FORMULA_V2, RollUtil.#onPreRollFormulaV2);\n    \n    // Recharge Rolls\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_RECHARGE_V2, RollUtil.#onPreRollRechargeV2);\n\n    // Roll Config\n    Hooks.on(HOOKS_DND5E.BUILD_ROLL_CONFIG, RollUtil.#onBuildRollConfig);\n    Hooks.on(HOOKS_DND5E.POST_ROLL_CONFIG, RollUtil.#onPostRollConfiguration);\n    \n    // Item Display\n    // Hooks.on(HOOKS_DND5E.PRE_DISPLAY_CARD_V2, RollUtil.#onPreDisplayCardV2);\n\n  }\n\n  /**\n   * \n   * @param {RollConfigurationDialog} rollConfigDialog \n   * @param {BasicRollConfigurationDialogOptions} options\n   * @returns \n   */\n  static #onBuildRollConfig(rollConfigDialog, options){\n    LogUtil.log(\"#onBuildRollConfig #1\", [rollConfigDialog, options]);\n    const SETTINGS = getSettings();\n    const isEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    if(!isEnabled || !rollConfigDialog.config){\n      return;\n    }\n    \n    // Get the button that triggered this dialog if any\n    const target = rollConfigDialog.config?.event?.target?.closest(\"button[data-action=rollRequest]\");\n    \n    // If this was triggered by our button, set up the configuration\n    if(target){\n      // Set situational bonus from the button data\n      const situationalBonus = Number(target.dataset.situational || 0);\n      rollConfigDialog.config.situational = situationalBonus;\n      rollConfigDialog.config.advantage = target.dataset.advantage===\"true\";\n      rollConfigDialog.config.disadvantage = target.dataset.disadvantage===\"true\";\n      rollConfigDialog.config.ability = target.dataset.ability;\n      rollConfigDialog.config.abilityId = target.dataset.ability;\n      \n      // Update window title if available\n      if(rollConfigDialog.options?.window?.title && target.dataset.flavor) {\n        rollConfigDialog.options.window.title = target.dataset.flavor;\n      }\n      \n      // Make sure the situational bonus is included in the formula data\n      if (!rollConfigDialog.data) rollConfigDialog.data = {};\n      rollConfigDialog.data.situational = situationalBonus;\n    }\n    \n    // Always update the situational bonus from the dialog input if present\n    if(rollConfigDialog.config && options.data && options.data.situational !== undefined) {\n      const situationalBonus = Number(options.data.situational);\n      rollConfigDialog.config.situational = situationalBonus;\n      \n      // Make sure the situational bonus is included in the formula data\n      if (!rollConfigDialog.data) rollConfigDialog.data = {};\n      rollConfigDialog.data.situational = situationalBonus;\n    }\n    \n    // Crucial: Add the situational bonus to the parts array if it's not already there\n    if (options.parts && rollConfigDialog.config.situational && !options.parts.includes('@situational')) {\n      options.parts.push('@situational');\n      // Also add it to the data object\n      if (!options.data) options.data = {};\n      options.data.situational = rollConfigDialog.config.situational;\n    }\n    \n    // Apply the changes to the dialog's form elements\n    if (rollConfigDialog.element && rollConfigDialog.element.length) {\n      const situationalInput = rollConfigDialog.element.find('input[name=\"data.situational\"]');\n      if (situationalInput.length && rollConfigDialog.config.situational !== undefined) {\n        situationalInput.val(rollConfigDialog.config.situational);\n      }\n    }\n    \n    // Modify the formula display if needed\n    if (rollConfigDialog.element && rollConfigDialog.element.length) {\n      const formulaElement = rollConfigDialog.element.find('.dice-formula');\n      if (formulaElement.length) {\n        let currentFormula = formulaElement.text();\n        // Check if the formula already includes the situational bonus\n        if (rollConfigDialog.config.situational && !currentFormula.includes('@situational')) {\n          currentFormula += ` + @situational`;\n          formulaElement.text(currentFormula);\n        }\n      }\n    }\n\n    LogUtil.log(\"#onBuildRollConfig #2\", [rollConfigDialog.config, options]);\n    \n    // Force re-render of the dialog after configuration changes\n    if(rollConfigDialog.element && rollConfigDialog.element.length) {\n      // Schedule the re-render on the next tick to ensure all config changes are applied\n      setTimeout(() => {\n        rollConfigDialog.render(true);\n      }, 0);\n    }\n    \n    return rollConfigDialog;\n  }\n\n  static injectRollRequestsToggle(){\n    const SETTINGS = getSettings();\n    const rollRequestsToggleHTML = `<label class=\"chat-control-icon active\" id=\"crlngn-request-toggle\" data-tooltip-direction=\"LEFT\"><i class=\"fas fa-bolt\"></i></label>`;\n    \n    document.querySelector(\"#chat-controls\").insertAdjacentHTML(\"afterbegin\", rollRequestsToggleHTML);\n    const rollRequestsToggle = document.querySelector(\"#crlngn-request-toggle\");\n    const isEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    SettingsUtil.applyRollRequestsSetting(isEnabled);\n    \n    rollRequestsToggle.addEventListener(\"click\", (event) => {\n      event.target.classList.toggle(\"active\");\n      const isActive = event.target.classList.contains(\"active\");\n      SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, isActive);\n    });\n  }\n  \n\n  /**\n   * Register socket calls with socketlib for remote execution\n   */\n  static registerSocketCalls(){\n    SocketUtil.registerCall(RollUtil.SOCKET_CALLS.triggerRollSkillV2, RollUtil.triggerRollSkillV2);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollV2\n   * Fires before a roll is performed\n   * @param {Object} config - BasicRollProcessConfiguration for the roll\n   * @param {Object} dialog - BasicRollDialogConfiguration for the dialog\n   * @param {Object} message - BasicRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollV2\", [config, dialog, message]);\n    const target = config.event.target.closest(\"button[data-action=rollRequest]\");\n\n    if(!target) return true;\n    \n    // Extract situational bonus from the dataset\n    const situationalBonus = target.dataset.situational ? Number(target.dataset.situational) : undefined;\n    \n    // Set configuration properties\n    config.advantage = target.dataset.advantage===\"true\";\n    config.disadvantage = target.dataset.disadvantage===\"true\";\n    config.ability = target.dataset.ability;\n    config.abilityId = target.dataset.ability;\n    config.situational = situationalBonus; // Set situational bonus in config\n    \n    // Set flavor text if available\n    if (target.dataset.flavor) {\n      message.data.flavor = target.dataset.flavor;\n      if (dialog.options?.window) {\n        dialog.options.window.title = target.dataset.flavor;\n      }\n    }\n    \n    // Ensure the situational bonus is included in the parts array\n    if (situationalBonus !== undefined) {\n      if (!config.parts) config.parts = [];\n      if (!config.parts.includes('@situational')) {\n        config.parts.push('@situational');\n      }\n    }\n\n    if (!config.rolls) config.rolls = [];\n    for (const roll of config.rolls) {\n      if (!roll.data) roll.data = {};\n      if (!roll.data.flags) roll.data.flags = {};\n      \n      // Add your module's flags to the roll options\n      roll.data.flags[MODULE_ID] = {\n        flavor: dialog.options?.window?.title || message.data.flavor\n      };\n      roll.data = {\n        // ...roll.data,\n        flags: roll.data.flags,\n        situational: situationalBonus,\n        target: target.dataset.dc ? Number(target.dataset.dc) : undefined,\n        ability: target.dataset.ability\n      };\n      LogUtil.log(\"#onPreRollV2 - roll\", [roll]);\n    }\n    \n    return true; // Allow the roll to proceed\n  }\n\n  /**\n   * Get the player owner object for a given actor ID\n   * @param {string} actorId - Actor ID to get player owner for\n   * @returns {Object|null} Player owner object, or null if not found\n   */\n  static getPlayerOwner(actorId) {\n    return game.users.find(u => u.character?.id === actorId);\n\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollAbilityCheck\n   * Fires before an ability check is rolled\n   * @param {Object} config - AbilityRollProcessConfiguration for the roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollAbilityCheck(config) {\n    LogUtil.log(\"#onPreRollAbilityCheck\", [config]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollSavingThrow\n   * Fires before a saving throw is rolled\n   * @param {Object} config - AbilityRollProcessConfiguration for the roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollSavingThrow(config) {\n    LogUtil.log(\"#onPreRollSavingThrow\", [config]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preBeginConcentrating\n   * Fires before a concentration effect is created\n   * @param {Actor5e} actor - The actor that will be concentrating\n   * @param {Item5e} item - The item that requires concentration\n   * @returns {boolean|void} Return false to prevent concentration effect from being created\n   */\n  static #onPreBeginConcentrating(actor, item) {\n    LogUtil.log(\"#onPreBeginConcentrating\", [actor, item]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preEndConcentration\n   * Fires before a concentration effect is deleted\n   * @param {Actor5e} actor - The actor that is concentrating\n   * @param {ActiveEffect} effect - The concentration effect\n   * @returns {boolean|void} Return false to prevent concentration effect from being deleted\n   */\n  static #onPreEndConcentration(actor, effect) {\n    LogUtil.log(\"#onPreEndConcentration\", [actor, effect]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollConcentrationV2\n   * Fires before a saving throw to maintain concentration is rolled\n   * @param {Object} config - D20RollProcessConfiguration for the roll\n   * @param {Object} dialog - D20RollDialogConfiguration for the dialog\n   * @param {Object} message - D20RollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollConcentrationV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollConcentrationV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollDeathSaveV2\n   * Fires before a death saving throw is rolled\n   * @param {Object} config - D20RollProcessConfiguration for the roll\n   * @param {Object} dialog - D20RollDialogConfiguration for the dialog\n   * @param {Object} message - D20RollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollDeathSaveV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollDeathSaveV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollSkillV2\n   * Fires before a skill check is rolled\n   * @param {Object} config - SkillToolRollProcessConfiguration for the roll\n   * @param {Object} dialog - SkillToolRollDialogConfiguration for the dialog\n   * @param {Object} message - SkillToolRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollSkillV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollSkillV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollToolCheckV2\n   * Fires before a tool check is rolled\n   * @param {Object} config - SkillToolRollProcessConfiguration for the roll\n   * @param {Object} dialog - SkillToolRollDialogConfiguration for the dialog\n   * @param {Object} message - SkillToolRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollToolCheckV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollToolCheckV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollHitDieV2\n   * Fires before a hit die is rolled\n   * @param {Object} config - HitDieRollProcessConfiguration for the roll\n   * @param {Object} dialog - HitDieRollDialogConfiguration for the dialog\n   * @param {Object} message - HitDieRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollHitDieV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollHitDieV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollClassHitPoints\n   * Fires before hit points are rolled for a character's class\n   * @param {Actor5e} actor - The actor\n   * @param {Object} classItem - The class item\n   * @param {Object} formula - The formula to roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollClassHitPoints(actor, classItem, formula) {\n    LogUtil.log(\"#onPreRollClassHitPoints\", [actor, classItem, formula]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollNPCHitPoints\n   * Fires before hit points are rolled for an NPC\n   * @param {Actor5e} actor - The NPC actor\n   * @param {Object} formula - The formula to roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollNPCHitPoints(actor, formula) {\n    LogUtil.log(\"#onPreRollNPCHitPoints\", [actor, formula]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollInitiativeDialog\n   * Fires before the initiative dialog is shown\n   * @param {Object} config - Configuration for the roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollInitiativeDialog(config) {\n    LogUtil.log(\"#onPreRollInitiativeDialog\", [config]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollInitiative\n   * Fires before initiative is rolled for an Actor\n   * @param {Actor5e} actor - The actor rolling initiative\n   * @param {Object} options - Roll options\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollInitiative(actor, options) {\n    LogUtil.log(\"#onPreRollInitiative\", [actor, options]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollAttackV2\n   * Fires before an attack is rolled\n   * @param {Object} config - AttackRollProcessConfiguration for the roll\n   * @param {Object} dialog - AttackRollDialogConfiguration for the dialog\n   * @param {Object} message - AttackRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollAttackV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollAttackV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollDamageV2\n   * Fires before damage is rolled\n   * @param {Object} config - DamageRollProcessConfiguration for the roll\n   * @param {Object} dialog - DamageRollDialogConfiguration for the dialog\n   * @param {Object} message - DamageRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollDamageV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollDamageV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollFormulaV2\n   * Fires before a formula is rolled for a Utility activity\n   * @param {Object} config - FormulaRollProcessConfiguration for the roll\n   * @param {Object} dialog - FormulaRollDialogConfiguration for the dialog\n   * @param {Object} message - FormulaRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollFormulaV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollFormulaV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollRechargeV2\n   * Fires before recharge is rolled for an Item or Activity\n   * @param {Item5e|Object} item - The item being recharged\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollRechargeV2(item) {\n    LogUtil.log(\"#onPreRollRechargeV2\", [item]);\n  }\n\n  /**\n   * Hook handler for dnd5e.postRollConfiguration\n   * Fires after roll configuration is complete, but before the roll is evaluated\n   * @param {Array} rolls - BasicRoll[] array of rolls\n   * @param {Object} config - BasicRollProcessConfiguration for the roll\n   * @param {Object} dialog - BasicRollDialogConfiguration for the dialog\n   * @param {Object} message - BasicRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPostRollConfiguration(rolls, config, dialog, message) {\n    if(!game.user.isGM){ return; }\n    LogUtil.log(\"#onPostRollConfiguration\", [rolls, config, dialog, message]);\n    const isActivity = config.subject instanceof dnd5e.dataModels.activity.BaseActivityData;\n    const hookName = config.hookNames[0].toLowerCase();\n    const actor = isActivity ? config.subject?.actor : config.subject;\n    // LogUtil.log(\"#onPostRollConfiguration - hookNames\", [isActivity, config, hookName]);\n\n    // TODO: what to do if there's no actor for this roll, such as custom rolls\n    if(!actor){ return; } \n\n    const playerOwner = actor.hasPlayerOwner ? GeneralUtil.getUserFromActor(actor.id) : null;\n\n    const roll = rolls[0];\n    const bonus = roll?.data.situational ? Number(roll.data.situational) : Number(config.situational || \"\");\n    if(!roll){return;}\n\n    roll.data.flags = {\n      ... roll.data.flags,\n      [MODULE_ID]: {\n        flavor: message.data.flavor\n      }\n    }\n    // roll.resetFormula();\n\n\n    if(playerOwner && playerOwner !== game.user && RollUtil.requestsEnabled){\n      switch(hookName){\n        case HOOK_NAMES.SKILL.name: {\n          LogUtil.log(\"SocketUtil.execForUser\", [playerOwner, config, dialog, message]);\n          const skillConfig = {\n            // bonus: bonus,\n            skill: config.skill,\n            subject: config.subject,\n            ability: roll.data.abilityId || config.ability,\n            abilityId: roll.data.abilityId || config.ability,\n            advantage: roll.hasAdvantage || false,\n            disadvantage: roll.hasDisadvantage || false,\n            situational: bonus,\n            flavor: message.data.flavor,\n            target: 17\n          };\n          // message.data.flavor = dialog.options?.window?.title || message.data.flavor;\n          // if(dialog.options?.window?.title){\n          //   dialog.options.window.title = message.data.flavor;\n          // }\n          const msg = {\n            data:{\n              flavor: dialog.options?.window?.title || message.data.flavor\n            },\n            speaker: {\n              ...message.speaker,\n              alias: actor.name\n            },\n            rollMode: message.rollMode\n          }\n          SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerRollSkillV2, playerOwner.id, skillConfig, dialog, msg);\n          RollUtil.postRequestChatMessage(playerOwner, actor, skillConfig, dialog, msg);\n\n          LogUtil.log(\"#onPostRollConfiguration - msg\", [skillConfig, dialog, msg]);\n          return false;\n        }\n        default:{\n          return;\n        }\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * Post a message to chat in case user cancels the roll popup\n   * @param {*} actor \n   * @param {*} config \n   * @param {*} dialog \n   * @param {*} message \n   */\n  static postRequestChatMessage = async(player, actor, config, dialog, message) => {\n    // Ensure we have a valid situational bonus value\n    const situationalBonus = config.situational !== undefined ? Number(config.situational) : 0;\n    \n    const dataset = {\n      ...config,\n      type: \"skill\",\n      action: \"rollRequest\",\n      visibility: player.id,\n      target: actor.uuid,\n      dc: config.target,\n      hideDC: true,\n      flavor: config.flavor,\n      // Make sure the situational bonus is properly included\n      situational: situationalBonus,\n      // Include parts to ensure the situational bonus is added to the roll\n      parts: config.parts || []\n    };\n    \n    // Ensure the situational bonus is included in the parts array\n    if (situationalBonus && !dataset.parts.includes('@situational')) {\n      dataset.parts.push('@situational');\n    }\n    \n    // check https://github.com/foundryvtt/dnd5e/blob/735a7e96cc80458e47acaef1af5c5ea173369ace/module/enrichers.mjs for more info\n    const buttons = [{\n      buttonLabel: dnd5e.enrichers.createRollLabel({...dataset, format: \"short\", icon: true}),\n      hiddenLabel: dnd5e.enrichers.createRollLabel({...dataset, format: \"short\", icon: true, hideDC: true}),\n      dataset: dataset\n    }]; \n    message.data.flavor = config.flavor;\n\n    LogUtil.log(\"postRequestChatMessage\", [ message, dataset ]);\n    \n    const chatData = {\n      user: player.id, \n      content: await renderTemplate(\"systems/dnd5e/templates/chat/request-card.hbs\", { buttons }),\n      flavor: `GM has requested a roll`,\n      speaker: message.speaker // ChatMessage.implementation.getSpeaker({ alias: \"Game Master\" })\n    };\n    \n    await ChatMessage.implementation.create(chatData);\n  }\n\n  static triggerRollSkillV2 = async (config, dialog, message) => {\n    const diceConfig = RollUtil.playerDiceConfigs[game.user.id];\n    LogUtil.log(\"triggerRollSkillV2\", [game.user, diceConfig?.d20]);\n    // if(config.cancel) { return; }\n    \n    // Get the actor\n    const actor = game.actors.get(config.subject._id);\n    if(!actor || !diceConfig?.d20) return;\n    message.data.flavor = config.flavor;\n    // Make sure the skill is specified\n    if(!config.skill || !actor) {\n      LogUtil.log(\"triggerRollSkillV2 - missing data\", [config, dialog, message]);\n      return;\n    }\n    LogUtil.log(\"triggerRollSkillV2\", [actor, diceConfig.d20, config, dialog, message]);\n    \n    // Create a new dialog configuration that includes the situational bonus\n    const updatedDialog = {\n      ...dialog,\n      configure: diceConfig.d20 ? false : true\n    };\n    \n    // Ensure the situational bonus is included in the roll\n    const updatedConfig = {\n      ...config,\n      // Make sure the situational bonus is properly passed to the roll\n      parts: config.parts || []\n    };\n    \n    // If there's a situational bonus, add it to the parts array if not already included\n    if (config.situational && !updatedConfig.parts.includes('@situational')) {\n      updatedConfig.parts.push('@situational');\n    }\n    \n    // If there is no roll resolver configured for the die, show player the configuration popup \n    // filled in with the information set by GM\n    actor.rollSkill(updatedConfig, updatedDialog, message);\n  }\n\n  /**\n   * Hook handler for dnd5e.renderRollResolver\n   * Fires after the roll resolver is rendered\n   * @param {RollResolver} resolver - The roll resolver\n   * @param {HTMLElement} html - The HTML element for the roll resolver\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onRenderRollResolver(resolver, html) {\n    LogUtil.log(\"#onRenderRollResolver\", [resolver, html]);\n\n    // Check if any entry in the fulfillable Map has method: \"pixels\"\n    const hasPixelsMethod = value => value?.method === \"pixels\";\n    const isPixelsDice = resolver.fulfillable instanceof Map && \n                        [...resolver.fulfillable.values()].some(hasPixelsMethod);\n\n    // Add custom UI elements if the Resolver is for Pixel Dice\n    if(isPixelsDice){\n      const roll = resolver.roll;\n      const flags = roll?.data?.flags?.[MODULE_ID];\n      if (!flags) { flags = {flavor: \"\"} }\n      \n      html.classList.add('crlngn-rolls');\n      html.querySelector('.window-header .window-title').innerHTML = game.i18n.localize(\"CRLNGN_ROLLS.ui.forms.pixelsRollTitle\");\n\n      // Add title and flavor from flag, if present\n      const customElement = document.createElement('div');\n      customElement.classList.add('crlngn-resolver-title');\n      customElement.innerHTML = `<h1>${game.i18n.localize(\"CRLNGN_ROLLS.ui.forms.pixelsWaitingTitle\")}</h1><br/>${flags.flavor}`;\n\n      html.querySelector('.standard-form').prepend(customElement);\n    }\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  \n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n      LogUtil.log(\"Registering... \",[entry]);\n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n      LogUtil.log(\"registerSettings\",[setting.tag, SettingsUtil.get(setting.tag)]);\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n      LogUtil.log(\"GET Setting\", [selectedSetting, setting]);\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n    LogUtil.log(\"Setting\",[settingName, selectedSetting]);\n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n      LogUtil.log(\"Unable to change setting\",[settingName, selectedSetting]);\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsSetting(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsSetting(value){\n    const SETTINGS = getSettings();\n    const isEnabled = value!==undefined ? value : SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    RollUtil.requestsEnabled = isEnabled;\n    const rollRequestsToggle = document.querySelector(\"#crlngn-request-toggle\");\n    if(!rollRequestsToggle){ return; }\n    if (isEnabled === false) {\n      rollRequestsToggle.classList.remove(\"active\");\n    } else {\n      rollRequestsToggle.classList.add(\"active\");\n    }\n\n    const tooltipStr = game.i18n.localize(rollRequestsToggle.classList.contains(\"active\") ? \n      \"CRLNGN_ROLLS.ui.buttons.rollRequestsToggleOn\" : \n      \"CRLNGN_ROLLS.ui.buttons.rollRequestsToggleOff\");\n    rollRequestsToggle.dataset.tooltip = tooltipStr;\n\n    if (game.tooltip) {\n      game.tooltip.activate(rollRequestsToggle, {text: tooltipStr});\n    }\n    \n    LogUtil.log(\"Roll Requests Toggle\", [isEnabled, rollRequestsToggle]);\n  }\n\n}\n","import { HOOKS_CORE } from \"../constants/Hooks.mjs\"; \nimport { LogUtil } from \"./LogUtil.mjs\"; \nimport { SettingsUtil } from \"./SettingsUtil.mjs\"; \nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    // Initialize socketlib\n    SocketUtil.initialize(Main.registerSocketCalls);\n    Hooks.once(HOOKS_CORE.INIT, () => { \n      const SETTINGS = getSettings();\n      LogUtil.log(\"Initiating module...\", [], true);\n      SettingsUtil.registerSettings();\n      RollUtil.init();\n    });\n\n    Hooks.once(HOOKS_CORE.READY, () => {\n      LogUtil.log(\"Core Ready\", []);\n      const SETTINGS = getSettings();\n      \n      var isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n      if(isDebugOn){CONFIG.debug.hooks = true};\n\n      if(game.user.isGM){\n        Main.injectRollRequestsToggle();\n      }\n      \n      if(game.user.isGM){\n        Hooks.on(HOOKS_CORE.USER_CONNECTED, Main.onUserConnected);\n        // Only run this on the GM client\n        game.users.forEach(user => {\n          Main.onUserConnected(user);\n        });\n      }\n    });\n  }\n\n  /**\n   * Request dice configuration from the connected user\n   * @param {*} user \n   * @returns \n   */\n  static onUserConnected(user) {\n    // Request dice configuration from the connected user\n    if (user.active && user.id !== game.user.id) {\n      LogUtil.log(\"onUserConnected\", [user]);\n      SocketUtil.execForUser(RollUtil.SOCKET_CALLS.sendDiceConfig, user.id);\n    }\n  }\n  \n  // Add the sendDiceConfig method that will be called on the player's client\n  static sendDiceConfig() {\n    // Only run this on non-GM clients when requested\n    if (!game.user || game.user.isGM) return;\n    \n    const clientSettings = game.settings.storage.get(\"client\");\n    let diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    diceConfig = diceConfig || \"\";\n    LogUtil.log(`sendDiceConfig`, [diceConfig]);\n    \n    // Send the dice configuration back to the GM\n    SocketUtil.execForGMs(RollUtil.SOCKET_CALLS.receiveDiceConfig, game.user?.id, diceConfig);\n  }\n\n  // Add the receiveDiceConfig method that will be called on the GM's client\n  static receiveDiceConfig(userId, diceConfig) {\n    // Only run this on the GM client\n    if (!game.user?.isGM) return;\n    \n    // Store the dice configuration for this user\n    if (!RollUtil.playerDiceConfigs) RollUtil.playerDiceConfigs = {};\n    RollUtil.playerDiceConfigs[userId] = JSON.parse(diceConfig) || {};\n    \n    LogUtil.log(`Received dice configuration from user ${userId}`, [RollUtil.playerDiceConfigs]);\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(RollUtil.SOCKET_CALLS.triggerRollSkillV2, RollUtil.triggerRollSkillV2);\n    SocketUtil.registerCall(RollUtil.SOCKET_CALLS.sendDiceConfig, Main.sendDiceConfig);\n    SocketUtil.registerCall(RollUtil.SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n  }\n\n  static injectRollRequestsToggle(){\n    const SETTINGS = getSettings();\n    const rollRequestsToggleHTML = `<label class=\"chat-control-icon active\" id=\"crlngn-request-toggle\" data-tooltip-direction=\"LEFT\"><i class=\"fas fa-bolt\"></i></label>`;\n    \n    document.querySelector(\"#chat-controls\").insertAdjacentHTML(\"afterbegin\", rollRequestsToggleHTML);\n    const rollRequestsToggle = document.querySelector(\"#crlngn-request-toggle\");\n    const isEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    SettingsUtil.applyRollRequestsSetting(isEnabled);\n    \n    rollRequestsToggle.addEventListener(\"click\", (event) => {\n      event.target.classList.toggle(\"active\");\n      const isActive = event.target.classList.contains(\"active\");\n      SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, isActive);\n    });\n    return rollRequestsToggle;\n  }\n\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\nMain.init();\n"],"names":["HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","MODULE_ID","DEBUG_TAG","HOOK_NAMES","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","__publicField","LogUtil","SETTING_INPUT","SETTING_SCOPE","getSettings","GeneralUtil","user","gm","us","targetTokens","itemUuid","actorId","moduleName","module","mode","item","removeTemplateSettingOn","SettingsUtil","templates","mt","i","owner","actor","pl","parent","selector","selectedTargets","target","_b","targets","token","name","img","system","uuid","statuses","ac","itemId","actionName","it","varName","varValue","bodyStyle","body","cssText","ruleStart","ruleEnd","declarations","decl","varsMap","parts","value","newRuleContent","newCss","_SocketUtil","hasRolls","r","result","callbackFunc","e","func","callback","handler","parameters","userId","resp","SocketUtil","_RollUtil_static","onBuildRollConfig_fn","onPreRollV2_fn","onPreRollAbilityCheck_fn","onPreRollSavingThrow_fn","onPreBeginConcentrating_fn","onPreEndConcentration_fn","onPreRollConcentrationV2_fn","onPreRollDeathSaveV2_fn","onPreRollSkillV2_fn","onPreRollToolCheckV2_fn","onPreRollHitDieV2_fn","onPreRollClassHitPoints_fn","onPreRollNPCHitPoints_fn","onPreRollInitiativeDialog_fn","onPreRollInitiative_fn","onPreRollAttackV2_fn","onPreRollDamageV2_fn","onPreRollFormulaV2_fn","onPreRollRechargeV2_fn","onPostRollConfiguration_fn","onRenderRollResolver_fn","_RollUtil","__privateMethod","SETTINGS","rollRequestsToggle","isEnabled","event","isActive","u","rollConfigDialog","_c","_d","_e","situationalBonus","situationalInput","formulaElement","currentFormula","config","dialog","message","roll","effect","classItem","formula","rolls","isActivity","hookName","playerOwner","bonus","skillConfig","msg","resolver","html","hasPixelsMethod","flags","customElement","__privateAdd","player","dataset","buttons","chatData","diceConfig","updatedDialog","updatedConfig","RollUtil","entry","setting","settingObj","settingName","selectedSetting","newValue","tooltipStr","Main","isDebugOn"],"mappings":"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"}