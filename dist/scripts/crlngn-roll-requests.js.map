{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Settings.mjs","../../src/constants/General.mjs","../../src/constants/Hooks.mjs","../../src/components/LogUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/DiceConfigUtil.mjs","../../src/components/SettingsUtil.mjs","../../src/components/ActivityUtil.mjs","../../src/components/GMRollConfigDialog.mjs","../../src/components/RollInterceptor.mjs","../../src/components/Helpers.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/SidebarUtil.mjs","../../src/components/HooksUtil.mjs","../../src/components/helpers/RollHandlers.mjs","../../src/components/helpers/RollRequestUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    skipDialogs: {\n      tag: \"skip-dialogs\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    rollInterceptionEnabled: {\n      tag: \"roll-interception-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    showOfflineNotifications: {\n      tag: \"show-offline-notifications\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cFlash Rolls 5e`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const SOCKET_CALLS = {\n  receiveDiceConfig: \"receiveDiceConfig\",\n  getDiceConfig: \"getDiceConfig\",\n  handleRollRequest: \"handleRollRequest\"\n};\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", requestType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", requestType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", requestType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", requestType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", requestType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", requestType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" }, // Recharge rolls\n\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" }, // D20 test\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" }, // Short rest\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" }, // Long rest\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\n/**\n * Roll types used throughout the module\n * @constant\n * @type {Object}\n */\nexport const ROLL_TYPES = {\n  ABILITY: \"ability\",\n  SAVE: \"save\",\n  SKILL: \"skill\",\n  TOOL: \"tool\",\n  CONCENTRATION: \"concentration\",\n  ATTACK: \"attack\",\n  DAMAGE: \"damage\",\n  INITIATIVE: \"initiative\",\n  DEATH_SAVE: \"deathsave\",\n  HIT_DIE: \"hitDie\",\n  ITEM_SAVE: \"itemSave\",\n  CUSTOM: \"custom\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: \"abilityCheck\", label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: \"savingThrow\", label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SKILL: { name: \"skill\", label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: \"tool\", label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: \"concentration\", label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: \"initiativeDialog\", label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: \"deathSave\", label: \"Death Save\", subList: null, actorPath: '' },\n  CUSTOM: { name: \"custom\", label: \"Custom Roll\", subList: null, actorPath: '' },\n  // HIT_DIE: { name: \"hitDie\", label: \"Hit Die\", subList: null, actorPath: '' }\n}\n\n/**\n * Module configuration object\n * @constant\n * @type {Object}\n */\nexport const MODULE = {\n  ID: MODULE_ID,\n  ROLL_REQUEST_OPTIONS: ROLL_REQUEST_OPTIONS\n}\n","/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  RENDER_SIDEBAR_TAB: \"renderSidebarTab\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheckV2\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrowV2\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheckV2\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrowV2\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_BUILD_ROLL_CONFIG: \"dnd5e.postBuildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debug-mode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      // If settings aren't available yet, check bypassSettings\n      if (bypassSettings || LogUtil.debugOn) {\n        console.log(...DEBUG_TAG, ref, ...data);\n      }\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n\n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n      } catch (e) {\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n    } else {\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    if (!SocketUtil.socket) {\n        return;\n    }\n\n    if(userId === game.user.id){\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n        const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n        return resp;\n    } catch (error) {\n        return null;\n    } finally {\n        // Always clean up, even if there was an error\n        SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { SocketUtil } from './SocketUtil.mjs';\n\n/**\n * Utility class for managing dice configurations across users\n */\nexport class DiceConfigUtil {\n  /**\n   * @type {Object} Current user's dice configuration\n   */\n  static diceConfig = {};\n  \n  /**\n   * @type {Object} All player dice configurations (GM only)\n   */\n  static playerDiceConfigs = {};\n  \n  /**\n   * Initialize the dice configuration for current user\n   */\n  static initialize() {\n    this.setDiceConfig();\n  }\n  \n  /**\n   * Set dice configuration from client settings\n   * @returns {Object} The dice configuration\n   */\n  static setDiceConfig() {\n    if (!game.user) return {};\n    \n    const clientSettings = game.settings.storage.get(\"client\");\n    this.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Get the current user's dice configuration\n   * @returns {Object} The dice configuration\n   */\n  static getDiceConfig() {\n    if (!game.user) return {};\n    \n    // Ensure we have the latest configuration\n    this.setDiceConfig();\n    \n    // If GM, send config to GMs via socket\n    if (game.user.isGM) {\n      this._sendDiceConfigToGMs();\n    }\n    \n    return this.diceConfig;\n  }\n  \n  /**\n   * Send dice configuration to all GMs\n   * @private\n   */\n  static _sendDiceConfigToGMs() {\n    SocketUtil.execForGMs('receiveDiceConfig', game.user.id, this.diceConfig);\n  }\n  \n  /**\n   * Receive and store dice configuration from a player\n   * @param {string} userId - The user ID\n   * @param {string} diceConfig - The serialized dice configuration\n   */\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId === game.user?.id) {\n      this.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n    }\n  }\n  \n  /**\n   * Get dice configuration for a specific user\n   * @param {string} userId - The user ID\n   * @returns {Object} The user's dice configuration\n   */\n  static getUserDiceConfig(userId) {\n    if (userId === game.user?.id) {\n      return this.diceConfig;\n    }\n    \n    return this.playerDiceConfigs[userId] || {};\n  }\n  \n  /**\n   * Request dice configuration from a specific user\n   * @param {string} userId - The user ID to request from\n   */\n  static requestDiceConfigFromUser(userId) {\n    SocketUtil.execForUser('getDiceConfig', userId);\n  }\n  \n  /**\n   * Request dice configuration from all active non-GM users\n   */\n  static requestDiceConfigFromAllPlayers() {\n    if (!game.user?.isGM) return;\n    \n    game.users.forEach(user => {\n      if (user.active && !user.isGM && user.id !== game.user.id) {\n        this.requestDiceConfigFromUser(user.id);\n      }\n    });\n  }\n  \n  /**\n   * Clear all stored player dice configurations\n   */\n  static clearPlayerConfigs() {\n    this.playerDiceConfigs = {};\n  }\n  \n  /**\n   * Check if a user has dice configuration stored\n   * @param {string} userId - The user ID\n   * @returns {boolean} True if configuration exists\n   */\n  static hasUserConfig(userId) {\n    if (userId === game.user?.id) {\n      return !!this.diceConfig;\n    }\n    \n    return !!this.playerDiceConfigs[userId];\n  }\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined || SettingsUtil.get(setting.tag)===null){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsEnabled(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsEnabled(newValue){\n    const requestsIcon = document.querySelector(\"#chat-controls .chat-control-icon.roll-requests-icon\");\n    if(!requestsIcon){ return; }\n    \n    if(newValue){\n      requestsIcon.classList.add(\"active\");\n    }else{\n      requestsIcon.classList.remove(\"active\");\n    }\n  }\n}\n","import { LogUtil } from './LogUtil.mjs';\nimport { ROLL_TYPES } from '../constants/General.mjs';\n\n/**\n * Utility class for handling D&D5e 4.x activities\n */\nexport class ActivityUtil {\n  \n  /**\n   * Find the appropriate activity for a given roll type on an item\n   * @param {Item5e} item - The item to search for activities\n   * @param {string} rollType - The type of roll (attack, damage, itemSave)\n   * @returns {Activity5e|null} - The found activity or null\n   */\n  static findActivityForRoll(item, rollType) {\n    if (!item?.system?.activities) return null;\n    \n    const activities = item.system.activities;\n    \n    switch (rollType) {\n      case ROLL_TYPES.ATTACK:\n        // For attack rolls, find attack activities\n        const attackActivities = activities.getByType(\"attack\");\n        return attackActivities?.[0] || null;\n        \n      case ROLL_TYPES.DAMAGE:\n        // For damage rolls, check attack activities first, then damage, then save\n        const damageAttackActivities = activities.getByType(\"attack\");\n        if (damageAttackActivities?.length > 0) return damageAttackActivities[0];\n        \n        const damageActivities = activities.getByType(\"damage\");\n        if (damageActivities?.length > 0) return damageActivities[0];\n        \n        const saveActivities = activities.getByType(\"save\");\n        if (saveActivities?.length > 0) return saveActivities[0];\n        \n        return null;\n        \n      case ROLL_TYPES.ITEM_SAVE:\n        // For save activities\n        const itemSaveActivities = activities.getByType(\"save\");\n        return itemSaveActivities?.[0] || null;\n        \n      default:\n        return null;\n    }\n  }\n  \n  /**\n   * Get all activities of a specific type from an item\n   * @param {Item5e} item - The item to search\n   * @param {string} activityType - The activity type (attack, damage, save, etc.)\n   * @returns {Activity5e[]} - Array of activities\n   */\n  static getActivitiesByType(item, activityType) {\n    if (!item?.system?.activities) return [];\n    return item.system.activities.getByType(activityType);\n  }\n  \n  /**\n   * Check if an item has activities suitable for a given roll type\n   * @param {Item5e} item - The item to check\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} - Whether the item has suitable activities\n   */\n  static hasActivityForRoll(item, rollType) {\n    return !!this.findActivityForRoll(item, rollType);\n  }\n  \n  /**\n   * Execute a roll using the appropriate activity method\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {string} itemId - The item ID\n   * @param {string} activityId - The activity ID (optional)\n   * @param {Object} config - Roll configuration\n   */\n  static async executeActivityRoll(actor, rollType, itemId, activityId, config) {\n    const item = actor.items.get(itemId);\n    if (!item) {\n      throw new Error(`Item ${itemId} not found on actor ${actor.name}`);\n    }\n    \n    let activity = null;\n    \n    // If activity ID provided, use it directly\n    if (activityId) {\n      activity = item.system.activities?.get(activityId);\n      if (!activity) {\n      }\n    }\n    \n    // If no activity found yet, search by roll type\n    if (!activity) {\n      activity = this.findActivityForRoll(item, rollType);\n    }\n    \n    // Execute the roll based on type\n    if (activity) {\n      switch (rollType) {\n        case ROLL_TYPES.ATTACK:\n          const dialogConfig = {\n            configure: true  // Always true for players receiving roll requests\n          };\n \n          if(MidiQOL) {\n            const workflow = await ActivityUtil.syntheticItemRoll(item, {\n              ...config\n            });\n            return;\n          }else{\n            return await activity.use(usageConfig, dialogConfig);\n          }\n        case ROLL_TYPES.DAMAGE:\n          if(MidiQOL) {\n            const workflow = MidiQOL?.Workflow?.getWorkflow(activity.uuid);\n            const damageRoll = await workflow.activity.rollDamage({\n              ...config,\n              workflow: workflow\n            });\n            return;\n          }else{\n            return await activity.rollDamage(config);\n            // return await activity.use(usageConfig, dialogConfig);\n          }\n          \n          \n        case ROLL_TYPES.ITEM_SAVE:\n          // For save activities, use the item's use() method to show the save card\n          return await item.use({ activity: activity.id }, { skipDialog: config.fastForward });\n          \n        default:\n          throw new Error(`Unknown roll type: ${rollType}`);\n      }\n    } else {\n      // Fallback to legacy methods if no activity found\n      \n      switch (rollType) {\n        case ROLL_TYPES.ATTACK:\n          if (item.rollAttack) {\n            return await item.rollAttack(config);\n          }\n          break;\n          \n        case ROLL_TYPES.DAMAGE:\n          if (item.rollDamage) {\n            return await item.rollDamage(config);\n          }\n          break;\n          \n        case ROLL_TYPES.ITEM_SAVE:\n          // Try to use the item directly\n          return await item.use({}, { skipDialog: config.fastForward });\n      }\n      \n      throw new Error(`No suitable method found for ${rollType} on item ${item.name}`);\n    }\n  }\n  \n  /**\n   * Get display information for an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {Object} - Display information\n   */\n  static getActivityDisplayInfo(activity) {\n    if (!activity) return null;\n    \n    return {\n      name: activity.name || activity.constructor.metadata.label,\n      type: activity.type,\n      icon: activity.constructor.metadata.icon,\n      canAttack: activity.type === 'attack',\n      canDamage: ['attack', 'damage', 'save'].includes(activity.type),\n      canSave: activity.type === 'save'\n    };\n  }\n  \n  /**\n   * Get damage formula string from an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {string|null} - Combined damage formula or null\n   */\n  static getDamageFormula(activity) {\n    if (!activity?.damage?.parts?.length) return null;\n    \n    // Extract all damage formulas and combine them\n    const formulas = activity.damage.parts.map(part => part.formula).filter(f => f);\n    return formulas.length > 0 ? formulas.join(' + ') : null;\n  }\n\n  static async syntheticItemRoll(item, config = {}) {\n    let defaultConfig = {\n        consumeUsage: false,\n        consumeSpellSlot: false\n    };\n    // let autoRollDamage = MidiQOL.configSettings().autoRollDamage;\n    // if (!['always', 'onHit'].includes(autoRollDamage)) autoRollDamage = 'none';\n    let defaultOptions = {\n      // targetUuids: targets.map(i => i.document.uuid),\n      configureDialog: true,\n      // ignoreUserTargets: true,\n      workflowOptions: {\n        autoRollAttack: false,\n        autoFastAttack: false,\n        autoRollDamage: 'none',\n        autoFastDamage: false\n      }\n    };\n\n    // options = genericUtils.mergeObject(defaultOptions, options);\n    config = {...defaultConfig, ...config};\n    return await MidiQOL.completeItemUse(item, config, defaultOptions);\n  }\n\n  static async replaceDamage(workflow, formula, {ignoreCrit = false, damageType} = {}) {\n    formula = String(formula);\n    if (workflow.isCritical && !ignoreCrit) formula = await rollUtils.getCriticalFormula(formula, workflow.item.getRollData());\n    let roll = await new CONFIG.Dice.DamageRoll(formula).evaluate();\n\n    await workflow.setDamageRolls([roll]);\n    \n    return roll;\n  }\n}","import { LogUtil } from \"./LogUtil.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * GM Roll Configuration Dialog\n * Extends the standard D&D5e roll configuration dialogs to add DC field and send request toggle\n */\nexport class GMRollConfigDialog extends dnd5e.applications.dice.D20RollConfigurationDialog {\n  constructor(config = {}, message = {}, options = {}) {\n    \n    // Ensure rollType is set in options\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    \n    // D20RollConfigurationDialog expects (config, message, options)\n    super(config, message, options);\n    \n    // Store GM-specific options\n    this.actors = options.actors || [];\n    // Use defaultSendRequest if provided, otherwise use sendRequest, otherwise default to true\n    this.sendRequest = options.defaultSendRequest ?? options.sendRequest ?? true;\n    this.showDC = options.showDC || false;\n    this.dcValue = options.dcValue || null;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for a roll.\n   * Extends parent to add DC and send request options\n   * @param {D20Roll} roll    The roll being configured.\n   * @param {object} [config] Configuration for the roll.\n   * @param {object} [dialog] Configuration for the dialog.\n   * @param {object} [message] Configuration for the chat message.\n   * @returns {object}\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context that is provided to all rendered parts.\n   * Extends parent to add DC field context\n   * @param {ApplicationRenderOptions} options  Render options provided to the render method.\n   * @returns {object}\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _onRender(context, options) {\n    super._onRender(context, options);\n    \n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas').parentNode;\n    // }\n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n    \n    // If we have initial situational bonus, trigger a rebuild to update the formula\n    if (this.config.rolls?.[0]?.data?.situational || this.config.situational) {\n      LogUtil.log('GMRollConfigDialog._onRender', ['Triggering rebuild for initial situational bonus']);\n      // Use a small delay to ensure the form is fully rendered\n      setTimeout(() => {\n        this.rebuild();\n      }, 100);\n    }\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons\n   * @private\n   */\n  _attachButtonListeners() {\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _onChangeForm(formConfig, event) {\n    super._onChangeForm(formConfig, event);\n    \n    // Capture the current state of our custom fields before re-render\n    const sendRequestCheckbox = this.element.querySelector('input[name=\"crlngn-send-request\"]');\n    if (sendRequestCheckbox) {\n      this.sendRequest = sendRequestCheckbox.checked;\n    }\n    \n    const dcInput = this.element.querySelector('input[name=\"dc\"]');\n    if (dcInput && dcInput.value) {\n      this.dcValue = parseInt(dcInput.value) || null;\n    }\n    \n  }\n  \n  /**\n   * Override _buildConfig to log what's happening\n   * @protected\n   */\n  _buildConfig(config, formData, index) {\n    // Extract ability from form data if present (for skill/tool dialogs)\n    const abilityFromForm = formData?.get(\"ability\");\n    const dcFromForm = formData?.get(\"dc\");\n    \n    \n    // If ability is in form data, update the config\n    if (abilityFromForm) {\n      config.ability = abilityFromForm;\n      // Also update this.config.ability to persist the selection\n      this.config.ability = abilityFromForm;\n    }\n    \n    const result = super._buildConfig(config, formData, index);\n    \n    // Apply DC if we have one\n    if (dcFromForm) {\n      const dcValue = parseInt(dcFromForm);\n      if (!isNaN(dcValue)) {\n        result.options = result.options || {};\n        result.options.target = dcValue;\n      }\n    } else if (this.dcValue !== undefined && this.dcValue !== null) {\n      result.options = result.options || {};\n      result.options.target = this.dcValue;\n    }\n    \n    \n    return result;\n  }\n  \n  /**\n   * Process form submission.\n   * @param {SubmitEvent} event             The originating form submission event.\n   * @param {HTMLFormElement} form          The form element that was submitted.\n   * @param {FormDataExtended} formData     Processed data for the submitted form.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _processSubmitData(event, form, formData) {\n    \n    await super._processSubmitData(event, form, formData);\n    \n    // Extract DC value if present\n    if (formData.has(\"dc\") && formData.get(\"dc\") !== \"\") {\n      const dcValue = parseInt(formData.get(\"dc\"));\n      if (!isNaN(dcValue)) {\n        // Store DC value to apply later\n        this.dcValue = dcValue;\n        \n        // Try to add DC to all rolls as target if they exist\n        if (this.config.rolls && this.config.rolls.length > 0) {\n          for (const roll of this.config.rolls) {\n            roll.options.target = dcValue;\n          }\n        }\n      }\n    }\n    \n    // Store send request preference\n    this.sendRequest = formData.get(\"crlngn-send-request\") !== \"false\";\n  }\n  \n  /**\n   * Finalize the rolls and handle the results.\n   * @param {string} action     The action button that was clicked\n   * @returns {D20Roll[]}\n   * @protected\n   * @override\n   */\n  _finalizeRolls(action) {\n    \n    // Let parent handle advantage/disadvantage mode\n    const finalizedRolls = super._finalizeRolls(action);\n    \n    // Apply DC if we have one stored\n    if (this.dcValue !== undefined && this.dcValue !== null) {\n      for (const roll of finalizedRolls) {\n        roll.options.target = this.dcValue;\n      }\n    }\n    \n    // Store our custom properties\n    this.config.sendRequest = this.sendRequest;\n    \n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the dialog\n   * @param {Actor[]} actors - The actors to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {object} options - Additional options\n   * @returns {Promise<object|null>} The configured roll data or null if cancelled\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    \n    // Determine if we should show DC field\n    const showDC = ['skill', 'save', 'savingThrow', 'ability', 'abilityCheck', 'concentration'].includes(rollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Determine the appropriate roll class based on roll type\n    let rollClass = CONFIG.Dice.D20Roll;\n    if (['damage', 'healing'].includes(rollType)) {\n      rollClass = CONFIG.Dice.DamageRoll || CONFIG.Dice.BasicRoll;\n    } else if (['formula', 'custom'].includes(rollType)) {\n      rollClass = CONFIG.Dice.BasicRoll;\n    }\n    \n    // Fallback to D20Roll if class not found\n    if (!rollClass) {\n      rollClass = CONFIG.Dice.D20Roll;\n    }\n    \n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add roll-specific data\n    switch (rollType) {\n      case 'skill':\n        rollConfig.skill = rollKey;\n        break;\n      case 'save':\n      case 'savingThrow':\n        rollConfig.ability = rollKey;\n        break;\n      case 'ability':\n      case 'abilityCheck':\n        rollConfig.ability = rollKey;\n        break;\n    }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => this._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        window: {\n          title: GMRollConfigDialog._getRollTitle(rollType, rollKey, actor),\n          subtitle: actors.map(a => a.name).join(\", \")\n        },\n        ...options\n      }\n    };\n    \n    // Create and render the dialog\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Build return configuration with only modified properties\n    const finalConfig = {\n      chatMessage: true,\n      isRollRequest: result.sendRequest,  // Only true when sending to players\n      skipDialog: options.skipDialogs || false,\n      sendRequest: result.sendRequest\n    };\n    \n    // Only add properties that were actually changed from defaults\n    if (advantage) finalConfig.advantage = true;\n    if (disadvantage) finalConfig.disadvantage = true;\n    \n    // Check if rollMode differs from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      finalConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add situational bonus if provided\n    // The situational bonus might be in different places depending on roll type\n    \n    // Check various possible locations for situational bonus\n    let situational = firstRoll?.options?.situational || \n                      firstRoll?.data?.situational || \n                      result.config?.data?.situational || \"\";\n    \n    // Also check if it's in the roll parts\n    if (!situational && firstRoll?.parts?.length > 0) {\n      // Look for parts that contain @situational\n      const situationalPart = firstRoll.parts.find(part => part.includes('@situational'));\n      if (situationalPart && firstRoll.data?.situational) {\n        situational = firstRoll.data.situational;\n      }\n    }\n    \n    if (situational) {\n      finalConfig.situational = situational;\n      finalConfig.parts = [\"@situational\"];  // Use @situational placeholder, not the actual value\n    }\n    \n    // Add DC if provided\n    if (firstRoll?.options?.target) {\n      finalConfig.target = firstRoll.options.target;\n    }\n    \n    // Add ability for skills/tools if it was selected and differs from default\n    if (result.config.ability && ['skill', 'tool'].includes(rollType)) {\n      // Check if this differs from the default ability for this skill/tool\n      const defaultAbility = actor.system.skills?.[rollKey]?.ability || CONFIG.DND5E.skills?.[rollKey]?.ability;\n      if (result.config.ability !== defaultAbility) {\n        finalConfig.ability = result.config.ability;\n      }\n    }\n    \n    // Add the roll title from the dialog window\n    finalConfig.rollTitle = dialogConfig.options.window.title;\n    \n    \n    return finalConfig;\n  }\n  \n  /**\n   * Check if actor is player owned\n   * @private\n   */\n  static _isPlayerOwned(actor) {\n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n  \n  /**\n   * Get a formatted title for the roll type\n   * @private\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {Actor} actor - The actor (used to get default ability for skills)\n   * @returns {string} The formatted title\n   */\n  static _getRollTitle(rollType, rollKey, actor) {\n    let title = \"\";\n    \n    switch (rollType) {\n      case 'skill':\n        const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n        // Get the default ability for this skill\n        const skill = actor?.system.skills?.[rollKey];\n        const defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n        const abilityLabel = CONFIG.DND5E.abilities[defaultAbility]?.label || defaultAbility;\n        // D&D5e format: \"Wisdom (Arcana) Check\"\n        title = game.i18n.format(\"DND5E.SkillPromptTitle\", { \n          skill: skillLabel,\n          ability: abilityLabel \n        });\n        break;\n      case 'save':\n      case 'savingThrow':\n        const saveAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.SavePromptTitle\", { ability: saveAbility });\n        break;\n      case 'ability':\n      case 'abilityCheck':\n        const checkAbility = CONFIG.DND5E.abilities[rollKey]?.label || rollKey;\n        title = game.i18n.format(\"DND5E.AbilityPromptTitle\", { ability: checkAbility });\n        break;\n      case 'concentration':\n        title = game.i18n.localize(\"DND5E.Concentration\");\n        break;\n      case 'tool':\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        let toolLabel = rollKey;\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          toolLabel = toolItem?.name || rollKey;\n        }\n        title = game.i18n.format(\"DND5E.ToolPromptTitle\", { tool: toolLabel });\n        break;\n      case 'deathsave':\n      case 'deathSave':\n        title = game.i18n.localize(\"DND5E.DeathSave\");\n        break;\n      case 'initiative':\n      case 'initiativeDialog':\n        title = game.i18n.localize(\"DND5E.Initiative\");\n        break;\n      default:\n        title = game.i18n.localize(\"DND5E.Roll\");\n    }\n    \n    return title;\n  }\n}\n\n/**\n * GM Skill/Tool Configuration Dialog\n * Extends SkillToolRollConfigurationDialog for ability selection\n */\nexport class GMSkillToolConfigDialog extends dnd5e.applications.dice.SkillToolRollConfigurationDialog {\n  constructor(config = {}, message = {}, options = {}) {\n    // Force ability selection\n    const skillConfig = foundry.utils.mergeObject(config, {\n      chooseAbility: true\n    });\n    \n    // Ensure rollType is set in options\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    \n    // SkillToolRollConfigurationDialog expects (config, message, options)\n    super(skillConfig, message, options);\n    \n    // Store GM-specific options\n    this.actors = options.actors || [];\n    // Use defaultSendRequest if provided, otherwise use sendRequest, otherwise default to true\n    this.sendRequest = options.defaultSendRequest ?? options.sendRequest ?? true;\n    this.showDC = options.showDC || false;\n    this.dcValue = options.dcValue || null;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _onRender(context, options) {\n    super._onRender(context, options);\n    \n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    // Try multiple selectors to find the configuration section\n    let configSection = this.element.querySelector('.rolls .formulas');\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('.formulas fieldset');\n    // }\n    // if (!configSection) {\n    //   configSection = this.element.querySelector('fieldset').parentNode;\n    // }\n    \n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      // Insert at the beginning of the config section\n      configSection.parentNode.insertBefore(wrapper, configSection);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n    \n    // If we have initial situational bonus, trigger a rebuild to update the formula\n    if (this.config.rolls?.[0]?.data?.situational || this.config.situational) {\n      // Use a small delay to ensure the form is fully rendered\n      setTimeout(() => {\n        this.rebuild();\n      }, 100);\n    }\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons\n   * @private\n   */\n  _attachButtonListeners() {\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n      });\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _onChangeForm(formConfig, event) {\n    super._onChangeForm(formConfig, event);\n    \n    // Capture the current state of our custom fields before re-render\n    const sendRequestCheckbox = this.element.querySelector('input[name=\"crlngn-send-request\"]');\n    if (sendRequestCheckbox) {\n      this.sendRequest = sendRequestCheckbox.checked;\n    }\n    \n    const dcInput = this.element.querySelector('input[name=\"dc\"]');\n    if (dcInput && dcInput.value) {\n      this.dcValue = parseInt(dcInput.value) || null;\n    }\n    \n    // If ability selection changed, update the config\n    if (event.target?.name === \"ability\" && event.target?.value) {\n      this.config.ability = event.target.value;\n    }\n    \n  }\n  \n  /**\n   * Override _buildConfig to log what's happening\n   * @protected\n   */\n  _buildConfig(config, formData, index) {\n    // Extract ability from form data if present\n    const abilityFromForm = formData?.get(\"ability\");\n    const dcFromForm = formData?.get(\"dc\");\n    \n    \n    // If ability is in form data, update the config\n    if (abilityFromForm) {\n      config.ability = abilityFromForm;\n      // Also update this.config.ability to persist the selection\n      this.config.ability = abilityFromForm;\n    }\n    \n    const result = super._buildConfig(config, formData, index);\n    \n    // Apply DC if we have one\n    if (dcFromForm) {\n      const dcValue = parseInt(dcFromForm);\n      if (!isNaN(dcValue)) {\n        result.options = result.options || {};\n        result.options.target = dcValue;\n      }\n    } else if (this.dcValue !== undefined && this.dcValue !== null) {\n      result.options = result.options || {};\n      result.options.target = this.dcValue;\n    }\n    \n    \n    return result;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _processSubmitData(event, form, formData) {\n    \n    await super._processSubmitData(event, form, formData);\n    \n    // Extract DC value if present\n    if (formData.has(\"dc\") && formData.get(\"dc\") !== \"\") {\n      const dcValue = parseInt(formData.get(\"dc\"));\n      if (!isNaN(dcValue)) {\n        // Store DC value to apply later\n        this.dcValue = dcValue;\n        \n        // Try to add DC to all rolls as target if they exist\n        if (this.config.rolls && this.config.rolls.length > 0) {\n          for (const roll of this.config.rolls) {\n            roll.options.target = dcValue;\n          }\n        }\n      }\n    }\n    \n    // Store send request preference\n    this.sendRequest = formData.get(\"crlngn-send-request\") !== \"false\";\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _finalizeRolls(action) {\n    \n    // Let parent handle advantage/disadvantage mode\n    const finalizedRolls = super._finalizeRolls(action);\n    \n    // Apply DC if we have one stored\n    if (this.dcValue !== undefined && this.dcValue !== null) {\n      for (const roll of finalizedRolls) {\n        roll.options.target = this.dcValue;\n      }\n    }\n    \n    // Store our custom properties\n    this.config.sendRequest = this.sendRequest;\n    \n    return finalizedRolls;\n  }\n  \n  /**\n   * Static method to create and display the dialog\n   * @param {Actor[]} actors - The actors to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {object} options - Additional options\n   * @returns {Promise<object|null>} The configured roll data or null if cancelled\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    // Determine if we should show DC field\n    const showDC = ['skill', 'tool'].includes(rollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Skills and tools always use D20Roll\n    const rollClass = CONFIG.Dice.D20Roll;\n    \n    // Get the default ability for the skill or tool\n    let defaultAbility = null;\n    if (rollType === 'skill') {\n      const skill = actor.system.skills[rollKey];\n      defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n    } else if (rollType === 'tool') {\n      // For tools, check if the actor has a specific ability set for this tool\n      const tool = actor.system.tools?.[rollKey];\n      defaultAbility = tool?.ability || CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey]?.ability || 'int';\n    }\n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      ability: defaultAbility,\n      chooseAbility: true,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add the appropriate property for skill or tool\n    if (rollType === 'skill') {\n      rollConfig.skill = rollKey;\n    } else if (rollType === 'tool') {\n      rollConfig.tool = rollKey;\n    }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => GMRollConfigDialog._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        window: {\n          title: GMRollConfigDialog._getRollTitle(rollType, rollKey, actor),\n          subtitle: actors.map(a => a.name).join(\", \")\n        },\n        ...options\n      }\n    };\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Extract advantage mode from the finalized rolls\n    const firstRoll = result.rolls[0];\n    let advantage = false;\n    let disadvantage = false;\n    \n    if (firstRoll?.options?.advantageMode !== undefined) {\n      advantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.ADVANTAGE;\n      disadvantage = firstRoll.options.advantageMode === CONFIG.Dice.D20Roll.ADV_MODE.DISADVANTAGE;\n    }\n    \n    // Build return configuration with only modified properties\n    const finalConfig = {\n      chatMessage: true,\n      isRollRequest: result.sendRequest,  // Only true when sending to players\n      skipDialog: options.skipDialogs || false,\n      sendRequest: result.sendRequest\n    };\n    \n    // Only add properties that were actually changed\n    if (advantage) finalConfig.advantage = true;\n    if (disadvantage) finalConfig.disadvantage = true;\n    \n    // Check if rollMode differs from default\n    const defaultRollMode = game.settings.get(\"core\", \"rollMode\");\n    if (result.message.rollMode && result.message.rollMode !== defaultRollMode) {\n      finalConfig.rollMode = result.message.rollMode;\n    }\n    \n    // Add situational bonus if provided\n    // Check both options.situational and data.situational\n    const situational = firstRoll?.options?.situational || firstRoll?.data?.situational || \"\";\n    if (situational) {\n      finalConfig.situational = situational;\n      finalConfig.parts = [situational];\n    }\n    \n    // Add DC if provided\n    if (firstRoll?.options?.target) {\n      finalConfig.target = firstRoll.options.target;\n    }\n    \n    // Add ability if it was selected (always include for skills/tools to ensure proper dialog display)\n    if (result.config.ability && ['skill', 'tool'].includes(rollType)) {\n      finalConfig.ability = result.config.ability;\n    }\n    \n    // Add the roll title from the dialog window\n    finalConfig.rollTitle = dialogConfig.options.window.title;\n    \n    \n    return finalConfig;\n  }\n}","import { HOOKS_DND5E } from '../constants/Hooks.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { MODULE_ID } from '../constants/General.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog } from './GMRollConfigDialog.mjs';\n\n/**\n * Handles intercepting D&D5e rolls on the GM side and redirecting them to players\n */\nexport class RollInterceptor {  \n  /**\n   * @type {Set<string>} - Set of registered hook IDs for cleanup\n   */\n  static registeredHooks = new Set();\n  \n  /**\n   * Initialize the roll interceptor\n   */\n  static initialize() {\n    \n    // Only initialize for GM users\n    if (!game.user.isGM) return;\n    \n    this.registerHooks();\n  }\n  \n  /**\n   * Register all necessary hooks for roll interception\n   */\n  static registerHooks() {\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, this._handlePreRoll.bind(this, 'ability'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, this._handlePreRoll.bind(this, 'save'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SKILL_V2, this._handlePreRoll.bind(this, 'skill'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_TOOL_V2, this._handlePreRoll.bind(this, 'tool'));\n    // Note: Concentration rolls are Constitution saving throws, handled by PRE_ROLL_SAVING_THROW\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._handlePreRoll.bind(this, 'attack'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._handlePreRoll.bind(this, 'damage'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE, this._handlePreRoll.bind(this, 'initiative'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, this._handlePreRoll.bind(this, 'deathsave'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._handlePreRoll.bind(this, 'hitDie'));\n    \n  }\n  \n  /**\n   * Helper to register a hook and track it for cleanup\n   * @param {string} hookName \n   * @param {Function} handler \n   */\n  static _registerHook(hookName, handler) {\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.add({ hookName, hookId });\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterHooks() {\n    for (const { hookName, hookId } of this.registeredHooks) {\n      Hooks.off(hookName, hookId);\n    }\n    this.registeredHooks.clear();\n  }\n  \n  /**\n   * Handle generic pre-roll v2 hook to intercept all rolls\n   * @param {Object} config - Roll configuration (first parameter)\n   * @param {Object} options - Additional options (second parameter)\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handleGenericPreRoll(config, options) {\n    // Only intercept on GM side\n    if (!game.user.isGM) return;\n    \n    \n    // Check to avoid loops\n    if (config?.isRollRequest) return;\n    \n    // or non activity rolls, config.subject is the actor\n    const actor = config?.subject;\n    \n    // Check if roll interception is enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    if (!rollInterceptionEnabled) return;\n\n    \n    if (!actor || actor.documentName !== 'Actor') {\n      return;\n    }\n    \n    // Check if the actor is owned by a player (not the GM)\n    const owner = this._getActorOwner(actor);\n    if (!owner || owner.id === game.user.id) {\n      return;\n    }\n    \n    // Check if the owner is online\n    if (!owner.active) {\n      return;\n    }\n    \n    // Determine roll type from the config\n    let rollType = 'unknown';\n    let rollKey = null;\n    \n    // Check config for more specific information\n    if (config?.ability) {\n      rollType = config.save ? 'save' : 'ability';\n      rollKey = config.ability;\n    } else if (config?.skill) {\n      rollType = 'skill';\n      rollKey = config.skill;\n    } else if (config?.tool) {\n      rollType = 'tool';\n      rollKey = config.tool;\n    }\n    \n    \n    \n    // Pass the roll key along with the config if we found it\n    if (rollKey && config) {\n      config = { ...config, ability: rollKey };\n    }\n    this._sendRollRequest(actor, owner, rollType, config);\n    \n    // Prevent the normal roll\n    return false;\n  }\n\n  /**\n   * Handle pre-roll hooks to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Object} config - Roll configuration object (or Actor for initiative)\n   * @param {Object} dialog - Dialog options\n   * @param {Object} message - Message options\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRoll(rollType, config, dialog, message) {\n    // Only intercept on GM side\n    if (!game.user.isGM) return;\n    \n    \n    // Special handling for initiative - first parameter is the actor\n    let actor;\n    if (rollType === 'initiative' && config instanceof Actor) {\n      actor = config;\n      // For initiative, check if second parameter (options) has isRollRequest flag\n      if (dialog?.isRollRequest) return;\n      // Also check third parameter for rollInitiative calls\n      if (message?.isRollRequest) return;\n    } else {\n      // Check all three parameters for isRollRequest flag to avoid loops\n      if (config?.isRollRequest || dialog?.isRollRequest || message?.isRollRequest) {\n        return;\n      }\n      \n      // Extract actor from the config\n      actor = config.subject?.actor || config.subject || config.actor;\n    }\n    \n    // Check if roll interception is enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    if (!rollInterceptionEnabled) return;\n    \n    if (!actor || actor.documentName !== 'Actor') {\n      return;\n    }\n    \n    // Check if the actor is owned by a player (not the GM)\n    const owner = this._getActorOwner(actor);\n    if (!owner || owner.id === game.user.id) {\n      // Actor is owned by GM or has no owner, allow normal roll\n      return;\n    }\n    \n    // Check if the owner is online\n    if (!owner.active) {\n      // Player is offline - allow GM to roll normally\n      return; // Don't intercept, let the roll proceed\n    }\n    \n    \n    // Show GM configuration dialog before sending to player\n    this._showGMConfigDialog(actor, owner, rollType, config, dialog, message);\n    \n    // Prevent the normal roll\n    return false;\n  }\n  \n  /**\n   * Show GM configuration dialog before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showGMConfigDialog(actor, owner, rollType, config, dialog, message) {\n    try {\n      \n      // Determine appropriate dialog class based on roll type\n      const DialogClass = ['skill', 'tool'].includes(rollType) ? GMSkillToolConfigDialog : GMRollConfigDialog;\n      \n      // Create base roll config based on roll type\n      let rollConfig = {\n        rolls: [{\n          parts: [],\n          data: {},\n          options: {}\n        }]\n      };\n      \n      // Add specific configuration based on roll type\n      switch (rollType) {\n        case 'ability':\n          rollConfig.ability = config.ability || config.subject?.ability;\n          break;\n        case 'save':\n          rollConfig.ability = config.ability || config.subject?.ability;\n          // Check if this is actually a concentration save\n          if (config.ability === 'con' && config.targetValue !== undefined) {\n            rollType = 'concentration'; // Update rollType for proper handling\n          }\n          break;\n        case 'skill':\n          rollConfig.skill = config.skill;\n          rollConfig.ability = config.ability;\n          break;\n        case 'tool':\n          rollConfig.tool = config.tool;\n          rollConfig.ability = config.ability;\n          break;\n        case 'concentration':\n          rollConfig.ability = 'con';\n          break;\n      }\n      \n      const options = {\n        actors: [actor],\n        rollType,\n        showDC: true,\n        defaultSendRequest: true,\n        skipDialogs: false\n      };\n      \n      // Create and render the GM dialog\n      const gmDialog = new DialogClass(rollConfig, {}, options);\n      const result = await gmDialog.render(true);\n      \n      \n      // If dialog was cancelled or sendRequest is false, allow normal roll\n      if (!result || !result.sendRequest) {\n        \n        // Re-create the roll with the original method\n        // We need to return true from _handlePreRoll to allow the original roll to proceed\n        // But we can't do that from here since we already returned false\n        // Instead, we'll execute the roll ourselves with the updated config\n        await this._executeLocalRoll(actor, rollType, config, result || {});\n        return;\n      }\n      \n      // Send the roll request to the player with the configured settings\n      const finalConfig = {\n        ...config,\n        ...result,\n        requestedBy: game.user.name\n      };\n      \n      this._sendRollRequest(actor, owner, rollType, finalConfig);\n      \n    } catch (error) {\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n  \n  /**\n   * Execute a roll locally on the GM side\n   * @param {Actor} actor \n   * @param {string} rollType \n   * @param {Object} originalConfig\n   * @param {Object} dialogResult\n   */\n  static async _executeLocalRoll(actor, rollType, originalConfig, dialogResult) {\n    // Build config for local roll\n    const config = {\n      ...originalConfig,\n      advantage: dialogResult.advantage || originalConfig.advantage,\n      disadvantage: dialogResult.disadvantage || originalConfig.disadvantage,\n      bonus: dialogResult.situational || originalConfig.bonus,\n      target: dialogResult.dc || originalConfig.target,\n      rollMode: dialogResult.rollMode || originalConfig.rollMode,\n      isRollRequest: false // Ensure we don't intercept this roll\n    };\n    \n    const dialogConfig = {\n      configure: false, // Skip dialog since we already configured\n      isRollRequest: false\n    };\n    \n    const messageConfig = {\n      rollMode: config.rollMode,\n      create: true,\n      isRollRequest: false\n    };\n    \n    try {\n      switch (rollType) {\n        case 'save':\n          await actor.rollSavingThrow(originalConfig.ability, config, dialogConfig, messageConfig);\n          break;\n        case 'ability':\n          await actor.rollAbilityCheck(originalConfig.ability, config, dialogConfig, messageConfig);\n          break;\n        case 'skill':\n          await actor.rollSkill(originalConfig.skill, config, dialogConfig, messageConfig);\n          break;\n        case 'tool':\n          await actor.rollToolCheck(originalConfig.tool, config, dialogConfig, messageConfig);\n          break;\n        case 'concentration':\n          await actor.rollConcentration(config, dialogConfig, messageConfig);\n          break;\n        // Add other roll types as needed\n      }\n    } catch (error) {\n    }\n  }\n  \n  /**\n   * Show configuration dialog to GM before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showConfigurationDialog(actor, owner, rollType, config, dialog, message) {\n    try {\n      \n      // Create a wrapper function that will be called instead of the normal roll\n      const rollWrapper = async (finalConfig) => {\n        // Send the configured roll request to the player\n        this._sendRollRequest(actor, owner, rollType, finalConfig);\n        // Return a fake roll to satisfy the dialog\n        return new Roll(\"1d20\").evaluate({async: false});\n      };\n      \n      // Replace the roll method in config with our wrapper\n      const modifiedConfig = {\n        ...config,\n        _rollMethod: rollWrapper,\n        configured: false // Force dialog to show\n      };\n      \n      // Create and render the dialog\n      const DialogClass = dialog.cls;\n      const rollDialog = new DialogClass(modifiedConfig, dialog.options);\n      \n      // Render the dialog\n      const result = await rollDialog.render(true);\n      \n    } catch (error) {\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n\n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  static _getActorOwner(actor) {\n    // Find the first active player who owns this actor\n    const ownership = actor.ownership || {};\n    \n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Send a roll request to the player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   */\n  static _sendRollRequest(actor, owner, rollType, config) {\n    const SETTINGS = getSettings();\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Extract the roll key based on roll type\n    let rollKey = null;\n    let activityId = null;\n    switch (rollType) {\n      case 'ability':\n      case 'save':\n        rollKey = config.ability;\n        break;\n      case 'skill':\n        rollKey = config.skill;\n        break;\n      case 'tool':\n        rollKey = config.tool;\n        break;\n      case 'attack':\n      case 'damage':\n        if (config.subject?.item) {\n          rollKey = config.subject.item.id;\n          // Find the appropriate activity\n          const activity = ActivityUtil.findActivityForRoll(config.subject.item, rollType);\n          if (activity) {\n            activityId = activity.id;\n          }\n        }\n        break;\n      case 'hitDie':\n        rollKey = config.denomination;\n        break;\n    }\n    \n    // Clean up config to remove non-serializable properties\n    const cleanConfig = {\n      advantage: config.advantage || false,\n      disadvantage: config.disadvantage || false,\n      situational: config.situational || 0,\n      parts: config.parts || [],\n      rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      elvenAccuracy: config.elvenAccuracy || false,\n      halflingLucky: config.halflingLucky || false,\n      reliableTalent: config.reliableTalent || false,\n      minimum: config.minimum,\n      maximize: config.maximize,\n      critical: config.critical,\n      fumble: config.fumble,\n      targetValue: config.targetValue,\n      fastForward: config.fastForward || false,\n      chatMessage: config.chatMessage !== false,\n      flavor: config.flavor,\n      title: config.title,\n      dialogOptions: config.dialogOptions,\n      messageData: config.messageData\n    };\n    \n    // Remove undefined values\n    Object.keys(cleanConfig).forEach(key => {\n      if (cleanConfig[key] === undefined) {\n        delete cleanConfig[key];\n      }\n    });\n    \n    // Build the request data according to Phase 1 spec\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      activityId,\n      config: cleanConfig,\n      skipDialog: skipDialogs,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    // Send request to player via socket\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    // Show notification to GM\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent', { \n      player: owner.name,\n      actor: actor.name \n    }));\n  }\n}","/**\n * Helper functions for the Flash Rolls 5e module\n */\n\nimport { ROLL_TYPES } from '../constants/General.mjs';\n\n/**\n * Get display name for roll type with optional details\n * @param {string} rollType - The type of roll\n * @param {string} rollKey - Optional key for the specific roll (ability, skill, etc.)\n * @returns {string} Formatted display string\n */\nexport function getRollTypeDisplay(rollType, rollKey) {\n  let display = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollType}`) || rollType;\n  \n  if (rollKey) {\n    switch (rollType) {\n      case ROLL_TYPES.SKILL:\n        display += ` (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.SAVE:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.ABILITY:\n        display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n        break;\n      case ROLL_TYPES.TOOL:\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          display += ` (${toolItem?.name || rollKey})`;\n        } else {\n          display += ` (${rollKey})`;\n        }\n        break;\n      case ROLL_TYPES.CUSTOM:\n        display = `${display}: ${rollKey}`;\n        break;\n    }\n  }\n  \n  return display;\n}\n\n/**\n * Show batched notifications to player\n * @param {Array} pendingNotifications - Array of notification objects\n * @param {Function} getRollTypeDisplayFn - Function to get roll type display (default: getRollTypeDisplay)\n */\nexport function showBatchedNotifications(pendingNotifications, getRollTypeDisplayFn = getRollTypeDisplay) {\n  if (pendingNotifications.length === 0) return;\n  \n  // Group by roll type\n  const notificationsByType = {};\n  for (const notif of pendingNotifications) {\n    const key = `${notif.rollType}_${notif.rollKey || ''}`;\n    if (!notificationsByType[key]) {\n      notificationsByType[key] = {\n        rollType: notif.rollType,\n        rollKey: notif.rollKey,\n        actors: [],\n        gm: notif.gm\n      };\n    }\n    notificationsByType[key].actors.push(notif.actor);\n  }\n  \n  const entries = Object.values(notificationsByType);\n  if (entries.length === 1 && entries[0].actors.length === 1) {\n    // Single roll request - use original format\n    const entry = entries[0];\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived', {\n      gm: entry.gm,\n      rollType: getRollTypeDisplayFn(entry.rollType, entry.rollKey)\n    }));\n  } else {\n    // Multiple requests - create consolidated message\n    const messages = [];\n    for (const entry of entries) {\n      const rollTypeDisplay = getRollTypeDisplayFn(entry.rollType, entry.rollKey);\n      const actorNames = entry.actors.join(\", \");\n      messages.push(`${rollTypeDisplay} (${actorNames})`);\n    }\n    \n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestsReceivedMultiple', {\n      gm: entries[0].gm,\n      requests: messages.join(\"; \")\n    }));\n  }\n}\n\n/**\n * Check if an actor is owned by a player (not GM)\n * @param {Actor} actor - The actor to check\n * @returns {User|null} The player owner, or null if not player-owned\n */\nexport function getPlayerOwner(actor) {\n  const ownership = actor.ownership || {};\n  \n  for (const [userId, level] of Object.entries(ownership)) {\n    if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n      const user = game.users.get(userId);\n      if (user && !user.isGM) {\n        return user;\n      }\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Get actor stats for display (ability scores and modifiers)\n * @param {Actor} actor - The actor to get stats for\n * @returns {Array} Array of stat objects with name, value, and modifier\n */\nexport function getActorStats(actor) {\n  if (!actor?.system?.abilities) return [];\n  \n  return Object.entries(actor.system.abilities).map(([key, ability]) => ({\n    name: key.toUpperCase(),\n    value: ability.value || 10,\n    modifier: ability.mod >= 0 ? `+${ability.mod}` : `${ability.mod}`\n  }));\n}\n\n/**\n * Apply target tokens to user\n * @param {Array<string>} tokenIds - Array of token IDs to target\n * @param {User} user - User to apply targets for (default: game.user)\n */\nexport function applyTargetTokens(tokenIds, user = game.user) {\n  if (!tokenIds?.length) return;\n  \n  const tokens = tokenIds\n    .map(id => canvas.tokens.get(id))\n    .filter(t => t);\n    \n  tokens.forEach(t => t.setTarget(true, { user }));\n}\n\n/**\n * Clear all target tokens for user\n * @param {User} user - User to clear targets for (default: game.user)\n */\nexport function clearTargetTokens(user = game.user) {\n  user.targets.forEach(t => t.setTarget(false, { user }));\n}\n\n/**\n * Format a notification message for multiple actors\n * @param {Array<string>} actorNames - Array of actor names\n * @param {string} action - The action being performed\n * @returns {string} Formatted message\n */\nexport function formatMultiActorNotification(actorNames, action) {\n  if (actorNames.length === 0) return \"\";\n  if (actorNames.length === 1) return `${actorNames[0]} ${action}`;\n  \n  const and = game.i18n.localize(\"CRLNGN_ROLLS.common.and\");\n  \n  if (actorNames.length === 2) return `${actorNames[0]} ${and} ${actorNames[1]} ${action}`;\n  \n  const lastActor = actorNames[actorNames.length - 1];\n  const otherActors = actorNames.slice(0, -1).join(\", \");\n  return `${otherActors}, ${and} ${lastActor} ${action}`;\n}\n\n/**\n * Delay execution for a specified time\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise} Promise that resolves after the delay\n */\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Check if the sidebar is expanded\n * @returns {boolean} True if sidebar is expanded\n */\nexport function isSidebarExpanded() {\n  return !ui?.sidebar?._collapsed;\n}\n\n/**\n * Update body class based on sidebar state\n * @param {boolean} isExpanded - Whether sidebar is expanded\n */\nexport function updateSidebarClass(isExpanded) {\n  const body = document.querySelector(\"body\");\n  if (isExpanded) {\n    body.classList.add(\"sidebar-expanded\");\n  } else {\n    body.classList.remove(\"sidebar-expanded\");\n  }\n}","import { MODULE } from '../constants/General.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog } from './GMRollConfigDialog.mjs';\nimport { SidebarUtil } from './SidebarUtil.mjs';\n\n/**\n * Roll Requests Menu Application\n * Extends Foundry's ApplicationV2 with Handlebars support to provide a menu interface for GMs to request rolls from players\n */\nexport default class RollRequestsMenu extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2) {\n  /**\n   * Singleton instance of the menu\n   * @type {RollRequestsMenu|null}\n   */\n  static #instance = null;\n\n  constructor(options = {}) {\n    super(options);\n    \n    // Track selected actors and current state\n    this.selectedActors = new Set();\n    this.currentTab = 'pc'; // 'pc' or 'npc'\n    this.selectedRequestType = null;\n    this.isLocked = false; // Track lock state\n    // Get options expanded state from user flag\n    this.optionsExpanded = game.user.getFlag(MODULE.ID, 'menuOptionsExpanded') ?? false;\n    \n    // Initialize with actors from selected tokens\n    this._initializeFromSelectedTokens();\n  }\n\n  static DEFAULT_OPTIONS = {\n    id: 'crlngn-requests-menu',\n    classes: ['roll-requests-menu'],\n    tag: 'div',\n    window: {\n      frame: false,\n      resizable: false,\n      minimizable: false\n    },\n    position: null\n  };\n\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/requests-menus.hbs`\n    }\n  };\n\n  /**\n   * Prepare data for the template\n   */\n  async _prepareContext(options) {\n    const context = await super._prepareContext(options);\n    \n    // Get all actors and separate by ownership\n    const actors = game.actors.contents;\n    const pcActors = [];\n    const npcActors = [];\n    \n    // Get current scene to check for NPC tokens\n    const currentScene = game.scenes.active;\n    \n    for (const actor of actors) {\n      // Skip non-character actors\n      if (actor.type !== 'character' && actor.type !== 'npc') continue;\n      \n      const actorData = {\n        id: actor.id,\n        uuid: actor.uuid,\n        name: actor.name,\n        img: actor.img,\n        selected: this.selectedActors.has(actor.id),\n        crlngnStats: this._getActorStats(actor)\n      };\n      \n      // Check if owned by a player (not GM)\n      const isPlayerOwned = Object.entries(actor.ownership)\n        .some(([userId, level]) => {\n          const user = game.users.get(userId);\n          return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        });\n      \n      if (isPlayerOwned) {\n        pcActors.push(actorData);\n      } else {\n        // For NPCs, only include if they have a token in the current scene\n        if (currentScene) {\n          const hasTokenInScene = currentScene.tokens.some(token => token.actorId === actor.id);\n          if (hasTokenInScene) {\n            npcActors.push(actorData);\n          }\n        }\n      }\n    }\n    \n    // Get current settings\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Check if all actors in current tab are selected\n    const currentActors = this.currentTab === 'pc' ? pcActors : npcActors;\n    const selectAllOn = currentActors.length > 0 && \n      currentActors.every(actor => this.selectedActors.has(actor.id));\n    \n    // Build request types array for template\n    const requestTypes = [];\n    if (this.selectedActors.size > 0) {\n      for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n        requestTypes.push({\n          id: key,\n          name: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${option.name}`) || option.label,\n          rollable: option.subList == null,\n          hasSubList: !!option.subList,\n          selected: this.selectedRequestType === key\n        });\n      }\n    }\n    \n    // Build roll types array based on selected request type\n    const rollTypes = [];\n    if (this.selectedRequestType && this.selectedActors.size > 0) {\n      const selectedOption = MODULE.ROLL_REQUEST_OPTIONS[this.selectedRequestType];\n      if (selectedOption && selectedOption.subList) {\n        // Get first selected actor as reference for available options\n        const firstActorId = Array.from(this.selectedActors)[0];\n        const actor = game.actors.get(firstActorId);\n        \n        // Special handling for tools - show all available tools\n        if (selectedOption.subList === 'tools') {\n          // Get all tools from CONFIG.DND5E.tools or enrichmentLookup\n          const allTools = CONFIG.DND5E.enrichmentLookup?.tools || CONFIG.DND5E.tools || {};\n          \n          for (const [key, toolData] of Object.entries(allTools)) {\n            let label = key;\n            \n            // Use enrichmentLookup to get tool UUID and then fetch the name\n            if (toolData?.id) {\n              // Get the tool name using Trait.getBaseItem\n              const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n              label = toolItem?.name || key;\n            }\n            // Fallback - format the key\n            else {\n              label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n            }\n            \n            rollTypes.push({\n              id: key,\n              name: label,\n              rollable: true\n            });\n          }\n          \n          // Sort tools alphabetically by name\n          rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n        }\n        // For other types, use actor data\n        else if (actor && selectedOption.actorPath) {\n          const rollData = foundry.utils.getProperty(actor, selectedOption.actorPath) || {};\n          \n          // Check if we should use CONFIG.DND5E for enrichment\n          const configData = CONFIG.DND5E[selectedOption.subList];\n          \n          for (const [key, data] of Object.entries(rollData)) {\n            let label = '';\n            \n            // For skills, use CONFIG.DND5E.skills for full names\n            if (selectedOption.subList === 'skills' && configData?.[key]) {\n              label = configData[key].label;\n            }\n            // For abilities (saving throws), use the label from data\n            else if (selectedOption.subList === 'abilities' && configData?.[key]) {\n              label = configData[key].label;\n            }\n            // Default fallback\n            else {\n              label = data.label || game.i18n.localize(data.name || key) || key;\n            }\n            \n            rollTypes.push({\n              id: key,\n              name: label,\n              rollable: true\n            });\n          }\n          \n          // Sort skills alphabetically by name\n          if (selectedOption.subList === 'skills') {\n            rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n          }\n        }\n      }\n    }\n    \n    return {\n      ...context,\n      actors: currentActors,\n      currentTab: this.currentTab,\n      isPCTab: this.currentTab === 'pc',\n      isNPCTab: this.currentTab === 'npc',\n      selectedTab: this.currentTab,\n      rollRequestsEnabled,\n      skipDialogs,\n      selectAllOn,\n      hasSelectedActors: this.selectedActors.size > 0,\n      requestTypes,\n      rollTypes,\n      showNames: true, // You can make this configurable later\n      actorsLocked: this.isLocked,\n      optionsExpanded: this.optionsExpanded\n    };\n  }\n\n  /**\n   * Get formatted stats for an actor\n   */\n  _getActorStats(actor) {\n    const system = actor.system;\n    const stats = [];\n    \n    // HP\n    if (system.attributes?.hp) {\n      stats.push({\n        abbrev: 'HP',\n        value: system.attributes.hp.value\n      });\n    }\n    \n    // AC\n    if (system.attributes?.ac) {\n      stats.push({\n        abbrev: 'AC',\n        value: system.attributes.ac.value\n      });\n    }\n    \n    // Spell DC\n    if (system.attributes?.spelldc) {\n      stats.push({\n        abbrev: 'DC',\n        value: system.attributes.spelldc\n      });\n    }\n    \n    // Passive Perception\n    if (system.skills?.prc?.passive) {\n      stats.push({\n        abbrev: 'PP',\n        value: system.skills.prc.passive\n      });\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Called after the application is rendered\n   */\n  _onRender(context, options) {\n    super._onRender(context, options);\n    this._attachListeners();\n    \n    // Apply expanded state if saved\n    if (this.optionsExpanded) {\n      const optionsToggle = this.element.querySelector('.options-toggle');\n      const optionsElement = this.element.querySelector('li.options');\n      if (optionsToggle) {\n        optionsToggle.classList.add('expanded');\n      }\n      if (optionsElement) {\n        optionsElement.classList.add('expanded');\n      }\n    }\n    \n    // Add click outside listener with capture to catch events early\n    setTimeout(() => {\n      document.addEventListener('click', this._onClickOutside, true);\n    }, 100);\n    \n    // Hook into token control changes\n    this._tokenControlHook = Hooks.on('controlToken', this._onTokenControlChange.bind(this));\n  }\n  \n  /**\n   * Handle token control changes\n   */\n  _onTokenControlChange(token, controlled) {\n    // Only process if menu is rendered\n    if (!this.rendered) return;\n    \n    // Ignore if we're programmatically updating tokens\n    if (this._ignoreTokenControl) return;\n    \n    // Debounce updates to avoid multiple renders when selecting multiple tokens\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n    }\n    \n    this._tokenUpdateTimeout = setTimeout(() => {\n      // Update selections from current controlled tokens\n      this._initializeFromSelectedTokens();\n      \n      // Re-render to update UI\n      this.render();\n      \n      this._tokenUpdateTimeout = null;\n    }, 100); // 100ms debounce\n  }\n  \n  /**\n   * Handle clicks outside the menu\n   */\n  _onClickOutside = (event) => {\n    // Don't close if locked\n    if (this.isLocked) return;\n    \n    // Check if click was outside the menu\n    const menu = this.element;\n    if (!menu) return;\n    \n    // Check if the click started inside the menu (for drag operations)\n    if (event.target.closest('.roll-requests-menu')) return;\n    \n    // Check if the click target is the menu itself or any of its children\n    if (menu.contains(event.target)) return;\n    \n    // Check if click was on the roll request icon that toggles the menu\n    if (event.target.closest('#crlngn-requests-icon')) return;\n    \n    // Check if this is a dialog or other overlay\n    if (event.target.closest('.dialog, .app, .notification')) return;\n    \n    // If we got here, the click was outside - close the menu\n    this.close();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachListeners() {\n    \n    const html = this.element;\n    \n    // Settings toggles\n    html.querySelector('#crlngn-requests-toggle')?.addEventListener('change', this._onToggleRollRequests.bind(this));\n    html.querySelector('#crlngn-skip-dialogs')?.addEventListener('change', this._onToggleSkipDialogs.bind(this));\n    html.querySelector('#crlngn-actors-all')?.addEventListener('change', this._onToggleSelectAll.bind(this));\n    \n    // Lock toggle\n    html.querySelector('#crlngn-actors-lock')?.addEventListener('click', this._onToggleLock.bind(this));\n    \n    // Options toggle\n    html.querySelector('.options-toggle')?.addEventListener('click', this._onToggleOptions.bind(this));\n    \n    // Tab switching\n    const tabs = html.querySelectorAll('.actor-tab');\n    tabs.forEach(tab => {\n      tab.addEventListener('click', this._onTabClick.bind(this));\n    });\n    \n    // Actor selection - handle clicks on actor rows or select buttons\n    html.querySelectorAll('.actor').forEach(actor => {\n      actor.addEventListener('click', this._onActorClick.bind(this));\n    });\n    \n    html.querySelectorAll('.actor-select').forEach(selectBtn => {\n      selectBtn.addEventListener('click', this._onActorSelectClick.bind(this));\n    });\n    \n    // Request type selection - use event delegation for dynamic content\n    const requestTypesContainer = html.querySelector('.request-types');\n    if (requestTypesContainer) {\n      requestTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRequestTypeClick(customEvent);\n        }\n      });\n    }\n    \n    // Roll type selection - use event delegation for dynamic content\n    const rollTypesContainer = html.querySelector('.roll-types');\n    if (rollTypesContainer) {\n      rollTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRollTypeClick(customEvent);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle roll requests toggle\n   */\n  async _onToggleRollRequests(event) {\n    const SETTINGS = getSettings();\n    const enabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, enabled);\n    \n    // Update the icon in the chat controls\n    SidebarUtil.updateRollRequestsIcon(enabled);\n    \n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleSkipDialogs(event) {\n    const SETTINGS = getSettings();\n    const skip = event.target.checked;\n    await SettingsUtil.set(SETTINGS.skipDialogs.tag, skip);\n  }\n\n  /**\n   * Handle select all toggle\n   */\n  _onToggleSelectAll(event) {\n    const selectAll = event.target.checked;\n    \n    // Temporarily disable token control hook to avoid feedback loop\n    this._ignoreTokenControl = true;\n    \n    // Get the current actors based on the active tab\n    const actors = this.currentTab === 'pc' ? \n      game.actors.contents.filter(a => this._isPlayerOwned(a)) :\n      game.actors.contents.filter(a => !this._isPlayerOwned(a) && this._hasTokenInScene(a));\n    \n    // Update selection for all visible actors\n    actors.forEach(actor => {\n      if (selectAll) {\n        this.selectedActors.add(actor.id);\n        this._updateCanvasTokenSelection(actor.id, true);\n      } else {\n        this.selectedActors.delete(actor.id);\n        this._updateCanvasTokenSelection(actor.id, false);\n      }\n    });\n    \n    // Re-enable token control hook after a short delay\n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 200);\n    \n    // Re-render to update UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n  }\n  \n  /**\n   * Handle lock toggle\n   */\n  _onToggleLock(event) {\n    event.preventDefault();\n    this.isLocked = !this.isLocked;\n    \n    // Update the icon - the currentTarget IS the icon element\n    const lockIcon = event.currentTarget;\n    lockIcon.classList.remove('fa-lock-keyhole', 'fa-lock-keyhole-open');\n    lockIcon.classList.add(this.isLocked ? 'fa-lock-keyhole' : 'fa-lock-keyhole-open');\n    \n  }\n  \n  /**\n   * Handle options toggle\n   */\n  async _onToggleOptions(event) {\n    event.preventDefault();\n    \n    // Toggle the state\n    this.optionsExpanded = !this.optionsExpanded;\n    \n    // Save state to user flag\n    await game.user.setFlag(MODULE.ID, 'menuOptionsExpanded', this.optionsExpanded);\n    \n    // Toggle expanded class on the clicked element\n    const optionsToggle = event.currentTarget || event.target.closest('.options-toggle');\n    if (optionsToggle) {\n      optionsToggle.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n    // Find the li.options sibling and toggle expanded class on it\n    const optionsElement = this.element.querySelector('li.options');\n    if (optionsElement) {\n      optionsElement.classList.toggle('expanded', this.optionsExpanded);\n    }\n    \n  }\n  \n  /**\n   * Initialize selected actors from currently selected tokens\n   */\n  _initializeFromSelectedTokens() {\n    // Get controlled tokens\n    const controlledTokens = canvas.tokens?.controlled || [];\n    \n    // Clear existing selections first\n    this.selectedActors.clear();\n    \n    // Add actors from controlled tokens\n    for (const token of controlledTokens) {\n      if (token.actor) {\n        this.selectedActors.add(token.actor.id);\n        \n        // Set the current tab based on first selected token's actor type\n        if (this.selectedActors.size === 1) {\n          // Check if this is a PC or NPC\n          const isPC = this._isPlayerOwned(token.actor);\n          this.currentTab = isPC ? 'pc' : 'npc';\n        }\n      }\n    }\n    \n  }\n  \n  /**\n   * Check if actor is player owned\n   */\n  _isPlayerOwned(actor) {\n    // Skip non-character actors\n    if (actor.type !== 'character' && actor.type !== 'npc') return false;\n    \n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n  \n  /**\n   * Check if actor has token in current scene\n   */\n  _hasTokenInScene(actor) {\n    // Skip non-character actors\n    if (actor.type !== 'character' && actor.type !== 'npc') return false;\n    \n    const currentScene = game.scenes.active;\n    return currentScene && currentScene.tokens.some(token => token.actorId === actor.id);\n  }\n\n  /**\n   * Handle tab click\n   */\n  async _onTabClick(event) {\n    const tab = event.currentTarget.dataset.tab;\n    if (tab === this.currentTab) return;\n    \n    // Clear selected actors when switching tabs\n    this.selectedActors.clear();\n    \n    // Also clear any canvas token selections\n    canvas.tokens?.releaseAll();\n    \n    // Reset selected request type since it may not apply to new tab\n    this.selectedRequestType = null;\n    \n    this.currentTab = tab;\n    await this.render();\n  }\n\n  /**\n   * Handle click on actor row\n   */\n  _onActorClick(event) {\n    // Ignore if clicking on the select button itself\n    if (event.target.closest('.actor-select')) return;\n    \n    const actorElement = event.currentTarget;\n    const actorId = actorElement.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Handle click on actor select button\n   */\n  _onActorSelectClick(event) {\n    event.stopPropagation(); // Prevent triggering the actor row click\n    const actorId = event.currentTarget.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Toggle actor selection state\n   */\n  _toggleActorSelection(actorId) {\n    // Temporarily disable token control hook to avoid feedback loop\n    this._ignoreTokenControl = true;\n    \n    if (this.selectedActors.has(actorId)) {\n      this.selectedActors.delete(actorId);\n      // Deselect token on canvas\n      this._updateCanvasTokenSelection(actorId, false);\n    } else {\n      this.selectedActors.add(actorId);\n      // Select token on canvas\n      this._updateCanvasTokenSelection(actorId, true);\n    }\n    \n    // Re-enable token control hook after a short delay\n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 100);\n    \n    // Re-render to update the UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    this._updateSelectAllState();\n  }\n  \n  /**\n   * Update token selection on canvas based on actor selection\n   */\n  _updateCanvasTokenSelection(actorId, selected) {\n    const scene = game.scenes.active;\n    if (!scene) return;\n    \n    // Find all tokens for this actor in the current scene\n    const tokens = canvas.tokens.placeables.filter(t => t.actor?.id === actorId);\n    \n    for (const token of tokens) {\n      if (selected) {\n        // Add to selection without clearing others\n        token.control({ releaseOthers: false });\n      } else {\n        // Release this token\n        token.release();\n      }\n    }\n  }\n\n  /**\n   * Update request types visibility based on actor selection\n   */\n  _updateRequestTypesVisibility() {\n    // Since we're now controlling visibility through template data,\n    // we need to re-render when actor selection changes\n    this.render();\n  }\n\n  /**\n   * Update select all checkbox state\n   */\n  _updateSelectAllState() {\n    const selectAllCheckbox = this.element.querySelector('#crlngn-actors-all');\n    const currentActors = this.currentTab === 'pc' ? 'pc' : 'npc';\n    const checkboxes = this.element.querySelectorAll(`.${currentActors}-actors .actor-item input[type=\"checkbox\"]`);\n    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;\n    \n    selectAllCheckbox.checked = checkedCount > 0 && checkedCount === checkboxes.length;\n    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n  }\n\n  /**\n   * Handle request type click\n   */\n  async _onRequestTypeClick(event) {\n    const requestItem = event.currentTarget;\n    const requestType = requestItem.dataset.id;\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    \n    if (!rollOption) {\n      LogUtil.error('Unknown request type:', requestType);\n      return;\n    }\n    \n    // Toggle selection - if clicking the same type, deselect it\n    if (this.selectedRequestType === requestType) {\n      this.selectedRequestType = null;\n    } else {\n      this.selectedRequestType = requestType;\n    }\n    \n    // If this type has a sublist, re-render to show/hide roll types\n    if (rollOption.subList) {\n      await this.render();\n    } else if (this.selectedRequestType) {\n      // Direct roll without sublist (only if we just selected it)\n      this._triggerRoll(requestType, null);\n    }\n  }\n\n  // Note: _populateRollTypes method removed as we now handle this in _prepareContext\n\n  /**\n   * Handle roll type click\n   */\n  _onRollTypeClick(event) {\n    const rollKey = event.currentTarget.dataset.id;\n    this._triggerRoll(this.selectedRequestType, rollKey);\n  }\n\n  /**\n   * Trigger the roll for selected actors\n   * @param {string} requestType - The type of roll request (e.g., 'skill', 'ability')\n   * @param {string} rollKey - The specific roll key (e.g., 'acr' for Acrobatics)\n   */\n  async _triggerRoll(requestType, rollKey) {\n    const SETTINGS = getSettings();\n    const selectedActorIds = Array.from(this.selectedActors);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Safety check: Filter selected actors to only include those from current tab\n    const validActorIds = selectedActorIds.filter(actorId => {\n      const actor = game.actors.get(actorId);\n      if (!actor) return false;\n      \n      const isPC = this._isPlayerOwned(actor);\n      const isNPC = !isPC && this._hasTokenInScene(actor);\n      \n      // Only include actors that match the current tab\n      return (this.currentTab === 'pc' && isPC) || (this.currentTab === 'npc' && isNPC);\n    });\n    \n    // Get the roll option to get the actual method name\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    const rollMethodName = rollOption?.name || requestType;\n    \n    // Handle custom rolls with a dialog\n    if (rollMethodName === 'custom') {\n      const formula = await this._showCustomRollDialog();\n      if (!formula) return; // User cancelled\n      \n      // Store the custom formula as the rollKey\n      rollKey = formula;\n    }\n    \n    // Check for initiative rolls without active combat\n    if (rollMethodName === 'initiativeDialog' && !game.combat) {\n      const createCombat = await Dialog.confirm({\n        title: game.i18n.localize(\"COMBAT.Create\"),\n        content: \"<p>\" + game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.noCombatActive\") + \"</p>\",\n        yes: () => true,\n        no: () => false,\n        defaultYes: true,\n        options: {\n          classes: [\"crlngn-rolls-dialog\"]\n        }\n      });\n      \n      if (createCombat) {\n        // Create a new combat encounter\n        const combat = await game.combats.documentClass.create({scene: game.scenes.active.id});\n        await combat.activate();\n        ui.notifications.info(game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.combatCreated\"));\n      } else {\n        // User chose not to create combat, abort the roll\n        return;\n      }\n    }\n    \n    // Filter actors for initiative rolls based on existing initiative\n    let actorIdsToRoll = validActorIds;\n    if (rollMethodName === 'initiativeDialog' && game.combat) {\n      const actors = validActorIds\n        .map(id => game.actors.get(id))\n        .filter(actor => actor);\n      \n      // Check which actors already have initiative\n      const actorsWithInitiative = [];\n      const actorIdsWithInitiative = new Set();\n      for (const actor of actors) {\n        const combatant = game.combat.getCombatantByActor(actor.id);\n        if (combatant && combatant.initiative !== null) {\n          actorsWithInitiative.push(actor.name);\n          actorIdsWithInitiative.add(actor.id);\n        }\n      }\n      \n      // If any actors already have initiative, confirm re-roll\n      if (actorsWithInitiative.length > 0) {\n        const reroll = await Dialog.confirm({\n          title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiativeTitle\"),\n          content: \"<p>\" + game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiative\", {\n            actors: actorsWithInitiative.join(\", \")\n          }) + \"</p>\",\n          yes: () => true,\n          no: () => false,\n          defaultYes: false,\n          options: {\n            classes: [\"crlngn-rolls-dialog\"]\n          }\n        });\n        \n        if (!reroll) {\n          // User chose not to re-roll, filter out actors with initiative\n          actorIdsToRoll = validActorIds.filter(id => !actorIdsWithInitiative.has(id));\n          \n          // If no actors left to roll, abort\n          if (actorIdsToRoll.length === 0) {\n            ui.notifications.info(game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.allActorsHaveInitiative\"));\n            return;\n          }\n        } else {\n          // User chose to re-roll, clear initiative for actors that have it\n          for (const actorId of actorIdsWithInitiative) {\n            const combatant = game.combat.getCombatantByActor(actorId);\n            if (combatant) {\n              await combatant.update({ initiative: null });\n            }\n          }\n        }\n      }\n    }\n    \n    // Get the actual actors\n    let actors = actorIdsToRoll\n      .map(id => game.actors.get(id))\n      .filter(actor => actor);\n    \n    // Filter actors for death saves\n    if (rollMethodName === 'deathSave') {\n      const actorsNeedingDeathSaves = [];\n      const actorsSkippingDeathSaves = [];\n      \n      for (const actor of actors) {\n        const hp = actor.system.attributes.hp?.value || 0;\n        const deathSaves = actor.system.attributes.death || {};\n        const successes = deathSaves.success || 0;\n        const failures = deathSaves.failure || 0;\n        \n        // Check if actor needs a death save\n        if (hp <= 0 && successes < 3 && failures < 3) {\n          actorsNeedingDeathSaves.push(actor);\n        } else {\n          actorsSkippingDeathSaves.push(actor.name);\n        }\n      }\n      \n      // Notify about actors that don't need death saves\n      if (actorsSkippingDeathSaves.length > 0) {\n        ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.actorsSkippingDeathSave\", {\n          actors: actorsSkippingDeathSaves.join(\", \")\n        }));\n      }\n      \n      // Update actors list to only include those needing death saves\n      actors = actorsNeedingDeathSaves;\n    }\n    \n    if (!actors.length) {\n      ui.notifications.warn(\"No valid actors selected\");\n      return;\n    }\n    \n    // Separate PC and NPC actors\n    const pcActors = [];\n    const npcActors = [];\n    \n    for (const actor of actors) {\n      const owner = this._getActorOwner(actor);\n      if (owner) {\n        pcActors.push({ actor, owner });\n      } else {\n        npcActors.push(actor);\n      }\n    }\n    \n    // Get rollRequestsEnabled setting to determine default sendRequest value\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Show GM configuration dialog (unless skip dialogs is enabled)\n    let config = null;\n    if (!skipDialogs) {\n      // Use appropriate dialog based on roll type\n      const DialogClass = ['skill', 'tool'].includes(rollMethodName) ? GMSkillToolConfigDialog : GMRollConfigDialog;\n      config = await DialogClass.getConfiguration(actors, rollMethodName, rollKey, { \n        skipDialogs,\n        defaultSendRequest: rollRequestsEnabled // Pass the setting as default \n      });\n      \n      \n      // User cancelled the dialog\n      if (!config) {\n        return;\n      }\n    } else {\n      // Use default configuration when skipping dialogs\n      config = {\n        advantage: false,\n        disadvantage: false,\n        situational: \"\",\n        parts: [],\n        rollMode: game.settings.get(\"core\", \"rollMode\"),\n        chatMessage: true,\n        isRollRequest: false,  // Don't intercept when rolling locally\n        skipDialog: true,  // Pass skipDialog as true when skipping\n        sendRequest: rollRequestsEnabled && pcActors.length > 0  // Only send if enabled AND there are PC actors\n      };\n      \n      // Death saves always have DC 10\n      if (rollMethodName === 'deathSave') {\n        config.target = 10;\n      }\n    }\n    \n    // Handle PC actors - send roll requests (if sendRequest is true)\n    const successfulRequests = []; // Track successful requests for consolidated notification\n    const offlinePlayerActors = []; // Track offline player actors separately\n    \n    if (config.sendRequest) {\n      for (const { actor, owner } of pcActors) {\n        if (!owner.active) {\n          if(SettingsUtil.get(SETTINGS.showOfflineNotifications.tag)) {\n            ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.playerOffline\", { \n              player: owner.name \n            }));\n          }\n\n          // Track offline player actors separately to ensure dialog is skipped\n          offlinePlayerActors.push(actor);\n          continue;\n        }\n        \n        this._sendRollRequestToPlayer(actor, owner, rollMethodName, rollKey, config, true); // true = suppress individual notification\n        successfulRequests.push({ actor, owner });\n        \n        // Add a delay between roll requests to prevent lag\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n      // Send consolidated notification for all successful requests\n      if (successfulRequests.length > 0) {\n        this._sendConsolidatedNotification(successfulRequests, rollMethodName, rollKey);\n      }\n    } else {\n      // If not sending requests, add PC actors to NPC list to roll locally\n      npcActors.push(...pcActors.map(({ actor }) => actor));\n    }\n    \n    // Handle offline player actors - roll locally without dialog\n    if (offlinePlayerActors.length > 0) {\n      // Force skip dialog for offline players\n      const offlineConfig = { ...config, skipDialog: true };\n      await this._handleNPCRolls(offlinePlayerActors, rollMethodName, rollKey, offlineConfig);\n    }\n    \n    // Handle NPC actors - roll locally\n    if (npcActors.length > 0) {\n      // Ensure skipDialog is passed correctly for local NPC rolls\n      const npcConfig = { ...config };\n      // Always skip individual dialogs for local rolls when we've already configured them\n      // Either through the GM dialog (!skipDialogs) or when skipDialogs is true\n      npcConfig.fastForward = true;  // Use fastForward for NPC rolls\n      npcConfig.skipDialog = true;\n      await this._handleNPCRolls(npcActors, rollMethodName, rollKey, npcConfig);\n    }\n    \n    // Close the menu after all rolls are complete\n    // Add a small delay to ensure async operations complete\n    setTimeout(() => this.close(), 500);\n  }\n  \n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  _getActorOwner(actor) {\n    const ownership = actor.ownership || {};\n    \n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Send a roll request to a player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config - Roll configuration from dialog\n   * @param {boolean} suppressNotification - If true, don't show individual notification\n   */\n  _sendRollRequestToPlayer(actor, owner, requestType, rollKey, config, suppressNotification = false) {\n    const SETTINGS = getSettings();\n    \n    // Map request type to roll type for compatibility with RollInterceptor format\n    const rollTypeMap = {\n      'abilityCheck': 'ability',\n      'savingThrow': 'save',\n      'skill': 'skill',\n      'tool': 'tool',\n      'concentration': 'concentration',\n      'initiativeDialog': 'initiative',\n      'deathSave': 'deathsave',\n      'custom': 'custom',\n    };\n    \n    const rollType = rollTypeMap[requestType] || requestType;\n    \n    // Build the request data according to Phase 1 spec\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      activityId: null,  // Menu-initiated rolls don't use activities\n      config: {\n        rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        advantage: config.advantage || false,\n        disadvantage: config.disadvantage || false,\n        situational: config.situational || \"\",\n        parts: config.parts || [],\n        chatMessage: config.chatMessage !== false,\n        target: config.target,  // DC value if provided\n        ability: config.ability,  // Ability override for skills/tools\n        attackMode: config.attackMode,  // Attack mode for attack rolls\n        rollTitle: config.rollTitle  // Title from the dialog window\n      },\n      skipDialog: config.skipDialog || false,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    \n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    if (!suppressNotification) {\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent\", { \n        player: owner.name,\n        actor: actor.name \n      }));\n    }\n  }\n  \n  /**\n   * Send a consolidated notification for multiple roll requests\n   * @param {Array} successfulRequests - Array of {actor, owner} objects\n   * @param {string} rollMethodName - The type of roll being requested\n   * @param {string} rollKey - The specific roll key (if applicable)\n   */\n  _sendConsolidatedNotification(successfulRequests, rollMethodName, rollKey) {\n    // Group requests by player\n    const requestsByPlayer = {};\n    for (const { actor, owner } of successfulRequests) {\n      if (!requestsByPlayer[owner.id]) {\n        requestsByPlayer[owner.id] = {\n          player: owner,\n          actors: []\n        };\n      }\n      requestsByPlayer[owner.id].actors.push(actor);\n    }\n    \n    // Get roll type name for display\n    // Find the option key that matches this rollMethodName\n    let rollOptionKey = null;\n    for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n      if (option.name === rollMethodName) {\n        rollOptionKey = key;\n        break;\n      }\n    }\n    \n    const rollTypeKey = rollMethodName;\n    let rollTypeName = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollTypeKey}`) || rollTypeKey;\n    \n    // Add specific roll details if applicable\n    if (rollKey) {\n      if (rollTypeKey === 'skill') {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n      } else if (rollTypeKey === 'savingThrow') {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (rollTypeKey === 'abilityCheck') {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (rollTypeKey === 'tool') {\n        // Try to get tool name from enrichmentLookup\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          rollTypeName = `${rollTypeName} (${toolItem?.name || rollKey})`;\n        } else {\n          rollTypeName = `${rollTypeName} (${rollKey})`;\n        }\n      } else if (rollTypeKey === 'custom') {\n        rollTypeName = `${rollTypeName}: ${rollKey}`;\n      }\n    }\n    \n    if (Object.keys(requestsByPlayer).length === 1) {\n      const playerData = Object.values(requestsByPlayer)[0];\n      const actorNames = playerData.actors.map(a => a.name).join(\", \");\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentSingle\", { \n        rollType: rollTypeName,\n        actors: actorNames,\n        player: playerData.player.name\n      }));\n    } else {\n      const playerSummaries = Object.values(requestsByPlayer).map(data => {\n        const actorNames = data.actors.map(a => a.name).join(\", \");\n        return `${data.player.name} (${actorNames})`;\n      });\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentMultiple\", { \n        rollType: rollTypeName,\n        count: successfulRequests.length,\n        players: playerSummaries.join(\"; \")\n      }));\n    }\n  }\n  \n  /**\n   * Handle rolling for NPC actors locally\n   * @param {Actor[]} actors \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} dialogConfig - Configuration from GM dialog\n   */\n  async _handleNPCRolls(actors, requestType, rollKey, dialogConfig) {\n    // Build config for local rolls\n    const config = {\n      advantage: dialogConfig.advantage || false,\n      disadvantage: dialogConfig.disadvantage || false,\n      situational: dialogConfig.situational || \"\",\n      parts: dialogConfig.parts || [],\n      rollMode: dialogConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      fastForward: dialogConfig.skipDialog || false,\n      chatMessage: dialogConfig.chatMessage !== false,\n      isRollRequest: dialogConfig.isRollRequest || false,  // Use the value from dialog config\n      target: dialogConfig.target,  // DC value if provided\n      ability: dialogConfig.ability,  // Ability override for skills/tools\n      attackMode: dialogConfig.attackMode  // Attack mode for attack rolls\n    };\n    \n    // Roll for each NPC with a small delay between rolls\n    for (const actor of actors) {\n      await this._executeActorRoll(actor, requestType, rollKey, config);\n      // Delay between rolls to prevent lag and improve chat readability\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n  \n  /**\n   * Execute a roll for a specific actor\n   * @param {Actor} actor \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config \n   */\n  async _executeActorRoll(actor, requestType, rollKey, config) {\n    try {\n      \n      // Normalize the requestType to ensure case matching\n      const normalizedType = requestType.toLowerCase();\n      \n      switch (normalizedType) {\n        case 'abilitycheck':\n          // Pass all configuration in the first parameter, matching player side\n          const abilityRollConfig = {\n            ability: rollKey,\n            advantage: config.advantage,\n            disadvantage: config.disadvantage,\n            target: config.target,  // Include target for DC\n            isRollRequest: config.isRollRequest  // Prevent re-interception\n          };\n          const abilityDialogConfig = {\n            configure: !config.fastForward\n          };\n          const abilityMessageConfig = {\n            rollMode: config.rollMode,\n            create: config.chatMessage !== false\n          };\n          // Add situational bonus if present\n          // For ability checks, D&D5e expects rolls configuration\n          if (config.situational) {\n            abilityRollConfig.rolls = [{\n              parts: [],  // Don't add @situational to parts - let the dialog handle it\n              data: { situational: config.situational },\n              options: {},\n              situational: config.situational // Pre-populate the field\n            }];\n          }\n          \n          await actor.rollAbilityCheck(abilityRollConfig, abilityDialogConfig, abilityMessageConfig);\n          break;\n        case 'savingthrow':\n          // Pass all configuration in the first parameter, matching player side\n          const saveRollConfig = {\n            ability: rollKey,\n            advantage: config.advantage,\n            disadvantage: config.disadvantage,\n            target: config.target,  // Include target for DC\n            isRollRequest: config.isRollRequest  // Prevent re-interception\n          };\n          const saveDialogConfig = {\n            configure: !config.fastForward\n          };\n          const saveMessageConfig = {\n            rollMode: config.rollMode,\n            create: config.chatMessage !== false\n          };\n          // Add situational bonus if present\n          // For saving throws, D&D5e expects rolls configuration\n          if (config.situational) {\n            saveRollConfig.rolls = [{\n              parts: [],  // Don't add @situational to parts - let the dialog handle it\n              data: { situational: config.situational },\n              options: {},\n              situational: config.situational // Pre-populate the field\n            }];\n          }\n          \n          await actor.rollSavingThrow(saveRollConfig, saveDialogConfig, saveMessageConfig);\n          break;\n        case 'skill':\n          // Skills use a different signature: rollSkill(config, dialogConfig, messageConfig)\n          const skillRollConfig = {\n            skill: rollKey,\n            advantage: config.advantage,\n            disadvantage: config.disadvantage,\n            ability: config.ability,\n            chooseAbility: !config.ability // Don't allow choice if ability is pre-selected\n          };\n          const skillDialogConfig = {\n            configure: !config.fastForward // Show dialog unless fast forward is true\n          };\n          const skillMessageConfig = {\n            rollMode: config.rollMode,\n            create: config.chatMessage !== false,\n            data: {}\n          };\n          \n          // Use the roll title if provided, otherwise build custom flavor if ability was overridden\n          if (config.rollTitle) {\n            skillMessageConfig.data.flavor = config.rollTitle;\n          } else if (config.ability) {\n            const skillLabel = CONFIG.DND5E.skills[rollKey]?.label || rollKey;\n            const abilityLabel = CONFIG.DND5E.abilities[config.ability]?.label || config.ability;\n            skillMessageConfig.data.flavor = game.i18n.format(\"DND5E.SkillPromptTitle\", {\n              skill: skillLabel,\n              ability: abilityLabel\n            });\n          }\n          // Add situational bonus and target if present\n          if (config.situational) skillRollConfig.bonus = config.situational;\n          if (config.target) skillRollConfig.target = config.target;\n          \n          await actor.rollSkill(skillRollConfig, skillDialogConfig, skillMessageConfig);\n          break;\n        case 'tool':\n          // Tools use a different signature: rollToolCheck(config, dialogConfig, messageConfig)\n          const toolRollConfig = {\n            tool: rollKey,\n            advantage: config.advantage,\n            disadvantage: config.disadvantage,\n            ability: config.ability,\n            chooseAbility: !config.ability // Don't allow choice if ability is pre-selected\n          };\n          const toolDialogConfig = {\n            configure: !config.fastForward // Show dialog unless fast forward is true\n          };\n          const toolMessageConfig = {\n            rollMode: config.rollMode,\n            create: config.chatMessage !== false,\n            data: {}\n          };\n          \n          // Use the roll title if provided, otherwise build custom flavor if ability was overridden\n          if (config.rollTitle) {\n            toolMessageConfig.data.flavor = config.rollTitle;\n          } else if (config.ability) {\n            // Get tool label\n            let toolLabel = rollKey;\n            const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n            if (toolData?.id) {\n              const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n              toolLabel = toolItem?.name || rollKey;\n            }\n            const abilityLabel = CONFIG.DND5E.abilities[config.ability]?.label || config.ability;\n            // D&D5e doesn't have a tool format with ability, so create custom flavor\n            toolMessageConfig.data.flavor = `${abilityLabel} (${toolLabel}) ${game.i18n.localize(\"DND5E.Check\")}`;\n          }\n          // Add situational bonus and target if present\n          if (config.situational) toolRollConfig.bonus = config.situational;\n          if (config.target) toolRollConfig.target = config.target;\n          \n          await actor.rollToolCheck(toolRollConfig, toolDialogConfig, toolMessageConfig);\n          break;\n        case 'concentration':\n          const concentrationDialogConfig = { configure: !config.fastForward && !config.skipDialog };\n          const concentrationMessageConfig = {\n            rollMode: config.rollMode,\n            create: config.chatMessage !== false\n          };\n          await actor.rollConcentration(config, concentrationDialogConfig, concentrationMessageConfig);\n          break;\n        case 'initiativedialog':\n          // Initiative rolls require an active combat\n          if (!game.combat) {\n            ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n            break;\n          }\n          // Use the same approach as player-side - pass three parameters\n          const dialogConfig = { configure: !config.fastForward && !config.skipDialog };\n          const messageConfig = {\n            rollMode: config.rollMode,\n            create: config.chatMessage !== false\n          };\n          const result = await actor.rollInitiativeDialog(config, dialogConfig, messageConfig);\n          \n          // If no result, try a different approach\n          if (!result) {\n            \n            // Get or create combatant\n            let combatant = game.combat.getCombatantByActor(actor.id);\n            if (!combatant) {\n              const tokens = actor.getActiveTokens();\n              if (tokens.length) {\n                await game.combat.createEmbeddedDocuments(\"Combatant\", [{\n                  tokenId: tokens[0].id,\n                  actorId: actor.id\n                }]);\n                combatant = game.combat.getCombatantByActor(actor.id);\n              }\n            }\n            \n            // Roll initiative directly\n            if (combatant) {\n              const roll = combatant.getInitiativeRoll();\n              await roll.evaluate({async: true});\n              await combatant.update({initiative: roll.total});\n              await roll.toMessage({\n                speaker: ChatMessage.getSpeaker({actor}),\n                flavor: game.i18n.localize(\"DND5E.Initiative\")\n              });\n            }\n          }\n          break;\n        case 'deathsave':\n          // Death saves don't need a key, just the config\n          // Death saves return null if unnecessary (HP > 0 or already 3 successes/failures)\n          // Death saves might need special handling\n          const deathDialogConfig = { configure: !config.fastForward && !config.skipDialog };\n          const deathMessageConfig = {\n            rollMode: config.rollMode,\n            create: config.chatMessage !== false\n          };\n          const deathResult = await actor.rollDeathSave(config, deathDialogConfig, deathMessageConfig);\n          break;\n        case 'custom':\n          // Custom rolls use the formula in rollKey\n          try {\n            const roll = new Roll(rollKey, actor.getRollData());\n            await roll.evaluate({async: true});\n            await roll.toMessage({\n              speaker: ChatMessage.getSpeaker({actor}),\n              flavor: game.i18n.localize(\"CRLNGN_ROLLS.rollTypes.custom\")\n            });\n          } catch (error) {\n            ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula: rollKey}));\n          }\n          break;\n        default:\n          ui.notifications.warn(`Unknown roll type: ${requestType}`);\n          break;\n      }\n    } catch (error) {\n      ui.notifications.error(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollError\", { \n        actor: actor.name \n      }));\n    }\n  }\n\n  /**\n   * Clean up when closing\n   */\n  async _onClose(options) {\n    await super._onClose(options);\n    \n    // Reset state\n    this.selectedActors.clear();\n    this.selectedRequestType = null;\n    \n    // Remove click outside listener (with capture flag to match addEventListener)\n    document.removeEventListener('click', this._onClickOutside, true);\n    \n    // Remove token control hook\n    if (this._tokenControlHook) {\n      Hooks.off('controlToken', this._tokenControlHook);\n      this._tokenControlHook = null;\n    }\n    \n    // Clear any pending token update timeout\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n      this._tokenUpdateTimeout = null;\n    }\n  }\n\n  /**\n   * Override render positioning to use CSS instead of inline styles\n   */\n  setPosition(position={}) {\n    // Don't set any inline position styles - let CSS handle it\n    return this;\n  }\n  \n  /**\n   * Show custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  async _showCustomRollDialog() {\n    return new Promise(async (resolve) => {\n      // Render the template\n      const content = await renderTemplate(`modules/${MODULE.ID}/templates/custom-roll-dialog.hbs`, {\n        formula: \"\",\n        readonly: false\n      });\n      \n      const dialog = new Dialog({\n        title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.customRollTitle\"),\n        content,\n        buttons: {\n          roll: {\n            icon: '<i class=\"fas fa-dice-d20\"></i>',\n            label: game.i18n.localize(\"Roll\"),\n            callback: (html) => {\n              const formulaElement = html[0] || html;\n              const formula = formulaElement.querySelector('#custom-roll-formula').value.trim();\n              resolve(formula || null);\n            }\n          },\n          cancel: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: game.i18n.localize(\"Cancel\"),\n            callback: () => resolve(null)\n          }\n        },\n        default: \"roll\",\n        render: (html) => {\n          const htmlElement = html[0] || html;\n          const formulaInput = htmlElement.querySelector('#custom-roll-formula');\n          const diceCounts = {};\n          \n          // Handle dice button clicks\n          htmlElement.querySelectorAll('.dice-button').forEach(button => {\n            button.addEventListener('click', (event) => {\n              const die = event.currentTarget.dataset.die;\n              diceCounts[die] = (diceCounts[die] || 0) + 1;\n              \n              // Build formula from dice counts\n              const parts = [];\n              for (const [dieType, count] of Object.entries(diceCounts)) {\n                if (count > 0) {\n                  parts.push(`${count}${dieType}`);\n                }\n              }\n              formulaInput.value = parts.join(' + ');\n            });\n          });\n        }\n      }, {\n        classes: [\"crlngn-rolls-dialog\", \"crlngn-custom-roll-dialog\"]\n      });\n      \n      dialog.render(true);\n    });\n  }\n\n  /**\n   * Toggle the roll requests menu open/closed\n   * @static\n   */\n  static toggle() {\n    if (!this.#instance) {\n      this.#instance = new RollRequestsMenu();\n      this.#instance.render(true);\n    } else {\n      if (this.#instance.rendered) {\n        this.#instance.close();\n      } else {\n        this.#instance._initializeFromSelectedTokens();\n        this.#instance.render(true);\n      }\n    }\n  }\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\n\n/**\n * Utility class for managing sidebar controls\n */\nexport class SidebarUtil {\n  /**\n   * Add the roll request bolt icon to sidebar\n   * @param {SidebarTab} app - The sidebar tab application\n   * @param {jQuery} html - The rendered HTML\n   * @param {Object} options - Render options\n   */\n  static addSidebarControls(app, html, options) {\n    if (!game.user.isGM || app.id !== \"chat\") return;\n    \n    const htmlElement = html[0] || html;\n    \n    // Find the chat controls container\n    const chatControls = htmlElement.querySelector(\"#chat-controls\");\n    if (!chatControls || chatControls.querySelector('.roll-requests-icon')) {\n      return;\n    }\n    \n    // Get current settings to determine initial state\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Create the roll request icon\n    const rollRequestIcon = document.createElement('a');\n    rollRequestIcon.id = \"crlngn-requests-icon\";\n    rollRequestIcon.setAttribute(\"data-tooltip-direction\", \"RIGHT\");\n    rollRequestIcon.className = `chat-control-icon roll-requests-icon${rollRequestsEnabled ? ' active' : ''}`;\n    rollRequestIcon.title = game.i18n.localize('CRLNGN_ROLLS.ui.menus.rollRequestsTitle');\n    rollRequestIcon.innerHTML = `<i class=\"fas fa-bolt${rollRequestsEnabled ? '' : '-slash'}\"></i>`;\n    \n    // Insert before the d20 dice icon\n    const firstChatControlIcon = chatControls.querySelector('.chat-control-icon');\n    if (firstChatControlIcon) {\n      firstChatControlIcon.parentNode.insertBefore(rollRequestIcon, firstChatControlIcon);\n    } else {\n      chatControls.insertBefore(rollRequestIcon, chatControls.firstChild);\n    }\n    \n    // Add click listener\n    rollRequestIcon.addEventListener(\"click\", () => {\n      RollRequestsMenu.toggle();\n    });\n  }\n  \n  /**\n   * Update the roll requests icon based on enabled state\n   * @param {boolean} enabled - Whether roll requests are enabled\n   */\n  static updateRollRequestsIcon(enabled) {\n    const icon = document.querySelector('#crlngn-requests-icon i');\n    if (icon) {\n      icon.className = `fas fa-bolt${enabled ? '' : '-slash'}`;\n    }\n  }\n}","import { HOOKS_CORE, HOOKS_DND5E } from \"../constants/Hooks.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { RollInterceptor } from \"./RollInterceptor.mjs\";\nimport { updateSidebarClass, isSidebarExpanded } from \"./Helpers.mjs\";\nimport { SidebarUtil } from \"./SidebarUtil.mjs\";\n\n/**\n * Utility class for managing all module hooks in one place\n */\nexport class HooksUtil {\n  /**\n   * Registered hook IDs for cleanup\n   * @type {Map<string, number>}\n   */\n  static registeredHooks = new Map();\n  \n  /**\n   * Initialize main module hooks\n   */\n  static initialize() {\n    Hooks.once(HOOKS_CORE.INIT, this._onInit.bind(this));\n    Hooks.once(HOOKS_CORE.READY, this._onReady.bind(this));\n  }\n  \n  /**\n   * Triggered when Foundry initializes\n   */\n  static _onInit() {\n    const SETTINGS = getSettings();\n    document.body.classList.add(\"crlngn-rolls\");\n    SettingsUtil.registerSettings();\n    DiceConfigUtil.initialize();\n    \n    // Register sidebar control hook\n    this._registerHook(HOOKS_CORE.RENDER_SIDEBAR_TAB, this._onRenderSidebarTab.bind(this));\n  }\n  \n  /**\n   * Triggered when Foundry is ready (fully loaded)\n   */\n  static _onReady() {\n    const SETTINGS = getSettings();\n    const isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n    if (isDebugOn) {\n      CONFIG.debug.hooks = true;\n    }\n    RollInterceptor.initialize();\n    this._registerDnd5eHooks();\n\n    if (game.user.isGM) {\n      this._registerGMHooks();\n    }else{\n      DiceConfigUtil.getDiceConfig();\n    }\n    updateSidebarClass(isSidebarExpanded());\n  }\n  \n  /**\n   * Register D&D5e specific hooks\n   */\n  static _registerDnd5eHooks() {\n    this._registerHook(HOOKS_DND5E.POST_ROLL_CONFIG, this._onPostRollConfig.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessage.bind(this));\n    this._registerHook(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, this._onPreCreateChatMessageFlavor.bind(this));\n    this._registerHook(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, this._onRenderRollConfigDialog.bind(this));\n  }\n  \n  /**\n   * Register GM-specific hooks\n   */\n  static _registerGMHooks() {\n    this._registerHook(HOOKS_CORE.USER_CONNECTED, this._onUserConnected.bind(this));\n    \n    // Request dice config from all active users\n    game.users.forEach(user => {\n      this._onUserConnected(user);\n    });\n  }\n  \n  /**\n   * Handle data after roll configuration\n   */\n  static _onPostRollConfig(rolls, config, dialog, message) {\n    if (config._showRequestedBy && rolls.length > 0) {\n      message.data = message.data || {};\n      message.data._showRequestedBy = true;\n      message.data._requestedBy = config._requestedBy;\n    }\n  }\n  \n  /**\n   * Handle data before creating chat message for requested rolls\n   */\n  static _onPreCreateChatMessage(chatMessage, data, options, userId) {\n    if (data._showRequestedBy && data.rolls?.length > 0) {\n      const requestedBy = data._requestedBy || 'GM';\n      const requestedText = game.i18n.format('CRLNGN_ROLL_REQUESTS.chat.requestedBy', { gm: requestedBy });\n      \n      const currentFlavor = data.flavor || '';\n      data.flavor = currentFlavor ? `${currentFlavor} ${requestedText}` : requestedText;\n    }\n  }\n  \n  /**\n   * Handle flavor data before creating chat message\n   */\n  static _onPreCreateChatMessageFlavor(message, data, options, userId) {\n    // Check if this is a roll message with our custom flavor\n    if (data.rolls?.length > 0 && data.rolls[0]) {\n      try {\n        // The roll data includes the options directly\n        const rollData = data.rolls[0];\n        if (rollData.options?._customFlavor) {\n          data.flavor = rollData.options._customFlavor;\n        }\n      } catch (error) {\n        // Silently ignore errors\n      }\n    }\n  }\n  \n  /**\n   * Triggered whenever roll configuration dialog is rendered. \n   * Used to add custom situational bonus from data, since the default DnD5e dialog does not seem to handle that\n   */\n  static _onRenderRollConfigDialog(app, html, data) {\n    // Do not continue if we've already triggered\n    if (app._situationalTriggered) return;\n    \n    // Does the dialog have a situational input field?\n    const situationalInputs = html.querySelectorAll('input[name*=\"situational\"]');\n    let hasTriggered = false;\n    \n    situationalInputs.forEach(input => {\n      if (input.value && !hasTriggered) {\n        // Apply flag to prevent re-render loop\n        app._situationalTriggered = true;\n        hasTriggered = true;\n        \n        // Dispatch a change event to trigger formula update\n        setTimeout(() => {\n          input.dispatchEvent(new Event('change', {\n            bubbles: true,\n            cancelable: false\n          }));\n          \n          // Clear the situational value from the roll config data to prevent re-population\n          if (app.config?.rolls?.[0]?.data) {\n            delete app.config.rolls[0].data.situational;\n          }\n        }, 50);\n      }\n    });\n  }\n  \n  /**\n   * Request dice configuration from the connected user\n   */\n  static _onUserConnected(user) {\n    if (user.active && user.id !== game.user.id) {\n      DiceConfigUtil.requestDiceConfigFromUser(user.id);\n    }\n  }\n  \n  /**\n   * Handle render sidebar tab\n   */\n  static _onRenderSidebarTab(app, html, options) {\n    SidebarUtil.addSidebarControls(app, html, options);\n  }\n  \n  /**\n   * Register a hook and track it\n   * @param {string} hookName - The hook name\n   * @param {Function} handler - The handler function\n   * @private\n   */\n  static _registerHook(hookName, handler) {\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.set(`${hookName}_${hookId}`, hookId);\n    return hookId;\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterAll() {\n    this.registeredHooks.forEach((hookId, key) => {\n      const hookName = key.split('_')[0];\n      Hooks.off(hookName, hookId);\n    });\n    this.registeredHooks.clear();\n  }\n  \n  /**\n   * Check if a hook is registered\n   * @param {string} hookName - The hook name to check\n   * @returns {boolean}\n   */\n  static isRegistered(hookName) {\n    for (const key of this.registeredHooks.keys()) {\n      if (key.startsWith(`${hookName}_`)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}","import { ROLL_TYPES, MODULE_ID } from \"../../constants/General.mjs\";\nimport { ActivityUtil } from \"../ActivityUtil.mjs\";\n\n/**\n * Helper functions for roll handling\n */\nexport const RollHelpers = {\n  /**\n   * Add situational bonus to a roll configuration\n   * @param {Object} config - The roll configuration\n   * @param {string} situational - The situational bonus formula\n   * @returns {Object} The modified config\n   */\n  addSituationalBonus(config, situational) {\n    if (situational) {\n      config.rolls = [{\n        parts: [],\n        data: { situational },\n        options: {},\n        situational\n      }];\n    }\n    return config;\n  },\n\n  /**\n   * Build base configuration for ability-based rolls\n   * @param {Object} requestData - The roll request data\n   * @param {Object} rollConfig - Base roll configuration\n   * @returns {Object} The ability configuration\n   */\n  buildAbilityConfig(requestData, rollConfig) {\n    return {\n      ability: requestData.rollKey,\n      advantage: requestData.config.advantage || false,\n      disadvantage: requestData.config.disadvantage || false,\n      target: requestData.config.target,\n      isRollRequest: true,\n      _showRequestedBy: true,\n      _requestedBy: requestData.config.requestedBy || 'GM'\n    };\n  },\n\n  /**\n   * Execute an activity-based roll\n   * @param {Actor} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {Object} requestData - The roll request data\n   * @param {Object} rollConfig - Roll configuration\n   * @param {Object} dialogConfig - Dialog configuration\n   * @param {Object} messageConfig - Message configuration\n   */\n  async executeActivityRoll(actor, rollType, requestData, rollConfig, dialogConfig, messageConfig) {\n    if (requestData.rollKey) {\n      await ActivityUtil.executeActivityRoll(\n        actor, \n        rollType, \n        requestData.rollKey, \n        requestData.activityId, \n        {\n          ...rollConfig,\n          dialog: dialogConfig,\n          message: messageConfig\n        }\n      );\n    }\n  },\n\n  /**\n   * Handle a custom roll, creating a custom dialog\n   * @param {Actor} actor - The actor performing the roll\n   * @param {Object} requestData - The roll request data\n   */\n  async handleCustomRoll(actor, requestData) {\n    const formula = requestData.rollKey; // Formula is stored in rollKey\n    \n    // Render the template with readonly formula\n    const content = await renderTemplate(`modules/${MODULE_ID}/templates/custom-roll-dialog.hbs`, {\n      formula: formula,\n      readonly: true\n    });\n    \n    const dialog = new Dialog({\n      title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.customRollTitle\"),\n      content,\n      buttons: {\n        roll: {\n          icon: '<i class=\"fas fa-dice-d20\"></i>',\n          label: game.i18n.localize(\"Roll\"),\n          callback: async () => {\n            try {\n              // Create and evaluate the roll\n              const roll = new Roll(formula, actor.getRollData());\n              await roll.evaluate({async: true});\n              \n              // Post to chat\n              await roll.toMessage({\n                speaker: ChatMessage.getSpeaker({actor}),\n                flavor: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${ROLL_TYPES.CUSTOM}`)\n              });\n            } catch (error) {\n              ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula}));\n            }\n          }\n        },\n        cancel: {\n          icon: '<i class=\"fas fa-times\"></i>',\n          label: game.i18n.localize(\"Cancel\")\n        }\n      },\n      default: \"roll\"\n    }, {\n      classes: [\"crlngn-rolls-dialog\", \"crlngn-custom-roll-dialog\"]\n    });\n    \n    dialog.render(true);\n  }\n};\n\n/**\n * Roll handlers for each roll type\n */\nexport const ROLL_HANDLERS = {\n  [ROLL_TYPES.ABILITY]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildAbilityConfig(requestData, rollConfig);\n    RollHelpers.addSituationalBonus(config, requestData.config.situational);\n    await actor.rollAbilityCheck(config, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.SAVE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = RollHelpers.buildAbilityConfig(requestData, rollConfig);\n    RollHelpers.addSituationalBonus(config, requestData.config.situational);\n    await actor.rollSavingThrow(config, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.SKILL]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = {\n      ...rollConfig,\n      skill: requestData.rollKey,\n      chooseAbility: true\n    };\n    if (requestData.config.ability) {\n      config.ability = requestData.config.ability;\n    }\n    await actor.rollSkill(config, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.TOOL]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    const config = {\n      ...rollConfig,\n      tool: requestData.rollKey,\n      chooseAbility: true\n    };\n    if (requestData.config.ability) {\n      config.ability = requestData.config.ability;\n    }\n    await actor.rollToolCheck(config, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.CONCENTRATION]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    RollHelpers.addSituationalBonus(rollConfig, requestData.config.situational);\n    await actor.rollConcentration(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.ATTACK]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.executeActivityRoll(actor, ROLL_TYPES.ATTACK, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.DAMAGE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.executeActivityRoll(actor, ROLL_TYPES.DAMAGE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.ITEM_SAVE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.executeActivityRoll(actor, ROLL_TYPES.ITEM_SAVE, requestData, rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.INITIATIVE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    // Initiative rolls require an active combat\n    if (!game.combat) {\n      ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n      return;\n    }\n    RollHelpers.addSituationalBonus(rollConfig, requestData.config.situational);\n    await actor.rollInitiativeDialog(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.DEATH_SAVE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await actor.rollDeathSave(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.HIT_DIE]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    rollConfig.denomination = requestData.rollKey;\n    await actor.rollHitDie(rollConfig, dialogConfig, messageConfig);\n  },\n\n  [ROLL_TYPES.CUSTOM]: async (actor, requestData, rollConfig, dialogConfig, messageConfig) => {\n    await RollHelpers.handleCustomRoll(actor, requestData);\n  }\n};","import { ROLL_TYPES } from \"../../constants/General.mjs\";\nimport { getRollTypeDisplay, showBatchedNotifications, applyTargetTokens } from \"../Helpers.mjs\";\nimport { ROLL_HANDLERS } from \"./RollHandlers.mjs\";\nimport { LogUtil } from \"../LogUtil.mjs\";\n\n/**\n * Utility class for handling roll requests from GM to players\n */\nexport class RollRequestUtil {\n  // Batch notification system for player-side\n  static pendingNotifications = [];\n  static notificationTimer = null;\n  static NOTIFICATION_BATCH_DELAY = 500; // ms to wait for additional notifications\n  \n  /**\n   * Handle roll request from GM on player side\n   * @param {Object} requestData - The roll request data\n   */\n  static async handleRequest(requestData) {\n    // Only handle on player side\n    if (game.user.isGM) return;\n    \n    // Get the actor\n    const actor = game.actors.get(requestData.actorId);\n    if (!actor) {\n      return;\n    }\n    \n    // Check if the user owns this actor\n    if (!actor.isOwner) {\n      return;\n    }\n    \n    // Apply GM targets if configured\n    if (requestData.preserveTargets && \n        requestData.targetTokenIds?.length > 0 && \n        game.user.targets.size === 0) {\n      applyTargetTokens(requestData.targetTokenIds);\n    }\n    \n    // Add to pending notifications for batching\n    RollRequestUtil.pendingNotifications.push({\n      actor: actor.name,\n      rollType: requestData.rollType,\n      rollKey: requestData.rollKey,\n      gm: requestData.config.requestedBy || 'GM'\n    });\n    \n    // Clear existing timer and set new one\n    if (RollRequestUtil.notificationTimer) {\n      clearTimeout(RollRequestUtil.notificationTimer);\n    }\n    \n    RollRequestUtil.notificationTimer = setTimeout(() => {\n      showBatchedNotifications(RollRequestUtil.pendingNotifications);\n      RollRequestUtil.pendingNotifications = [];\n      RollRequestUtil.notificationTimer = null;\n    }, RollRequestUtil.NOTIFICATION_BATCH_DELAY);\n    \n    // Execute the requested roll\n    RollRequestUtil.executeRequest(actor, requestData);\n  }\n  \n  /**\n   * Execute a roll based on the request data\n   * @param {Actor} actor \n   * @param {Object} requestData \n   */\n  static async executeRequest(actor, requestData) {\n    try {\n      const rollConfig = {\n        advantage: requestData.config.advantage || false,\n        disadvantage: requestData.config.disadvantage || false,\n        isRollRequest: true, // Custom flag to prevent re-interception\n        target: requestData.config.target, // DC value\n        _showRequestedBy: true, // Flag to show who requested the roll in chat\n        _requestedBy: requestData.config.requestedBy || 'GM' // Who requested the roll\n      };\n      \n      // Add situational bonus if provided\n      if (requestData.config.situational) {\n        rollConfig.bonus = requestData.config.situational;\n      }\n      \n      // Add ability for skills/tools if provided\n      if (requestData.config.ability && [ROLL_TYPES.SKILL, ROLL_TYPES.TOOL].includes(requestData.rollType)) {\n        rollConfig.ability = requestData.config.ability;\n      }\n      \n      // Dialog configuration (second parameter)\n      const dialogConfig = {\n        configure: !requestData.skipDialog,\n        options: {\n          defaultButton: requestData.config.advantage ? 'advantage' : \n                         requestData.config.disadvantage ? 'disadvantage' : 'normal',\n          // Add dialog window configuration\n          window: {\n            title: requestData.config.rollTitle || getRollTypeDisplay(requestData.rollType, requestData.rollKey),\n            subtitle: actor.name\n          }\n        }\n      };\n      \n      // Message configuration (third parameter)\n      const messageConfig = {\n        rollMode: requestData.config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        create: requestData.config.chatMessage !== false\n      };\n      \n      // Use the roll handler for the requested roll type\n      const handler = ROLL_HANDLERS[requestData.rollType];\n      if (handler) {\n        await handler(actor, requestData, rollConfig, dialogConfig, messageConfig);\n      } else {\n        LogUtil.warn(`No handler found for roll type: ${requestData.rollType}`);\n        ui.notifications.warn(game.i18n.localize('CRLNGN_ROLL_REQUESTS.notifications.rollError'));\n      }\n    } catch (error) {\n      ui.notifications.error(game.i18n.localize('CRLNGN_ROLL_REQUESTS.notifications.rollError'));\n    }\n  }\n}","import { getSettings } from \"../constants/Settings.mjs\";\nimport { SOCKET_CALLS } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { DiceConfigUtil } from \"./DiceConfigUtil.mjs\";\nimport { HooksUtil } from \"./HooksUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { RollRequestUtil } from \"./helpers/RollRequestUtil.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    SocketUtil.initialize(Main.registerSocketCalls);\n    HooksUtil.initialize();\n  }\n\n  // Wrapper methods for socket calls to DiceConfigUtil\n  static getDiceConfig() {\n    return DiceConfigUtil.getDiceConfig();\n  }\n  \n  static receiveDiceConfig(userId, diceConfig) {\n    DiceConfigUtil.receiveDiceConfig(userId, diceConfig);\n  }\n\n  /**\n   * Handle roll request from GM on player side\n   * @param {Object} requestData - The roll request data\n   */\n  static async handleRollRequest(requestData) {\n    return RollRequestUtil.handleRequest(requestData);\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    SocketUtil.registerCall(SOCKET_CALLS.handleRollRequest, Main.handleRollRequest);\n  }\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\n// Initialize the module\nMain.init();\n"],"names":["SETTING_INPUT","SETTING_SCOPE","getSettings","MODULE_ID","DEBUG_TAG","SOCKET_CALLS","ROLL_TYPES","ROLL_REQUEST_OPTIONS","MODULE","HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","__publicField","LogUtil","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","name","func","value","callback","handler","parameters","userId","executionKey","SocketUtil","DiceConfigUtil","clientSettings","diceConfig","_b","user","SettingsUtil","SETTINGS","entry","setting","settingObj","settingName","moduleName","selectedSetting","newValue","requestsIcon","ActivityUtil","item","rollType","activities","attackActivities","damageAttackActivities","damageActivities","saveActivities","itemSaveActivities","activityType","actor","itemId","activityId","config","activity","dialogConfig","workflow","formulas","part","f","defaultConfig","defaultOptions","formula","ignoreCrit","damageType","GMRollConfigDialog","message","dialog","partId","context","_c","configSection","templateData","template","wrapper","button","event","formConfig","sendRequestCheckbox","dcInput","formData","index","abilityFromForm","dcFromForm","dcValue","form","action","finalizedRolls","actors","rollKey","_d","_e","_f","_g","_h","_i","_j","_k","_l","showDC","rollClass","rollConfig","messageConfig","a","app","resolve","firstRoll","advantage","disadvantage","finalConfig","defaultRollMode","situational","defaultAbility","level","title","skillLabel","skill","abilityLabel","saveAbility","checkAbility","toolData","toolLabel","toolItem","GMSkillToolConfigDialog","skillConfig","tool","RollInterceptor","hookName","hookId","owner","DialogClass","originalConfig","dialogResult","modifiedConfig","ownership","skipDialogs","cleanConfig","key","requestData","t","getRollTypeDisplay","display","showBatchedNotifications","pendingNotifications","getRollTypeDisplayFn","notificationsByType","notif","entries","messages","rollTypeDisplay","actorNames","applyTargetTokens","tokenIds","id","isSidebarExpanded","updateSidebarClass","isExpanded","body","_instance","_RollRequestsMenu","menu","pcActors","npcActors","currentScene","actorData","token","rollRequestsEnabled","currentActors","selectAllOn","requestTypes","option","rollTypes","selectedOption","firstActorId","allTools","label","str","rollData","configData","b","system","stats","optionsToggle","optionsElement","controlled","html","tab","selectBtn","requestTypesContainer","listItem","customEvent","rollTypesContainer","enabled","SidebarUtil","skip","selectAll","lockIcon","controlledTokens","isPC","actorId","selected","tokens","selectAllCheckbox","checkboxes","checkedCount","cb","requestType","rollOption","selectedActorIds","validActorIds","isNPC","rollMethodName","actorIdsToRoll","actorsWithInitiative","actorIdsWithInitiative","combatant","actorsNeedingDeathSaves","actorsSkippingDeathSaves","hp","deathSaves","successes","failures","successfulRequests","offlinePlayerActors","offlineConfig","npcConfig","suppressNotification","requestsByPlayer","rollTypeKey","rollTypeName","playerData","playerSummaries","abilityRollConfig","abilityDialogConfig","abilityMessageConfig","saveRollConfig","saveDialogConfig","saveMessageConfig","skillRollConfig","skillDialogConfig","skillMessageConfig","toolRollConfig","toolDialogConfig","toolMessageConfig","concentrationDialogConfig","concentrationMessageConfig","deathDialogConfig","deathMessageConfig","deathResult","position","content","htmlElement","formulaInput","diceCounts","die","parts","dieType","count","__privateGet","__privateSet","__privateAdd","RollRequestsMenu","chatControls","rollRequestIcon","firstChatControlIcon","icon","HooksUtil","chatMessage","requestedBy","requestedText","currentFlavor","situationalInputs","hasTriggered","input","RollHelpers","ROLL_HANDLERS","_RollRequestUtil","RollRequestUtil","Main"],"mappings":"ufAAO,MAAMA,EAAgB,CAE3B,SAAU,UACZ,EACaC,EAAgB,CAC3B,OAAQ,SACR,MAAO,OACT,EAMaC,EAAc,KAClB,CACL,UAAW,CACT,IAAK,aACL,MAAO,KAAK,KAAK,SAAS,uCAAuC,EACjE,KAAM,KAAK,KAAK,SAAS,sCAAsC,EAC/D,SAAU,QACV,UAAWF,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,OACrB,OAAQ,EACT,EACD,oBAAqB,CACnB,IAAK,wBACL,MAAO,KAAK,KAAK,SAAS,iDAAiD,EAC3E,KAAM,KAAK,KAAK,SAAS,gDAAgD,EACzE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,YAAa,CACX,IAAK,eACL,MAAO,KAAK,KAAK,SAAS,yCAAyC,EACnE,KAAM,KAAK,KAAK,SAAS,wCAAwC,EACjE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,kBAAmB,CACjB,IAAK,uBACL,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,KAAM,KAAK,KAAK,SAAS,8CAA8C,EACvE,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,wBAAyB,CACvB,IAAK,4BACL,MAAO,KAAK,KAAK,SAAS,qDAAqD,EAC/E,KAAM,KAAK,KAAK,SAAS,oDAAoD,EAC7E,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EACD,yBAA0B,CACxB,IAAK,6BACL,MAAO,KAAK,KAAK,SAAS,sDAAsD,EAChF,KAAM,KAAK,KAAK,SAAS,qDAAqD,EAC9E,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACd,CAEG,GCvEUE,EAAY,uBAOZC,GAAY,CACvB,mBACA,8CACA,GACF,EAEaC,GAAe,CAC1B,kBAAmB,oBACnB,cAAe,gBACf,kBAAmB,mBACrB,EAsDaC,EAAa,CACxB,QAAS,UACT,KAAM,OACN,MAAO,QACP,KAAM,OACN,cAAe,gBACf,OAAQ,SACR,OAAQ,SACR,WAAY,aACZ,WAAY,YACZ,QAAS,SACT,UAAW,WACX,OAAQ,QACV,EAEaC,GAAuB,CAClC,cAAe,CAAE,KAAM,eAAgB,MAAO,gBAAiB,QAAS,YAAa,UAAW,kBAAoB,EACpH,aAAc,CAAE,KAAM,cAAe,MAAO,eAAgB,QAAS,YAAa,UAAW,kBAAoB,EACjH,MAAO,CAAE,KAAM,QAAS,MAAO,cAAe,QAAS,SAAU,UAAW,eAAiB,EAC7F,KAAM,CAAE,KAAM,OAAQ,MAAO,aAAc,QAAS,QAAS,UAAW,cAAgB,EACxF,cAAe,CAAE,KAAM,gBAAiB,MAAO,sBAAuB,QAAS,KAAM,UAAW,EAAI,EACpG,WAAY,CAAE,KAAM,mBAAoB,MAAO,kBAAmB,QAAS,KAAM,UAAW,EAAI,EAChG,WAAY,CAAE,KAAM,YAAa,MAAO,aAAc,QAAS,KAAM,UAAW,EAAI,EACpF,OAAQ,CAAE,KAAM,SAAU,MAAO,cAAe,QAAS,KAAM,UAAW,EAAI,CAEhF,EAOaC,EAAS,CACpB,GAAIL,EACJ,qBAAsBI,EACxB,EC1GaE,EAAa,CACxB,KAAM,OACN,MAAO,QAEP,mBAAoB,mBAIpB,eAAgB,gBAChB,wBAAyB,sBAI3B,EAKaC,GAAe,CAC1B,MAAO,iBACT,EAKaC,EAAc,CASzB,uBAAwB,8BACxB,sBAAuB,6BAmBvB,uBAAwB,2BAKxB,kBAAmB,uBACnB,iBAAkB,sBAKlB,oBAAqB,wBAWrB,oBAAqB,0BAIrB,mBAAoB,wBAKpB,mBAAoB,wBAkBpB,iBAAkB,8BAClB,iCAAkC,+BAGpC,EC1GaC,GAAN,MAAMA,EAAQ,CAUnB,OAAO,IAAIC,EAAI,GAAIC,EAAK,CAAE,EAAEC,EAAe,GAAO,CAChD,GAAI,CACF,MAAMC,EAAe,KAAK,SAAS,IAAIb,EAAW,YAAY,GAAKS,GAAQ,QAE3E,GAAG,EADmBG,GAAkBC,GACnB,OACrB,QAAQ,IAAI,GAAGZ,GAAWS,EAAK,GAAGC,CAAI,CACvC,MAAU,EAELC,GAAkBH,GAAQ,UAC5B,QAAQ,IAAI,GAAGR,GAAWS,EAAK,GAAGC,CAAI,CAE9C,CACA,CAOE,OAAO,KAAKD,EAAI,GAAIC,EAAK,CAAA,EAAI,CAC3B,QAAQ,KAAK,GAAGV,GAAWS,EAAK,GAAGC,CAAI,CAC3C,CAWE,OAAO,MAAMG,EAAQC,EAAU,CAAE,GAAI,GAAO,QAAS,GAAM,UAAW,IAAS,CHhD1E,IAAAC,EGiDAD,EAAQ,MACTC,EAAA,GAAG,gBAAH,MAAAA,EAAkB,MAAMF,EAAQ,CAAE,SAAU,GAAM,UAAWC,EAAQ,aAEpEA,EAAQ,SAAS,QAAQ,MAAM,GAAGd,GAAWa,CAAM,CAC1D,CACA,EA9CEG,EAFWR,GAEJ,UAAU,IAFZ,IAAMS,EAANT,GCCA,MAAMU,EAAN,MAAMA,CAAW,CAgItB,OAAO,sBAAsBR,EAAMS,EAAS,GAAO,CAEjD,OAAIT,GAAQ,MAERS,GAAYT,EAAK,OAAS,MAAM,QAAQA,EAAK,KAAK,IAGpDA,EAAK,MAAQA,EAAK,MAAM,IAAIU,GACvBA,aAAa,KACGA,EAAE,OAAQ,EAGpBA,CAEV,GAGIV,CACX,CAOE,OAAO,yBAAyBA,EAAMS,EAAS,GAAO,CACpD,IAAIE,EAAS,CAAE,GAAGX,CAAM,EACxB,GAAI,CAACA,EAAM,OAAOW,EAElB,GAAGF,GAAYT,EAAK,OAASA,EAAK,MAAM,OAAS,EAAE,CACjD,MAAMY,EAAQD,EAAO,MAAM,IAAID,GAAK,CAClC,IAAIG,EAAOH,EACX,OAAG,OAAOA,GAAM,SACdG,EAAO,KAAK,SAASH,CAAC,EAEtBG,EAAO,KAAK,SAAS,KAAK,UAAUH,CAAC,CAAC,EAEjCG,CACR,CAAA,EACD,OAAAF,EAAO,MAAQ,CAAC,GAAGC,CAAK,EACjBD,CACb,CAEI,OAAOA,CACX,CAEA,EA7KEL,EADWE,EACJ,UACPF,EAFWE,EAEJ,oBAAoB,IAAI,KAQ/BF,EAVWE,EAUJ,aAAcM,GAAiB,CACpC,MAAM,KAAKlB,GAAa,MAAO,IAAM,CAGnC,GAAI,OAAO,UAAc,IAAa,CACpCW,EAAQ,MAAM,gFAAgF,EAC9F,GAAG,cAAc,MAAM,KAAK,KAAK,SAAS,6CAA6C,EAAG,CAAC,UAAW,EAAI,CAAC,EAC3G,MACR,CAEM,GAAI,CAEFC,EAAW,OAAS,UAAU,eAAenB,CAAS,EAGlDyB,GACFA,EAAc,CAGjB,MAAW,CAClB,CACA,CAAK,CACL,GAQER,EAxCWE,EAwCJ,eAAe,CAACO,EAAMC,IAAS,CAChCR,EAAW,QACbA,EAAW,OAAO,SAASO,EAAMC,CAAI,CAG3C,GAQEV,EArDWE,EAqDJ,cAAc,CAACS,EAAOC,IAAa,CACpCA,GACAA,EAAU,CAElB,GASEZ,EAlEWE,EAkEJ,aAAa,MAAOW,KAAYC,IAAe,CACpD,GAAKZ,EAAW,OAGhB,OAAO,MAAMA,EAAW,OAAO,iBAAiBW,EAAS,GAAGC,CAAU,CAC1E,GASEd,EAhFWE,EAgFJ,aAAa,MAAOW,KAAYC,IAAe,CACpD,GAAKZ,EAAW,OAGhB,OAAO,MAAMA,EAAW,OAAO,mBAAmBW,EAAS,GAAGC,CAAU,CAC5E,GAUEd,EA/FWE,EA+FJ,cAAc,MAAOW,EAASE,KAAWD,IAAe,CAC7D,GAAI,CAACZ,EAAW,OACZ,OAGJ,GAAGa,IAAW,KAAK,KAAK,GACtB,OAAO,KAET,MAAMC,EAAe,GAAGH,CAAO,IAAIE,CAAM,GAGzC,GAAIb,EAAW,kBAAkB,IAAIc,CAAY,EAC7C,OAAO,KAGXd,EAAW,kBAAkB,IAAIc,EAAc,EAAI,EAEnD,GAAI,CAEA,OADa,MAAMd,EAAW,OAAO,cAAcW,EAASE,EAAQ,GAAGD,CAAU,CAEpF,MAAe,CACZ,OAAO,IACf,QAAc,CAENZ,EAAW,kBAAkB,OAAOc,CAAY,CACxD,CACA,GAzHO,IAAMC,EAANf,ECFA,MAAMgB,CAAe,CAc1B,OAAO,YAAa,CAClB,KAAK,cAAe,CACxB,CAME,OAAO,eAAgB,CACrB,GAAI,CAAC,KAAK,KAAM,MAAO,CAAE,EAEzB,MAAMC,EAAiB,KAAK,SAAS,QAAQ,IAAI,QAAQ,EACzD,YAAK,WAAaA,EAAe,wBAAwB,GAAK,GAEvD,KAAK,UAChB,CAME,OAAO,eAAgB,CACrB,OAAK,KAAK,MAGV,KAAK,cAAe,EAGhB,KAAK,KAAK,MACZ,KAAK,qBAAsB,EAGtB,KAAK,YAVW,CAAE,CAW7B,CAME,OAAO,sBAAuB,CAC5BF,EAAW,WAAW,oBAAqB,KAAK,KAAK,GAAI,KAAK,UAAU,CAC5E,CAOE,OAAO,kBAAkBF,EAAQK,EAAY,CLnExC,IAAArB,EAAAsB,IKoECtB,EAAA,KAAK,OAAL,MAAAA,EAAW,MAAQgB,MAAWM,EAAA,KAAK,OAAL,YAAAA,EAAW,OAC3C,KAAK,kBAAkBN,CAAM,EAAIK,EAAa,KAAK,MAAMA,CAAU,EAAI,CAAE,EAE/E,CAOE,OAAO,kBAAkBL,EAAQ,CL9E5B,IAAAhB,EK+EH,OAAIgB,MAAWhB,EAAA,KAAK,OAAL,YAAAA,EAAW,IACjB,KAAK,WAGP,KAAK,kBAAkBgB,CAAM,GAAK,CAAE,CAC/C,CAME,OAAO,0BAA0BA,EAAQ,CACvCE,EAAW,YAAY,gBAAiBF,CAAM,CAClD,CAKE,OAAO,iCAAkC,CLjGpC,IAAAhB,GKkGEA,EAAA,KAAK,OAAL,MAAAA,EAAW,MAEhB,KAAK,MAAM,QAAQuB,GAAQ,CACrBA,EAAK,QAAU,CAACA,EAAK,MAAQA,EAAK,KAAO,KAAK,KAAK,IACrD,KAAK,0BAA0BA,EAAK,EAAE,CAE9C,CAAK,CACL,CAKE,OAAO,oBAAqB,CAC1B,KAAK,kBAAoB,CAAE,CAC/B,CAOE,OAAO,cAAcP,EAAQ,CLvHxB,IAAAhB,EKwHH,OAAIgB,MAAWhB,EAAA,KAAK,OAAL,YAAAA,EAAW,IACjB,CAAC,CAAC,KAAK,WAGT,CAAC,CAAC,KAAK,kBAAkBgB,CAAM,CAC1C,CACA,CArHEf,EAJWkB,EAIJ,aAAa,CAAE,GAKtBlB,EATWkB,EASJ,oBAAoB,CAAE,GCPxB,MAAMK,CAAa,CAKxB,OAAO,kBAAmB,CACxB,MAAMC,EAAW1C,EAAa,EAGT,OAAO,QAAQ0C,CAAQ,EAC/B,QAAQ,MAAMC,GAAU,CACnC,MAAMC,EAAUD,EAAM,CAAC,EAEjBE,EAAa,CACjB,KAAMD,EAAQ,MACd,KAAMA,EAAQ,KACd,QAASA,EAAQ,QACjB,KAAMA,EAAQ,SACd,MAAOA,EAAQ,MACf,OAAQA,EAAQ,OAChB,eAAgBA,EAAQ,gBAAkB,GAC1C,SAAUf,GAASY,EAAa,MAAMG,EAAQ,IAAKf,CAAK,CAChE,EACSe,EAAQ,UACTC,EAAW,QAAUD,EAAQ,SAG/B,MAAM,KAAK,SAAS,SAAS3C,EAAW2C,EAAQ,IAAKC,CAAU,GAG5DJ,EAAa,IAAIG,EAAQ,GAAG,IAAI,QAAaH,EAAa,IAAIG,EAAQ,GAAG,IAAI,OAC9EH,EAAa,IAAIG,EAAQ,IAAKA,EAAQ,OAAO,CAErD,CAAK,CACL,CAQE,OAAO,IAAIE,EAAaC,EAAW9C,EAAU,CAC3C,GAAG,CAAC6C,EAAc,OAAO,KAEzB,IAAIF,EAAU,GAEd,GAAGG,IAAa9C,EACd2C,EAAU,KAAK,SAAS,IAAIG,EAAYD,CAAW,MAChD,CAEH,IAAIE,EADW,KAAK,SAAS,QAAQ,IAAI,QAAQ,EACpB,GAAGD,CAAU,IAAID,CAAW,EAAE,EAExDE,IAAkB,SAEnBA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGD,CAAU,IAAID,CAAW,EAAE,EACjEF,EAAUI,GAAA,YAAAA,EAAiB,MAEnC,CAEI,OAAOJ,CACX,CASE,OAAO,IAAIE,EAAaG,EAAUF,EAAW9C,EAAU,CACrD,GAAG,CAAC6C,EAAc,MAAO,GAEzB,IAAIE,EAAkB,KAAK,SAAS,QAAQ,IAAI,QAAQ,EAAE,GAAGD,CAAU,IAAID,CAAW,EAAE,EAEpFE,IAEFA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGD,CAAU,IAAID,CAAW,EAAE,GAGnE,GAAG,CACD,KAAK,SAAS,IAAIC,EAAYD,EAAaG,CAAQ,CACpD,MAAQ,CACb,CAEI,MAAO,EACX,CAEE,OAAO,MAAMH,EAAaG,EAAS,CACjC,MAAMP,EAAW1C,EAAa,EAC9B,OAAO8C,EAAW,CAChB,KAAKJ,EAAS,oBAAoB,IAChCD,EAAa,yBAAyBQ,CAAQ,EAC9C,KAGR,CACA,CAEE,OAAO,yBAAyBA,EAAS,CACvC,MAAMC,EAAe,SAAS,cAAc,sDAAsD,EAC9FA,IAEDD,EACDC,EAAa,UAAU,IAAI,QAAQ,EAEnCA,EAAa,UAAU,OAAO,QAAQ,EAE5C,CACA,CC9GO,MAAMC,EAAa,CAQxB,OAAO,oBAAoBC,EAAMC,EAAU,CPdtC,IAAApC,EOeH,GAAI,GAACA,EAAAmC,GAAA,YAAAA,EAAM,SAAN,MAAAnC,EAAc,YAAY,OAAO,KAEtC,MAAMqC,EAAaF,EAAK,OAAO,WAE/B,OAAQC,EAAQ,CACd,KAAKjD,EAAW,OAEd,MAAMmD,EAAmBD,EAAW,UAAU,QAAQ,EACtD,OAAOC,GAAA,YAAAA,EAAmB,KAAM,KAElC,KAAKnD,EAAW,OAEd,MAAMoD,EAAyBF,EAAW,UAAU,QAAQ,EAC5D,IAAIE,GAAA,YAAAA,EAAwB,QAAS,EAAG,OAAOA,EAAuB,CAAC,EAEvE,MAAMC,EAAmBH,EAAW,UAAU,QAAQ,EACtD,IAAIG,GAAA,YAAAA,EAAkB,QAAS,EAAG,OAAOA,EAAiB,CAAC,EAE3D,MAAMC,EAAiBJ,EAAW,UAAU,MAAM,EAClD,OAAII,GAAA,YAAAA,EAAgB,QAAS,EAAUA,EAAe,CAAC,EAEhD,KAET,KAAKtD,EAAW,UAEd,MAAMuD,EAAqBL,EAAW,UAAU,MAAM,EACtD,OAAOK,GAAA,YAAAA,EAAqB,KAAM,KAEpC,QACE,OAAO,IACf,CACA,CAQE,OAAO,oBAAoBP,EAAMQ,EAAc,CPtD1C,IAAA3C,EOuDH,OAAKA,EAAAmC,GAAA,YAAAA,EAAM,SAAN,MAAAnC,EAAc,WACZmC,EAAK,OAAO,WAAW,UAAUQ,CAAY,EADd,CAAE,CAE5C,CAQE,OAAO,mBAAmBR,EAAMC,EAAU,CACxC,MAAO,CAAC,CAAC,KAAK,oBAAoBD,EAAMC,CAAQ,CACpD,CAUE,aAAa,oBAAoBQ,EAAOR,EAAUS,EAAQC,EAAYC,EAAQ,CP7EzE,IAAA/C,EAAAsB,EO8EH,MAAMa,EAAOS,EAAM,MAAM,IAAIC,CAAM,EACnC,GAAI,CAACV,EACH,MAAM,IAAI,MAAM,QAAQU,CAAM,uBAAuBD,EAAM,IAAI,EAAE,EAGnE,IAAII,EAAW,KAef,GAZIF,IACFE,GAAWhD,EAAAmC,EAAK,OAAO,aAAZ,YAAAnC,EAAwB,IAAI8C,IAMpCE,IACHA,EAAW,KAAK,oBAAoBb,EAAMC,CAAQ,GAIhDY,EACF,OAAQZ,EAAQ,CACd,KAAKjD,EAAW,OACd,MAAM8D,EAAe,CACnB,UAAW,EACZ,EAED,GAAG,QAAS,CACO,MAAMf,GAAa,kBAAkBC,EAAM,CAC1D,GAAGY,CACJ,CAAA,EACD,MACZ,KACY,QAAO,MAAMC,EAAS,IAAI,YAAaC,CAAY,EAEvD,KAAK9D,EAAW,OACd,GAAG,QAAS,CACV,MAAM+D,GAAW5B,EAAA,6BAAS,WAAT,YAAAA,EAAmB,YAAY0B,EAAS,MACtC,MAAME,EAAS,SAAS,WAAW,CACpD,GAAGH,EACH,SAAUG,CACX,CAAA,EACD,MACZ,KACY,QAAO,MAAMF,EAAS,WAAWD,CAAM,EAK3C,KAAK5D,EAAW,UAEd,OAAO,MAAMgD,EAAK,IAAI,CAAE,SAAUa,EAAS,EAAE,EAAI,CAAE,WAAYD,EAAO,WAAW,CAAE,EAErF,QACE,MAAM,IAAI,MAAM,sBAAsBX,CAAQ,EAAE,CAC1D,KACW,CAGL,OAAQA,EAAQ,CACd,KAAKjD,EAAW,OACd,GAAIgD,EAAK,WACP,OAAO,MAAMA,EAAK,WAAWY,CAAM,EAErC,MAEF,KAAK5D,EAAW,OACd,GAAIgD,EAAK,WACP,OAAO,MAAMA,EAAK,WAAWY,CAAM,EAErC,MAEF,KAAK5D,EAAW,UAEd,OAAO,MAAMgD,EAAK,IAAI,CAAA,EAAI,CAAE,WAAYY,EAAO,YAAa,CACtE,CAEM,MAAM,IAAI,MAAM,gCAAgCX,CAAQ,YAAYD,EAAK,IAAI,EAAE,CACrF,CACA,CAOE,OAAO,uBAAuBa,EAAU,CACtC,OAAKA,EAEE,CACL,KAAMA,EAAS,MAAQA,EAAS,YAAY,SAAS,MACrD,KAAMA,EAAS,KACf,KAAMA,EAAS,YAAY,SAAS,KACpC,UAAWA,EAAS,OAAS,SAC7B,UAAW,CAAC,SAAU,SAAU,MAAM,EAAE,SAASA,EAAS,IAAI,EAC9D,QAASA,EAAS,OAAS,MAC5B,EATqB,IAU1B,CAOE,OAAO,iBAAiBA,EAAU,CPtL7B,IAAAhD,EAAAsB,EOuLH,GAAI,GAACA,GAAAtB,EAAAgD,GAAA,YAAAA,EAAU,SAAV,YAAAhD,EAAkB,QAAlB,MAAAsB,EAAyB,QAAQ,OAAO,KAG7C,MAAM6B,EAAWH,EAAS,OAAO,MAAM,IAAII,GAAQA,EAAK,OAAO,EAAE,OAAOC,GAAKA,CAAC,EAC9E,OAAOF,EAAS,OAAS,EAAIA,EAAS,KAAK,KAAK,EAAI,IACxD,CAEE,aAAa,kBAAkBhB,EAAMY,EAAS,GAAI,CAChD,IAAIO,EAAgB,CAChB,aAAc,GACd,iBAAkB,EACrB,EAGGC,EAAiB,CAEnB,gBAAiB,GAEjB,gBAAiB,CACf,eAAgB,GAChB,eAAgB,GAChB,eAAgB,OAChB,eAAgB,EACxB,CACK,EAGD,OAAAR,EAAS,CAAC,GAAGO,EAAe,GAAGP,CAAM,EAC9B,MAAM,QAAQ,gBAAgBZ,EAAMY,EAAQQ,CAAc,CACrE,CAEE,aAAa,cAAcL,EAAUM,EAAS,CAAC,WAAAC,EAAa,GAAO,WAAAC,CAAU,EAAI,GAAI,CACnFF,EAAU,OAAOA,CAAO,EACpBN,EAAS,YAAc,CAACO,IAAYD,EAAU,MAAM,UAAU,mBAAmBA,EAASN,EAAS,KAAK,YAAW,CAAE,GACzH,IAAI1C,EAAO,MAAM,IAAI,OAAO,KAAK,WAAWgD,CAAO,EAAE,SAAU,EAE/D,aAAMN,EAAS,eAAe,CAAC1C,CAAI,CAAC,EAE7BA,CACX,CACA,CCxNO,MAAMmD,UAA2B,MAAM,aAAa,KAAK,0BAA2B,CACzF,YAAYZ,EAAS,CAAE,EAAEa,EAAU,CAAE,EAAE7D,EAAU,GAAI,CAGnDA,EAAQ,SAAWA,EAAQ,UAAY,OAAO,KAAK,QAGnD,MAAMgD,EAAQa,EAAS7D,CAAO,EAG9B,KAAK,OAASA,EAAQ,QAAU,CAAE,EAElC,KAAK,YAAcA,EAAQ,oBAAsBA,EAAQ,aAAe,GACxE,KAAK,OAASA,EAAQ,QAAU,GAChC,KAAK,QAAUA,EAAQ,SAAW,IACtC,CAKE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,gBAAgB,CAChE,CAAK,CACL,CAaE,0BAA0BS,EAAMuC,EAAQc,EAAQD,EAAS,CACvD,MAAMjE,EAAO,MAAM,0BAA0Ba,EAAMuC,EAAQc,EAAQD,CAAO,EAG1E,OAAAjE,EAAK,OAAS,KAAK,OACnBA,EAAK,QAAU,KAAK,QACpBA,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAUE,MAAM,oBAAoBmE,EAAQC,EAAShE,EAAS,CAClD,OAAAgE,EAAU,MAAM,MAAM,oBAAoBD,EAAQC,EAAShE,CAAO,EAE9D+D,IAAW,kBAEbC,EAAQ,OAAS,KAAK,OACtBA,EAAQ,QAAU,KAAK,QACvBA,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,QAG5BA,CACX,CAKE,MAAM,UAAUA,EAAShE,EAAS,CRjF7B,IAAAC,EAAAsB,EAAA0C,EQsFH,GAJA,MAAM,UAAUD,EAAShE,CAAO,EAI5B,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAIF,IAAIkE,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EAKjE,GAAIA,IAAkB,KAAK,QAAU,KAAK,OAAO,OAAS,GAAI,CAE5D,MAAMC,EAAe,CACnB,OAAQ,KAAK,OACb,QAAS,KAAK,QACd,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM,eAAe,WAAWnF,CAAS,uCAAwCkF,CAAY,EAGxGE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAGpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CAGI,KAAK,uBAAwB,IAGzBD,GAAA1C,GAAAtB,EAAA,KAAK,OAAO,QAAZ,YAAAA,EAAoB,KAApB,YAAAsB,EAAwB,OAAxB,MAAA0C,EAA8B,aAAe,KAAK,OAAO,eAC3D9D,EAAQ,IAAI,+BAAgC,CAAC,kDAAkD,CAAC,EAEhG,WAAW,IAAM,CACf,KAAK,QAAS,CACf,EAAE,GAAG,EAEZ,CAME,wBAAyB,CACP,KAAK,QAAQ,iBAAiB,iFAAiF,EACvH,QAAQmE,GAAU,CACxBA,EAAO,iBAAiB,QAAUC,GAAU,CAC3BA,EAAM,cAAc,QAAQ,MACnD,CAAO,CACP,CAAK,CACL,CAKE,cAAcC,EAAYD,EAAO,CAC/B,MAAM,cAAcC,EAAYD,CAAK,EAGrC,MAAME,EAAsB,KAAK,QAAQ,cAAc,mCAAmC,EACtFA,IACF,KAAK,YAAcA,EAAoB,SAGzC,MAAMC,EAAU,KAAK,QAAQ,cAAc,kBAAkB,EACzDA,GAAWA,EAAQ,QACrB,KAAK,QAAU,SAASA,EAAQ,KAAK,GAAK,KAGhD,CAME,aAAa1B,EAAQ2B,EAAUC,EAAO,CAEpC,MAAMC,EAAkBF,GAAA,YAAAA,EAAU,IAAI,WAChCG,EAAaH,GAAA,YAAAA,EAAU,IAAI,MAI7BE,IACF7B,EAAO,QAAU6B,EAEjB,KAAK,OAAO,QAAUA,GAGxB,MAAMtE,EAAS,MAAM,aAAayC,EAAQ2B,EAAUC,CAAK,EAGzD,GAAIE,EAAY,CACd,MAAMC,EAAU,SAASD,CAAU,EAC9B,MAAMC,CAAO,IAChBxE,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAASwE,EAEhC,MAAe,KAAK,UAAY,QAAa,KAAK,UAAY,OACxDxE,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAAS,KAAK,SAI/B,OAAOA,CACX,CAWE,MAAM,mBAAmBgE,EAAOS,EAAML,EAAU,CAK9C,GAHA,MAAM,MAAM,mBAAmBJ,EAAOS,EAAML,CAAQ,EAGhDA,EAAS,IAAI,IAAI,GAAKA,EAAS,IAAI,IAAI,IAAM,GAAI,CACnD,MAAMI,EAAU,SAASJ,EAAS,IAAI,IAAI,CAAC,EAC3C,GAAI,CAAC,MAAMI,CAAO,IAEhB,KAAK,QAAUA,EAGX,KAAK,OAAO,OAAS,KAAK,OAAO,MAAM,OAAS,GAClD,UAAWtE,KAAQ,KAAK,OAAO,MAC7BA,EAAK,QAAQ,OAASsE,CAIlC,CAGI,KAAK,YAAcJ,EAAS,IAAI,qBAAqB,IAAM,OAC/D,CASE,eAAeM,EAAQ,CAGrB,MAAMC,EAAiB,MAAM,eAAeD,CAAM,EAGlD,GAAI,KAAK,UAAY,QAAa,KAAK,UAAY,KACjD,UAAWxE,KAAQyE,EACjBzE,EAAK,QAAQ,OAAS,KAAK,QAK/B,YAAK,OAAO,YAAc,KAAK,YAExByE,CACX,CAUE,aAAa,iBAAiBC,EAAQ9C,EAAU+C,EAASpF,EAAU,CAAA,EAAI,CRtQlE,IAAAC,EAAAsB,EAAA0C,EAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GQyQH,MAAMC,EAAS,CAAC,QAAS,OAAQ,cAAe,UAAW,eAAgB,eAAe,EAAE,SAASzD,CAAQ,EAGvGQ,EAAQsC,EAAO,CAAC,EACtB,GAAI,CAACtC,EAAO,OAAO,KAGnB,IAAIkD,EAAY,OAAO,KAAK,QACxB,CAAC,SAAU,SAAS,EAAE,SAAS1D,CAAQ,EACzC0D,EAAY,OAAO,KAAK,YAAc,OAAO,KAAK,UACzC,CAAC,UAAW,QAAQ,EAAE,SAAS1D,CAAQ,IAChD0D,EAAY,OAAO,KAAK,WAIrBA,IACHA,EAAY,OAAO,KAAK,SAK1B,MAAMC,EAAa,CACjB,KAAMnD,EAAM,YAAa,EACzB,QAASA,EACT,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAMA,EAAM,YAAa,EACzB,QAAS,CAAA,CACV,CAAA,CACF,EAGD,OAAQR,EAAQ,CACd,IAAK,QACH2D,EAAW,MAAQZ,EACnB,MACF,IAAK,OACL,IAAK,cACHY,EAAW,QAAUZ,EACrB,MACF,IAAK,UACL,IAAK,eACHY,EAAW,QAAUZ,EACrB,KACR,CAGI,MAAMa,EAAgB,CACpB,OAAQ,GACR,KAAM,CACJ,QAAS,YAAY,WAAW,CAAE,MAAApD,CAAO,CAAA,CACjD,CACK,EAGKK,EAAe,CACnB,QAAS,CACP,OAAAiC,EACA,YAAaA,EAAO,KAAKe,GAAK,KAAK,eAAeA,CAAC,CAAC,EACpD,OAAAJ,EACA,QAAAV,EACA,SAAUW,EACV,OAAQ,CACN,MAAOnC,EAAmB,cAAcvB,EAAU+C,EAASvC,CAAK,EAChE,SAAUsC,EAAO,IAAIe,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,CAC5C,EACD,GAAGlG,CACX,CACK,EAKKmG,EAAM,IAAI,KAAKH,EAAYC,EAAe/C,EAAa,OAAO,EAG9D3C,EAAS,MAAM,IAAI,QAAQ6F,GAAW,CAC1CD,EAAI,iBAAiB,QAAS,IAAM,CAElCC,EAAQ,CACN,MAAOD,EAAI,MACX,OAAQA,EAAI,OACZ,QAASA,EAAI,QACb,YAAaA,EAAI,WAC3B,CAAS,CACT,EAAS,CAAE,KAAM,GAAM,EACjBA,EAAI,OAAO,CAAE,MAAO,EAAI,CAAE,CAChC,CAAK,EAID,GAAI,CAAC5F,EAAO,OAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAGvD,MAAM8F,EAAY9F,EAAO,MAAM,CAAC,EAChC,IAAI+F,EAAY,GACZC,EAAe,KAEftG,EAAAoG,GAAA,YAAAA,EAAW,UAAX,YAAApG,EAAoB,iBAAkB,SACxCqG,EAAYD,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,UAC7EE,EAAeF,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,cAIlF,MAAMG,EAAc,CAClB,YAAa,GACb,cAAejG,EAAO,YACtB,WAAYP,EAAQ,aAAe,GACnC,YAAaO,EAAO,WACrB,EAGG+F,IAAWE,EAAY,UAAY,IACnCD,IAAcC,EAAY,aAAe,IAG7C,MAAMC,EAAkB,KAAK,SAAS,IAAI,OAAQ,UAAU,EACxDlG,EAAO,QAAQ,UAAYA,EAAO,QAAQ,WAAakG,IACzDD,EAAY,SAAWjG,EAAO,QAAQ,UAOxC,IAAImG,IAAcnF,EAAA8E,GAAA,YAAAA,EAAW,UAAX,YAAA9E,EAAoB,gBACpB0C,EAAAoC,GAAA,YAAAA,EAAW,OAAX,YAAApC,EAAiB,gBACjBqB,GAAAD,EAAA9E,EAAO,SAAP,YAAA8E,EAAe,OAAf,YAAAC,EAAqB,cAAe,GAsBtD,GAnBI,CAACoB,KAAenB,EAAAc,GAAA,YAAAA,EAAW,QAAX,YAAAd,EAAkB,QAAS,GAErBc,EAAU,MAAM,KAAKhD,GAAQA,EAAK,SAAS,cAAc,CAAC,IAC3DmC,EAAAa,EAAU,OAAV,MAAAb,EAAgB,cACrCkB,EAAcL,EAAU,KAAK,aAI7BK,IACFF,EAAY,YAAcE,EAC1BF,EAAY,MAAQ,CAAC,cAAc,IAIjCf,EAAAY,GAAA,YAAAA,EAAW,UAAX,MAAAZ,EAAoB,SACtBe,EAAY,OAASH,EAAU,QAAQ,QAIrC9F,EAAO,OAAO,SAAW,CAAC,QAAS,MAAM,EAAE,SAAS8B,CAAQ,EAAG,CAEjE,MAAMsE,IAAiBhB,GAAAD,EAAA7C,EAAM,OAAO,SAAb,YAAA6C,EAAsBN,KAAtB,YAAAO,EAAgC,YAAWE,IAAAD,EAAA,OAAO,MAAM,SAAb,YAAAA,EAAsBR,KAAtB,YAAAS,GAAgC,SAC9FtF,EAAO,OAAO,UAAYoG,IAC5BH,EAAY,QAAUjG,EAAO,OAAO,QAE5C,CAGI,OAAAiG,EAAY,UAAYtD,EAAa,QAAQ,OAAO,MAG7CsD,CACX,CAME,OAAO,eAAe3D,EAAO,CAC3B,OAAO,OAAO,QAAQA,EAAM,SAAS,EAClC,KAAK,CAAC,CAAC5B,EAAQ2F,CAAK,IAAM,CACzB,MAAMpF,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,OAAOO,GAAQ,CAACA,EAAK,MAAQoF,GAAS,MAAM,0BAA0B,KAC9E,CAAO,CACP,CAUE,OAAO,cAAcvE,EAAU+C,EAASvC,EAAO,CRjc1C,IAAA5C,EAAAsB,EAAA0C,EAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,EQkcH,IAAIoB,EAAQ,GAEZ,OAAQxE,EAAQ,CACd,IAAK,QACH,MAAMyE,IAAa7G,EAAA,OAAO,MAAM,OAAOmF,CAAO,IAA3B,YAAAnF,EAA8B,QAASmF,EAEpD2B,GAAQxF,EAAAsB,GAAA,YAAAA,EAAO,OAAO,SAAd,YAAAtB,EAAuB6D,GAC/BuB,GAAiBI,GAAA,YAAAA,EAAO,YAAW9C,EAAA,OAAO,MAAM,OAAOmB,CAAO,IAA3B,YAAAnB,EAA8B,UAAW,MAC5E+C,IAAe3B,EAAA,OAAO,MAAM,UAAUsB,CAAc,IAArC,YAAAtB,EAAwC,QAASsB,EAEtEE,EAAQ,KAAK,KAAK,OAAO,yBAA0B,CACjD,MAAOC,EACP,QAASE,CACnB,CAAS,EACD,MACF,IAAK,OACL,IAAK,cACH,MAAMC,IAAc3B,EAAA,OAAO,MAAM,UAAUF,CAAO,IAA9B,YAAAE,EAAiC,QAASF,EAC9DyB,EAAQ,KAAK,KAAK,OAAO,wBAAyB,CAAE,QAASI,EAAa,EAC1E,MACF,IAAK,UACL,IAAK,eACH,MAAMC,IAAe3B,EAAA,OAAO,MAAM,UAAUH,CAAO,IAA9B,YAAAG,EAAiC,QAASH,EAC/DyB,EAAQ,KAAK,KAAK,OAAO,2BAA4B,CAAE,QAASK,EAAc,EAC9E,MACF,IAAK,gBACHL,EAAQ,KAAK,KAAK,SAAS,qBAAqB,EAChD,MACF,IAAK,OACH,MAAMM,GAAW1B,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuCL,GACxD,IAAIgC,EAAYhC,EAChB,GAAI+B,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFC,GAAYC,GAAA,YAAAA,EAAU,OAAQjC,CACxC,CACQyB,EAAQ,KAAK,KAAK,OAAO,wBAAyB,CAAE,KAAMO,EAAW,EACrE,MACF,IAAK,YACL,IAAK,YACHP,EAAQ,KAAK,KAAK,SAAS,iBAAiB,EAC5C,MACF,IAAK,aACL,IAAK,mBACHA,EAAQ,KAAK,KAAK,SAAS,kBAAkB,EAC7C,MACF,QACEA,EAAQ,KAAK,KAAK,SAAS,YAAY,CAC/C,CAEI,OAAOA,CACX,CACA,CAMO,MAAMS,WAAgC,MAAM,aAAa,KAAK,gCAAiC,CACpG,YAAYtE,EAAS,CAAE,EAAEa,EAAU,CAAE,EAAE7D,EAAU,GAAI,CAEnD,MAAMuH,EAAc,QAAQ,MAAM,YAAYvE,EAAQ,CACpD,cAAe,EACrB,CAAK,EAGDhD,EAAQ,SAAWA,EAAQ,UAAY,OAAO,KAAK,QAGnD,MAAMuH,EAAa1D,EAAS7D,CAAO,EAGnC,KAAK,OAASA,EAAQ,QAAU,CAAE,EAElC,KAAK,YAAcA,EAAQ,oBAAsBA,EAAQ,aAAe,GACxE,KAAK,OAASA,EAAQ,QAAU,GAChC,KAAK,QAAUA,EAAQ,SAAW,IACtC,CAKE,WAAW,gBAAiB,CAC1B,OAAO,QAAQ,MAAM,YAAY,MAAM,eAAgB,CACrD,QAAS,CAAC,SAAU,qBAAsB,gBAAgB,CAChE,CAAK,CACL,CAKE,0BAA0BS,EAAMuC,EAAQc,EAAQD,EAAS,CACvD,MAAMjE,EAAO,MAAM,0BAA0Ba,EAAMuC,EAAQc,EAAQD,CAAO,EAG1E,OAAAjE,EAAK,OAAS,KAAK,OACnBA,EAAK,QAAU,KAAK,QACpBA,EAAK,YAAc,KAAK,YACxBA,EAAK,WAAa,KAAK,OAAO,OAEvBA,CACX,CAKE,MAAM,oBAAoBmE,EAAQC,EAAShE,EAAS,CAClD,OAAAgE,EAAU,MAAM,MAAM,oBAAoBD,EAAQC,EAAShE,CAAO,EAE9D+D,IAAW,kBAEbC,EAAQ,OAAS,KAAK,OACtBA,EAAQ,QAAU,KAAK,QACvBA,EAAQ,YAAc,KAAK,YAC3BA,EAAQ,WAAa,KAAK,OAAO,QAG5BA,CACX,CAKE,MAAM,UAAUA,EAAShE,EAAS,CR5jB7B,IAAAC,EAAAsB,EAAA0C,EQikBH,GAJA,MAAM,UAAUD,EAAShE,CAAO,EAI5B,KAAK,QAAQ,cAAc,wBAAwB,EACrD,OAKF,IAAIkE,EAAgB,KAAK,QAAQ,cAAc,kBAAkB,EASjE,GAAIA,IAAkB,KAAK,QAAU,KAAK,OAAO,OAAS,GAAI,CAE5D,MAAMC,EAAe,CACnB,OAAQ,KAAK,OACb,QAAS,KAAK,QACd,gBAAiB,KAAK,OAAO,OAAS,EACtC,YAAa,KAAK,WACnB,EAEKC,EAAW,MAAM,eAAe,WAAWnF,CAAS,uCAAwCkF,CAAY,EAGxGE,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,UAAYD,EAGpBF,EAAc,WAAW,aAAaG,EAASH,CAAa,CAClE,CAGI,KAAK,uBAAwB,IAGzBD,GAAA1C,GAAAtB,EAAA,KAAK,OAAO,QAAZ,YAAAA,EAAoB,KAApB,YAAAsB,EAAwB,OAAxB,MAAA0C,EAA8B,aAAe,KAAK,OAAO,cAE3D,WAAW,IAAM,CACf,KAAK,QAAS,CACf,EAAE,GAAG,CAEZ,CAME,wBAAyB,CACP,KAAK,QAAQ,iBAAiB,iFAAiF,EACvH,QAAQK,GAAU,CACxBA,EAAO,iBAAiB,QAAUC,GAAU,CAC3BA,EAAM,cAAc,QAAQ,MACnD,CAAO,CACP,CAAK,CACL,CAKE,cAAcC,EAAYD,EAAO,CRhoB5B,IAAAtE,EAAAsB,EQioBH,MAAM,cAAciD,EAAYD,CAAK,EAGrC,MAAME,EAAsB,KAAK,QAAQ,cAAc,mCAAmC,EACtFA,IACF,KAAK,YAAcA,EAAoB,SAGzC,MAAMC,EAAU,KAAK,QAAQ,cAAc,kBAAkB,EACzDA,GAAWA,EAAQ,QACrB,KAAK,QAAU,SAASA,EAAQ,KAAK,GAAK,QAIxCzE,EAAAsE,EAAM,SAAN,YAAAtE,EAAc,QAAS,aAAasB,EAAAgD,EAAM,SAAN,MAAAhD,EAAc,SACpD,KAAK,OAAO,QAAUgD,EAAM,OAAO,MAGzC,CAME,aAAavB,EAAQ2B,EAAUC,EAAO,CAEpC,MAAMC,EAAkBF,GAAA,YAAAA,EAAU,IAAI,WAChCG,EAAaH,GAAA,YAAAA,EAAU,IAAI,MAI7BE,IACF7B,EAAO,QAAU6B,EAEjB,KAAK,OAAO,QAAUA,GAGxB,MAAMtE,EAAS,MAAM,aAAayC,EAAQ2B,EAAUC,CAAK,EAGzD,GAAIE,EAAY,CACd,MAAMC,EAAU,SAASD,CAAU,EAC9B,MAAMC,CAAO,IAChBxE,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAASwE,EAEhC,MAAe,KAAK,UAAY,QAAa,KAAK,UAAY,OACxDxE,EAAO,QAAUA,EAAO,SAAW,CAAE,EACrCA,EAAO,QAAQ,OAAS,KAAK,SAI/B,OAAOA,CACX,CAKE,MAAM,mBAAmBgE,EAAOS,EAAML,EAAU,CAK9C,GAHA,MAAM,MAAM,mBAAmBJ,EAAOS,EAAML,CAAQ,EAGhDA,EAAS,IAAI,IAAI,GAAKA,EAAS,IAAI,IAAI,IAAM,GAAI,CACnD,MAAMI,EAAU,SAASJ,EAAS,IAAI,IAAI,CAAC,EAC3C,GAAI,CAAC,MAAMI,CAAO,IAEhB,KAAK,QAAUA,EAGX,KAAK,OAAO,OAAS,KAAK,OAAO,MAAM,OAAS,GAClD,UAAWtE,KAAQ,KAAK,OAAO,MAC7BA,EAAK,QAAQ,OAASsE,CAIlC,CAGI,KAAK,YAAcJ,EAAS,IAAI,qBAAqB,IAAM,OAC/D,CAKE,eAAeM,EAAQ,CAGrB,MAAMC,EAAiB,MAAM,eAAeD,CAAM,EAGlD,GAAI,KAAK,UAAY,QAAa,KAAK,UAAY,KACjD,UAAWxE,KAAQyE,EACjBzE,EAAK,QAAQ,OAAS,KAAK,QAK/B,YAAK,OAAO,YAAc,KAAK,YAExByE,CACX,CAUE,aAAa,iBAAiBC,EAAQ9C,EAAU+C,EAASpF,EAAU,CAAA,EAAI,CRhvBlE,IAAAC,EAAAsB,EAAA0C,EAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EQkvBH,MAAMI,EAAS,CAAC,QAAS,MAAM,EAAE,SAASzD,CAAQ,EAG5CQ,EAAQsC,EAAO,CAAC,EACtB,GAAI,CAACtC,EAAO,OAAO,KAGnB,MAAMkD,EAAY,OAAO,KAAK,QAG9B,IAAIY,EAAiB,KACrB,GAAItE,IAAa,QAAS,CACxB,MAAM0E,EAAQlE,EAAM,OAAO,OAAOuC,CAAO,EACzCuB,GAAiBI,GAAA,YAAAA,EAAO,YAAW9G,EAAA,OAAO,MAAM,OAAOmF,CAAO,IAA3B,YAAAnF,EAA8B,UAAW,KAClF,SAAeoC,IAAa,OAAQ,CAE9B,MAAMmF,GAAOjG,EAAAsB,EAAM,OAAO,QAAb,YAAAtB,EAAqB6D,GAClCuB,GAAiBa,GAAA,YAAAA,EAAM,YAAWlC,GAAAD,GAAApB,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAoB,EAAuCD,KAAvC,YAAAE,EAAiD,UAAW,KACpG,CAGI,MAAMU,EAAa,CACjB,KAAMnD,EAAM,YAAa,EACzB,QAASA,EACT,QAAS8D,EACT,cAAe,GACf,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAM9D,EAAM,YAAa,EACzB,QAAS,CAAA,CACV,CAAA,CACF,EAGGR,IAAa,QACf2D,EAAW,MAAQZ,EACV/C,IAAa,SACtB2D,EAAW,KAAOZ,GAIpB,MAAMa,EAAgB,CACpB,OAAQ,GACR,KAAM,CACJ,QAAS,YAAY,WAAW,CAAE,MAAApD,CAAO,CAAA,CACjD,CACK,EAGKK,EAAe,CACnB,QAAS,CACP,OAAAiC,EACA,YAAaA,EAAO,KAAKe,GAAKtC,EAAmB,eAAesC,CAAC,CAAC,EAClE,OAAAJ,EACA,QAAAV,EACA,SAAUW,EACV,OAAQ,CACN,MAAOnC,EAAmB,cAAcvB,EAAU+C,EAASvC,CAAK,EAChE,SAAUsC,EAAO,IAAIe,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,CAC5C,EACD,GAAGlG,CACX,CACK,EAGKmG,EAAM,IAAI,KAAKH,EAAYC,EAAe/C,EAAa,OAAO,EAG9D3C,EAAS,MAAM,IAAI,QAAQ6F,GAAW,CAC1CD,EAAI,iBAAiB,QAAS,IAAM,CAElCC,EAAQ,CACN,MAAOD,EAAI,MACX,OAAQA,EAAI,OACZ,QAASA,EAAI,QACb,YAAaA,EAAI,WAC3B,CAAS,CACT,EAAS,CAAE,KAAM,GAAM,EACjBA,EAAI,OAAO,CAAE,MAAO,EAAI,CAAE,CAChC,CAAK,EAID,GAAI,CAAC5F,EAAO,OAASA,EAAO,MAAM,SAAW,EAAG,OAAO,KAGvD,MAAM8F,EAAY9F,EAAO,MAAM,CAAC,EAChC,IAAI+F,EAAY,GACZC,EAAe,KAEfhB,EAAAc,GAAA,YAAAA,EAAW,UAAX,YAAAd,EAAoB,iBAAkB,SACxCe,EAAYD,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,UAC7EE,EAAeF,EAAU,QAAQ,gBAAkB,OAAO,KAAK,QAAQ,SAAS,cAIlF,MAAMG,EAAc,CAClB,YAAa,GACb,cAAejG,EAAO,YACtB,WAAYP,EAAQ,aAAe,GACnC,YAAaO,EAAO,WACrB,EAGG+F,IAAWE,EAAY,UAAY,IACnCD,IAAcC,EAAY,aAAe,IAG7C,MAAMC,EAAkB,KAAK,SAAS,IAAI,OAAQ,UAAU,EACxDlG,EAAO,QAAQ,UAAYA,EAAO,QAAQ,WAAakG,IACzDD,EAAY,SAAWjG,EAAO,QAAQ,UAKxC,MAAMmG,IAAclB,EAAAa,GAAA,YAAAA,EAAW,UAAX,YAAAb,EAAoB,gBAAeC,EAAAY,GAAA,YAAAA,EAAW,OAAX,YAAAZ,EAAiB,cAAe,GACvF,OAAIiB,IACFF,EAAY,YAAcE,EAC1BF,EAAY,MAAQ,CAACE,CAAW,IAI9BhB,EAAAW,GAAA,YAAAA,EAAW,UAAX,MAAAX,EAAoB,SACtBc,EAAY,OAASH,EAAU,QAAQ,QAIrC9F,EAAO,OAAO,SAAW,CAAC,QAAS,MAAM,EAAE,SAAS8B,CAAQ,IAC9DmE,EAAY,QAAUjG,EAAO,OAAO,SAItCiG,EAAY,UAAYtD,EAAa,QAAQ,OAAO,MAG7CsD,CACX,CACA,CC/2BO,MAAMiB,EAAgB,CAS3B,OAAO,YAAa,CAGb,KAAK,KAAK,MAEf,KAAK,cAAe,CACxB,CAKE,OAAO,eAAgB,CACrB,KAAK,cAAchI,EAAY,uBAAwB,KAAK,eAAe,KAAK,KAAM,SAAS,CAAC,EAChG,KAAK,cAAcA,EAAY,sBAAuB,KAAK,eAAe,KAAK,KAAM,MAAM,CAAC,EAC5F,KAAK,cAAcA,EAAY,kBAAmB,KAAK,eAAe,KAAK,KAAM,OAAO,CAAC,EACzF,KAAK,cAAcA,EAAY,iBAAkB,KAAK,eAAe,KAAK,KAAM,MAAM,CAAC,EAEvF,KAAK,cAAcA,EAAY,mBAAoB,KAAK,eAAe,KAAK,KAAM,QAAQ,CAAC,EAC3F,KAAK,cAAcA,EAAY,mBAAoB,KAAK,eAAe,KAAK,KAAM,QAAQ,CAAC,EAC3F,KAAK,cAAcA,EAAY,oBAAqB,KAAK,eAAe,KAAK,KAAM,YAAY,CAAC,EAChG,KAAK,cAAcA,EAAY,uBAAwB,KAAK,eAAe,KAAK,KAAM,WAAW,CAAC,EAClG,KAAK,cAAcA,EAAY,oBAAqB,KAAK,eAAe,KAAK,KAAM,QAAQ,CAAC,CAEhG,CAOE,OAAO,cAAciI,EAAU3G,EAAS,CACtC,MAAM4G,EAAS,MAAM,GAAGD,EAAU3G,CAAO,EACzC,KAAK,gBAAgB,IAAI,CAAE,SAAA2G,EAAU,OAAAC,CAAM,CAAE,CACjD,CAKE,OAAO,iBAAkB,CACvB,SAAW,CAAE,SAAAD,EAAU,OAAAC,CAAM,IAAM,KAAK,gBACtC,MAAM,IAAID,EAAUC,CAAM,EAE5B,KAAK,gBAAgB,MAAO,CAChC,CAQE,OAAO,sBAAsB3E,EAAQhD,EAAS,CAM5C,GAJI,CAAC,KAAK,KAAK,MAIXgD,GAAA,MAAAA,EAAQ,cAAe,OAG3B,MAAMH,EAAQG,GAAA,YAAAA,EAAQ,QAGhBtB,EAAW1C,EAAa,EAK9B,GAHI,CAD4ByC,EAAa,IAAIC,EAAS,wBAAwB,GAAG,GAIjF,CAACmB,GAASA,EAAM,eAAiB,QACnC,OAIF,MAAM+E,EAAQ,KAAK,eAAe/E,CAAK,EAMvC,GALI,CAAC+E,GAASA,EAAM,KAAO,KAAK,KAAK,IAKjC,CAACA,EAAM,OACT,OAIF,IAAIvF,EAAW,UACX+C,EAAU,KAGd,OAAIpC,GAAA,MAAAA,EAAQ,SACVX,EAAWW,EAAO,KAAO,OAAS,UAClCoC,EAAUpC,EAAO,SACRA,GAAA,MAAAA,EAAQ,OACjBX,EAAW,QACX+C,EAAUpC,EAAO,OACRA,GAAA,MAAAA,EAAQ,OACjBX,EAAW,OACX+C,EAAUpC,EAAO,MAMfoC,GAAWpC,IACbA,EAAS,CAAE,GAAGA,EAAQ,QAASoC,CAAS,GAE1C,KAAK,iBAAiBvC,EAAO+E,EAAOvF,EAAUW,CAAM,EAG7C,EACX,CAUE,OAAO,eAAeX,EAAUW,EAAQc,EAAQD,EAAS,CT5IpD,IAAA5D,ES8IH,GAAI,CAAC,KAAK,KAAK,KAAM,OAIrB,IAAI4C,EACJ,GAAIR,IAAa,cAAgBW,aAAkB,OAKjD,GAJAH,EAAQG,EAEJc,GAAA,MAAAA,EAAQ,eAERD,GAAA,MAAAA,EAAS,cAAe,WACvB,CAEL,GAAIb,GAAA,MAAAA,EAAQ,eAAiBc,GAAA,MAAAA,EAAQ,eAAiBD,GAAA,MAAAA,EAAS,cAC7D,OAIFhB,IAAQ5C,EAAA+C,EAAO,UAAP,YAAA/C,EAAgB,QAAS+C,EAAO,SAAWA,EAAO,KAChE,CAGI,MAAMtB,EAAW1C,EAAa,EAI9B,GAFI,CAD4ByC,EAAa,IAAIC,EAAS,wBAAwB,GAAG,GAGjF,CAACmB,GAASA,EAAM,eAAiB,QACnC,OAIF,MAAM+E,EAAQ,KAAK,eAAe/E,CAAK,EACvC,GAAI,GAAC+E,GAASA,EAAM,KAAO,KAAK,KAAK,KAMhCA,EAAM,OAOX,YAAK,oBAAoB/E,EAAO+E,EAAOvF,EAAUW,EAAQc,EAAQD,CAAO,EAGjE,EACX,CAWE,aAAa,oBAAoBhB,EAAO+E,EAAOvF,EAAUW,EAAQc,EAAQD,EAAS,CT1M7E,IAAA5D,EAAAsB,ES2MH,GAAI,CAGF,MAAMsG,EAAc,CAAC,QAAS,MAAM,EAAE,SAASxF,CAAQ,EAAIiF,GAA0B1D,EAGrF,IAAIoC,EAAa,CACf,MAAO,CAAC,CACN,MAAO,CAAE,EACT,KAAM,CAAE,EACR,QAAS,CAAA,CACV,CAAA,CACF,EAGD,OAAQ3D,EAAQ,CACd,IAAK,UACH2D,EAAW,QAAUhD,EAAO,WAAW/C,EAAA+C,EAAO,UAAP,YAAA/C,EAAgB,SACvD,MACF,IAAK,OACH+F,EAAW,QAAUhD,EAAO,WAAWzB,EAAAyB,EAAO,UAAP,YAAAzB,EAAgB,SAEnDyB,EAAO,UAAY,OAASA,EAAO,cAAgB,SACrDX,EAAW,iBAEb,MACF,IAAK,QACH2D,EAAW,MAAQhD,EAAO,MAC1BgD,EAAW,QAAUhD,EAAO,QAC5B,MACF,IAAK,OACHgD,EAAW,KAAOhD,EAAO,KACzBgD,EAAW,QAAUhD,EAAO,QAC5B,MACF,IAAK,gBACHgD,EAAW,QAAU,MACrB,KACV,CAEM,MAAMhG,EAAU,CACd,OAAQ,CAAC6C,CAAK,EACd,SAAAR,EACA,OAAQ,GACR,mBAAoB,GACpB,YAAa,EACd,EAIK9B,EAAS,MADE,IAAIsH,EAAY7B,EAAY,CAAA,EAAIhG,CAAO,EAC1B,OAAO,EAAI,EAIzC,GAAI,CAACO,GAAU,CAACA,EAAO,YAAa,CAMlC,MAAM,KAAK,kBAAkBsC,EAAOR,EAAUW,EAAQzC,GAAU,EAAE,EAClE,MACR,CAGM,MAAMiG,EAAc,CAClB,GAAGxD,EACH,GAAGzC,EACH,YAAa,KAAK,KAAK,IACxB,EAED,KAAK,iBAAiBsC,EAAO+E,EAAOvF,EAAUmE,CAAW,CAE1D,MAAe,CAEd,KAAK,iBAAiB3D,EAAO+E,EAAOvF,EAAUW,CAAM,CAC1D,CACA,CASE,aAAa,kBAAkBH,EAAOR,EAAUyF,EAAgBC,EAAc,CAE5E,MAAM/E,EAAS,CACb,GAAG8E,EACH,UAAWC,EAAa,WAAaD,EAAe,UACpD,aAAcC,EAAa,cAAgBD,EAAe,aAC1D,MAAOC,EAAa,aAAeD,EAAe,MAClD,OAAQC,EAAa,IAAMD,EAAe,OAC1C,SAAUC,EAAa,UAAYD,EAAe,SAClD,cAAe,EAChB,EAEK5E,EAAe,CACnB,UAAW,GACX,cAAe,EAChB,EAEK+C,EAAgB,CACpB,SAAUjD,EAAO,SACjB,OAAQ,GACR,cAAe,EAChB,EAED,GAAI,CACF,OAAQX,EAAQ,CACd,IAAK,OACH,MAAMQ,EAAM,gBAAgBiF,EAAe,QAAS9E,EAAQE,EAAc+C,CAAa,EACvF,MACF,IAAK,UACH,MAAMpD,EAAM,iBAAiBiF,EAAe,QAAS9E,EAAQE,EAAc+C,CAAa,EACxF,MACF,IAAK,QACH,MAAMpD,EAAM,UAAUiF,EAAe,MAAO9E,EAAQE,EAAc+C,CAAa,EAC/E,MACF,IAAK,OACH,MAAMpD,EAAM,cAAciF,EAAe,KAAM9E,EAAQE,EAAc+C,CAAa,EAClF,MACF,IAAK,gBACH,MAAMpD,EAAM,kBAAkBG,EAAQE,EAAc+C,CAAa,EACjE,KAEV,CACK,MAAe,CACpB,CACA,CAWE,aAAa,yBAAyBpD,EAAO+E,EAAOvF,EAAUW,EAAQc,EAAQD,EAAS,CACrF,GAAI,CAWF,MAAMmE,EAAiB,CACrB,GAAGhF,EACH,YAVkB,MAAOwD,IAEzB,KAAK,iBAAiB3D,EAAO+E,EAAOvF,EAAUmE,CAAW,EAElD,IAAI,KAAK,MAAM,EAAE,SAAS,CAAC,MAAO,EAAK,CAAC,GAO/C,WAAY,EACb,EAGKqB,EAAc/D,EAAO,IAIrBvD,EAAS,MAHI,IAAIsH,EAAYG,EAAgBlE,EAAO,OAAO,EAGjC,OAAO,EAAI,CAE5C,MAAe,CAEd,KAAK,iBAAiBjB,EAAO+E,EAAOvF,EAAUW,CAAM,CAC1D,CACA,CAOE,OAAO,eAAeH,EAAO,CAE3B,MAAMoF,EAAYpF,EAAM,WAAa,CAAE,EAEvC,SAAW,CAAC5B,EAAQ2F,CAAK,IAAK,OAAO,QAAQqB,CAAS,EACpD,GAAIrB,GAAS,MAAM,0BAA0B,MAAO,CAClD,MAAMpF,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,GAAIO,GAAQ,CAACA,EAAK,KAChB,OAAOA,CAEjB,CAGI,OAAO,IACX,CASE,OAAO,iBAAiBqB,EAAO+E,EAAOvF,EAAUW,EAAQ,CTlZnD,IAAA/C,ESmZH,MAAMyB,EAAW1C,EAAa,EACxBkJ,EAAczG,EAAa,IAAIC,EAAS,YAAY,GAAG,EAG7D,IAAI0D,EAAU,KACVrC,EAAa,KACjB,OAAQV,EAAQ,CACd,IAAK,UACL,IAAK,OACH+C,EAAUpC,EAAO,QACjB,MACF,IAAK,QACHoC,EAAUpC,EAAO,MACjB,MACF,IAAK,OACHoC,EAAUpC,EAAO,KACjB,MACF,IAAK,SACL,IAAK,SACH,IAAI/C,EAAA+C,EAAO,UAAP,MAAA/C,EAAgB,KAAM,CACxBmF,EAAUpC,EAAO,QAAQ,KAAK,GAE9B,MAAMC,EAAWd,GAAa,oBAAoBa,EAAO,QAAQ,KAAMX,CAAQ,EAC3EY,IACFF,EAAaE,EAAS,GAElC,CACQ,MACF,IAAK,SACHmC,EAAUpC,EAAO,aACjB,KACR,CAGI,MAAMmF,EAAc,CAClB,UAAWnF,EAAO,WAAa,GAC/B,aAAcA,EAAO,cAAgB,GACrC,YAAaA,EAAO,aAAe,EACnC,MAAOA,EAAO,OAAS,CAAE,EACzB,SAAUA,EAAO,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EACjE,cAAeA,EAAO,eAAiB,GACvC,cAAeA,EAAO,eAAiB,GACvC,eAAgBA,EAAO,gBAAkB,GACzC,QAASA,EAAO,QAChB,SAAUA,EAAO,SACjB,SAAUA,EAAO,SACjB,OAAQA,EAAO,OACf,YAAaA,EAAO,YACpB,YAAaA,EAAO,aAAe,GACnC,YAAaA,EAAO,cAAgB,GACpC,OAAQA,EAAO,OACf,MAAOA,EAAO,MACd,cAAeA,EAAO,cACtB,YAAaA,EAAO,WACrB,EAGD,OAAO,KAAKmF,CAAW,EAAE,QAAQC,GAAO,CAClCD,EAAYC,CAAG,IAAM,QACvB,OAAOD,EAAYC,CAAG,CAE9B,CAAK,EAGD,MAAMC,EAAc,CAClB,KAAM,cACN,UAAW,QAAQ,MAAM,SAAU,EACnC,QAASxF,EAAM,GACf,SAAAR,EACA,QAAA+C,EACA,WAAArC,EACA,OAAQoF,EACR,WAAYD,EACZ,eAAgB,MAAM,KAAK,KAAK,KAAK,OAAO,EAAE,IAAII,GAAKA,EAAE,EAAE,EAC3D,gBAAiB7G,EAAa,IAAIC,EAAS,kBAAkB,GAAG,CACjE,EAGDP,EAAW,YAAY,oBAAqByG,EAAM,GAAIS,CAAW,EAGjE,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,qDAAsD,CAC3F,OAAQT,EAAM,KACd,MAAO/E,EAAM,IACnB,CAAK,CAAC,CACN,CACA,CAzdE3C,EAJWuH,GAIJ,kBAAkB,IAAI,KCJxB,SAASc,GAAmBlG,EAAU+C,EAAS,CVZ/C,IAAAnF,EAAAsB,EAAA0C,EAAAoB,EAAAC,EUaL,IAAIkD,EAAU,KAAK,KAAK,SAAS,0BAA0BnG,CAAQ,EAAE,GAAKA,EAE1E,GAAI+C,EACF,OAAQ/C,EAAQ,CACd,KAAKjD,EAAW,MACdoJ,GAAW,OAAKvI,EAAA,OAAO,MAAM,OAAOmF,CAAO,IAA3B,YAAAnF,EAA8B,QAASmF,CAAO,IAC9D,MACF,KAAKhG,EAAW,KACdoJ,GAAW,OAAKjH,EAAA,OAAO,MAAM,UAAU6D,CAAO,IAA9B,YAAA7D,EAAiC,QAAS6D,CAAO,IACjE,MACF,KAAKhG,EAAW,QACdoJ,GAAW,OAAKvE,EAAA,OAAO,MAAM,UAAUmB,CAAO,IAA9B,YAAAnB,EAAiC,QAASmB,CAAO,IACjE,MACF,KAAKhG,EAAW,KACd,MAAM+H,GAAW7B,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuCF,GACxD,GAAI+B,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFqB,GAAW,MAAKnB,GAAA,YAAAA,EAAU,OAAQjC,CAAO,GACnD,MACUoD,GAAW,KAAKpD,CAAO,IAEzB,MACF,KAAKhG,EAAW,OACdoJ,EAAU,GAAGA,CAAO,KAAKpD,CAAO,GAChC,KACR,CAGE,OAAOoD,CACT,CAOO,SAASC,GAAyBC,EAAsBC,EAAuBJ,GAAoB,CACxG,GAAIG,EAAqB,SAAW,EAAG,OAGvC,MAAME,EAAsB,CAAE,EAC9B,UAAWC,KAASH,EAAsB,CACxC,MAAMN,EAAM,GAAGS,EAAM,QAAQ,IAAIA,EAAM,SAAW,EAAE,GAC/CD,EAAoBR,CAAG,IAC1BQ,EAAoBR,CAAG,EAAI,CACzB,SAAUS,EAAM,SAChB,QAASA,EAAM,QACf,OAAQ,CAAE,EACV,GAAIA,EAAM,EACX,GAEHD,EAAoBR,CAAG,EAAE,OAAO,KAAKS,EAAM,KAAK,CACpD,CAEE,MAAMC,EAAU,OAAO,OAAOF,CAAmB,EACjD,GAAIE,EAAQ,SAAW,GAAKA,EAAQ,CAAC,EAAE,OAAO,SAAW,EAAG,CAE1D,MAAMnH,EAAQmH,EAAQ,CAAC,EACvB,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,yDAA0D,CAC/F,GAAInH,EAAM,GACV,SAAUgH,EAAqBhH,EAAM,SAAUA,EAAM,OAAO,CAClE,CAAK,CAAC,CACN,KAAS,CAEL,MAAMoH,EAAW,CAAE,EACnB,UAAWpH,KAASmH,EAAS,CAC3B,MAAME,EAAkBL,EAAqBhH,EAAM,SAAUA,EAAM,OAAO,EACpEsH,EAAatH,EAAM,OAAO,KAAK,IAAI,EACzCoH,EAAS,KAAK,GAAGC,CAAe,KAAKC,CAAU,GAAG,CACxD,CAEI,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,kEAAmE,CACxG,GAAIH,EAAQ,CAAC,EAAE,GACf,SAAUC,EAAS,KAAK,IAAI,CAClC,CAAK,CAAC,CACN,CACA,CA0CO,SAASG,GAAkBC,EAAU3H,EAAO,KAAK,KAAM,CAC5D,GAAI,EAAC2H,GAAA,MAAAA,EAAU,QAAQ,OAERA,EACZ,IAAIC,GAAM,OAAO,OAAO,IAAIA,CAAE,CAAC,EAC/B,OAAOd,GAAKA,CAAC,EAET,QAAQA,GAAKA,EAAE,UAAU,GAAM,CAAE,KAAA9G,CAAI,CAAE,CAAC,CACjD,CA0CO,SAAS6H,IAAoB,CVrL7B,IAAApJ,EUsLL,MAAO,GAACA,EAAA,mBAAI,UAAJ,MAAAA,EAAa,WACvB,CAMO,SAASqJ,GAAmBC,EAAY,CAC7C,MAAMC,EAAO,SAAS,cAAc,MAAM,EACtCD,EACFC,EAAK,UAAU,IAAI,kBAAkB,EAErCA,EAAK,UAAU,OAAO,kBAAkB,CAE5C,CVpMO,IAAAC,EWaQ,MAAMC,EAAN,MAAMA,UAAyB,QAAQ,aAAa,IAAI,2BAA2B,QAAQ,aAAa,IAAI,aAAa,CAAE,CAOxI,YAAY1J,EAAU,GAAI,CACxB,MAAMA,CAAO,EAySfE,EAAA,uBAAmBqE,GAAU,CAE3B,GAAI,KAAK,SAAU,OAGnB,MAAMoF,EAAO,KAAK,QACbA,IAGDpF,EAAM,OAAO,QAAQ,qBAAqB,GAG1CoF,EAAK,SAASpF,EAAM,MAAM,GAG1BA,EAAM,OAAO,QAAQ,uBAAuB,GAG5CA,EAAM,OAAO,QAAQ,8BAA8B,GAGvD,KAAK,MAAO,EAChB,GA5TI,KAAK,eAAiB,IAAI,IAC1B,KAAK,WAAa,KAClB,KAAK,oBAAsB,KAC3B,KAAK,SAAW,GAEhB,KAAK,gBAAkB,KAAK,KAAK,QAAQjF,EAAO,GAAI,qBAAqB,GAAK,GAG9E,KAAK,8BAA+B,CACxC,CAuBE,MAAM,gBAAgBU,EAAS,CXxD1B,IAAAC,EWyDH,MAAM+D,EAAU,MAAM,MAAM,gBAAgBhE,CAAO,EAG7CmF,EAAS,KAAK,OAAO,SACrByE,EAAW,CAAE,EACbC,EAAY,CAAE,EAGdC,EAAe,KAAK,OAAO,OAEjC,UAAWjH,KAASsC,EAAQ,CAE1B,GAAItC,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAO,SAExD,MAAMkH,EAAY,CAChB,GAAIlH,EAAM,GACV,KAAMA,EAAM,KACZ,KAAMA,EAAM,KACZ,IAAKA,EAAM,IACX,SAAU,KAAK,eAAe,IAAIA,EAAM,EAAE,EAC1C,YAAa,KAAK,eAAeA,CAAK,CACvC,EAGqB,OAAO,QAAQA,EAAM,SAAS,EACjD,KAAK,CAAC,CAAC5B,EAAQ2F,CAAK,IAAM,CACzB,MAAMpF,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,OAAOO,GAAQ,CAACA,EAAK,MAAQoF,GAAS,MAAM,0BAA0B,KAChF,CAAS,EAGDgD,EAAS,KAAKG,CAAS,EAGnBD,GACsBA,EAAa,OAAO,KAAKE,GAASA,EAAM,UAAYnH,EAAM,EAAE,GAElFgH,EAAU,KAAKE,CAAS,CAIpC,CAGI,MAAMrI,EAAW1C,EAAa,EACxBiL,EAAsBxI,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EACvEwG,EAAczG,EAAa,IAAIC,EAAS,YAAY,GAAG,EAGvDwI,EAAgB,KAAK,aAAe,KAAON,EAAWC,EACtDM,EAAcD,EAAc,OAAS,GACzCA,EAAc,MAAMrH,GAAS,KAAK,eAAe,IAAIA,EAAM,EAAE,CAAC,EAG1DuH,EAAe,CAAE,EACvB,GAAI,KAAK,eAAe,KAAO,EAC7B,SAAW,CAAChC,EAAKiC,CAAM,IAAK,OAAO,QAAQ/K,EAAO,oBAAoB,EACpE8K,EAAa,KAAK,CAChB,GAAIhC,EACJ,KAAM,KAAK,KAAK,SAAS,0BAA0BiC,EAAO,IAAI,EAAE,GAAKA,EAAO,MAC5E,SAAUA,EAAO,SAAW,KAC5B,WAAY,CAAC,CAACA,EAAO,QACrB,SAAU,KAAK,sBAAwBjC,CACjD,CAAS,EAKL,MAAMkC,EAAY,CAAE,EACpB,GAAI,KAAK,qBAAuB,KAAK,eAAe,KAAO,EAAG,CAC5D,MAAMC,EAAiBjL,EAAO,qBAAqB,KAAK,mBAAmB,EAC3E,GAAIiL,GAAkBA,EAAe,QAAS,CAE5C,MAAMC,EAAe,MAAM,KAAK,KAAK,cAAc,EAAE,CAAC,EAChD3H,EAAQ,KAAK,OAAO,IAAI2H,CAAY,EAG1C,GAAID,EAAe,UAAY,QAAS,CAEtC,MAAME,IAAWxK,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAAS,OAAO,MAAM,OAAS,CAAE,EAEjF,SAAW,CAACmI,EAAKjB,CAAQ,IAAK,OAAO,QAAQsD,CAAQ,EAAG,CACtD,IAAIC,EAAQtC,EAGZ,GAAIjB,GAAA,MAAAA,EAAU,GAAI,CAEhB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFuD,GAAQrD,GAAA,YAAAA,EAAU,OAAQe,CACxC,MAGcsC,EAAQtC,EAAI,QAAQ,WAAY,KAAK,EAAE,QAAQ,KAAMuC,GAAOA,EAAI,YAAa,CAAA,EAAE,KAAM,EAGvFL,EAAU,KAAK,CACb,GAAIlC,EACJ,KAAMsC,EACN,SAAU,EACxB,CAAa,CACb,CAGUJ,EAAU,KAAK,CAACpE,EAAG,IAAMA,EAAE,KAAK,cAAc,EAAE,IAAI,CAAC,CAC/D,SAEiBrD,GAAS0H,EAAe,UAAW,CAC1C,MAAMK,EAAW,QAAQ,MAAM,YAAY/H,EAAO0H,EAAe,SAAS,GAAK,CAAE,EAG3EM,EAAa,OAAO,MAAMN,EAAe,OAAO,EAEtD,SAAW,CAACnC,EAAKxI,CAAI,IAAK,OAAO,QAAQgL,CAAQ,EAAG,CAClD,IAAIF,EAAQ,GAGRH,EAAe,UAAY,WAAYM,GAAA,MAAAA,EAAazC,KAI/CmC,EAAe,UAAY,cAAeM,GAAA,MAAAA,EAAazC,IAH9DsC,EAAQG,EAAWzC,CAAG,EAAE,MAQxBsC,EAAQ9K,EAAK,OAAS,KAAK,KAAK,SAASA,EAAK,MAAQwI,CAAG,GAAKA,EAGhEkC,EAAU,KAAK,CACb,GAAIlC,EACJ,KAAMsC,EACN,SAAU,EACxB,CAAa,CACb,CAGcH,EAAe,UAAY,UAC7BD,EAAU,KAAK,CAACpE,EAAG4E,IAAM5E,EAAE,KAAK,cAAc4E,EAAE,IAAI,CAAC,CAEjE,CACA,CACA,CAEI,MAAO,CACL,GAAG9G,EACH,OAAQkG,EACR,WAAY,KAAK,WACjB,QAAS,KAAK,aAAe,KAC7B,SAAU,KAAK,aAAe,MAC9B,YAAa,KAAK,WAClB,oBAAAD,EACA,YAAA/B,EACA,YAAAiC,EACA,kBAAmB,KAAK,eAAe,KAAO,EAC9C,aAAAC,EACA,UAAAE,EACA,UAAW,GACX,aAAc,KAAK,SACnB,gBAAiB,KAAK,eACvB,CACL,CAKE,eAAezH,EAAO,CX9NjB,IAAA5C,EAAAsB,EAAA0C,EAAAoB,EAAAC,EW+NH,MAAMyF,EAASlI,EAAM,OACfmI,EAAQ,CAAE,EAGhB,OAAI/K,EAAA8K,EAAO,aAAP,MAAA9K,EAAmB,IACrB+K,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,WAAW,GAAG,KACpC,CAAO,GAICxJ,EAAAwJ,EAAO,aAAP,MAAAxJ,EAAmB,IACrByJ,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,WAAW,GAAG,KACpC,CAAO,GAIC9G,EAAA8G,EAAO,aAAP,MAAA9G,EAAmB,SACrB+G,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,WAAW,OACjC,CAAO,GAICzF,GAAAD,EAAA0F,EAAO,SAAP,YAAA1F,EAAe,MAAf,MAAAC,EAAoB,SACtB0F,EAAM,KAAK,CACT,OAAQ,KACR,MAAOD,EAAO,OAAO,IAAI,OACjC,CAAO,EAGIC,CACX,CAKE,UAAUhH,EAAShE,EAAS,CAK1B,GAJA,MAAM,UAAUgE,EAAShE,CAAO,EAChC,KAAK,iBAAkB,EAGnB,KAAK,gBAAiB,CACxB,MAAMiL,EAAgB,KAAK,QAAQ,cAAc,iBAAiB,EAC5DC,EAAiB,KAAK,QAAQ,cAAc,YAAY,EAC1DD,GACFA,EAAc,UAAU,IAAI,UAAU,EAEpCC,GACFA,EAAe,UAAU,IAAI,UAAU,CAE/C,CAGI,WAAW,IAAM,CACf,SAAS,iBAAiB,QAAS,KAAK,gBAAiB,EAAI,CAC9D,EAAE,GAAG,EAGN,KAAK,kBAAoB,MAAM,GAAG,eAAgB,KAAK,sBAAsB,KAAK,IAAI,CAAC,CAC3F,CAKE,sBAAsBlB,EAAOmB,EAAY,CAElC,KAAK,WAGN,KAAK,sBAGL,KAAK,qBACP,aAAa,KAAK,mBAAmB,EAGvC,KAAK,oBAAsB,WAAW,IAAM,CAE1C,KAAK,8BAA+B,EAGpC,KAAK,OAAQ,EAEb,KAAK,oBAAsB,IAC5B,EAAE,GAAG,GACV,CAgCE,kBAAmB,CXzVd,IAAAlL,EAAAsB,EAAA0C,EAAAoB,EAAAC,EW2VH,MAAM8F,EAAO,KAAK,SAGlBnL,EAAAmL,EAAK,cAAc,yBAAyB,IAA5C,MAAAnL,EAA+C,iBAAiB,SAAU,KAAK,sBAAsB,KAAK,IAAI,IAC9GsB,EAAA6J,EAAK,cAAc,sBAAsB,IAAzC,MAAA7J,EAA4C,iBAAiB,SAAU,KAAK,qBAAqB,KAAK,IAAI,IAC1G0C,EAAAmH,EAAK,cAAc,oBAAoB,IAAvC,MAAAnH,EAA0C,iBAAiB,SAAU,KAAK,mBAAmB,KAAK,IAAI,IAGtGoB,EAAA+F,EAAK,cAAc,qBAAqB,IAAxC,MAAA/F,EAA2C,iBAAiB,QAAS,KAAK,cAAc,KAAK,IAAI,IAGjGC,EAAA8F,EAAK,cAAc,iBAAiB,IAApC,MAAA9F,EAAuC,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,GAGnF8F,EAAK,iBAAiB,YAAY,EAC1C,QAAQC,GAAO,CAClBA,EAAI,iBAAiB,QAAS,KAAK,YAAY,KAAK,IAAI,CAAC,CAC/D,CAAK,EAGDD,EAAK,iBAAiB,QAAQ,EAAE,QAAQvI,GAAS,CAC/CA,EAAM,iBAAiB,QAAS,KAAK,cAAc,KAAK,IAAI,CAAC,CACnE,CAAK,EAEDuI,EAAK,iBAAiB,eAAe,EAAE,QAAQE,GAAa,CAC1DA,EAAU,iBAAiB,QAAS,KAAK,oBAAoB,KAAK,IAAI,CAAC,CAC7E,CAAK,EAGD,MAAMC,EAAwBH,EAAK,cAAc,gBAAgB,EAC7DG,GACFA,EAAsB,iBAAiB,QAAUhH,GAAU,CACzD,MAAMiH,EAAWjH,EAAM,OAAO,QAAQ,IAAI,EAC1C,GAAIiH,GAAYA,EAAS,QAAQ,GAAI,CAEnC,MAAMC,EAAc,CAClB,GAAGlH,EACH,cAAeiH,CAChB,EACD,KAAK,oBAAoBC,CAAW,CAC9C,CACA,CAAO,EAIH,MAAMC,EAAqBN,EAAK,cAAc,aAAa,EACvDM,GACFA,EAAmB,iBAAiB,QAAUnH,GAAU,CACtD,MAAMiH,EAAWjH,EAAM,OAAO,QAAQ,IAAI,EAC1C,GAAIiH,GAAYA,EAAS,QAAQ,GAAI,CAEnC,MAAMC,EAAc,CAClB,GAAGlH,EACH,cAAeiH,CAChB,EACD,KAAK,iBAAiBC,CAAW,CAC3C,CACA,CAAO,CAEP,CAKE,MAAM,sBAAsBlH,EAAO,CACjC,MAAM7C,EAAW1C,EAAa,EACxB2M,EAAUpH,EAAM,OAAO,QAC7B,MAAM9C,EAAa,IAAIC,EAAS,oBAAoB,IAAKiK,CAAO,EAGhEC,GAAY,uBAAuBD,CAAO,CAE9C,CAKE,MAAM,qBAAqBpH,EAAO,CAChC,MAAM7C,EAAW1C,EAAa,EACxB6M,EAAOtH,EAAM,OAAO,QAC1B,MAAM9C,EAAa,IAAIC,EAAS,YAAY,IAAKmK,CAAI,CACzD,CAKE,mBAAmBtH,EAAO,CACxB,MAAMuH,EAAYvH,EAAM,OAAO,QAG/B,KAAK,oBAAsB,IAGZ,KAAK,aAAe,KACjC,KAAK,OAAO,SAAS,OAAO,GAAK,KAAK,eAAe,CAAC,CAAC,EACvD,KAAK,OAAO,SAAS,OAAO,GAAK,CAAC,KAAK,eAAe,CAAC,GAAK,KAAK,iBAAiB,CAAC,CAAC,GAG/E,QAAQ1B,GAAS,CAClBiJ,GACF,KAAK,eAAe,IAAIjJ,EAAM,EAAE,EAChC,KAAK,4BAA4BA,EAAM,GAAI,EAAI,IAE/C,KAAK,eAAe,OAAOA,EAAM,EAAE,EACnC,KAAK,4BAA4BA,EAAM,GAAI,EAAK,EAExD,CAAK,EAGD,WAAW,IAAM,CACf,KAAK,oBAAsB,EAC5B,EAAE,GAAG,EAGN,KAAK,OAAQ,EAEb,KAAK,8BAA+B,CACxC,CAKE,cAAc0B,EAAO,CACnBA,EAAM,eAAgB,EACtB,KAAK,SAAW,CAAC,KAAK,SAGtB,MAAMwH,EAAWxH,EAAM,cACvBwH,EAAS,UAAU,OAAO,kBAAmB,sBAAsB,EACnEA,EAAS,UAAU,IAAI,KAAK,SAAW,kBAAoB,sBAAsB,CAErF,CAKE,MAAM,iBAAiBxH,EAAO,CAC5BA,EAAM,eAAgB,EAGtB,KAAK,gBAAkB,CAAC,KAAK,gBAG7B,MAAM,KAAK,KAAK,QAAQjF,EAAO,GAAI,sBAAuB,KAAK,eAAe,EAG9E,MAAM2L,EAAgB1G,EAAM,eAAiBA,EAAM,OAAO,QAAQ,iBAAiB,EAC/E0G,GACFA,EAAc,UAAU,OAAO,WAAY,KAAK,eAAe,EAIjE,MAAMC,EAAiB,KAAK,QAAQ,cAAc,YAAY,EAC1DA,GACFA,EAAe,UAAU,OAAO,WAAY,KAAK,eAAe,CAGtE,CAKE,+BAAgC,CX7f3B,IAAAjL,EW+fH,MAAM+L,IAAmB/L,EAAA,OAAO,SAAP,YAAAA,EAAe,aAAc,CAAE,EAGxD,KAAK,eAAe,MAAO,EAG3B,UAAW+J,KAASgC,EAClB,GAAIhC,EAAM,QACR,KAAK,eAAe,IAAIA,EAAM,MAAM,EAAE,EAGlC,KAAK,eAAe,OAAS,GAAG,CAElC,MAAMiC,EAAO,KAAK,eAAejC,EAAM,KAAK,EAC5C,KAAK,WAAaiC,EAAO,KAAO,KAC1C,CAIA,CAKE,eAAepJ,EAAO,CAEpB,OAAIA,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAc,GAExD,OAAO,QAAQA,EAAM,SAAS,EAClC,KAAK,CAAC,CAAC5B,EAAQ2F,CAAK,IAAM,CACzB,MAAMpF,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,OAAOO,GAAQ,CAACA,EAAK,MAAQoF,GAAS,MAAM,0BAA0B,KAC9E,CAAO,CACP,CAKE,iBAAiB/D,EAAO,CAEtB,GAAIA,EAAM,OAAS,aAAeA,EAAM,OAAS,MAAO,MAAO,GAE/D,MAAMiH,EAAe,KAAK,OAAO,OACjC,OAAOA,GAAgBA,EAAa,OAAO,KAAKE,GAASA,EAAM,UAAYnH,EAAM,EAAE,CACvF,CAKE,MAAM,YAAY0B,EAAO,CXhjBpB,IAAAtE,EWijBH,MAAMoL,EAAM9G,EAAM,cAAc,QAAQ,IACpC8G,IAAQ,KAAK,aAGjB,KAAK,eAAe,MAAO,GAG3BpL,EAAA,OAAO,SAAP,MAAAA,EAAe,aAGf,KAAK,oBAAsB,KAE3B,KAAK,WAAaoL,EAClB,MAAM,KAAK,OAAQ,EACvB,CAKE,cAAc9G,EAAO,CAEnB,GAAIA,EAAM,OAAO,QAAQ,eAAe,EAAG,OAG3C,MAAM2H,EADe3H,EAAM,cACE,QAAQ,GACrC,KAAK,sBAAsB2H,CAAO,CACtC,CAKE,oBAAoB3H,EAAO,CACzBA,EAAM,gBAAe,EACrB,MAAM2H,EAAU3H,EAAM,cAAc,QAAQ,GAC5C,KAAK,sBAAsB2H,CAAO,CACtC,CAKE,sBAAsBA,EAAS,CAE7B,KAAK,oBAAsB,GAEvB,KAAK,eAAe,IAAIA,CAAO,GACjC,KAAK,eAAe,OAAOA,CAAO,EAElC,KAAK,4BAA4BA,EAAS,EAAK,IAE/C,KAAK,eAAe,IAAIA,CAAO,EAE/B,KAAK,4BAA4BA,EAAS,EAAI,GAIhD,WAAW,IAAM,CACf,KAAK,oBAAsB,EAC5B,EAAE,GAAG,EAGN,KAAK,OAAQ,EAEb,KAAK,8BAA+B,EACpC,KAAK,sBAAuB,CAChC,CAKE,4BAA4BA,EAASC,EAAU,CAE7C,GAAI,CADU,KAAK,OAAO,OACd,OAGZ,MAAMC,EAAS,OAAO,OAAO,WAAW,OAAO9D,GAAC,CX3nB7C,IAAArI,EW2nBiD,QAAAA,EAAAqI,EAAE,QAAF,YAAArI,EAAS,MAAOiM,EAAO,EAE3E,UAAWlC,KAASoC,EACdD,EAEFnC,EAAM,QAAQ,CAAE,cAAe,EAAK,CAAE,EAGtCA,EAAM,QAAS,CAGvB,CAKE,+BAAgC,CAG9B,KAAK,OAAQ,CACjB,CAKE,uBAAwB,CACtB,MAAMqC,EAAoB,KAAK,QAAQ,cAAc,oBAAoB,EACnEnC,EAAgB,KAAK,aAAe,KAAO,KAAO,MAClDoC,EAAa,KAAK,QAAQ,iBAAiB,IAAIpC,CAAa,4CAA4C,EACxGqC,EAAe,MAAM,KAAKD,CAAU,EAAE,OAAOE,GAAMA,EAAG,OAAO,EAAE,OAErEH,EAAkB,QAAUE,EAAe,GAAKA,IAAiBD,EAAW,OAC5ED,EAAkB,cAAgBE,EAAe,GAAKA,EAAeD,EAAW,MACpF,CAKE,MAAM,oBAAoB/H,EAAO,CAE/B,MAAMkI,EADclI,EAAM,cACM,QAAQ,GAClCmI,EAAapN,EAAO,qBAAqBmN,CAAW,EAE1D,GAAI,CAACC,EAAY,CACfvM,EAAQ,MAAM,wBAAyBsM,CAAW,EAClD,MACN,CAGQ,KAAK,sBAAwBA,EAC/B,KAAK,oBAAsB,KAE3B,KAAK,oBAAsBA,EAIzBC,EAAW,QACb,MAAM,KAAK,OAAQ,EACV,KAAK,qBAEd,KAAK,aAAaD,EAAa,IAAI,CAEzC,CAOE,iBAAiBlI,EAAO,CACtB,MAAMa,EAAUb,EAAM,cAAc,QAAQ,GAC5C,KAAK,aAAa,KAAK,oBAAqBa,CAAO,CACvD,CAOE,MAAM,aAAaqH,EAAarH,EAAS,CX1sBpC,IAAAnF,EW2sBH,MAAMyB,EAAW1C,EAAa,EACxB2N,EAAmB,MAAM,KAAK,KAAK,cAAc,EACjDzE,EAAczG,EAAa,IAAIC,EAAS,YAAY,GAAG,EAGvDkL,EAAgBD,EAAiB,OAAOT,GAAW,CACvD,MAAMrJ,EAAQ,KAAK,OAAO,IAAIqJ,CAAO,EACrC,GAAI,CAACrJ,EAAO,MAAO,GAEnB,MAAMoJ,EAAO,KAAK,eAAepJ,CAAK,EAChCgK,EAAQ,CAACZ,GAAQ,KAAK,iBAAiBpJ,CAAK,EAGlD,OAAQ,KAAK,aAAe,MAAQoJ,GAAU,KAAK,aAAe,OAASY,CACjF,CAAK,EAGKH,EAAapN,EAAO,qBAAqBmN,CAAW,EACpDK,GAAiBJ,GAAA,YAAAA,EAAY,OAAQD,EAG3C,GAAIK,IAAmB,SAAU,CAC/B,MAAMrJ,EAAU,MAAM,KAAK,sBAAuB,EAClD,GAAI,CAACA,EAAS,OAGd2B,EAAU3B,CAChB,CAGI,GAAIqJ,IAAmB,oBAAsB,CAAC,KAAK,OAYjD,GAXqB,MAAM,OAAO,QAAQ,CACxC,MAAO,KAAK,KAAK,SAAS,eAAe,EACzC,QAAS,MAAQ,KAAK,KAAK,SAAS,wCAAwC,EAAI,OAChF,IAAK,IAAM,GACX,GAAI,IAAM,GACV,WAAY,GACZ,QAAS,CACP,QAAS,CAAC,qBAAqB,CACzC,CACA,CAAO,EAKC,MADe,MAAM,KAAK,QAAQ,cAAc,OAAO,CAAC,MAAO,KAAK,OAAO,OAAO,EAAE,CAAC,GACxE,SAAU,EACvB,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,kDAAkD,CAAC,MAG5F,QAKJ,IAAIC,EAAiBH,EACrB,GAAIE,IAAmB,oBAAsB,KAAK,OAAQ,CACxD,MAAM3H,EAASyH,EACZ,IAAIxD,GAAM,KAAK,OAAO,IAAIA,CAAE,CAAC,EAC7B,OAAOvG,GAASA,CAAK,EAGlBmK,EAAuB,CAAE,EACzBC,EAAyB,IAAI,IACnC,UAAWpK,KAASsC,EAAQ,CAC1B,MAAM+H,EAAY,KAAK,OAAO,oBAAoBrK,EAAM,EAAE,EACtDqK,GAAaA,EAAU,aAAe,OACxCF,EAAqB,KAAKnK,EAAM,IAAI,EACpCoK,EAAuB,IAAIpK,EAAM,EAAE,EAE7C,CAGM,GAAImK,EAAqB,OAAS,GAchC,GAbe,MAAM,OAAO,QAAQ,CAClC,MAAO,KAAK,KAAK,SAAS,+CAA+C,EACzE,QAAS,MAAQ,KAAK,KAAK,OAAO,2CAA4C,CAC5E,OAAQA,EAAqB,KAAK,IAAI,CACvC,CAAA,EAAI,OACL,IAAK,IAAM,GACX,GAAI,IAAM,GACV,WAAY,GACZ,QAAS,CACP,QAAS,CAAC,qBAAqB,CAC3C,CACA,CAAS,EAaC,UAAWd,KAAWe,EAAwB,CAC5C,MAAMC,EAAY,KAAK,OAAO,oBAAoBhB,CAAO,EACrDgB,GACF,MAAMA,EAAU,OAAO,CAAE,WAAY,IAAI,CAAE,CAEzD,SAdUH,EAAiBH,EAAc,OAAOxD,GAAM,CAAC6D,EAAuB,IAAI7D,CAAE,CAAC,EAGvE2D,EAAe,SAAW,EAAG,CAC/B,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,4DAA4D,CAAC,EACtG,MACZ,EAWA,CAGI,IAAI5H,EAAS4H,EACV,IAAI3D,GAAM,KAAK,OAAO,IAAIA,CAAE,CAAC,EAC7B,OAAOvG,GAASA,CAAK,EAGxB,GAAIiK,IAAmB,YAAa,CAClC,MAAMK,EAA0B,CAAE,EAC5BC,EAA2B,CAAE,EAEnC,UAAWvK,KAASsC,EAAQ,CAC1B,MAAMkI,IAAKpN,EAAA4C,EAAM,OAAO,WAAW,KAAxB,YAAA5C,EAA4B,QAAS,EAC1CqN,EAAazK,EAAM,OAAO,WAAW,OAAS,CAAE,EAChD0K,EAAYD,EAAW,SAAW,EAClCE,EAAWF,EAAW,SAAW,EAGnCD,GAAM,GAAKE,EAAY,GAAKC,EAAW,EACzCL,EAAwB,KAAKtK,CAAK,EAElCuK,EAAyB,KAAKvK,EAAM,IAAI,CAElD,CAGUuK,EAAyB,OAAS,GACpC,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,6DAA8D,CACnG,OAAQA,EAAyB,KAAK,IAAI,CACpD,CAAS,CAAC,EAIJjI,EAASgI,CACf,CAEI,GAAI,CAAChI,EAAO,OAAQ,CAClB,GAAG,cAAc,KAAK,0BAA0B,EAChD,MACN,CAGI,MAAMyE,EAAW,CAAE,EACbC,EAAY,CAAE,EAEpB,UAAWhH,KAASsC,EAAQ,CAC1B,MAAMyC,EAAQ,KAAK,eAAe/E,CAAK,EACnC+E,EACFgC,EAAS,KAAK,CAAE,MAAA/G,EAAO,MAAA+E,CAAK,CAAE,EAE9BiC,EAAU,KAAKhH,CAAK,CAE5B,CAGI,MAAMoH,EAAsBxI,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EAG7E,IAAIsB,EAAS,KACb,GAAKkF,EAeHlF,EAAS,CACP,UAAW,GACX,aAAc,GACd,YAAa,GACb,MAAO,CAAE,EACT,SAAU,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC9C,YAAa,GACb,cAAe,GACf,WAAY,GACZ,YAAaiH,GAAuBL,EAAS,OAAS,CACvD,EAGGkD,IAAmB,cACrB9J,EAAO,OAAS,YA1BlBA,EAAS,MADW,CAAC,QAAS,MAAM,EAAE,SAAS8J,CAAc,EAAIxF,GAA0B1D,GAChE,iBAAiBuB,EAAQ2H,EAAgB1H,EAAS,CAC3E,YAAA8C,EACA,mBAAoB+B,CAC5B,CAAO,EAIG,CAACjH,EACH,OAuBJ,MAAMyK,EAAqB,CAAA,EACrBC,EAAsB,CAAA,EAE5B,GAAI1K,EAAO,YAAa,CACtB,SAAW,CAAE,MAAAH,EAAO,MAAA+E,CAAK,IAAMgC,EAAU,CACvC,GAAI,CAAChC,EAAM,OAAQ,CACdnG,EAAa,IAAIC,EAAS,yBAAyB,GAAG,GACvD,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,mDAAoD,CACzF,OAAQkG,EAAM,IAC5B,CAAa,CAAC,EAIJ8F,EAAoB,KAAK7K,CAAK,EAC9B,QACV,CAEQ,KAAK,yBAAyBA,EAAO+E,EAAOkF,EAAgB1H,EAASpC,EAAQ,EAAI,EACjFyK,EAAmB,KAAK,CAAE,MAAA5K,EAAO,MAAA+E,CAAK,CAAE,EAGxC,MAAM,IAAI,QAAQxB,GAAW,WAAWA,EAAS,GAAG,CAAC,CAC7D,CAGUqH,EAAmB,OAAS,GAC9B,KAAK,8BAA8BA,EAAoBX,EAAgB1H,CAAO,CAEtF,MAEMyE,EAAU,KAAK,GAAGD,EAAS,IAAI,CAAC,CAAE,MAAA/G,CAAK,IAAOA,CAAK,CAAC,EAItD,GAAI6K,EAAoB,OAAS,EAAG,CAElC,MAAMC,EAAgB,CAAE,GAAG3K,EAAQ,WAAY,EAAM,EACrD,MAAM,KAAK,gBAAgB0K,EAAqBZ,EAAgB1H,EAASuI,CAAa,CAC5F,CAGI,GAAI9D,EAAU,OAAS,EAAG,CAExB,MAAM+D,EAAY,CAAE,GAAG5K,CAAQ,EAG/B4K,EAAU,YAAc,GACxBA,EAAU,WAAa,GACvB,MAAM,KAAK,gBAAgB/D,EAAWiD,EAAgB1H,EAASwI,CAAS,CAC9E,CAII,WAAW,IAAM,KAAK,MAAK,EAAI,GAAG,CACtC,CAOE,eAAe/K,EAAO,CACpB,MAAMoF,EAAYpF,EAAM,WAAa,CAAE,EAEvC,SAAW,CAAC5B,EAAQ2F,CAAK,IAAK,OAAO,QAAQqB,CAAS,EACpD,GAAIrB,GAAS,MAAM,0BAA0B,MAAO,CAClD,MAAMpF,EAAO,KAAK,MAAM,IAAIP,CAAM,EAClC,GAAIO,GAAQ,CAACA,EAAK,KAChB,OAAOA,CAEjB,CAGI,OAAO,IACX,CAWE,yBAAyBqB,EAAO+E,EAAO6E,EAAarH,EAASpC,EAAQ6K,EAAuB,GAAO,CACjG,MAAMnM,EAAW1C,EAAa,EAcxBqD,EAXc,CAClB,aAAgB,UAChB,YAAe,OACf,MAAS,QACT,KAAQ,OACR,cAAiB,gBACjB,iBAAoB,aACpB,UAAa,YACb,OAAU,QACX,EAE4BoK,CAAW,GAAKA,EAGvCpE,EAAc,CAClB,KAAM,cACN,UAAW,QAAQ,MAAM,SAAU,EACnC,QAASxF,EAAM,GACf,SAAAR,EACA,QAAA+C,EACA,WAAY,KACZ,OAAQ,CACN,SAAUpC,EAAO,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EACjE,UAAWA,EAAO,WAAa,GAC/B,aAAcA,EAAO,cAAgB,GACrC,YAAaA,EAAO,aAAe,GACnC,MAAOA,EAAO,OAAS,CAAE,EACzB,YAAaA,EAAO,cAAgB,GACpC,OAAQA,EAAO,OACf,QAASA,EAAO,QAChB,WAAYA,EAAO,WACnB,UAAWA,EAAO,SACnB,EACD,WAAYA,EAAO,YAAc,GACjC,eAAgB,MAAM,KAAK,KAAK,KAAK,OAAO,EAAE,IAAIsF,GAAKA,EAAE,EAAE,EAC3D,gBAAiB7G,EAAa,IAAIC,EAAS,kBAAkB,GAAG,CACjE,EAGDP,EAAW,YAAY,oBAAqByG,EAAM,GAAIS,CAAW,EAE5DwF,GACH,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,qDAAsD,CAC3F,OAAQjG,EAAM,KACd,MAAO/E,EAAM,IACrB,CAAO,CAAC,CAER,CAQE,8BAA8B4K,EAAoBX,EAAgB1H,EAAS,CXliCtE,IAAAnF,EAAAsB,EAAA0C,EAAAoB,EAAAC,EWoiCH,MAAMwI,EAAmB,CAAE,EAC3B,SAAW,CAAE,MAAAjL,EAAO,MAAA+E,CAAK,IAAM6F,EACxBK,EAAiBlG,EAAM,EAAE,IAC5BkG,EAAiBlG,EAAM,EAAE,EAAI,CAC3B,OAAQA,EACR,OAAQ,CAAA,CACT,GAEHkG,EAAiBlG,EAAM,EAAE,EAAE,OAAO,KAAK/E,CAAK,EAM9C,SAAW,CAACuF,EAAKiC,CAAM,IAAK,OAAO,QAAQ/K,EAAO,oBAAoB,EACpE,GAAI+K,EAAO,OAASyC,EAElB,MAIJ,MAAMiB,EAAcjB,EACpB,IAAIkB,EAAe,KAAK,KAAK,SAAS,0BAA0BD,CAAW,EAAE,GAAKA,EAGlF,GAAI3I,EACF,GAAI2I,IAAgB,QAClBC,EAAe,GAAGA,CAAY,OAAK/N,EAAA,OAAO,MAAM,OAAOmF,CAAO,IAA3B,YAAAnF,EAA8B,QAASmF,CAAO,YACxE2I,IAAgB,cACzBC,EAAe,GAAGA,CAAY,OAAKzM,EAAA,OAAO,MAAM,UAAU6D,CAAO,IAA9B,YAAA7D,EAAiC,QAAS6D,CAAO,YAC3E2I,IAAgB,eACzBC,EAAe,GAAGA,CAAY,OAAK/J,EAAA,OAAO,MAAM,UAAUmB,CAAO,IAA9B,YAAAnB,EAAiC,QAASmB,CAAO,YAC3E2I,IAAgB,OAAQ,CAEjC,MAAM5G,GAAW7B,GAAAD,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAC,EAAuCF,GACxD,GAAI+B,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAME,EAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnF6G,EAAe,GAAGA,CAAY,MAAK3G,GAAA,YAAAA,EAAU,OAAQjC,CAAO,GACtE,MACU4I,EAAe,GAAGA,CAAY,KAAK5I,CAAO,GAEpD,MAAiB2I,IAAgB,WACzBC,EAAe,GAAGA,CAAY,KAAK5I,CAAO,IAI9C,GAAI,OAAO,KAAK0I,CAAgB,EAAE,SAAW,EAAG,CAC9C,MAAMG,EAAa,OAAO,OAAOH,CAAgB,EAAE,CAAC,EAC9C7E,EAAagF,EAAW,OAAO,IAAI/H,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,EAC/D,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,4DAA6D,CAClG,SAAU8H,EACV,OAAQ/E,EACR,OAAQgF,EAAW,OAAO,IAClC,CAAO,CAAC,CACR,KAAW,CACL,MAAMC,EAAkB,OAAO,OAAOJ,CAAgB,EAAE,IAAIlO,GAAQ,CAClE,MAAMqJ,EAAarJ,EAAK,OAAO,IAAIsG,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,EACzD,MAAO,GAAGtG,EAAK,OAAO,IAAI,KAAKqJ,CAAU,GACjD,CAAO,EACD,GAAG,cAAc,KAAK,KAAK,KAAK,OAAO,8DAA+D,CACpG,SAAU+E,EACV,MAAOP,EAAmB,OAC1B,QAASS,EAAgB,KAAK,IAAI,CAC1C,CAAO,CAAC,CACR,CACA,CASE,MAAM,gBAAgB/I,EAAQsH,EAAarH,EAASlC,EAAc,CAEhE,MAAMF,EAAS,CACb,UAAWE,EAAa,WAAa,GACrC,aAAcA,EAAa,cAAgB,GAC3C,YAAaA,EAAa,aAAe,GACzC,MAAOA,EAAa,OAAS,CAAE,EAC/B,SAAUA,EAAa,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EACvE,YAAaA,EAAa,YAAc,GACxC,YAAaA,EAAa,cAAgB,GAC1C,cAAeA,EAAa,eAAiB,GAC7C,OAAQA,EAAa,OACrB,QAASA,EAAa,QACtB,WAAYA,EAAa,UAC1B,EAGD,UAAWL,KAASsC,EAClB,MAAM,KAAK,kBAAkBtC,EAAO4J,EAAarH,EAASpC,CAAM,EAEhE,MAAM,IAAI,QAAQoD,GAAW,WAAWA,EAAS,GAAG,CAAC,CAE3D,CASE,MAAM,kBAAkBvD,EAAO4J,EAAarH,EAASpC,EAAQ,CX7oCxD,IAAA/C,EAAAsB,EAAA0C,EAAAoB,EAAAC,EW8oCH,GAAI,CAKF,OAFuBmH,EAAY,YAAa,EAE1B,CACpB,IAAK,eAEH,MAAM0B,EAAoB,CACxB,QAAS/I,EACT,UAAWpC,EAAO,UAClB,aAAcA,EAAO,aACrB,OAAQA,EAAO,OACf,cAAeA,EAAO,aACvB,EACKoL,EAAsB,CAC1B,UAAW,CAACpL,EAAO,WACpB,EACKqL,EAAuB,CAC3B,SAAUrL,EAAO,SACjB,OAAQA,EAAO,cAAgB,EAChC,EAGGA,EAAO,cACTmL,EAAkB,MAAQ,CAAC,CACzB,MAAO,CAAE,EACT,KAAM,CAAE,YAAanL,EAAO,WAAa,EACzC,QAAS,CAAE,EACX,YAAaA,EAAO,WAClC,CAAa,GAGH,MAAMH,EAAM,iBAAiBsL,EAAmBC,EAAqBC,CAAoB,EACzF,MACF,IAAK,cAEH,MAAMC,EAAiB,CACrB,QAASlJ,EACT,UAAWpC,EAAO,UAClB,aAAcA,EAAO,aACrB,OAAQA,EAAO,OACf,cAAeA,EAAO,aACvB,EACKuL,EAAmB,CACvB,UAAW,CAACvL,EAAO,WACpB,EACKwL,EAAoB,CACxB,SAAUxL,EAAO,SACjB,OAAQA,EAAO,cAAgB,EAChC,EAGGA,EAAO,cACTsL,EAAe,MAAQ,CAAC,CACtB,MAAO,CAAE,EACT,KAAM,CAAE,YAAatL,EAAO,WAAa,EACzC,QAAS,CAAE,EACX,YAAaA,EAAO,WAClC,CAAa,GAGH,MAAMH,EAAM,gBAAgByL,EAAgBC,EAAkBC,CAAiB,EAC/E,MACF,IAAK,QAEH,MAAMC,EAAkB,CACtB,MAAOrJ,EACP,UAAWpC,EAAO,UAClB,aAAcA,EAAO,aACrB,QAASA,EAAO,QAChB,cAAe,CAACA,EAAO,OACxB,EACK0L,EAAoB,CACxB,UAAW,CAAC1L,EAAO,WACpB,EACK2L,EAAqB,CACzB,SAAU3L,EAAO,SACjB,OAAQA,EAAO,cAAgB,GAC/B,KAAM,CAAA,CACP,EAGD,GAAIA,EAAO,UACT2L,EAAmB,KAAK,OAAS3L,EAAO,kBAC/BA,EAAO,QAAS,CACzB,MAAM8D,IAAa7G,EAAA,OAAO,MAAM,OAAOmF,CAAO,IAA3B,YAAAnF,EAA8B,QAASmF,EACpD4B,IAAezF,EAAA,OAAO,MAAM,UAAUyB,EAAO,OAAO,IAArC,YAAAzB,EAAwC,QAASyB,EAAO,QAC7E2L,EAAmB,KAAK,OAAS,KAAK,KAAK,OAAO,yBAA0B,CAC1E,MAAO7H,EACP,QAASE,CACvB,CAAa,CACb,CAEchE,EAAO,cAAayL,EAAgB,MAAQzL,EAAO,aACnDA,EAAO,SAAQyL,EAAgB,OAASzL,EAAO,QAEnD,MAAMH,EAAM,UAAU4L,EAAiBC,EAAmBC,CAAkB,EAC5E,MACF,IAAK,OAEH,MAAMC,EAAiB,CACrB,KAAMxJ,EACN,UAAWpC,EAAO,UAClB,aAAcA,EAAO,aACrB,QAASA,EAAO,QAChB,cAAe,CAACA,EAAO,OACxB,EACK6L,EAAmB,CACvB,UAAW,CAAC7L,EAAO,WACpB,EACK8L,EAAoB,CACxB,SAAU9L,EAAO,SACjB,OAAQA,EAAO,cAAgB,GAC/B,KAAM,CAAA,CACP,EAGD,GAAIA,EAAO,UACT8L,EAAkB,KAAK,OAAS9L,EAAO,kBAC9BA,EAAO,QAAS,CAEzB,IAAIoE,EAAYhC,EAChB,MAAM+B,GAAW9B,GAAApB,EAAA,OAAO,MAAM,mBAAb,YAAAA,EAA+B,QAA/B,YAAAoB,EAAuCD,GACxD,GAAI+B,GAAA,MAAAA,EAAU,GAAI,CAChB,MAAME,GAAW,MAAM,UAAU,MAAM,YAAYF,EAAS,GAAI,CAAE,UAAW,GAAM,EACnFC,GAAYC,IAAA,YAAAA,GAAU,OAAQjC,CAC5C,CACY,MAAM4B,KAAe1B,EAAA,OAAO,MAAM,UAAUtC,EAAO,OAAO,IAArC,YAAAsC,EAAwC,QAAStC,EAAO,QAE7E8L,EAAkB,KAAK,OAAS,GAAG9H,EAAY,KAAKI,CAAS,KAAK,KAAK,KAAK,SAAS,aAAa,CAAC,EAC/G,CAEcpE,EAAO,cAAa4L,EAAe,MAAQ5L,EAAO,aAClDA,EAAO,SAAQ4L,EAAe,OAAS5L,EAAO,QAElD,MAAMH,EAAM,cAAc+L,EAAgBC,EAAkBC,CAAiB,EAC7E,MACF,IAAK,gBACH,MAAMC,EAA4B,CAAE,UAAW,CAAC/L,EAAO,aAAe,CAACA,EAAO,UAAY,EACpFgM,EAA6B,CACjC,SAAUhM,EAAO,SACjB,OAAQA,EAAO,cAAgB,EAChC,EACD,MAAMH,EAAM,kBAAkBG,EAAQ+L,EAA2BC,CAA0B,EAC3F,MACF,IAAK,mBAEH,GAAI,CAAC,KAAK,OAAQ,CAChB,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,mBAAmB,CAAC,EAC7D,KACZ,CAEU,MAAM9L,EAAe,CAAE,UAAW,CAACF,EAAO,aAAe,CAACA,EAAO,UAAY,EACvEiD,EAAgB,CACpB,SAAUjD,EAAO,SACjB,OAAQA,EAAO,cAAgB,EAChC,EAID,GAAI,CAHW,MAAMH,EAAM,qBAAqBG,EAAQE,EAAc+C,CAAa,EAGtE,CAGX,IAAIiH,EAAY,KAAK,OAAO,oBAAoBrK,EAAM,EAAE,EACxD,GAAI,CAACqK,EAAW,CACd,MAAMd,EAASvJ,EAAM,gBAAiB,EAClCuJ,EAAO,SACT,MAAM,KAAK,OAAO,wBAAwB,YAAa,CAAC,CACtD,QAASA,EAAO,CAAC,EAAE,GACnB,QAASvJ,EAAM,EACjC,CAAiB,CAAC,EACFqK,EAAY,KAAK,OAAO,oBAAoBrK,EAAM,EAAE,EAEpE,CAGY,GAAIqK,EAAW,CACb,MAAMzM,EAAOyM,EAAU,kBAAmB,EAC1C,MAAMzM,EAAK,SAAS,CAAC,MAAO,EAAI,CAAC,EACjC,MAAMyM,EAAU,OAAO,CAAC,WAAYzM,EAAK,KAAK,CAAC,EAC/C,MAAMA,EAAK,UAAU,CACnB,QAAS,YAAY,WAAW,CAAC,MAAAoC,CAAK,CAAC,EACvC,OAAQ,KAAK,KAAK,SAAS,kBAAkB,CAC7D,CAAe,CACf,CACA,CACU,MACF,IAAK,YAIH,MAAMoM,EAAoB,CAAE,UAAW,CAACjM,EAAO,aAAe,CAACA,EAAO,UAAY,EAC5EkM,GAAqB,CACzB,SAAUlM,EAAO,SACjB,OAAQA,EAAO,cAAgB,EAChC,EACKmM,EAAc,MAAMtM,EAAM,cAAcG,EAAQiM,EAAmBC,EAAkB,EAC3F,MACF,IAAK,SAEH,GAAI,CACF,MAAMzO,EAAO,IAAI,KAAK2E,EAASvC,EAAM,YAAW,CAAE,EAClD,MAAMpC,EAAK,SAAS,CAAC,MAAO,EAAI,CAAC,EACjC,MAAMA,EAAK,UAAU,CACnB,QAAS,YAAY,WAAW,CAAC,MAAAoC,CAAK,CAAC,EACvC,OAAQ,KAAK,KAAK,SAAS,+BAA+B,CACxE,CAAa,CACF,MAAe,CACd,GAAG,cAAc,MAAM,KAAK,KAAK,OAAO,+CAAgD,CAAC,QAASuC,CAAO,CAAC,CAAC,CACvH,CACU,MACF,QACE,GAAG,cAAc,KAAK,sBAAsBqH,CAAW,EAAE,EACzD,KACV,CACK,MAAe,CACd,GAAG,cAAc,MAAM,KAAK,KAAK,OAAO,+CAAgD,CACtF,MAAO5J,EAAM,IACrB,CAAO,CAAC,CACR,CACA,CAKE,MAAM,SAAS7C,EAAS,CACtB,MAAM,MAAM,SAASA,CAAO,EAG5B,KAAK,eAAe,MAAO,EAC3B,KAAK,oBAAsB,KAG3B,SAAS,oBAAoB,QAAS,KAAK,gBAAiB,EAAI,EAG5D,KAAK,oBACP,MAAM,IAAI,eAAgB,KAAK,iBAAiB,EAChD,KAAK,kBAAoB,MAIvB,KAAK,sBACP,aAAa,KAAK,mBAAmB,EACrC,KAAK,oBAAsB,KAEjC,CAKE,YAAYoP,EAAS,GAAI,CAEvB,OAAO,IACX,CAME,MAAM,uBAAwB,CAC5B,OAAO,IAAI,QAAQ,MAAOhJ,GAAY,CAEpC,MAAMiJ,EAAU,MAAM,eAAe,WAAW/P,EAAO,EAAE,oCAAqC,CAC5F,QAAS,GACT,SAAU,EAClB,CAAO,EAEc,IAAI,OAAO,CACxB,MAAO,KAAK,KAAK,SAAS,yCAAyC,EACnE,QAAA+P,EACA,QAAS,CACP,KAAM,CACJ,KAAM,kCACN,MAAO,KAAK,KAAK,SAAS,MAAM,EAChC,SAAWjE,GAAS,CAElB,MAAM3H,GADiB2H,EAAK,CAAC,GAAKA,GACH,cAAc,sBAAsB,EAAE,MAAM,KAAM,EACjFhF,EAAQ3C,GAAW,IAAI,CACrC,CACW,EACD,OAAQ,CACN,KAAM,+BACN,MAAO,KAAK,KAAK,SAAS,QAAQ,EAClC,SAAU,IAAM2C,EAAQ,IAAI,CACxC,CACS,EACD,QAAS,OACT,OAASgF,GAAS,CAChB,MAAMkE,EAAclE,EAAK,CAAC,GAAKA,EACzBmE,EAAeD,EAAY,cAAc,sBAAsB,EAC/DE,EAAa,CAAE,EAGrBF,EAAY,iBAAiB,cAAc,EAAE,QAAQhL,GAAU,CAC7DA,EAAO,iBAAiB,QAAUC,GAAU,CAC1C,MAAMkL,EAAMlL,EAAM,cAAc,QAAQ,IACxCiL,EAAWC,CAAG,GAAKD,EAAWC,CAAG,GAAK,GAAK,EAG3C,MAAMC,EAAQ,CAAE,EAChB,SAAW,CAACC,EAASC,CAAK,IAAK,OAAO,QAAQJ,CAAU,EAClDI,EAAQ,GACVF,EAAM,KAAK,GAAGE,CAAK,GAAGD,CAAO,EAAE,EAGnCJ,EAAa,MAAQG,EAAM,KAAK,KAAK,CACnD,CAAa,CACb,CAAW,CACX,CACA,EAAS,CACD,QAAS,CAAC,sBAAuB,2BAA2B,CACpE,CAAO,EAEM,OAAO,EAAI,CACxB,CAAK,CACL,CAME,OAAO,QAAS,CACTG,EAAA,KAAKpG,GAIJoG,EAAA,KAAKpG,GAAU,SACjBoG,EAAA,KAAKpG,GAAU,MAAO,GAEtBoG,EAAA,KAAKpG,GAAU,8BAA+B,EAC9CoG,EAAA,KAAKpG,GAAU,OAAO,EAAI,IAP5BqG,GAAA,KAAKrG,EAAY,IAAIC,GACrBmG,EAAA,KAAKpG,GAAU,OAAO,EAAI,EAShC,CACA,EA58CSA,EAAA,YAAPsG,GALmBrG,EAKZD,EAAY,MAiBnBvJ,EAtBmBwJ,EAsBZ,kBAAkB,CACvB,GAAI,uBACJ,QAAS,CAAC,oBAAoB,EAC9B,IAAK,MACL,OAAQ,CACN,MAAO,GACP,UAAW,GACX,YAAa,EACd,EACD,SAAU,IACX,GAEDxJ,EAlCmBwJ,EAkCZ,QAAQ,CACb,KAAM,CACJ,SAAU,WAAWpK,EAAO,EAAE,+BACpC,CACG,GAtCY,IAAM0Q,GAANtG,ECNR,MAAMkC,EAAY,CAOvB,OAAO,mBAAmBzF,EAAKiF,EAAMpL,EAAS,CAC5C,GAAI,CAAC,KAAK,KAAK,MAAQmG,EAAI,KAAO,OAAQ,OAK1C,MAAM8J,GAHc7E,EAAK,CAAC,GAAKA,GAGE,cAAc,gBAAgB,EAC/D,GAAI,CAAC6E,GAAgBA,EAAa,cAAc,qBAAqB,EACnE,OAIF,MAAMvO,EAAW1C,EAAa,EACxBiL,EAAsBxI,EAAa,IAAIC,EAAS,oBAAoB,GAAG,EAGvEwO,EAAkB,SAAS,cAAc,GAAG,EAClDA,EAAgB,GAAK,uBACrBA,EAAgB,aAAa,yBAA0B,OAAO,EAC9DA,EAAgB,UAAY,uCAAuCjG,EAAsB,UAAY,EAAE,GACvGiG,EAAgB,MAAQ,KAAK,KAAK,SAAS,yCAAyC,EACpFA,EAAgB,UAAY,wBAAwBjG,EAAsB,GAAK,QAAQ,SAGvF,MAAMkG,EAAuBF,EAAa,cAAc,oBAAoB,EACxEE,EACFA,EAAqB,WAAW,aAAaD,EAAiBC,CAAoB,EAElFF,EAAa,aAAaC,EAAiBD,EAAa,UAAU,EAIpEC,EAAgB,iBAAiB,QAAS,IAAM,CAC9CF,GAAiB,OAAQ,CAC/B,CAAK,CACL,CAME,OAAO,uBAAuBrE,EAAS,CACrC,MAAMyE,EAAO,SAAS,cAAc,yBAAyB,EACzDA,IACFA,EAAK,UAAY,cAAczE,EAAU,GAAK,QAAQ,GAE5D,CACA,CClDO,MAAM0E,EAAU,CAUrB,OAAO,YAAa,CAClB,MAAM,KAAK9Q,EAAW,KAAM,KAAK,QAAQ,KAAK,IAAI,CAAC,EACnD,MAAM,KAAKA,EAAW,MAAO,KAAK,SAAS,KAAK,IAAI,CAAC,CACzD,CAKE,OAAO,SAAU,CACEP,EAAW,EAC5B,SAAS,KAAK,UAAU,IAAI,cAAc,EAC1CyC,EAAa,iBAAkB,EAC/BL,EAAe,WAAY,EAG3B,KAAK,cAAc7B,EAAW,mBAAoB,KAAK,oBAAoB,KAAK,IAAI,CAAC,CACzF,CAKE,OAAO,UAAW,CAChB,MAAMmC,EAAW1C,EAAa,EACZyC,EAAa,IAAIC,EAAS,UAAU,GAAG,IAEvD,OAAO,MAAM,MAAQ,IAEvB+F,GAAgB,WAAY,EAC5B,KAAK,oBAAqB,EAEtB,KAAK,KAAK,KACZ,KAAK,iBAAkB,EAEvBrG,EAAe,cAAe,EAEhCkI,GAAmBD,GAAiB,CAAE,CAC1C,CAKE,OAAO,qBAAsB,CAC3B,KAAK,cAAc5J,EAAY,iBAAkB,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAClF,KAAK,cAAcF,EAAW,wBAAyB,KAAK,wBAAwB,KAAK,IAAI,CAAC,EAC9F,KAAK,cAAcA,EAAW,wBAAyB,KAAK,8BAA8B,KAAK,IAAI,CAAC,EACpG,KAAK,cAAcE,EAAY,iCAAkC,KAAK,0BAA0B,KAAK,IAAI,CAAC,CAC9G,CAKE,OAAO,kBAAmB,CACxB,KAAK,cAAcF,EAAW,eAAgB,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAG9E,KAAK,MAAM,QAAQiC,GAAQ,CACzB,KAAK,iBAAiBA,CAAI,CAChC,CAAK,CACL,CAKE,OAAO,kBAAkBhB,EAAOwC,EAAQc,EAAQD,EAAS,CACnDb,EAAO,kBAAoBxC,EAAM,OAAS,IAC5CqD,EAAQ,KAAOA,EAAQ,MAAQ,CAAE,EACjCA,EAAQ,KAAK,iBAAmB,GAChCA,EAAQ,KAAK,aAAeb,EAAO,aAEzC,CAKE,OAAO,wBAAwBsN,EAAa1Q,EAAMI,EAASiB,EAAQ,Cb/F9D,IAAAhB,EagGH,GAAIL,EAAK,oBAAoBK,EAAAL,EAAK,QAAL,YAAAK,EAAY,QAAS,EAAG,CACnD,MAAMsQ,EAAc3Q,EAAK,cAAgB,KACnC4Q,EAAgB,KAAK,KAAK,OAAO,wCAAyC,CAAE,GAAID,EAAa,EAE7FE,EAAgB7Q,EAAK,QAAU,GACrCA,EAAK,OAAS6Q,EAAgB,GAAGA,CAAa,IAAID,CAAa,GAAKA,CAC1E,CACA,CAKE,OAAO,8BAA8B3M,EAASjE,EAAMI,EAASiB,EAAQ,Cb5GhE,IAAAhB,EAAAsB,Ea8GH,KAAItB,EAAAL,EAAK,QAAL,YAAAK,EAAY,QAAS,GAAKL,EAAK,MAAM,CAAC,EACxC,GAAI,CAEF,MAAMgL,EAAWhL,EAAK,MAAM,CAAC,GACzB2B,EAAAqJ,EAAS,UAAT,MAAArJ,EAAkB,gBACpB3B,EAAK,OAASgL,EAAS,QAAQ,cAElC,MAAe,CAEtB,CAEA,CAME,OAAO,0BAA0BzE,EAAKiF,EAAMxL,EAAM,CAEhD,GAAIuG,EAAI,sBAAuB,OAG/B,MAAMuK,EAAoBtF,EAAK,iBAAiB,4BAA4B,EAC5E,IAAIuF,EAAe,GAEnBD,EAAkB,QAAQE,GAAS,CAC7BA,EAAM,OAAS,CAACD,IAElBxK,EAAI,sBAAwB,GAC5BwK,EAAe,GAGf,WAAW,IAAM,Cb9IlB,IAAA1Q,EAAAsB,EAAA0C,Ea+IG2M,EAAM,cAAc,IAAI,MAAM,SAAU,CACtC,QAAS,GACT,WAAY,EACxB,CAAW,CAAC,GAGE3M,GAAA1C,GAAAtB,EAAAkG,EAAI,SAAJ,YAAAlG,EAAY,QAAZ,YAAAsB,EAAoB,KAApB,MAAA0C,EAAwB,MAC1B,OAAOkC,EAAI,OAAO,MAAM,CAAC,EAAE,KAAK,WAEnC,EAAE,EAAE,EAEb,CAAK,CACL,CAKE,OAAO,iBAAiB3E,EAAM,CACxBA,EAAK,QAAUA,EAAK,KAAO,KAAK,KAAK,IACvCJ,EAAe,0BAA0BI,EAAK,EAAE,CAEtD,CAKE,OAAO,oBAAoB2E,EAAKiF,EAAMpL,EAAS,CAC7C4L,GAAY,mBAAmBzF,EAAKiF,EAAMpL,CAAO,CACrD,CAQE,OAAO,cAAc0H,EAAU3G,EAAS,CACtC,MAAM4G,EAAS,MAAM,GAAGD,EAAU3G,CAAO,EACzC,YAAK,gBAAgB,IAAI,GAAG2G,CAAQ,IAAIC,CAAM,GAAIA,CAAM,EACjDA,CACX,CAKE,OAAO,eAAgB,CACrB,KAAK,gBAAgB,QAAQ,CAACA,EAAQS,IAAQ,CAC5C,MAAMV,EAAWU,EAAI,MAAM,GAAG,EAAE,CAAC,EACjC,MAAM,IAAIV,EAAUC,CAAM,CAChC,CAAK,EACD,KAAK,gBAAgB,MAAO,CAChC,CAOE,OAAO,aAAaD,EAAU,CAC5B,UAAWU,KAAO,KAAK,gBAAgB,KAAI,EACzC,GAAIA,EAAI,WAAW,GAAGV,CAAQ,GAAG,EAC/B,MAAO,GAGX,MAAO,EACX,CACA,CAjMExH,EALWmQ,GAKJ,kBAAkB,IAAI,KCVxB,MAAMQ,EAAc,CAOzB,oBAAoB7N,EAAQ0D,EAAa,CACvC,OAAIA,IACF1D,EAAO,MAAQ,CAAC,CACd,MAAO,CAAE,EACT,KAAM,CAAE,YAAA0D,CAAa,EACrB,QAAS,CAAE,EACX,YAAAA,CACR,CAAO,GAEI1D,CACR,EAQD,mBAAmBqF,EAAarC,EAAY,CAC1C,MAAO,CACL,QAASqC,EAAY,QACrB,UAAWA,EAAY,OAAO,WAAa,GAC3C,aAAcA,EAAY,OAAO,cAAgB,GACjD,OAAQA,EAAY,OAAO,OAC3B,cAAe,GACf,iBAAkB,GAClB,aAAcA,EAAY,OAAO,aAAe,IACjD,CACF,EAWD,MAAM,oBAAoBxF,EAAOR,EAAUgG,EAAarC,EAAY9C,EAAc+C,EAAe,CAC3FoC,EAAY,SACd,MAAMlG,GAAa,oBACjBU,EACAR,EACAgG,EAAY,QACZA,EAAY,WACZ,CACE,GAAGrC,EACH,OAAQ9C,EACR,QAAS+C,CACnB,CACO,CAEJ,EAOD,MAAM,iBAAiBpD,EAAOwF,EAAa,CACzC,MAAM5E,EAAU4E,EAAY,QAGtBgH,EAAU,MAAM,eAAe,WAAWpQ,CAAS,oCAAqC,CAC5F,QAASwE,EACT,SAAU,EAChB,CAAK,EAEc,IAAI,OAAO,CACxB,MAAO,KAAK,KAAK,SAAS,yCAAyC,EACnE,QAAA4L,EACA,QAAS,CACP,KAAM,CACJ,KAAM,kCACN,MAAO,KAAK,KAAK,SAAS,MAAM,EAChC,SAAU,SAAY,CACpB,GAAI,CAEF,MAAM5O,EAAO,IAAI,KAAKgD,EAASZ,EAAM,YAAW,CAAE,EAClD,MAAMpC,EAAK,SAAS,CAAC,MAAO,EAAI,CAAC,EAGjC,MAAMA,EAAK,UAAU,CACnB,QAAS,YAAY,WAAW,CAAC,MAAAoC,CAAK,CAAC,EACvC,OAAQ,KAAK,KAAK,SAAS,0BAA0BzD,EAAW,MAAM,EAAE,CACxF,CAAe,CACF,MAAe,CACd,GAAG,cAAc,MAAM,KAAK,KAAK,OAAO,+CAAgD,CAAC,QAAAqE,CAAO,CAAC,CAAC,CAChH,CACA,CACS,EACD,OAAQ,CACN,KAAM,+BACN,MAAO,KAAK,KAAK,SAAS,QAAQ,CAC5C,CACO,EACD,QAAS,MACf,EAAO,CACD,QAAS,CAAC,sBAAuB,2BAA2B,CAClE,CAAK,EAEM,OAAO,EAAI,CACtB,CACA,EAKaqN,GAAgB,CAC3B,CAAC1R,EAAW,OAAO,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CAC3F,MAAMjD,EAAS6N,EAAY,mBAAmBxI,EAAarC,CAAU,EACrE6K,EAAY,oBAAoB7N,EAAQqF,EAAY,OAAO,WAAW,EACtE,MAAMxF,EAAM,iBAAiBG,EAAQE,EAAc+C,CAAa,CACjE,EAED,CAAC7G,EAAW,IAAI,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CACxF,MAAMjD,EAAS6N,EAAY,mBAAmBxI,EAAarC,CAAU,EACrE6K,EAAY,oBAAoB7N,EAAQqF,EAAY,OAAO,WAAW,EACtE,MAAMxF,EAAM,gBAAgBG,EAAQE,EAAc+C,CAAa,CAChE,EAED,CAAC7G,EAAW,KAAK,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CACzF,MAAMjD,EAAS,CACb,GAAGgD,EACH,MAAOqC,EAAY,QACnB,cAAe,EAChB,EACGA,EAAY,OAAO,UACrBrF,EAAO,QAAUqF,EAAY,OAAO,SAEtC,MAAMxF,EAAM,UAAUG,EAAQE,EAAc+C,CAAa,CAC1D,EAED,CAAC7G,EAAW,IAAI,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CACxF,MAAMjD,EAAS,CACb,GAAGgD,EACH,KAAMqC,EAAY,QAClB,cAAe,EAChB,EACGA,EAAY,OAAO,UACrBrF,EAAO,QAAUqF,EAAY,OAAO,SAEtC,MAAMxF,EAAM,cAAcG,EAAQE,EAAc+C,CAAa,CAC9D,EAED,CAAC7G,EAAW,aAAa,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CACjG4K,EAAY,oBAAoB7K,EAAYqC,EAAY,OAAO,WAAW,EAC1E,MAAMxF,EAAM,kBAAkBmD,EAAY9C,EAAc+C,CAAa,CACtE,EAED,CAAC7G,EAAW,MAAM,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CAC1F,MAAM4K,EAAY,oBAAoBhO,EAAOzD,EAAW,OAAQiJ,EAAarC,EAAY9C,EAAc+C,CAAa,CACrH,EAED,CAAC7G,EAAW,MAAM,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CAC1F,MAAM4K,EAAY,oBAAoBhO,EAAOzD,EAAW,OAAQiJ,EAAarC,EAAY9C,EAAc+C,CAAa,CACrH,EAED,CAAC7G,EAAW,SAAS,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CAC7F,MAAM4K,EAAY,oBAAoBhO,EAAOzD,EAAW,UAAWiJ,EAAarC,EAAY9C,EAAc+C,CAAa,CACxH,EAED,CAAC7G,EAAW,UAAU,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CAE9F,GAAI,CAAC,KAAK,OAAQ,CAChB,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,mBAAmB,CAAC,EAC7D,MACN,CACI4K,EAAY,oBAAoB7K,EAAYqC,EAAY,OAAO,WAAW,EAC1E,MAAMxF,EAAM,qBAAqBmD,EAAY9C,EAAc+C,CAAa,CACzE,EAED,CAAC7G,EAAW,UAAU,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CAC9F,MAAMpD,EAAM,cAAcmD,EAAY9C,EAAc+C,CAAa,CAClE,EAED,CAAC7G,EAAW,OAAO,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CAC3FD,EAAW,aAAeqC,EAAY,QACtC,MAAMxF,EAAM,WAAWmD,EAAY9C,EAAc+C,CAAa,CAC/D,EAED,CAAC7G,EAAW,MAAM,EAAG,MAAOyD,EAAOwF,EAAarC,EAAY9C,EAAc+C,IAAkB,CAC1F,MAAM4K,EAAY,iBAAiBhO,EAAOwF,CAAW,CACzD,CACA,EC9La0I,EAAN,MAAMA,CAAgB,CAU3B,aAAa,cAAc1I,EAAa,CflBnC,IAAApI,EeoBH,GAAI,KAAK,KAAK,KAAM,OAGpB,MAAM4C,EAAQ,KAAK,OAAO,IAAIwF,EAAY,OAAO,EAC5CxF,GAKAA,EAAM,UAKPwF,EAAY,mBACZpI,EAAAoI,EAAY,iBAAZ,YAAApI,EAA4B,QAAS,GACrC,KAAK,KAAK,QAAQ,OAAS,GAC7BiJ,GAAkBb,EAAY,cAAc,EAI9C0I,EAAgB,qBAAqB,KAAK,CACxC,MAAOlO,EAAM,KACb,SAAUwF,EAAY,SACtB,QAASA,EAAY,QACrB,GAAIA,EAAY,OAAO,aAAe,IAC5C,CAAK,EAGG0I,EAAgB,mBAClB,aAAaA,EAAgB,iBAAiB,EAGhDA,EAAgB,kBAAoB,WAAW,IAAM,CACnDtI,GAAyBsI,EAAgB,oBAAoB,EAC7DA,EAAgB,qBAAuB,CAAE,EACzCA,EAAgB,kBAAoB,IAC1C,EAAOA,EAAgB,wBAAwB,EAG3CA,EAAgB,eAAelO,EAAOwF,CAAW,EACrD,CAOE,aAAa,eAAexF,EAAOwF,EAAa,CAC9C,GAAI,CACF,MAAMrC,EAAa,CACjB,UAAWqC,EAAY,OAAO,WAAa,GAC3C,aAAcA,EAAY,OAAO,cAAgB,GACjD,cAAe,GACf,OAAQA,EAAY,OAAO,OAC3B,iBAAkB,GAClB,aAAcA,EAAY,OAAO,aAAe,IACjD,EAGGA,EAAY,OAAO,cACrBrC,EAAW,MAAQqC,EAAY,OAAO,aAIpCA,EAAY,OAAO,SAAW,CAACjJ,EAAW,MAAOA,EAAW,IAAI,EAAE,SAASiJ,EAAY,QAAQ,IACjGrC,EAAW,QAAUqC,EAAY,OAAO,SAI1C,MAAMnF,EAAe,CACnB,UAAW,CAACmF,EAAY,WACxB,QAAS,CACP,cAAeA,EAAY,OAAO,UAAY,YAC/BA,EAAY,OAAO,aAAe,eAAiB,SAElE,OAAQ,CACN,MAAOA,EAAY,OAAO,WAAaE,GAAmBF,EAAY,SAAUA,EAAY,OAAO,EACnG,SAAUxF,EAAM,IAC5B,CACA,CACO,EAGKoD,EAAgB,CACpB,SAAUoC,EAAY,OAAO,UAAY,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC7E,OAAQA,EAAY,OAAO,cAAgB,EAC5C,EAGKtH,EAAU+P,GAAczI,EAAY,QAAQ,EAC9CtH,EACF,MAAMA,EAAQ8B,EAAOwF,EAAarC,EAAY9C,EAAc+C,CAAa,GAEzE9F,EAAQ,KAAK,mCAAmCkI,EAAY,QAAQ,EAAE,EACtE,GAAG,cAAc,KAAK,KAAK,KAAK,SAAS,8CAA8C,CAAC,EAE3F,MAAe,CACd,GAAG,cAAc,MAAM,KAAK,KAAK,SAAS,8CAA8C,CAAC,CAC/F,CACA,CACA,EA/GEnI,EAFW6Q,EAEJ,uBAAuB,CAAE,GAChC7Q,EAHW6Q,EAGJ,oBAAoB,MAC3B7Q,EAJW6Q,EAIJ,2BAA2B,KAJ7B,IAAMC,GAAND,ECIA,MAAME,CAAK,CAKhB,OAAO,MAAM,CACX9P,EAAW,WAAW8P,EAAK,mBAAmB,EAC9CZ,GAAU,WAAY,CAC1B,CAGE,OAAO,eAAgB,CACrB,OAAOjP,EAAe,cAAe,CACzC,CAEE,OAAO,kBAAkBH,EAAQK,EAAY,CAC3CF,EAAe,kBAAkBH,EAAQK,CAAU,CACvD,CAME,aAAa,kBAAkB+G,EAAa,CAC1C,OAAO2I,GAAgB,cAAc3I,CAAW,CACpD,CAKE,OAAO,qBAAsB,CAC3BlH,EAAW,aAAahC,GAAa,cAAe8R,EAAK,aAAa,EACtE9P,EAAW,aAAahC,GAAa,kBAAmB8R,EAAK,iBAAiB,EAC9E9P,EAAW,aAAahC,GAAa,kBAAmB8R,EAAK,iBAAiB,CAClF,CACA,CCzCAA,EAAK,KAAM"}