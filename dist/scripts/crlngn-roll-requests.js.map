{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Hooks.mjs","../../src/constants/General.mjs","../../src/components/LogUtil.mjs","../../src/constants/Settings.mjs","../../src/components/GeneralUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/ActivityUtil.mjs","../../src/components/RollUtil.mjs","../../src/components/SettingsUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheck\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrow\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheck\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrow\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_CONFIGURATION_DIALOG: \"renderSkillToolRollConfigurationDialog\"\n}","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cRoll That For Me`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ABILITY_CHECK: { name: \"abilitycheck\", activityType: \"check\" }, // Ability checks\n  SAVING_THROW: { name: \"savingthrow\", activityType: \"save\" }, // Saving throws\n  CONCENTRATION: { name: \"concentration\", activityType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", activityType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", activityType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", activityType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", activityType: \"\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", activityType: \"\" }, // Initiative rolls\n  ATTACK: { name: \"attack\", activityType: \"attack\" }, // Attack rolls\n  DAMAGE: { name: \"damage\", activityType: \"damage\" }, // Damage rolls\n  FORMULA: { name: \"formula\", activityType: \"\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", activityType: \"\" }, // Recharge rolls\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\n\n","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debugMode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      console.log(...DEBUG_TAG, ref, ...data);\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n}","export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","import { LogUtil } from \"./LogUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\n\nexport class GeneralUtil {\n  /**\n   * Identifies the current selected or targeted tokens\n   * @param {User5e} user\n   * @returns {Set} A set of targeted tokens\n   */\n  static getTargets(user) {\n    let gm = game.users.find(us=>us.isGM===true);\n    let targetTokens = user.targets || gm.targets; // || canvas.tokens?.controlled;\n\n    return new Set([...targetTokens]);\n  }\n\n  static getClientTargets = () => {\n    if (!game.user) return [];\n\n    // Convert the Set of targets to an array\n    const selectedTargets = Array.from(game.user.targets);//.filter(target => target.actor);\n\n    LogUtil.log(\"Selected Targets\", [ \n      game.user.id, \n      selectedTargets, \n      selectedTargets.filter(target => target.actor) \n    ]);\n    return selectedTargets;\n  };\n\n\n\n  /**\n  * Grab the targeted tokens and return relevant information for hit calculation\n  * @returns {TargetDescriptor[]}\n  */\n  static getTargetDescriptors = () => {\n    const targets = new Map();\n    for ( const token of game.user.targets ) {\n      const { name } = token;\n      const { img, system, uuid, statuses } = token.actor ?? {};\n      if ( uuid ) {\n        const ac = statuses.has(\"coverTotal\") ? null : system.attributes?.ac?.value;\n        targets.set(uuid, { name, img, uuid, ac: ac ?? null });\n      }\n    }\n    return Array.from(targets.values());\n  }\n\n  /**\n   * \n   * @param {String} itemUuid \n   * @returns {Actor5e}\n   */\n  static getActorFromItem(itemUuid){\n    const actorId = itemUuid.split(\".\")[1];\n    const actor = game.actors.get(actorId);\n\n    return actor;\n  }\n\n  static findItemFromActor = (actorId, itemId, actionName) => {\n    const actor = game.actors.get(actorId);\n    LogUtil.log(\"findItemFromActor\", [itemId, actionName]);\n    if(!actor) return null;\n\n    let item = itemId ? actor.items.find((it) => {\n      return it.id === itemId; \n    }) : null; \n\n    if(!item){ \n      // match exact name\n      item = actionName ? actor.items.find((it) => it.name.toLowerCase() === actionName.toLowerCase()) : null;\n      // if no exact name, look for the name with \"(Legacy)\" tag\n      if(!item){ item = actor.items.find((it) => it.name.toLowerCase() === (actionName + \" (Legacy)\").toLowerCase()) };\n    } \n\n    return item;\n  }\n\n  /**\n   * Checks if module is currently installed and active\n   * @param {string} moduleName \n   * @returns \n   */\n  static isModuleOn(moduleName){\n    const module = game.modules?.get(moduleName);\n    return module?.active ? true : false;\n  }\n\n  /**\n   * checks roll mode to determine if its mode is blind / private\n   * @param {String} mode \n   */\n  static isPrivateRoll(mode){\n    return mode === CONST.DICE_ROLL_MODES.BLIND || mode === CONST.DICE_ROLL_MODES.PRIVATE;\n  }\n\n  /**\n   * Removes the MeasuredTemplate \n   * @param {Item5e} item \n   */\n  static removeTemplateForItem (item) {\n    LogUtil.log(\"removeTemplateForItem - A\", [item]);\n    const removeTemplateSettingOn = SettingsUtil.get(\"remove-template\");\n    LogUtil.log(\"removeTemplateForItem - B\", [removeTemplateSettingOn]);\n    if(!removeTemplateSettingOn){ return; }\n    const templates = canvas.templates.objects.children.filter(mt => {\n      return mt.document.flags.dnd5e.item === item?.uuid;\n    });\n\n    canvas.scene.deleteEmbeddedDocuments('MeasuredTemplate', templates.map(i=>i.id));\n  }\n\n  static getUserFromActor(actorId){\n    let owner;\n    if(!actorId){ return null; }\n    const actor = actorId ? game.actors.get(actorId) : null;\n    \n    let assignedPlayer = game.users.players.find(pl=>{\n      return pl.active === true && pl.character.id === actorId;\n    });\n    owner = assignedPlayer;\n\n    if(!owner){ \n      // owner = game.users.find(u => u.isGM===true); \n      game.users.players.forEach(pl => {\n        if(pl.active && actor.testUserPermission(pl, foundry.CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER, { exact:true })){\n          owner = pl;\n        }\n      });\n    }\n\n    // let gm = game.users.find(u => u.isGM===true);\n    LogUtil.log(\"getUserFromActor\", [actorId, owner]);\n\n    return owner;\n  }\n\n\n  static html(parent, selector) {\n    return parent.querySelector(selector);\n  }\n\n  /**\n   * Adds css rules to a <style> element at the body\n   * @param {string} varName \n   * @param {string} varValue \n   */\n  static addCSSVars = (varName, varValue) => {\n    let bodyStyle = document.querySelector('#crlngn-chat-vars');\n    \n    if (!bodyStyle) {\n      // Create style element if it doesn't exist\n      const body = document.querySelector('body');\n      bodyStyle = document.createElement('style');\n      bodyStyle.id = 'crlngn-chat-vars';\n      bodyStyle.textContent = 'body.crlngn-chat {\\n}\\n';\n      body.prepend(bodyStyle);\n    }\n    \n    // Parse the current CSS content\n    let cssText = bodyStyle.textContent;\n    \n    // Find or create the rule block\n    let ruleStart = cssText.indexOf('body.crlngn-chat {');\n    let ruleEnd = cssText.indexOf('}', ruleStart);\n    \n    if (ruleStart === -1) {\n      // If rule doesn't exist, create it\n      cssText = 'body.crlngn-chat {\\n}\\n';\n      ruleStart = 0;\n      ruleEnd = cssText.indexOf('}');\n    }\n    \n    // Get all the current declarations\n    const rulePart = cssText.substring(ruleStart + 'body.crlngn-chat {'.length, ruleEnd);\n    \n    // Split by semicolons to get individual declarations\n    const declarations = rulePart.split(';')\n      .map(decl => decl.trim())\n      .filter(decl => decl !== '');\n    \n    // Create a map of existing variables\n    const varsMap = {};\n    declarations.forEach(decl => {\n      const parts = decl.split(':');\n      if (parts.length >= 2) {\n        const name = parts[0].trim();\n        const value = parts.slice(1).join(':').trim(); // Handle values that might contain colons\n        if (name) varsMap[name] = value;\n      }\n    });\n    \n    // Format the value if it appears to need quotes\n    // For string values used in content properties (i18n text)\n    if (varName.includes('i18n') && \n        typeof varValue === 'string' && \n        !varValue.startsWith('\"') && \n        !varValue.startsWith(\"'\") && \n        !varValue.match(/^url\\(|^rgba?\\(|^hsla?\\(/)) {\n      varValue = `\"${varValue}\"`;\n    }\n    \n    // Update or add the new variable\n    varsMap[varName] = varValue;\n    \n    // Rebuild the rule content\n    const newRuleContent = Object.entries(varsMap)\n      .map(([name, value]) => `  ${name}: ${value};`)\n      .join('\\n');\n    \n    // Rebuild the entire CSS\n    const newCss = \n      cssText.substring(0, ruleStart) + \n      'body.crlngn-chat {\\n' + \n      newRuleContent + \n      '\\n}' + \n      cssText.substring(ruleEnd + 1);\n    \n    // Update the style element\n    bodyStyle.textContent = newCss;\n  };\n}\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      LogUtil.log(`Attempting to register module...`);\n\n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n        LogUtil.log(`SocketUtil | Module registered`, [SocketUtil.socket]);\n      } catch (e) {\n          LogUtil.log(`Problem registering module`, [e]);\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n      LogUtil.log(`SocketUtil - Registered callback`, [SocketUtil.socket, name]);\n    } else {\n      LogUtil.log(`SocketUtil - Failed to register callback (socket not initialized)`, [SocketUtil.socket, name]);\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log(`SocketUtil - sendMessage`, [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as GM.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute for all clients.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    if (!SocketUtil.socket) {\n        LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as user.\");\n        return;\n    }\n    \n    // We need to use the original handler, but we'll handle deserialization on reception\n    const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n    LogUtil.log(\"SocketUtil - Executed as user.\", [resp]);\n    return resp;\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) {\n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let test = r.toJSON();\n          return test;\n        }else{\n          return r;\n        }\n      });\n    }\n    LogUtil.log(\"ROLLS DATA\", [data]);\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    let result = {};\n    // Handle null or undefined\n    if (data == null) return data;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      // rolls = data.rolls.map(r => Roll.fromJSON(JSON.stringify(r)));\n      \n      result = {\n        ...data,\n        rolls: data.rolls.map(r => {\n          if(typeof r === 'string'){\n            return Roll.fromJSON(r);\n          }else{\n            return Roll.fromJSON(JSON.stringify(r));\n          }\n        })\n      }\n    }\n    LogUtil.log(\"ROLLS RESULT\", [result]);\n    \n    return result;\n  }\n\n}\n","import { HOOKS_CORE } from \"../constants/Hooks.mjs\";\nimport { ACTIVITY_TYPES, MODULE_ID } from \"../constants/General.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\n\n/**\n * Utility class for handling activity-related functionality\n */\nexport class ActivityUtil {\n\n  /**\n   * Initialize the util\n   * @static\n   */\n  static init(){\n    Hooks.on(HOOKS_CORE.RENDER_CHAT_MESSAGE, ActivityUtil.#onRenderChatMessage);\n  }\n\n  /**\n   * Trigger an attack roll for a player\n   * @param {Object} data - configuration data\n   */\n  static triggerActivity = async (data) => {\n    const { activityUuid, diceTypes, config, dialog, message } = data;\n    const diceConfig = RollUtil.playerDiceConfigs[game.user.id]; // Get the player's core dice configuration\n    const situationalBonus = config.situational ? Number(config.situational) : 0;\n    const activityData = activityUuid.split(\".\"); // example: \"Actor.Br4xlsplGmnHwdiG.Item.kDxIYfzQIFmukmH0.Activity.attackWarhammerI\"\n    const actor = game.actors.get(activityData[1]); // pick actor from the uuid\n    const item = actor?.items.get(activityData[3]); // pick item from the uuid\n    const activity = item?.system?.activities?.get(activityData[5]) || item?.activities?.get(activityData[5]); // pick activity from the uuid\n    const areDiceConfigured = diceTypes.map(diceType => {\n      return diceConfig?.[diceType] !== \"\";\n    }).includes(true);\n\n    LogUtil.log(\"triggerActivity #1\", [activity, diceTypes, areDiceConfigured, data]);\n    if(!actor || !item || !activity) return;\n    \n    const updatedConfig = {\n      ...config,\n      parts: config.parts || []\n    };\n    const updatedDialog = {\n      ...dialog,\n      configure: !areDiceConfigured, // if player configured roll resolver for specific dice, we can skip the configuration window\n    };\n    const updatedMessage = {\n      ...message,\n      flavor: config.flavor\n    };\n    \n    // Add situational bonus to the parts array if not already included\n    if (situationalBonus && !updatedConfig.parts.includes('@situational')) {\n      updatedConfig.parts.push('@situational');\n    }\n    \n    // Call the activity's rollAttack method\n    switch(config.type){\n      case ACTIVITY_TYPES.ATTACK:{\n        ActivityUtil.useAttack({activity, config: updatedConfig, message: updatedMessage, dialog: updatedDialog});\n        LogUtil.log(\"triggerActivity attack\", [updatedConfig, updatedDialog, updatedMessage]);\n        // activity.use(updatedConfig, updatedDialog, updatedMessage);\n        // activity.rollAttack(updatedConfig, updatedDialog, updatedMessage);\n        break;\n      }\n      case ACTIVITY_TYPES.DAMAGE:{\n        activity.rollDamage(updatedConfig, updatedDialog, updatedMessage);\n        break;\n      }\n      case ACTIVITY_TYPES.SAVE:{\n        LogUtil.log(\"triggerActivity #rollSave\", [activity.rollSave, actor.rollSavingThrow]);\n        updatedMessage.create = true;\n        activity.use(updatedConfig, updatedDialog, updatedMessage);\n        // activity.rollSave(updatedConfig, updatedDialog, updatedMessage);\n        // actor.rollSavingThrow(updatedConfig, updatedDialog, updatedMessage);\n        break;\n      }\n      default:{\n        break;\n      }\n    }\n    \n    // activity.use(updatedConfig, updatedDialog, updatedMessage);\n    LogUtil.log(\"triggerActivity #2\", [activityUuid, config, data]);\n  }\n\n  /**\n   * Creates a chat card for an attack usage with buttons that\n   * allow config dialog to pick up configuration options selected by the game master\n   * @param {Object} data \n   */\n  static useAttack = async (data) => {\n    const { activity, config, message, dialog } = data;\n    const context = await activity._usageChatContext(message);\n    const originalActions = activity.metadata.usage.actions;\n    const attackButton = context.buttons.find(btnData => btnData.dataset.action === \"rollAttack\");\n    const damageButton = context.buttons.find(btnData => btnData.dataset.action === \"rollDamage\");\n    \n    // Add configuration data to buttons for later pickup\n    const attackConfigData = {\n      situational: config.situational,\n      attackMode: config.attackMode,\n      advantage: config.advantage,\n      disadvantage: config.disadvantage,\n      ammunition: config.ammunition\n    }\n    attackButton.dataset = {\n      ...attackButton.dataset,\n      ...attackConfigData,\n      action: \"rollAttack\",\n      activityUuid: activity.uuid,\n    }\n    damageButton.dataset = {\n      ...attackButton.dataset,\n      action: \"rollDamage\",\n      activityUuid: activity.uuid\n      // situational: config.situational,\n      // critical: config.critical,\n      // isCritical: config.isCritical\n    }\n\n    activity.metadata.usage.actions = {\n      'rollAttack': ActivityUtil.rollModifiedAttack,\n      'rollDamage': ActivityUtil.rollModifiedDamage\n    }\n\n    const messageConfig = foundry.utils.mergeObject({\n      rollMode: message.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      data: {\n        content: await renderTemplate(activity.metadata.usage.chatCard, context),\n        speaker: ChatMessage.getSpeaker({ actor: activity.actor }),\n        flags: {\n          core: { canPopout: true },\n          [MODULE_ID]: {\n            modifiedActions: true,\n            activityType: activity.type,\n            activityUuid: activity.uuid\n          }\n        }\n      }\n    }, message);\n\n    LogUtil.log(\"useAttack\", [activity, context, messageConfig, data]);\n    const card = await ChatMessage.create(messageConfig.data);\n    // activity.use(config, dialog, message);\n    activity.rollAttack(attackConfigData);\n    // activity.metadata.usage.actions = originalActions; // Restore original actions \n  }\n\n  static rollModifiedAttack(event, target, message){\n    LogUtil.log(\"rollModifiedAttack\", [event, target, message, this]);\n    const { activity } = ActivityUtil.getDataFromUuid(target.dataset.activityUuid);\n    \n    // Call the original rollAttack method with our custom configuration\n    activity.rollAttack({ \n      event: event,\n      advantage: target.dataset.advantage === \"true\",\n      disadvantage: target.dataset.disadvantage === \"true\",\n      attackMode: target.dataset.attackMode,\n      ammunition: target.dataset.ammunition,\n      situational: target.dataset.situational\n    }, {}, message);\n  }\n\n  static rollModifiedDamage(event, target, message){\n    LogUtil.log(\"rollModifiedDamage\", [event, target, message]);\n    this.rollDamage();\n  }\n\n  /**\n   * Handle rendering of chat messages\n   * This is called each time a chat message is rendered\n   * @param {ChatMessage} message - The ChatMessage being rendered\n   * @param {HTMLElement} html - The HTML element being rendered\n   * @param {Object} data - The data object used to render the message\n   * @private\n   */\n  static #onRenderChatMessage(message, html, data) {\n    // Check if this is one of our modified activity messages\n    const flags = message.flags?.[MODULE_ID] || data.message?.flags?.[MODULE_ID];\n    LogUtil.log(\"#onRenderChatMessage\", [message, html, data, flags]);\n    if (!flags?.modifiedActions) return;\n\n    // Get the activity from the UUID\n    const activityUuid = flags.activityUuid;\n    if (!activityUuid) return;\n    const { activity } = ActivityUtil.getDataFromUuid(activityUuid);\n\n    if (activity) {\n      LogUtil.log(\"#onRenderChatMessage Activating button listeners\", [activity, message, html]);\n      // Call the activateChatListeners method to attach the event listener\n      // This will make the system use our custom functions when buttons are clicked\n      activity.activateChatListeners(message, html[0]);\n    }\n  }\n\n  static getDataFromUuid(activityUuid){\n    const activityData = activityUuid.split(\".\");\n    const actor = game.actors.get(activityData[1]);\n    const item = actor?.items.get(activityData[3]);\n    const activity = item?.system?.activities?.get(activityData[5]) || item?.activities?.get(activityData[5]);\n    \n    return { actor, item, activity };\n  }\n}\n","import { HOOKS_DND5E, HOOKS_CORE } from \"@/constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { HOOK_NAMES, MODULE_ID } from \"@/constants/General.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { ACTIVITY_TYPES, CALL_TYPE } from \"../constants/General.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\n\n/**\n * Utility class for handling roll-related functionality\n * More information on DnD5e hooks here:\n * https://github.com/foundryvtt/dnd5e/wiki/Hooks\n */\nexport class RollUtil {\n  static requestsEnabled = false;\n  static SOCKET_CALLS = {\n    triggerRollSkillV2: { action:\"triggerRollSkillV2\", type: CALL_TYPE.CHECK },\n    triggerActivity: { action:\"triggerActivity\", type: CALL_TYPE.ACTIVITY }\n  };\n  static diceConfig = {};\n  static playerDiceConfigs = {};\n  \n  static init() {\n    LogUtil.log(\"RollUtil.init() - Registering hooks\", [], true);\n    // Hooks.on(HOOKS_DND5E.PRE_ROLL_V2, RollUtil.#onPreRollV2);\n    Hooks.on(HOOKS_CORE.RENDER_ROLL_RESOLVER, RollUtil.#onRenderRollResolver);\n\n    // ACTIVITY\n    Hooks.on(HOOKS_DND5E.PRE_USE_ACTIVITY, RollUtil.#onPreUseActivity);\n    Hooks.on(HOOKS_DND5E.POST_USE_ACTIVITY, RollUtil.#onPostUseActivity);\n    \n    // Ability Checks & Saving Throws\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, RollUtil.#onPreRollAbilityCheck);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, RollUtil.#onPreRollSavingThrow);\n    \n    // Concentration\n    Hooks.on(HOOKS_DND5E.PRE_BEGIN_CONCENTRATING, RollUtil.#onPreBeginConcentrating);\n    Hooks.on(HOOKS_DND5E.PRE_END_CONCENTRATION, RollUtil.#onPreEndConcentration);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_CONCENTRATION_V2, RollUtil.#onPreRollConcentrationV2);\n    \n    // Death Saves\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, RollUtil.#onPreRollDeathSaveV2);\n    \n    // Skills & Tools\n    LogUtil.log(\"Registering preRollSkillV2 hook: \" + HOOKS_DND5E.PRE_ROLL_SKILL_V2, [], true);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_SKILL_V2, RollUtil.#onPreRollSkillToolV2);\n    \n    LogUtil.log(\"Registering preRollToolV2 hook: \" + HOOKS_DND5E.PRE_ROLL_TOOL_V2, [], true);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_TOOL_V2, RollUtil.#onPreRollSkillToolV2);\n    \n    // Hit Dice\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, RollUtil.#onPreRollHitDieV2);\n    \n    // Hit Points\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_CLASS_HIT_POINTS, RollUtil.#onPreRollClassHitPoints);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_NPC_HIT_POINTS, RollUtil.#onPreRollNPCHitPoints);\n    \n    // Initiative\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_INITIATIVE_DIALOG, RollUtil.#onPreRollInitiativeDialog);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_INITIATIVE, RollUtil.#onPreRollInitiative);\n    \n    // Attacks\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, RollUtil.#onPreRollAttackV2);\n    \n    // Damage Rolls\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, RollUtil.#onPreRollDamageV2);\n    \n    // Formula Rolls\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_FORMULA_V2, RollUtil.#onPreRollFormulaV2);\n    \n    // Recharge Rolls\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_RECHARGE_V2, RollUtil.#onPreRollRechargeV2);\n\n    // Roll Config\n    // Hooks.on(HOOKS_DND5E.BUILD_ROLL_CONFIG, RollUtil.#onBuildRollConfig);\n    Hooks.on(HOOKS_DND5E.RENDER_ROLL_CONFIGURATION_DIALOG, RollUtil.#onRenderRollConfigurationDialog);\n    Hooks.on(HOOKS_DND5E.POST_ROLL_CONFIG, RollUtil.#onPostRollConfiguration);\n    \n    // Item Display\n    // Hooks.on(HOOKS_DND5E.PRE_DISPLAY_CARD_V2, RollUtil.#onPreDisplayCardV2);\n    // Hooks.on(HOOKS_CORE.CREATE_CHAT_MESSAGE, RollUtil.#onCreateChatMessage);\n    // Hooks.on(HOOKS_CORE.RENDER_CHAT_MESSAGE, RollUtil.#onCreateChatMessage);\n\n    // Enable debug mode for hooks to see all hook calls in the console\n    CONFIG.debug.hooks = true;\n    LogUtil.log(\"Hook debugging enabled\", [], true);\n  }\n\n  /**\n   * Register socket calls with socketlib for remote execution\n   */\n  static registerSocketCalls(){\n    Object.values(RollUtil.SOCKET_CALLS).forEach(element => {\n      if(element.type === CALL_TYPE.ACTIVITY){\n        SocketUtil.registerCall(element.action, ActivityUtil[element.action]);\n      }else{\n        SocketUtil.registerCall(element.action, RollUtil[element.action]);\n      }\n    });\n  }\n\n  // static #onCreateChatMessage(a, b, c, d){\n  //   LogUtil.log(\"#onCreateChatMessage\", [a, b, c, d]);\n  // }\n\n  /**\n   * Hook handler for dnd5e.onPreUseActivity\n   * Fires before an activity is used\n   * @param {Activity} activity - Activity being used.\n   * @param {ActivityUseConfiguration} usageConfig - Configuration info for the activation.\n   * @param {ActivityDialogConfiguration} dialogConfig - Configuration info for the usage dialog.\n   * @param {ActivityMessageConfiguration} messageConfig - Configuration info for the created chat message.\n   */\n  static #onPreUseActivity(activity, usageConfig, dialogConfig, messageConfig){\n    LogUtil.log(\"#onPreUseActivity #1\", []);\n    const playerOwner = RollUtil.getPlayerOwner(activity.actor.id);\n    LogUtil.log(\"#onPreUseActivity #2\", [playerOwner, activity, usageConfig, dialogConfig, messageConfig]);\n\n    if(!RollUtil.requestsEnabled || !usageConfig.create){return;} //activity.type !== ACTIVITY_TYPES.SAVE\n    \n    if(playerOwner.id !== game.user.id && game.user.isGM){\n      usageConfig.create.measuredTemplate = false;\n      usageConfig.consume.spellSlot = false;\n      messageConfig.create = false;\n      messageConfig.data = {\n        ...(messageConfig.data || {}),\n        flags: {\n          ...(messageConfig.data?.flags || {}),\n          [MODULE_ID]: {\n            modifiedActions: true,\n            activityType: activity.type,\n            activityUuid: activity.uuid\n          }\n        }\n      }\n\n      RollUtil.getTrigger({ \n        activity,\n        rolls: activity.rolls,\n        dialog: dialogConfig,\n        message: messageConfig,\n        config: usageConfig\n      });\n    }else{\n      usageConfig.create.measuredTemplate = true;\n      usageConfig.consume.spellSlot = true;\n    }\n    \n  }\n\n  /**\n   * Hook handler for dnd5e.onPostUseActivity\n   * Fires after an activity is used\n   * @param {Activity} activity - Activity being used.\n   * @param {ActivityUseConfiguration} usageConfig - Configuration info for the activation.\n   * @param {ActivityDialogConfiguration} dialogConfig - Configuration info for the usage dialog.\n   * @param {ActivityMessageConfiguration} messageConfig - Configuration info for the created chat message.\n   */\n  static #onPostUseActivity(activity, usageConfig, dialogConfig, messageConfig){\n    LogUtil.log(\"#onPostUseActivity\", [activity, usageConfig, dialogConfig, messageConfig]);\n    const playerOwner = RollUtil.getPlayerOwner(activity.actor.id);\n    if(!usageConfig.create || activity.type !== ACTIVITY_TYPES.SAVING_THROW){return;}\n    if(playerOwner.id !== game.user.id && game.user.isGM){\n      \n      usageConfig.create.measuredTemplate = true;\n      usageConfig.consume.spellSlot = true;\n      const newConfig = {\n        ...usageConfig,\n        // options: roll.options,\n        type: HOOK_NAMES.SAVING_THROW.name,\n        target: activity.target\n      };\n      const triggerData = {\n        activityUuid: activity.uuid,\n        config: newConfig,\n        dialog: dialogConfig,\n        message: messageConfig\n      }\n      messageConfig.create = true;\n      \n      LogUtil.log(\"SocketUtil.execForUser\", [playerOwner.id, triggerData]);\n      SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerActivity.action, playerOwner.id, triggerData);\n    }\n  }\n\n  /**\n   * Hook handler for dnd5e.renderRollConfigurationDialog\n   * Fires when a roll configuration dialog is rendered\n   * @param {RollConfigurationDialog} rollConfigDialog - The roll configuration dialog\n   * @param {HTMLElement} html - The HTML element of the dialog\n   */\n  static #onRenderRollConfigurationDialog(rollConfigDialog, html){\n    const target = rollConfigDialog.config?.event?.target?.closest(\"button[data-action]\");\n\n    LogUtil.log(\"#onRenderRollConfigurationDialog\", [rollConfigDialog, target]);\n    // Created flag to prevent render loop\n    const flagAttribute = `data-${MODULE_ID}-${game.user.id}custom-event`; \n    if (html.hasAttribute(flagAttribute)) {\n      return; \n    }\n    return; \n    const situationalBonus = target ? Number(target?.dataset?.situational) : rollConfigDialog.config?.situational || undefined;\n\n    if(situationalBonus){\n      const situationalInput = html.querySelector('input[name=\"roll.0.situational\"]');\n      if(situationalInput){\n        if(situationalInput.value != situationalBonus){\n          situationalInput.value = situationalBonus;\n        }\n        html.setAttribute(flagAttribute, \"true\");\n\n        // Trigger the change event to force formula recalculation\n        situationalInput.dispatchEvent(new Event('change', {\n          bubbles: true,\n          cancelable: false\n        }));\n      }\n    }\n    html.setAttribute(flagAttribute, \"true\");\n  }\n\n  // static #onPreRollV2(config, dialog, message) {\n  /**\n   * Hook handler for dnd5e.onPreRollSkillToolV2\n   * Fires before a roll is performed\n   * @param {Object} config - BasicRollProcessConfiguration for the roll\n   * @param {Object} dialog - BasicRollDialogConfiguration for the dialog\n   * @param {Object} message - BasicRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollSkillToolV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollSkillToolV2 CALLED\", [config, dialog, message]);\n    const target = config.event?.target?.closest(\"button[data-action=rollRequest]\");\n    \n    // Extract situational bonus from the dataset or config\n    const situationalBonus = target ? Number(target.dataset.situational) : config.situational;\n    LogUtil.log(\"Situational bonus:\", [situationalBonus], true);\n    \n    if(target){\n      // Set configuration properties\n      config.advantage = target.dataset.advantage===\"true\";\n      config.disadvantage = target.dataset.disadvantage===\"true\";\n      config.ability = target.dataset.ability;\n      config.abilityId = target.dataset.ability;\n      config.situational = situationalBonus; // Set situational bonus in config\n\n      // Set flavor text if available\n      if (target.dataset.flavor) {\n        message.data.flavor = target.dataset.flavor;\n        if (dialog.options?.window) {\n          dialog.options.window.title = target.dataset.flavor;\n        }\n      }\n      LogUtil.log(\"Applied target data to config\", [config], true);\n    }\n    \n    // Ensure the situational bonus is included in the parts array\n    if (situationalBonus !== undefined && !config.parts?.includes('@situational')) {\n      if (!config.parts) config.parts = [];\n      config.parts.push('@situational');\n    }\n\n    if (!config.rolls) config.rolls = [];\n    LogUtil.log(\"Number of rolls:\", [config.rolls.length], true);\n    \n    for (const roll of config.rolls) {\n      if (!roll.data) roll.data = {};\n      if (!roll.data.flags) roll.data.flags = {};\n      \n      // Add your module's flags to the roll options\n      roll.data.flags[MODULE_ID] = {\n        flavor: dialog.options?.window?.title || message.data.flavor\n      };\n      roll.data = {\n        // ...roll.data,\n        flags: roll.data.flags,\n        situational: situationalBonus,\n        target: target?.dataset.dc ? Number(target.dataset.dc) : config.target,\n        ability: target?.dataset.ability || config.ability\n      };\n      if(roll.resetFormula) roll.resetFormula();\n      LogUtil.log(\"Modified roll data\", [roll], true);\n    }\n    \n    LogUtil.log(\"#onPreRollSkillToolV2 completed\", [], true);\n    return true; // Allow the roll to proceed\n  }\n\n  /**\n   * Get the player owner object for a given actor ID\n   * @param {string} actorId - Actor ID to get player owner for\n   * @returns {Object|null} Player owner object, or null if not found\n   */\n  static getPlayerOwner(actorId) {\n    return game.users.find(u => u.character?.id === actorId);\n\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollAbilityCheck\n   * Fires before an ability check is rolled\n   * @param {Object} config - AbilityRollProcessConfiguration for the roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollAbilityCheck(config) {\n    LogUtil.log(\"#onPreRollAbilityCheck\", [config]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollSavingThrow\n   * Fires before a saving throw is rolled\n   * @param {Object} config - AbilityRollProcessConfiguration for the roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollSavingThrow(config) {\n    LogUtil.log(\"#onPreRollSavingThrow\", [config]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preBeginConcentrating\n   * Fires before a concentration effect is created\n   * @param {Actor5e} actor - The actor that will be concentrating\n   * @param {Item5e} item - The item that requires concentration\n   * @returns {boolean|void} Return false to prevent concentration effect from being created\n   */\n  static #onPreBeginConcentrating(actor, item) {\n    LogUtil.log(\"#onPreBeginConcentrating\", [actor, item]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preEndConcentration\n   * Fires before a concentration effect is deleted\n   * @param {Actor5e} actor - The actor that is concentrating\n   * @param {ActiveEffect} effect - The concentration effect\n   * @returns {boolean|void} Return false to prevent concentration effect from being deleted\n   */\n  static #onPreEndConcentration(actor, effect) {\n    LogUtil.log(\"#onPreEndConcentration\", [actor, effect]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollConcentrationV2\n   * Fires before a saving throw to maintain concentration is rolled\n   * @param {Object} config - D20RollProcessConfiguration for the roll\n   * @param {Object} dialog - D20RollDialogConfiguration for the dialog\n   * @param {Object} message - D20RollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollConcentrationV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollConcentrationV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollDeathSaveV2\n   * Fires before a death saving throw is rolled\n   * @param {Object} config - D20RollProcessConfiguration for the roll\n   * @param {Object} dialog - D20RollDialogConfiguration for the dialog\n   * @param {Object} message - D20RollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollDeathSaveV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollDeathSaveV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollSkillV2\n   * Fires before a skill check is rolled\n   * @param {Object} config - SkillToolRollProcessConfiguration for the roll\n   * @param {Object} dialog - SkillToolRollDialogConfiguration for the dialog\n   * @param {Object} message - SkillToolRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  // static #onPreRollSkillV2(config, dialog, message) {\n  //   LogUtil.log(\"#onPreRollSkillV2\", [config, dialog, message]);\n  // }\n\n  /**\n   * Hook handler for dnd5e.preRollToolCheckV2\n   * Fires before a tool check is rolled\n   * @param {Object} config - SkillToolRollProcessConfiguration for the roll\n   * @param {Object} dialog - SkillToolRollDialogConfiguration for the dialog\n   * @param {Object} message - SkillToolRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollToolCheckV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollToolCheckV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollHitDieV2\n   * Fires before a hit die is rolled\n   * @param {Object} config - HitDieRollProcessConfiguration for the roll\n   * @param {Object} dialog - HitDieRollDialogConfiguration for the dialog\n   * @param {Object} message - HitDieRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollHitDieV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollHitDieV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollClassHitPoints\n   * Fires before hit points are rolled for a character's class\n   * @param {Actor5e} actor - The actor\n   * @param {Object} classItem - The class item\n   * @param {Object} formula - The formula to roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollClassHitPoints(actor, classItem, formula) {\n    LogUtil.log(\"#onPreRollClassHitPoints\", [actor, classItem, formula]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollNPCHitPoints\n   * Fires before hit points are rolled for an NPC\n   * @param {Actor5e} actor - The NPC actor\n   * @param {Object} formula - The formula to roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollNPCHitPoints(actor, formula) {\n    LogUtil.log(\"#onPreRollNPCHitPoints\", [actor, formula]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollInitiativeDialog\n   * Fires before the initiative dialog is shown\n   * @param {Object} config - Configuration for the roll\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollInitiativeDialog(config) {\n    LogUtil.log(\"#onPreRollInitiativeDialog\", [config]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollInitiative\n   * Fires before initiative is rolled for an Actor\n   * @param {Actor5e} actor - The actor rolling initiative\n   * @param {Object} options - Roll options\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollInitiative(actor, options) {\n    LogUtil.log(\"#onPreRollInitiative\", [actor, options]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollAttackV2\n   * Fires before an attack is rolled\n   * @param {Object} config - AttackRollProcessConfiguration for the roll\n   * @param {Object} dialog - AttackRollDialogConfiguration for the dialog\n   * @param {Object} message - AttackRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollAttackV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollAttackV2\", [config, dialog, message]);\n    const target = config.event?.target?.closest(\"button[data-action=rollAttack]\");\n    \n    // Extract situational bonus from the dataset or config\n    const situationalBonus = target ? Number(target.dataset.situational) : config.situational;\n    LogUtil.log(\"Situational bonus:\", [situationalBonus], true);\n    \n    if(target){\n      // Set configuration properties\n      config.advantage = target.dataset.advantage===\"true\";\n      config.disadvantage = target.dataset.disadvantage===\"true\";\n      config.attackMode = target.dataset.attackMode;\n      config.situational = situationalBonus; // Set situational bonus in config\n\n      // Set flavor text if available\n      if (target.dataset.flavor) {\n        message.data.flavor = target.dataset.flavor;\n        if (dialog.options?.window) {\n          dialog.options.window.title = target.dataset.flavor;\n        }\n      }\n      LogUtil.log(\"Applied target data to config\", [config], true);\n    }\n    \n    // Ensure the situational bonus is included in the parts array\n    if (situationalBonus !== undefined && !config.parts?.includes('@situational')) {\n      if (!config.parts) config.parts = [];\n      config.parts.push('@situational');\n    }\n\n    if (!config.rolls) config.rolls = [];\n    LogUtil.log(\"Number of rolls:\", [config.rolls.length], true);\n    \n    for (const roll of config.rolls) {\n      if (!roll.data) roll.data = {};\n      if (!roll.data.flags) roll.data.flags = {};\n      \n      // Add your module's flags to the roll options\n      roll.data.flags[MODULE_ID] = {\n        flavor: dialog.options?.window?.title || message.data.flavor\n      };\n      roll.data = {\n        // ...roll.data,\n        flags: roll.data.flags,\n        situational: situationalBonus,\n        // target: target?.dataset.dc ? Number(target.dataset.dc) : config.target,\n        // ability: target?.dataset.ability || config.ability\n      };\n      if(roll.resetFormula) roll.resetFormula();\n      LogUtil.log(\"Modified roll data\", [roll], true);\n    }\n    \n    LogUtil.log(\"#onPreRollSkillToolV2 completed\", [], true);\n    return true; // Allow the roll to proceed\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollDamageV2\n   * Fires before damage is rolled\n   * @param {Object} config - DamageRollProcessConfiguration for the roll\n   * @param {Object} dialog - DamageRollDialogConfiguration for the dialog\n   * @param {Object} message - DamageRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollDamageV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollDamageV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollFormulaV2\n   * Fires before a formula is rolled for a Utility activity\n   * @param {Object} config - FormulaRollProcessConfiguration for the roll\n   * @param {Object} dialog - FormulaRollDialogConfiguration for the dialog\n   * @param {Object} message - FormulaRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollFormulaV2(config, dialog, message) {\n    LogUtil.log(\"#onPreRollFormulaV2\", [config, dialog, message]);\n  }\n\n  /**\n   * Hook handler for dnd5e.preRollRechargeV2\n   * Fires before recharge is rolled for an Item or Activity\n   * @param {Item5e|Object} item - The item being recharged\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPreRollRechargeV2(item) {\n    LogUtil.log(\"#onPreRollRechargeV2\", [item]);\n  }\n\n  /**\n   * Hook handler for dnd5e.postRollConfiguration\n   * Fires after roll configuration is complete, but before the roll is evaluated\n   * @param {Array} rolls - BasicRoll[] array of rolls\n   * @param {Object} config - BasicRollProcessConfiguration for the roll\n   * @param {Object} dialog - BasicRollDialogConfiguration for the dialog\n   * @param {Object} message - BasicRollMessageConfiguration for the message\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onPostRollConfiguration(rolls, config, dialog, message) {\n    LogUtil.log(\"#onPostRollConfiguration\", [rolls, config, dialog, message]);\n    if(!game.user.isGM){ return; }\n\n    // if(config.subject.type===ACTIVITY_TYPES.SAVE){\n    const triggerData = {\n      rolls,\n      config,\n      dialog,\n      message\n    };\n\n    RollUtil.getTrigger(triggerData);\n    // }\n\n    return false;\n  }\n\n  /**\n   * Post a message to chat in case user cancels the roll popup\n   * @param {*} actor \n   * @param {*} config \n   * @param {*} dialog \n   * @param {*} message \n   */\n  static postRequestChatMessage = async(player, actor, config, dialog, message) => {\n    // Ensure we have a valid situational bonus value\n    const situationalBonus = config.situational !== undefined ? Number(config.situational) : 0;\n    \n    const dataset = {\n      ...config,\n      type: config.type,\n      action: \"rollRequest\",\n      visibility: player.id,\n      target: actor.uuid,\n      dc: config.target,\n      hideDC: true,\n      flavor: config.flavor,\n      situational: situationalBonus,\n      parts: config.parts || []\n    };\n    \n    // Ensure the situational bonus is included in the parts array\n    if (situationalBonus && !dataset.parts.includes('@situational')) {\n      dataset.parts.push('@situational');\n    }\n    \n    // check https://github.com/foundryvtt/dnd5e/blob/735a7e96cc80458e47acaef1af5c5ea173369ace/module/enrichers.mjs for more info\n    const buttons = [{\n      buttonLabel: dnd5e.enrichers.createRollLabel({...dataset, format: \"short\", icon: true}),\n      hiddenLabel: dnd5e.enrichers.createRollLabel({...dataset, format: \"short\", icon: true, hideDC: true}),\n      dataset: dataset\n    }]; \n    message.data.flavor = config.flavor;\n\n    LogUtil.log(\"postRequestChatMessage\", [ message, dataset ]);\n    \n    const chatData = {\n      user: player.id, \n      content: await renderTemplate(\"systems/dnd5e/templates/chat/request-card.hbs\", { buttons }),\n      flavor: `GM has requested a roll`,\n      speaker: message.speaker // ChatMessage.implementation.getSpeaker({ alias: \"Game Master\" })\n    };\n    \n    await ChatMessage.implementation.create(chatData);\n  }\n\n  \n\n  // /**\n  //  * Trigger a damage roll for a player\n  //  * @param {Object} config - Damage roll configuration\n  //  * @param {Object} dialog - Dialog configuration\n  //  * @param {Object} message - Message data\n  //  */\n  // static triggerRollDamageV2 = async (config, dialog, message) => {\n  //   const diceConfig = RollUtil.playerDiceConfigs[game.user.id];\n  //   const situationalBonus = config.situational !== undefined ? Number(config.situational) : 0;\n    \n  //   // Get the actor and item\n  //   const actor = game.actors.get(config.subject._id);\n  //   const item = actor?.items?.get(config.item?._id);\n  //   LogUtil.log(\"triggerRollDamageV2\", [game.user, diceConfig, actor, item]);\n  //   if(!actor || !item) return;\n    \n  //   const updatedDialog = {\n  //     ...dialog,\n  //     configure: diceConfig?.d20 ? false : true\n  //   };\n  //   const updatedConfig = {\n  //     ...config,\n  //     parts: config.parts || []\n  //   };\n  //   const updatedMessage = {\n  //     ...message,\n  //     flavor: config.flavor\n  //   };\n    \n  //   // Add situational bonus to the parts array if not already included\n  //   if (situationalBonus && !updatedConfig.parts.includes('@situational')) {\n  //     updatedConfig.parts.push('@situational');\n  //   }\n    \n  //   // Call the item's rollDamage method\n  //   item.rollDamage(updatedConfig, updatedDialog, updatedMessage);\n  // }\n\n  /**\n   * Hook handler for dnd5e.renderRollResolver\n   * Fires after the roll resolver is rendered\n   * @param {RollResolver} resolver - The roll resolver\n   * @param {HTMLElement} html - The HTML element for the roll resolver\n   * @returns {boolean|void} Return false to prevent the normal rolling process\n   */\n  static #onRenderRollResolver(resolver, html) {\n    LogUtil.log(\"#onRenderRollResolver\", [resolver, html]);\n\n    // Check if any entry in the fulfillable Map has method: \"pixels\"\n    const hasPixelsMethod = value => value?.method === \"pixels\";\n    const isPixelsDice = resolver.fulfillable instanceof Map && \n                        [...resolver.fulfillable.values()].some(hasPixelsMethod);\n\n    // Add custom UI elements if the Resolver is for Pixel Dice\n    if(isPixelsDice){\n      const roll = resolver.roll;\n      const flags = roll?.data?.flags?.[MODULE_ID];\n      if (!flags) { flags = {flavor: \"\"} }\n      \n      html.classList.add('crlngn-rolls');\n      html.querySelector('.window-header .window-title').innerHTML = game.i18n.localize(\"CRLNGN_ROLLS.ui.forms.pixelsRollTitle\");\n\n      // Add title and flavor from flag, if present\n      const customElement = document.createElement('div');\n      customElement.classList.add('crlngn-resolver-title');\n      customElement.innerHTML = `<h1>${game.i18n.localize(\"CRLNGN_ROLLS.ui.forms.pixelsWaitingTitle\")}</h1><br/>${flags.flavor}`;\n\n      html.querySelector('.standard-form').prepend(customElement);\n    }\n  }\n\n  static getTrigger(triggerData){\n    const { config, dialog, message, rolls } = triggerData;\n\n    const isActivity = config.subject instanceof dnd5e.dataModels.activity.BaseActivityData;\n    const actor = isActivity ? config.subject?.actor : config.subject;\n\n    // TODO: what to do if there's no actor for this roll, such as custom rolls\n    if(!actor){ return; } \n    const activity = isActivity ? config.subject : null;\n    const activityType = activity?.type || \"\";\n    // const hookName = config.hookNames?.[0]?.toLowerCase() || \"\";\n    const playerOwner = actor.hasPlayerOwner ? GeneralUtil.getUserFromActor(actor.id) : null;\n    const roll = rolls[0];\n    if(!roll){return;}\n    const situationalBonus = roll?.data.situational ? Number(roll.data.situational) : Number(config.situational || \"\");\n\n    roll.data.flags = {\n      ... roll.data.flags,\n      [MODULE_ID]: {\n        flavor: message.data.flavor,\n        situational: situationalBonus,\n        attackMode: config.attackMode,\n        ammunition: config.ammunition\n      }\n    }\n\n\n    if(playerOwner && playerOwner !== game.user && RollUtil.requestsEnabled){\n      let damageParts, diceTypes;\n\n      let newConfig = {\n        subject: config.subject,\n        situational: situationalBonus,\n        flavor: message.data.flavor,\n        rolls: [roll],\n        parts: config.parts || []\n      };\n      if(isActivity){\n        newConfig.activity = config.subject;\n      }\n      // Create message data\n      const msg = {\n        data: {\n          flavor: dialog.options?.window?.title || message.data.flavor\n        },\n        speaker: {\n          ...message.speaker,\n          alias: actor.name\n        },\n        rollMode: message.rollMode\n      };\n      // Add situational bonus to parts if needed\n      if (situationalBonus && !newConfig.parts.includes('@situational')) {\n        newConfig.parts.push('@situational');\n      }\n\n      if(isActivity){\n        damageParts = activity?.damage?.parts || [];\n        diceTypes = damageParts.map(part => part.denomination).filter(denomination => denomination && typeof denomination === \"string\");\n      }\n      const forwardData = { config:newConfig, dialog, message: msg, isActivity, diceTypes, activity, playerOwner, roll };\n      LogUtil.log(\"getTrigger\", [activityType,forwardData]);\n      switch(activityType){\n        case ACTIVITY_TYPES.ATTACK: {\n          RollUtil.forwardAttackActivity(forwardData); break;\n        }\n        case ACTIVITY_TYPES.DAMAGE: {\n          RollUtil.forwardDamageActivity(forwardData); break;\n        }\n        case ACTIVITY_TYPES.CHECK: {\n          RollUtil.forwardSkillToolCheck(forwardData); break;\n        }\n        case ACTIVITY_TYPES.SAVE: {\n          RollUtil.forwardSaveActivity(forwardData); break;\n        }\n        default:{\n          return null;\n        }\n      }\n\n      return null;\n    }\n  }\n\n  static forwardAttackActivity(data){\n    const { config, dialog, message, isActivity, diceTypes, playerOwner, roll } = data;\n\n    const newConfig = {\n      ...config,\n      options: roll?.options,\n      type: HOOK_NAMES.ATTACK.name,\n      attackMode: roll?.options?.attackMode,\n      advantage: roll?.hasAdvantage || false,\n      disadvantage: roll?.hasDisadvantage || false,\n      ammunition: roll?.options?.ammunition,\n      target: config.target\n    };\n    const triggerData = {\n      activityUuid: config.subject.uuid,\n      diceTypes: diceTypes,\n      config: newConfig,\n      dialog: dialog,\n      message: {\n        ...message,\n        create: false\n      }\n    }\n    LogUtil.log(\"SocketUtil.execForUser\", [playerOwner.id, triggerData]);\n    SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerActivity.action, playerOwner.id, triggerData);\n\n  }\n\n  static forwardDamageActivity(data){\n    const { config, dialog, message, isActivity, diceTypes, playerOwner, roll } = data;\n\n    const newConfig = {\n      ...config,\n      options: roll.options,\n      type: HOOK_NAMES.DAMAGE.name,\n      critical: roll.options.critical,\n      isCritical: roll.options.isCritical,\n      target: roll.options.target\n    };\n    const triggerData = {\n      activityUuid: config.subject.uuid,\n      diceTypes: diceTypes,\n      config: newConfig,\n      dialog: dialog,\n      message: message\n    }\n    if(isActivity){\n      triggerData.diceTypes = diceTypes;\n    }\n    \n    LogUtil.log(\"SocketUtil.execForUser\", [playerOwner.id, triggerData]);\n    SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerActivity.action, playerOwner.id, triggerData);\n  }\n\n  static forwardSaveActivity(ata){\n    const { config, dialog, message, isActivity, diceTypes, activity, playerOwner } = data;\n    const newConfig = {\n      ...config,\n      // ...roll.options,\n      type: HOOK_NAMES.SAVING_THROW.name,\n      target: activity.target\n    };\n    const triggerData = {\n      activityUuid: activity.uuid,\n      diceTypes: diceTypes,\n      config: newConfig,\n      dialog: dialog,\n      message: message\n    }\n    message.create = false;\n    \n    LogUtil.log(\"SocketUtil.execForUser\", [playerOwner.id, triggerData]);\n    SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerActivity.action, playerOwner.id, triggerData);\n  }\n\n  static forwardSkillToolCheck(data){\n    const { config, dialog, message, isActivity, diceTypes, activity, playerOwner, roll } = data;\n    const newConfig = {\n      ...config,\n      type: config.skill ? HOOK_NAMES.SKILL.name : HOOK_NAMES.TOOL.name,\n      subject: config.subject,\n      ability: roll.data.abilityId || config.ability,\n      abilityId: roll.data.abilityId || config.ability,\n      advantage: roll.hasAdvantage || false,\n      disadvantage: roll.hasDisadvantage || false,\n      target: 17,\n      parts: config.parts || []\n    };\n\n    if(hookName === HOOK_NAMES.SKILL.name){\n      newConfig.skill = config.skill;\n    }else if(hookName === HOOK_NAMES.TOOL.name){\n      newConfig.tool = config.tool;\n    }\n    if(dialog.options?.window?.title){\n      dialog.options.window.title = message.data.flavor;\n    }\n\n    const triggerData = {\n      diceTypes: diceTypes,\n      config: newConfig,\n      dialog: dialog,\n      message: message\n    }\n    // RollUtil.postRequestChatMessage(playerOwner, actor, newConfig, dialog, msg);\n    LogUtil.log(\"SocketUtil.execForUser\", [playerOwner.id, triggerData]);\n    SocketUtil.execForUser(RollUtil.SOCKET_CALLS.triggerRollSkillV2, playerOwner.id, triggerData);\n  }\n\n\n\n  ///////\n  //\n  static triggerRollSkillV2 = async (data) => {\n    const { diceTypes, config, dialog, message } = data;\n    const diceConfig = RollUtil.playerDiceConfigs[game.user.id];\n    const situationalBonus = config.situational !== undefined ? Number(config.situational) : 0;\n    const areDiceConfigured = diceTypes.map(diceType => {\n      return diceConfig?.[diceType] !== \"\";\n    }).includes(true);\n\n    // Get the actor\n    const actor = game.actors.get(config.subject._id);\n    LogUtil.log(\"triggerRollSkillV2\", [game.user, diceConfig, actor]);\n    if(!actor) return;\n    RollUtil.postRequestChatMessage(playerOwner, actor, config, dialog, message);\n    \n    const updatedDialog = {\n      ...dialog,\n      configure: diceConfig?.d20 ? false : true\n    };\n    const updatedConfig = {\n      ...config,\n      parts: config.parts || []\n    };\n    const updatedMessage = {\n      ...message,\n      flavor: config.flavor\n    };\n    \n    // Add situational bonus to the parts array if not already included\n    if (config.situational && !updatedConfig.parts.includes('@situational')) {\n      updatedConfig.parts.push('@situational');\n    }\n    if(config.skill){\n      actor.rollSkill(updatedConfig, updatedDialog, updatedMessage);\n    }else if(config.tool){\n      actor.rollToolCheck(updatedConfig, updatedDialog, updatedMessage);\n    }\n  }\n\n  \n\n  \n}\n\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  \n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n      LogUtil.log(\"Registering... \",[entry]);\n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n      LogUtil.log(\"registerSettings\",[setting.tag, SettingsUtil.get(setting.tag)]);\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n      LogUtil.log(\"GET Setting\", [selectedSetting, setting]);\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n    LogUtil.log(\"Setting\",[settingName, selectedSetting]);\n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n      LogUtil.log(\"Unable to change setting\",[settingName, selectedSetting]);\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsSetting(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsSetting(value){\n    const SETTINGS = getSettings();\n    const isEnabled = value!==undefined ? value : SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    RollUtil.requestsEnabled = isEnabled;\n    const rollRequestsToggle = document.querySelector(\"#crlngn-request-toggle\");\n    if(!rollRequestsToggle){ return; }\n    if (isEnabled === false) {\n      rollRequestsToggle.classList.remove(\"active\");\n    } else {\n      rollRequestsToggle.classList.add(\"active\");\n    }\n\n    const tooltipStr = game.i18n.localize(rollRequestsToggle.classList.contains(\"active\") ? \n      \"CRLNGN_ROLLS.ui.buttons.rollRequestsToggleOn\" : \n      \"CRLNGN_ROLLS.ui.buttons.rollRequestsToggleOff\");\n    rollRequestsToggle.dataset.tooltip = tooltipStr;\n\n    if (game.tooltip) {\n      game.tooltip.activate(rollRequestsToggle, {text: tooltipStr});\n    }\n    \n    LogUtil.log(\"Roll Requests Toggle\", [isEnabled, rollRequestsToggle]);\n  }\n\n}\n","import { HOOKS_CORE } from \"../constants/Hooks.mjs\"; \nimport { LogUtil } from \"./LogUtil.mjs\"; \nimport { SettingsUtil } from \"./SettingsUtil.mjs\"; \nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  static SOCKET_CALLS = {\n    receiveDiceConfig: \"receiveDiceConfig\",\n    getDiceConfig: \"getDiceConfig\"\n  };\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    // Initialize socketlib\n    SocketUtil.initialize(Main.registerSocketCalls);\n    Hooks.once(HOOKS_CORE.INIT, () => { \n      const SETTINGS = getSettings();\n      LogUtil.log(\"Initiating module...\", [], true);\n      SettingsUtil.registerSettings();\n      RollUtil.init();\n    });\n\n    Hooks.once(HOOKS_CORE.READY, () => {\n      LogUtil.log(\"Core Ready\", []);\n      const SETTINGS = getSettings();\n      \n      var isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n      if(isDebugOn){CONFIG.debug.hooks = true};\n      \n      if(game.user.isGM){\n        Main.injectRollRequestsToggle();\n      }\n      \n      if(game.user.isGM){\n        Hooks.on(HOOKS_CORE.USER_CONNECTED, Main.onUserConnected);\n        // Only run this on the GM client\n        game.users.forEach(user => {\n          Main.onUserConnected(user);\n        });\n      }\n    });\n    ActivityUtil.init();\n  }\n\n  /**\n   * Request dice configuration from the connected user\n   * @param {*} user \n   * @returns \n   */\n  static onUserConnected(user) {\n    // Request dice configuration from the connected user\n    if (user.active && user.id !== game.user.id) {\n      LogUtil.log(\"onUserConnected\", [user]);\n      SocketUtil.execForUser(Main.SOCKET_CALLS.getDiceConfig, user.id);\n    }\n  }\n  \n  // Add the getDiceConfig method that will be called on the player's client\n  static getDiceConfig() { \n    if(!game.user) return;\n    const clientSettings = game.settings.storage.get(\"client\");\n    let diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    diceConfig = diceConfig || \"\";\n    LogUtil.log(`getDiceConfig`, [diceConfig]);\n    \n    if(game.user.isGM) {\n      RollUtil.playerDiceConfigs[game.user.id] = diceConfig;\n      SocketUtil.execForGMs(Main.SOCKET_CALLS.receiveDiceConfig, game.user.id, diceConfig);\n      return;\n    }else{\n      RollUtil.playerDiceConfigs[game.user.id] = diceConfig ? JSON.parse(diceConfig) : {};\n    }\n    \n  }\n\n  // Add the receiveDiceConfig method that will be called on the GM's client\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId===game.user.id){ // for GM or own user\n      // Store the dice configuration for this user\n      if (!RollUtil.playerDiceConfigs) RollUtil.playerDiceConfigs = {};\n      RollUtil.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n      \n      LogUtil.log(`Received dice configuration from user ${userId}`, [RollUtil.playerDiceConfigs]);\n    };\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(Main.SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(Main.SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    RollUtil.registerSocketCalls();\n  }\n\n  static injectRollRequestsToggle(){\n    const SETTINGS = getSettings();\n    const rollRequestsToggleHTML = `<label class=\"chat-control-icon active\" id=\"crlngn-request-toggle\" data-tooltip-direction=\"LEFT\"><i class=\"fas fa-bolt\"></i></label>`;\n    \n    document.querySelector(\"#chat-controls\").insertAdjacentHTML(\"afterbegin\", rollRequestsToggleHTML);\n    const rollRequestsToggle = document.querySelector(\"#crlngn-request-toggle\");\n    const isEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    SettingsUtil.applyRollRequestsSetting(isEnabled);\n    \n    rollRequestsToggle.addEventListener(\"click\", (event) => {\n      event.target.classList.toggle(\"active\");\n      const isActive = event.target.classList.contains(\"active\");\n      SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, isActive);\n    });\n    return rollRequestsToggle;\n  }\n\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\nMain.init();\n"],"names":["HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","MODULE_ID","DEBUG_TAG","HOOK_NAMES","ACTIVITY_TYPES","CALL_TYPE","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","__publicField","LogUtil","SETTING_INPUT","SETTING_SCOPE","getSettings","GeneralUtil","user","gm","us","targetTokens","itemUuid","actorId","moduleName","module","mode","item","removeTemplateSettingOn","SettingsUtil","templates","mt","i","owner","actor","pl","parent","selector","selectedTargets","target","_b","targets","token","name","img","system","uuid","statuses","ac","itemId","actionName","it","varName","varValue","bodyStyle","body","cssText","ruleStart","ruleEnd","declarations","decl","varsMap","parts","value","newRuleContent","newCss","_SocketUtil","hasRolls","r","result","callbackFunc","func","callback","handler","parameters","userId","resp","SocketUtil","_ActivityUtil_static","onRenderChatMessage_fn","_ActivityUtil","__privateMethod","event","message","activity","activityUuid","_c","activityData","html","flags","__privateAdd","diceTypes","config","dialog","diceConfig","RollUtil","situationalBonus","areDiceConfigured","diceType","updatedConfig","updatedDialog","updatedMessage","context","attackButton","btnData","damageButton","attackConfigData","messageConfig","ActivityUtil","_RollUtil_static","onPreUseActivity_fn","onPostUseActivity_fn","onRenderRollConfigurationDialog_fn","onPreRollSkillToolV2_fn","onPreRollAbilityCheck_fn","onPreRollSavingThrow_fn","onPreBeginConcentrating_fn","onPreEndConcentration_fn","onPreRollConcentrationV2_fn","onPreRollDeathSaveV2_fn","onPreRollToolCheckV2_fn","onPreRollHitDieV2_fn","onPreRollClassHitPoints_fn","onPreRollNPCHitPoints_fn","onPreRollInitiativeDialog_fn","onPreRollInitiative_fn","onPreRollAttackV2_fn","onPreRollDamageV2_fn","onPreRollFormulaV2_fn","onPreRollRechargeV2_fn","onPostRollConfiguration_fn","onRenderRollResolver_fn","_RollUtil","element","u","triggerData","_d","rolls","isActivity","activityType","playerOwner","roll","damageParts","newConfig","msg","part","denomination","forwardData","ata","usageConfig","dialogConfig","rollConfigDialog","flagAttribute","_e","_f","effect","classItem","formula","resolver","hasPixelsMethod","customElement","player","dataset","buttons","chatData","SETTINGS","entry","setting","settingObj","settingName","selectedSetting","newValue","isEnabled","rollRequestsToggle","tooltipStr","_Main","isDebugOn","isActive","Main"],"mappings":"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"}