{"version":3,"file":"crlngn-roll-requests.js","sources":["../../src/constants/Hooks.mjs","../../src/constants/General.mjs","../../src/components/LogUtil.mjs","../../src/constants/Settings.mjs","../../src/components/SettingsUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/ActivityUtil.mjs","../../src/components/GMRollConfigDialog.mjs","../../src/components/RollRequestsMenu.mjs","../../src/components/RollInterceptor.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["/**\n * Core Foundry hooks\n * @constant\n * @type {Object}\n */\nexport const HOOKS_CORE = {\n  INIT: \"init\",\n  READY: \"ready\",\n  RENDER_CHAT_MESSAGE: \"renderChatMessage\",\n  RENDER_SIDEBAR_TAB: \"renderSidebarTab\",\n  UPDATE_SCENE: \"updateScene\",\n  RENDER_SCENE_NAVIGATION: \"renderSceneNavigation\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\",\n  USER_CONNECTED: \"userConnected\",\n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\",\n  CREATE_CHAT_MESSAGE: \"createChatMessage\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  COLLAPSE_SIDE_BAR: \"collapseSidebar\"\n};\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}\n\n/**\n * DnD5e hooks\n */\nexport const HOOKS_DND5E = {\n  // General Rolling Process\n  PRE_ROLL_V2: \"dnd5e.preRollV2\",\n\n  // Activity\n  PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n  POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n  \n  // Ability Checks & Saving Throws\n  PRE_ROLL_ABILITY_CHECK: \"dnd5e.preRollAbilityCheckV2\",\n  PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrowV2\",\n  ROLL_ABILITY_CHECK: \"dnd5e.rollAbilityCheckV2\",\n  ROLL_SAVING_THROW: \"dnd5e.rollSavingThrowV2\",\n  \n  // Concentration\n  PRE_BEGIN_CONCENTRATING: \"dnd5e.preBeginConcentrating\",\n  BEGIN_CONCENTRATING: \"dnd5e.beginConcentrating\",\n  PRE_END_CONCENTRATION: \"dnd5e.preEndConcentration\",\n  END_CONCENTRATION: \"dnd5e.endConcentration\",\n  PRE_ROLL_CONCENTRATION_V2: \"dnd5e.preRollConcentrationV2\",\n  ROLL_CONCENTRATION_V2: \"dnd5e.rollConcentrationV2\",\n  \n  // Damage\n  PRE_CALCULATE_DAMAGE: \"dnd5e.preCalculateDamage\",\n  CALCULATE_DAMAGE: \"dnd5e.calculateDamage\",\n  PRE_APPLY_DAMAGE: \"dnd5e.preApplyDamage\",\n  APPLY_DAMAGE: \"dnd5e.applyDamage\",\n  \n  // Death Saves\n  PRE_ROLL_DEATH_SAVE_V2: \"dnd5e.preRollDeathSaveV2\",\n  ROLL_DEATH_SAVE_V2: \"dnd5e.rollDeathSaveV2\",\n  POST_ROLL_DEATH_SAVE: \"dnd5e.postRollDeathSave\",\n  \n  // Skills & Tools\n  PRE_ROLL_SKILL_V2: \"dnd5e.preRollSkillV2\",\n  PRE_ROLL_TOOL_V2: \"dnd5e.preRollToolV2\",\n  ROLL_SKILL_V2: \"dnd5e.rollSkillV2\",\n  ROLL_TOOL_V2: \"dnd5e.rollToolV2\",\n  \n  // Hit Dice\n  PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n  ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n  \n  // Hit Points\n  PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n  ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n  PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n  ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPChitPoints\",\n  \n  // Initiative\n  PRE_ROLL_INITIATIVE_DIALOG: \"dnd5e.preRollInitiativeDialog\",\n  PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n  ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n  \n  // Attacks\n  PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n  ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n  POST_ROLL_ATTACK: \"dnd5e.postRollAttack\",\n  \n  // Damage Rolls\n  PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n  ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n  \n  // Formula Rolls\n  PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\",\n  ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\",\n  \n  // Recharge Rolls\n  PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n  ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n  \n  // Car Display\n  PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n  DISPLAY_CARD: \"dnd5e.displayCard\",\n\n  // Config\n  BUILD_ROLL_CONFIG: \"dnd5e.buildRollConfig\",\n  POST_ROLL_CONFIG: \"dnd5e.postRollConfiguration\",\n  RENDER_ROLL_CONFIGURATION_DIALOG: \"renderRollConfigurationDialog\",\n  RENDER_SKILL_TOOL_ROLL_DIALOG: \"renderSkillToolRollConfigurationDialog\",\n  RENDER_FORMULA_ROLL_DIALOG: \"renderFormulaRollConfigurationDialog\"\n}","/**\n * Module ID constant\n * @constant\n * @type {string}\n */\nexport const MODULE_ID = \"crlngn-roll-requests\";\n\n/**\n * Debug tag for console logging\n * @constant\n * @type {Array}\n */\nexport const DEBUG_TAG = [\n  `%cFlash Rolls 5e`,\n  `color:rgb(47, 151, 161); font-weight: bold;`,\n  `|`,\n];\n\nexport const HOOK_NAMES = {\n  // \"\" (empty string) - General roll\n  ATTACK: { name: \"attack\", requestType: \"attack\" }, // Attack Activity\n  DAMAGE: { name: \"damage\", requestType: \"damage\" }, // Damage Activity\n  SAVE: { name: \"save\", requestType: \"damage\" }, // Save Activity (usually with damage)\n  SAVING_THROW: { name: \"savingthrow\", requestType: \"check\" }, // Saving throws\n  ABILITY_CHECK: { name: \"abilitycheck\", requestType: \"check\" }, // Ability checks\n  CONCENTRATION: { name: \"concentration\", requestType: \"check\" }, // Concentration checks\n  DEATH_SAVE: { name: \"deathsave\", requestType: \"save\" }, // Death saving throws\n  SKILL: { name: \"skill\", requestType: \"check\" }, // Skill checks\n  TOOL: { name: \"tool\", requestType: \"check\" }, // Tool checks\n  HIT_DIE: { name: \"hitdie\", requestType: \"formula\" }, // Hit die rolls\n  INITIATIVE: { name: \"initiative\", requestType: \"check\" }, // Initiative rolls\n  FORMULA: { name: \"formula\", requestType: \"formula\" }, // Formula rolls\n  RECHARGE: { name: \"recharge\", requestType: \"formula\" }, // Recharge rolls\n\n  D20_TEST: { name: \"d20Test\", requestType: \"formula\" }, // D20 test\n  SHORT_REST: { name: \"shortRest\", requestType: \"formula\" }, // Short rest\n  LONG_REST: { name: \"longRest\", requestType: \"formula\" }, // Long rest\n};\n\nexport const ACTIVITY_TYPES = {\n  ATTACK: \"attack\",\n  CAST: \"cast\",\n  CHECK: \"check\",\n  DAMAGE: \"damage\",\n  ENCHANT: \"enchant\",\n  FORWARD: \"forward\",\n  HEAL: \"heal\",\n  ORDER: \"order\",\n  SAVE: \"save\",\n  SUMMON: \"summon\",\n  TRANSFORM: \"transform\",\n  UTILITY: \"utility\"\n};\n\nexport const CALL_TYPE = {\n  ACTIVITY: \"activity\",\n  CHECK: \"check\",\n}\n\nexport const BUTTON_ACTION_TYPES = {\n  ROLL_REQUEST: \"rollRequest\",\n  ROLL_ATTACK: \"rollAttack\",\n  ROLL_DAMAGE: \"rollDamage\"\n}\n\nexport const ROLL_REQUEST_OPTIONS = {\n  ABILITY_CHECK: { name: \"abilityCheck\", label: \"Ability Check\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SAVING_THROW: { name: \"savingThrow\", label: \"Saving Throw\", subList: \"abilities\", actorPath: 'system.abilities' },\n  SKILL: { name: \"skill\", label: \"Skill Check\", subList: \"skills\", actorPath: 'system.skills' },\n  TOOL: { name: \"tool\", label: \"Tool Check\", subList: \"tools\", actorPath: 'system.tools' },\n  CONCENTRATION: { name: \"concentration\", label: \"Concentration Check\", subList: null, actorPath: '' },\n  INITIATIVE: { name: \"initiativeDialog\", label: \"Initiative Roll\", subList: null, actorPath: '' },\n  DEATH_SAVE: { name: \"deathSave\", label: \"Death Save\", subList: null, actorPath: '' },\n  CUSTOM: { name: \"custom\", label: \"Custom Roll\", subList: null, actorPath: '' },\n  // HIT_DIE: { name: \"hitDie\", label: \"Hit Die\", subList: null, actorPath: '' }\n}\n\n/**\n * Module configuration object\n * @constant\n * @type {Object}\n */\nexport const MODULE = {\n  ID: MODULE_ID,\n  ROLL_REQUEST_OPTIONS: ROLL_REQUEST_OPTIONS\n}\n","import { DEBUG_TAG, MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * Utility class for handling logging operations in the module\n * Provides methods for debug, warning, and error logging with module context\n */\nexport class LogUtil {\n  /** @type {boolean} Whether debug logging is enabled */\n  static debugOn = false;\n\n  /**\n   * Logs information to the console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   * @param {boolean} [bypassSettings=false] - Whether to bypass debug settings check\n   */\n  static log(ref=\"\", data=[], bypassSettings=false) {\n    try {\n      const debugSetting = game.settings.get(MODULE_ID, \"debug-mode\") || LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn) { return; }\n      console.log(...DEBUG_TAG, ref, ...data);\n    } catch(e) {\n      // If settings aren't available yet, check bypassSettings\n      if (bypassSettings || LogUtil.debugOn) {\n        console.log(...DEBUG_TAG, ref, ...data);\n      }\n    }\n  }\n\n  /**\n   * Outputs warning on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]) {\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error to the console and/or UI notification\n   * @param {string} strRef - Reference string for the error\n   * @param {object} options - Error logging configuration\n   * @param {boolean} [options.ui=false] - Whether to show UI notification\n   * @param {boolean} [options.console=true] - Whether to log to console\n   * @param {boolean} [options.permanent=false] - Whether UI notification should be permanent\n   * @static\n   */\n  static error(strRef, options = { ui: false, console: true, permanent: false }) {\n    if(options.ui) {\n      ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, strRef);\n  }\n}","export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\n/**\n * Get all module settings\n * @returns {Object} Module settings\n */\nexport const getSettings = () => {\n  return {\n    debugMode: {\n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n    rollRequestsEnabled: {\n      tag: \"roll-requests-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollRequestsEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    skipDialogs: {\n      tag: \"skip-dialogs\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.skipDialogs.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    useGMTargetTokens: {\n      tag: \"use-gm-target-tokens\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.useGMTargetTokens.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: false,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    rollInterceptionEnabled: {\n      tag: \"roll-interception-enabled\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.rollInterceptionEnabled.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n    showOfflineNotifications: {\n      tag: \"show-offline-notifications\",\n      label: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.label\"),\n      hint: game.i18n.localize(\"CRLNGN_ROLLS.settings.showOfflineNotifications.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }\n    // Additional settings will be added as needed\n  };\n};\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing module settings\n */\nexport class SettingsUtil {\n  /**\n   * Register all module settings\n   * @static\n   */\n  static registerSettings() {\n    const SETTINGS = getSettings();\n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n      LogUtil.log(\"Registering... \",[entry]);\n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined || SettingsUtil.get(setting.tag)===null){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n      LogUtil.log(\"registerSettings\",[setting.tag, SettingsUtil.get(setting.tag)]);\n    });\n  }\n  \n  /**\n   * Retrieves the value of a module setting\n   * @param {string} settingName - Name of the setting to retrieve\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {*} Current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        setting = selectedSetting?.value;\n      }\n      LogUtil.log(\"GET Setting\", [selectedSetting, setting]);\n    }\n\n    return setting;\n  }\n  \n  /**\n   * Updates the value of a module setting\n   * @param {string} settingName - Name of the setting to update\n   * @param {*} newValue - New value to set\n   * @param {string} [moduleName=MODULE_ID] - ID of the module the setting belongs to\n   * @returns {boolean} True if setting was updated successfully\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n    LogUtil.log(\"Setting\",[settingName, selectedSetting]);\n\n    try{\n      game.settings.set(moduleName, settingName, newValue);\n    }catch(e){\n      LogUtil.log(\"Unable to change setting\",[settingName, selectedSetting]);\n    }\n\n    return true;\n  }\n\n  static apply(settingName, newValue){\n    const SETTINGS = getSettings();\n    switch(settingName){\n      case SETTINGS.rollRequestsEnabled.tag:\n        SettingsUtil.applyRollRequestsEnabled(newValue);\n        break;\n      default:\n        break;\n    }\n  }\n\n  static applyRollRequestsEnabled(newValue){\n    const requestsIcon = document.querySelector(\"#chat-controls .chat-control-icon.roll-requests-icon\");\n    if(!requestsIcon){ return; }\n    \n    if(newValue){\n      requestsIcon.classList.add(\"active\");\n    }else{\n      requestsIcon.classList.remove(\"active\");\n    }\n  }\n}\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      LogUtil.log('Attempting to register module...', []);\n\n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n        LogUtil.log(`SocketUtil | Module registered`, [SocketUtil.socket]);\n      } catch (e) {\n          LogUtil.log(`Problem registering module`, [e]);\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n      LogUtil.log(`SocketUtil - Registered callback`, [SocketUtil.socket, name]);\n    } else {\n      LogUtil.log(`SocketUtil - Failed to register callback (socket not initialized)`, [SocketUtil.socket, name]);\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log(`SocketUtil - sendMessage`, [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as GM.\", []);\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute for all clients.\", []);\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    if (!SocketUtil.socket) {\n        LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as user.\", []);\n        return;\n    }\n\n    if(userId === game.user.id){\n      LogUtil.log(\"SocketUtil - Preventing recursive call\", [userId]);\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        LogUtil.log(\"SocketUtil - Preventing recursive call\", [executionKey]);\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n        const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n        LogUtil.log(\"SocketUtil - Executed as user.\", [resp]);\n        return resp;\n    } catch (error) {\n        LogUtil.log(\"SocketUtil - Error executing as user\", [error]);\n        return null;\n    } finally {\n        // Always clean up, even if there was an error\n        SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data, hasRolls=false) { \n    // Handle null or undefined\n    if (data == null) return data;\n    \n    if (hasRolls && data.rolls && Array.isArray(data.rolls)) {\n      // data.rolls = data.rolls.map(r => SocketUtil.serializeForTransport(r));\n      \n      data.rolls = data.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          return serialized;\n        }else{\n          return r;\n        }\n      });\n    }\n    LogUtil.log(\"ROLLS DATA\", [data, data.subject]);\n    \n    return data;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data, hasRolls=false) {\n    let result = { ...data };\n    if (!data) return result;\n\n    if(hasRolls && data.rolls && data.rolls.length > 0){\n      const rolls = result.rolls.map(r => {\n        let roll = r;\n        if(typeof r === 'string'){\n          roll = Roll.fromJSON(r);\n        }else {\n          roll = Roll.fromJSON(JSON.stringify(r));\n        }\n        return roll;\n      })\n      result.rolls = [...rolls];\n      return result;\n    }\n    \n    return result;\n  }\n\n}\n","import { LogUtil } from './LogUtil.mjs';\n\n/**\n * Utility class for handling D&D5e 4.x activities\n */\nexport class ActivityUtil {\n  \n  /**\n   * Find the appropriate activity for a given roll type on an item\n   * @param {Item5e} item - The item to search for activities\n   * @param {string} rollType - The type of roll (attack, damage, itemSave)\n   * @returns {Activity5e|null} - The found activity or null\n   */\n  static findActivityForRoll(item, rollType) {\n    if (!item?.system?.activities) return null;\n    \n    const activities = item.system.activities;\n    \n    switch (rollType) {\n      case 'attack':\n        // For attack rolls, find attack activities\n        const attackActivities = activities.getByType(\"attack\");\n        return attackActivities?.[0] || null;\n        \n      case 'damage':\n        // For damage rolls, check attack activities first, then damage, then save\n        const damageAttackActivities = activities.getByType(\"attack\");\n        if (damageAttackActivities?.length > 0) return damageAttackActivities[0];\n        \n        const damageActivities = activities.getByType(\"damage\");\n        if (damageActivities?.length > 0) return damageActivities[0];\n        \n        const saveActivities = activities.getByType(\"save\");\n        if (saveActivities?.length > 0) return saveActivities[0];\n        \n        return null;\n        \n      case 'itemSave':\n        // For save activities\n        const itemSaveActivities = activities.getByType(\"save\");\n        return itemSaveActivities?.[0] || null;\n        \n      default:\n        return null;\n    }\n  }\n  \n  /**\n   * Get all activities of a specific type from an item\n   * @param {Item5e} item - The item to search\n   * @param {string} activityType - The activity type (attack, damage, save, etc.)\n   * @returns {Activity5e[]} - Array of activities\n   */\n  static getActivitiesByType(item, activityType) {\n    if (!item?.system?.activities) return [];\n    return item.system.activities.getByType(activityType);\n  }\n  \n  /**\n   * Check if an item has activities suitable for a given roll type\n   * @param {Item5e} item - The item to check\n   * @param {string} rollType - The type of roll\n   * @returns {boolean} - Whether the item has suitable activities\n   */\n  static hasActivityForRoll(item, rollType) {\n    return !!this.findActivityForRoll(item, rollType);\n  }\n  \n  /**\n   * Execute a roll using the appropriate activity method\n   * @param {Actor5e} actor - The actor performing the roll\n   * @param {string} rollType - The type of roll\n   * @param {string} itemId - The item ID\n   * @param {string} activityId - The activity ID (optional)\n   * @param {Object} config - Roll configuration\n   */\n  static async executeActivityRoll(actor, rollType, itemId, activityId, config) {\n    const item = actor.items.get(itemId);\n    if (!item) {\n      throw new Error(`Item ${itemId} not found on actor ${actor.name}`);\n    }\n    \n    let activity = null;\n    \n    // If activity ID provided, use it directly\n    if (activityId) {\n      activity = item.system.activities?.get(activityId);\n      if (!activity) {\n        LogUtil.log('ActivityUtil.executeActivityRoll', ['Activity not found by ID, falling back to search', {\n          activityId,\n          itemName: item.name,\n          availableActivities: item.system.activities?.map(a => ({ id: a.id, type: a.type }))\n        }]);\n      }\n    }\n    \n    // If no activity found yet, search by roll type\n    if (!activity) {\n      activity = this.findActivityForRoll(item, rollType);\n    }\n    \n    // Execute the roll based on type\n    if (activity) {\n      LogUtil.log('ActivityUtil.executeActivityRoll', ['Executing activity roll', {\n        rollType,\n        activityId,\n        itemName: item.name,\n        activityType: activity.type\n      }]);\n      switch (rollType) {\n        case 'attack':\n          LogUtil.log('ActivityUtil.executeActivityRoll', ['Executing attack roll', {\n            hasTargets: game.user.targets.size > 0,\n            targetCount: game.user.targets.size,\n            skipDialog: config.fastForward,\n            isRollRequest: config.isRollRequest,\n            isGM: game.user.isGM\n          }]);\n          // For attack activities, use the activity's use() method which handles the full flow\n          // The activity will automatically use game.user.targets for targeting\n          \n          // IMPORTANT: For players receiving roll requests, ALWAYS show the dialog\n          const dialogConfig = {\n            configure: true  // Always true for players receiving roll requests\n          };\n \n          if(MidiQOL) {\n            const workflow = await ActivityUtil.syntheticItemRoll(item, {\n              ...config\n              // checkGMstatus: false\n            });\n            LogUtil.log('ActivityUtil.executeActivityRoll', ['MidiQOL', MidiQOL, activityId, MidiQOL?.Workflow?.getWorkflow(activity.uuid)]);\n            return;\n          }else{\n            return await activity.use(usageConfig, dialogConfig);\n          }\n          // \n        case 'damage':\n          if(MidiQOL) {\n            const workflow = MidiQOL?.Workflow?.getWorkflow(activity.uuid);\n            const damageRoll = await workflow.activity.rollDamage({\n              ...config,\n              workflow: workflow\n            });\n            // await workflow.setDamageRolls([damageRoll]);\n            // workflow.displayDamageRolls();\n            \n            // const damageRoll = await ActivityUtil.replaceDamage(workflow, ActivityUtil.getDamageFormula(activity));\n            LogUtil.log('ActivityUtil.executeActivityRoll', ['MidiQOL / Damage', damageRoll]);\n            \n            return;\n          }else{\n            return await activity.rollDamage(config);\n            // return await activity.use(usageConfig, dialogConfig);\n          }\n          \n          \n        case 'itemSave':\n          // For save activities, use the item's use() method to show the save card\n          return await item.use({ activity: activity.id }, { skipDialog: config.fastForward });\n          \n        default:\n          throw new Error(`Unknown roll type: ${rollType}`);\n      }\n    } else {\n      // Fallback to legacy methods if no activity found\n      LogUtil.log('ActivityUtil.executeActivityRoll', ['No activity found, using legacy methods', {\n        rollType,\n        itemName: item.name,\n        hasLegacyMethod: !!(item.rollAttack || item.rollDamage)\n      }]);\n      \n      switch (rollType) {\n        case 'attack':\n          if (item.rollAttack) {\n            return await item.rollAttack(config);\n          }\n          break;\n          \n        case 'damage':\n          if (item.rollDamage) {\n            return await item.rollDamage(config);\n          }\n          break;\n          \n        case 'itemSave':\n          // Try to use the item directly\n          return await item.use({}, { skipDialog: config.fastForward });\n      }\n      \n      throw new Error(`No suitable method found for ${rollType} on item ${item.name}`);\n    }\n  }\n  \n  /**\n   * Get display information for an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {Object} - Display information\n   */\n  static getActivityDisplayInfo(activity) {\n    if (!activity) return null;\n    \n    return {\n      name: activity.name || activity.constructor.metadata.label,\n      type: activity.type,\n      icon: activity.constructor.metadata.icon,\n      canAttack: activity.type === 'attack',\n      canDamage: ['attack', 'damage', 'save'].includes(activity.type),\n      canSave: activity.type === 'save'\n    };\n  }\n  \n  /**\n   * Get damage formula string from an activity\n   * @param {Activity5e} activity - The activity\n   * @returns {string|null} - Combined damage formula or null\n   */\n  static getDamageFormula(activity) {\n    if (!activity?.damage?.parts?.length) return null;\n    \n    // Extract all damage formulas and combine them\n    const formulas = activity.damage.parts.map(part => part.formula).filter(f => f);\n    return formulas.length > 0 ? formulas.join(' + ') : null;\n  }\n\n  static async syntheticItemRoll(item, config = {}) {\n    let defaultConfig = {\n        consumeUsage: false,\n        consumeSpellSlot: false\n    };\n    // let autoRollDamage = MidiQOL.configSettings().autoRollDamage;\n    // if (!['always', 'onHit'].includes(autoRollDamage)) autoRollDamage = 'none';\n    let defaultOptions = {\n      // targetUuids: targets.map(i => i.document.uuid),\n      configureDialog: true,\n      // ignoreUserTargets: true,\n      workflowOptions: {\n        autoRollAttack: false,\n        autoFastAttack: false,\n        autoRollDamage: 'none',\n        autoFastDamage: false\n      }\n    };\n\n    // options = genericUtils.mergeObject(defaultOptions, options);\n    config = {...defaultConfig, ...config};\n    LogUtil.log('ActivityUtil.syntheticItemRoll', ['Executing synthetic item roll', item, config]);\n    return await MidiQOL.completeItemUse(item, config, defaultOptions);\n  }\n\n  static async replaceDamage(workflow, formula, {ignoreCrit = false, damageType} = {}) {\n    formula = String(formula);\n    if (workflow.isCritical && !ignoreCrit) formula = await rollUtils.getCriticalFormula(formula, workflow.item.getRollData());\n    // let roll = await workflow.activity.rollDamage();\n    let roll = await new CONFIG.Dice.DamageRoll(formula).evaluate();\n    // let damageType = workflow.activity.damage.parts[0].types.first();\n    // // let roll = await new Roll(formula).roll({async: true});\n    // if (damageType) {\n    //   foundry.utils.setProperty(roll, 'options.type', damageType);\n    // } else {\n    //   foundry.utils.setProperty(roll, 'options.type', roll.terms[0].flavor);\n    // }\n    await workflow.setDamageRolls([roll]);\n    LogUtil.log('ActivityUtil.replaceDamage', ['Replaced damage', formula, roll, workflow.activity]);\n    \n    return roll;\n  }\n}","import { LogUtil } from \"./LogUtil.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\n\n/**\n * GM Roll Configuration Dialog\n * Extends the standard D&D5e roll configuration dialogs to add DC field and send request toggle\n */\nexport class GMRollConfigDialog extends dnd5e.applications.dice.D20RollConfigurationDialog {\n  constructor(config = {}, message = {}, options = {}) {\n    LogUtil.log('GMRollConfigDialog.constructor', ['Creating dialog', {\n      config,\n      message,\n      options\n    }]);\n    \n    // Ensure rollType is set in options\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    \n    // D20RollConfigurationDialog expects (config, message, options)\n    super(config, message, options);\n    \n    // Store GM-specific options\n    this.actors = options.actors || [];\n    this.sendRequest = options.sendRequest !== false;\n    this.showDC = options.showDC || false;\n    this.dcValue = options.dcValue || null;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * Prepare configuration data for a roll.\n   * Extends parent to add DC and send request options\n   * @param {D20Roll} roll    The roll being configured.\n   * @param {object} [config] Configuration for the roll.\n   * @param {object} [dialog] Configuration for the dialog.\n   * @param {object} [message] Configuration for the chat message.\n   * @returns {object}\n   * @protected\n   * @override\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * Prepare context that is provided to all rendered parts.\n   * Extends parent to add DC field context\n   * @param {ApplicationRenderOptions} options  Render options provided to the render method.\n   * @returns {object}\n   * @protected\n   * @override\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _onRender(context, options) {\n    super._onRender(context, options);\n    \n    LogUtil.log('GMRollConfigDialog._onRender', ['Dialog rendered', {\n      config: this.config,\n      actors: this.actors,\n      showDC: this.showDC,\n      sendRequest: this.sendRequest,\n      element: this.element\n    }]);\n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      LogUtil.log('GMRollConfigDialog._onRender', ['Fields already injected, skipping']);\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    // Try multiple selectors to find the configuration section\n    let configSection = this.element.querySelector('[data-application-part=\"configuration\"] fieldset');\n    if (!configSection) {\n      configSection = this.element.querySelector('.configuration fieldset');\n    }\n    if (!configSection) {\n      configSection = this.element.querySelector('fieldset');\n    }\n    \n    LogUtil.log('GMRollConfigDialog._onRender', ['Looking for config section', {\n      configSection: !!configSection,\n      showDC: this.showDC,\n      actorCount: this.actors.length,\n      element: this.element,\n      allFieldsets: this.element.querySelectorAll('fieldset').length\n    }]);\n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.appendChild(wrapper);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons\n   * @private\n   */\n  _attachButtonListeners() {\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n        LogUtil.log('GMRollConfigDialog button clicked', [action, {\n          currentAdvantage: this.config.advantage,\n          currentDisadvantage: this.config.disadvantage,\n          config: this.config\n        }]);\n      });\n    });\n  }\n  \n  /**\n   * Process form submission.\n   * @param {SubmitEvent} event             The originating form submission event.\n   * @param {HTMLFormElement} form          The form element that was submitted.\n   * @param {FormDataExtended} formData     Processed data for the submitted form.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _processSubmitData(event, form, formData) {\n    LogUtil.log('GMRollConfigDialog._processSubmitData', ['Processing form data', {\n      formData: Object.fromEntries(formData),\n      configBefore: this.config\n    }]);\n    \n    await super._processSubmitData(event, form, formData);\n    \n    // Extract DC value if present\n    if (formData.has(\"dc\") && formData.get(\"dc\") !== \"\") {\n      const dcValue = parseInt(formData.get(\"dc\"));\n      if (!isNaN(dcValue)) {\n        // Add DC to all rolls as target\n        for (const roll of this.config.rolls) {\n          roll.options.target = dcValue;\n        }\n      }\n    }\n    \n    // Store send request preference\n    this.sendRequest = formData.get(\"sendRequest\") !== \"false\";\n  }\n  \n  /**\n   * Finalize the rolls and handle the results.\n   * @param {D20Roll[]} rolls     The rolls that were configured.\n   * @returns {Promise<void>}\n   * @protected\n   * @override\n   */\n  async _finalizeRolls(rolls) {\n    // Doesn't actually execute the rolls here - just returns them configured\n    this.config.sendRequest = this.sendRequest;\n    return rolls;\n  }\n  \n  /**\n   * Static method to create and display the dialog\n   * @param {Actor[]} actors - The actors to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {object} options - Additional options\n   * @returns {Promise<object|null>} The configured roll data or null if cancelled\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    LogUtil.log('GMRollConfigDialog.getConfiguration', ['Starting configuration', {\n      actors: actors.map(a => a.name),\n      rollType,\n      rollKey,\n      options\n    }]);\n    \n    // Determine if we should show DC field\n    const showDC = ['skill', 'save', 'savingThrow', 'ability', 'abilityCheck', 'concentration'].includes(rollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Determine the appropriate roll class based on roll type\n    let rollClass = CONFIG.Dice.D20Roll;\n    if (['damage', 'healing'].includes(rollType)) {\n      rollClass = CONFIG.Dice.DamageRoll || CONFIG.Dice.BasicRoll;\n    } else if (['formula', 'custom'].includes(rollType)) {\n      rollClass = CONFIG.Dice.BasicRoll;\n    }\n    \n    // Fallback to D20Roll if class not found\n    if (!rollClass) {\n      LogUtil.log('GMRollConfigDialog.getConfiguration', ['Roll class not found, using D20Roll', { rollType }]);\n      rollClass = CONFIG.Dice.D20Roll;\n    }\n    \n    LogUtil.log('GMRollConfigDialog.getConfiguration', ['Determined roll class', {\n      rollType,\n      rollClass,\n      rollClassName: rollClass?.name,\n      availableRollClasses: Object.keys(CONFIG.Dice)\n    }]);\n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Add roll-specific data\n    switch (rollType) {\n      case 'skill':\n        rollConfig.skill = rollKey;\n        break;\n      case 'save':\n      case 'savingThrow':\n        rollConfig.ability = rollKey;\n        break;\n      case 'ability':\n      case 'abilityCheck':\n        rollConfig.ability = rollKey;\n        break;\n    }\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => this._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        window: {\n          title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.gmRollConfigTitle\"),\n          subtitle: actors.length === 1 ? actors[0].name : game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.gmRollConfigActors\", { count: actors.length })\n        },\n        ...options\n      }\n    };\n    \n    // Create and render the dialog\n    LogUtil.log('GMRollConfigDialog.getConfiguration', ['Creating dialog with config', {\n      rollConfig,\n      messageConfig,\n      dialogConfig\n    }]);\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    LogUtil.log('GMRollConfigDialog.getConfiguration', ['Dialog result', result]);\n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Build return configuration from the dialog's config\n    const finalConfig = {\n      advantage: result.config.advantage || false,\n      disadvantage: result.config.disadvantage || false,\n      rollMode: result.message.rollMode,\n      situational: result.rolls[0]?.options?.situational || \"\",\n      parts: result.rolls[0]?.options?.situational ? [result.rolls[0].options.situational] : [],\n      chatMessage: true,\n      isRollRequest: true,\n      skipDialog: options.skipDialogs || false,\n      sendRequest: result.sendRequest,\n      target: result.rolls[0]?.options?.target\n    };\n    \n    // Add ability for skills/tools if it was selected\n    if (result.config.ability && ['skill', 'tool'].includes(rollType)) {\n      finalConfig.ability = result.config.ability;\n    }\n    \n    return finalConfig;\n  }\n  \n  /**\n   * Check if actor is player owned\n   * @private\n   */\n  static _isPlayerOwned(actor) {\n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n}\n\n/**\n * GM Skill/Tool Configuration Dialog\n * Extends SkillToolRollConfigurationDialog for ability selection\n */\nexport class GMSkillToolConfigDialog extends dnd5e.applications.dice.SkillToolRollConfigurationDialog {\n  constructor(config = {}, message = {}, options = {}) {\n    // Force ability selection\n    const skillConfig = foundry.utils.mergeObject(config, {\n      chooseAbility: true\n    });\n    \n    // Ensure rollType is set in options\n    options.rollType = options.rollType || CONFIG.Dice.D20Roll;\n    \n    // SkillToolRollConfigurationDialog expects (config, message, options)\n    super(skillConfig, message, options);\n    \n    // Store GM-specific options\n    this.actors = options.actors || [];\n    this.sendRequest = options.sendRequest !== false;\n    this.showDC = options.showDC || false;\n    this.dcValue = options.dcValue || null;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      classes: [\"dnd5e2\", \"roll-configuration\", \"gm-roll-config\"]\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  _prepareConfigurationData(roll, config, dialog, message) {\n    const data = super._prepareConfigurationData(roll, config, dialog, message);\n    \n    // Add GM-specific data\n    data.showDC = this.showDC;\n    data.dcValue = this.dcValue;\n    data.sendRequest = this.sendRequest;\n    data.actorCount = this.actors.length;\n    \n    return data;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    \n    if (partId === \"configuration\") {\n      // Add DC field data\n      context.showDC = this.showDC;\n      context.dcValue = this.dcValue;\n      context.sendRequest = this.sendRequest;\n      context.actorCount = this.actors.length;\n    }\n    \n    return context;\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _onRender(context, options) {\n    super._onRender(context, options);\n    \n    LogUtil.log('GMRollConfigDialog._onRender', ['Dialog rendered', {\n      config: this.config,\n      actors: this.actors,\n      showDC: this.showDC,\n      sendRequest: this.sendRequest,\n      element: this.element\n    }]);\n    \n    // Check if we've already injected our fields\n    if (this.element.querySelector('.gm-roll-config-fields')) {\n      LogUtil.log('GMRollConfigDialog._onRender', ['Fields already injected, skipping']);\n      return;\n    }\n    \n    // Inject our custom fields into the configuration section\n    // Try multiple selectors to find the configuration section\n    let configSection = this.element.querySelector('[data-application-part=\"configuration\"] fieldset');\n    if (!configSection) {\n      configSection = this.element.querySelector('.configuration fieldset');\n    }\n    if (!configSection) {\n      configSection = this.element.querySelector('fieldset');\n    }\n    \n    LogUtil.log('GMRollConfigDialog._onRender', ['Looking for config section', {\n      configSection: !!configSection,\n      showDC: this.showDC,\n      actorCount: this.actors.length,\n      element: this.element,\n      allFieldsets: this.element.querySelectorAll('fieldset').length\n    }]);\n    \n    if (configSection && (this.showDC || this.actors.length > 0)) {\n      // Render the template\n      const templateData = {\n        showDC: this.showDC,\n        dcValue: this.dcValue,\n        showSendRequest: this.actors.length > 0,\n        sendRequest: this.sendRequest\n      };\n      \n      const template = await renderTemplate(`modules/${MODULE_ID}/templates/gm-roll-config-fields.hbs`, templateData);\n      \n      // Wrap in a container div to make it easy to check if already injected\n      const wrapper = document.createElement('div');\n      wrapper.className = 'gm-roll-config-fields';\n      wrapper.innerHTML = template;\n      \n      configSection.appendChild(wrapper);\n    }\n    \n    // Add event listeners for advantage/disadvantage buttons\n    this._attachButtonListeners();\n  }\n  \n  /**\n   * Attach listeners to advantage/disadvantage buttons\n   * @private\n   */\n  _attachButtonListeners() {\n    const buttons = this.element.querySelectorAll('[data-action=\"advantage\"], [data-action=\"normal\"], [data-action=\"disadvantage\"]');\n    buttons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const action = event.currentTarget.dataset.action;\n        LogUtil.log('GMRollConfigDialog button clicked', [action, {\n          currentAdvantage: this.config.advantage,\n          currentDisadvantage: this.config.disadvantage,\n          config: this.config\n        }]);\n      });\n    });\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _processSubmitData(event, form, formData) {\n    LogUtil.log('GMRollConfigDialog._processSubmitData', ['Processing form data', {\n      formData: Object.fromEntries(formData),\n      configBefore: this.config\n    }]);\n    \n    await super._processSubmitData(event, form, formData);\n    \n    // Extract DC value if present\n    if (formData.has(\"dc\") && formData.get(\"dc\") !== \"\") {\n      const dcValue = parseInt(formData.get(\"dc\"));\n      if (!isNaN(dcValue)) {\n        // Add DC to all rolls as target\n        for (const roll of this.config.rolls) {\n          roll.options.target = dcValue;\n        }\n      }\n    }\n    \n    // Store send request preference\n    this.sendRequest = formData.get(\"sendRequest\") !== \"false\";\n  }\n  \n  /**\n   * @inheritDoc\n   */\n  async _finalizeRolls(rolls) {\n    // Don't actually execute the rolls here - just return them configured\n    this.config.sendRequest = this.sendRequest;\n    return rolls;\n  }\n  \n  /**\n   * Static method to create and display the dialog\n   * @param {Actor[]} actors - The actors to roll for\n   * @param {string} rollType - The type of roll\n   * @param {string} rollKey - The specific roll key\n   * @param {object} options - Additional options\n   * @returns {Promise<object|null>} The configured roll data or null if cancelled\n   */\n  static async getConfiguration(actors, rollType, rollKey, options = {}) {\n    // Determine if we should show DC field\n    const showDC = ['skill', 'tool'].includes(rollType);\n    \n    // Get first actor for reference\n    const actor = actors[0];\n    if (!actor) return null;\n    \n    // Skills and tools always use D20Roll\n    const rollClass = CONFIG.Dice.D20Roll;\n    \n    // Get the default ability for the skill\n    let defaultAbility = null;\n    if (rollType === 'skill') {\n      const skill = actor.system.skills[rollKey];\n      defaultAbility = skill?.ability || CONFIG.DND5E.skills[rollKey]?.ability || 'int';\n    }\n    \n    // Build roll configuration\n    const rollConfig = {\n      data: actor.getRollData(),\n      subject: actor,\n      skill: rollKey,\n      ability: defaultAbility,\n      chooseAbility: true,\n      rolls: [{\n        parts: [],\n        data: actor.getRollData(),\n        options: {}\n      }]\n    };\n    \n    // Message configuration\n    const messageConfig = {\n      create: false,  // Don't create message yet\n      data: {\n        speaker: ChatMessage.getSpeaker({ actor })\n      }\n    };\n    \n    // Dialog configuration following D&D5e pattern\n    const dialogConfig = {\n      options: {\n        actors,\n        sendRequest: actors.some(a => GMRollConfigDialog._isPlayerOwned(a)),\n        showDC,\n        rollKey,\n        rollType: rollClass,  // Set the roll type class here\n        window: {\n          title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.gmRollConfigTitle\"),\n          subtitle: actors.length === 1 ? actors[0].name : game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.gmRollConfigActors\", { count: actors.length })\n        },\n        ...options\n      }\n    };\n    \n    // Create the dialog instance to access its properties\n    const app = new this(rollConfig, messageConfig, dialogConfig.options);\n    \n    // Use custom configure method that returns when dialog closes\n    const result = await new Promise(resolve => {\n      app.addEventListener(\"close\", () => {\n        // Dialog was closed, resolve with the rolls and config\n        resolve({\n          rolls: app.rolls,\n          config: app.config,\n          message: app.message,\n          sendRequest: app.sendRequest\n        });\n      }, { once: true });\n      app.render({ force: true });\n    });\n    \n    LogUtil.log('GMRollConfigDialog.getConfiguration', ['Dialog result', result]);\n    \n    // If no rolls or user cancelled\n    if (!result.rolls || result.rolls.length === 0) return null;\n    \n    // Build return configuration from the dialog's config\n    const finalConfig = {\n      advantage: result.config.advantage || false,\n      disadvantage: result.config.disadvantage || false,\n      rollMode: result.message.rollMode,\n      situational: result.rolls[0]?.options?.situational || \"\",\n      parts: result.rolls[0]?.options?.situational ? [result.rolls[0].options.situational] : [],\n      chatMessage: true,\n      isRollRequest: true,\n      skipDialog: options.skipDialogs || false,\n      sendRequest: result.sendRequest,\n      target: result.rolls[0]?.options?.target,\n      ability: result.config.ability\n    };\n    \n    return finalConfig;\n  }\n}","import { MODULE } from '../constants/General.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { Main } from './Main.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\nimport { GMRollConfigDialog, GMSkillToolConfigDialog } from './GMRollConfigDialog.mjs';\n\n/**\n * Roll Requests Menu Application\n * Extends Foundry's ApplicationV2 with Handlebars support to provide a menu interface for GMs to request rolls from players\n */\nexport default class RollRequestsMenu extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2) {\n  constructor(options = {}) {\n    super(options);\n    \n    // Track selected actors and current state\n    this.selectedActors = new Set();\n    this.currentTab = 'pc'; // 'pc' or 'npc'\n    this.selectedRequestType = null;\n    this.isLocked = false; // Track lock state\n    \n    // Initialize with actors from selected tokens\n    this._initializeFromSelectedTokens();\n  }\n\n  static DEFAULT_OPTIONS = {\n    id: 'crlngn-requests-menu',\n    classes: ['roll-requests-menu'],\n    tag: 'div',\n    window: {\n      frame: false,\n      resizable: false,\n      minimizable: false\n    },\n    position: null\n  };\n\n  static PARTS = {\n    main: {\n      template: `modules/${MODULE.ID}/templates/requests-menus.hbs`\n    }\n  };\n\n  /**\n   * Prepare data for the template\n   */\n  async _prepareContext(options) {\n    const context = await super._prepareContext(options);\n    \n    // Get all actors and separate by ownership\n    const actors = game.actors.contents;\n    const pcActors = [];\n    const npcActors = [];\n    \n    // Get current scene to check for NPC tokens\n    const currentScene = game.scenes.active;\n    \n    for (const actor of actors) {\n      // Skip non-character actors\n      if (actor.type !== 'character' && actor.type !== 'npc') continue;\n      \n      const actorData = {\n        id: actor.id,\n        uuid: actor.uuid,\n        name: actor.name,\n        img: actor.img,\n        selected: this.selectedActors.has(actor.id),\n        crlngnStats: this._getActorStats(actor)\n      };\n      \n      // Check if owned by a player (not GM)\n      const isPlayerOwned = Object.entries(actor.ownership)\n        .some(([userId, level]) => {\n          const user = game.users.get(userId);\n          return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        });\n      \n      if (isPlayerOwned) {\n        pcActors.push(actorData);\n      } else {\n        // For NPCs, only include if they have a token in the current scene\n        if (currentScene) {\n          const hasTokenInScene = currentScene.tokens.some(token => token.actorId === actor.id);\n          if (hasTokenInScene) {\n            npcActors.push(actorData);\n          }\n        }\n      }\n    }\n    \n    // Get current settings\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Check if all actors in current tab are selected\n    const currentActors = this.currentTab === 'pc' ? pcActors : npcActors;\n    const selectAllOn = currentActors.length > 0 && \n      currentActors.every(actor => this.selectedActors.has(actor.id));\n    \n    // Build request types array for template\n    const requestTypes = [];\n    if (this.selectedActors.size > 0) {\n      for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n        requestTypes.push({\n          id: key,\n          name: game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${option.name}`) || option.label,\n          rollable: option.subList == null,\n          hasSubList: !!option.subList,\n          selected: this.selectedRequestType === key\n        });\n      }\n    }\n    \n    // Build roll types array based on selected request type\n    const rollTypes = [];\n    if (this.selectedRequestType && this.selectedActors.size > 0) {\n      const selectedOption = MODULE.ROLL_REQUEST_OPTIONS[this.selectedRequestType];\n      if (selectedOption && selectedOption.subList) {\n        // Get first selected actor as reference for available options\n        const firstActorId = Array.from(this.selectedActors)[0];\n        const actor = game.actors.get(firstActorId);\n        \n        // Special handling for tools - show all available tools\n        if (selectedOption.subList === 'tools') {\n          // Get all tools from CONFIG.DND5E.tools or enrichmentLookup\n          const allTools = CONFIG.DND5E.enrichmentLookup?.tools || CONFIG.DND5E.tools || {};\n          \n          for (const [key, toolData] of Object.entries(allTools)) {\n            let label = key;\n            \n            // Use enrichmentLookup to get tool UUID and then fetch the name\n            if (toolData?.id) {\n              // Get the tool name using Trait.getBaseItem\n              const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n              label = toolItem?.name || key;\n            }\n            // Fallback - format the key\n            else {\n              label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n            }\n            \n            rollTypes.push({\n              id: key,\n              name: label,\n              rollable: true\n            });\n          }\n          \n          // Sort tools alphabetically by name\n          rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n        }\n        // For other types, use actor data\n        else if (actor && selectedOption.actorPath) {\n          const rollData = foundry.utils.getProperty(actor, selectedOption.actorPath) || {};\n          \n          // Check if we should use CONFIG.DND5E for enrichment\n          const configData = CONFIG.DND5E[selectedOption.subList];\n          \n          for (const [key, data] of Object.entries(rollData)) {\n            let label = '';\n            \n            // For skills, use CONFIG.DND5E.skills for full names\n            if (selectedOption.subList === 'skills' && configData?.[key]) {\n              label = configData[key].label;\n            }\n            // For abilities (saving throws), use the label from data\n            else if (selectedOption.subList === 'abilities' && configData?.[key]) {\n              label = configData[key].label;\n            }\n            // Default fallback\n            else {\n              label = data.label || game.i18n.localize(data.name || key) || key;\n            }\n            \n            rollTypes.push({\n              id: key,\n              name: label,\n              rollable: true\n            });\n          }\n          \n          // Sort skills alphabetically by name\n          if (selectedOption.subList === 'skills') {\n            rollTypes.sort((a, b) => a.name.localeCompare(b.name));\n          }\n        }\n      }\n    }\n    \n    return {\n      ...context,\n      actors: currentActors,\n      currentTab: this.currentTab,\n      isPCTab: this.currentTab === 'pc',\n      isNPCTab: this.currentTab === 'npc',\n      selectedTab: this.currentTab,\n      rollRequestsEnabled,\n      skipDialogs,\n      selectAllOn,\n      hasSelectedActors: this.selectedActors.size > 0,\n      requestTypes,\n      rollTypes,\n      showNames: true, // You can make this configurable later\n      actorsLocked: this.isLocked\n    };\n  }\n\n  /**\n   * Get formatted stats for an actor\n   */\n  _getActorStats(actor) {\n    const system = actor.system;\n    const stats = [];\n    \n    // HP\n    if (system.attributes?.hp) {\n      stats.push({\n        abbrev: 'HP',\n        value: system.attributes.hp.value\n      });\n    }\n    \n    // AC\n    if (system.attributes?.ac) {\n      stats.push({\n        abbrev: 'AC',\n        value: system.attributes.ac.value\n      });\n    }\n    \n    // Spell DC\n    if (system.attributes?.spelldc) {\n      stats.push({\n        abbrev: 'DC',\n        value: system.attributes.spelldc\n      });\n    }\n    \n    // Passive Perception\n    if (system.skills?.prc?.passive) {\n      stats.push({\n        abbrev: 'PP',\n        value: system.skills.prc.passive\n      });\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Called after the application is rendered\n   */\n  _onRender(context, options) {\n    super._onRender(context, options);\n    this._attachListeners();\n    \n    // Add click outside listener with capture to catch events early\n    setTimeout(() => {\n      document.addEventListener('click', this._onClickOutside, true);\n    }, 100);\n    \n    // Hook into token control changes\n    this._tokenControlHook = Hooks.on('controlToken', this._onTokenControlChange.bind(this));\n  }\n  \n  /**\n   * Handle token control changes\n   */\n  _onTokenControlChange(token, controlled) {\n    // Only process if menu is rendered\n    if (!this.rendered) return;\n    \n    // Ignore if we're programmatically updating tokens\n    if (this._ignoreTokenControl) return;\n    \n    // Debounce updates to avoid multiple renders when selecting multiple tokens\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n    }\n    \n    this._tokenUpdateTimeout = setTimeout(() => {\n      // Update selections from current controlled tokens\n      this._initializeFromSelectedTokens();\n      \n      // Re-render to update UI\n      this.render();\n      \n      this._tokenUpdateTimeout = null;\n    }, 100); // 100ms debounce\n  }\n  \n  /**\n   * Handle clicks outside the menu\n   */\n  _onClickOutside = (event) => {\n    // Don't close if locked\n    if (this.isLocked) return;\n    \n    // Check if click was outside the menu\n    const menu = this.element;\n    if (!menu) return;\n    \n    // Check if the click started inside the menu (for drag operations)\n    if (event.target.closest('.roll-requests-menu')) return;\n    \n    // Check if the click target is the menu itself or any of its children\n    if (menu.contains(event.target)) return;\n    \n    // Check if click was on the roll request icon that toggles the menu\n    if (event.target.closest('#crlngn-requests-icon')) return;\n    \n    // Check if this is a dialog or other overlay\n    if (event.target.closest('.dialog, .app, .notification')) return;\n    \n    // If we got here, the click was outside - close the menu\n    this.close();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  _attachListeners() {\n    LogUtil.log('Attaching listeners', []);\n    \n    const html = this.element;\n    \n    // Settings toggles\n    html.querySelector('#crlngn-requests-toggle')?.addEventListener('change', this._onToggleRollRequests.bind(this));\n    html.querySelector('#crlngn-skip-dialogs')?.addEventListener('change', this._onToggleSkipDialogs.bind(this));\n    html.querySelector('#crlngn-actors-all')?.addEventListener('change', this._onToggleSelectAll.bind(this));\n    \n    // Lock toggle\n    html.querySelector('#crlngn-actors-lock')?.addEventListener('click', this._onToggleLock.bind(this));\n    \n    // Tab switching\n    const tabs = html.querySelectorAll('.actor-tab');\n    LogUtil.log('Found tabs:', [tabs.length]);\n    tabs.forEach(tab => {\n      tab.addEventListener('click', this._onTabClick.bind(this));\n    });\n    \n    // Actor selection - handle clicks on actor rows or select buttons\n    html.querySelectorAll('.actor').forEach(actor => {\n      actor.addEventListener('click', this._onActorClick.bind(this));\n    });\n    \n    html.querySelectorAll('.actor-select').forEach(selectBtn => {\n      selectBtn.addEventListener('click', this._onActorSelectClick.bind(this));\n    });\n    \n    // Request type selection - use event delegation for dynamic content\n    const requestTypesContainer = html.querySelector('.request-types');\n    if (requestTypesContainer) {\n      requestTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRequestTypeClick(customEvent);\n        }\n      });\n    }\n    \n    // Roll type selection - use event delegation for dynamic content\n    const rollTypesContainer = html.querySelector('.roll-types');\n    if (rollTypesContainer) {\n      rollTypesContainer.addEventListener('click', (event) => {\n        const listItem = event.target.closest('li');\n        if (listItem && listItem.dataset.id) {\n          // Create a new event-like object with the list item as currentTarget\n          const customEvent = {\n            ...event,\n            currentTarget: listItem\n          };\n          this._onRollTypeClick(customEvent);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle roll requests toggle\n   */\n  async _onToggleRollRequests(event) {\n    const SETTINGS = getSettings();\n    const enabled = event.target.checked;\n    await SettingsUtil.set(SETTINGS.rollRequestsEnabled.tag, enabled);\n    \n    // Update the icon in the chat controls\n    Main.updateRollRequestsIcon(enabled);\n    \n    LogUtil.log('Roll requests enabled:', [enabled]);\n  }\n\n  /**\n   * Handle skip dialogs toggle\n   */\n  async _onToggleSkipDialogs(event) {\n    const SETTINGS = getSettings();\n    const skip = event.target.checked;\n    await SettingsUtil.set(SETTINGS.skipDialogs.tag, skip);\n    LogUtil.log('Skip dialogs:', [skip]);\n  }\n\n  /**\n   * Handle select all toggle\n   */\n  _onToggleSelectAll(event) {\n    const selectAll = event.target.checked;\n    \n    // Temporarily disable token control hook to avoid feedback loop\n    this._ignoreTokenControl = true;\n    \n    // Get the current actors based on the active tab\n    const actors = this.currentTab === 'pc' ? \n      game.actors.contents.filter(a => this._isPlayerOwned(a)) :\n      game.actors.contents.filter(a => !this._isPlayerOwned(a) && this._hasTokenInScene(a));\n    \n    // Update selection for all visible actors\n    actors.forEach(actor => {\n      if (selectAll) {\n        this.selectedActors.add(actor.id);\n        this._updateCanvasTokenSelection(actor.id, true);\n      } else {\n        this.selectedActors.delete(actor.id);\n        this._updateCanvasTokenSelection(actor.id, false);\n      }\n    });\n    \n    // Re-enable token control hook after a short delay\n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 200);\n    \n    // Re-render to update UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    LogUtil.log('Select all:', [selectAll, 'for', this.currentTab]);\n  }\n  \n  /**\n   * Handle lock toggle\n   */\n  _onToggleLock(event) {\n    event.preventDefault();\n    this.isLocked = !this.isLocked;\n    \n    // Update the icon - the currentTarget IS the icon element\n    const lockIcon = event.currentTarget;\n    lockIcon.classList.remove('fa-lock-keyhole', 'fa-lock-keyhole-open');\n    lockIcon.classList.add(this.isLocked ? 'fa-lock-keyhole' : 'fa-lock-keyhole-open');\n    \n    LogUtil.log('Lock toggled:', [this.isLocked]);\n  }\n  \n  /**\n   * Initialize selected actors from currently selected tokens\n   */\n  _initializeFromSelectedTokens() {\n    // Get controlled tokens\n    const controlledTokens = canvas.tokens?.controlled || [];\n    \n    // Clear existing selections first\n    this.selectedActors.clear();\n    \n    // Add actors from controlled tokens\n    for (const token of controlledTokens) {\n      if (token.actor) {\n        this.selectedActors.add(token.actor.id);\n        \n        // Set the current tab based on first selected token's actor type\n        if (this.selectedActors.size === 1) {\n          // Check if this is a PC or NPC\n          const isPC = this._isPlayerOwned(token.actor);\n          this.currentTab = isPC ? 'pc' : 'npc';\n        }\n      }\n    }\n    \n    LogUtil.log('Initialized with selected tokens:', [Array.from(this.selectedActors)]);\n  }\n  \n  /**\n   * Check if actor is player owned\n   */\n  _isPlayerOwned(actor) {\n    // Skip non-character actors\n    if (actor.type !== 'character' && actor.type !== 'npc') return false;\n    \n    return Object.entries(actor.ownership)\n      .some(([userId, level]) => {\n        const user = game.users.get(userId);\n        return user && !user.isGM && level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n      });\n  }\n  \n  /**\n   * Check if actor has token in current scene\n   */\n  _hasTokenInScene(actor) {\n    // Skip non-character actors\n    if (actor.type !== 'character' && actor.type !== 'npc') return false;\n    \n    const currentScene = game.scenes.active;\n    return currentScene && currentScene.tokens.some(token => token.actorId === actor.id);\n  }\n\n  /**\n   * Handle tab click\n   */\n  async _onTabClick(event) {\n    const tab = event.currentTarget.dataset.tab;\n    LogUtil.log('Tab clicked:', [tab, this.currentTab]);\n    if (tab === this.currentTab) return;\n    \n    // Clear selected actors when switching tabs\n    this.selectedActors.clear();\n    \n    // Also clear any canvas token selections\n    canvas.tokens?.releaseAll();\n    \n    // Reset selected request type since it may not apply to new tab\n    this.selectedRequestType = null;\n    \n    this.currentTab = tab;\n    await this.render();\n    LogUtil.log('Switched to tab:', [tab]);\n  }\n\n  /**\n   * Handle click on actor row\n   */\n  _onActorClick(event) {\n    // Ignore if clicking on the select button itself\n    if (event.target.closest('.actor-select')) return;\n    \n    const actorElement = event.currentTarget;\n    const actorId = actorElement.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Handle click on actor select button\n   */\n  _onActorSelectClick(event) {\n    event.stopPropagation(); // Prevent triggering the actor row click\n    const actorId = event.currentTarget.dataset.id;\n    this._toggleActorSelection(actorId);\n  }\n  \n  /**\n   * Toggle actor selection state\n   */\n  _toggleActorSelection(actorId) {\n    // Temporarily disable token control hook to avoid feedback loop\n    this._ignoreTokenControl = true;\n    \n    if (this.selectedActors.has(actorId)) {\n      this.selectedActors.delete(actorId);\n      // Deselect token on canvas\n      this._updateCanvasTokenSelection(actorId, false);\n    } else {\n      this.selectedActors.add(actorId);\n      // Select token on canvas\n      this._updateCanvasTokenSelection(actorId, true);\n    }\n    \n    // Re-enable token control hook after a short delay\n    setTimeout(() => {\n      this._ignoreTokenControl = false;\n    }, 100);\n    \n    // Re-render to update the UI\n    this.render();\n    \n    this._updateRequestTypesVisibility();\n    this._updateSelectAllState();\n    LogUtil.log('Actor selected:', [actorId, this.selectedActors.has(actorId)]);\n  }\n  \n  /**\n   * Update token selection on canvas based on actor selection\n   */\n  _updateCanvasTokenSelection(actorId, selected) {\n    const scene = game.scenes.active;\n    if (!scene) return;\n    \n    // Find all tokens for this actor in the current scene\n    const tokens = canvas.tokens.placeables.filter(t => t.actor?.id === actorId);\n    \n    for (const token of tokens) {\n      if (selected) {\n        // Add to selection without clearing others\n        token.control({ releaseOthers: false });\n      } else {\n        // Release this token\n        token.release();\n      }\n    }\n  }\n\n  /**\n   * Update request types visibility based on actor selection\n   */\n  _updateRequestTypesVisibility() {\n    // Since we're now controlling visibility through template data,\n    // we need to re-render when actor selection changes\n    this.render();\n  }\n\n  /**\n   * Update select all checkbox state\n   */\n  _updateSelectAllState() {\n    const selectAllCheckbox = this.element.querySelector('#crlngn-actors-all');\n    const currentActors = this.currentTab === 'pc' ? 'pc' : 'npc';\n    const checkboxes = this.element.querySelectorAll(`.${currentActors}-actors .actor-item input[type=\"checkbox\"]`);\n    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;\n    \n    selectAllCheckbox.checked = checkedCount > 0 && checkedCount === checkboxes.length;\n    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n  }\n\n  /**\n   * Handle request type click\n   */\n  async _onRequestTypeClick(event) {\n    const requestItem = event.currentTarget;\n    const requestType = requestItem.dataset.id;\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    \n    if (!rollOption) {\n      LogUtil.error('Unknown request type:', requestType);\n      return;\n    }\n    \n    // Toggle selection - if clicking the same type, deselect it\n    if (this.selectedRequestType === requestType) {\n      this.selectedRequestType = null;\n      LogUtil.log('Request type deselected:', [requestType]);\n    } else {\n      this.selectedRequestType = requestType;\n      LogUtil.log('Request type selected:', [requestType]);\n    }\n    \n    // If this type has a sublist, re-render to show/hide roll types\n    if (rollOption.subList) {\n      await this.render();\n    } else if (this.selectedRequestType) {\n      // Direct roll without sublist (only if we just selected it)\n      this._triggerRoll(requestType, null);\n    }\n  }\n\n  // Note: _populateRollTypes method removed as we now handle this in _prepareContext\n\n  /**\n   * Handle roll type click\n   */\n  _onRollTypeClick(event) {\n    LogUtil.log('Roll type clicked!', [event.currentTarget]);\n    const rollKey = event.currentTarget.dataset.id;\n    LogUtil.log('Roll type selected:', [rollKey]);\n    this._triggerRoll(this.selectedRequestType, rollKey);\n  }\n\n  /**\n   * Trigger the roll for selected actors\n   * @param {string} requestType - The type of roll request (e.g., 'skill', 'ability')\n   * @param {string} rollKey - The specific roll key (e.g., 'acr' for Acrobatics)\n   */\n  async _triggerRoll(requestType, rollKey) {\n    const SETTINGS = getSettings();\n    const selectedActorIds = Array.from(this.selectedActors);\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Safety check: Filter selected actors to only include those from current tab\n    const validActorIds = selectedActorIds.filter(actorId => {\n      const actor = game.actors.get(actorId);\n      if (!actor) return false;\n      \n      const isPC = this._isPlayerOwned(actor);\n      const isNPC = !isPC && this._hasTokenInScene(actor);\n      \n      // Only include actors that match the current tab\n      return (this.currentTab === 'pc' && isPC) || (this.currentTab === 'npc' && isNPC);\n    });\n    \n    // Get the roll option to get the actual method name\n    const rollOption = MODULE.ROLL_REQUEST_OPTIONS[requestType];\n    const rollMethodName = rollOption?.name || requestType;\n    \n    // Handle custom rolls with a dialog\n    if (rollMethodName === 'custom') {\n      const formula = await this._showCustomRollDialog();\n      if (!formula) return; // User cancelled\n      \n      // Store the custom formula as the rollKey\n      rollKey = formula;\n    }\n    \n    // Check for initiative rolls without active combat\n    if (rollMethodName === 'initiativeDialog' && !game.combat) {\n      const createCombat = await Dialog.confirm({\n        title: game.i18n.localize(\"COMBAT.Create\"),\n        content: \"<p>\" + game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.noCombatActive\") + \"</p>\",\n        yes: () => true,\n        no: () => false,\n        defaultYes: true,\n        options: {\n          classes: [\"crlngn-rolls-dialog\"]\n        }\n      });\n      \n      if (createCombat) {\n        // Create a new combat encounter\n        const combat = await game.combats.documentClass.create({scene: game.scenes.active.id});\n        await combat.activate();\n        ui.notifications.info(game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.combatCreated\"));\n      } else {\n        // User chose not to create combat, abort the roll\n        return;\n      }\n    }\n    \n    // Filter actors for initiative rolls based on existing initiative\n    let actorIdsToRoll = validActorIds;\n    if (rollMethodName === 'initiativeDialog' && game.combat) {\n      const actors = validActorIds\n        .map(id => game.actors.get(id))\n        .filter(actor => actor);\n      \n      // Check which actors already have initiative\n      const actorsWithInitiative = [];\n      const actorIdsWithInitiative = new Set();\n      for (const actor of actors) {\n        const combatant = game.combat.getCombatantByActor(actor.id);\n        if (combatant && combatant.initiative !== null) {\n          actorsWithInitiative.push(actor.name);\n          actorIdsWithInitiative.add(actor.id);\n        }\n      }\n      \n      // If any actors already have initiative, confirm re-roll\n      if (actorsWithInitiative.length > 0) {\n        const reroll = await Dialog.confirm({\n          title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiativeTitle\"),\n          content: \"<p>\" + game.i18n.format(\"CRLNGN_ROLLS.ui.dialogs.rerollInitiative\", {\n            actors: actorsWithInitiative.join(\", \")\n          }) + \"</p>\",\n          yes: () => true,\n          no: () => false,\n          defaultYes: false,\n          options: {\n            classes: [\"crlngn-rolls-dialog\"]\n          }\n        });\n        \n        if (!reroll) {\n          // User chose not to re-roll, filter out actors with initiative\n          actorIdsToRoll = validActorIds.filter(id => !actorIdsWithInitiative.has(id));\n          \n          // If no actors left to roll, abort\n          if (actorIdsToRoll.length === 0) {\n            ui.notifications.info(game.i18n.localize(\"CRLNGN_ROLL_REQUESTS.notifications.allActorsHaveInitiative\"));\n            return;\n          }\n        } else {\n          // User chose to re-roll, clear initiative for actors that have it\n          for (const actorId of actorIdsWithInitiative) {\n            const combatant = game.combat.getCombatantByActor(actorId);\n            if (combatant) {\n              await combatant.update({ initiative: null });\n            }\n          }\n        }\n      }\n    }\n    \n    // Get the actual actors\n    let actors = actorIdsToRoll\n      .map(id => game.actors.get(id))\n      .filter(actor => actor);\n    \n    // Filter actors for death saves\n    if (rollMethodName === 'deathSave') {\n      const actorsNeedingDeathSaves = [];\n      const actorsSkippingDeathSaves = [];\n      \n      for (const actor of actors) {\n        const hp = actor.system.attributes.hp?.value || 0;\n        const deathSaves = actor.system.attributes.death || {};\n        const successes = deathSaves.success || 0;\n        const failures = deathSaves.failure || 0;\n        \n        // Check if actor needs a death save\n        if (hp <= 0 && successes < 3 && failures < 3) {\n          actorsNeedingDeathSaves.push(actor);\n        } else {\n          actorsSkippingDeathSaves.push(actor.name);\n        }\n      }\n      \n      // Notify about actors that don't need death saves\n      if (actorsSkippingDeathSaves.length > 0) {\n        ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.actorsSkippingDeathSave\", {\n          actors: actorsSkippingDeathSaves.join(\", \")\n        }));\n      }\n      \n      // Update actors list to only include those needing death saves\n      actors = actorsNeedingDeathSaves;\n    }\n    \n    if (!actors.length) {\n      ui.notifications.warn(\"No valid actors selected\");\n      return;\n    }\n    \n    // Separate PC and NPC actors\n    const pcActors = [];\n    const npcActors = [];\n    \n    for (const actor of actors) {\n      const owner = this._getActorOwner(actor);\n      if (owner) {\n        pcActors.push({ actor, owner });\n      } else {\n        npcActors.push(actor);\n      }\n    }\n    \n    // Show GM configuration dialog (unless skip dialogs is enabled)\n    let config = null;\n    if (!skipDialogs || pcActors.length > 0) {\n      // Use appropriate dialog based on roll type\n      const DialogClass = ['skill', 'tool'].includes(rollMethodName) ? GMSkillToolConfigDialog : GMRollConfigDialog;\n      config = await DialogClass.getConfiguration(actors, rollMethodName, rollKey, { skipDialogs });\n      \n      // User cancelled the dialog\n      if (!config) {\n        return;\n      }\n    } else {\n      // Use default configuration\n      config = {\n        advantage: false,\n        disadvantage: false,\n        situational: \"\",\n        parts: [],\n        rollMode: game.settings.get(\"core\", \"rollMode\"),\n        chatMessage: true,\n        isRollRequest: true,\n        skipDialog: skipDialogs,\n        sendRequest: true\n      };\n      \n      // Death saves always have DC 10\n      if (rollMethodName === 'deathSave') {\n        config.target = 10;\n      }\n    }\n    \n    // Handle PC actors - send roll requests (if sendRequest is true)\n    const successfulRequests = []; // Track successful requests for consolidated notification\n    \n    if (config.sendRequest) {\n      for (const { actor, owner } of pcActors) {\n        if (!owner.active) {\n          if(SettingsUtil.get(SETTINGS.showOfflineNotifications.tag)) {\n            ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.playerOffline\", { \n              player: owner.name \n            }));\n          }\n\n          // Add to NPC list to roll locally\n          npcActors.push(actor);\n          continue;\n        }\n        \n        this._sendRollRequestToPlayer(actor, owner, rollMethodName, rollKey, config, true); // true = suppress individual notification\n        successfulRequests.push({ actor, owner });\n        \n        // Add a small delay between roll requests to ensure they process correctly\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n      // Send consolidated notification for all successful requests\n      if (successfulRequests.length > 0) {\n        this._sendConsolidatedNotification(successfulRequests, rollMethodName, rollKey);\n      }\n    } else {\n      // If not sending requests, add PC actors to NPC list to roll locally\n      npcActors.push(...pcActors.map(({ actor }) => actor));\n    }\n    \n    // Handle NPC actors - roll locally\n    if (npcActors.length > 0) {\n      await this._handleNPCRolls(npcActors, rollMethodName, rollKey, config);\n    }\n    \n    // Close the menu after all rolls are complete\n    // Add a small delay to ensure async operations complete\n    setTimeout(() => this.close(), 500);\n  }\n  \n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  _getActorOwner(actor) {\n    const ownership = actor.ownership || {};\n    \n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Send a roll request to a player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config - Roll configuration from dialog\n   * @param {boolean} suppressNotification - If true, don't show individual notification\n   */\n  _sendRollRequestToPlayer(actor, owner, requestType, rollKey, config, suppressNotification = false) {\n    const SETTINGS = getSettings();\n    \n    // Map request type to roll type for compatibility with RollInterceptor format\n    const rollTypeMap = {\n      'abilityCheck': 'ability',\n      'savingThrow': 'save',\n      'skill': 'skill',\n      'tool': 'tool',\n      'concentration': 'concentration',\n      'initiativeDialog': 'initiative',\n      'deathSave': 'deathsave',\n      'custom': 'custom',\n    };\n    \n    const rollType = rollTypeMap[requestType] || requestType;\n    \n    // Build the request data according to Phase 1 spec\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      activityId: null,  // Menu-initiated rolls don't use activities\n      config: {\n        rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        advantage: config.advantage || false,\n        disadvantage: config.disadvantage || false,\n        situational: config.situational || \"\",\n        parts: config.parts || [],\n        chatMessage: config.chatMessage !== false,\n        target: config.target,  // DC value if provided\n        ability: config.ability,  // Ability override for skills/tools\n        attackMode: config.attackMode  // Attack mode for attack rolls\n      },\n      skipDialog: config.skipDialog || false,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    // Send request to player via socket\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    // Show notification to GM (unless suppressed for batch operations)\n    if (!suppressNotification) {\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent\", { \n        player: owner.name,\n        actor: actor.name \n      }));\n    }\n  }\n  \n  /**\n   * Send a consolidated notification for multiple roll requests\n   * @param {Array} successfulRequests - Array of {actor, owner} objects\n   * @param {string} rollMethodName - The type of roll being requested\n   * @param {string} rollKey - The specific roll key (if applicable)\n   */\n  _sendConsolidatedNotification(successfulRequests, rollMethodName, rollKey) {\n    // Group requests by player\n    const requestsByPlayer = {};\n    for (const { actor, owner } of successfulRequests) {\n      if (!requestsByPlayer[owner.id]) {\n        requestsByPlayer[owner.id] = {\n          player: owner,\n          actors: []\n        };\n      }\n      requestsByPlayer[owner.id].actors.push(actor);\n    }\n    \n    // Get roll type name for display\n    // Find the option key that matches this rollMethodName\n    let rollOptionKey = null;\n    for (const [key, option] of Object.entries(MODULE.ROLL_REQUEST_OPTIONS)) {\n      if (option.name === rollMethodName) {\n        rollOptionKey = key;\n        break;\n      }\n    }\n    \n    const rollTypeKey = rollMethodName;\n    let rollTypeName = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollTypeKey}`) || rollTypeKey;\n    \n    // Add specific roll details if applicable\n    if (rollKey) {\n      if (rollTypeKey === 'skill') {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n      } else if (rollTypeKey === 'savingThrow') {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (rollTypeKey === 'abilityCheck') {\n        rollTypeName = `${rollTypeName} (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n      } else if (rollTypeKey === 'tool') {\n        // Try to get tool name from enrichmentLookup\n        const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n        if (toolData?.id) {\n          const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n          rollTypeName = `${rollTypeName} (${toolItem?.name || rollKey})`;\n        } else {\n          rollTypeName = `${rollTypeName} (${rollKey})`;\n        }\n      } else if (rollTypeKey === 'custom') {\n        rollTypeName = `${rollTypeName}: ${rollKey}`;\n      }\n    }\n    \n    // Create notification message\n    if (Object.keys(requestsByPlayer).length === 1) {\n      // Single player, multiple actors\n      const playerData = Object.values(requestsByPlayer)[0];\n      const actorNames = playerData.actors.map(a => a.name).join(\", \");\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentSingle\", { \n        rollType: rollTypeName,\n        actors: actorNames,\n        player: playerData.player.name\n      }));\n    } else {\n      // Multiple players\n      const playerSummaries = Object.values(requestsByPlayer).map(data => {\n        const actorNames = data.actors.map(a => a.name).join(\", \");\n        return `${data.player.name} (${actorNames})`;\n      });\n      ui.notifications.info(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollRequestsSentMultiple\", { \n        rollType: rollTypeName,\n        count: successfulRequests.length,\n        players: playerSummaries.join(\"; \")\n      }));\n    }\n  }\n  \n  /**\n   * Handle rolling for NPC actors locally\n   * @param {Actor[]} actors \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} dialogConfig - Configuration from GM dialog\n   */\n  async _handleNPCRolls(actors, requestType, rollKey, dialogConfig) {\n    // Build config for local rolls\n    const config = {\n      advantage: dialogConfig.advantage || false,\n      disadvantage: dialogConfig.disadvantage || false,\n      situational: dialogConfig.situational || \"\",\n      parts: dialogConfig.parts || [],\n      rollMode: dialogConfig.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      fastForward: dialogConfig.skipDialog || false,\n      chatMessage: dialogConfig.chatMessage !== false,\n      isRollRequest: true,  // Flag to prevent RollInterceptor from re-intercepting\n      target: dialogConfig.target,  // DC value if provided\n      ability: dialogConfig.ability,  // Ability override for skills/tools\n      attackMode: dialogConfig.attackMode  // Attack mode for attack rolls\n    };\n    \n    // Roll for each NPC with a small delay between rolls\n    for (const actor of actors) {\n      await this._executeActorRoll(actor, requestType, rollKey, config);\n      // Small delay between rolls for better chat readability\n      await new Promise(resolve => setTimeout(resolve, 200));\n    }\n  }\n  \n  /**\n   * Execute a roll for a specific actor\n   * @param {Actor} actor \n   * @param {string} requestType \n   * @param {string} rollKey \n   * @param {Object} config \n   */\n  async _executeActorRoll(actor, requestType, rollKey, config) {\n    try {\n      LogUtil.log('RollRequestsMenu._executeActorRoll', ['Starting roll for actor', {\n        actorName: actor.name,\n        actorType: actor.type,\n        actorId: actor.id,\n        requestType,\n        normalizedType: requestType.toLowerCase(),\n        config\n      }]);\n      \n      // Normalize the requestType to ensure case matching\n      const normalizedType = requestType.toLowerCase();\n      \n      switch (normalizedType) {\n        case 'abilitycheck':\n          await actor.rollAbilityCheck(rollKey, config);\n          break;\n        case 'savingthrow':\n          await actor.rollSavingThrow(rollKey, config);\n          break;\n        case 'skill':\n          // Skills need the skill key in the config object\n          await actor.rollSkill({ ...config, skill: rollKey });\n          break;\n        case 'tool':\n          // Tools need the tool key in the config object\n          await actor.rollToolCheck({ ...config, tool: rollKey });\n          break;\n        case 'concentration':\n          await actor.rollConcentration(config);\n          break;\n        case 'initiativedialog':\n          // Initiative rolls require an active combat\n          if (!game.combat) {\n            ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n            break;\n          }\n          LogUtil.log('RollRequestsMenu._executeActorRoll', ['About to roll initiative for', actor.name, 'with config', config]);\n          // Use the same approach as player-side - pass config directly\n          const result = await actor.rollInitiativeDialog(config);\n          LogUtil.log('RollRequestsMenu._executeActorRoll', ['Initiative roll result:', result]);\n          \n          // If no result, try a different approach\n          if (!result) {\n            LogUtil.log('RollRequestsMenu._executeActorRoll', ['No result from rollInitiativeDialog, trying direct combat update']);\n            \n            // Get or create combatant\n            let combatant = game.combat.getCombatantByActor(actor.id);\n            if (!combatant) {\n              const tokens = actor.getActiveTokens();\n              if (tokens.length) {\n                await game.combat.createEmbeddedDocuments(\"Combatant\", [{\n                  tokenId: tokens[0].id,\n                  actorId: actor.id\n                }]);\n                combatant = game.combat.getCombatantByActor(actor.id);\n              }\n            }\n            \n            // Roll initiative directly\n            if (combatant) {\n              const roll = combatant.getInitiativeRoll();\n              await roll.evaluate({async: true});\n              await combatant.update({initiative: roll.total});\n              await roll.toMessage({\n                speaker: ChatMessage.getSpeaker({actor}),\n                flavor: game.i18n.localize(\"DND5E.Initiative\")\n              });\n            }\n          }\n          break;\n        case 'deathsave':\n          // Death saves don't need a key, just the config\n          // Death saves return null if unnecessary (HP > 0 or already 3 successes/failures)\n          LogUtil.log('RollRequestsMenu._executeActorRoll', ['Actor death save state', {\n            name: actor.name,\n            hp: actor.system.attributes.hp?.value,\n            deathSaves: actor.system.attributes.death,\n            type: actor.type\n          }]);\n          // Death saves might need special handling\n          const deathResult = await actor.rollDeathSave();\n          LogUtil.log('RollRequestsMenu._executeActorRoll', ['Death save completed', deathResult]);\n          break;\n        case 'custom':\n          // Custom rolls use the formula in rollKey\n          try {\n            const roll = new Roll(rollKey, actor.getRollData());\n            await roll.evaluate({async: true});\n            await roll.toMessage({\n              speaker: ChatMessage.getSpeaker({actor}),\n              flavor: game.i18n.localize(\"CRLNGN_ROLLS.rollTypes.custom\")\n            });\n          } catch (error) {\n            ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula: rollKey}));\n            LogUtil.log('RollRequestsMenu._executeActorRoll', ['Invalid custom formula', rollKey, error]);\n          }\n          break;\n        default:\n          ui.notifications.warn(`Unknown roll type: ${requestType}`);\n          break;\n      }\n    } catch (error) {\n      LogUtil.log('RollRequestsMenu._executeActorRoll', ['Error executing roll', error]);\n      ui.notifications.error(game.i18n.format(\"CRLNGN_ROLL_REQUESTS.notifications.rollError\", { \n        actor: actor.name \n      }));\n    }\n  }\n\n  /**\n   * Clean up when closing\n   */\n  async _onClose(options) {\n    await super._onClose(options);\n    \n    // Reset state\n    this.selectedActors.clear();\n    this.selectedRequestType = null;\n    \n    // Remove click outside listener (with capture flag to match addEventListener)\n    document.removeEventListener('click', this._onClickOutside, true);\n    \n    // Remove token control hook\n    if (this._tokenControlHook) {\n      Hooks.off('controlToken', this._tokenControlHook);\n      this._tokenControlHook = null;\n    }\n    \n    // Clear any pending token update timeout\n    if (this._tokenUpdateTimeout) {\n      clearTimeout(this._tokenUpdateTimeout);\n      this._tokenUpdateTimeout = null;\n    }\n  }\n\n  /**\n   * Override render positioning to use CSS instead of inline styles\n   */\n  setPosition(position={}) {\n    // Don't set any inline position styles - let CSS handle it\n    return this;\n  }\n  \n  /**\n   * Show custom roll dialog\n   * @returns {Promise<string|null>} The roll formula or null if cancelled\n   */\n  async _showCustomRollDialog() {\n    return new Promise(async (resolve) => {\n      // Render the template\n      const content = await renderTemplate(`modules/${MODULE.ID}/templates/custom-roll-dialog.hbs`, {\n        formula: \"\",\n        readonly: false\n      });\n      \n      const dialog = new Dialog({\n        title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.customRollTitle\"),\n        content,\n        buttons: {\n          roll: {\n            icon: '<i class=\"fas fa-dice-d20\"></i>',\n            label: game.i18n.localize(\"Roll\"),\n            callback: (html) => {\n              const formulaElement = html[0] || html;\n              const formula = formulaElement.querySelector('#custom-roll-formula').value.trim();\n              resolve(formula || null);\n            }\n          },\n          cancel: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: game.i18n.localize(\"Cancel\"),\n            callback: () => resolve(null)\n          }\n        },\n        default: \"roll\",\n        render: (html) => {\n          const htmlElement = html[0] || html;\n          const formulaInput = htmlElement.querySelector('#custom-roll-formula');\n          const diceCounts = {};\n          \n          // Handle dice button clicks\n          htmlElement.querySelectorAll('.dice-button').forEach(button => {\n            button.addEventListener('click', (event) => {\n              const die = event.currentTarget.dataset.die;\n              diceCounts[die] = (diceCounts[die] || 0) + 1;\n              \n              // Build formula from dice counts\n              const parts = [];\n              for (const [dieType, count] of Object.entries(diceCounts)) {\n                if (count > 0) {\n                  parts.push(`${count}${dieType}`);\n                }\n              }\n              formulaInput.value = parts.join(' + ');\n            });\n          });\n        }\n      }, {\n        classes: [\"crlngn-rolls-dialog\", \"crlngn-custom-roll-dialog\"]\n      });\n      \n      dialog.render(true);\n    });\n  }\n}","import { HOOKS_DND5E } from '../constants/Hooks.mjs';\nimport { getSettings } from '../constants/Settings.mjs';\nimport { SettingsUtil } from './SettingsUtil.mjs';\nimport { LogUtil } from './LogUtil.mjs';\nimport { SocketUtil } from './SocketUtil.mjs';\nimport { MODULE_ID } from '../constants/General.mjs';\nimport { ActivityUtil } from './ActivityUtil.mjs';\n\n/**\n * Handles intercepting D&D5e rolls on the GM side and redirecting them to players\n */\nexport class RollInterceptor {  \n  /**\n   * @type {Set<string>} - Set of registered hook IDs for cleanup\n   */\n  static registeredHooks = new Set();\n  \n  /**\n   * Initialize the roll interceptor\n   */\n  static initialize() {\n    LogUtil.log('RollInterceptor.initialize', ['Called, checking if user is GM', game.user.isGM]);\n    \n    // Only initialize for GM users\n    if (!game.user.isGM) return;\n    \n    LogUtil.log('RollInterceptor.initialize', ['Initializing roll interceptor for GM']);\n    this.registerHooks();\n  }\n  \n  /**\n   * Register all necessary hooks for roll interception\n   */\n  static registerHooks() {\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ABILITY_CHECK, this._handlePreRoll.bind(this, 'ability'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, this._handlePreRoll.bind(this, 'save'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_SKILL_V2, this._handlePreRoll.bind(this, 'skill'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_TOOL_V2, this._handlePreRoll.bind(this, 'tool'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, this._handlePreRoll.bind(this, 'attack'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, this._handlePreRoll.bind(this, 'damage'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_INITIATIVE, this._handlePreRoll.bind(this, 'initiative'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_DEATH_SAVE_V2, this._handlePreRoll.bind(this, 'deathsave'));\n    this._registerHook(HOOKS_DND5E.PRE_ROLL_HIT_DIE_V2, this._handlePreRoll.bind(this, 'hitDie'));\n    \n    LogUtil.log('RollInterceptor.registerHooks', ['Registered roll interception hooks']);\n  }\n  \n  /**\n   * Helper to register a hook and track it for cleanup\n   * @param {string} hookName \n   * @param {Function} handler \n   */\n  static _registerHook(hookName, handler) {\n    const hookId = Hooks.on(hookName, handler);\n    this.registeredHooks.add({ hookName, hookId });\n  }\n  \n  /**\n   * Unregister all hooks (for cleanup)\n   */\n  static unregisterHooks() {\n    for (const { hookName, hookId } of this.registeredHooks) {\n      Hooks.off(hookName, hookId);\n    }\n    this.registeredHooks.clear();\n    LogUtil.log('RollInterceptor.unregisterHooks', ['Unregistered all hooks']);\n  }\n  \n  /**\n   * Handle generic pre-roll v2 hook to intercept all rolls\n   * @param {Object} config - Roll configuration (first parameter)\n   * @param {Object} options - Additional options (second parameter)\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handleGenericPreRoll(config, options) {\n    // Only intercept on GM side\n    if (!game.user.isGM) return;\n    \n    LogUtil.log('RollInterceptor._handleGenericPreRoll', ['Generic preRollV2 triggered', {\n      configType: config?.constructor?.name,\n      hasSubject: !!config?.subject,\n      subjectName: config?.subject?.name,\n      hasIsRollRequest: config?.isRollRequest,\n      optionsType: options?.constructor?.name\n    }]);\n    \n    // Check to avoid loops\n    if (config?.isRollRequest) return;\n    \n    // or non activity rolls, config.subject is the actor\n    const actor = config?.subject;\n    \n    // Check if roll interception is enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    if (!rollInterceptionEnabled) return;\n\n    LogUtil.log('RollInterceptor._handleGenericPreRoll', [actor, actor?.documentName]);\n    \n    if (!actor || actor.documentName !== 'Actor') {\n      LogUtil.log('RollInterceptor._handleGenericPreRoll', ['No valid Actor found in roll', config]);\n      return;\n    }\n    \n    // Check if the actor is owned by a player (not the GM)\n    const owner = this._getActorOwner(actor);\n    if (!owner || owner.id === game.user.id) {\n      return;\n    }\n    \n    // Check if the owner is online\n    if (!owner.active) {\n      return;\n    }\n    \n    // Determine roll type from the config\n    let rollType = 'unknown';\n    let rollKey = null;\n    \n    // Check config for more specific information\n    if (config?.ability) {\n      rollType = config.save ? 'save' : 'ability';\n      rollKey = config.ability;\n    } else if (config?.skill) {\n      rollType = 'skill';\n      rollKey = config.skill;\n    } else if (config?.tool) {\n      rollType = 'tool';\n      rollKey = config.tool;\n    }\n    \n    LogUtil.log('RollInterceptor._handleGenericPreRoll', ['Determined roll type', {\n      rollType,\n      rollKey,\n      configKeys: Object.keys(config || {})\n    }]);\n    \n    LogUtil.log('RollInterceptor._handleGenericPreRoll', ['Intercepting generic roll', {\n      rollType,\n      actorName: actor.name,\n      ownerName: owner.name\n    }]);\n    \n    // Pass the roll key along with the config if we found it\n    if (rollKey && config) {\n      config = { ...config, ability: rollKey };\n    }\n    this._sendRollRequest(actor, owner, rollType, config);\n    \n    // Prevent the normal roll\n    return false;\n  }\n\n  /**\n   * Handle pre-roll hooks to intercept rolls\n   * @param {string} rollType - Type of roll being intercepted\n   * @param {Object} config - Roll configuration object (or Actor for initiative)\n   * @param {Object} dialog - Dialog options\n   * @param {Object} message - Message options\n   * @returns {boolean|void} - Return false to prevent the roll\n   */\n  static _handlePreRoll(rollType, config, dialog, message) {\n    // Only intercept on GM side\n    if (!game.user.isGM) return;\n    \n    LogUtil.log('RollInterceptor._handlePreRoll', ['Hook triggered', {\n      rollType,\n      configType: config?.constructor?.name,\n      hasIsRollRequest: config?.isRollRequest,\n      dialogIsRollRequest: dialog?.isRollRequest,\n      messageIsRollRequest: message?.isRollRequest\n    }]);\n    \n    // Special handling for initiative - first parameter is the actor\n    let actor;\n    if (rollType === 'initiative' && config instanceof Actor) {\n      actor = config;\n      // For initiative, check if second parameter (options) has isRollRequest flag\n      if (dialog?.isRollRequest) return;\n      // Also check third parameter for rollInitiative calls\n      if (message?.isRollRequest) return;\n    } else {\n      // Don't intercept if this is already a roll request (to avoid loops)\n      if (config.isRollRequest) return;\n      \n      // Extract actor from the config\n      actor = config.subject?.actor || config.subject || config.actor;\n    }\n    \n    // Check if roll interception is enabled\n    const SETTINGS = getSettings();\n    const rollInterceptionEnabled = SettingsUtil.get(SETTINGS.rollInterceptionEnabled.tag);\n    LogUtil.log('RollInterceptor._handlePreRoll', ['Roll interception enabled:', rollInterceptionEnabled]);\n    if (!rollInterceptionEnabled) return;\n    \n    if (!actor || actor.documentName !== 'Actor') {\n      LogUtil.log('RollInterceptor._handlePreRoll', ['No valid Actor found in roll config', config, rollType]);\n      return;\n    }\n    \n    // Check if the actor is owned by a player (not the GM)\n    const owner = this._getActorOwner(actor);\n    if (!owner || owner.id === game.user.id) {\n      // Actor is owned by GM or has no owner, allow normal roll\n      LogUtil.log('RollInterceptor._handlePreRoll', ['Actor is GM-owned or has no owner, allowing roll', {\n        rollType,\n        actorName: actor.name,\n        actorType: actor.type,\n        hasOwner: !!owner\n      }]);\n      return;\n    }\n    \n    // Check if the owner is online\n    if (!owner.active) {\n      // Player is offline - allow GM to roll normally\n      LogUtil.log('RollInterceptor._handlePreRoll', ['Player is offline, allowing GM roll', {\n        rollType,\n        actorName: actor.name,\n        ownerName: owner.name\n      }]);\n      return; // Don't intercept, let the roll proceed\n    }\n    \n    LogUtil.log('RollInterceptor._handlePreRoll', ['Intercepting GM roll for player character', { \n      rollType, \n      actorId: actor.id, \n      actorName: actor.name,\n      ownerId: owner.id,\n      ownerName: owner.name \n    }]);\n    \n    // For now, send the request immediately without showing dialog to GM\n    // TODO: Implement GM configuration dialog in Phase 1.2\n    this._sendRollRequest(actor, owner, rollType, config);\n    \n    // Prevent the normal roll\n    LogUtil.log('RollInterceptor._handlePreRoll', ['PREVENTING ROLL - returning false']);\n    return false;\n  }\n  \n  /**\n   * Show configuration dialog to GM before sending roll request\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   * @param {Object} dialog \n   * @param {Object} message \n   */\n  static async _showConfigurationDialog(actor, owner, rollType, config, dialog, message) {\n    try {\n      LogUtil.log('RollInterceptor._showConfigurationDialog', ['Showing dialog', { rollType, dialog: dialog.cls.name }]);\n      \n      // Create a wrapper function that will be called instead of the normal roll\n      const rollWrapper = async (finalConfig) => {\n        LogUtil.log('RollInterceptor._showConfigurationDialog', ['Dialog submitted with config', finalConfig]);\n        // Send the configured roll request to the player\n        this._sendRollRequest(actor, owner, rollType, finalConfig);\n        // Return a fake roll to satisfy the dialog\n        return new Roll(\"1d20\").evaluate({async: false});\n      };\n      \n      // Replace the roll method in config with our wrapper\n      const modifiedConfig = {\n        ...config,\n        _rollMethod: rollWrapper,\n        configured: false // Force dialog to show\n      };\n      \n      // Create and render the dialog\n      const DialogClass = dialog.cls;\n      const rollDialog = new DialogClass(modifiedConfig, dialog.options);\n      \n      // Render the dialog\n      const result = await rollDialog.render(true);\n      \n    } catch (error) {\n      LogUtil.log('RollInterceptor._showConfigurationDialog', ['Error showing configuration dialog', error]);\n      // Fallback: send request without configuration\n      this._sendRollRequest(actor, owner, rollType, config);\n    }\n  }\n\n  /**\n   * Get the player owner of an actor\n   * @param {Actor} actor \n   * @returns {User|null}\n   */\n  static _getActorOwner(actor) {\n    // Find the first active player who owns this actor\n    const ownership = actor.ownership || {};\n    \n    for (const [userId, level] of Object.entries(ownership)) {\n      if (level >= CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n        const user = game.users.get(userId);\n        if (user && !user.isGM) {\n          return user;\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Send a roll request to the player\n   * @param {Actor} actor \n   * @param {User} owner \n   * @param {string} rollType \n   * @param {Object} config \n   */\n  static _sendRollRequest(actor, owner, rollType, config) {\n    const SETTINGS = getSettings();\n    const skipDialogs = SettingsUtil.get(SETTINGS.skipDialogs.tag);\n    \n    // Extract the roll key based on roll type\n    let rollKey = null;\n    let activityId = null;\n    switch (rollType) {\n      case 'ability':\n      case 'save':\n        rollKey = config.ability;\n        break;\n      case 'skill':\n        rollKey = config.skill;\n        break;\n      case 'tool':\n        rollKey = config.tool;\n        break;\n      case 'attack':\n      case 'damage':\n        if (config.subject?.item) {\n          rollKey = config.subject.item.id;\n          // Find the appropriate activity\n          const activity = ActivityUtil.findActivityForRoll(config.subject.item, rollType);\n          if (activity) {\n            activityId = activity.id;\n          }\n        }\n        break;\n      case 'hitDie':\n        rollKey = config.denomination;\n        break;\n    }\n    \n    // Clean up config to remove non-serializable properties\n    const cleanConfig = {\n      advantage: config.advantage || false,\n      disadvantage: config.disadvantage || false,\n      situational: config.situational || 0,\n      parts: config.parts || [],\n      rollMode: config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n      elvenAccuracy: config.elvenAccuracy || false,\n      halflingLucky: config.halflingLucky || false,\n      reliableTalent: config.reliableTalent || false,\n      minimum: config.minimum,\n      maximize: config.maximize,\n      critical: config.critical,\n      fumble: config.fumble,\n      targetValue: config.targetValue,\n      fastForward: config.fastForward || false,\n      chatMessage: config.chatMessage !== false,\n      flavor: config.flavor,\n      title: config.title,\n      dialogOptions: config.dialogOptions,\n      messageData: config.messageData\n    };\n    \n    // Remove undefined values\n    Object.keys(cleanConfig).forEach(key => {\n      if (cleanConfig[key] === undefined) {\n        delete cleanConfig[key];\n      }\n    });\n    \n    // Build the request data according to Phase 1 spec\n    const requestData = {\n      type: \"rollRequest\",\n      requestId: foundry.utils.randomID(),\n      actorId: actor.id,\n      rollType,\n      rollKey,\n      activityId,\n      config: cleanConfig,\n      skipDialog: skipDialogs,\n      targetTokenIds: Array.from(game.user.targets).map(t => t.id),\n      preserveTargets: SettingsUtil.get(SETTINGS.useGMTargetTokens.tag)\n    };\n    \n    // Send request to player via socket\n    SocketUtil.execForUser('handleRollRequest', owner.id, requestData);\n    \n    // Show notification to GM\n    ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestSent', { \n      player: owner.name,\n      actor: actor.name \n    }));\n  }\n}","import { HOOKS_CORE } from \"../constants/Hooks.mjs\"; \nimport { LogUtil } from \"./LogUtil.mjs\"; \nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { MODULE_ID } from \"../constants/General.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\nimport RollRequestsMenu from \"./RollRequestsMenu.mjs\";\nimport { RollInterceptor } from \"./RollInterceptor.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\n\n/**\n * Main class handling core module initialization and setup\n * Manages module lifecycle, hooks, and core functionality\n */\nexport class Main {\n  static diceConfig = {};\n  static playerDiceConfigs = {};\n  static rollRequestsMenu = null;\n  static SOCKET_CALLS = {\n    receiveDiceConfig: \"receiveDiceConfig\",\n    getDiceConfig: \"getDiceConfig\",\n    handleRollRequest: \"handleRollRequest\"\n  };\n  \n  // Batch notification system for player-side\n  static pendingNotifications = [];\n  static notificationTimer = null;\n  static NOTIFICATION_BATCH_DELAY = 500; // ms to wait for additional notifications\n  /**\n   * Initialize the module and set up core hooks\n   * @static\n   */\n  static init(){\n    // Initialize socketlib\n    SocketUtil.initialize(Main.registerSocketCalls);\n    Hooks.once(HOOKS_CORE.INIT, () => { \n      const SETTINGS = getSettings();\n      LogUtil.log(\"Initiating module...\", [], true);\n      SettingsUtil.registerSettings();\n      document.body.classList.add(\"crlngn-rolls\");\n      Main.setDiceConfig();\n      \n      // Register sidebar tab hook to add chat control\n      Hooks.on(HOOKS_CORE.RENDER_SIDEBAR_TAB, Main.addChatControl);\n    });\n\n    Hooks.once(HOOKS_CORE.READY, () => {\n      LogUtil.log(\"Core Ready!!\", [ui?.sidebar, ui?.sidebar?._collapsed], true);\n      const SETTINGS = getSettings();\n      \n      var isDebugOn = SettingsUtil.get(SETTINGS.debugMode.tag);\n      if(isDebugOn){CONFIG.debug.hooks = true};\n      \n      // Initialize RollInterceptor for all users\n      RollInterceptor.initialize();\n      \n      // Add debug hooks for roll configuration\n      Hooks.on(\"dnd5e.buildRollConfig\", (app, config, formData, index) => {\n        LogUtil.log(\"Hook: dnd5e.buildRollConfig\", [\"BuildRollConfig hook fired\", {\n          app: app?.constructor?.name,\n          config,\n          formData,\n          index,\n          rollType: config?.rollType,\n          rollTypeConstructor: config?.rollType?.constructor?.name,\n          rolls: config?.rolls\n        }]);\n      });\n      \n      Hooks.on(\"dnd5e.postBuildRollConfig\", (processConfig, rollConfig, index, options) => {\n        LogUtil.log(\"Hook: dnd5e.postBuildRollConfig\", [\"PostBuildRollConfig hook fired\", {\n          processConfig,\n          rollConfig,\n          index,\n          app: options?.app?.constructor?.name,\n          formData: options?.formData,\n          rollType: processConfig?.rollType,\n          rollTypeConstructor: processConfig?.rollType?.constructor?.name,\n          rolls: processConfig?.rolls\n        }]);\n      });\n      \n      if(game.user.isGM){\n        Hooks.on(HOOKS_CORE.USER_CONNECTED, Main.onUserConnected);\n        // Only run this on the GM client\n        game.users.forEach(user => {\n          Main.onUserConnected(user);\n        });\n        Main.checkSideBar(!ui?.sidebar?._collapsed);\n      }else{\n        Main.getDiceConfig();\n      }\n    });\n  }\n\n  /**\n   * Adds or removes the sidebar-expanded class based on the isExpanded parameter\n   * @param {boolean} isExpanded \n   */\n  static checkSideBar = (isExpanded) => {\n    const body = document.querySelector(\"body\");\n    if(isExpanded){\n      body.classList.add(\"sidebar-expanded\");\n    }else{\n      body.classList.remove(\"sidebar-expanded\");\n    }\n  }\n\n  /**\n   * Request dice configuration from the connected user\n   * @param {*} user \n   * @returns \n   */\n  static onUserConnected(user) {\n    // Request dice configuration from the connected user\n    if (user.active && user.id !== game.user.id) {\n      LogUtil.log(\"onUserConnected\", [user]);\n      SocketUtil.execForUser(Main.SOCKET_CALLS.getDiceConfig, user.id);\n    }\n  }\n\n  static setDiceConfig(){\n    if(!game.user) return;\n    const clientSettings = game.settings.storage.get(\"client\"); \n    Main.diceConfig = clientSettings[`core.diceConfiguration`] || '';\n    LogUtil.log(`getDiceConfig`, [Main.diceConfig]);\n    return Main.diceConfig;\n  }\n  \n  // Add the getDiceConfig method that will be called on the player's client\n  static getDiceConfig() { \n    if(!game.user) return;\n    Main.setDiceConfig();\n    \n    if(game.user.isGM) {\n      SocketUtil.execForGMs(Main.SOCKET_CALLS.receiveDiceConfig, game.user.id, Main.diceConfig);\n      return;\n    }\n  }\n\n  // Add the receiveDiceConfig method that will be called on the GM's client\n  static receiveDiceConfig(userId, diceConfig) {\n    if (game.user?.isGM || userId===game.user.id){ // for GM or own user\n      // Store the dice configuration for this user\n      if (!Main.playerDiceConfigs) Main.playerDiceConfigs = {};\n      Main.playerDiceConfigs[userId] = diceConfig ? JSON.parse(diceConfig) : {};\n      \n      LogUtil.log(`Received dice configuration from user ${userId}`, [Main.playerDiceConfigs]);\n    }\n  }\n\n  /**\n   * Handle roll request from GM on player side\n   * @param {Object} requestData - The roll request data\n   */\n  static async handleRollRequest(requestData) {\n    // Only handle on player side\n    if (game.user.isGM) return;\n    \n    LogUtil.log(\"handleRollRequest\", [\"Received roll request\", requestData]);\n    LogUtil.log(\"handleRollRequest\", [\"Config details\", {\n      advantage: requestData.config?.advantage,\n      disadvantage: requestData.config?.disadvantage,\n      ability: requestData.config?.ability,\n      target: requestData.config?.target,\n      rollMode: requestData.config?.rollMode,\n      situational: requestData.config?.situational\n    }]);\n    \n    // Get the actor\n    const actor = game.actors.get(requestData.actorId);\n    if (!actor) {\n      LogUtil.log(\"handleRollRequest\", [\"Actor not found\", requestData.actorId]);\n      return;\n    }\n    \n    // Check if the user owns this actor\n    if (!actor.isOwner) {\n      LogUtil.log(\"handleRollRequest\", [\"User does not own actor\", requestData.actorId]);\n      return;\n    }\n    \n    // Apply GM targets if configured\n    if (requestData.preserveTargets && \n        requestData.targetTokenIds?.length > 0 && \n        game.user.targets.size === 0) {\n      // Set targets to match GM's\n      const tokens = requestData.targetTokenIds\n        .map(id => canvas.tokens.get(id))\n        .filter(t => t);\n      tokens.forEach(t => t.setTarget(true, {user: game.user}));\n    }\n    \n    // Add to pending notifications for batching\n    Main.pendingNotifications.push({\n      actor: actor.name,\n      rollType: requestData.rollType,\n      rollKey: requestData.rollKey,\n      gm: requestData.config.requestedBy || 'GM'\n    });\n    \n    // Clear existing timer and set new one\n    if (Main.notificationTimer) {\n      clearTimeout(Main.notificationTimer);\n    }\n    \n    Main.notificationTimer = setTimeout(() => {\n      Main._showBatchedNotifications();\n    }, Main.NOTIFICATION_BATCH_DELAY);\n    \n    LogUtil.log(\"handleRequestedRoll\", [\"sending roll request\"]);\n    // Execute the requested roll\n    Main._executeRequestedRoll(actor, requestData);\n  }\n\n  /**\n   * Show batched notifications to player\n   */\n  static _showBatchedNotifications() {\n    if (Main.pendingNotifications.length === 0) return;\n    \n    // Group by roll type\n    const notificationsByType = {};\n    for (const notif of Main.pendingNotifications) {\n      const key = `${notif.rollType}_${notif.rollKey || ''}`;\n      if (!notificationsByType[key]) {\n        notificationsByType[key] = {\n          rollType: notif.rollType,\n          rollKey: notif.rollKey,\n          actors: [],\n          gm: notif.gm\n        };\n      }\n      notificationsByType[key].actors.push(notif.actor);\n    }\n    \n    // Create notification messages\n    const entries = Object.values(notificationsByType);\n    \n    if (entries.length === 1 && entries[0].actors.length === 1) {\n      // Single roll request - use original format\n      const entry = entries[0];\n      ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestReceived', {\n        gm: entry.gm,\n        rollType: Main._getRollTypeDisplay(entry.rollType, entry.rollKey)\n      }));\n    } else {\n      // Multiple requests - create consolidated message\n      const messages = [];\n      for (const entry of entries) {\n        const rollTypeDisplay = Main._getRollTypeDisplay(entry.rollType, entry.rollKey);\n        const actorNames = entry.actors.join(\", \");\n        messages.push(`${rollTypeDisplay} (${actorNames})`);\n      }\n      \n      ui.notifications.info(game.i18n.format('CRLNGN_ROLL_REQUESTS.notifications.rollRequestsReceivedMultiple', {\n        gm: entries[0].gm,\n        requests: messages.join(\"; \")\n      }));\n    }\n    \n    // Clear pending notifications\n    Main.pendingNotifications = [];\n    Main.notificationTimer = null;\n  }\n  \n  /**\n   * Get display name for roll type with optional details\n   */\n  static _getRollTypeDisplay(rollType, rollKey) {\n    let display = game.i18n.localize(`CRLNGN_ROLLS.rollTypes.${rollType}`) || rollType;\n    \n    if (rollKey) {\n      switch (rollType) {\n        case 'skill':\n          display += ` (${CONFIG.DND5E.skills[rollKey]?.label || rollKey})`;\n          break;\n        case 'save':\n          display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n          break;\n        case 'ability':\n          display += ` (${CONFIG.DND5E.abilities[rollKey]?.label || rollKey})`;\n          break;\n        case 'tool':\n          // Try to get tool name\n          const toolData = CONFIG.DND5E.enrichmentLookup?.tools?.[rollKey];\n          if (toolData?.id) {\n            const toolItem = dnd5e.documents.Trait.getBaseItem(toolData.id, { indexOnly: true });\n            display += ` (${toolItem?.name || rollKey})`;\n          } else {\n            display += ` (${rollKey})`;\n          }\n          break;\n        case 'custom':\n          display = `${display}: ${rollKey}`;\n          break;\n      }\n    }\n    \n    return display;\n  }\n  \n  /**\n   * Execute a roll based on the request data\n   * @param {Actor} actor \n   * @param {Object} requestData \n   */\n  static async _executeRequestedRoll(actor, requestData) {\n    try {\n      // Build configuration matching D&D5e's expected structure\n      // The roll methods expect certain data in specific parameters\n      \n      // Base configuration object (first parameter for most roll methods)\n      const rollConfig = {\n        advantage: requestData.config.advantage || false,\n        disadvantage: requestData.config.disadvantage || false,\n        isRollRequest: true, // Custom flag to prevent re-interception\n        target: requestData.config.target, // DC value\n        event: { _fromGM: true } // Custom flag to identify GM requests\n      };\n      \n      // Add situational bonus if provided\n      if (requestData.config.situational) {\n        rollConfig.bonus = requestData.config.situational;\n      }\n      \n      // Dialog configuration (second parameter)\n      const dialogConfig = {\n        configure: !requestData.skipDialog,\n        options: {\n          defaultButton: requestData.config.advantage ? 'advantage' : \n                         requestData.config.disadvantage ? 'disadvantage' : 'normal'\n        }\n      };\n      \n      // Message configuration (third parameter)\n      const messageConfig = {\n        rollMode: requestData.config.rollMode || game.settings.get(\"core\", \"rollMode\"),\n        create: requestData.config.chatMessage !== false\n      };\n\n      LogUtil.log(\"_executeRequestedRoll\", [actor, requestData, rollConfig, dialogConfig, messageConfig]);\n      \n      switch (requestData.rollType) {\n        case 'ability':\n          // For ability checks, pass the ability key directly as first parameter\n          await actor.rollAbilityCheck(requestData.rollKey, {\n            ...rollConfig,\n            event: { _fromGM: true } // Custom flag\n          }, dialogConfig, messageConfig);\n          break;\n        case 'save':\n          // For saving throws, pass the ability key directly as first parameter\n          await actor.rollSavingThrow(requestData.rollKey, {\n            ...rollConfig,\n            event: { _fromGM: true }\n          }, dialogConfig, messageConfig);\n          break;\n        case 'skill':\n          // For skills, pass the skill configuration with ability override\n          await actor.rollSkill({\n            skill: requestData.rollKey,\n            ability: requestData.config.ability, // GM's ability choice\n            ...rollConfig\n          }, dialogConfig, messageConfig);\n          break;\n        case 'tool':\n          // For tools, pass the tool configuration\n          await actor.rollToolCheck({\n            tool: requestData.rollKey,\n            ability: requestData.config.ability, // GM's ability choice\n            ...rollConfig\n          }, dialogConfig, messageConfig);\n          break;\n        case 'concentration':\n          await actor.rollConcentration(rollConfig, dialogConfig, messageConfig);\n          break;\n        case 'attack':\n          if (requestData.rollKey) {\n            // Activities might need different handling\n            await ActivityUtil.executeActivityRoll(actor, 'attack', requestData.rollKey, requestData.activityId, {\n              ...rollConfig,\n              dialog: dialogConfig,\n              message: messageConfig\n            });\n          }\n          break;\n        case 'damage':\n          if (requestData.rollKey) {\n            await ActivityUtil.executeActivityRoll(actor, 'damage', requestData.rollKey, requestData.activityId, {\n              ...rollConfig,\n              dialog: dialogConfig,\n              message: messageConfig\n            });\n          }\n          break;\n        case 'itemSave':\n          if (requestData.rollKey) {\n            await ActivityUtil.executeActivityRoll(actor, 'itemSave', requestData.rollKey, requestData.activityId, {\n              ...rollConfig,\n              dialog: dialogConfig,\n              message: messageConfig\n            });\n          }\n          break;\n        case 'initiative':\n          // Initiative rolls require an active combat\n          if (!game.combat) {\n            ui.notifications.warn(game.i18n.localize(\"COMBAT.NoneActive\"));\n            break;\n          }\n          await actor.rollInitiativeDialog(rollConfig, dialogConfig, messageConfig);\n          break;\n        case 'deathsave':\n          await actor.rollDeathSave(rollConfig, dialogConfig, messageConfig);\n          break;\n        case 'hitDie':\n          rollConfig.denomination = requestData.rollKey;\n          await actor.rollHitDie(rollConfig, dialogConfig, messageConfig);\n          break;\n        case 'custom':\n          // For custom rolls, show dialog with readonly formula\n          await Main._handleCustomRoll(actor, requestData);\n          break;\n      }\n    } catch (error) {\n      LogUtil.log(\"_executeRequestedRoll\", [\"Error executing roll\", error]);\n      ui.notifications.error(game.i18n.localize('CRLNGN_ROLL_REQUESTS.notifications.rollError'));\n    }\n  }\n\n  /**\n   * Handle custom roll request\n   * @param {Actor} actor \n   * @param {Object} requestData \n   */\n  static async _handleCustomRoll(actor, requestData) {\n    const formula = requestData.rollKey; // Formula is stored in rollKey\n    \n    // Render the template with readonly formula\n    const content = await renderTemplate(`modules/${MODULE_ID}/templates/custom-roll-dialog.hbs`, {\n      formula: formula,\n      readonly: true\n    });\n    \n    const dialog = new Dialog({\n      title: game.i18n.localize(\"CRLNGN_ROLLS.ui.dialogs.customRollTitle\"),\n      content,\n      buttons: {\n        roll: {\n          icon: '<i class=\"fas fa-dice-d20\"></i>',\n          label: game.i18n.localize(\"Roll\"),\n          callback: async () => {\n            try {\n              // Create and evaluate the roll\n              const roll = new Roll(formula, actor.getRollData());\n              await roll.evaluate({async: true});\n              \n              // Post to chat\n              await roll.toMessage({\n                speaker: ChatMessage.getSpeaker({actor}),\n                flavor: game.i18n.localize(\"CRLNGN_ROLLS.rollTypes.custom\")\n              });\n            } catch (error) {\n              ui.notifications.error(game.i18n.format(\"CRLNGN_ROLLS.ui.notifications.invalidFormula\", {formula}));\n              LogUtil.log(\"_handleCustomRoll\", [\"Invalid formula\", formula, error]);\n            }\n          }\n        },\n        cancel: {\n          icon: '<i class=\"fas fa-times\"></i>',\n          label: game.i18n.localize(\"Cancel\")\n        }\n      },\n      default: \"roll\"\n    }, {\n      classes: [\"crlngn-rolls-dialog\", \"crlngn-custom-roll-dialog\"]\n    });\n    \n    dialog.render(true);\n  }\n\n  /**\n   * Register methods with socketlib for remote execution\n   */\n  static registerSocketCalls() {\n    SocketUtil.registerCall(Main.SOCKET_CALLS.getDiceConfig, Main.getDiceConfig);\n    SocketUtil.registerCall(Main.SOCKET_CALLS.receiveDiceConfig, Main.receiveDiceConfig);\n    SocketUtil.registerCall(Main.SOCKET_CALLS.handleRollRequest, Main.handleRollRequest);\n  }\n\n  /**\n   * Add the roll request icon to chat controls\n   * @param {SidebarTab} app - The sidebar tab application\n   * @param {jQuery} html - The rendered HTML\n   * @param {Object} options - Render options\n   */\n  static addChatControl(app, html, options) {\n    // Only add to chat tab for GM users\n    if (!game.user.isGM || app.id !== \"chat\") return;\n    \n    LogUtil.log(\"Adding chat control for chat tab\");\n    \n    // Get the HTML element from jQuery object\n    const htmlElement = html[0] || html;\n    \n    // Find the chat controls container\n    const chatControls = htmlElement.querySelector(\"#chat-controls\");\n    \n    if (!chatControls) {\n      LogUtil.log(\"Could not find #chat-controls\", []);\n      return;\n    }\n    \n    // Check if icon already exists\n    if (chatControls.querySelector('.roll-requests-icon')) {\n      return;\n    }\n    \n    // Get current settings to determine initial state\n    const SETTINGS = getSettings();\n    const rollRequestsEnabled = SettingsUtil.get(SETTINGS.rollRequestsEnabled.tag);\n    \n    // Create the roll request icon\n    const rollRequestIcon = document.createElement('a');\n    rollRequestIcon.id = \"crlngn-requests-icon\";\n    rollRequestIcon.setAttribute(\"data-tooltip-direction\", \"RIGHT\");\n    rollRequestIcon.className = `chat-control-icon roll-requests-icon${rollRequestsEnabled ? ' active' : ''}`;\n    rollRequestIcon.title = game.i18n.localize('CRLNGN_ROLLS.ui.menus.rollRequestsTitle');\n    rollRequestIcon.innerHTML = `<i class=\"fas fa-bolt${rollRequestsEnabled ? '' : '-slash'}\"></i>`;\n    \n    // Find the first .chat-control-icon (the d20 dice icon)\n    const firstChatControlIcon = chatControls.querySelector('.chat-control-icon');\n    \n    if (firstChatControlIcon) {\n      // Insert before the d20 dice icon\n      firstChatControlIcon.parentNode.insertBefore(rollRequestIcon, firstChatControlIcon);\n    } else {\n      // If no chat-control-icon found, append to chat controls\n      chatControls.appendChild(rollRequestIcon);\n    }\n    \n    // Add click listener\n    rollRequestIcon.addEventListener(\"click\", Main.toggleRollRequestsMenu);\n    \n    LogUtil.log(\"Added roll requests icon to chat controls\", []);\n  }\n\n  /**\n   * Toggle the roll requests menu open/closed\n   */\n  static toggleRollRequestsMenu() {\n    if (!Main.rollRequestsMenu) {\n      Main.rollRequestsMenu = new RollRequestsMenu();\n      Main.rollRequestsMenu.render(true);\n    } else {\n      // Toggle visibility of existing menu\n      if (Main.rollRequestsMenu.rendered) {\n        Main.rollRequestsMenu.close();\n        LogUtil.log(\"Closed roll requests menu\", []);\n      } else {\n        // Reinitialize from selected tokens before rendering\n        Main.rollRequestsMenu._initializeFromSelectedTokens();\n        Main.rollRequestsMenu.render(true);\n        LogUtil.log(\"Opened roll requests menu\", []);\n      }\n    }\n  }\n\n  /**\n   * Update the roll requests icon based on enabled state\n   */\n  static updateRollRequestsIcon(enabled) {\n    const icon = document.querySelector('#crlngn-requests-icon i');\n    if (icon) {\n      icon.className = `fas fa-bolt${enabled ? '' : '-slash'}`;\n    }\n  }\n\n}\n","import \"./styles/vars.css\";\nimport \"./styles/main.css\";\n\nimport { Main } from \"./components/Main.mjs\";\n\n// Initialize the module\nMain.init();\n"],"names":["HOOKS_CORE","HOOKS_SOCKET","HOOKS_DND5E","MODULE_ID","DEBUG_TAG","ROLL_REQUEST_OPTIONS","MODULE","_LogUtil","ref","data","bypassSettings","debugSetting","strRef","options","_a","__publicField","LogUtil","SETTING_INPUT","SETTING_SCOPE","getSettings","SettingsUtil","SETTINGS","entry","setting","settingObj","value","settingName","moduleName","selectedSetting","newValue","requestsIcon","_SocketUtil","hasRolls","r","result","rolls","roll","callbackFunc","name","func","callback","handler","parameters","userId","executionKey","resp","error","SocketUtil","ActivityUtil","item","rollType","activities","attackActivities","damageAttackActivities","damageActivities","saveActivities","itemSaveActivities","activityType","actor","itemId","activityId","config","_b","_c","_d","activity","a","dialogConfig","workflow","damageRoll","formulas","part","f","defaultConfig","defaultOptions","formula","ignoreCrit","damageType","GMRollConfigDialog","message","dialog","partId","context","configSection","templateData","template","wrapper","button","event","action","form","formData","dcValue","actors","rollKey","_e","_f","showDC","rollClass","rollConfig","messageConfig","app","resolve","finalConfig","level","user","GMSkillToolConfigDialog","skillConfig","_g","defaultAbility","skill","RollRequestsMenu","menu","pcActors","npcActors","currentScene","actorData","token","rollRequestsEnabled","skipDialogs","currentActors","selectAllOn","requestTypes","key","option","rollTypes","selectedOption","firstActorId","allTools","toolData","label","toolItem","str","b","rollData","configData","system","stats","controlled","html","tabs","tab","selectBtn","requestTypesContainer","listItem","customEvent","rollTypesContainer","enabled","Main","skip","selectAll","lockIcon","controlledTokens","isPC","actorId","selected","tokens","t","selectAllCheckbox","checkboxes","checkedCount","cb","requestType","rollOption","selectedActorIds","validActorIds","isNPC","rollMethodName","actorIdsToRoll","id","actorsWithInitiative","actorIdsWithInitiative","combatant","actorsNeedingDeathSaves","actorsSkippingDeathSaves","hp","deathSaves","successes","failures","owner","successfulRequests","ownership","suppressNotification","requestData","requestsByPlayer","rollTypeKey","rollTypeName","playerData","actorNames","playerSummaries","deathResult","position","content","htmlElement","formulaInput","diceCounts","die","parts","dieType","count","RollInterceptor","hookName","hookId","rollInterceptionEnabled","modifiedConfig","DialogClass","cleanConfig","_Main","isDebugOn","index","processConfig","clientSettings","diceConfig","notificationsByType","notif","entries","messages","rollTypeDisplay","display","chatControls","rollRequestIcon","firstChatControlIcon","icon","isExpanded","body"],"mappings":"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"}