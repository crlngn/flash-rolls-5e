name: Release to FoundryVTT

on:
  release:
    types: [published]

permissions:
  contents: write  # Grants permission to upload assets to the release

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Allows pushing changes back to repo

      - name: Extract Repository Name and Version
        run: |
          REPO_NAME=$(basename $GITHUB_REPOSITORY)
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Version updates are handled by the npm run bump script before release

      - name: Get Compatibility Versions
        id: get_compatibility
        run: |
          MIN_VERSION=$(jq -r .compatibility.minimum src/module.json)
          VERIFIED_VERSION=$(jq -r .compatibility.verified src/module.json)
          MAX_VERSION=$(jq -r .compatibility.maximum src/module.json)
          echo "MIN_VERSION=$MIN_VERSION" >> $GITHUB_ENV
          echo "VERIFIED_VERSION=$VERIFIED_VERSION" >> $GITHUB_ENV
          echo "MAX_VERSION=$MAX_VERSION" >> $GITHUB_ENV

      - name: Prepare Release Artifacts
        run: |
          mv dist "$REPO_NAME"
          zip -r module.zip "$REPO_NAME"
          mv "$REPO_NAME" dist  # Rename back to prevent issues later

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            module.zip
            dist/module.json
            news/module-updates.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Latest Release to FoundryVTT
        env:
          FOUNDRY_PACKAGE_API_KEY: ${{ secrets.FOUNDRY_PACKAGE_API_KEY }}
        run: |
          echo "Publishing latest release ($VERSION) to FoundryVTT..."
          API_RESPONSE=$(curl -s -X POST "https://api.foundryvtt.com/_api/packages/release_version/" \
            -H "Content-Type: application/json" \
            -H "Authorization: $FOUNDRY_PACKAGE_API_KEY" \
            -d '{
              "id": "'"$REPO_NAME"'",
              "release": {
                "version": "'"$VERSION"'",
                "manifest": "https://github.com/${{ github.repository }}/releases/latest/download/module.json",
                "notes": "https://github.com/${{ github.repository }}/releases/tag/v'"$VERSION"'",
                "compatibility": {
                  "minimum": "${{env.MIN_VERSION}}",
                  "verified": "${{env.VERIFIED_VERSION}}",
                  "maximum": "${{env.MAX_VERSION}}"
                }
              }
            }')
          echo "Latest Release API Response: $API_RESPONSE"

  # Job for Discord notification
  notify_discord:
    runs-on: ubuntu-latest
    needs: release  # This ensures Discord notification runs after the release job completes
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Get Release Info
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });
            const releaseData = {
              body: release.data.body || "No release notes provided"
            };
            return JSON.stringify(releaseData);
          result-encoding: string

      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            **New Release for Flash Rolls 5e**
            
            **Repository:** ${{ github.repository }}
            **Version:** ${{ github.ref_name }}
            
            ${{ fromJson(steps.get_release.outputs.result).body }}
            
            **Release:** https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}
            **Manifest URL:** https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/module.json